<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.4/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.4/ http://www.mediawiki.org/xml/export-0.4.xsd" version="0.4" xml:lang="en">
  <siteinfo>
    <sitename>ControlTier</sitename>
    <base>http://doc36.controltier.org/wiki/Main_Page</base>
    <generator>MediaWiki 1.16.0</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2" case="first-letter">Media</namespace>
      <namespace key="-1" case="first-letter">Special</namespace>
      <namespace key="0" case="first-letter" />
      <namespace key="1" case="first-letter">Talk</namespace>
      <namespace key="2" case="first-letter">User</namespace>
      <namespace key="3" case="first-letter">User talk</namespace>
      <namespace key="4" case="first-letter">ControlTier</namespace>
      <namespace key="5" case="first-letter">ControlTier talk</namespace>
      <namespace key="6" case="first-letter">File</namespace>
      <namespace key="7" case="first-letter">File talk</namespace>
      <namespace key="8" case="first-letter">MediaWiki</namespace>
      <namespace key="9" case="first-letter">MediaWiki talk</namespace>
      <namespace key="10" case="first-letter">Template</namespace>
      <namespace key="11" case="first-letter">Template talk</namespace>
      <namespace key="12" case="first-letter">Help</namespace>
      <namespace key="13" case="first-letter">Help talk</namespace>
      <namespace key="14" case="first-letter">Category</namespace>
      <namespace key="15" case="first-letter">Category talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>3-5 Development</title>
    <id>1877</id>
    <redirect />
    <revision>
      <id>12540</id>
      <timestamp>2010-04-12T15:46:22Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>moved [[3-5 Development]] to [[3.5-3.6 Development]]</comment>
      <text xml:space="preserve">#REDIRECT [[3.5-3.6 Development]]</text>
    </revision>
  </page>
  <page>
    <title>3.5-3.6 Development</title>
    <id>1701</id>
    <revision>
      <id>15637</id>
      <timestamp>2011-10-27T17:17:13Z</timestamp>
      <contributor>
        <username>Gschueler</username>
        <id>8</id>
      </contributor>
      <minor/>
      <comment>Reverted edits by [[Special:Contributions/Jeraldinesewell|Jeraldinesewell]] ([[User talk:Jeraldinesewell|talk]]) to last revision by [[User:Ahonor|Ahonor]]</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Roadmap&lt;/categorytree&gt;
Proposed changes for &quot;Vandelay&quot; development phase (eg, versions 3.5-3.6). See the [[Roadmap wishlist]] for motivation.
* Expected 3.5.0 release date: May 2010

* [http://www.google.com/calendar/hosted/dtosolutions.com/embed?src=dtosolutions.com_cp62m4u8cqsfs5t8icm1nspa1g%40group.calendar.google.com&amp;ctz=America/Los_Angeles 3.5-3.6 Development Timeline calendar]

Task icons: [[Image:Ntask_done.png|Done]](done), [[Image:Ntask_1.png|Prio 1]](p1), [[Image:Ntask_2.png|Prio 2]](p2), [[Image:Ntask_3.png|Prio 3]](p3), [[Image:Ntask.png|No prio]] (not prioritized)

==CTL Center UI==

Motivated by [[Roadmap_wishlist#Operations_console]] concept the application will provide

[[Image:Ntask_done.png|Done]] Rationalized user interface focussing on Jobs, Resources Events and Admin. Provides global navigation scheme. 

[[Image:Ntask_done.png|Done]]  Unified webapp subsuming Jobcenter, Reportcenter

[[Image:Ntask_done.png|Done]]  Resource listings containing Nodes per project

[[Image:Ntask_done.png|Done]]  Command execution for both script and dispatcher commands

[[Image:Ntask_done.png|Done]]  Jobs listing

[[Image:Ntask_done.png|Done]]  Event log viewing

[[Image:Ntask_done.png|Done]]  ACL for Job-level CRUD+Run,Kill

[[Image:Ntask_done.png|Done]] Variable list for option defaults in job definition (both static and remote) {{Feature|2992539}} (release 3.5.1)

[[Image:Ntask_done.png|Done]] Job onsuccess/onfailure email notification {{Feature|3003718}} (release 3.5.1)

[[Image:Ntask_done.png|Done]] Workflow job builder GUI. Every job becomes a workflow. (release 3.5.3)

[[Image:Ntask_done.png|Done]] Option default list builder GUI  (release 3.5.3)

[[Image:Ntask_done.png|Done]] Retry button to run job on failed nodes {{Feature|3026093}}  (release 3.5.3)

[[Image:Ntask_done.png|Done]] Multiple time trigger jobs (cron expressions) {{Feature|3007014}}  (release 3.5.3)

[[Image:Ntask_2.png|TODO P2]] Expose Setting data in the Resources view

; Mockups
: [[File:CTL_Center_mockups.pdf]] (Updated 04/25/2010)

==Command dispatcher==
===Executing via central command dispatcher hosted on server===
[[Image:Ntask_done.png|Done]] Allow the [[ctl]] and [[ctl-exec]] commands run commands through the centralized command dispatcher (eg, like jobcenter)

[[Image:Ntask_done.png|Done]] Make the [[Command dispatcher]] a service

[[Image:Ntask_done.png|Done]] Add a new option to simulate a &quot;Run and forget job&quot;. 

Example: Here, &quot;--queue&quot; is used:
: EG: &lt;code&gt;ctl-exec --queue -- longrunningcommand&lt;/code&gt;
: EG: &lt;code&gt;ctl --queue -I .* -t Service -r simple -c Restart &lt;/code&gt;

[[Image:Ntask_done.png|Done]] All ctl-exec executions logged as reports {{Feature|3000924}} (release 3.5.1)

[[Image:Ntask_2.png|TODO P2]] Expose job and resource data to command context

==Dispatch queue==
Clarify the semantics of a &quot;Job&quot; to mean a command execution in the central dispatcher queue. Could be considered a background process (like in bash)

[[Image:Ntask_done.png|Done]]  Support &quot;queue a command&quot; function from command line utilities like [[ctl]]. The &quot;--queue,-Q&quot; signifies run it through the central dispatcher:
: Example: &lt;code&gt;ctl -Q -m textutil -c tail -- -file /logfile&lt;/code&gt;

[[Image:Ntask_done.png|Done]]  Support a command line listing of the currently running commands and their state, who's running them
: Example: 
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ ctl-queue
Queue: 2 items
[9]  adhoc script job &lt;http://strongbad:8080/ctlcenter/execution/follow/9&gt;
[10] adhoc script job &lt;http://strongbad:8080/ctlcenter/execution/follow/10&gt;
&lt;/syntaxhighlight&gt;
[[Image:Ntask_done.png|Done]]  Support command line ability to kill a running job
: Example: 
&lt;syntaxhighlight lang=&quot;bash&quot;&gt; 
$ ctl-queue kill -jid 10
ctl-queue kill: success. [10] Job status: killed
&lt;/syntaxhighlight &gt;

[[Image:Ntask_done.png|Done]]  Command line utility to run jobs already defined. Use &quot;ctl-jobs&quot; to list them via CLI
: Example: 
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
usage: ctl-run : start running a Job on the server
               ctl-run -i &lt;id&gt;: Run a job by ID immediately
               ctl-run -j &lt;group/name&gt;: Run a job by Name immediately. Group must be specified  if name is not unique.
               ctl-run -I &lt;include&gt; -X &lt;exclude&gt; [-i/-j ...]: Specify node filters and run a  Job
               ctl-run -i &lt;id&gt; -- &lt;arguments...&gt;: Specify commandline arguments to the Job
&lt;/syntaxhighlight&gt;

===Job workflows===
[[Image:Ntask_done.png|Done]] Based roughly on the current [[job.xml]] definition, a job workflow can execute a sequence of commands.  Use a &lt;code&gt;sequence&lt;/code&gt; element to contain a series of &lt;code&gt;command&lt;/code&gt; elements. 
&lt;syntaxhighlight&gt;
  &lt;job&gt;
    &lt;name&gt;Test Workflow Job 3&lt;/name&gt;
    &lt;description&gt;&lt;/description&gt;
    &lt;additional /&gt;
    &lt;loglevel&gt;INFO&lt;/loglevel&gt;
    &lt;context&gt;
      &lt;project&gt;demo&lt;/project&gt;
    &lt;/context&gt;
    &lt;nodefilters/&gt;
    &lt;sequence threadcount=&quot;1&quot; keepgoing=&quot;true&quot;&gt;
      &lt;command name=&quot;exec&quot; module=&quot;shellutil&quot;&gt;
        &lt;arg line=&quot;-executable bash -script who&quot; /&gt;
      &lt;/command&gt;
      &lt;command &gt;
          &lt;exec&gt;sleep 10 &lt;/exec&gt;
      &lt;/command&gt;
      &lt;command &gt;
          &lt;script&gt;&lt;![CDATA[#!/bin/bash
echo this is a test
echo whatever
exit 0 ]]&gt;&lt;/script&gt;
      &lt;/command&gt;
      &lt;command &gt;
          &lt;scriptfile&gt;/Users/alexh/test.sh&lt;/scriptfile&gt;
          &lt;scriptargs&gt;-whatever something&lt;/scriptargs&gt;
      &lt;/command&gt;
      &lt;command &gt;
          &lt;jobref name=&quot;Test Workflow Job 1&quot; /&gt;
      &lt;/command&gt;
    &lt;/sequence&gt;
    &lt;dispatch&gt;
      &lt;threadcount&gt;1&lt;/threadcount&gt;
      &lt;keepgoing&gt;true&lt;/keepgoing&gt;
    &lt;/dispatch&gt;
  &lt;/job&gt;

&lt;/syntaxhighlight&gt;

The example above shows five commands, each being a different style. The first command calls the &quot;exec&quot; command from the &quot;shellutil&quot; module. The second command calls a system command, &quot;sleep 10&quot;. The third command runs a script expression. The forth command executes a scriptfile. Lastly, the fifth command executes another job called &quot;Test Workflow Job 1&quot; (thus enabling job chaining).

[[Image:Ntask_done.png|Done]]  Support &lt;code&gt;options&lt;/code&gt; for job workflows. Expose the option values as Java style properties, ant style filter tokens and shell environment variables. (release 3.5.3, {{Feature|3023614}} )

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
 &lt;job&gt;
    &lt;id&gt;4&lt;/id&gt;
    &lt;name&gt;Test Workflow Options 1&lt;/name&gt;
    &lt;description/&gt;
    &lt;additional/&gt;
    &lt;loglevel&gt;INFO&lt;/loglevel&gt;
    &lt;context&gt;
      &lt;project&gt;demo&lt;/project&gt;
      &lt;options&gt;
        &lt;option name=&quot;name&quot; enforcedvalues=&quot;false&quot; required=&quot;true&quot; valuesUrl=&quot;file:/tmp/names.json&quot; description=&quot;Your name&quot;/&gt;
        &lt;option name=&quot;port&quot; enforcedvalues=&quot;false&quot; required=&quot;true&quot; regex=&quot;\d{1,5}&quot; description=&quot;port number [tcp]&quot;/&gt;
        &lt;option name=&quot;sex&quot; enforcedvalues=&quot;true&quot; required=&quot;true&quot; values=&quot;female,male&quot; description=&quot;Your sex&quot;/&gt;
      &lt;/options&gt;
    &lt;/context&gt;
    &lt;sequence threadcount=&quot;1&quot; keepgoing=&quot;false&quot;&gt;
      &lt;command name=&quot;listening&quot; module=&quot;netutil&quot;&gt;
        &lt;arg line=&quot;-port ${option.port}&quot;/&gt;
      &lt;/command&gt;
      &lt;command&gt;
        &lt;exec&gt;echo @option.port@&lt;/exec&gt;
      &lt;/command&gt;
      &lt;command&gt;
        &lt;exec&gt;echo Nice to meet you ${option.name} who is a $CT_OPTION_SEX&lt;/exec&gt;
      &lt;/command&gt;
  &lt;/sequence&gt;
    &lt;nodefilters excludeprecedence=&quot;true&quot;&gt;
      &lt;include&gt;
        &lt;name&gt;strongbad&lt;/name&gt;
      &lt;/include&gt;
    &lt;/nodefilters&gt;
    &lt;dispatch&gt;
      &lt;threadcount&gt;1&lt;/threadcount&gt;
      &lt;keepgoing&gt;false&lt;/keepgoing&gt;
    &lt;/dispatch&gt;
  &lt;/job&gt;
&lt;/syntaxhighlight&gt;
&lt;!--
[[Image:Ntask_3.png|TODO P3]]  Support &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;unless&lt;/code&gt;, &lt;code&gt;equals&lt;/code&gt; and &lt;code&gt;return&lt;/code&gt; attributes to control workflow execution
: Example:
&lt;syntaxhighlight&gt;
   &lt;job&gt;
      &lt;name&gt;dev1-myserver - Deploy Job&lt;/name&gt;
      &lt;description&gt;Deploy the dev1 server&lt;/description&gt;
      &lt;additional/&gt;
      &lt;loglevel&gt;WARN&lt;/loglevel&gt;
      &lt;group&gt;DEV/Deployment&lt;/group&gt;
      &lt;resource&gt;
	&lt;depot&gt;test2&lt;/depot&gt;
	&lt;type&gt;MyService&lt;/type&gt;
	&lt;name&gt;dev1-myserver&lt;/name&gt;
      &lt;/resource&gt;
      &lt;sequence threadcount=&quot;1&quot;&gt;
	
	&lt;command name=&quot;cmd1&quot; return=&quot;retval&quot;&gt;
	  &lt;arg line=&quot;-param1 ${opts.message} -param2 val2&quot;/&gt;
	&lt;/command&gt;
	
	&lt;command module=&quot;TypeX&quot; name=&quot;cmd2&quot; if=&quot;retval&quot; return=&quot;something&quot;/&gt;
	
	&lt;command module=&quot;TypeY&quot; name=&quot;cmd3&quot; unless=&quot;something&quot; if=&quot;retval&quot; equals=&quot;floog&quot;&gt;
	  &lt;arg line=&quot;-saluation ${opts.message} -language english&quot;/&gt;
	&lt;/command&gt;
      &lt;/sequence&gt;    
      &lt;dispatch&gt;
	&lt;threadcount&gt;1&lt;/threadcount&gt;
	&lt;keepgoing&gt;false&lt;/keepgoing&gt;
      &lt;/dispatch&gt;
   &lt;/job&gt;
&lt;/syntaxhighlight&gt;
--&gt;

===Jobs shell utility===
[[Image:Ntask_done.png|Done]] Create a shell utility used to list and load jobs 
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
usage: ctl-jobs [&lt;action&gt;] [options...]: list Jobs on the server, or upload Jobs  to the server from a file
                List action (default):
                ctl-jobs [list] [query options] : list jobs matching the query, or all available
                ctl-jobs [list] --name &lt;name&gt; : Match jobs with the given name
                ctl-jobs [list] [query options] --file &lt;output&gt; : Save matched Jobs to output  file as XML
                Load action:
                ctl-jobs load --file &lt;file&gt; : load jobs stored in XML file
&lt;/syntaxhighlight&gt;

==Naming==

[[Image:Ntask_done.png|Done]] Rename occurrences of the word &quot;entity&quot; with the word &quot;resource&quot; as discussed in [[Conceptual terms analysis]]

[[Image:Ntask_done.png|Done]] Rename occurrences of the word &quot;depot&quot; with the word &quot;project&quot; as discussed in [[Conceptual terms analysis]]

[[Image:Ntask_done.png|Done]] Rename &quot;deployments&quot; (now &quot;resources&quot;) and &quot;projects&quot; (now &quot;projects&quot;) in CTL_BASE directory hierarchy 

==Client-side project administration==
Broaden the role of the client side project administration tool.

[[Image:Ntask_done.png|Done]]  Rename ctl-project to &quot;ctl-project&quot;.

[[Image:Ntask_done.png|Done]]  Support include, exclude nodedispatch flags to ctl-project
: Example:  &lt;code&gt;ctl-project -p demo -I .* -X adminhost -a create&lt;/code&gt;

&lt;!--
[[Image:Ntask_3.png|TODO P3]] External nodes list file used as input to ctl-project:
: The '-N &lt;file&gt;' provides an alternative nodes.properties file 
:&lt;code&gt;$ ctl-project -N dav://nodes/etc/nodes.properties -I .* -a create -p demo&lt;/code&gt;
: the &quot;demo&quot; project is created across all nodes defined in: dav://nodes/etc/nodes.properties


[[Image:Ntask_3.png|TODO P3]] Module installation: add  support for module installs (replaces need for ctl -m Managed-Entity -c Install-Module -- -module &lt;module&gt;)
: Example: &lt;code&gt;ctl-project -I .* -p demo -a install --module MyType&lt;/code&gt;

[[Image:Ntask_3.png|TODO P3]] Automate module installation. Dynamically pull module from file share where needed based for module context executions only.

[[Image:Ntask_3.png|TODO P3]] Resource listing: Ability to list nodes defined in a project

[[Image:Ntask_3.png|TODO P3]] Resource listing: Ability to list resources assigned to a Node or across all Nodes
: Example: &lt;code&gt;ctl-project [--list-resources] [--list-nodes]&lt;/code&gt;
--&gt;

See also: [[#Bootstrapping_support]]

==Resource model text definition==

[[Image:Ntask_done.png|Done]] Introduce  CTL_BASE/projects/&lt;project&gt;/etc/resources.xml to define the set of nodes in the project. In 3.5.0

[[Image:Ntask_done.png|Done]] Replace project [[nodes.properties]] with resources.xml file to drive network dispatch. In 3.5.0

[[Image:Ntask_done.png|Done]] Replace project [[resources.properties]] with resources.xml file to drive network dispatch. In 3.5.0

[[Image:Ntask_done.png|Done]] Rename ProjectBuilder#*-resources to *-resources. Eg (load-resources &amp;rarr; load-resources). In 3.5.1

==Nodes==
===Node registration===

[[Image:Ntask_done.png|Done]]  Support configuration to resources data from external URLs
&lt;!--
[[Image:Ntask_3.png|TODO P3]] The [[ctl-setup]] command should register the CTL instance's node info to the server

[[Image:Ntask_3.png|TODO P3]] Information should be accessible when bootstrapping Nodes for new projects

[[Image:Ntask_3.png|TODO P3]] Data pushed to projects via some Workbench action. May be a subset of resources.xml or could be more generalized.

[[Image:Ntask_3.png|TODO P3]] Optional configuration to be synchronized, otherwise projects stay independent from global node registry

[[Image:Ntask_3.png|TODO P3]] One-way synchronization only (from global &amp;rarr; projects)
--&gt;

===Amazon EC2 integration===
[[Image:Ntask_2.png|TODO P2]] Support importing EC2 nodes as node registrations

&lt;!--
==Command types==

===Enhance Workflow command-type===
[[Image:Ntask_3.png|TODO P3]] Extend WorkflowCommand type to support task sequences containing: command,module,options, if,unless,equals, property setting  attributes

&lt;table class=&quot;wikitable&quot;&gt;
	&lt;caption&gt;hypothetical example&lt;/caption&gt;
	&lt;tr&gt;
		&lt;td&gt;
			&lt;ol&gt;
		&lt;li&gt;cmd1: Specifies its own argument line and returns a result called &quot;retval&quot;&lt;/li&gt;
		&lt;li&gt; cmd2: Calls a command from another module and only runs if the &quot;retval&quot; property was set by cmd1. Its arguments are generated via copy-opts and depend on the options passed to aWorkflow&lt;/li&gt;
		&lt;li&gt;cmd3: Runs a command in another module but only if retval equals 'floog' and the &quot;something&quot; property is not set.&lt;/li&gt;
	&lt;/ol&gt;
	&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;command name=&quot;aWorkflow&quot;
	 description=&quot;a workflow example&quot;
	 command-type=&quot;WorkflowCommand&quot;
	 error-handler-type=&quot;HANDLER&quot;
	 &gt;
  &lt;opts&gt;
    &lt;opt parameter=&quot;message&quot;
	 description=&quot;a param&quot;
	 required=&quot;false&quot;
	 type=&quot;string&quot;
	 default=&quot;hello&quot; /&gt;
  &lt;/opts&gt;
  &lt;sequence threadcount=&quot;1&quot;&gt;

    &lt;command name=&quot;cmd1&quot; return=&quot;retval&quot;&gt;
      &lt;arg line=&quot;-param1 ${opts.message} -param2 val2&quot;/&gt;
    &lt;/command&gt;

    &lt;command module=&quot;TypeX&quot; name=&quot;cmd2&quot; if=&quot;retval&quot; return=&quot;something&quot;/&gt;

    &lt;command module=&quot;TypeY&quot; name=&quot;cmd3&quot; unless=&quot;something&quot; if=&quot;retval&quot; equals=&quot;floog&quot;&gt;
      &lt;arg line=&quot;-saluation ${opts.message} -language english&quot;/&gt;
    &lt;/command&gt;

  &lt;/sequence&gt;

  &lt;error-handler quiet=&quot;false&quot;&gt;
    &lt;command name=&quot;aHandler&quot;/&gt;
    &lt;notify email=&quot;NAME@HOST&quot;&gt;
      &lt;subject&gt;SUBJECT&lt;/subject&gt;
      &lt;message-file&gt;PATH&lt;/message-file&gt;
    &lt;/notify&gt;
    &lt;report&gt;REPORT MESSAGE&lt;/report&gt;
  &lt;/error-handler&gt;

  &lt;success-handler notify-email=&quot;NAME@HOST&quot;&gt;
    &lt;notify-subject&gt;SUBJECT&lt;/notify-subject&gt;
    &lt;notify-message-file&gt;PATH&lt;/notify-message-file&gt;
  &lt;/success-handler&gt;
&lt;/command&gt;
&lt;/syntaxhighlight&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

=== Generalize Command command-type===
[[Image:Ntask_2.png|TODO P2]] Consolidate command types, AntCommand,BsfCommand,BatCommand,DaemonCommand, into one generalized 'Command' that builds on the [[Shell-exec Task Reference|shell-exec]] task. 

[[Image:Ntask_3.png|TODO P3]] Provide necessary GUI support in Workbench type editor

&lt;table class=&quot;wikitable&quot;&gt;
	&lt;caption&gt;Several hypothetical command definitions&lt;/caption&gt;
	&lt;tr&gt;
		&lt;td&gt;
			Several scripting implementations are shown: ant, bourne, groovy. Either &lt;code&gt;lang&lt;/code&gt; or &lt;code&gt;executable&lt;/code&gt; attributes can be used to specify script runtime to use. The &quot;lang&quot; attribute is bound to BSF.
		&lt;/td&gt;	
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;commands&gt;
  &lt;command name=&quot;anteater&quot;
	   description=&quot;an ant command example&quot;
	   command-type=&quot;Command&quot; &gt;  
    &lt;exec language=&quot;ant&quot;&gt;

      &lt;echo message=&quot;hello&quot;/&gt;

    &lt;/exec&gt;
  &lt;/command&gt;

  &lt;command name=&quot;shellout&quot;
	   description=&quot;a shell command example&quot;
	   command-type=&quot;Command&quot;  &gt;
    &lt;exec executable=&quot;/bin/sh&quot; exportproperties=&quot;resource.&quot;&gt;
      &lt;script&gt;echo hello&lt;/script&gt;
    &lt;/exec&gt;
  &lt;/command&gt;

  &lt;command name=&quot;shellout2&quot;
	   description=&quot;a shell command example&quot;
	   command-type=&quot;Command&quot;  &gt;
    &lt;exec executable=&quot;/bin/sh&quot; argline=&quot;-vx&quot; 
	  exportproperties=&quot;resource.&quot;
	  dir=&quot;${user.dir}&quot;
	  spawn=&quot;true&quot;
	  &gt;
      &lt;scriptfile&gt;/usr/local/myscript.sh&lt;/scriptfile&gt;
    &lt;/exec&gt;
  &lt;/command&gt;

  &lt;command name=&quot;groovy&quot;
	   description=&quot;a groovy command example&quot;
	   command-type=&quot;Command&quot;  &gt;
    &lt;exec language=&quot;groovy&quot;&gt;
      &lt;script&gt;&lt;![CDATA[
           println &quot;groovy says ${project.properties['opts.message']} \n&quot;
     ]]&gt;&lt;/script&gt;
    &lt;/exec&gt;
    &lt;opts&gt;
      &lt;opt parameter=&quot;message&quot; description=&quot;option name&quot; required=&quot;false&quot;
	   property=&quot;opts.message&quot; type=&quot;string&quot; default=&quot;Hello&quot;/&gt;
    &lt;/opts&gt;
  &lt;/command&gt;
&lt;/commands&gt;
&lt;/syntaxhighlight&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
--&gt;

==Module==
===Module type===
[[Image:Ntask_done.png|Done]]  Introduce the &quot;[[Module]]&quot; type as a core type that provides commands in place of Managed-Entity. 

[[Image:Ntask_done.png|Done]]  Managed-Entity should inherit from Module to provide backwards compatibility to Managed-Entity subtypes

== Ant types==
[[Image:Ntask_done.png|Done]] Extend &lt;code&gt;[[Context Type Reference|context]]&lt;/code&gt; tag and Ant datatype to replace resourceType, resourceName and project. Retain existing attributes for backwards compatibility.

: Example: &lt;code&gt;&lt;context resourceName=&quot;simple&quot; resourceType=&quot;TypeA&quot; project=&quot;demo&quot;/&gt;&lt;/code&gt;
&lt;syntaxhighlight&gt;
  &lt;controller&gt;
    &lt;execute&gt;
      &lt;context resourceName=&quot;mock&quot; resourceType=&quot;Service&quot; project=&quot;demo&quot;/&gt;
      &lt;command name=&quot;cmdX&quot;/&gt;
      &lt;arg line=&quot;-arg1 val1 -bool1&quot;/&gt;
    &lt;/execute&gt;
  &lt;/controller&gt;
&lt;/syntaxhighlight&gt;

[[Image:Ntask_3.png|TODO P3]] (NTH) Introduce &lt;code&gt;resource&lt;/code&gt; tag and Ant datatype to replace the use of [[Context Type Reference|context]] for calls inside [[Controller Task Reference|controller]]

: Example &lt;code&gt;&lt;resource name=&quot;simple&quot; type=&quot;TypeA&quot; project=&quot;demo&quot;/&gt;&lt;/code&gt;
:* [[ExecuteAction Type Reference|execute-action]] to accept resource element. Allow an &lt;code&gt;arg&lt;/code&gt; subelement of &lt;code&gt;command&lt;/code&gt; element
&lt;syntaxhighlight&gt;
  &lt;controller&gt;
    &lt;execute&gt;
      &lt;resource name=&quot;mock&quot; type=&quot;Service&quot; project=&quot;demo&quot;/&gt;
      &lt;command name=&quot;cmdX&quot;&gt;
	&lt;arg line=&quot;-arg1 val1 -bool1&quot;/&gt;
      &lt;/command&gt;
    &lt;/execute&gt;
  &lt;/controller&gt;
&lt;/syntaxhighlight&gt;



==File share==
Evolve and better integrate the [[File share]] facility into the ControlTier system extending use of the root &quot;dav&quot; collection (ie dav:// == http://adminhost:8080/jackrabbit/repository/controltier/)

&lt;!--
===Command line utility===
[[Image:Ntask_3.png|TODO P3]] Introduce a command that allows clients to browse and interact with the file share. 
: Example: &lt;code&gt;ctl-fs&lt;/code&gt;
--&gt;

===Name space===
Move toward the [[Architecture (TNG)#Directory hierarchy]]


[[Image:Ntask_done.png|Done]] Define top level &quot;projects&quot; collection:
: Layout:
&lt;pre&gt;
dav://projects
dav://projects/{project}
dav://projects/{project}/artifacts/modules
dav://projects/{project}/artifacts/modules/{type}-{vers}.{ext}
dav://projects/{project}/etc
dav://projects/{project}/modules/{type}/commands
dav://projects/{project}/resources/{type}/{resource}
&lt;/pre&gt;
: Example:
&lt;pre&gt;
dav://projects
dav://projects/demo
dav://projects/demo/etc/nodes.properties
dav://projects/demo/etc/resources.properties
dav://projects/demo/artifacts/modules
dav://projects/demo/artifacts/modules/Service-head.jar
dav://projects/demo/modules/Service/commands
dav://projects/demo/modules/Service/type.xml
dav://projects/demo/resources/Service/simpleTomcat
dav://projects/demo/resources/Service/simpleTomcat/resource.xml
dav://projects/demo/packages/war/simple-123.war
dav://projects/demo/packages/zip/apache-tomcat-5.5.28.zip
&lt;/pre&gt;
&lt;!--
[[Image:Ntask_3.png|TODO P3]] Define top level &quot;nodes&quot; collection:
: Layout:
&lt;pre&gt;
dav://nodes
dav://nodes/etc
dav://nodes/{node}/etc
dav://nodes/{node}/projects/{project}
dav://nodes/{node}/projects/{project}/resources/{type}/{resource}
dav://nodes/{node}/projects/{project}/var
dav://nodes/{node}/projects/{project}/var/logs
dav://nodes/{node}/projects/{project}/var/sessions
&lt;/pre&gt;

: Example:
&lt;pre&gt;
dav://nodes
dav://nodes/strongbad/etc/framework.properties
dav://nodes/strongbad/etc/node.properties
dav://nodes/strongbad/projects/demo
dav://nodes/strongbad/projects/demo/resources/Service/mock1
dav://nodes/strongbad/projects/demo/resources/Service/mock2
dav://nodes/strongbad/projects/demo/resources/Service/simpleTomcat
dav://nodes/strongbad/projects/demo/resources/Site/mock
dav://nodes/strongbad/projects/demo/resources/Site/mock/pview.xml
dav://nodes/strongbad/projects/demo/resources/Site/mock/resource.xml
dav://nodes/strongbad/projects/demo/var/logs/command.log.2009-12-16
dav://nodes/strongbad/projects/demo/var/sessions/aWorkflow.session
&lt;/pre&gt;

[[Image:Ntask_3.png|TODO P3]] Directory structure consistent between server and clients
--&gt;
&lt;!--
====Mapping====
[[Image:Ntask_3.png|TODO P3]] Map local files to ones in the file share. This can be done using a similar scheme currently done using progressive property file loading. The &quot;dav.&quot; property name prefix signifies the corresponding file share URI.

: Examples showing mapping between local and dav files:
&lt;pre&gt;
${resource.dir} = ${ctl.base}/projects/demo/resources/Service/simpleTomcat
${dav.resource.dir} = dav://nodes/strongbad/projects/demo/resources/Service/simpleTomcat

${resource.properties.file} = ${ctl.base}/projects/demo/resources/Service/simpleTomcat/var/resource.properties
${dav.resource.properties.file} = dav://nodes/strongbad/projects/demo/resources/Service/simpleTomcat/var/resource.properties

${resource.processview.file} = ${ctl.base}/projects/demo/resources/Service/simpleTomcat/var/pview.xml
${dav.resource.processview.file} = dav://nodes/strongbad/projects/demo/resources/Service/simpleTomcat/var/pview.xml
&lt;/pre&gt;
--&gt;

&lt;!--
===File tag===
Primary use case is to introduce a file tag in [[project.xml]].  A user could declare a set of files that are mapped to URIs in the File share. The URIs could be referenced in other parts of the resource model (such as Package repo-url or Service scripting attributes). The load-resources command could then upload these files to the File share.

[[Image:Ntask_3.png|TODO P3]] Introduce a tag to represent a local path and a logical path to the File share
: Example: &lt;code&gt;&lt;file path=&quot;/local/path&quot; uri=&quot;dav://logical/path&quot; /&gt;&lt;/code&gt;
--&gt;

&lt;!--
===Bootstrapping support===
[[Image:Ntask_3.png|TODO P3]] Use file share to help bootstrapping nodes for procedures. Files pertinent to managing Nodes include:
: 'etc' directory contains files that are useful across nodes
: 'install' directory contains installation scripts and distribution archives
: Example: Config files useful for bootstrapping and centralized configuration
&lt;pre&gt;
dav://nodes
dav://nodes/etc
dav://nodes/etc/acls.xml
dav://nodes/etc/jndi.properties
dav://nodes/etc/log4j.properties
dav://nodes/etc/nodes.properties 
dav://nodes/install
dav://nodes/install/scripts
dav://nodes/install/packages
&lt;/pre&gt;
--&gt;

==Dependencies==

[[Image:Ntask_done.png|Done]] Upgrade Ant to 1.8.1 {{Feature|2955097}} (release 3.5.2)

[[Image:Ntask_done.png|Done]] Upgrade Jsch  {{Feature|2890338}} (release 3.5.2)

{{CtDevelopment/navbox}}
[[Category:ControlTier Vandelay]]</text>
    </revision>
  </page>
  <page>
    <title>APIs</title>
    <id>1125</id>
    <revision>
      <id>10921</id>
      <timestamp>2009-12-13T00:37:58Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">[[Image:Edit-find.svg|right|86px|Technical documentation]]
&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Reference&lt;/categorytree&gt;


; [http://controltier.sourceforge.net/docs/snapshot/javadoc Snapshot]
: [http://controltier.sourceforge.net/docs/snapshot/javadoc/ctl-dispatch ctl], [http://controltier.sourceforge.net/docs/snapshot/javadoc/common common], [http://controltier.sourceforge.net/docs/snapshot/javadoc/commander commander]

; [http://controltier.sourceforge.net/docs/3.4.7/javadoc 3.4.7]
: [http://controltier.sourceforge.net/docs/3.4.7/javadoc/ctl-dispatch ctl], [http://controltier.sourceforge.net/docs/3.4.6/javadoc/common common], [http://controltier.sourceforge.net/docs/3.4.7/javadoc/commander commander]

; [http://controltier.sourceforge.net/docs/3.4.6/javadoc 3.4.6]
: [http://controltier.sourceforge.net/docs/3.4.6/javadoc/ctl-dispatch ctl], [http://controltier.sourceforge.net/docs/3.4.6/javadoc/common common], [http://controltier.sourceforge.net/docs/3.4.6/javadoc/commander commander]

; ReportCenter
: [[Reportcenter_Query_API|Query API]]

[[Category:API Reference]]</text>
    </revision>
  </page>
  <page>
    <title>ATG</title>
    <id>888</id>
    <revision>
      <id>16411</id>
      <timestamp>2012-02-20T13:22:28Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Undo revision 15457 by [[Special:Contributions/Danalovett|Danalovett]] ([[User talk:Danalovett|talk]]) Reverted SPAM bot edits</comment>
      <text xml:space="preserve">'''''Also see the [[ATG_demo | ATG Demo]] (based on the Pioneer Cycling sample application)'''''

==Introduction==
If you are interested in deploying and managing [http://atg.com ATG] applications, the ControlTier project includes the ATG automation library. The library includes a pre-built set of automation modules and best practices that provide you with automated management of ATG application build and deployment processes, ATG platforms, and their related technologies. Like any ControlTier software, the ATG Solution is completely free open source software under the [[license | apache license]]. 

The ATG Solution provides a layer of coordination across any or all of the application build and deployment processes described below. Each of these processes, as well as their individual step-by-step actions, can be utilized individually or combined into more complex command work flows.

[[File:Atg librarystack.png]]

==Status==
The ATG library is actively maintained by the IT operations consultants at [http://dtosolutions.com DTO Solutions]. It is in production use within a number of ATG-based e-commerce environments. All of the code is part of the regular ControlTier distribution, but the documentation is still a bit sparse. If you have any questions getting started or if you'd like to get involved in the documentation or module development process, don't hesitate to jump on the [[Help | mailing list or IRC]].

==Processes automated by the ATG library==
While the ATG automation library (like ControlTier in general) can automate many operational processes, there are two that are the core focus of the solution:
# Code Build and Deployment
# Data Build and Deployment

==Code build and deployment==
This process provides end-to-end coordination of build and deployment processes for an ATG application's code modules. This process  checks out code, calls build tools, packages the release, and deploys it (including coordinating any application server restarts). This process also makes it easy to manage rollbacks.

[[File:Atg code update.png]]

{| class=&quot;wikitable&quot; border=&quot;1&quot;
|-
!  Workflow Step
!  Tasks Coordinated
|-
|  1. Build Workflow
|  Each Builder is responsible for building a particular code module and follows the same basic pattern of code checkout, code build, and package publish.

Code checkout: extracts source code from a particular branch or label in your source repository.

Code building: Invokes the build tool to produce deployable application components. If your existing ANT build file has a well known target, it can be plugged in directly with little to no modification. ControlTier supports the building of ATG modules in standard or stand-alone format

Package publishing: The builds resulting packaged artifacts are published and registered in the ControlTier repository
|-
|  2. Package Dependency Management
|  Automates the updating of the ControlTier Object Model to reflect the correct package dependencies to be used by the Module Deploy process
|-
|  3. Deploy Workflow
|  Service life cycle: For each application container process that comprises your E-Commerce application, a basic pattern is followed: Stop, Package Installation, Configuration and Start

Stop - interfaces with the underlying app container to shut it down. Stop uses a comprehensive heuristic approach to guarantee shutdown (examines key ports, processes, and log file contents and reacts accordingly)

Package installation - Looks at the ControlTier Object Model and for each package dependency it finds it goes through the package installation life cycle (the details of which are determined by the package type)

Configuration - Processes any configuration templates, generating them for the current application release

Start - starts up the services in the required order and, to guarantee successful startup, uses heuristic techniques similar to that of the stop process

Outside of your ATG application server, the solution also coordinates to the deployment of packages to other kinds of deployments in your infrastructure (e.g. apache and other 3rd party applications)
|}

===For users running the Dynamo Application Server (DAS)===
To support ATG customers running the Dynamo Application Server (DAS), ControlTier’s ATG Solution Library provides a number of key features specifically for the unique nature of the DAS environment.
* The library exploits ATG's out of the box ant tasks for using the runDarina command for assembling .dar files
* Application packages are structured to support staged deployment. This means you can opt to stage one version while running another to enable fast deployment or rollback. 
* The library can manage the automatic installation of platform components (such as Java) as well as any standard ATG self-extracting installer or updater to bootstrap application services on a basic OS system image (i.e. starting with an application login account and the ControlTier client installed).
* Co-deployed Dynamo Application Servers can be managed as a single manageable collection. This is analogous to how JBOSS allows you to manage a set of local web applications

===For users running the JBoss Application Server===
To support ATG customers running on JBOSS, ControlTier’s ATG Solution Library provides a number of key features specifically for the unique nature of the JBOSS environment. 
* For JBOSS/J2EE deployment, the solution library exploits ATG's out of the box ant tasks for assembling .jar and .ear files during the build process.
* Library is pre-configured to follow standard JBOSS application deployment conventions
* Optional support for deployment and configuration of the underlying JBOSS platform. This covers automating such tasks as the following: installing the JBoss distribution, automatic port and environment configuration to support multiple JBoss instances on the same server, and managing datasource configuration settings.
* The library can manage the automatic installation of platform components (such as Java and JBoss) as well as any standard ATG self-extracting installer or updater to bootstrap application services on a basic OS system image (i.e. starting with an application login account and the ControlTier client installed).

===Automated ATG Administration via RMI Dispatching Component===
Several routine tasks must be undertaken while deploying code and data during application releases. Typically, these tasks are done using the browser-based ATG Administrator web pages, that allow technicians to invoke methods on Nucleus exposed components. 

ControlTier’s ATG Solution includes the RMI Dispatching component, a key mechanism that creates an extremely flexible scripting interface. Using this scripting interface, the ControlTier ATG Solution avoids the typical painstaking manual steps and streamlines end-to-end tasks.

[[File:Atg rmi dispatch.png]]

The ATG solution leverages the RMI Command dispatcher to interact with a number of Nucleus-exposed ATG components. Below are some examples:
* PriceCache: invalidating product price caches
* ProductCatalogSwitchingDataSource: managing switching data sources used during Catalog deployments
* ModuleManager: looking up loaded module names
* LoadControl: start/stop accepting Sessions

===NFS/NAS Support===
For environments that have NFS/NAS as part of their operational infrastructure we can coordinate the central deployment of module packages for use by a pool of servers.

===Other Integrations===
Source Repositories*
* Subversion (1.6)
* CVS (1.11.x)
* Perforce (2009.1)
* Git (1.6)
(* any repository with a command line utility can be automated)


Build Tools*
* Ant (1.7 or previous)
* Maven (1 and 2.x)
* Script (any sh, bash, ksh, Windows Batch, or any BSF)
(* others can be added)


Application Servers*
* ATG Platform (2006.3, 2007.1, 9.0, 9.1)
* JBoss (4.03sp1, 4.04, 4.05, 4.2, 5.0 in testing)
* DAS (2006.3, 2007.x)
* Tomcat (4.x - 5.x)
(* contact us about the status of other versions)

==Data Deployment==
These processes are designed to address the specific needs around promoting an ATG application’s data from one environment to the next.
 
There are three types of data to consider: application data, catalog data, and content. Each follows a variant of the same basic workflow: export data from reference data source, version as a package in ControlTier repository, coordinate the import of the data to the target (including coordinating the execution of data management scripts before during and after that process). Because of ControlTier’s flexible architecture it is equally adept at working with and migrating small and large datasets.

[[File:Atg data update.png]]

{| class=&quot;wikitable&quot; border=&quot;1&quot;
|-
!  Workflow Step
!  Tasks Coordinated
|-
|  1. Data Export Workflow
|  Extracts the data to file format to enable migrating data dump from development environments to target QA and Production. Extraction can be done many ways (ATG proprietary XML repository dump format, Oracle export, MSSQL export, etc..)

Once exported to file format, the data is packaged, loaded into the ControlTier Repository and registered in the ControlTier Object Model
|-
|  2. Package Dependency Management
|  Automates the updating of the ControlTier Object Model to reflect the correct data package dependencies to be used by the Data Import process
|-
|  3. Data Import Workflow 
|  Downloads appropriate export file (in packaged format) from repository and imports it into the target database.

For interacting with databases, the ControlTier Object Model captures settings like instance name, schema name, user name, and passwords (all sensitive settings are stored encrypted).

Pre and Post-import  SQL script execution.
|}

===Automated ATG Administration via RMI Dispatching Component===
Similar to the Code Build and Deployment process, during a Data Deployment several common tasks are performed that would normally require the use of the browser-based ATG Administrator web pages. ControlTier’s ATG Solution contains a RMI Dispatching component that can programmatically invoke methods on Nucleus exposed components and provides an extremely flexible scripting interface. 


===Support for Switching Datasources===
ControlTier’s ATG Solution Library supports a switching datasource (&quot;Data Source A/B switching&quot;) configuration.  When utilizing this switching datasource scheme, the Updater associates a pair of catalog schema within a database instance and manages the switching between them at both the database and the app server level. ATG's RMI interface is used to manage datasource configuration and cache clearing at the application server level.


===Deploying Content===
If you have content files that must accompany the data change you can use the Content Deployment Library in conjunction with the ATG Solution Library to easily handle that. This will automate the promotion of content from one environment to another by extracting content from a source code repository, packaging it, and deploying it to target environments using one standardized end-to-end process.

This offers a number of notable features for organizations where content migration and promotion is a frequent and critical process, including: coordinating data and code releases, structured packaging, rollback, deployment task delegation, reporting, and a standardized web-based operational interface.


===Supported databases*===
* Oracle (11g or previous)
* MicrosoftSQL (SQL Server 2005 or previous)
* MySQL (5.x or previous)
(* ask about other databases or other versions)


[[Category:ATG]]</text>
    </revision>
  </page>
  <page>
    <title>ATGLicenseZip</title>
    <id>810</id>
    <revision>
      <id>4373</id>
      <timestamp>2009-04-28T18:23:53Z</timestamp>
      <contributor>
        <username>Chuck</username>
        <id>13</id>
      </contributor>
      <comment>Removing all content from page</comment>
      <text xml:space="preserve" />
    </revision>
  </page>
  <page>
    <title>ATG Software and Licenses</title>
    <id>822</id>
    <revision>
      <id>13930</id>
      <timestamp>2010-11-10T15:23:30Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;-objects&quot; to &quot;-resources&quot;</comment>
      <text xml:space="preserve">==Overview==

This is part of the [[ ControlTier and ATG | ATG/ControlTier demo ]]

PioneerCycling is built using the ATG 2006.3 platform as a stand alone ATG ear and deployed into a JBoss server.  Upon jboss startup, the PioneerCycling app requires a set of ATG licenses, otherwise the startup of the application will fail.   ControlTier automates both the the deployment of the ATG 2006.3 platform for the build environment as well as the ATG licensing for the deployment environment.   As a result, the following instructions describes how to get both the atg-license-2006.3.0.zip (zip package of atg licenses) and ATG2006.3.bin (unix self extracting atg platform package) uploaded and registered into the ControlTier package repository.

The atg-license package can contain any licenses possessed by the user of this demo.  If licenses are needed, contact [[ http://www.atg.com/esupport | ATG Support Site ]] where permanent or evaluation licenses can be obtained as well as the 2006.3 ATG software.

== Configure the ATG Platform Package ==

===Obtain the self extracting ATG self extracting archive===

The ATG 2006.3 distribution is usually shipped within a jar file:  &quot;ATG2006_3-1.jar&quot;.  Extract the self extracting archive &quot;ATG2006.3.bin&quot; from this jar file:

&lt;pre&gt;
$ jar tvf ATG2006_3-1.jar 
     0 Wed Jun 28 14:22:34 PDT 2006 META-INF/
    71 Wed Jun 28 14:22:34 PDT 2006 META-INF/MANIFEST.MF
310858852 Wed Jun 28 13:03:02 PDT 2006 ATG2006.3.bin
$ jar xf ATG2006_3.jar ATG2006.3.bin
$ ls -l ATG2006.3.bin 
-rw-r--r--  1 atg  atg  310858852 Dec  6 23:25 ATG2006.3.bin
&lt;/pre&gt;

=== Update the PioneerCycling object model to reference the new AtgPlatformInstaller package object ===
Using your favorite editor, uncomment references to the commented out AtgPlatformInstaller:
&lt;pre&gt;
[demo@centos45 pioneerCycling]$ cd $CTIER_ROOT/pioneerCycling 
[demo@centos45 pioneerCycling]$ vi default-object.xml 
&lt;/pre&gt;

so that the following entries are not commented out:
&lt;pre&gt;
        &lt;!-- uncomment once ATG Platform has been imported into the model, see below where this package is referenced in AtgJBossModuleBuilder and AtgSolidRdb --&gt;
        &lt;package type=&quot;AtgPlatformInstaller&quot; name=&quot;ATG2006.3.bin&quot; version=&quot;2006&quot; release=&quot;3&quot; buildtime=&quot;&quot; arch=&quot;unix&quot; filename=&quot;ATG2006.3.bin&quot; filetype=&quot;bin&quot; base=&quot;ATG2006.3&quot; installroot=&quot;${resource.attribute.atgDynamoRoot}&quot; repoUrl=&quot;/AtgPlatformInstaller/bins/ATG2006.3.bin&quot; releasetag=&quot;&quot; installrank=&quot;40&quot; restart=&quot;false&quot; vendor=&quot;Art Technology Group, Inc.&quot; description=&quot;ATG 2006.3 for UNIX&quot;/&gt;
.
.
.
                        &lt;!-- uncomment once ATG Platform package has been imported into the repository --&gt;
                        &lt;resource type=&quot;AtgPlatformInstaller&quot; name=&quot;ATG2006.3.bin&quot;/&gt;
.
.
.
                        &lt;!-- uncomment once ATG Platform package has been imported into the repository --&gt;
                        &lt;resource type=&quot;AtgPlatformInstaller&quot; name=&quot;ATG2006.3.bin&quot;/&gt;
.
.
.
                        &lt;!-- uncomment once ATG Platform package has been imported into the repository --&gt;
                        &lt;resource type=&quot;AtgPlatformInstaller&quot; name=&quot;ATG2006.3.bin&quot;/&gt;
&lt;/pre&gt;

== Configure ATG Licenses Package ==

===Package up the ATG Licenses into a zip file===

Once ATG licenses are obtained, store the properties file into an empty temporary directory and bundle them into a simple zip package

Create and set working directory to an empty directory:
&lt;pre&gt;
charles-scotts-power-mac-g5:~ mkdir $HOME/atgLicenses
charles-scotts-power-mac-g5:~ cd $HOME/atgLicenses
&lt;/pre&gt;

Copy downloaded atg license files from wherever the properties files were saved to:
&lt;pre&gt;
charles-scotts-power-mac-g5:~ cp /tmp/atg/*License.properties .
&lt;/pre&gt;

Zip up the license files, for example this zip package contains licenses for the 2006.3 atg platform
&lt;pre&gt;
charles-scotts-power-mac-g5:~ zip $HOME/atg-license-2006.3.0.zip  *
&lt;/pre&gt;

Verify zip file 
&lt;pre&gt;
charles-scotts-power-mac-g5:~ unzip -l $HOME/atg-license-2006.3.0.zip 
Archive:  atg-license-2006.3.0.zip
  Length     Date   Time    Name
 --------    ----   ----    ----
     1177  11-13-07 17:37   ABTestLicense.properties
     1114  11-13-07 17:37   ADCLicense.properties
       27  11-13-07 17:37   ATGSearchLicense.properties
     1157  11-13-07 17:37   B2BLicense.properties
     1099  11-13-07 17:37   B2CLicense.properties
     1141  11-13-07 17:37   CommerceAssistLicense.properties
     1168  11-13-07 17:37   DASLicense.properties
     1223  11-13-07 17:37   DCSABTestLicense.properties
     1183  11-13-07 17:37   DCSADCLicense.properties
     1213  11-13-07 17:37   DPSLicense.properties
     1126  11-13-07 17:37   DSSLicense.properties
     1094  11-13-07 17:37   ForumLicense.properties
     1164  11-13-07 17:37   KnowledgeLicense.properties
     1175  11-13-07 17:37   MerchandisingLicense.properties
     1201  11-13-07 17:37   OutreachLicense.properties
     1091  11-13-07 17:37   PortalLicense.properties
     1242  11-13-07 17:37   PublishingLicense.properties
     1246  11-13-07 17:37   ResponseManagementLicense.properties
     1178  11-13-07 17:37   SelfServiceLicense.properties
 --------                   -------
    21019                   19 files
&lt;/pre&gt;




===Update the PioneerCycling object model to reference the new AtgLicenseZip package object===

Change working directory to the PioneerCycling object files:
&lt;pre&gt;
[demo@centos45 pioneerCycling]$ cd $CTIER_ROOT/pioneerCycling
&lt;/pre&gt;

Using your favorite editor, uncomment references to the commented out AtgLicenseZip
&lt;pre&gt;
[demo@centos45 pioneerCycling]$ vi default-object.xml 
&lt;/pre&gt;

so that the following entries are not commented out:
&lt;pre&gt;
        &lt;!-- uncomment once an ATG License has been imported into the model, see below where this package is referenced in jboss services --&gt;
         &lt;package type=&quot;AtgLicenseZip&quot; name=&quot;atg-license-2006.3.0.zip&quot; version=&quot;2006.3.0&quot; release=&quot;&quot; buildtime=&quot;&quot; arch=&quot;noarch&quot; filename=&quot;atg-license-2006.3.0.zip&quot; filetype=&quot;zip&quot; base=&quot;atg-license&quot; installroot=&quot;${resource.attribute.atgLocalConfig}&quot; repoUrl=&quot;/AtgLicenseZip/zips/atg-license-2006.3.0.zip&quot; releasetag=&quot;&quot; installrank=&quot;50&quot; restart=&quot;false&quot; vendor=&quot;Art Technology Group, Inc.&quot; description=&quot;ATG license package&quot;/&gt;

...

                        &lt;!-- uncomment once an ATG License has been imported into the model --&gt;
                        &lt;resource type=&quot;AtgLicenseZip&quot; name=&quot;atg-license-2006.3.0.zip&quot;/&gt;
...


                        &lt;!-- uncomment once an ATG License has been imported into the model --&gt;

                        &lt;resource type=&quot;AtgLicenseZip&quot; name=&quot;atg-license-2006.3.0.zip&quot;/&gt;

...


                        &lt;!-- uncomment once an ATG License has been imported into the model --&gt;
                         &lt;resource type=&quot;AtgLicenseZip&quot; name=&quot;atg-license-2006.3.0.zip&quot;/&gt;
 
...

                        &lt;!-- uncomment once an ATG License has been imported into the model --&gt;
                         &lt;resource type=&quot;AtgLicenseZip&quot; name=&quot;atg-license-2006.3.0.zip&quot;/&gt;
  &lt;/pre&gt;


==Load Object changes and Upload Packages into the Project==

&lt;pre&gt;
[demo@centos45 pioneerCycling]$ ctl -p PioneerCycling -t AtgPioneerCyclingProjectBuilder -r pioneerCycling -c load-resources -- -filename default-object.xml
Loading &quot;/home/demo/ctier/pioneerCycling/default-object.xml&quot; ...
1 file(s) have been successfully validated.
Processing /home/demo/ctier/pioneerCycling/default-object.xml to /home/demo/ctier/ctl/var/tmp/projectxml-1695827362.xml
Loading stylesheet /home/demo/ctier/ctl/projects/PioneerCycling/modules/ProjectBuilder/lib/load-resources/projectxml/project.xsl
Mapping XML to properties ...
Collecting object attributes ...
Batching object attribute updates ...
Batching resource and referrer updates ...
Executing batch update ...
&lt;/pre&gt;


===Import the AtgLicenseZip Package into the Package Repository===

Navigate to the atg-license-2006.3.0.zip AtgLicenseZip object in Workbench.  Notice that there is an exclamation point next to Repository URL indicating that the package itself does not reside at the location referenced by the atg-license-2006.3.0.zip object:

[[ image:PioneerCyclingAtgLicenseZipPreUpload.gif ]]

Select &quot;Upload File&quot;, Browse to the zipped license package, and Upload the zip package into the package repository:

[[ image:PioneerCyclingAtgLicenseZipUpload.gif ]]

Notice that the exclamation point goes away confirming zip package resides in specified location:

[[ image:PioneerCyclingAtgLicenseZipPostUpload.gif ]]

===Import the AtgPlatformInstaller Package into the Package Repository===

Navigate to the ATG2006.3.bin AtgPlatformInstaller object in Workbench and similar to previous import of the license zip, upload this package.

[[Category:ATG]]</text>
    </revision>
  </page>
  <page>
    <title>ATG demo</title>
    <id>790</id>
    <revision>
      <id>16410</id>
      <timestamp>2012-02-20T13:22:11Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Reverted SPAM bot edits</comment>
      <text xml:space="preserve">'''''These demos are designed to provide a feel for what you can do with ControlTier and role it plays in relation to ATG development or operations tools. For a more general overview, see the [[ATG | ControlTier for ATG page]]'''''

==Prerequisites==
[[Image:stop-medium.png]] These demos have been designed for and tested assuming that you have the following dependencies:
===Dependencies===
* ControlTier 3.4.3+ Installer. See: [[Installation]]
* CentOS release 4.5 (Final), or Redhat Enterprise Linux 4 update 2) with at least 4GB disk and 1GB memory
* Subversion client version 1.3, or later
** Subversion may require an upgrade since ControlTier&amp;apos;s Continuous Integration modules require a subversion client with xml support (subversion 1.1 for example does not support xml):
&lt;pre&gt;
[demo@centos45 ctier]$ rpm -q subversion
subversion-1.4.6-0.1.el4.rf
&lt;/pre&gt;If subversion version is not 1.3 or higher, execute the following procedure to download and upgrade subversion:
&lt;pre&gt;
wget ftp://rpmfind.net/linux/dag/redhat/el4/en/i386/dag/RPMS/subversion-1.4.6-0.1.el4.rf.i386.rpm
sudo rpm -U subversion-1.4.6-0.1.el4.rf.i386.rpm
&lt;/pre&gt;
* Requires ATG 2006.3
* ATG Licenses.  See [[ATGLicenseZip]]

===Setup the ATG PioneerCycling  [[Image:pioneerCycling.gif|256px]] Sample Application===
The ATG/ControlTier demos use a sample application called PioneerCycling. You will need to [[Building PioneerCycling Project|Setup PioneerCycling]] before proceeding with the demos.

==Basic Demos==

Once you have [[ Building PioneerCycling Project|Setup PioneerCycling ]] you can try the following demos. These are all single node demos that assume you are deploying PioneerCycling to the same node on which the ControlTier server was installed. If you are new to ControlTier, it's recommended that you try the demos in the order listed.

===1. Provisioning an application server===
{| border=&quot;1&quot;
! style=&quot;background:silver&quot; | Scenario:
| You're an administrator and you need an automated way to deploy, configure, and start an empty JBoss server 
|-
! style=&quot;background:silver&quot; | Try it: 
| [[PioneerCycling Provisioning JBoss instances|Automated provisioning of JBoss instances]] 
|}

===2. Coordinating the build process for the application packages===
{| border=&quot;1&quot;
! style=&quot;background:silver&quot; | Scenario:
| You're a developer or a release manager and you need an automated to way checkout the sourcecode, build the PioneerCycling.ear, and stage the package in the release repository (ready for deployment) 
|-
! style=&quot;background:silver&quot; | Try it: 
| [[PioneerCycling Checkout and Build|Automated checkout, build, and staging of application packages]]  
|}

===3. Deploying a release of the application===
{| border=&quot;1&quot;
! style=&quot;background:silver&quot; | Scenario:
| You're a developer or a release manager and you need an automated way deploy the latest release of the PioneerCycling application (including its dependencies) 
|-
! style=&quot;background:silver&quot; | Try it: 
| [[PioneerCycling Provisioning JBoss applications|Automated updating of applications]]  
|}

===4. End-to-end build and deployment process (incomplete) ===
{| border=&quot;1&quot;
! style=&quot;background:silver&quot; | Scenario:
| You're a developer and after you make a source change you need an automated way run both the build and the deployment process as one coordinated end-to-end process so you can deploy your changes to a development testing server.  
|-
! style=&quot;background:silver&quot; | Try it: 
| [[PioneerCycling Build and Provisioning JBoss applications|Automated end-to-end build and deployment]]  
|}

===5. Migrating an application release to a different environment===
{| border=&quot;1&quot;
! style=&quot;background:silver&quot; | Scenario:
| You're an release manager and you need to migrate application changes that have been made and tested in development to a staging environment 
|-
! style=&quot;background:silver&quot; | Try it: 
| [[PioneerCycling Migrating a Release from Development to Staging|Migrating a Release from Development to Staging]] 
|}

===6. Using Jobcenter as a centralized management console ===
{| border=&quot;1&quot;
! style=&quot;background:silver&quot; | Scenario:
| Whether it's to enable self-service (allowing others to safely run deployment and service management processes) or tracking ongoing activity, the Jobcenter webapp is a very useful centralized console for safely running key processes   
|-
! style=&quot;background:silver&quot; | Try it: 
| [[PioneerCycling and Self Service|Using Jobcenter as a management console]] 
|}

==Advanced Demos==

The following are considered advanced demos because they require a multi-node environment, address scenarios that require integration with other tools, or address scenarios found in production use of ControlTier.

===X. Automatic deployment as part of a continuous integration loop===
{| border=&quot;1&quot;
! style=&quot;background:silver&quot; | Scenario:
| You're a build engineer and you need to automatically deploy, configure, and start up the latest release of PioneerCycling in a test environment as soon as a new .ear comes out of CruiseControl 
|-
! style=&quot;background:silver&quot; | Try it: 
| [[PioneerCycling and Continuous Integration|Automatic deployment as part of a continuous integration loop]] 
|}

[[Category:ATG]]
[[Category:Demos]]
[[Category:PioneerCycling demo]]</text>
    </revision>
  </page>
  <page>
    <title>About</title>
    <id>192</id>
    <redirect />
    <revision>
      <id>16113</id>
      <timestamp>2012-01-19T16:53:46Z</timestamp>
      <contributor>
        <username>Alex</username>
        <id>50</id>
      </contributor>
      <comment>Redirected page to [[Community]]</comment>
      <text xml:space="preserve">#REDIRECT [[Community]]</text>
    </revision>
  </page>
  <page>
    <title>About Jobcenter</title>
    <id>849</id>
    <redirect />
    <revision>
      <id>4488</id>
      <timestamp>2009-04-30T02:52:27Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <comment>[[About Jobcenter]] moved to [[Jobcenter]]: reorg</comment>
      <text xml:space="preserve">#REDIRECT [[Jobcenter]]</text>
    </revision>
  </page>
  <page>
    <title>About ReportCenter</title>
    <id>850</id>
    <redirect />
    <revision>
      <id>4492</id>
      <timestamp>2009-04-30T02:54:24Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <comment>[[About ReportCenter]] moved to [[Reportcenter]]: reorg</comment>
      <text xml:space="preserve">#REDIRECT [[Reportcenter]]</text>
    </revision>
  </page>
  <page>
    <title>About Workbench</title>
    <id>848</id>
    <redirect />
    <revision>
      <id>4485</id>
      <timestamp>2009-04-30T02:50:39Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <comment>[[About Workbench]] moved to [[Workbench]]: reorg to be more wikiable</comment>
      <text xml:space="preserve">#REDIRECT [[Workbench]]</text>
    </revision>
  </page>
  <page>
    <title>Abstracted administration</title>
    <id>96</id>
    <revision>
      <id>10606</id>
      <timestamp>2009-12-12T19:19:21Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Methodology&lt;/categorytree&gt;
{{wikify}}

An idea that drives the ControlTier project is automated '''abstracted administration&quot;'. In this paradigm, you think about and develop management processes using an abstracted view, one that is independent of any particular physical node or software deployment.  What drives the need for this style of administration is rising scale and complexity . Automated and abstracted administration is paramount in a world where 
* the host environment is varied in kind and size (e.g., different scales in heterogeneous environments and also the growing use of &quot;elastic&quot; virtual machine infrastructure) 
* management processes are becoming more distributed and more easily impacted by application and environmental differences (e.g, multi-step procedures that execute across the network and across different tools).

This project supports the idea of this administration paradigm, one where you manage distributed application services and their management processes through a simplified, more standardized and abstracted view. Within this paradigm, an administrator has the choice to focus on managing operations from a higher level, and let the underlying framework coordinate operations across the actual physical environment. Of course, one can also choose to manage things at a much finer level of granularity, performing management activity on a particular host, which still remains important.

Note:
''ControlTier is not a VM technology nor will it become one.  ControlTier is a management technology that lets you control software services that are hosted on one or more operating system instances, be they running on physical or virtual (cloud) hardware.''

==Administration framework==

Within this paradigm, the framework 

* Lets you manage many deployments through an abstracted, logical structure or at any distinct point by objectifying your process within the context of the deployment model
* Wraps around your scripts to produce workflow endpoints that can be combined together to execute distributed multi-step processes.

Within the administration framework, your operations processes become more uniform and therefore more reusable, with environment specific parameters and settings externalized in a collaboratively maintained model, shared across support teams. Within this paradigm exists a hierarchy of types that let you break down operation processes into several standard layers, each focussed on a specific aspect. Aspects exist for package building, staging and deployment, service run state control, mediated execution, and more.

A major part of the ControlTier project is to develop the [[Architecture|architectural pieces]] that comprise the framework.

==Abstracting the Node==

For [[Command execution]], this project aims to help you abstract the physical Nodes in your environment. Commands ultimately execute on some host, but in large scale environments, it's cumbersome to specify the particular hosts. The ControlTier software provides a couple ways to abstract node infrastructure:

* ''Node tags and attributes'': The [[CTL-EXEC_Command_Reference|ctl-exec]] command lets you execute ad hoc commands by addressing target Nodes using tags and attributes rather than lists of hosts. This is a convenient way to manage host groups and &lt;code&gt;ctl-exec&lt;/code&gt; supports inclusion and exclusion filters to identify any subset of hosts. &lt;code&gt;ctl-exec&lt;/code&gt; also supports parallel execution important when you need to execute actions simultaneously across a large number of hosts.
* ''Command dispatching'': The [[CTL_Command_Reference|ctl]] command lets you define reusable commands targeted to individual service management control actions or target coordinated distributed actions, logically via a Site. The command dispatcher looks up the nodes on which commands should be executed and invokes them remotely when necessary. In this case, one stays focussed on managing service action without having think about nodes.

Abstracting nodes from your procedures is the first step towards more flexible administration. When nodes vary between environments or when they are based on VMs and can be rescaled at any time depending on conditions, your scripts will not have to be changed to redefine node targets.

==Abstracting the Service==

One of this project's primary goals is to provide a service management interface that lets you forget about Nodes during operation. 

* Long running application components are called Services in ControlTier. You abstract your services by exposing all the physical environment differences in the Service's object model. Doing this lets you define your service management code in an abstracted way. During execution your procedures are bound to environment specific views.
* ControlTier's Site, provides the management interface that lets you logically control a set of services be they one machine or many. Application components combine together to form a distributed application. Where these components are hosted depends on the environment. For example, in development or QA they may all reside on one node, while in production they may be spread over many.

Exposing logical control of the many parts of a service is a further step towards abstracted administration, since at this level of virtualization not only are Nodes abstracted but so are the individual application deployments that comprise the integrated service.

==Abstracting the process==

There are several service management life cycle activities common to any application service: build, stage, install, update, stop, start, configure, check, roll back, etc. Of course these activities vary depending on operating system, application platform, or environment. The last aim of the ControlTier project is this: simplify operations by obscuring environment differences that impact procedures.

* ControlTier includes a standard set of types, each responsible for carrying out each of the life cycle steps. You can also expose your procedures in place of the standard implementation. 
* Service management processes are carried out over multiple steps across different machines. Again depending on where the process runs, process execution can occur on different machines. ControlTier workflows allow you to define and execute processes independent of the environment making them more reusable.
* Besides abstracting location, service management processes can also be executed sequentially or in parallel without any code modifications. ControlTier workflows allow you to define a thread count in the object model to control parallel or sequential execution.

By exposing life cycle activities as service management workflows reusable across environments, another level of automated and abstracted administration is achieved.

What drives the ideas behind this paradigm are the successive layering of abstractions:
* Abstract the nodes, for better visibility into the services.
* Abstract the services, to gain better visibility of the management processes.
* Abstract the processes, for standardized reusable life cycle steps and workflows

Through the process of abstraction, all the specifics become maintained in an object model and the procedural code consolidates into common libraries. Less code means less maintenance, better reusability, and further elimination of procedural variation, often the root cause of service management problems.

{{Manual/navbox}}

[[Category:Methodology]]</text>
    </revision>
  </page>
  <page>
    <title>Access the server tools</title>
    <id>1542</id>
    <redirect />
    <revision>
      <id>9613</id>
      <timestamp>2009-12-10T19:18:05Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>moved [[Access the server tools]] to [[Server landing page]]</comment>
      <text xml:space="preserve">#REDIRECT [[Server landing page]]</text>
    </revision>
  </page>
  <page>
    <title>Accessing the Dukes Bank Website</title>
    <id>381</id>
    <revision>
      <id>4587</id>
      <timestamp>2009-04-30T20:25:25Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">Dukes Bank is a sample web application used in the [[ControlTier Demo]]. 

Once you've deployed the the application following the instructions in the demo, you can access it at this URL:
http://localhost:8180/bank/main  (or your server's hostname)

[[image:Dukesbank_login.png]]


To verify that it is working properly, go ahead and login using the credentials in the welcome message (200/j2ee).


[[image:Dukesbank_internal.png]]

[[Category:Dukes Bank Demo]]</text>
    </revision>
  </page>
  <page>
    <title>Accessing the PioneerCycling Website</title>
    <id>809</id>
    <revision>
      <id>5578</id>
      <timestamp>2009-06-13T18:16:21Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">PioneerCycling is a sample web application used in the [[ControlTier_and_ATG | ControlTier/ATG Demo]]. 

Once you've deployed the the application following the instructions in the demo, you can access it at this URL:
http://centos45.local:8180/PioneerCycling  (or your server's hostname)

[[image:PioneerCyclingLogin.gif]]

&lt;!--
To verify that it is working properly, go ahead and login using the credentials in the welcome message (200/j2ee).


[[image:Dukesbank_internal.png]]
--&gt;

[[Category:ATG]]</text>
    </revision>
  </page>
  <page>
    <title>Aclpolicy</title>
    <id>2001</id>
    <revision>
      <id>16398</id>
      <timestamp>2012-02-20T13:06:46Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Undo revision 15444 by [[Special:Contributions/Woolerystixmaker|Woolerystixmaker]] ([[User talk:Woolerystixmaker|talk]]) Reverted SPAM bot edits</comment>
      <text xml:space="preserve">==Overview==

With ControlTier 3.6, a new mechansim for controlling access to Jobs in the Ctlcenter and [[Modules]] was introduced to provide additional flexibility and maintainability when securing ControlTier.

Instead of using a strict xml schema, a markup language is used so new tags can be introduced in subsequent releases while preserving backwards compatibility.

Another benefit is that multiple aclpolicy files can be stored in the same directory, helping the management of each set of rules. This reduces the complexity of each file. The default path is &lt;code&gt;$CTL_BASE/etc&lt;/code&gt;.

Policy files are parsed using XPath that is fairly liberal in what it excepts. So creating arbitrary blocks for documentation or organizational purposes is gracefully parsed. The resulting file must be a valid xml file.

==The aclpolicy markup by example==

Default policy file (with version 3.6.0), found in &lt;code&gt;CTL_BASE/etc&lt;/code&gt;:

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;policies&gt;
  &lt;policy description=&quot;Administrative group that has access to execute all jobs and modules in any project.&quot;&gt;
    &lt;context project=&quot;*&quot;&gt;
      &lt;command group=&quot;*&quot; job=&quot;*&quot; actions=&quot;*&quot;/&gt;
      &lt;command name=&quot;*&quot; module=&quot;*&quot; actions=&quot;*&quot;/&gt;
    &lt;/context&gt;
    &lt;by&gt;
      &lt;group name=&quot;admin&quot;/&gt;
    &lt;/by&gt;
  &lt;/policy&gt;
&lt;/policies&gt;
&lt;/syntaxhighlight&gt;

The top level element of every policy file is &lt;code&gt;&lt;policies&gt;&lt;/code&gt;. This is a container elements that can contain one or more &lt;code&gt;&lt;policy&gt;&lt;/code&gt; elements. The &lt;policy&gt; element contains a single attribute, description that used in the audit log. It's recommended that this description be short and descriptive.

==&lt;policy&gt; Element==

For each &lt;code&gt;&lt;policy&gt;&lt;/code&gt; there is a &lt;code&gt;&lt;by&gt;&lt;/code&gt; element. The by element helps narrow the search for policies based on the credentials of the subject that authenticated to ControlTier. In the example above, the &lt;code&gt;&lt;by&gt;&lt;/code&gt; element comes after a &lt;code&gt;&lt;context&gt;&lt;/code&gt; element. This is by convention only. The &lt;code&gt;&lt;by&gt;&lt;/code&gt; element needs to be a child to the &lt;code&gt;&lt;policy&gt;&lt;/code&gt;.

==&lt;by&gt; Element==

Within a &lt;code&gt;&lt;by&gt;&lt;/code&gt; element can be any number of &lt;code&gt;&lt;user username=&quot;..&quot;&gt;&lt;/code&gt; and &lt;code&gt;&lt;group name=&quot;..&quot;&gt;&lt;/code&gt; elements. These elements must all match in order for this policy to be consider for further evaluation. &lt;code&gt;&lt;user&gt;&lt;/code&gt; elements are evaluated first as they are typically more restrictive. &lt;code&gt;&lt;group&gt;&lt;/code&gt; elements are evaluated second. Order is not important within this element.

Note that the &lt;code&gt;&lt;user&gt;&lt;/code&gt; element uses the attribute &quot;username&quot;, while the &lt;code&gt;&lt;group&gt;&lt;/code&gt; element uses the attribute &quot;name&quot;.

e.g.:

     &lt;user username=&quot;myuser&quot;/&gt;
     &lt;group name=&quot;mygroup&quot;/&gt;

See the &quot;Role mapping&quot; section in the [[Ctlcenter config]] page for adding new groups to the role mapping.

==&lt;command&gt; Element==

The &lt;code&gt;&lt;command&gt;&lt;/code&gt; element will match modules or jobs. For example: &lt;code&gt;&lt;command group=&quot;*&quot; job=&quot;*&quot; actions=&quot;*&quot;/&gt;&lt;/code&gt; says for any job in any group with any action, grant access to the Subject in the &lt;code&gt;&lt;by&gt;&lt;/code&gt; clauses. the group, attribute and action elements can use regular expressions (java regex). The exception is the * which is shorthand for '.*$'.

Known actions are:

* admin
* user_admin
* workflow_read
* workflow_create
* workflow_update
* workflow_delete
* workflow_kill
* workflow_run
* events_read
* events_create
* events_update
* events_delete
* resources_read
* resources_create
* resources_update
* resources_delete

Possible values are limitless so it requires an understanding of the job definition you're trying to run. The best way to understand what the actions are is to look at the &lt;code&gt;$JETTY_HOME/log/ctl.audit.log&lt;/code&gt;. This will show all the options as they're being evaluated.

==&lt;context&gt; Element==

...is currently ignored.

{{Installation/navbox}}

[[Category:Authorization]]
[[Category:XML]]</text>
    </revision>
  </page>
  <page>
    <title>Acls-v10.xml</title>
    <id>383</id>
    <revision>
      <id>16397</id>
      <timestamp>2012-02-20T13:06:31Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Reverted SPAM bot edits</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;XML&lt;/categorytree&gt;
The acls.xml file lives in the &lt;code&gt;$CTL_BASE/etc&lt;/code&gt; directory.  It is used to specify the commands that are authorized for particular user roles.

The acls.xml consists of one &lt;code&gt;&amp;lt;acls&amp;gt;&lt;/code&gt; element containing one or more &lt;code&gt;&amp;lt;acl&amp;gt;&lt;/code&gt; elements.  The DTD is available in the &lt;code&gt;$CTL_BASE/etc/acls.dtd&lt;/code&gt; file.

==== ACL Lookup ====

''By default no role is authorized to execute any command''.  This means that ''only matching entries in the acls.xml allow authorization''.  

When a user attempts to execute a command (via the CTL command-line) or a Job (via Jobcenter), then the specific context of the command is compared to the entries in the acls.xml for roles that the user has.

# For each role that the user has, lookup [[#acl]] entries in the file for that role.
## For each acl entry, if it  [[#Matching|matches]] the context of the command, then the command or Job is ''authorized to execute''.
# If no [[#acl]] entries exist for any roles, or no matching entries for the context are found, then the context is ''not authorized''.

Keep in mind when specifying the ACL entries that they specify ''which contexts are authorized'' for ''that specific role''.

==== Context ====
Each execution in CTL or Jobcenter has a ''context'' consisting of several pieces of information:

{| border=&quot;1&quot; style=&quot;border-collapse: collapse; border: 1px solid #aaa&quot; cellpadding=&quot;3&quot;
! Name !! Description
|-
| ''depot'' || Name of the project
|-
| ''script'' || A boolean value indicating whether the execution is an ad-hoc script or not
|-
| ''type'' || Name of the Object's Type
|-
| ''object'' || Name of the Object
|- 
| ''command'' || Name of the command
|- 
| ''module'' || Name of the Type for which the command is actually defined
|}

The context parts ''type'', ''name'', ''command'', and ''module'' are only used when a [[DefinedCommand]] is executed.  Otherwise the ''script'' context part is set to &lt;code&gt;true&lt;/code&gt; to indicate that an ad-hoc command is being executed.

In addition to these context components from the execution context, the Time and Day can be used to allow different ACL entries to match at different times.

=====object vs. static context=====

Commands are also executed in either 'object' or 'static' context.  

In 'object' context, then the ''type'' and ''object'' are specific values.  In 'static' context then both ''type'' and ''object'' are '''null'''.

:'''Note: for [[ControlTier 3.4.9]] and earlier, the following requirements for 'static' context apply:'''

When authorization for 'static' context occurs, the ''type'' and ''object'' values in the ACL entry '''must''' be equal to &lt;code&gt;*&lt;/code&gt; (asterisk) to match.

This means that an ACL entry without &lt;code&gt;*&lt;/code&gt; both ''type'' and ''object'' will not match when a 'static' command is executed.  You must specifically add an ACL entry to match this 'static' context.  You can then filter which static context commands are matched using the [[#command]] element.

==== Matching ====

An ACL entry is considered to ''match'' the context if every component in the [[#Context]] as well as the Time and Day section successfully match the appropriate value in the [[#acl]] entry.

The Time and Day (see the [[#timeandday]] section) are matched using the following values:

; Day of week : Numeral indicating the day of the week, from 0-6 for Sunday-Saturday.
; Hour of day : Number indicating the hour of the day, from 0-23.
; Minute of hour : Number indicating the hour of the hour, from 0-59.

==== Regular Expressions ====

Most of the attributes specified in the acls.xml use a Regular Expression to match the specific execution context against the ACL entry in the file.  (See [RegularExpressions]).

The default value is usually &quot;*&quot; which will match any value.  

It may be useful for you to understand this idiom of regular expressions:

===== Negative Match =====

To specify a regular expression that matches every string that  '''does not''' contain another string, use the Negative Lookahead Assertion:

; &lt;code&gt;(?!&amp;hellip;)&lt;/code&gt; : Matches only when the following string portion '''does not''' match the value in the &lt;code&gt;&amp;hellip;&lt;/code&gt; section.

Examples: 
{| border=&quot;1&quot; style=&quot;border-collapse: collapse; border: 1px solid #aaa&quot; cellpadding=&quot;3&quot;
! regular expression !! meaning
|-
|&lt;code&gt;^&lt;/code&gt; || Matches beginning of string
|-
|&lt;code&gt;$&lt;/code&gt; || Matches end of string
|-
|&lt;code&gt;^.*$&lt;/code&gt; || Matches any string
|-
|&lt;code&gt;^.*Suffix$&lt;/code&gt; || Matches any string that ends with &quot;Suffix&quot;
|-
|&lt;code&gt;^(?!.*Suffix$).*$&lt;/code&gt; || Matches any string that '''does not''' end with &quot;Suffix&quot;
|-
|&lt;code&gt;^.*Text.*$&lt;/code&gt; || Matches any string that contains &quot;Text&quot;
|-
|&lt;code&gt;^(?!.*Text.*$).*$&lt;/code&gt; || Matches any string that '''does not contain''' &quot;Text&quot;
|}

==== Elements in the acls.xml file ====

All elements specified below are '''required''' for each [[#acl]] entry.  See the [[#Default Contents]].

===== acl =====

Attributes:

{| border=&quot;1&quot; style=&quot;border-collapse: collapse; border: 1px solid #aaa&quot; cellpadding=&quot;3&quot;
! Name 
! Value
|-
| description
| User-specified description of the ACL entry
|}

Contains Elements:

* [[#accessto]] 
** [[#command]]
** [[#script]]
* [[#by]] 
** [[#role]]
* [[#using]]
** [[#context_2|context]] 
* [[#when]] 
** [[#timeandday]] 

===== accessto =====

This element specifies which Command name and Module name that a role is allowed to access, and/or whether the role is allowed to execute ad-hoc scripts.

Contains Elements:

* [[#command]] (1)
* [[#script]] (1)

===== command =====

Specifies the command and Module name for the acl entry.

Attributes:

{| border=&quot;1&quot; style=&quot;border-collapse: collapse; border: 1px solid #aaa&quot; cellpadding=&quot;3&quot;
! name
! value
|-
| module || Regular expression matching a module name (''module'' context component)
|-
| name || Regular expression matching a command name (''command'' context component)
|}

===== script =====

Specifies whether ad-hoc commands are allowed or not.

Attributes:

{| border=&quot;1&quot; style=&quot;border-collapse: collapse; border: 1px solid #aaa&quot; cellpadding=&quot;3&quot;
! name
! value
|-
| allowed || &quot;&lt;code&gt;true&lt;/code&gt;&quot; or &quot;&lt;code&gt;false&lt;/code&gt;&quot; (''script'' context component)
|}

===== by =====

Specifies which User Role the ACL entry applies to.  This element contains the single [[#role]] element.

===== role =====

Specifies the name of the User Role.

Attributes:
{| border=&quot;1&quot; style=&quot;border-collapse: collapse; border: 1px solid #aaa&quot; cellpadding=&quot;3&quot;
! name
! value
|-
| name || Name of the role.
|}
===== using =====

Contains one element, [[#context_2|context]]

===== context =====

Specifies the ''depot'', ''type'', and ''object'' context components.  

{{caution|In [[ControlTier 3.4.9]] and earlier, the ''type'' and ''object'' can be regular expressions to match an 'object' context command, or they must both be &lt;code&gt;*&lt;/code&gt; to match a 'static' context command. (See [[#object vs. static context]])}}

Attributes:
{| border=&quot;1&quot; style=&quot;border-collapse: collapse; border: 1px solid #aaa&quot; cellpadding=&quot;3&quot;
! name
! value
|-
| depot || Name of the project (''depot'' context component)
|-
| type || Name of the Object's Type (''type'' context component)
|-
| name || Name of the Object (''object'' context component)
|}

===== when =====

Contains one element, [[#timeandday]].

===== timeandday =====

Specifies which times during the day and on which days of the week that the ACL entry applies.

Attributes:
{| border=&quot;1&quot; style=&quot;border-collapse: collapse; border: 1px solid #aaa&quot; cellpadding=&quot;3&quot;
! name
! value
|-
| day || Either &quot;&lt;code&gt;*&lt;/code&gt;&quot; which matches all days, or a comma-separated list of day numbers (0-6 for Sunday-Saturday).
|-
| hour ||  Either &quot;&lt;code&gt;*&lt;/code&gt;&quot; which matches all hours, or a comma-separated list of hours of the day (0-23).
|-
| minute ||  Either &quot;&lt;code&gt;*&lt;/code&gt;&quot; which matches all minutes, or a comma-separated list of minutes of the hour (0-59).
|}


==== Default Contents ====

The default acls.xml contains the following:

&lt;pre&gt;

&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE acls SYSTEM &quot;file:///[CTL_BASE]/ctl/etc/acls.dtd&quot;&gt;

&lt;acls&gt;
  &lt;acl description=&quot;admin, access to any command using any context at anytime&quot;&gt;
    &lt;accessto&gt;
      &lt;command module=&quot;*&quot; name=&quot;*&quot;/&gt;
      &lt;script allowed=&quot;true&quot;/&gt;
    &lt;/accessto&gt;
    &lt;by&gt;
      &lt;role name=&quot;admin&quot;/&gt;
    &lt;/by&gt;
    &lt;using&gt;
      &lt;context depot=&quot;*&quot; type=&quot;*&quot; name=&quot;*&quot;/&gt;
    &lt;/using&gt;
    &lt;when&gt;
      &lt;timeandday day=&quot;*&quot; hour=&quot;*&quot; minute=&quot;*&quot;/&gt;
    &lt;/when&gt;
  &lt;/acl&gt;
&lt;/acls&gt;

&lt;/pre&gt;

This specifies that users with the &quot;admin&quot; role are authorized to execute any command, and does not allow any commands to be executed for users without the &quot;admin&quot; role.

&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Authorization]]
[[Category:XML]]</text>
    </revision>
  </page>
  <page>
    <title>Acls.xml</title>
    <id>1700</id>
    <redirect />
    <revision>
      <id>11483</id>
      <timestamp>2009-12-15T02:40:03Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[Acls-v10.xml]]</comment>
      <text xml:space="preserve">#REDIRECT [[Acls-v10.xml]]</text>
    </revision>
  </page>
  <page>
    <title>ActiveMQ</title>
    <id>2065</id>
    <revision>
      <id>14860</id>
      <timestamp>2010-11-26T19:16:52Z</timestamp>
      <contributor>
        <username>Anthony</username>
        <id>42</id>
      </contributor>
      <comment>/* Description */</comment>
      <text xml:space="preserve">==Description==

* Uses the [http://activemq.apache.org/download.html standard tgz binary distribution on Linux/Unix and Zip on Windows].

* Supports both Linux/Unix and Windows deployment through multiple administration &quot;strategies&quot; (resource.attribute.activemqMgmtStrategy):
** default - Linux/Unix process based administration using $ACTIVEMQ_HOME/bin/startactivemq script
** smf - Sun Management Framework based administration using svcadm
** wrapper - Uses the Java Service Wrapper included with the ActiveMQ distribution ([http://activemq.apache.org/java-service-wrapper.html Apache ActiveMQ -- Java Service Wrapper])

* Can be used in conjunction with the ControlTier Elements [[JavaServiceWrapper]] module to run as a Windows service.</text>
    </revision>
  </page>
  <page>
    <title>Active Directory</title>
    <id>2157</id>
    <redirect />
    <revision>
      <id>15164</id>
      <timestamp>2011-03-15T17:44:29Z</timestamp>
      <contributor>
        <username>Chuck</username>
        <id>13</id>
      </contributor>
      <comment>moved [[Active Directory]] to [[Active Directory Development Integration]]: stupid name</comment>
      <text xml:space="preserve">#REDIRECT [[Active Directory Development Integration]]</text>
    </revision>
  </page>
  <page>
    <title>Active Directory Development Integration</title>
    <id>2156</id>
    <revision>
      <id>15163</id>
      <timestamp>2011-03-15T17:44:29Z</timestamp>
      <contributor>
        <username>Chuck</username>
        <id>13</id>
      </contributor>
      <minor/>
      <comment>moved [[Active Directory]] to [[Active Directory Development Integration]]: stupid name</comment>
      <text xml:space="preserve">Lightweight Active Directory Service, also known as &quot;AD LDS&quot;, is a valuable service to install on windows server 2008 in order to test your active directory integration with respect to CTLCenter and ControlTier.   Since AD LDS does not lead to the  overhead of windows domains and forests, you can run an independent active directory server (lightweight edition) and provide the same service to the active directory client as a normal Active Directory Server.</text>
    </revision>
  </page>
  <page>
    <title>Active Directory integration</title>
    <id>627</id>
    <revision>
      <id>16399</id>
      <timestamp>2012-02-20T13:07:28Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Undo revision 15447 by [[Special:Contributions/Woolerystixmaker|Woolerystixmaker]] ([[User talk:Woolerystixmaker|talk]]) Reverted SPAM bot edits</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Configuration&lt;/categorytree&gt;
{{Version Required 3.4.3}}

Active Directory Server is assumed to exist, however, for those who are interested in setting one up, refer to this [http://www.youtube.com/watch?v=OzLtmbe5B80 tutorial]

Integratiing with Active Directory is similar to [[ControlTier 3.1 and OpenLDAP integration]] with a few exceptions:
* binding login is required
* other attributes, per Active Directory LDAP schema are used

Setup the LDAP login module configuration file under the ControlTier server's JETTY_HOME (carefully matching the directory setup):
&lt;pre&gt;
[chuck@centos52 etc]$ cd $JETTY_HOME/etc
[chuck@centos52 etc]$ cat ldap-loginModule.conf 
ldaploginmodule {
    org.mortbay.jetty.plus.jaas.spi.LdapLoginModule required
    debug=&quot;true&quot;
    contextFactory=&quot;com.sun.jndi.ldap.LdapCtxFactory&quot;
    hostname=&quot;localhost&quot;
    port=&quot;3890&quot;
    bindDn=&quot;cn=Manager,dc=controltier,dc=com&quot;
    bindPassword=&quot;secret&quot;
    authenticationMethod=&quot;simple&quot;
    forceBindingLogin=&quot;true&quot;
    userBaseDn=&quot;ou=users,dc=controltier,dc=com&quot;
    userRdnAttribute=&quot;cn&quot;
    userIdAttribute=&quot;cn&quot;
    userPasswordAttribute=&quot;unicodePwd&quot;
    userObjectClass=&quot;user&quot;
    roleBaseDn=&quot;ou=roles,dc=controltier,dc=com&quot;
    roleNameAttribute=&quot;cn&quot;
    roleMemberAttribute=&quot;member&quot;
    roleObjectClass=&quot;group&quot;;
    };
&lt;/pre&gt;

NOTE:  this differs from OpenLDAP integration with respect to the following attributes:
* forceBindingLogin=&amp;quot;true&amp;quot;
* userPasswordAttribute=&amp;quot;unicodePwd&amp;quot;
* userObjectClass=&amp;quot;user&amp;quot;
* roleMemberAttribute=&amp;quot;member&amp;quot;
* roleObjectClass=&amp;quot;group&amp;quot;


Update $JETTY_HOME/etc/jetty.xml replacing the default UserRealms array with:

&lt;pre&gt;
    &amp;lt;!-- =========================================================== --&amp;gt;
    &amp;lt;!-- Configure Authentication Realms                             --&amp;gt;
    &amp;lt;!-- Realms may be configured for the entire server here, or     --&amp;gt;
    &amp;lt;!-- they can be configured for a specific web app in a context  --&amp;gt;
    &amp;lt;!-- configuration (see $(jetty.home)/contexts/test.xml for an   --&amp;gt;
    &amp;lt;!-- example).                                                   --&amp;gt;
    &amp;lt;!-- =========================================================== --&amp;gt;
    &amp;lt;Set name=&quot;UserRealms&quot;&amp;gt;
      &amp;lt;Array type=&quot;org.mortbay.jetty.security.UserRealm&quot;&amp;gt;
        &amp;lt;Item&amp;gt;
          &amp;lt;New class=&quot;org.mortbay.jetty.plus.jaas.JAASUserRealm&quot;&amp;gt;
            &amp;lt;Set name=&quot;name&quot;&amp;gt;jackrabbit&amp;lt;/Set&amp;gt;
            &amp;lt;Set name=&quot;LoginModuleName&quot;&amp;gt;ldaploginmodule&amp;lt;/Set&amp;gt;
          &amp;lt;/New&amp;gt;
        &amp;lt;/Item&amp;gt;
       &amp;lt;Item&amp;gt;
          &amp;lt;New class=&quot;org.mortbay.jetty.plus.jaas.JAASUserRealm&quot;&amp;gt;
            &amp;lt;Set name=&quot;name&quot;&amp;gt;jobcenterrealm&amp;lt;/Set&amp;gt;
            &amp;lt;Set name=&quot;LoginModuleName&quot;&amp;gt;ldaploginmodule&amp;lt;/Set&amp;gt;
          &amp;lt;/New&amp;gt;
        &amp;lt;/Item&amp;gt;
       &amp;lt;Item&amp;gt;
          &amp;lt;New class=&quot;org.mortbay.jetty.plus.jaas.JAASUserRealm&quot;&amp;gt;
            &amp;lt;Set name=&quot;name&quot;&amp;gt;Workbench&amp;lt;/Set&amp;gt;
            &amp;lt;Set name=&quot;LoginModuleName&quot;&amp;gt;ldaploginmodule&amp;lt;/Set&amp;gt;
          &amp;lt;/New&amp;gt;
        &amp;lt;/Item&amp;gt;
      &amp;lt;/Array&amp;gt;
    &amp;lt;/Set&amp;gt;
&lt;/pre&gt;

Update the CONFIG_PROPS in the ControlTier server's ~/.ctierrc to include setting the java.security.auth.login.config property:

&lt;pre&gt;
[chuck@centos52 etc]$ diff ~/.ctierrc ~/.ctierrc.orig
14c14
&amp;lt; CONFIG_PROPS=&quot;-Djobcenter.config.location=/home/chuck/ctier/jobcenter/jobcenter-config.properties -Dreportcenter.config.location=/home/chuck/ctier/reportcenter/reportcenter-config.properties -Djava.security.auth.login.config=etc/ldap-loginModule.conf&quot;
---
&amp;gt; CONFIG_PROPS=&quot;-Djobcenter.config.location=/home/chuck/ctier/jobcenter/jobcenter-config.properties -Dreportcenter.config.location=/home/chuck/ctier/reportcenter/reportcenter-config.properties&quot;
29c29
&amp;lt;                 
---
&amp;gt; 
&lt;/pre&gt;

(Re)source your environment by logging out and logging in again or by directly sourcing the $HOME/.ctierrc file:

&lt;pre&gt;
[chuck@centos52 etc]$  . $HOME/.ctierrc
&lt;/pre&gt;


The ControlTier applications should now be configured for authentication and role membership using the LDAP server.




[[Category:Active Directory]]</text>
    </revision>
  </page>
  <page>
    <title>Add-batch-operation Task Reference</title>
    <id>1856</id>
    <revision>
      <id>13454</id>
      <timestamp>2010-11-10T01:38:00Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;entity.&quot; to &quot;resource.&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Tasks&lt;/categorytree&gt;
=Description=

Adds a batch operation to a predefined batch request defined with [[create-batch-request Task Reference|create-batch-request]].

=Parameters=

      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;name&lt;/td&gt;&lt;td&gt;Name of the operation: one of &quot;addResources,removeResources,setResources,createObject,updateObject,deleteObject&quot;
&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;requestId&lt;/td&gt;&lt;td&gt;Identifier for the defined Batch Request &lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;

=Parameters specified as nested elements=

Depending on the operation used (defined by &quot;name&quot; attribute), different embedded types are appropriate.

== Resource ==

A &quot;Resource&quot; type is used for these operations: &quot;createObject&quot;,&quot;updateObject&quot;

;Setting
: [[Setting Type Reference]]
;Node
: [[Node Type Reference]]
;Package
: [[Package Type Reference]]
;Assembly
: [[Assembly Type Reference]]
;Deployment
: [[Deployment Type Reference]]

This embedded Resource will define the properties of the object being created or updated.

== Resource URI list ==

A set of properties defined with a &quot;propertiesparameter&quot; is used for these operations: &quot;addResources,removeResources,setResources,deleteObject&quot;

;propertiesparameter
: [[propertiesparameter Type Reference]]

This element simply embeds a list of &quot;prop&quot; elements:

;prop
: [[prop Type Reference]]

Each prop has a name and value.  The operation expects one prop with the name &quot;maprefUri&quot; defining the *parent* resource URI for the operation.  For the &quot;deleteObject&quot; operation this is the only necessary prop.

For the other operations, you must include a prop for each child resource being added/removed or set, using the following pattern of names:

&quot;resourceUri.X&quot; where X is a number. These URIs will be used in the batch operation.

=Examples=

Add an &quot;addResources&quot; operation:

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;add-batch-operation requestid=&quot;${batchid}&quot; name=&quot;addResources&quot;&gt;
    &lt;propertiesparameter&gt;
        &lt;prop name=&quot;maprefUri&quot; value=&quot;${parentResourceUri}&quot;/&gt;
        &lt;prop name=&quot;resourceUri.0&quot; value=&quot;${addResource0}&quot;/&gt;
        &lt;prop name=&quot;resourceUri.1&quot; value=&quot;${addResource1}&quot;/&gt;
    &lt;/propertiesparameter&gt;
&lt;/add-batch-operation&gt; 
&lt;/syntaxhighlight&gt;
    
Add an &quot;updateObject&quot; operation to update a Deployment object:

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;add-batch-operation requestid=&quot;${batchid}&quot; name=&quot;updateObject&quot;&gt;
    &lt;deployment depot=&quot;${context.depot}&quot; name=&quot;${@{object}.resource.name}&quot;
                type=&quot;${@{object}.resource.classname}&quot;
                maprefUri=&quot;${@{object}.resource.mapref-uri}&quot;
                description=&quot;${@{object}.resource.description}&quot;
                basedir=&quot;${@{object}.resource.deployment-basedir}&quot;
                installRoot=&quot;${@{object}.resource.deployment-install-root}&quot;
                startuprank=&quot;${@{object}.resource.deployment-startup-rank}&quot;
                tags=&quot;${@{object}.resource.tags}&quot;/&gt;
&lt;/add-batch-operation&gt;
&lt;/syntaxhighlight&gt;

&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Resource model Ant Tasks]]</text>
    </revision>
  </page>
  <page>
    <title>Administration Index</title>
    <id>1134</id>
    <revision>
      <id>6462</id>
      <timestamp>2009-07-06T15:38:07Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>New page: {{Toolbar/Setup}} [[Image:Crystal Clear app terminal.png|right|150]] {{administration_index}}</comment>
      <text xml:space="preserve">{{Toolbar/Setup}}
[[Image:Crystal Clear app terminal.png|right|150]]
{{administration_index}}</text>
    </revision>
  </page>
  <page>
    <title>Ahonor/Scratch/User doc structure</title>
    <id>1507</id>
    <revision>
      <id>9521</id>
      <timestamp>2009-12-10T01:49:41Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">==Getting started==

* Setup ControlTier server (package installation, startup)
* Register your nodes to a project(client installs, depot setup)
* Run commands (your commands, scripts) through Jobcenter and CLI
* tag your nodes and use node filtering flags
* use threading and other dispatcher flags
* Managing your jobs
** secure your jobs using acls.xml
** organize the jobs into groups
* use module commands
** introducing utility types
* break scripts into modules
* introducing a workflow
** create a workflow from steps in your utilities
** run it in jobcenter

==Configuration==

* Backing up
** Client
** Server

* Persistence
** Server data storage
** Workbench

* Security
** Authentication
** Authorization
*** Client access control
*** LDAP
**** OpenLDAP
**** ActiveDirectory

* Logging
** Log levels
** Stack traces
** Client logging
** Server logging

==Projects==
A container for everything else
* Creating a project
* Nodes
** SSH configuration
** Registering
** Project source code

==Command dispatcher==
* understanding the dispatcher 
* scripts
* defined commands
* job management

==File repository==
* Distribution
* Publishing
** Use the WebDAV to support your scripts
** Use the WebDAV to support package deployments

==Events==
* Events
* Filtering
* API

==Resource model==
* Understanding the resource model
* define a resource model
** making commands data driven with Settings
* advanced features
** attributes, constraints

==Workflows==
* Controllers
** defining them
** different kinds of commands: workflows, dispatch etc
** introduce object-level commands (including dispatch command)
** cross object workflows
* design patterns and methodologies
* future: process language 
* future: combine the design patterns and process language</text>
    </revision>
  </page>
  <page>
    <title>Alex roadmap wishlist</title>
    <id>1478</id>
    <redirect />
    <revision>
      <id>9201</id>
      <timestamp>2009-11-20T23:52:39Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>moved [[Alex roadmap wishlist]] to [[Strawman roadmap wishlist]]</comment>
      <text xml:space="preserve">#REDIRECT [[Strawman roadmap wishlist]]</text>
    </revision>
  </page>
  <page>
    <title>Announcements</title>
    <id>115</id>
    <revision>
      <id>16112</id>
      <timestamp>2012-01-19T16:50:56Z</timestamp>
      <contributor>
        <username>Alex</username>
        <id>50</id>
      </contributor>
      <text xml:space="preserve">* '''2011-09-24''': '''3.6.1 released'''
*: [[Image:Bulbgaph.svg|18x18px|Bugfix]] [[ControlTier 3.6.1]] released.
* '''2010-11-10''': '''3.6 Wiki'''
*: [[Image:Bulbgaph.svg|18x18px|Bugfix]] New wiki documenting 3.6.


[[Older announcements|Older announcements ...]]

[[Category: Community]]</text>
    </revision>
  </page>
  <page>
    <title>Ant</title>
    <id>1846</id>
    <redirect />
    <revision>
      <id>12271</id>
      <timestamp>2009-12-31T18:21:03Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[Category:Ant]]</comment>
      <text xml:space="preserve">#REDIRECT [[Category:Ant]]</text>
    </revision>
  </page>
  <page>
    <title>Ant Reference</title>
    <id>606</id>
    <redirect />
    <revision>
      <id>10482</id>
      <timestamp>2009-12-11T23:52:17Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[Category:Ant]]</comment>
      <text xml:space="preserve">#REDIRECT [[:Category:Ant]]</text>
    </revision>
  </page>
  <page>
    <title>Ant Tasks</title>
    <id>1733</id>
    <redirect />
    <revision>
      <id>11732</id>
      <timestamp>2009-12-16T19:08:07Z</timestamp>
      <contributor>
        <username>Gschueler</username>
        <id>8</id>
      </contributor>
      <comment>Redirected page to [[Category:Ant Tasks]]</comment>
      <text xml:space="preserve">#REDIRECT [[:Category:Ant Tasks]]</text>
    </revision>
  </page>
  <page>
    <title>Ant command</title>
    <id>86</id>
    <revision>
      <id>16462</id>
      <timestamp>2012-02-22T12:27:28Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Undo revision 15450 by [[Special:Contributions/Maloneypark|Maloneypark]] ([[User talk:Maloneypark|talk]]) Removed SPAM bot edit</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Defined Commands&lt;/categorytree&gt;

This [[Module Development Guide]] page describes how to define a command using the &quot;&lt;code&gt;AntCommand&lt;/code&gt;&quot; [[Type-v10.xml#command|command-type]]. 

This command type is useful if you want to use Ant tasks to carry out your procedure.

==Create or choose a type==

You can add the command to an existing type definition or you can create a new type. To create a new type run the ProjectBuilder &lt;code&gt;create-type&lt;/code&gt; and follow the prompts:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ ctl -m ProjectBuilder -c create-type -- -type antcommands
&lt;/syntaxhighlight&gt;

The create-type command will generate a [[type.xml]] file where you can define your command.

Alternatively, you can use the ControlTier [[Graphical type editor|Type Editor]] to create a new type graphically.

==Edit type.xml==

Ant commands are simple to define and are made up of an &quot;implementation&quot;.  An easy one to define is a &quot;hello&quot; command. Add a new command element to your [[type.xml]] file:

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;command name=&quot;hello&quot; description=&quot;hello command.&quot; 
    command-type=&quot;AntCommand&quot; is-static=&quot;true&quot;&gt;
   &lt;implementation&gt;
      &lt;echo&gt;Hello&lt;/echo&gt;
   &lt;/implementation&gt;
&lt;/command&gt;
&lt;/syntaxhighlight&gt;

==Build the type==

Use the &quot;build-type&quot; command to generate the command files.
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ ctl -m ProjectBuilder -c build-type -- -type antcommands -upload -deploy
&lt;/syntaxhighlight&gt;

The -upload and -deploy flag cause the generated type to be uploaded to Workbench and then deployed to the local client.
If you are using the [[Graphical type editor]] this step is done by pressing the &quot;Package Commands&quot; button.

==Run the command==

The antcommands type is now deployed and the new command run:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ ctl -m antcommands -c hello
Hello
&lt;/syntaxhighlight&gt;

&lt;noinclude&gt;{{Manual/navbox}}&lt;/noinclude&gt;

[[Category:Defined Commands]]
[[Category:Ant]]</text>
    </revision>
  </page>
  <page>
    <title>Ant support</title>
    <id>210</id>
    <revision>
      <id>16482</id>
      <timestamp>2012-02-23T14:38:46Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Removed SPAM bot edit</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant&lt;/categorytree&gt;


Ant users will be happy to learn that CTL has excellent support for Ant. Ant is a first class citizen. Nearly the entire CTL Java API is exposed as Ant tasks and types. You will need these CTL tasks to enable Ant automation to be useful for distributed automation jobs. All context data provided by CTL is exposed as Ant properties files. This means you can bring your Ant skills to bear and work within an Ant friendly environment and accomplish making flexible, maintainable and operational deployment and control process.

[[Image:framework-4-ant.png]]

The figure above highlights the Ant support in the CTL software framework. CTL adopts the &quot;batteries included&quot; metaphor incorporating a full Ant distribution (currently 1.8), CTL-specific and third party task libraries (ant-contrib, antxras) and a wide variety of supporting Java libraries. You can also add your own Ant library dependencies by copying them into the CTL's $ANT_HOME/lib directory.

==Ant commands==
{{Main|Ant command}}

The CTL type.xml module definition file is used to define new commands. To define a command using Ant tasks declare command-type=&quot;AntCommand&quot;. For the body of your command, define it inside a set of &lt;implementation&gt;&lt;/implementation&gt; tags. Ant commands are, of course, defined using Ant tasks.

An example is shown below:

&lt;syntaxhighlight&gt;    
      &lt;command name=&quot;hello&quot; description=&quot;say hello with Ant.&quot; 
               command-type=&quot;AntCommand&quot; is-static=&quot;true&quot;&gt;
        &lt;implementation&gt;	 
	  &lt;!--
	   ** your command implmentation 
	   ** tasks go here.
	  --&gt;
	  &lt;echo message=&quot;hi there&quot;/&gt;
        &lt;/implementation&gt;
      &lt;/command&gt;
&lt;/syntaxhighlight&gt;

You can use any Ant tasks. For convenience, the ant-contrib tasks are already declared.

===Command Dispatcher Ant tasks===
{{Main|:Category:Command Dispatcher Ant Tasks}}

You are no doubt familiar with Ant tasks like &lt;code&gt;ant&lt;/code&gt; and &lt;code&gt;antcall&lt;/code&gt; to invoke another build file or another target in the same build file. These mechanisms allow you to break your builds into pieces so they are smaller, simpler and modular. CTL was designed with that kind of modularity in mind too and provides a similar mechanism, enabling one command to call another command.

CTL provides an Ant task called [[Controller Task Reference|controller]] that gives you access to CTL's command dispatcher. Using this task you can invoke commands in local or remote modules.

The [[Controller Task Reference|controller]] task includes a set of other tags letting you specify command line options and set any additional properties for the data context of the receiving command.
&lt;pre&gt;
      &lt;controller&gt;
        &lt;execute&gt;
	  &lt;context depot=&quot;${context.depot}&quot;/&gt;
	  &lt;command name=&quot;commandName&quot; module=&quot;moduleName&quot;/&gt;
	  &lt;arg line=&quot;-opt1 arg1 -opt2 arg2&quot;/&gt;
	  &lt;property name=&quot;a&quot; value=&quot;a value&quot;/&gt;
	  &lt;property name=&quot;b&quot; value=&quot;b value&quot;/&gt;
	  &lt;property name=&quot;c&quot; value=&quot;c value&quot;/&gt;
        &lt;/execute&gt;
      &lt;/controller&gt;
&lt;/pre&gt;

==Programming Perspective==

An experienced Ant programmer is accustomed to editing their build xml files, adding targets and tasks to automate their build life cycle. While Ant provides many core and optional tasks to carry out low level procedures for the deployment part of the application life cycle, one eventually realizes Ant's limitations and so will look for other tools that facilitate the remaining process.

The CTL framework focusses on these remaining distributed management aspects required to handle the deployment process., This provides experienced Ant users a means to define automation in Ant. But how does one integrate their existing Ant build code to the CTL deployment and management framework? What perspective should one have when thinking about how to program their automation using Ant and CTL? There is no one absolute answer but there are three alternatives which should be considered.

===Ant calls CTL===

The first obvious starting point is to call CTL from your Ant build procedure. In this scenario, you can simply call CTL commands via Ant's exec task, the same way you would run CTL commands via the shell.

The figure below shows an Ant project called &quot;mybuild&quot; that uses the exec task to call a command defined in CTL. The command defined in CTL can itself be implemented in Ant.

[[Image:perspective-ant-driving.png]]

When considering calling CTL commands from your Ant project, recall there are two styles of commands you can use:
&lt;pre&gt;
      &lt;!-- dispatch a arbitrary shell script to all deployhosts: --&gt;
      &lt;exec executable=&quot;ctl-exec&quot;&gt;
        &lt;arg line=&quot;-I tags=deployhosts -s myscript.sh&quot;/&gt;
      &lt;/exec&gt;

      ... or ...

      &lt;!-- dispatch deploy command to all deployhosts: --&gt;
      &lt;exec executable=&quot;ctl&quot;&gt;
        &lt;arg line=&quot;-I tags=deployhosts -m mymodule -c deploy&quot;/&gt;
      &lt;/exec&gt;
&lt;/pre&gt;
    
This approach makes sense when you want to have the build process kick off a separately defined deploy process.

===CTL calls Ant===

You might already have a working procedure defined in an Ant build file. You can invoke external build files from CTL.

The figure below describes a CTL defined command called &quot;callAnt&quot; which uses the ant Ant task to invoke the &quot;run&quot; target in an external build file called &quot;mybuild&quot;:

[[Image:perspective-ctl-driving.png]]

In this example, the &quot;run&quot; target uses the exec task to call a start.sh script passing to it a command line argument. As the code fragment shows below you can pass parameters as named properties via the property sub element:
&lt;pre&gt;
      &lt;!-- call an external Ant build file: --&gt;
      &lt;ant antfile=&quot;mybuild.xml&quot; target=&quot;run&quot;&gt;
      &lt;property name=&quot;param1&quot; value=&quot;val1&quot;/&gt;
      &lt;/exec&gt;
&lt;/pre&gt;
    
This approach works best when an existing build file lives outside of the CTL framework yet must be called by some step managed by a CTL command.

===CTL commands===
{{Main|Ant command}}
The final programming choice is to implement your procedure completely inside a CTL command definition. In this scenario, an experienced Ant user prefers to implement their function using Ant tasks of their choice.

Specify &quot;AntCommand&quot; as the command-type and then insert the Ant code and logic in between &lt;implementation&gt;&lt;/implementation&gt; tags.

[[Image:perspective-ctl-solo.png]]

In this example, the exec task is used to invoke the &quot;start.sh&quot; script.
&lt;pre&gt;
      &lt;!-- call the start script --&gt;
      &lt;exec executable=&quot;start.sh&quot;&gt;
      &lt;arg line=&quot;-arg1 ${opts.param1}&quot; /&gt;
      &lt;/exec&gt;
&lt;/pre&gt;
    
You will also notice that the &quot;run&quot; command definition also includes the definition of a command line option called &quot;param1&quot;. The argument to the &quot;-arg1&quot; option is passed in as the opts.param1 property reference.

Defining a CTL command using Ant code inside the command definition makes your procedure's implementation completely standalone. This choice is often preferred when you are comfortable scripting in Ant, are familiar with the Ant task library and want to leverage CTL's built in support for Ant.


{{Reference/navbox}}
[[Category:Ant]]</text>
    </revision>
  </page>
  <page>
    <title>ApacheSite</title>
    <id>1385</id>
    <revision>
      <id>10296</id>
      <timestamp>2009-12-11T19:08:07Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Site&lt;/categorytree&gt;
This module is designed for use with the [[ApacheSystemService]] module and extends [[Site]] to include the Apache HTTP server specific &quot;reload&quot; command and the reload-only deployment workflow.

== Limitations ==
Currently only [[ApacheSystemService]] implements the Reload and Deploy-Reload-Only commands. A future enhancement would add this capability to the [[Apache]] modules too, at which time the Apache site's constraints could be broadened.

[[Category:Site]]
[[Category:Apache]]
[[Category:Elements]]</text>
    </revision>
  </page>
  <page>
    <title>ApacheSystemService</title>
    <id>836</id>
    <revision>
      <id>16409</id>
      <timestamp>2012-02-20T13:21:26Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Undo revision 15453 by [[Special:Contributions/Maloneypark|Maloneypark]] ([[User talk:Maloneypark|talk]]) Reverted SPAM bot edits</comment>
      <text xml:space="preserve">The '''ApacheSystemService''' module is a [[SystemService]] subtype that integrates the [http://httpd.apache.org Apache HTTP Server 2.x] on Red Hat Enterprise Linux/CentOS 5. It assumes that the Apache is installed via the distribution's RPMs. In addition, it can configure the mod_proxy_ajp connector in order to connect to a TomcatServer instance running on the same machine.

It also shares [[Setting]] types with the [[Apache]] module.

This module will be in the [[ControlTier 3.4.4]] release.

== Limitations ==
This module has only been tested on RHEL/CentOS 5, and assumes the directory hierarchy in that distribution.

== Comparison with Apache module ==
* The [[Apache]] module uses an [[ApacheZip]] dependency and installs it into a location reachable by the ControlTier client user, usually in a deployment hierarchy somewhere in $HOME. In contrast, this module does not deal with installation and relies on Apache httpd being installed via system packages.
* [[Apache]] uses apachectl to control the service, while ''ApacheSystemService'' uses the /etc/init.d/httpd script.

== Syntax ==
   &lt;deployment type=&quot;ApacheSystemService&quot; name=&quot;''objectName''&quot; description=&quot;System-installed Apache instance&quot;&gt;
      &lt;resources replace=&quot;true&quot;&gt;
         &amp;lt;!-- ''required'' --&amp;gt;
         &lt;resource type=&quot;ApacheServerName&quot; name=&quot;''settingName''&quot;/&gt;
         &amp;lt;!-- ''other settings go here'' --&amp;gt;
         &amp;lt;!-- ''Add following dependencies if Tomcat ajp integration desired '' --&amp;gt;
         &lt;resource type=&quot;TomcatServer&quot; name=&quot;''tomcatServerObject''&quot;/&gt;
         &lt;resource type=&quot;TomcatAjpPort&quot; name=&quot;''settingName''&quot;/&gt;
      &lt;/resources&gt;
      &lt;referrers replace=&quot;false&quot;&gt;
         &lt;resource type=&quot;Node&quot; name=&quot;''nodeName''&quot;/&gt;
      &lt;/referrers&gt;
   &lt;/deployment&gt;

== Preparation ==
Prior to using this module, the user of the ControlTier client node must have write access to ''/etc/httpd/conf/httpd.conf'' and ''/etc/httpd/conf.d/''. This allows the [[Docs-Generate]] command to place generated configuration files.

== Example ==

=== Sample object xml ===
  &lt;?xml version=&quot;1.0&quot;?&gt;
  &lt;!DOCTYPE project PUBLIC &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; &quot;project.dtd&quot;&gt;
  &lt;project&gt;
   &lt;setting type=&quot;ApacheServerName&quot; name=&quot;helloWorld&quot; description=&quot;&quot; settingValue=&quot;ctvm1.local&quot;/&gt;
  
   &lt;deployment type=&quot;ApacheSystemService&quot; name=&quot;helloWorld&quot; description=&quot;System-installed Apache instance&quot;&gt;
      &lt;resources replace=&quot;true&quot;&gt;
         &lt;resource type=&quot;ApacheServerName&quot; name=&quot;helloWorld&quot;/&gt;
      &lt;/resources&gt;
      &lt;referrers replace=&quot;false&quot;&gt;
         &lt;resource type=&quot;Node&quot; name=&quot;ctvm1.local&quot;/&gt;
      &lt;/referrers&gt;
   &lt;/deployment&gt;
  &lt;/project&gt;

Change the ApacheServerName setting and the node name to match your client node.

=== Step 1: Load object xml ===
Put the above xml into &lt;code&gt;apacheSystemService.xml&lt;/code&gt;.

Then load the resources:

  ctl -p ''project'' -m ProjectBuilder -c load-resources -- -filename apacheSystemService.xml

=== Step 2: Deploy the object ===

  ctl -p ''project'' -t ApacheSystemService -r helloWorld -c Deploy

=== Step 3: Test ===

Browsing to http://''servername''/ should show the default Apache index.html, or whatever you have in ApacheDocumentRoot.

== Tomcat AJP Integration ==

This module also integrates the mod_proxy_ajp Apache module, included in the Apache 2 distribution. It allows for traffic to be proxied via the AJP13 protocol to a Tomcat instance running on the same host. To do so, list the [[TomcatServer]] object and the TomcatAjpPort setting as dependencies of your ApacheSystemService resource. Optionally also specify these settings:

* ApacheProxyAjpLocation: The location under the the root URL for which traffic will be forwarded.
* ApacheProxyAjpWebapp: The Tomcat web application to which traffic will be proxied.

By default, ApacheProxyAjpLocation is set to ''/examples/''; ApacheProxyAjpWebapp is set to ''examples/''. This means that ''http://servername/examples/'' forwards to the Tomcat's ''examples'' application.

== Settings ==
The following Settings types are available:

* ApacheCgiBin: The cgi-bin directory. Default: ''/var/www/cgi-bin''
* ApacheDocumentRoot: The web server document root. Default: ''/var/www/html''
* ApacheErrorDir: Directory for error pages. Default: ''/var/www/error''
* ApacheGroup: Group under which Apache runs. Default: ''apache''
* ApacheIconsDir: Directory for icons for generated directory listings. Default: ''/var/www/icons''
* ApacheListen: The listen specification, generally a port (or an address and port). Default: ''80''
* ApacheProxyAjpLocation: The location under ''http://servername/'' for which traffic will be forwarded via mod_proxy_ajp. Default: ''/examples/''
* ApacheProxyAjpWebapp: The Tomcat web application to which traffic will be proxied by mod_proxy_ajp. Default: ''examples/''
* ApacheServerAdmin: Server administrator email address. Default: ''webmaster@localhost.localdomain''
* ApacheServerName: Web server fully qualified domain name. ''No default. You must specify this setting.''
* ApacheServerRoot: Root directory for server working files. Default: ''/etc/httpd''
* ApacheUser: User under which Apache runs. Default: ''apache''
* SystemServiceScript: The /etc/init.d/ script that controls the Apache server. Default: ''httpd''
* SystemServiceUseSudo: Whether to use sudo to run the service commands. Default: ''true''
* TomcatAjpPort: Shared setting with [[TomcatServer]]. Use the same instance for both the ApacheSystemService resource and the TomcatServer object. Specifies the TomcatServer's AJP13 port. ''No default, since it is assumed that it will be set if a TomcatServer is present and we are using mod_proxy_ajp integration.''

[[Category:Service]]
[[Category:Apache]]
[[Category:Elements]]</text>
    </revision>
  </page>
  <page>
    <title>Apply-macro</title>
    <id>1689</id>
    <redirect />
    <revision>
      <id>11429</id>
      <timestamp>2009-12-14T23:28:48Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[Apply-macro Task Reference]]</comment>
      <text xml:space="preserve">#REDIRECT [[Apply-macro Task Reference]]</text>
    </revision>
  </page>
  <page>
    <title>Apply-macro Task Reference</title>
    <id>135</id>
    <revision>
      <id>14376</id>
      <timestamp>2010-11-11T17:26:51Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Tasks&lt;/categorytree&gt;
=Description=
      &lt;p&gt;
	&lt;code&gt;apply-macro&lt;/code&gt; iterates over the results of an input generator
	and calls the named macro with selected paramaters.
      &lt;/p&gt;
      &lt;p&gt;Input generators are specified as nested elements, you
      must specify exactly one. Input generators can be listed here: [[:Category:ApplyMacro Ant Type]].
      &lt;/p&gt;

=Parameters=

      &lt;table class=&quot;wikitable&quot;&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;macro&lt;/td&gt;&lt;td&gt;The defined macro to call&lt;/td&gt;&lt;td&gt;No if an inline sequential is used&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;threadcount&lt;/td&gt;&lt;td&gt;Maximum number of threads to use&lt;/td&gt;&lt;td&gt;No. Defaults to 1&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;

=Parameters specified as nested elements=

      &lt;p&gt;&lt;strong&gt;errorhandler&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;If ane error occurs during the course of the apply-macro execution,
      an [[ErrorHandler_Type_Reference |errorhandler]] can
      be configured to handle the exception.
      &lt;/p&gt;

      &lt;p&gt;&lt;strong&gt;input generator&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
        The apply-macro task also requires a [[:Category:ApplyMacro_Ant_Type|input generator]].
      &lt;/p&gt;

      &lt;p&gt;&lt;strong&gt;sequential&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
        The apply-macro task also can accept a &lt;code&gt;sequential&lt;/code&gt; element in lieu of an externally defined macro. 
        This is the list of Ant tasks to be run for each iteration of apply-macro.
      &lt;/p&gt;

=Examples=

      &lt;p&gt;
        This example iterates against a nested propertiesquery and executes a defined macro with desired parameters
        and sort order:
      &lt;/p&gt;
 &lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;property name=&quot;var.download.dir&quot; value=&quot;/var/tmp&quot;&gt;
&lt;property name=&quot;package.war.headlines-20060910.war.package-install-rank&quot; 
    value=&quot;3&quot;/&gt;
&lt;property name=&quot;package.jar.hncore-20060910.jar.package-install-rank&quot; 
           value=&quot;2&quot;/&gt;
&lt;property name=&quot;package.zip.jakarta-tomcat-4.1.31.zip.package-install-rank&quot; 
           value=&quot;1&quot;/&gt;

&lt;macrodef name=&quot;getPackage&quot;&gt;
   &lt;attribute name=&quot;pkgtype&quot;/&gt;
   &lt;attribute name=&quot;filename&quot;/&gt;
   &lt;sequential&gt;
      &lt;echo&gt;downloading package file @{filename}&lt;/echo&gt;
      &lt;get src=&quot;http://repo:8080/webdav/pkgs/@{pkgtype}s/@{filename}&quot;
               dest=&quot;${var.download.dir}/@{filename}&quot;/&gt;
   &lt;/sequential&gt;
&lt;/macrodef&gt;


&lt;apply-macro macro=&quot;getPackage&quot;&gt;
    &lt;errorhandler&gt;
      &lt;fail/&gt;
    &lt;/errorhandler&gt;
    &lt;propertiesquery id=&quot;packages-query&quot;
                select=&quot;pkgtype,filename&quot;
                from=&quot;package\.([^\.]*)\.(.*)\.package-install-rank&quot;&gt;
         &lt;sortby&gt;
           &lt;select name=&quot;pkgtype&quot; by=&quot;name&quot; order=&quot;ascending&quot;/&gt;
         &lt;/sortby&gt;
     &lt;/propertiesquery&gt;
&lt;/apply-macro&gt;
&lt;/syntaxhighlight&gt;

You can specify the block of code to execute inline via a &lt;code&gt;sequential&lt;/code&gt; element.
Here's the above example with the body of the &quot;getPackage&quot; macrodef inside the sequential:

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;

&lt;apply-macro&gt;
    &lt;errorhandler&gt;
      &lt;fail/&gt;
    &lt;/errorhandler&gt;
    &lt;propertiesquery id=&quot;packages-query&quot;
                select=&quot;pkgtype,filename&quot;
                from=&quot;package\.([^\.]*)\.(.*)\.package-install-rank&quot;&gt;
         &lt;sortby&gt;
           &lt;select name=&quot;pkgtype&quot; by=&quot;name&quot; order=&quot;ascending&quot;/&gt;
         &lt;/sortby&gt;
    &lt;/propertiesquery&gt;
    &lt;sequential&gt;
      &lt;echo&gt;downloading package file @{filename}&lt;/echo&gt;
      &lt;get src=&quot;http://repo:8080/webdav/pkgs/@{pkgtype}s/@{filename}&quot;
               dest=&quot;${var.download.dir}/@{filename}&quot;/&gt;
   &lt;/sequential&gt;
&lt;/apply-macro&gt;
&lt;/syntaxhighlight&gt;

You can see that the same expansion tokens used in the getPackage macrodef (pkgtype and filename) can be referenced inside the sequential element.  The values of those tokens get substituted during execution. 
      &lt;p&gt;
        This example iterates against a queryresults and executes a defined macro with desired parameters
        and sort order:
      &lt;/p&gt;

 &lt;syntaxhighlight lang=&quot;xml&quot;&gt;
 &lt;macrodef name=&quot;processDeployment&quot;&gt;
   &lt;attribute name=&quot;dType&quot;/&gt;
   &lt;attribute name=&quot;dName&quot;/&gt;
   &lt;sequential&gt;
      &lt;echo&gt;deployment type: @{dType}, deployment name: @{dName}/echo&gt;
   &lt;/sequential&gt;
&lt;/macrodef &gt;

&lt;propertiesquery-task id=&quot;deployments.query&quot;
                         select=&quot;dType,dName&quot;
                         from=&quot;deployment.([^\.]*).([^\.]*).startup-rank&quot;&gt;
   &lt;sortby&gt;
      &lt;select by=&quot;value&quot; order=&quot;ascending&quot;/&gt;
   &lt;/sortby&gt;
&lt;/propertiesquery-task&gt;


&lt;apply-macro macro=&quot;showDeploymentsByNode&quot;&gt;
   &lt;queryresults refid=&quot;deployments.query&quot;/&gt;
&lt;/apply-macro&gt;
&lt;/syntaxhighlight&gt;

&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Utility Ant Tasks]]</text>
    </revision>
  </page>
  <page>
    <title>ApplyMacro Task Reference</title>
    <id>968</id>
    <redirect />
    <revision>
      <id>5301</id>
      <timestamp>2009-05-22T19:52:01Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>[[ApplyMacro Task Reference]] moved to [[Apply-macro Task Reference]]: Renamed to match task name</comment>
      <text xml:space="preserve">#REDIRECT [[Apply-macro Task Reference]]</text>
    </revision>
  </page>
  <page>
    <title>Architect Training</title>
    <id>1001</id>
    <revision>
      <id>16422</id>
      <timestamp>2012-02-20T14:14:23Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <comment>Corrected link to command dispatching page</comment>
      <text xml:space="preserve">Send an email to [mailto:training@dtosolutions.com?Subject=Architect%20Training training@dtosolutions.com] or go to the [http://www.dtosolutions.com/controltier/ ControlTier Training and Support] page to schedule the Architect Training.''

==Overview==

A three day course covering automation essentials, extending the ControlTier types, and workflow design.

===Learn To===

===Audience===
* Software Engineers
* System Engineers

===Prerequisites===
==== Required Prerequisites ====
* [[One Week Foundation Training]] ''or equivalent experience''


==Schedule==

The training program is broken down into three days, where each day is broken into three sessions: morning, lunch and afternoon.
We realize that the attendees are key personnel and often need some flexibility to handle operational activities. We can tailor the schedule to fit the needs of your team.

===Day 1===
''Morning''

* [[Course - Automation Development Essentials]]: Part 1

''Lunch''

''Afternoon''

* [[Course - Automation Development Essentials]]: Part 2

===Day 2===
''Morning''

* [[Course - Architect: Commands and Workflows]]

''Lunch''

''Afternoon''

* Object orientation
* Lab: [[Override an inherited command]], [[Calling a supertype command]], [[Template method pattern]]
* CTL Internals: [[Understanding the client]], [[Command life cycle]], [[Model-driven_command_dispatching|Command dispatching]]

===Day 3===
''Morning''
* Extending the ControlTier model:  [[Type modeling]], [[Constraints]], [[Attributes]]
* Lab: [[Option defaulting with an attribute]], [[Option defaulting with a literal and attribute]]

''Lunch''

''Afternoon''

* Advanced dispatching: [[Dispatch command to dependencies]], [[Dispatch command and macro]]
* Libraries: [[Create an extension library]], [[Create a seed library]]

[[Category:Training Programs]]</text>
    </revision>
  </page>
  <page>
    <title>Architecture</title>
    <id>36</id>
    <revision>
      <id>16376</id>
      <timestamp>2012-02-20T10:08:01Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <comment>Undo revision 15455 by [[Special:Contributions/Danalovett|Danalovett]] ([[User talk:Danalovett|talk]]) Reverted SPAM bot edits</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Introduction&lt;/categorytree&gt;

The [[ControlTier]] administrative framework is comprised of a server and a client. The server can run standalone  to execute distributed commands. In this mode a user [[Running ad hoc commands|runs ad hoc commands]] via [[ctl-exec]] or Jobs via [[Ctlcenter]] running on a central host. 

Alternatively, a user might install the client on remote hosts to run defined commands in CTL [[Modules]].   This administration host houses the module software and becomes a single point of control. Distributed command execution is invoked using SSH while artifacts and information needed by executing commands on the clients are retrieved via HTTP.
Except for SSH and Java, ControlTier installers include all the needed components and provide a means to distribute and set up the server and client.
Both the server and client software is based on Java and should work on most flavors of Unix (eg, Linux, Solaris, BSD) and NT-based Windows  (eg, XP, Windows Server, Vista, etc). See [[System requirements]]. 

[[Image:arch-overview.png]]

The diagram above provides an overview to the ContolTier server and client components, their relationships and the network protocols they use. The rest of this document describes the system components for both the ControlTier server and client software.

==Server==
The [[ControlTier server]] hosts a variety of services to support the automation activity running across the ControlTier managed hosts. The server components are implemented in web applications running in a Java servlet container. The server also includes stores to maintain files and resource model data. These services can configured to write the data to the file system on the server or optionally, to a relational database.  As of 3.6.0, the server installation includes Jetty 6.1.21, Apache Jackrabbit, and two ControlTier webapps: Ctlcenter and Workbench, as well as, a variety of [[FAQ#What_powers_ControlTier.3F|supporting open source frameworks and libraries]].

The following sections describe each server component covering their role and function.

===Central Command Dispatcher===
The Central Command Dispatcher provides a centralized interface to the ControlTier [[command dispatcher]]. The Central Command Dispatcher acts as a network service that can trigger command execution in the distributed environment. These commands can be shell scripts or ControlTier [[#Workflows|workflows]].
These commands can be triggered to run just once, triggered by a schedule, or they can be named and become part of a central dashboard where they can run at a time of a user's choosing.

The [[Jobcenter]] webapp provides a graphical interface to the Central Command Dispatcher.

===Modules===
{{main|Modules}}
Formalized procedures can be defined in a command inside a Module.  Multi-step processes can be defined as ControlTier workflows. ControlTier commands are defined in [[types]] and can encompass sequences of actions, across local or distributed resources. After their definition, commands are compiled into executable modules that can be distributed to the ControlTier client. Once installed, the commands in the module can be invoked via the [[command dispatcher]].

===Resource model===
{{main|Resource model}}
{{Resource model/intro}}

===Transforms===
Transforms generate different representational views of the resource model. Transforms are defined in terms of template file, output path and a resource model scope. The transform service can run a transform on the fly, or they can be saved as &quot;transform documents&quot; that can be executed by ControlTier workflows. Representational views expose the resource model in a variety of formats useful to workflows or for sharing resource model information to other tools.

Transforms can be defined via the [[Graphical resource editor]], where they can be developed and previewed. Transforms can also be defined as part of the resource model.

===File Share===
{{main|WebDAV}}
Application build artifacts, workflows and resource model data are made available via a file share service. These artifacts reside in a physical store exposed via [http://www.webdav.org WebDAV]. Clients can access the files in the store via HTTP GET methods, while automated processes (such as builds) can load or remove items via WebDAV PUT and DELETE.

[http://jackrabbit.apache.org/ Apache Jackrabbit] is included as part of the standard installation.

===Event Logger===
{{Event logger/intro}}

==Client==

Any host targeted for automation activity has the [[ControlTier client]] software installed. Once the host is registered as a node on the ControlTier server, it becomes accessible to the command dispatching framework. The software components that comprise the client are described below.

===Local Command Dispatcher===
{{main|CTL architecture}}
The client software provides a command and control dispatching framework that includes features such as script and workflow command dispatching, network abstracted distributed control, and a multitude of pre-built utilities needed for managing large scale environments.

* The ControlTier client is NOT a long running process. Once the executed command completes, the process exits. There is no idle process consuming system resources if a command is not running.

===Resources===
The client provides a local repository for resources that are managed on the client. This repository organizes the resources by their type and is structured to provide an operational workspace that can be used by workflows.  

===Modules===

The command dispatcher supports a plug-in style architecture that allows additional functionality to be added. A ControlTier  extension adds features to the dispatcher framework to access the resources in the server and exposes the Workbench web services as Ant tasks.

==User interface==
The ControlTier architecture supports two user interfaces: HTML and command line.

===HTML===

Workbench, Jobcenter and Reportcenter employ a DHTML/AJAX style graphical interface and assume an AJAX capable browser such as Firefox (See [[Supported browsers]]). The WebDAV webapp also makes it possible to directly explore repository via HTML and most any web client.

===Command Line===

The ControlTier client's are all accessible via a set of shell commands. These shell commands allow users to execute commands defined in automation modules and administrate the framework. See [[:Category:Command-line_utilities]]

==Network Protocols==

The ControlTier platform employs standard network protocols to invoke commands and access resources on the server.

===HTTP===

HTTP(S): [target host] &amp;mdash; connects-to &amp;rarr; [admin host]

Client access to the server's webapps and resources is via HTTP. The default port is 8080.

If desirable, the server and client can be set up to use SSL.

===SSH===
SSH: [admin host] &amp;mdash; connects-to &amp;rarr; [target host]

Actions from the administration host are dispatched via outbound SSH commands to the target hosts. The default port is 22.

Part of the installation and setup of the client software is preparing the SSH key configuration to allow remote commands from the central host.

===Log4J===

LOG4J: [target host] &amp;mdash; connects-to &amp;rarr; [admin host]

Commands can record their activity over [http://logging.apache.org/log4j/ log4j]. A log4j listener runs from the [[Reportcenter]] webapp. The default port is 1055.

==Optional: LDAP Authorization==

To simplify getting started with the server and client, the default configuration uses simple file-based authentication and authorization. For organizations that have an existing LDAP server and wish to manage user and role definitions there, the server and client software can be configured to use LDAP-based security. Both client and server use JNDI methods to access the LDAP server.

See: [[:Category:Configuration]] section in the Installation Guide.

==Installer==

Because there are several pieces of software that must be installed and configured together correctly, the standard distribution employs an installer. This installer includes all the ControlTier software components and is driven by a single configuration file.

See [[Installation]] for details about the installer.

{{Guide/navbox}}

[[Category:Introduction]]</text>
    </revision>
  </page>
  <page>
    <title>Architecture (TNG)</title>
    <id>1504</id>
    <revision>
      <id>14095</id>
      <timestamp>2010-11-10T15:35:22Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;ctl-depot&quot; to &quot;ctl-project&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Roadmap&lt;/categorytree&gt;
This document describes a new architecture for the ControlTier system addressing most of the issues raised in the [[Strawman_roadmap_wishlist#System_architecture|roadmap wish list]].
==Components==

The diagram below describes the CTL system components in relation to each other. Centralized management is done via a single webapp called &quot;CTL Center&quot; utilizing a set of REST accessible services. These services in turn manage data in an RDB and files in a WebDAV server. Remote commands are executed via the CTL clients installed on hosts where processes are managed. External tools that manage host infrastructure (virtual or physical) can be integrated to share Node definition data to the CTL system.

Each of the components is described further in its own section.

Figure: System components

[[Image:strawman-architecture.png]]

===CTL Center===

The &quot;CTL Center&quot; (say control center) serves as the graphical operations console to manage processes through the ControlTier infrastructure.
Users log in and depending on their role and access navigate through a dashboard to one of several tools, either to view past and current activity, execute a command or process or administrate the system. 

====Functional areas====
[[Image:ctl-center-functional-scope-comparison.png|thumb|Features found in existing webapps]]

CTL Center's feature set is similar to those found across several webapps currently developed by ControlTier developers:
* Command execution: The [[Jobcenter]] application provides users an interface to run commands and schedule them to run periodically. Jobs can be arranged into groups and their access governed by CTL's [[acls.xml]] configuration. 
* Reporting: The [[Reportcenter]] application provides a historical log of command and job executions. It also provides a query interface that supports RSS feeds. Additionally, it also supports adhoc reporting from either a HTTP-based api as well as BIRT integration.
* Dashboard and notification: The [http://code.google.com/p/ops-scorecard/ ops-scorecard] application provides a service-oriented dashboard providing several trending graphs and event notification subscriptions. 
* Resource definition: The [[Workbench]] application (along with [[project.xml]]) provide tools and interface to upload and view resource model definitions.

Figure: CTL Center feature areas

[[Image:strawman-ctl-center-feature-areas.png]]

Administrative functions reside in a separate area of the interface and support the following:
* Clients: Register nodes and install CTL clients. Obtain heartbeat status
* Users: Define users and user groups and access control roles.

===CTL Server===

====Services====
Services are accessible using the REST model.
; Inventory
: CRUD operations for resource (nodes, resources, resource sets) and process model definitions
; Execution
: CRUD+Run,Kill operations for on-demand and scheduled process and command execution
; Reporting
: Event registration and querying of report messages
; Artifacts
: Upload and request packaged system artifacts (controllers, processes)
; Session
: Shared workflow session data

====Queues====
Several queues support the operation of the system:
; System
: Jobs governing internal processes such as reporting and notifications
; Administrative
: Jobs managing client management tasks (eg client installation, artifact distribution)
; User
: User-defined jobs to execute commands and processes on demand or on a scheduled basis

====RDB====
Domain model:
* Resources
** Nodes
** BusinessServices (rename)
* Processes
* Jobs (Executions)
* Reports
** Execution History
** Change History
* Notification subscriptions
* Node heartbeats
* Users and groups
* Profile and configuration

====WebDAV====
System artifacts:
* resources
* controllers
* processes

User artifacts:
* files and directories
* packages

===CTL Client===

====CTL Server connector====
Receives requests from the [[#CTL Server]] and also acts as an extension point to support future communication transports.

====Dispatcher API====
A java-based API used by CTL tasks, types, CTL Server and the process language.

Figure: Dispatcher client API layer

[[Image:strawman-dispatcher-client-api-layer.png]]
====Module type====
{{main| Module}}
A new fundamental type &quot;Module&quot; is introduced to support all control types. It effectively replaces the [[Managed-Entity]] type (though Managed-Entity can subtype Module to maintain the large base of existing types).

The Module type will provide a basic set of primitives and resource model features that allow most use cases to use it directly, without the need for creating subtypes.

=====Commands=====
Module supports a number of low level commands useful for executing commands via the command dispatcher.

* Common opts: -output &lt;&gt; -timeout &lt;&gt; -nodeincludes &lt;&gt; -nodeexcludes &lt;&gt; -args &lt;&gt;

&lt;table style=&quot;color:black; background-color:#fff;&quot; cellpadding=&quot;5&quot; cellspacing=&quot;0&quot; border=&quot;1&quot;&gt;
	&lt;caption&gt;Commands&lt;/caption&gt;
	&lt;tr&gt;
		&lt;th&gt;command&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;th&gt;usage&lt;/th&gt;
	&lt;/tr&gt;	
	&lt;tr&gt;
		&lt;td&gt;call&lt;/td&gt;&lt;td&gt;Call a defined command&lt;/td&gt;&lt;td&gt;call [common-opts] -type &lt;&gt; -name &lt;&gt; [-args &lt;&gt;]&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;exec&lt;/td&gt;&lt;td&gt;Execute a system command and/or script&lt;/td&gt;&lt;td&gt;exec [common-opts] -executable &lt;&gt; [-args &lt;&gt;] [-script &lt;&gt;] [-scriptfile] [-spawn]&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;relay&lt;/td&gt;&lt;td&gt;relay command to matching resources&lt;/td&gt;&lt;td&gt;relay [common-opts] -name &lt;.*&gt; -type &lt;.*&gt; [-errorcommand &lt;&gt;] [-threadcount &lt;1&gt;]&lt;/td&gt;
	&lt;/tr&gt;	
	&lt;tr&gt;
		&lt;td&gt;sequence&lt;/td&gt;&lt;td&gt;execute multiple commands&lt;/td&gt;&lt;td&gt;sequence [common-opts] -commands &lt;&gt; [-errorcommand &lt;&gt;] [-threadcount &lt;1&gt;]&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;

=====Properties=====
Supports a easily extensible set of instance properties.

====Session data====

Dispatcher performatives to support session data access

* string/file
* get/set/remove/list
* shared/local
* encrypted/cleartext

Data storage
* Each process gets its own collection
* Session elements can be stored as files or properties

====Directory hierarchy====
The CTL directory hierarchy (aka &quot;depot&quot;) is simplified and made more coherent. This is done by consolidating the &quot;module&quot; and &quot;entity&quot; directory structures into one. The directory names are also revised to adhere to the rationalized set of terms:
* &quot;modules&quot; is used in place of &quot;modules&quot; (eg projects/projects/demo/''modules'')
* &quot;resources&quot; is used in place of &quot;deployments&quot; and refer to instances (eg projects/projects/demo/''deployments'')

File system structure
&lt;pre&gt;
`-- projects/
    `-- projName/
        |-- modules/
        |   `-- moduleName/
        |       |-- bin/
        |       |-- commands/
        |       |   |-- cmdA.xml
        |       |   `-- cmdB.xml
        |       |-- commands.properties
        |       |-- lib/
        |       |-- templates/
        |       |-- type.properties
        |       `-- type.xml
        `-- resources/
            `-- resType/
                `-- resName/
                    `-- var/
                        `-- resources.properties
&lt;/pre&gt;

===Shell commands===
Besides the existing [[ctl]] and [[ctl-exec]] shell commands two new ones are introduced:
; ctl-build
: processes definitions into usable artifacts (types, processes, resources, libraries)
; ctl-process
: executes a controltier process

The role of the [[ctl-project]] command may also change with the CTL Server's planned functionality to drive artifact management on the client hosts.

==Model==
The new architecture aims to rectify some of the [[Strawman_roadmap_wishlist#Improve_text-based_definitions|inconsistencies]] and [[Strawman_roadmap_wishlist#Reconcile_attributes_and_type_properties|complexities]] encountered in the current 3.4 based system.
It also introduces a new concept of a [[Strawman_roadmap_wishlist#Self_contained_process_definition|self contained process definition]] that will support a new programming model that offers an easier learning curve and direct control over defining multi step distributed processes.

===Resources===
{{main|CTIP - Simplified Resource Model Definition}}

The resource model is defined in two layers, 
* a type system which describes the model schema. This defines type hierarchy, properties, defaults and commands. These types will continue to be defined by an updated [[type.xml]] format.
* instances of the types along with their interconnections, as well as, instance-specific properties that can be managed independently of the type's definition. (Conceptually similar to the Groovy [http://groovy.codehaus.org/api/groovy/util/Expando.html Expando class])

===Processes===
{{main|CTIP - Self-contained Process Definition}}
The process definition will allow users to write a &quot;dispatcher script&quot; that can control multi-step processes comprised of ad hoc and defined commands.

==Artifacts==

===Process artifacts===
[[Image:Strawman-process-usemodel.png|thumb|use model]]

The sources process definition can be maintained in a directory structure and then &quot;built&quot; into a packaged archive that is then distributed to the ControlTier system.
The source file structure assumes a directory named by the process. It contains the process definition file and possibly extra resource definitions, as well as, user specific files.
&lt;pre&gt;
`-- processName/
    |-- process.xml
    |-- resources/
    |    |-- resources1.xml
    |    `-- resources2.xml    
    `-- files/
        |-- aFile
        `-- bFile
&lt;/pre&gt;

Process artifacts are published under this policy:
* Published to the CTL server
* Contains the node set criteria to which they should reside
* Admin confirms targeted nodes and approves distribution
** Updates the inventory about what artifacts are on which nodes
* Archive distributed to all nodes
* Shared

==Security==
===Access control===
* Users
* Roles
* Owners
* Admin
* Definition: CRUD set by Admin
* Operation: RunApproval,Run,StopApproval,Stop, set by owner or admin

{{CtDevelopment/navbox}}

[[Category:ControlTier TNG]]</text>
    </revision>
  </page>
  <page>
    <title>Architecture (Vandelay)</title>
    <id>1728</id>
    <redirect />
    <revision>
      <id>11704</id>
      <timestamp>2009-12-16T17:06:59Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>moved [[Architecture (Vandelay)]] to [[Development scope (Vandelay)]]</comment>
      <text xml:space="preserve">#REDIRECT [[Development scope (Vandelay)]]</text>
    </revision>
  </page>
  <page>
    <title>Assembly</title>
    <id>1633</id>
    <redirect />
    <revision>
      <id>10991</id>
      <timestamp>2009-12-13T16:18:27Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[Category:Assembly]]</comment>
      <text xml:space="preserve">#REDIRECT [[:Category:Assembly]]</text>
    </revision>
  </page>
  <page>
    <title>Assembly Concepts</title>
    <id>1641</id>
    <redirect />
    <revision>
      <id>11145</id>
      <timestamp>2009-12-14T02:26:04Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>moved [[Assembly Concepts]] to [[Assembly design pattern]]</comment>
      <text xml:space="preserve">#REDIRECT [[Assembly design pattern]]</text>
    </revision>
  </page>
  <page>
    <title>Assembly Type Reference</title>
    <id>183</id>
    <revision>
      <id>13791</id>
      <timestamp>2010-11-10T15:11:28Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;object name&quot; to &quot;resource name&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Resource model Ant Types&lt;/categorytree&gt;
=Description=
      &lt;p&gt;
	The Assembly ant type represents an instance of the Assembly resource type.
      &lt;/p&gt;
    
=Attributes=

      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;name&lt;/td&gt;&lt;td&gt;The resource name.&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;type&lt;/td&gt;&lt;td&gt;The object type name.&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;maprefuri&lt;/td&gt;&lt;td&gt;The maprefUri&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;description&lt;/td&gt;&lt;td&gt;The object description.&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;includeExistingResources&lt;/td&gt;&lt;td&gt;Boolean flag specifying
	  whether to merge included entities with existing child
	  resources. &lt;/td&gt;&lt;td&gt;No, defaults to true.&lt;/td&gt;
	&lt;/tr&gt;


      &lt;/table&gt;
  
=Nested elements=
      &lt;p&gt;
	Uses one or more [[EntityReference Type Reference|entityreference]] elements
	to represent child resources.
      &lt;/p&gt;
    
=Examples=

     &lt;p&gt;
       Shows Assembly data type used in the [[ObjectUpdate Task Reference|object-update]]
       task. 
      &lt;/p&gt;
      &lt;pre&gt;
	&amp;lt;object-update depot=&quot;${resource.depot}&quot;
                       resultproperty=&quot;result&quot;
                       comment=&quot;Updated myAssembly object.&quot;&amp;gt;
          &amp;lt;assembly maprefUri=&quot;http://www.opendepo.rog/DepOnt#AssemblySubtype_myAssembly&quot;
                    name=&quot;myAssembly&quot;
                    type=&quot;AssemblySubtype&quot;
                    description=&quot;my descriptive text.&quot;
	            includeExistingResources=&quot;false&quot;&amp;gt;

            &amp;lt;entityreference maprefuri=&quot;${resource.mapref-uri}&quot;/&amp;gt;
            &amp;lt;entityreference maprefuri=&quot;http://www.opendepo.org/DepOnt#SomeType_19&quot; /&amp;gt;

          &amp;lt;/assembly&amp;gt;
	&amp;lt;/object-update&amp;gt;
      &lt;/pre&gt;

&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Resource model Ant Types]]
[[Category:Assembly]]</text>
    </revision>
  </page>
  <page>
    <title>Assembly design pattern</title>
    <id>726</id>
    <revision>
      <id>11161</id>
      <timestamp>2009-12-14T02:31:03Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Assembly&lt;/categorytree&gt;
= Intent = 

* An abstract type that allows composition of Resources into a network of dependencies

= Discussion =

The Assembly base type adds the 'resources' property, allowing Assembly Objects to declare a set of other Resources that it depends on.

[[Image:Dispatching-modeling-basics.png‎|basic resource dependencies]]

This Type serves as a base type for all composable Resource types.

Types that ''do not'' inherit from Assembly are:

* [[Core Type Guide#Setting|Setting]]

= Related Types =

Subtypes:

* [[Core Type Guide#Managed-Entity|Managed-Entity]]

{{Core Type Guide Linkback}}

[[Category:Assembly]]</text>
    </revision>
  </page>
  <page>
    <title>Attributes</title>
    <id>542</id>
    <revision>
      <id>16461</id>
      <timestamp>2012-02-22T12:23:52Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Undo revision 15459 by [[Special:Contributions/Danalovett|Danalovett]] ([[User talk:Danalovett|talk]]) Removed SPAM bot edit</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Resource model&lt;/categorytree&gt;

This page describes the purpose and functionality of Attributes, and how you can use them to define custom data values for your Resource model, share those values among related Resources, and [[Option_defaulting_with_an_attribute_or_literal|use the values in your commands]].

= What are Attributes? =


Attributes are essentially a way of creating custom &quot;named&quot; properties.  

All of the types in the ControlTier model have a set of properties associated with them, and every '''property''' has these features:

# it can have a specific value defined in an Resource
# it can have a default value defined in the Type, as well as constraints on the value
# it can be referenced in commands using a property reference syntax. 
#* Use the syntax: &lt;code&gt;${resource.PROPERTY}&lt;/code&gt;

[[Image:Attributes-types-properties.png|Properties of a Type]]

However, the set of available properties is predefined for each Type and can not be extended. Which properties a Type has is determined by its [[Type_modeling#Orders|Order]] (Service, Node, Package, Setting, etc).

Attributes allow you to extend the set of properties that a Resource or Type has available to it. They provide the same effective set of features as Properties do, but allow you to define the semantics and names that are used.

When you view any Type, you can see the set of potential Attributes, which are &quot;imported&quot; into the Types resource context. Under the Constraints tab, scroll to the &quot;Imported Attributes&quot; section:

[[Image:Attributes-type-imported-attributes.png|Imported Attributes for a type]]

The list of Imported Attributes is the set of all Attributes defined for each Type that is allowed as a Resource under the ''resources'' constraint (see [[#Allowing the child resource Type]]).  Thus the list you see may be very long if the ''resources'' constraint is very general.  If you change that constraint to be much more specific, the list of potentially imported Attributes will get smaller.

You can see that an Attribute has the same set of features as a Property:

# it can have a specific value defined in an Resource
#* Define a Setting subtype, create a Resource of that Setting, and add it as a child resource of another Resource, as shown in the [[#Defining Attributes using a Setting|Defining Attributes using a Setting]] section.
# it can have a default value defined in the Type, as well as constraints on the value
#* Set default values in each Type that may import the attribute: [[#Setting Attribute Defaults|Setting Attribute Defaults]]
#* Set constraints on the ''resource'' property in each Type: [[#Allowing the child resource Type|Allowing the child resource Type]]
#* Set constraints on the ''settingValue'' property of the Setting type, to constrain the value further
# it can be referenced in commands using a property reference syntax. 
#* Use the syntax: &lt;code&gt;${resource.attribute.ATTRIBUTE}&lt;/code&gt;: [[#Using Attribute Values|Using Attribute Values]]

Additionally, using Settings to define Attributes provide a few more options that increase flexibility:

# Setting Resources can be used by multiple other Resources, allowing you to easily change the value of an Attribute across a set of Resources.
# Setting Types fit in the Type system, allowing you to define precisely which Resources are allowed to use specific Attributes, based on the Constraints mechanism.

== What is the difference between Property Attributes and Imported Attributes? ==

The conjunction of the two lists in the GUI may cause some confusion.  If this is somewhat confusing or hard to distinguish, here is a concise definition of the two:

; Property Attributes : &quot;Property Attributes&quot;, or just &quot;Attributes&quot;, are custom names that you give to a specific Property of a Type.  Think of it as a way of referring to that Property value.  You don't define ''default values'' for the Property Attribute, but you can define ''default value constraints'' for the Property itself.

; Imported Attributes : Imported Attributes are the set of all Property Attributes defined in '''other''' Types that are visible to the current Type.  Additionally, you may define ''default values'' for Imported Attributes.

It is somewhat confusing because you will use both Property Attributes (of your current resource and Type) and Imported Attributes (from other Resources and Types) in the same manner, and with the same syntax.  

= Defining Attributes =

Attributes can be defined by setting a custom (&quot;exported&quot;) name for any property of a Type.  For example, you can set the ''deployment-basedir'' property of a Service subtype to have an attribute name of '''my-basedir'''.

== Defining Attributes in Workbench ==

Navigate to the Type, and click the Constraints tab. Next to the property name, click the &quot;+&quot; icon to add a new Attribute for the property:

[[Image:Attributes-set-name.png|Setting an attribute name from a property]]

Once you have defined the Attribute name for a property, the value of that property is available for reference using the Attribute name (in addition to the original property reference).  The syntax for referencing an attribute is:

&lt;code&gt;${resource.attribute.'''ATTRIBUTE-NAME'''}&lt;/code&gt;

== Defining Attributes in type.xml ==

The [[Type-v10.xml#attributes|Type-v10.xml]] reference has detailed information about the syntax used to define attributes and attribute-defaults.  

To define an Attribute name for a property, use the following in your type.xml file, inside the &lt;code&gt;&amp;lt;attributes&amp;gt; ... &amp;lt;/attributes&amp;gt;&lt;/code&gt; section:

&lt;pre&gt;
  &lt;attribute name=&quot;attr_name&quot; type-property=&quot;property-name&quot;/&gt;
&lt;/pre&gt;

Set ''attr_name'' to the name of the Attribute, and ''property-name'' to the name of the property of your Type that you want to export.

For example, to define the Attribute name ''my-basedir'' for the ''deployment-basedir'' property as shown above, use this:

&lt;pre&gt;
    &lt;type ... &gt;
     ...
    &lt;attributes&gt;
        &lt;attribute name=&quot;my-basedir&quot; type-property=&quot;deployment-basedir&quot;/&gt;
    &lt;/attributes&gt;
    ...
    &lt;/type&gt;
&lt;/pre&gt;


== Defining Attributes using a Setting ==

While it is common to set Attribute names on existing Type properties, this still limits you to the existing set of properties for Types, as new properties cannot be defined.  Additionally, each Property in a Type already has a concrete semantic purpose, and breaking those semantics should be avoided.

However you can use the Setting type as a way to define any number of &quot;custom properties&quot; using Attributes.  By creating a custom subtype of the Setting type, you can also imbue your Attributes with concrete semantics, which provides greater customization options, clear constraint configurations, and greater understandability of your model.

To create a custom Attribute using a Setting, first define a custom Setting subtype:

# Navigate to the Setting Type (or any existing subtype)
# Click the Create Subtype button

[[Image:Attributes-create-setting-subtype.png|Create a Setting subtype]]

Once you have created your type, you can add an Attribute name to the ''settingValue'' property.

# Click the &quot;Constraints&quot; tab
# Click the &quot;+&quot; icon next to the ''settingValue'' property, enter a value, and click &quot;Add&quot;:

[[Image:Attributes-subtype-set-attribute.png|Set attribute name]]

''Note'': If you are creating a new Setting subtype, it is useful to examine existing Setting subtypes to see if they already fulfill the purpose you wish to achieve.  Many of the built-in base Types already have an associated set of Setting subtypes, and many of them already define an Attribute name that can be used.

=== Using type.xml ===

To create a Setting subtype in a type.xml file, you must first have created a type.xml file for one of the Deployable types, e.g. Managed-Entity, Deployment, Service, Builder, etc.  This is because Settings are not deployable, and so cannot be built into a Module archive.  You can however define multiple Types in a single type.xml file, and it is useful to include Setting subtypes alongside the associated Type that will be using them, so in this example, we will create a new type.xml for the NewServiceSubType type, and add the new Setting subtype definition to the same file.

Run the ProjectBuilder create-type command, and enter the Name, description, and Supertype.  You can select the default directory by pressing enter, or enter a new directory path to store the module definition.

&lt;pre&gt;
Gozer:~ greg$ ctl -p demo -m ProjectBuilder -c create-type 
Name of type: 
NewServiceSubType
Description of type: 
my service type
Choose a supertype:  ([Managed-Entity], Package, Builder, Deployment, Service)
Service
Directory where module files will be created:  [/Users/greg/ctier3/ctl/src]

Creating module definition files in directory: /Users/greg/ctier3/ctl/src ...
...
Define commands and attributes in this file: /Users/greg/ctier3/ctl/src/modules/NewServiceSubType/type.xml
&lt;/pre&gt;

Now edit the type.xml file.  You can add the definition of MyPortSetting to the end of the  file, by adding another &lt;code&gt;&amp;lt;type&amp;gt;&lt;/code&gt; element.  Be sure to include the &lt;code&gt;order&lt;/code&gt; attribute of the type, so that when building the type.xml it knows that the type definition doesn't require certain normally required elements.

Inside that element, add the &lt;code&gt;&amp;lt;attributes&amp;gt;&lt;/code&gt; section, and define the ''my-port'' Attribute for the ''settingValue'' property:

&lt;pre&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;types
    xmlns:module=&quot;http://open.controltier.com/base/Modules#&quot;
    xmlns:type=&quot;http://open.controltier.com/base/Types#&quot;
    xmlns:cmd=&quot;http://open.controltier.com/base/Modules/Commands#&quot;&gt;

    &lt;type name=&quot;NewServiceSubType&quot; ...&gt; ... &lt;/type&gt;

    &lt;type name=&quot;MyPortSetting&quot; role=&quot;concrete&quot; uniqueInstances=&quot;true&quot; 
        order=&quot;Setting&quot;&gt;
        &lt;description&gt;port for the server&lt;/description&gt;
        &lt;supertype&gt;
            &lt;typereference name=&quot;Setting&quot;/&gt;
        &lt;/supertype&gt;
        &lt;attributes&gt;
            &lt;attribute name=&quot;my-port&quot; type-property=&quot;settingValue&quot;/&gt;
        &lt;/attributes&gt;
    &lt;/type&gt;
    
&lt;/types&gt;
&lt;/pre&gt;

Once you have saved the file, use the ProjectBuilder &lt;code&gt;build-type&lt;/code&gt; command to build the type.xml definition.  Optionally, use &lt;code&gt;-upload -deploy&lt;/code&gt; options to upload the Module to Workbench, and then deploy it locally:

&lt;pre&gt;
Gozer:~ greg$ ctl -p demo -m ProjectBuilder -c build-type -- -type NewServiceSubType -upload -deploy
Base directory where module source files reside [/Users/greg/ctier3/ctl/src]

Target directory where build files are generated [/Users/greg/ctier3/target]

Building type using the buildmodule.xml via classloader
converting type.xml for module: NewServiceSubType
generating handlers...
packaging module: NewServiceSubType
Copying 1 file to /Users/greg/ctier3/ctl/src/modules/NewServiceSubType
Copying 1 file to /Users/greg/ctier3/ctl/src/modules/NewServiceSubType
Deleting: /Users/greg/ctier3/ctl/src/modules/NewServiceSubType/module.properties.temp
Building jar: /Users/greg/ctier3/target/modules/NewServiceSubType-1.jar
Uploading built module to server ...
processing files in directory: /Users/greg/ctier3/target/modules
scanning for files matching pattern: (NewServiceSubType)-([0-9]+)\.jar
Uploading jar: /Users/greg/ctier3/target/modules/NewServiceSubType-1.jar to server: 'localhost' ...
Installing new build of &quot;NewServiceSubType&quot; module from server ...
Getting: http://localhost:8080/jackrabbit/repository/controltier/projects/demo/publish/modules/NewServiceSubType-head.jar
To: /Users/greg/ctier3/ctl/var/tmp/downloads/demo/NewServiceSubType-head.jar
Created dir: /Users/greg/ctier3/ctl/projects/demo/modules/NewServiceSubType
Expanding: /Users/greg/ctier3/ctl/var/tmp/downloads/demo/NewServiceSubType-head.jar into /Users/greg/ctier3/ctl/projects/demo/modules/NewServiceSubType
Attempting to get Service-head.jar ...
Getting: http://localhost:8080/jackrabbit/repository/controltier/projects/demo/publish/modules/Service-head.jar
To: /Users/greg/ctier3/ctl/var/tmp/downloads/demo/Service-head.jar
Created dir: /Users/greg/ctier3/ctl/projects/demo/modules/Service
Expanding: /Users/greg/ctier3/ctl/var/tmp/downloads/demo/Service-head.jar into /Users/greg/ctier3/ctl/projects/demo/modules/Service
Attempting to get Deployment-head.jar ...
Getting: http://localhost:8080/jackrabbit/repository/controltier/projects/demo/publish/modules/Deployment-head.jar
To: /Users/greg/ctier3/ctl/var/tmp/downloads/demo/Deployment-head.jar
Created dir: /Users/greg/ctier3/ctl/projects/demo/modules/Deployment
Expanding: /Users/greg/ctier3/ctl/var/tmp/downloads/demo/Deployment-head.jar into /Users/greg/ctier3/ctl/projects/demo/modules/Deployment
&lt;/pre&gt;

=== Create an Resource ===

Once you have defined the Attribute name for the ''settingValue'' property, you can create a new Resource of your Setting subtype.  

# Click the Resource tab, and click the &quot;+&quot; icon to create an new Resource.
# Enter a value for the ''Value'' field, and notice the &quot;&amp;dagger;&quot; character next to the field.  The &quot;&amp;dagger;&quot; identifies that the property value has an Attribute name associated with it, and you can see the specific Attribute name by hovering over the character.
# Click the Save button

[[Image:Attributes-subtype-create-object.png|Create a new Setting Resource]]

Once you have saved the Resource, you can see in the Properties tab that the value of the the ''settingValue'' property has been exported as the attribute named &lt;code&gt;resource.attribute.my-port&lt;/code&gt; and has the value you set in the form:

[[Image:Attributes-object-attribute-value.png|Resource attribute value]]

=== Create a Resource in project.xml ===

If you are developing a resource model using the [[Project-v10.xml]] file, you would define your Setting resource in this way:

&lt;pre&gt;
&lt;!DOCTYPE project PUBLIC
        &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; &quot;project.dtd&quot;&gt;
&lt;project&gt;
    &lt;setting type=&quot;MyPortSetting&quot; name=&quot;default-port&quot; 
           description=&quot;default port value for the server&quot; 
           settingValue=&quot;8080&quot; settingType=&quot;port&quot;/&gt;
&lt;/project&gt;
&lt;/pre&gt;

Load the project.xml file using the ProjectBuilder load-resources command:

&lt;pre&gt;
Gozer:~ greg$ ctl -p demo -m ProjectBuilder -c load-resources -- -filename project.xml
Loading &quot;/Users/greg/project.xml&quot; ...
1 file(s) have been successfully validated.
Processing /Users/greg/project.xml to /Users/greg/ctier3/ctl/var/tmp/projectxml-1012385295.xml
Loading stylesheet /Users/greg/ctier3/ctl/modules/ProjectBuilder/lib/load-resources/projectxml/project.xsl
Mapping XML to properties ...
Collecting object attributes ...
Batching object attribute updates ...
Batching resource and referrer updates ...
Executing batch update ...
&lt;/pre&gt;

= Sharing Attributes =

Like other properties, Attributes are generated in the context of the Resource that they receive their value from.  Attributes can be &quot;imported&quot; from one resource to another by adding that resource as a Child resource of the other.

Remember: it is always the case that a Resource can only be added as a child resource to another Resource whose Type allows that kind of child resource via it's ''resources'' constraint. (See [[Constraints]].)

Attributes are &quot;imported&quot; to the Resource  context under the same rules that all child resource properties are included in the Properties View.  For each Type, that definition of how that View is generated can include all Child resources, all Parent resources, or both.  And the view can extend up to 3 &quot;degrees&quot; away in the resource model. (See [[Type modeling]].)

In the simplest model, and by default, each Type's property View includes all immediate Child resources (1 degree away).

== Allowing the child resource Type ==

To allow resources of your new Setting type to be added as a child resource to other Resources you must make sure that the Constraints for your parent Type are configured to allow it.

# Navigate to the Type of the Resource you wish to add the Setting to.
# Click the Constraints tab
# for the ''resources'' property, click the pencil icon to Edit the constraint

In this example a subtype of Service called &quot;NewServiceSubType&quot;:

[[Image:Attributes-edit-constraint.png|Edit resources constraint]]

In the form, click the &quot;+&quot; icon next to &quot;Allowed Types&quot;:

[[Image:Attributes-edit-constraint-add-allowed.png|Add allowed Type]]

In the (potentially very long!) list of available types, scroll to your Setting subtype and click the checkbox just to the left of it.   Optionally, you may select the checkbox on the right-side which indicates that only a single resource of that type is allowed to be added, called a Singleton constraint.

[[Image:Attributes-edit-constraint-check.png|Select the Setting subtype]]

Click the &quot;Save&quot; button when you have finished.  

Your Type should show the Setting subtype under the ''resources'' constraint.

Now you can add your Setting resource as a resource to any resource of that Type.

== Setting the allowed child resource constraint in type.xml ==

To set the allowed child constraint in type.xml, refer to the [[Type-v10.xml#constraints]] reference. In our example, we would add &lt;code&gt;&amp;lt;dependency-constraint&amp;gt;&lt;/code&gt; to the &lt;code&gt;&amp;lt;constraints&amp;gt;&lt;/code&gt; section of the NewServiceSubtype type definition:

&lt;pre&gt;
&lt;type name=&quot;NewServiceSubType&quot; ...&gt;
    ...
    &lt;constraints&gt;
        &lt;!-- Define constraints of the Type here --&gt;
        &lt;dependency-constraint kind=&quot;child&quot; enforced=&quot;true&quot;&gt;
            &lt;allowedtypes&gt;
                &lt;typereference name=&quot;MyPortSetting&quot;/&gt;
            &lt;/allowedtypes&gt;
            &lt;singletontypes&gt;
                &lt;typereference name=&quot;MyPortSetting&quot;/&gt;
            &lt;/singletontypes&gt;
        &lt;/dependency-constraint&gt;
    &lt;/constraints&gt;
    ...
&lt;/type&gt;
&lt;/pre&gt;

== Adding the Setting resource ==

# Navigate to the Resource you wish to add your Setting to.
# Click the &quot;Child Resources&quot; section, and the &quot;Add...&quot; button.
# Select your Setting resource.
# Click the &quot;Save&quot; button

[[Image:Attributes-add-child-resources.png|Add the Setting resource as a child]]

Notice that under the Attributes section for the Resource, you can now see the name of the Attribute you defined in the Type, and the value that you set in your Setting resource.

[[Image:Attributes-object-attribute-imported.png|Attribute imported from child resource]]

== Add the Setting Resource in project.xml ==

Add the setting resource you defined earlier to the Service resource by modifying your project.xml like so:

&lt;pre&gt;
&lt;!DOCTYPE project PUBLIC
        &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; &quot;project.dtd&quot;&gt;
&lt;project&gt;
    &lt;setting ... /&gt;
    
    &lt;deployment 
      type=&quot;NewServiceSubType&quot;
      name=&quot;myService&quot; 
      description=&quot;my Service resource&quot; 
      installRoot=&quot;&quot; 
      basedir=&quot;&quot;&gt;
      &lt;resources&gt;
        &lt;resource name=&quot;default-port&quot; type=&quot;MyPortSetting&quot; /&gt;
      &lt;/resources&gt;
   &lt;/deployment&gt;
&lt;/project&gt;
&lt;/pre&gt;

= Setting Attribute Defaults =

Like Properties, it is useful to be able to define a default value for Attributes as well.  This will let you use the Attribute value in Commands and Command Options without fear that no Attribute value will be available, even if your Resource doesn't have an appropriate child resource.

When you view any Type, you can see the set of potential Attributes that that type &quot;imports&quot; into its resource context. Under the Constraints tab, scroll to the &quot;Imported Attributes&quot; section:

[[Image:Attributes-type-imported-attributes.png|Imported Attributes for a type]]

The list of Imported Attributes is the set of all Attributes defined for each Type that is allowed as a resource under the ''resources'' constraint (see [[#Allowing the child resource Type]]).  Thus the list you see may be very long if the ''resources'' constraint is very general.  If you change that constraint to be much more specific, the list of potentially imported Attributes will get smaller.

Each row in the list shows the Attribute Name, any Default value, and the list of Types from which the Attribute is imported.  (Note that more than one Type may define the same Attribute name on one of its properties.)

To set a Default value for an attribute, find the Attribute name you wish to set the default for, and click the Pencil icon to edit the default, then click the Set button:

[[Image:Attributes-type-set-default.png|Set the default value]]

Once a default is set, you can click the &quot;x&quot; icon to remove it, or click on the textual value itself to edit it:

[[Image:Attributes-type-edit-default.png|the default value]]

'''Note''': If an Attribute Default value is inherited from the Parent type, a small &quot;i&quot; will be shown next to the value.  You can override this value by editing the Default, but you cannot clear the default completely.  It will revert to the inherited Default value.

Once you have set an Attribute Default value, any Resource of that Type will always see a value for the Attribute name, even if no child resource is attached that exports that Attribute.  

== Setting Attribute Defaults in type.xml ==

Add a &lt;code&gt;&amp;lt;attribute-default&amp;gt;&lt;/code&gt; element to the &lt;code&gt;&amp;lt;attributes&amp;gt;&lt;/code&gt; section of your type.xml:

&lt;pre&gt;
    &lt;type name=&quot;NewServiceSubType&quot; ...&gt;
        ...
        &lt;attributes&gt;
            &lt;attribute-default name=&quot;my-port&quot; value=&quot;8080&quot;/&gt;
        &lt;/attributes&gt;
        ...
    &lt;/type&gt;
&lt;/pre&gt;

= Using Attribute Values =

Attributes are included in the resource.properties that are generated for each Resource.  

In an Ant based command handler, you can refer to the value of an Attribute using the syntax: &lt;code&gt;${resource.attribute.ATTRIBUTE}&lt;/code&gt;, replacing &quot;ATTRIBUTE&quot; with the name of the attribute.

You can also use the value in the Execution String, or Argument String of a Shell command.

The most typical method of using Attribute values is to provide a default value for an Option for a command. For more information on this see: [[Option defaulting with an attribute or literal]].

== Using Multiple Values ==

If you have more than one child resource that exports the same Attribute name, you will see a slightly different set of Properties get generated:

* &lt;code&gt;resource.attribute.NAME&lt;/code&gt; - contains a single value (''See Caveat below'')
* &lt;code&gt;resource.attribute.NAME.list&lt;/code&gt; - contains a comma-separated list of values
* &lt;code&gt;resource.attribute.NAME.size&lt;/code&gt; - contains the size of the list (integer)
* &lt;code&gt;resource.attribute.NAME.X&lt;/code&gt; - contains the value of list item &lt;code&gt;X&lt;/code&gt;

For example, if you added another MyPortSetting resource to the Service resource, you would see this set of properties:

[[Image:Attributes-multiple-attributes.png|Multiple attribute values]]

This allows you to use multiple values, if you so desire.  

: '''Caveat''': multiple Attribute values should only be used when you are writing Ant based command handlers and want to explicitly operate on a list of values.  The value of the normal property typically used in a single-value Attribute, &lt;code&gt;${resource.attribute.NAME}&lt;/code&gt; will evaluate to the first value in the list.  The order of the items in the list is governed by proximity (i.e.. closeness based on the View Constraints), as well as the &quot;startup-rank&quot; property.  If two Resources have the same startup rank value, then their order in the list is ''not defined''.  The order for Resources without this property (such as Settings), is ''not defined''.  

= Appendix =

==Complete type.xml example==

This is the complete type.xml example which includes the NewServiceSubType with its attribute default and dependency constraint, and the MyPortSetting type, with its attribute definition:

&lt;pre&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;

&lt;!--
This document is used to define one or more Types.
--&gt;
&lt;types
    xmlns:module=&quot;http://open.controltier.com/base/Modules#&quot;
    xmlns:type=&quot;http://open.controltier.com/base/Types#&quot;
    xmlns:cmd=&quot;http://open.controltier.com/base/Modules/Commands#&quot;&gt;

    &lt;type
        name=&quot;NewServiceSubType&quot;
        role=&quot;concrete&quot;
        uniqueInstances=&quot;true&quot;&gt;

        &lt;description&gt;My service subtype&lt;/description&gt;

        &lt;supertype&gt;
            &lt;typereference name=&quot;Service&quot;/&gt;
        &lt;/supertype&gt;

        &lt;command-settings&gt;
            &lt;notification notify=&quot;false&quot;/&gt;
            &lt;template-directory&gt;&lt;/template-directory&gt;
            &lt;dependency-view parents=&quot;false&quot; children=&quot;true&quot; proximity=&quot;1&quot;/&gt;
            &lt;logger name=&quot;NewServiceSubType&quot;/&gt;
        &lt;/command-settings&gt;


        &lt;attributes&gt;
            &lt;attribute-default name=&quot;my-port&quot; value=&quot;80&quot;/&gt;
        &lt;/attributes&gt;

        &lt;constraints&gt;
            &lt;!-- Define constraints of the Type here --&gt;
            &lt;dependency-constraint kind=&quot;child&quot; enforced=&quot;true&quot;&gt;
                &lt;allowedtypes&gt;
                    &lt;typereference name=&quot;MyPortSetting&quot;/&gt;
                &lt;/allowedtypes&gt;
                &lt;singletontypes&gt;
                    &lt;typereference name=&quot;MyPortSetting&quot;/&gt;
                &lt;/singletontypes&gt;
            &lt;/dependency-constraint&gt;
        &lt;/constraints&gt;

        &lt;commands&gt;
            &lt;!-- Define commands here --&gt;
            &lt;!-- See the Documentation on the ControlTier Wiki: --&gt;
            &lt;!-- http://apps.sourceforge.net/mediawiki/controltier/index.php?title=Type-v10.xml#commands --&gt;

        &lt;/commands&gt;

    &lt;/type&gt;

    &lt;type name=&quot;MyPortSetting&quot;
        role=&quot;concrete&quot;
        uniqueInstances=&quot;true&quot;
        order=&quot;Setting&quot;&gt;

        &lt;description&gt;port for the server&lt;/description&gt;

        &lt;supertype&gt;
            &lt;typereference name=&quot;Setting&quot;/&gt;
        &lt;/supertype&gt;

        &lt;attributes&gt;
            &lt;attribute name=&quot;my-port&quot; type-property=&quot;settingValue&quot;/&gt;
        &lt;/attributes&gt;

    &lt;/type&gt;

&lt;/types&gt;

&lt;/pre&gt;

== Complete project.xml example ==

This is the complete project.xml example, defining a single Setting resource and a Deployment object which has the Setting as a child resource:

&lt;pre&gt;
&lt;!DOCTYPE project PUBLIC
        &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; &quot;project.dtd&quot;&gt;
&lt;project&gt;

    &lt;setting type=&quot;MyPortSetting&quot; name=&quot;default-port&quot; 
           description=&quot;default port value for the server&quot; 
           settingValue=&quot;8080&quot; settingType=&quot;port&quot;/&gt;


    &lt;deployment 
          type=&quot;NewServiceSubType&quot;
          name=&quot;myService&quot; 
          description=&quot;my Service resource&quot; 
          installRoot=&quot;&quot; 
          basedir=&quot;&quot;&gt;
       &lt;resources&gt;
          &lt;resource name=&quot;default-port&quot; type=&quot;MyPortSetting&quot; /&gt;
       &lt;/resources&gt;
    &lt;/deployment&gt;
       
&lt;/project&gt;
&lt;/pre&gt;

{{Manual/navbox}}

[[Category:Resource model]]</text>
    </revision>
  </page>
  <page>
    <title>Automate deployment with Jobs</title>
    <id>2126</id>
    <revision>
      <id>16457</id>
      <timestamp>2012-02-22T12:16:14Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Undo revision 15461 by [[Special:Contributions/Sitamoyer|Sitamoyer]] ([[User talk:Sitamoyer|talk]]) Removed SPAM bot edit</comment>
      <text xml:space="preserve">This example shows how to use CTL Center Jobs to automate a multi-step
deployment process. The process is a simple yet typical example of a
deployment cycle including shutdown, installation, configuration and
then start up of the Apache Tomcat server and a webapp archive.

The example shows how to define the entire deployment cycle as a Job
that in turn calls a set of subordinate jobs, each of which performs a
specific step in the cycle. The example also shows how to use Job
options to supply specific information like package location and
installation directory. Using options in this way, helps keep the Jobs
environment or release independent.

This example is setup to work on a single node but can be modified to
work on multiple nodes.

==Dependencies==

The example has these dependencies:
* ControlTier &amp;mdash; 3.6.1
** Meet the prerequisites and install ControlTier according to the [[Installation|Installing ControlTier]] instructions.
* Unix
** ''This example is not compatible with Windows.''  It is compatible with Linux, Mac OS X and most unix variants.
* &quot;demo&quot; project
** Be sure the &quot;demo&quot; project has been setup on the nodes you will run this example
* Tomcat &amp;mdash; 5.5.31 
** Download Zip: [http://tomcat.apache.org/download-55.cgi http://tomcat.apache.org/download-55.cgi] or here [http://archive.apache.org/dist/tomcat/tomcat-5/v5.5.31/bin/ v5.5.31]
** Copy the downloaded Zip to &lt;code&gt;$CTIER_ROOT/examples/job-appserver-war-deployment/pkgs/apache-tomcat-5.5.31.zip&lt;/code&gt;

Note: A WAR file is included in the $CTIER_ROOT/examples/job-appserver-war-deployment/pkgs directory so there is no external dependency for that.

==Build the example==
Execute these bootstrap steps:

# At the command line, navigate to the &lt;code&gt;examples/job-appserver-war&lt;/code&gt; directory under your &lt;code&gt;$CTIER_ROOT&lt;/code&gt; directory.
#* &lt;pre&gt;cd $CTIER_ROOT/examples/job-appserver-war&lt;/pre&gt;
# This configures the job definitions for your environment
#* &lt;pre&gt;$ANT_HOME/bin/ant -f build.xml&lt;/pre&gt;
# Run [[ctl-jobs]] to load the job definitions into CTL Center
#* &lt;syntaxhighlight lang=&quot;bash&quot;&gt;for job in jobs/*.xml ; do ctl-jobs load -f $job ;done&lt;/syntaxhighlight&gt;	

You are now ready to run the examples.

==Run the example==

You can run jobs from the command line using [[ctl-run]] or
via the graphical interface in [[CTL Center]].

===Run from CTL Center===
Login to CTL Center using your credentials. Go to the &quot;Jobs&quot; page and
view the listing of jobs. The bootstrap steps will have created a set
of jobs under the &quot;examples&quot; folder.

====Run Deploy====
1. Navigate to the &quot;examples/simpleapp&quot; job group.

[[Image:job-appserver-war-jobs.png]]

2. Select the &quot;Deploy&quot; job and open it to show the tool bar.

[[Image:job-appserver-war-Deploy.png]]

3. Press the Run button

[[Image:job-appserver-war-run.png]]

4. Select the default values for the catalinahome, tomcaturl and simpleurl
options. These choices will appear in their respective menus:

[[Image:job-appserver-war-options.png]]

5. Press &quot;Run Job Now&quot; and follow the output:

[[Image:job-appserver-war-follow.png]]

After the job completes the output will show &quot;Successful&quot;.

You should be able to access the deployed Tomcat and &quot;simple&quot;
application. Visit the link like so (eg, http://localhost:28080/simple/):

[[Image:job-appserver-war-simpleapp.png]]

===Run from the shell===
Via the shell, use ctl-run to start the Deploy job. It requires three arguments:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl-run -j &quot;examples/simpleapp/Deploy&quot; -- -catalinahome &lt;dir&gt; -- \
    -tomcaturl &lt;url&gt; -simpleurl &lt;url&gt;
&lt;/syntaxhighlight&gt;

==What the example shows==

# Job workflow
#* The &quot;Deploy&quot; does nothing except call other jobs. &quot;Deploy&quot; illustrates a routine process modeled as a sequence of workflow steps carried out by lower level Jobs &amp;mdash; stop, install, configure, start.
# Dispatch options that filter nodes using tags
#* Jobs are dispatched to the Node tagged with the &quot;admin&quot; and &quot;simpleapp&quot; tags. The node tagged &quot;admin&quot; plays the role of central control point. The Node(s) tagged &quot;simpleapp&quot; run the Jobs that execute the actual deploy scripts.
# Scripts driven by the Job's option data
#* The scripts embodied by the Jobs are called with an arguments exposed as Job options. 

It is also worth discussing the design of these Jobs. One might ask,
why not just define &quot;Deploy&quot; to carry out all the steps? Why break
each step into a separate Job which must be called by a another one?
Generally, speaking a procedure can be broken down into a set of jobs
if the author believes each job can be useful in its own right. The
author might also envision reusing these jobs in new workflows. 

==How it works==
The following sections describe the definitions used through this
example. The setup procedure you followed early on took care of
generating these definitions but they are included here so you can
understand how they work.

===The Option definitions===
A Job can be given options that are configured to present and accept
input in a variety of ways. This example shows how to present a menu
of choices using data that comes from an external file containing a JSON map.

All five jobs define a common option used to specify what directory
the tomcat server should be installed:

* catalinahome

The &quot;Deploy&quot; and &quot;install&quot; jobs define two options that pull data from
JSON files:

* simpleurl
* tomcaturl

The [[#Build the example|boostrap procedure]] generated these JSON files replacing the
&lt;code&gt;${basedir}&lt;/code&gt; token with a value reflecting your install
path. The build.xml generated these files to the directory,
$CTIER_ROOT/examples/job-appserver-war-deployment/jobs/options.

The Job references the JSON data via a URL specified with
&lt;code&gt;valuesUrl&lt;/code&gt;. 
This means the data could be accessed from a web server but also from
a local file using the &quot;file://&quot; scheme. This example uses two local
files with json data: ''simpleurl.json'' and ''tomcaturl.json''.

The ''simpleurl.json'' file contains URLs to the WAR file used by the
&quot;Deploy&quot; and &quot;install&quot; jobs. The file listing shows there is one WAR
file in the map. 

File listing: simpleurl.json

&lt;syntaxhighlight lang=&quot;javascript&quot;&gt;
{&quot;simple-1.2.3.war&quot;:&quot;file://${basedir}/pkgs/simple-1.2.3.war&quot;}
&lt;/syntaxhighlight&gt;

The ''tomcaturl.json'' file contains Tomcat ZIP choices. This
references the apache-tomcat Zip file you downloaded earlier.

File listing: tomcaturl.json

&lt;syntaxhighlight lang=&quot;javascript&quot;&gt;
{&quot;apache-tomcat-5.5.31.zip&quot;:&quot;file://${basedir}/pkgs/apache-tomcat-5.5.31.zip&quot;}
&lt;/syntaxhighlight&gt;


Let's imagine that there were multiple versions of the WAR to present
to the user. Just add more entries to the map.

&lt;syntaxhighlight lang=&quot;javascript&quot;&gt;
{
&quot;simple-1.2.1.war&quot;:&quot;file://${basedir}/pkgs/simple-1.2.1.war&quot;,
&quot;simple-1.2.2.war&quot;:&quot;file://${basedir}/pkgs/simple-1.2.2.war&quot;,
&quot;simple-1.2.3.war&quot;:&quot;file://${basedir}/pkgs/simple-1.2.3.war&quot;
}
&lt;/syntaxhighlight&gt;

The option choices are stored in a local file but imagine generating
the choices via a CGI script. Such a CGI script could play the role of
exposing packaged artifacts from a build server to the Job. 

===The Job definitions===
Jobs can be defined using the CTL Center graphical interface but can
also be defined in an XML file we refer to as [[job.xml]].
A single document can contain mulltiple job definitions or just one.
Your preferences dictate that convention. The Jobs defined for this
example are defined in their own file. The filename does not need to
correspond to the name of the job itself.

Each job definition is shown below in their original template form.
The build.xml generated the working job defintions you ran using the
&lt;code&gt;ctl-jobs&lt;/code&gt; command in the setup step earlier. You can find
them in directory, $CTIER_ROOT/examples/job-appserver-war-deployment/jobs.

====Deploy job====

The Deploy job drives the deployment cycle, doing nothing accept
running the Jobs that carry out the actual steps. It defines the three
options discussed earlier &amp;mdash; catalinahome, simpleurl, tomcaturl. 

The XML document shows how one job can call another job by using the
[[Job.xml#jobref|jobref]] element. Options can be specified to the
subordinate jobs using the &lt;code&gt;&lt;arg/&gt;&lt;/code&gt; element. You can see in
every case the &lt;code&gt;-catalinahome&lt;/code&gt; option is passed through to
each job. The install Job also gets the &lt;code&gt;-simpleurl&lt;/code&gt; and
&lt;code&gt;-tomcaturl&lt;/code&gt; options passed.

Finally, the Deploy job is unique in that it is only dispatched to the
Node tagged &quot;admin&quot;. This signfies that the Job runs locally on the CTL
Center host since it really does nothing except call the other jobs.

File listing: Deploy.xml

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;joblist&gt; 
  &lt;job&gt;
    &lt;name&gt;Deploy&lt;/name&gt;
    &lt;description&gt;deploy the simple app&lt;/description&gt;
    &lt;additional /&gt;
    &lt;loglevel&gt;INFO&lt;/loglevel&gt;
    &lt;group&gt;examples/simpleapp&lt;/group&gt;
    &lt;context&gt;
      &lt;project&gt;${project}&lt;/project&gt;
      &lt;options&gt;
        &lt;option name='catalinahome' enforcedvalues='false' required='true' 
		values=&quot;${basedir}/simpleapp/apache-tomcat&quot;
		description='the tomcat install directory' /&gt;
        &lt;option name='simpleurl' enforcedvalues='false' required='true' 
		valuesUrl='file://${basedir}/options/simpleurl.json 
		description='the simple war url' /&gt;
        &lt;option name='tomcaturl' enforcedvalues='false' required='true' 
		valuesUrl='file://${basedir}/options/tomcaturl.json
		description='tomcat zip url' /&gt;
      &lt;/options&gt;
    &lt;/context&gt;
    &lt;sequence threadcount='1' keepgoing='false' strategy='node-first'&gt;
      &lt;command&gt;
        &lt;jobref name='stop' group='examples/simpleapp'&gt;
          &lt;arg line='-catalinahome ${option.catalinahome}' /&gt;
        &lt;/jobref&gt;
      &lt;/command&gt;
      &lt;command&gt;
        &lt;jobref name='install' group='examples/simpleapp'&gt;
          &lt;arg line='-catalinahome ${option.catalinahome} -simpleurl ${option.simpleurl} -tomcaturl ${option.tomcaturl}' /&gt;
        &lt;/jobref&gt;
      &lt;/command&gt;
      &lt;command&gt;
        &lt;jobref name='configure' group='examples/simpleapp'&gt;
          &lt;arg line='-catalinahome ${option.catalinahome}' /&gt;
        &lt;/jobref&gt;
      &lt;/command&gt;
      &lt;command&gt;
        &lt;jobref name='start' group='examples/simpleapp'&gt;
          &lt;arg line='-catalinahome ${option.catalinahome}' /&gt;
        &lt;/jobref&gt;
      &lt;/command&gt;
    &lt;/sequence&gt;
    &lt;nodefilters excludeprecedence=&quot;true&quot;&gt; 
      &lt;include&gt; 
        &lt;tags&gt;admin&lt;/tags&gt; 
      &lt;/include&gt; 
    &lt;/nodefilters&gt;  
    &lt;dispatch&gt;
      &lt;threadcount&gt;1&lt;/threadcount&gt;
      &lt;keepgoing&gt;false&lt;/keepgoing&gt;
    &lt;/dispatch&gt;
  &lt;/job&gt;
&lt;/joblist&gt;
&lt;/syntaxhighlight&gt;

====configure job====

The &quot;configure&quot; job's sole purpose is to customize the tomcat
installation after the files have been extracted from their archive.
The bulk of the job definition is a simple shell script that makes the
tomcat start/stop scripts executable and use a non-standard set of
ports.

The script is parameterized by reading from its argument vector (eg.,
&lt;code&gt;$1&lt;/code&gt;). Jobs can pass arguments to their scripts using the
&lt;code&gt;&lt;scriptargs&lt;/code&gt; tag (eg,
&lt;code&gt;&lt;scriptargs&gt;${option.catalinahome}&lt;/scriptargs&gt;&lt;/code&gt;).

This job will execute on nodes tagged &quot;simpleapp&quot;.

File listing: configure.xml

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;joblist&gt; 
  &lt;job&gt; 
    &lt;name&gt;configure&lt;/name&gt;  
    &lt;description&gt;configure the simple app&lt;/description&gt;  
    &lt;additional/&gt;  
    &lt;loglevel&gt;INFO&lt;/loglevel&gt;  
    &lt;group&gt;examples/simpleapp&lt;/group&gt;  
    &lt;context&gt; 
      &lt;project&gt;${project}&lt;/project&gt;  
      &lt;options&gt; 
        &lt;option name='catalinahome' enforcedvalues='false' required='true' 
		default=&quot;${basedir}/simpleapp&quot;
		description='the tomcat install directory' /&gt;
      &lt;/options&gt; 
    &lt;/context&gt;  
    &lt;sequence threadcount=&quot;1&quot; keepgoing=&quot;false&quot; strategy=&quot;node-first&quot;&gt; 
      &lt;command&gt; 
        &lt;script&gt;&lt;![CDATA[#!/bin/sh
# File: configure.sh
USAGE=&quot;$0 configure.sh &lt;catalina-home&gt;&quot;
die() { echo &quot;ERROR: $@&quot; ; exit 1 ; }
[ $# = 1 ] || { die &quot;$USAGE&quot; ; }

CATALINA_HOME=$1

[ -d &quot;$CATALINA_HOME&quot; ] || { die &quot;CATALINA_HOME not found: $1&quot; ; }

echo &quot;Chmod'ing files in $CATALINA_HOME/bin/*.sh&quot;
chmod +x $CATALINA_HOME/bin/*.sh || die &quot;chmod step failed&quot;
 
echo &quot;Customizing $CATALINA_HOME/conf/server.xml ...&quot;
server_xml_tmp=/tmp/server.xml.$$ ;# define a temporary file

sed 's/8080/28080/g' $CATALINA_HOME/conf/server.xml &gt; ${server_xml_tmp}
mv ${server_xml_tmp} $CATALINA_HOME/conf/server.xml || {
    die &quot;Text replace failed: $CATALINA_HOME/conf/server.xml&quot;
}
sed 's/8005/28005/g' $CATALINA_HOME/conf/server.xml &gt; ${server_xml_tmp}
mv ${server_xml_tmp} $CATALINA_HOME/conf/server.xml || {
    die &quot;Text replace failed: $CATALINA_HOME/conf/server.xml&quot;
}
sed 's/8009/28009/g' $CATALINA_HOME/conf/server.xml &gt; ${server_xml_tmp}
mv ${server_xml_tmp} $CATALINA_HOME/conf/server.xml || {
    die &quot;Text replace failed: $CATALINA_HOME/conf/server.xml&quot;
}
echo &quot;$CATALINA_HOME/conf/server.xml customized&quot;
]]&gt;&lt;/script&gt;  
        &lt;scriptargs&gt;${option.catalinahome}&lt;/scriptargs&gt; 
      &lt;/command&gt; 
    &lt;/sequence&gt;  
    &lt;nodefilters excludeprecedence=&quot;true&quot;&gt; 
      &lt;include&gt; 
        &lt;tags&gt;simpleapp&lt;/tags&gt; 
      &lt;/include&gt; 
    &lt;/nodefilters&gt;  
    &lt;dispatch&gt; 
      &lt;threadcount&gt;1&lt;/threadcount&gt;  
      &lt;keepgoing&gt;false&lt;/keepgoing&gt; 
    &lt;/dispatch&gt; 
  &lt;/job&gt;  
&lt;/joblist&gt;
&lt;/syntaxhighlight&gt;

====install job====

The &quot;install&quot; job uses the &lt;code&gt;curl&lt;/code&gt; command to obtain the Zip
and War archives chosen through the Job option menus. It also extracts
the archives into the specified installation directory.

Like the Deploy job, install defines three options &amp;mdash;
catalinahome, simpleurl, tomcaturl.

File listing: install.xml

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;

&lt;joblist&gt; 

  &lt;job&gt; 
    &lt;name&gt;install&lt;/name&gt;  
    &lt;description&gt;installs the simple app server and war&lt;/description&gt;  
    &lt;additional/&gt;  
    &lt;loglevel&gt;INFO&lt;/loglevel&gt;  
    &lt;group&gt;examples/simpleapp&lt;/group&gt;  
    &lt;context&gt; 
      &lt;project&gt;${project}&lt;/project&gt; 
      &lt;options&gt; 
        &lt;option name='catalinahome' enforcedvalues='false' required='true' 
		values=&quot;${basedir}/simpleapp/apache-tomcat&quot;
		description='the tomcat install directory' /&gt;
        &lt;option name='simpleurl' enforcedvalues='false' required='true' 
		valuesUrl='file://${basedir}/options/simpleurl.json 
		description='the simple war url' /&gt;
        &lt;option name='tomcaturl' enforcedvalues='false' required='true' 
		valuesUrl='file://${basedir}/options/tomcaturl.json
		description='tomcat zip url' /&gt;
      &lt;/options&gt; 
    &lt;/context&gt;  
    &lt;sequence threadcount=&quot;1&quot; keepgoing=&quot;false&quot; strategy=&quot;node-first&quot;&gt; 
      &lt;command&gt; 
        &lt;script&gt;&lt;![CDATA[#!/bin/bash
# File: install.sh 
USAGE=&quot;$0 &lt;catalinahome&gt; &lt;tomcat-pkg-url&gt; &lt;simple-pkg-url&gt;&quot;

die() { echo &quot;ERROR: $@&quot; ; exit 1 ; }
[ $# = 3 ] || { die &quot;$USAGE&quot; ; }

CATALINA_HOME=$1; 
TOMCAT_PKG_URL=$2;
SIMPLE_PKG_URL=$3;

catalina_parentdir=`dirname $CATALINA_HOME`  ;# parent dir
mkdir -p $catalina_parentdir || {die &quot;failed creating dir: ${catalina_parentdir}&quot;}
tomcat_filename=${TOMCAT_PKG_URL##*/} ;# parse file names
tomcat_base=${tomcat_filename%.zip}   ;#
simple_filename=${SIMPLE_PKG_URL##*/} ;#
simple_base=${simple_filename%-*}     ;#

[ -d ${CATALINA_HOME} ] &amp;&amp; {
    rm -r ${CATALINA_HOME} || die &quot;failed cleaning existing tomcat deployment&quot;
}

# retrieve the ZIP
curl -s -S --user default:default ${TOMCAT_PKG_URL} \
    -o $catalina_parentdir/${tomcat_filename} || {
    die &quot;Download failed: ${TOMCAT_PKG_URL}&quot;
}
echo &quot;Downloaded ${TOMCAT_PKG_URL}&quot;

# extract the ZIP
unzip -q $catalina_parentdir/${tomcat_filename} -d $catalina_parentdir || {
  die &quot;Extract failed: $catalina_parentdir/${tomcat_filename}&quot;
}

# move the extracted dir to the catalina_home basename
mv $catalina_parentdir/${tomcat_base} ${CATALINA_HOME} || die &quot;failed to create ${CATALINA_HOME}&quot;
echo &quot;Extracted ${tomcat_filename} to $CATALINA_HOME&quot;

# retrieve the WAR
curl -s -S --user default:default ${SIMPLE_PKG_URL} \
    -o  $catalina_parentdir/${simple_filename} || {
  die &quot;Download failed: ${SIMPLE_PKG_URL##*}&quot;
}
echo &quot;Downloaded ${SIMPLE_PKG_URL}&quot;
# extract the WAR
mkdir -p ${CATALINA_HOME}/webapps/${simple_base} || {
    die &quot;failed making subdirectory directory: ${simple_base}&quot;
}
unzip -q $catalina_parentdir/${simple_filename} -d ${CATALINA_HOME}/webapps/${simple_base} || {
    die &quot;Extract failed: $catalina_parentdir/$simple_filename&quot;
}
echo &quot;extracted ${simple_filename} to ${CATALINA_HOME}/webapps/${simple_base}&quot;

echo &quot;install done&quot;
]]&gt;&lt;/script&gt;  
        &lt;scriptargs&gt;${option.catalinahome} ${option.tomcaturl} ${option.simpleurl}&lt;/scriptargs&gt; 
      &lt;/command&gt; 
    &lt;/sequence&gt;  
    &lt;nodefilters excludeprecedence=&quot;true&quot;&gt; 
      &lt;include&gt; 
        &lt;tags&gt;simpleapp&lt;/tags&gt; 
      &lt;/include&gt; 
    &lt;/nodefilters&gt;  
    &lt;dispatch&gt; 
      &lt;threadcount&gt;1&lt;/threadcount&gt;  
      &lt;keepgoing&gt;false&lt;/keepgoing&gt; 
    &lt;/dispatch&gt; 
  &lt;/job&gt;  
&lt;/joblist&gt;
&lt;/syntaxhighlight&gt;

====start job====

The &quot;start&quot; job is a simple wrapper around Tomcat's own &quot;startup.sh&quot;
script. It defines one option to specify the location of the tomcat
install directory, &quot;catalinahome&quot;.

File listing: start.xml

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;

&lt;joblist&gt; 
  &lt;job&gt; 
    &lt;name&gt;start&lt;/name&gt;  
    &lt;description&gt;start the simple app&lt;/description&gt;  
    &lt;additional/&gt;  
    &lt;loglevel&gt;INFO&lt;/loglevel&gt;  
    &lt;group&gt;examples/simpleapp&lt;/group&gt;  
    &lt;context&gt; 
      &lt;project&gt;${project}&lt;/project&gt; 
      &lt;options&gt; 
        &lt;option name='catalinahome' enforcedvalues='false' required='true' 
		values=&quot;${basedir}/simpleapp/apache-tomcat&quot;
		description='the tomcat install directory' /&gt;
      &lt;/options&gt; 
    &lt;/context&gt;  
    &lt;sequence threadcount=&quot;1&quot; keepgoing=&quot;false&quot; strategy=&quot;node-first&quot;&gt; 
      &lt;command&gt; 
        &lt;script&gt;&lt;![CDATA[#!/bin/bash
# File: start.sh
USAGE=&quot;$0 &lt;catalinahome&gt;&quot;
die() { echo &quot;ERROR: $@&quot; ; exit 1 ; }
[ $# = 1 ] || { die &quot;Usage: start.sh &lt;catalinahome&gt;&quot; ; }
export CATALINA_HOME=$1
[ -d &quot;$CATALINA_HOME&quot; ] || { die &quot;CATALINA_HOME not found: $CATALINA_HOME&quot; ; }

export CATALINA_BASE=$CATALINA_HOME;
echo &quot;Invoking $CATALINA_HOME/bin/startup.sh&quot;
$CATALINA_HOME/bin/startup.sh;
exit $?]]&gt;&lt;/script&gt;  
        &lt;scriptargs&gt;${option.catalinahome}&lt;/scriptargs&gt; 
      &lt;/command&gt; 
    &lt;/sequence&gt;  
    &lt;nodefilters excludeprecedence=&quot;true&quot;&gt; 
      &lt;include&gt; 
        &lt;tags&gt;simpleapp&lt;/tags&gt; 
      &lt;/include&gt; 
    &lt;/nodefilters&gt;  
    &lt;dispatch&gt; 
      &lt;threadcount&gt;1&lt;/threadcount&gt;  
      &lt;keepgoing&gt;false&lt;/keepgoing&gt; 
    &lt;/dispatch&gt; 
  &lt;/job&gt;  
&lt;/joblist&gt;
&lt;/syntaxhighlight&gt;

====stop job====
The &quot;stop&quot; job, like &quot;start&quot; is a wrapper around one of Tomcat's
scripts, &quot;shutdown.sh&quot;. It also adds a bit of logic to only run that
script if the Tomcat server is listening on its port.

File listing: stop.xml

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;joblist&gt; 
  &lt;job&gt; 
    &lt;name&gt;stop&lt;/name&gt;  
    &lt;description&gt;stop the simple app&lt;/description&gt;  
    &lt;additional/&gt;  
    &lt;loglevel&gt;INFO&lt;/loglevel&gt;  
    &lt;group&gt;examples/simpleapp&lt;/group&gt;  
    &lt;context&gt; 
      &lt;project&gt;${project}&lt;/project&gt; 
      &lt;options&gt; 
        &lt;option name='catalinahome' enforcedvalues='false' required='true' 
		values=&quot;${basedir}/simpleapp/apache-tomcat&quot;
		description='the tomcat install directory' /&gt;
      &lt;/options&gt; 
    &lt;/context&gt;  
    &lt;sequence threadcount=&quot;1&quot; keepgoing=&quot;false&quot; strategy=&quot;node-first&quot;&gt; 
      &lt;command&gt; 
        &lt;script&gt;&lt;![CDATA[#!/bin/bash
# File: stop.sh &lt;catalina-home&gt; &lt;port&gt;
die() { echo &quot;ERROR: $@&quot; ; exit 1 ; }
[ $# = 2 ] || { die &quot;Usage: stop.sh &lt;catalina-home&gt; &lt;port&gt;&quot; ; }

export CATALINA_HOME=$1
export PORT=28080

[ ! -d &quot;$1&quot; ] &amp;&amp; {  echo &quot;CATALINA_HOME not found: $1&quot; ; }

export CATALINA_BASE=$CATALINA_HOME;
netstat -an|grep ${PORT}|grep -q LISTEN &amp;&amp; {
    echo &quot;Tomcat listening (port=$PORT). Running stop script ...&quot;
    $CATALINA_HOME/bin/shutdown.sh || die &quot;Script failed: stop.sh&quot;
    exit $?
} 
echo &quot;Tomcat stopped&quot;
exit 0
]]&gt;&lt;/script&gt;  
        &lt;scriptargs&gt;${option.catalinahome}&lt;/scriptargs&gt; 
      &lt;/command&gt; 
    &lt;/sequence&gt;  
    &lt;nodefilters excludeprecedence=&quot;true&quot;&gt; 
      &lt;include&gt; 
        &lt;tags&gt;simpleapp&lt;/tags&gt; 
      &lt;/include&gt; 
    &lt;/nodefilters&gt;  
    &lt;dispatch&gt; 
      &lt;threadcount&gt;1&lt;/threadcount&gt;  
      &lt;keepgoing&gt;false&lt;/keepgoing&gt; 
    &lt;/dispatch&gt; 
  &lt;/job&gt;  
&lt;/joblist&gt;
&lt;/syntaxhighlight&gt;

===The setup build.xml===

Driven mostly for the convenience for a quick start at this example,
an Ant build.xml does some of the setup work to make the example work
for your installation. The build file is divided into a few targets to
ensure the needed archives are in the right location as well as
generate working job and option definitions. The build.xml also adds
the tags &quot;admin,simpleapp&quot; to the CTL Center Node.s

File listing: build.xml

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;project default=&quot;all&quot; name=&quot;setup&quot;&gt;
  &lt;target name=&quot;all&quot; depends=&quot;intro,pkgs,jobs,tags&quot;&gt;
    &lt;echo&gt; Setup steps completed.&lt;/echo&gt;
    &lt;echo&gt;------------------------------------------------------------&lt;/echo&gt;
  &lt;/target&gt;

  &lt;target name=&quot;intro&quot;&gt;
    &lt;property name=&quot;project&quot; value=&quot;demo&quot;/&gt;
    &lt;property environment=&quot;env&quot;/&gt;
    &lt;fail message=&quot;CTL_HOME not set&quot; unless=&quot;env.CTL_HOME&quot;/&gt;
    &lt;echo&gt;------------------------------------------------------------&lt;/echo&gt;
    &lt;echo&gt; Running automated setup steps for this example. &lt;/echo&gt;
  &lt;/target&gt;

  &lt;target name=&quot;jobs&quot;&gt;
    &lt;echo&gt;------------------------------------------------------------&lt;/echo&gt;
    &lt;echo&gt; Generating jobs from template definitions &lt;/echo&gt;
    &lt;echo&gt;------------------------------------------------------------&lt;/echo&gt;
    &lt;mkdir dir=&quot;${basedir}/jobs&quot;/&gt;
    &lt;copy todir=&quot;${basedir}/jobs&quot; verbose=&quot;true&quot;&gt;
      &lt;fileset dir=&quot;${basedir}/templates/jobs&quot; includes=&quot;**/*.xml&quot;/&gt;
      &lt;filterchain&gt;
	&lt;expandproperties/&gt;
      &lt;/filterchain&gt;
    &lt;/copy&gt; 
    &lt;echo&gt;------------------------------------------------------------&lt;/echo&gt;
    &lt;echo&gt; Generating options from template definitions &lt;/echo&gt;
    &lt;echo&gt;------------------------------------------------------------&lt;/echo&gt;
    &lt;mkdir dir=&quot;${basedir}/jobs/options&quot;/&gt;
    &lt;copy todir=&quot;${basedir}/jobs/options&quot; verbose=&quot;true&quot;&gt;
      &lt;fileset dir=&quot;${basedir}/templates/jobs/options&quot; includes=&quot;**/*.options&quot;/&gt;
      &lt;filterchain&gt;
	&lt;expandproperties/&gt;
      &lt;/filterchain&gt;
    &lt;/copy&gt; 
  &lt;/target&gt;

  &lt;target name=&quot;tags&quot;&gt;
    &lt;echo&gt;------------------------------------------------------------&lt;/echo&gt;
    &lt;echo&gt; Adding tags admin,simpleapp to this client Node &lt;/echo&gt;
    &lt;echo&gt;------------------------------------------------------------&lt;/echo&gt;
    &lt;property file=&quot;${env.CTL_BASE}/etc/framework.properties&quot;/&gt;
    &lt;fail unless=&quot;framework.node.name&quot; message=&quot;Failed reading framework.node.name property from ${env.CTL_BASE}/etc/framework.properties&quot;/&gt;
    &lt;exec executable=&quot;${env.CTL_HOME}/bin/ctl&quot;&gt;
      &lt;arg line=&quot;-p demo -m modelutil -c tag-add -- -type ${framework.node.type} -name ${framework.node.name} -tags admin,simpleapp&quot;/&gt;
    &lt;/exec&gt;
  &lt;/target&gt;

  &lt;target name=&quot;pkgs&quot;&gt;
    &lt;echo&gt;------------------------------------------------------------&lt;/echo&gt;
    &lt;echo&gt; Verifying necessary zip and war pkgs are present &lt;/echo&gt;
    &lt;echo&gt;------------------------------------------------------------&lt;/echo&gt;
    &lt;fail message=&quot;file not found: simple-1.2.3.war&quot;&gt;
      &lt;condition&gt;
	&lt;not&gt;
	  &lt;available file=&quot;${basedir}/pkgs/simple-1.2.3.war&quot;/&gt;
	&lt;/not&gt;
      &lt;/condition&gt;
    &lt;/fail&gt;

    &lt;fail message=&quot;file not found: apache-tomcat-5.5.31.zip. Download it to ${basedir}/pkgs&quot;&gt;
      &lt;condition&gt;
	&lt;not&gt;
	&lt;available file=&quot;${basedir}/pkgs/apache-tomcat-5.5.31.zip&quot;/&gt;
	&lt;/not&gt;
      &lt;/condition&gt;
    &lt;/fail&gt;
  &lt;/target&gt;

&lt;/project&gt;
&lt;/syntaxhighlight&gt;

==Extending this example on your own==

The example bootstrap process configured the example to run on the
CTL Center Node. If you want to emulate a scenario where the CTL
Center host dispatches the Deploy jobs to remote hosts then perform
the following:

1. Remove the &quot;simpleapp&quot; tag from the server Node
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
ctl -p demo -m modelutil -c tag-remove -- -type Node -name serverNode --\
  -tags simpleapp
&lt;/syntaxhighlight&gt;

2. Replace &quot;yourNode&quot; with the resource name for the remote Node you wish
to dispatch the Deploy commands.

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
ctl -p demo -m modelutil -c tag-add -- -type Node -name yourNode --\
  -tags simpleapp
&lt;/syntaxhighlight&gt;

Run the Deploy Job as earlier. You should notice the workflow steps
execute on the remote hosts.

Here are some more ideas on how to extend this example.

* Create a &quot;Restart&quot; job that calls the &quot;stop&quot; and &quot;start&quot; job
* Reconfigure the Job option definitions so they all declare &lt;code&gt;enforcedvalues=&quot;true&quot;&lt;/code&gt;. Run the Job and see what effect it has on user input.
* Write a CGI script that returns option data containing choices for the ''simpleurl'' option.

==Releated topics==

* [[Creating jobs]]
* [[Running jobs]]
* [[job.xml]]

{{Guide/navbox|state=uncollapsed}}
[[Category:Scripting Examples]]</text>
    </revision>
  </page>
  <page>
    <title>Automate deployment with ctl-exec</title>
    <id>1017</id>
    <revision>
      <id>16458</id>
      <timestamp>2012-02-22T12:16:30Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Undo revision 15460 by [[Special:Contributions/Sitamoyer|Sitamoyer]] ([[User talk:Sitamoyer|talk]]) Removed SPAM bot edit</comment>
      <text xml:space="preserve">&lt;noinclude&gt;&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Examples&lt;/categorytree&gt;&lt;/noinclude&gt;
{{Version Required 3.4.5}}

This example shows how the ControlTier framework can provide a useful set of features that can make the scripting you create for application deployment simpler, more flexible, and ultimately more accessible.  It uses the [[Script-driven Use Guide|script-driven approach]] and strategies from the [[Scripters cookbook]].

This document shows the basics of using [[CTL-EXEC_Command_Reference|ctl-exec]], [[coreutils]], and the use of a WebDAV repository to deploy a Tomcat application server, and a simple webapp called &quot;simple&quot;. This deployment will be referred to as &quot;simpleTomcat&quot; and the deployment process for that application will be done via shell script named &quot;simpleTomcat.sh&quot;.

This document walks through several iterations of the simpleTomcat.sh script implementation showing how the script is progressively made more flexible and reusable by taking advantage of ControlTier features and other best practices. Along the way, you will also see how these examples adhere to essential ControlTier [[Concepts]].


==Dependencies==
This example has these dependencies.
* ControlTier &amp;mdash; 3.4.5
** Meet the prerequisites and install ControlTier according to the [[Installation|Installing ControlTier]] instructions.
* Unix
** ''This example is not compatible with Windows.''  It is compatible with Linux, Mac OS X and most unix variants.
* &quot;demo&quot; project
** Be sure the &quot;demo&quot; project has been created across all nodes you will run this example
* Tomcat &amp;mdash; 5.5.28 
** Download Zip: [http://tomcat.apache.org/download-55.cgi http://tomcat.apache.org/download-55.cgi] or here [http://archive.apache.org/dist/tomcat/tomcat-5/v5.5.28/bin/ v5.5.28]
** Copy the downloaded Zip to &lt;code&gt;$CTIER_ROOT/examples/scripted-appserver-war-deployment/pkgs/apache-tomcat-5.5.28.zip&lt;/code&gt;
** Make sure you went through the example [[Setting_up_a_Package_for_import|Setting up a Package for import]], as it creates a package this examples depends on.

Note: A WAR file is included in the $CTIER_ROOT/examples/scripted-appserver-war-deployment/pkgs directory so there is no external dependency for that.

==Scripting with ctl-exec==
The [[ctl-exec]] command provides a convenient method to execute a local script file across a set of hosts. In this mode, ctl-exec first copies the script to the remote host and then executes it. The ctl-exec command supports several other useful features for executing commands across a set of hosts including: filtering logic, parallelism, and error handling.

Rather than require you to name each host explicitly, the ctl-exec command lets you dispatch to a set of nodes through a filter-based lookup option. Each node registered to a ControlTier project includes a set of standard metadata that you can use in your filter specification. The examples discussed here will use ''tags'' to execute a script to just the nodes that share that tag name. Tags are useful to create a symbolic name for a set of nodes that share a characteristic, like a particular application they might all have resident.

You can run any script from the ControlTier server host across a set of tagged nodes using &lt;code&gt;ctl-exec&lt;/code&gt; with this usage format:

&lt;code&gt;ctl-exec -p &lt;/code&gt;''project'' &lt;code&gt; -I tags=&lt;/code&gt;''tagname'' &lt;code&gt; -s &lt;/code&gt;''script''

Letting ctl-exec do the dispatching for you, reduces complexity from the script writing. With ctl-exec as a front end, you avoid writing iteration and remote command dispatch logic from your scripts. This lets you write your scripts so that they always assume a local execution mode and thus easier to trouble shoot. 

In the examples that follow, nodes where the &quot;simple&quot; application and Tomcat deployed are referred to as &quot;simpleTomcat&quot;. This means anytime ctl-exec is used to call commands against nodes with &quot;simpleTomcat&quot; just those nodes are selected.

The diagram below illustrates ctl-exec executing the &quot;simpleTomcat.sh&quot; script to the nodes tagged &quot;simpleTomcat&quot;:

[[Image:example-ctl-exec-scripts-screenshot.png]]

The specific command usage to support the scenario shown in the diagram above is shown here:
&lt;code&gt;ctl-exec -p demo -I tags=simpleTomcat -s simpleTomcat.sh&lt;/code&gt;

==Scripting with WebDAV==

Deployment procedures typically involve the distribution of various kinds of files to the nodes where the deployments reside. These files may be packaged artifacts that come from an internal build process. They may be 3rd party software packages. Configuration files may also need to be distributed. Often times these files are staged to a central administrative host and either pushed out via SCP. Alternatively, a web server might be used to make files accessible by HTTP clients such as &lt;code&gt;wget&lt;/code&gt; or &lt;code&gt;curl&lt;/code&gt; to pull them where needed.

Since file distribution is so essential to managing deployment, the ControlTier server includes a [[Architecture#WebDAV|WebDAV server]]. [http://www.webdav.org WebDAV] is a set of extensions to HTTP that make web content read/write. WebDAV provides a convenient way to loading the repository with files your deployment procedures need and letting you access them via any HTTP client. 

In the examples that follow, you will see how the WebDAV facility is leveraged via commands from the [[coreutils]] library. In these examples, Zip and War files that are to deployed are first staged in the WebDAV and later pulled down.

==The four deployment steps==
In each iteration of the deployment scripting, you will see how the deployment process is always carried out in four main steps:
# Shutdown: Stop the server (tomcat)
#* Check if it is running and if so, run the tomcat shutdown.sh script
# Installation: Install packages
#* Download and extract the Tomcat Zip and Simple WAR files
# Configuration: Configure the server (tomcat)
#* Customize the tomcat server.xml to run on different ports. Change the file permissions for the tomcat stop/start scripts to be executable
# Startup: Start the server (tomcat)
#* Run the tomcat startup.sh script. Verify it is running by checking the listening port.

Any time the deployment process is performed, these same four steps will be executed.

==Iterative approach==

The example is broken down into several development iterations. During each iteration, the &quot;simpleTomcat.sh&quot; deployment script is re-implemented to take advantage of ControlTier features to make it more flexible, reusable and maintainable.

The table below summarizes the goal to meet for each iteration.
&lt;table&gt;
&lt;tr&gt;&lt;th&gt;Iteration&lt;/th&gt;&lt;th&gt;Implementation changes&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Original script (no change)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Eliminate SSH calls and handcoded &lt;code&gt;for&lt;/code&gt; loop with ctl-exec. Replace use of &lt;code&gt;scp&lt;/code&gt; to push files with pull-based model supported by WebDAV&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Introduce utility modules and decompose single script into a set of simpler but separate scripts accessible from WebDAV&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;Expose individual steps as a set of sub commands controlled through command line option&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

==Iteration Zero==

We begin with a scripting approach that assumes no ControlTier use and is a typical example for executing a process like the one for the simple Tomcat deployment. 
The basic requirement is to execute [[#The four deployment steps]] across all the nodes where we want the &quot;simple&quot; Tomcat webapp deployed.
It's inconvenient and time consuming to login to each machine to run these steps, so there is an additional requirement that it be done from a central administrative host over SSH. Finally, the Zip and WAR files will be staged to a central web server to make them easily distributable to anywhere on the network.

===The scripts===
Everything is implemented in a single script, &quot;simpleTomcat.sh&quot;

====v0/simpleTomcat.sh====

Here's the implementation of the simpleTomcat.sh that uses no ControlTier functionality. It's been organized by comments to show the for main steps.
The script has been designed so each step is done across the nodes before the next step is performed. The basic code structure is shown below. 
You can see it's implemented using the &lt;code&gt;for&lt;/code&gt; shell builtin well known in Unix shell. The set of nodes to execute the steps are specified by the user and referenced inside the script as &lt;code&gt;$NODES&lt;/code&gt;. Inside the for loop are one or more calls to SSH to execute the needed command:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
for node in $NODES; do
  ssh $node command1
  ...
  ssh $node another command
  ... and so on
done
&lt;/syntaxhighlight&gt;

At the top of the script are a few shell variables to specify the URL to get packages and specify package names, versions and install directory.

Here's how the &quot;simpleTomcat.sh&quot; implements the [[#The four deployment steps]] :
# Step 1: Start tomcat
#* Remotely execute the &lt;code&gt;netstat&lt;/code&gt; and &lt;code&gt;grep&lt;/code&gt; commands to check if the Tomcat server is running and hence listening on its port. If it is, then stop it by ssh'ing the tomcat &lt;code&gt;CATALINA_HOME/bin/shutdown.sh&lt;/code&gt; script.
# Step 2: Install packages
#* Remotely execute &lt;code&gt;curl&lt;/code&gt; to get files from the WebDAV repository. Then ssh &lt;code&gt;unzip&lt;/code&gt; to extract each archive into the specified directory.
# Step 3: Configure tomcat
#* Remotely execute &lt;code&gt;sed&lt;/code&gt; to substitute port settings in the server.xml. Then use ssh to &lt;code&gt;chmod&lt;/code&gt; the files in CATALINA_HOME/bin/* to set their execute bit.
# Step 4: Start tomcat
#* SSh the &lt;code&gt;CATALINA_HOME/bin/startup.sh&lt;/code&gt; script to start Tomcat. Verify that the Tomcat server comes up by using SSh to call &lt;code&gt;netstat&lt;/code&gt; and &lt;code&gt;grep&lt;/code&gt; to check the process is bound to its port.

Additionally, each step is demarcated with a set of messages emitted by the &lt;code&gt;echo&lt;/code&gt; command. These will show begin/end messages to make it easier to follow progress when watching the output.

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
#!/bin/sh
# File: v0/simpleTomcat.sh

die() { echo &quot;ERROR: $@&quot; ; exit 1 ; }

[ -d &quot;$CTL_BASE&quot; ] || { die &quot;ERROR: CTL_BASE not found&quot; ; }

USAGE=&quot;simpleTomcat.sh &lt;node&gt; &lt;node&gt; &lt;node&gt;&quot;
[ &quot;$#&quot; -lt 1 ] &amp;&amp; { die &quot;Usage: $USAGE&quot; ; }

# Nodes where simple webapp Tomcat deployement reside
NODES=&quot;$@&quot;

# The zip and war files reside inside a WebDAV
REPO_URL=http://strongbad:8080/jackrabbit/repository/controltier/projects
TOMCAT_PKGBASE=apache-tomcat-5.5.28
SIMPLE_PKGBASE=simple
INSTALL_DIR=ctier/pkgs
export CATALINA_HOME=$INSTALL_DIR/$TOMCAT_PKGBASE
export CATALINA_BASE=$CATALINA_HOME;

echo &quot;Deploy simple tomcat. Steps: stop, install, configure, start&quot;
#
# Step 1: Stop tomcat
#
for node in $NODES; do
    echo &quot;begin stop (1/4) ...&quot;
    ssh $node netstat -an|grep 28080|grep -q LISTEN &amp;&amp; {
	echo &quot;Tomcat listening (port=28080). Running stop script ...&quot;
	ssh $node $CATALINA_HOME/bin/shutdown.sh || die &quot;Script failed: stop.sh&quot;
    }
    echo &quot;end stop (1/4)&quot;
done

#
# Step 2: Install Packages 
#
for node in $NODES; do
    echo &quot;begin install (2/4) ...&quot;
    scp $CTIER_ROOT/examples/scripted-appserver-war-deployment/pkgs/$TOMCAT_PKGBASE.zip \
	$node:$INSTALL_DIR/$TOMCAT_PKGBASE.zip || die &quot;Download failed: $TOMCAT_PKGBASE.zip&quot;
    ssh $node test -d $CATALINA_HOME &amp;&amp; {
	echo &quot;removing old CATALINA_HOME&quot;
	ssh $node rm -r $CATALINA_HOME || die &quot;failed cleaning existing tomcat deployment&quot;
    } 

    ssh $node &quot;cd $INSTALL_DIR; unzip -q $TOMCAT_PKGBASE.zip&quot; || die &quot;Extract failed: $TOMCAT_PKGBASE.zip&quot;

    ssh $node mkdir -p $CATALINA_HOME/webapps/$SIMPLE_PKGBASE || {
	die &quot;failed making $SIMPLE_PKGBASE directory&quot;
    }
    scp $CTIER_ROOT/examples/scripted-appserver-war-deployment/pkgs/$SIMPLE_PKGBASE.war \
	$node:$CATALINA_HOME/webapps/$SIMPLE_PKGBASE/$SIMPLE_PKGBASE.war || {
	die &quot;Download failed: $SIMPLE_PKGBASE.war&quot;
    }
# extract the WAR
    ssh $node &quot;cd $CATALINA_HOME/webapps/$SIMPLE_PKGBASE; unzip -q $SIMPLE_PKGBASE.war&quot; || {
	die &quot;Extract failed: $SIMPLE_PKGBASE.war&quot;
    }
    ssh $node rm  $CATALINA_HOME/webapps/$SIMPLE_PKGBASE/$SIMPLE_PKGBASE.war 
    echo &quot;end install (2/4)&quot;
done
#
# Step 3: Configure tomcat 
#
for node in $NODES; do
    echo &quot;begin configure (3/4) ...&quot;
    echo &quot;Chmod'ing files in $CATALINA_BASE/bin/*.sh&quot;
    ssh $node chmod +x $CATALINA_BASE/bin/*.sh || die &quot;chmod step failed&quot;

    echo &quot;Customizing $CATALINA_BASE/conf/server.xml ...&quot;

    ssh $node &quot;sed 's/8080/28080/g' $CATALINA_BASE/conf/server.xml &gt; /tmp/server.xml&quot;
    ssh $node &quot;mv /tmp/server.xml $CATALINA_BASE/conf/server.xml&quot; || {
	die &quot;Text replace failed: $CATALINA_BASE/conf/server.xml&quot;
    }
    ssh $node &quot;sed 's/8005/28005/g' $CATALINA_BASE/conf/server.xml &gt; /tmp/server.xml&quot;
    ssh $node &quot;mv /tmp/server.xml $CATALINA_BASE/conf/server.xml&quot; || {
	die &quot;Text replace failed: $CATALINA_BASE/conf/server.xml&quot;
    }
    ssh $node &quot;sed 's/8009/28009/g' $CATALINA_BASE/conf/server.xml &gt; /tmp/server.xml&quot;
    ssh $node &quot;mv /tmp/server.xml $CATALINA_BASE/conf/server.xml&quot; || {
	die &quot;Text replace failed: $CATALINA_BASE/conf/server.xml&quot;
    }
    echo &quot;$CATALINA_BASE/conf/server.xml customized&quot;
    echo &quot;end configure (3/4)&quot;
done
#
# Step 4: Start tomcat 
#
for node in $NODES; do
    echo &quot;begin start (4/4) ...&quot;
    echo &quot;Invoking $CATALINA_HOME/bin/startup.sh&quot;
    ssh $node $CATALINA_HOME/bin/startup.sh || die &quot;Script failed: start.sh&quot;
# verify it is running
    sleep 10; # Wait 10 seconds to give Tomcat time to start and be read
    ssh $node netstat -an|grep 28080|grep -q LISTEN || die &quot;Status failed: Tomcat not listening: (port=28080)&quot;
    echo &quot;end start (4/4)&quot;
    echo &quot;Deploy simple tomcat completed. Visit: http://$(hostname):28080/$SIMPLE_PKGBASE&quot;
done

# end v0/simpleTomcat.sh
&lt;/syntaxhighlight&gt;

===Running===
====v0/simpleTomcat.sh====

From the admin host run the &lt;code&gt;simpleTomcat.sh&lt;/code&gt; script specifying the nodes you want to deploy simple tomcat:

''execute: ''
&lt;pre&gt;
cd $CTIER_ROOT/examples/scripted-appserver-war-deployment/scripts
&lt;/pre&gt;
Change directory to the &quot;scripts&quot; subdirectory of the scripted-appserver-war-deployment example
&lt;pre&gt;
$ ./v0/simpleTomcat.sh centos2
&lt;/pre&gt;

You should see output resembling the messages shown here:

''output:''
&lt;pre&gt;
Deploy simple tomcat. Steps: stop, install, configure, start
begin stop (1/4) ...
Tomcat listening (port=28080). Running stop script ...
end stop (1/4)
begin install (2/4) ...
removing old CATALINA_HOME
end install (2/4)
begin configure (3/4) ...
Chmod'ing files in ctier/pkgs/apache-tomcat-5.5.28/bin/*.sh
Customizing ctier/pkgs/apache-tomcat-5.5.28/conf/server.xml ...
ctier/pkgs/apache-tomcat-5.5.28/conf/server.xml customized
end configure (3/4)
begin start (4/4) ...
Invoking ctier/pkgs/apache-tomcat-5.5.28/bin/startup.sh
end start (4/4)
Deploy simple tomcat completed. Visit: http://strongbad.local:28080/simple
&lt;/pre&gt;

Once the script completes you should be able to access the deployed Tomcat and &quot;simple&quot; application. Visit the link like so (eg, [http://centos2:28080/simple/ http://centos2:28080/simple/]):

[[Image:simple-tomcat-webapp-screenshot.png]]

You should see the current date and time displayed in the browser page.

===Observations===

The v0/simpleTomcat.sh script was sufficient for the task of managing the steps in the deployment process. There are several observations worth noting:
# Remote command execution (a form of dispatching) and individual deployment tasks are intermingled
# Due to #1, harder to debug because can't run the procedure locally on just one node
# Evaluating conditions is tricky when using SSH.  Relies on non-zero SSH result code processing
# The &quot;LISTEN&quot; status used by the netstat/grep pipeline doesn't really say if the server is responsive or not
# Must be conscious of quoting when executing multipart command strings over SSH (eg, when having to do things in relative directories)
# Uses scp to push files from admin host. Push-mode for file distribution can sometimes be a scaling bottleneck.

==Iteration One==

Let's refactor the simpleTomcat.sh script to address some of the shortcomings mentioned above. 
The main approach here will be to:
* Separate the SSH logic from the functional steps by introducing ctl-exec
** Make all the steps work more atomically 
** Enable easier debugging
* Use the WebDAV server to facilitate a pull-model for file distribution.
** Lets HTTP clients pull the artifacts where needed

===The scripts===

In this iteration you will see the implementation has changed to eliminate all calls to the &lt;code&gt;ssh&lt;/code&gt; command for remote execution. Instead the script will assume to be executed via [[ctl-exec]].

====v1/simpleTomcat.sh====

As in [[#v0/simpleTomcat.sh]] the script implements the four steps mentioned in the overview like so except this time all the steps are executed locally.

''File listing: v1/simpleTomcat.sh''
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
#!/bin/sh
# File: v1/simpleTomcat.sh

die() { echo &quot;ERROR: $@&quot; ; exit 1 ; }

[ -d &quot;$CTL_BASE&quot; ] || { die &quot;ERROR: CTL_BASE not found&quot; ; }

DAV_URL=http://strongbad:8080/jackrabbit/repository/controltier/projects
TOMCAT_PKGBASE=apache-tomcat-5.5.28
SIMPLE_PKGBASE=simple
INSTALL_DIR=$CTIER_ROOT/pkgs
export CATALINA_HOME=$INSTALL_DIR/$TOMCAT_PKGBASE
export CATALINA_BASE=$CATALINA_HOME;

echo &quot;Deploy simple tomcat. Steps: stop, install, configure, start&quot;
#
# Step 1: Ensure tomcat down if running 
#
echo &quot;begin stop (1/4) ...&quot;
netstat -an|grep 28080|grep -q LISTEN &amp;&amp; {
    echo &quot;Tomcat listening (port=28080). Running stop script ...&quot;
    $CATALINA_HOME/bin/shutdown.sh || die &quot;Script failed: stop.sh&quot;
}
echo &quot;end stop (1/4)&quot;

#
# Step 2: Install Packages 
#
echo &quot;begin install (2/4) ...&quot;
curl -s --user default:default $DAV_URL/pkgs/demo/zip/zips/$TOMCAT_PKGBASE.zip \
    -r $INSTALL_DIR/$TOMCAT_PKGBASE.zip || die &quot;Download failed: $TOMCAT_PKGBASE.zip&quot;

[ -d $CATALINA_HOME ] &amp;&amp; {
    rm -r $CATALINA_HOME || die &quot;failed cleaning existing tomcat deployment&quot;
}
cd $INSTALL_DIR
unzip -q $INSTALL_DIR/$TOMCAT_PKGBASE.zip || die &quot;Extract failed: $TOMCAT_PKGBASE.zip&quot;
curl -s --user default:default $DAV_URL/pkgs/demo/war/wars/$SIMPLE_PKGBASE.war \
    -r  $INSTALL_DIR/$SIMPLE_PKGBASE.war || die &quot;Download failed: $SIMPLE_PKGBASE.war&quot;

# extract the WAR
mkdir -p $CATALINA_HOME/webapps/$SIMPLE_PKGBASE || {
    die &quot;failed making $SIMPLE_PKGBASE directory&quot;
}
cd $CATALINA_HOME/webapps/$SIMPLE_PKGBASE
unzip -q $INSTALL_DIR/$SIMPLE_PKGBASE.war || die &quot;Extract failed: $SIMPLE_PKGBASE.war&quot;
echo &quot;end install (2/4)&quot;
#
# Step 3: Configure tomcat 
#
echo &quot;begin configure (3/4) ...&quot;
echo &quot;Chmod'ing files in $CATALINA_BASE/bin/*.sh&quot;
chmod +x $CATALINA_BASE/bin/*.sh || die &quot;chmod step failed&quot;

echo &quot;Customizing $CATALINA_BASE/conf/server.xml ...&quot;

sed 's/8080/28080/g' $CATALINA_BASE/conf/server.xml &gt; /tmp/server.xml
mv /tmp/server.xml $CATALINA_BASE/conf/server.xml || {
    die &quot;Text replace failed: $CATALINA_BASE/conf/server.xml&quot;
}
sed 's/8005/28005/g' $CATALINA_BASE/conf/server.xml &gt; /tmp/server.xml
mv /tmp/server.xml $CATALINA_BASE/conf/server.xml || {
    die &quot;Text replace failed: $CATALINA_BASE/conf/server.xml&quot;
}
sed 's/8009/28009/g' $CATALINA_BASE/conf/server.xml &gt; /tmp/server.xml
mv /tmp/server.xml $CATALINA_BASE/conf/server.xml || {
    die &quot;Text replace failed: $CATALINA_BASE/conf/server.xml&quot;
}
echo &quot;$CATALINA_BASE/conf/server.xml customized&quot;
echo &quot;end configure (3/4)&quot;
#
# Step 4: Start tomcat 
#
echo &quot;begin start (4/4) ...&quot;
echo &quot;Invoking $CATALINA_HOME/bin/startup.sh&quot;
$CATALINA_HOME/bin/startup.sh || die &quot;Script failed: start.sh&quot;
# verify it is running
sleep 10; # Wait 10 seconds to give Tomcat time to start and be read
netstat -an|grep 28080|grep -q LISTEN || die &quot;Status failed: Tomcat not listening: (port=28080)&quot;
echo &quot;end start (4/4)&quot;
echo &quot;Deploy simple tomcat completed. Visit: http://$(hostname):28080/$SIMPLE_PKGBASE&quot;

# end v1/simpleTomcat.sh
&lt;/syntaxhighlight&gt;

====v1/setup.sh====

A &lt;code&gt;setup.sh&lt;/code&gt; script will carry out a few steps ahead of doing the deployment.
Primarily, it tags your specified Nodes with the name &quot;simpleTomcat&quot; and then upload the apache-tomcat-5.5.28.zip and simple.war files to the WebDAV.
It makes use of the [[davutil]] module (one of the [[coreutils]] you'll learn about more later) to perform the WebDAV PUT operations.
The &lt;code&gt;[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_ProjectBuilder.html#cmd_add-tag add-tag]&lt;/code&gt; command is used to set each node with the name &quot;simpleTomcat&quot;.

&lt;pre&gt;
#!/bin/sh
# Name: v1/setup.sh
# Usage: setup.sh &lt;node&gt; &lt;node&gt; &lt;node&gt;
die() { echo &quot;ERROR: $@&quot; ; exit 1 ; }

[ -d $CTIER_ROOT/examples/scripted-appserver-war-deployment ] || {
    die &quot;Example directory not found: $CTIER_ROOT/examples/scripted-appserver-war-deployment&quot;
}
#
# Tag the nodes
#
[ $# -gt 0 ] &amp;&amp; {
    echo &quot;Adding simpleTag to these nodes: [$@] ...&quot;
    for node in $@; do
	ctl -z -p demo -m ProjectBuilder -c add-tag --\
            -type Node -name $node -tag simpleTomcat
    done
}
#
# Upload the packages
#
cd $CTIER_ROOT/examples/scripted-appserver-war-deployment/pkgs
# Ensure the Tomcat zip was downloaded.
[ -f apache-tomcat-5.5.28.zip ] || {
    die &quot;Not found: apache-tomcat-5.5.28.zip. Go to http://tomcat.apache.org/download-55.cgi and save it here: `pwd`&quot;
}
# Upload the Zip
ctl -z -p demo -m davutil -c put --\
   -file `pwd`/apache-tomcat-5.5.28.zip \
    -url dav://pkgs/demo/zip/zips/simple.apache-tomcat-5.5.28.zip || {
    die &quot;Upload failed: apache-tomcat-5.5.28.zip&quot; 
}
# Upload the War
ctl -z -p demo -m davutil -c put --\
   -file `pwd`/simple.war \
    -url dav://pkgs/demo/war/wars/simple.war || die &quot;Failed uploading simple.war&quot;
&lt;/pre&gt;

===Running===
Begin by running the setup and then run the deployment script.

====v1/setup.sh====

The setup.sh script is invoked directly.

# &lt;pre&gt;cd $CTIER_ROOT/examples/scripted-appserver-war-deployment/scripts/v1/&lt;/pre&gt;
#* Change directory to the &quot;v1&quot; subdirectory
# &lt;pre&gt;sh ./setup.sh &lt;node&gt;&lt;/pre&gt;
#* Run the setup script specifying the node (You can specify a space separated list) you want to deploy Tomcat to. Example: &lt;code&gt;sh ./setup.sh centos2&lt;/code&gt;

The setup.sh script should emit output resembling the messages below:

&lt;pre&gt;
Adding simpleTomcat to these nodes: [centos2] ...
Deleting: /Users/alexh/ctier/ctl/var/sessions/find-resources/add-tag.session
|
|--(Node) centos2
session data saved: /Users/alexh/ctier/ctl/var/sessions/find-resources/add-tag.session
Found [1] objects. Adding tags ...
Tagging object with tag simpleTomcat: centos2[Node] ...
Uploading to: http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/simple.apache-tomcat-5.5.28.zip
Uploading: apache-tomcat-5.5.28.zip
Puted 1 file to http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/simple.apache-tomcat-5.5.28.zip
Uploading to: http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/war/wars/simple.war
Uploading: simple.war
Puted 1 file to http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/war/wars/simple.war
Uploading to: http://strongbad:8080/jackrabbit/repository/controltier/projects/examples/simpleTomcat/scripts/v1
Uploading: simpleTomcat.sh
Puted 1 files to http://strongbad:8080/jackrabbit/repository/controltier/projects/examples/simpleTomcat/scripts/v1
Uploading to: http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/war/wars/simple.war
setup.sh completed
&lt;/pre&gt;

The setup.sh tagged the nodes you specified with the name &quot;simpleTomcat. You can see
each node's tag information via a ctl-exec listing. Here we use &lt;code&gt;ctl-exec -v&lt;/code&gt; to list information about the nodes registered in the demo project.

&lt;pre&gt;
$ ctl-exec -p demo -v
centos2:
   hostname: centos2
   os-arch: i386
   os-family: unix
   os-name: Linux
   os-version: 2.6.9-34.EL
   tags: [simpleTomcat]
strongbad:
   hostname: strongbad
   os-arch: i386
   os-family: unix
   os-name: Mac OS X
   os-version: 10.5.6
   tags: []
ubuntu:
   hostname: ubuntu
   os-arch: i386
   os-family: unix
   os-name: Linux
   os-version: 2.6.27-7-generic
   tags: [simpleTomcat]
&lt;/pre&gt;

Below is a screen shot of Workbench's Node Manager showing information about the same nodes. Detail about &quot;centos2&quot; is revealed making the &quot;simpleTomcat&quot; tag visible.

[[Image:example-nodes-screenshot.png]]

====v1/simpleTomcat.sh====

''Call the simpleTomcat.sh script via ctl-exec''

The ctl-exec command will execute the &lt;code&gt;simpleTomcat.sh&lt;/code&gt; script on each node that is tagged &quot;simpleTomcat&quot;. The simpleTomcat.sh script will execute locally on each of the nodes.

''execute''

&lt;pre&gt;
ctl-exec -p demo -I tags=simpleTomcat -s simpleTomcat.sh
&lt;/pre&gt;

You should see output resembling the messages shown here:

''output''
&lt;pre&gt;
number of nodes to dispatch to: 1, (threadcount=1)
Connecting to centos2:22
done.
Connecting to centos2:22
cmd : chmod +x /home/alexh/ctier/ctl/var/tmp/simpleTomcat.sh
Connecting to centos2:22
cmd : /home/alexh/ctier/ctl/var/tmp/simpleTomcat.sh
Deploy simple tomcat. Steps: stop, install, configure, start
begin stop (1/4) ...
end stop (1/4)
begin install (2/4) ...
end install (2/4)
begin configure (3/4) ...
Chmod'ing files in /home/alexh/ctier/pkgs/apache-tomcat-5.5.28/bin/*.sh
Customizing /home/alexh/ctier/pkgs/apache-tomcat-5.5.28/conf/server.xml ...
/home/alexh/ctier/pkgs/apache-tomcat-5.5.28/conf/server.xml customized
end configure (3/4)
begin start (4/4) ...
Invoking /home/alexh/ctier/pkgs/apache-tomcat-5.5.28/bin/startup.sh
end start (4/4)
Deploy simple tomcat completed. Visit: http://centos2:28080/simple
&lt;/pre&gt;

Once the script completes you should be able to access the deployed Tomcat and &quot;simple&quot; application. Visit the link like so (eg, [http://localhost:28080/simple/ http://localhost:28080/simple/]).

===Observations===
The v1/simpleTomcat.sh script was sufficient for the task of managing the steps in the deployment process. There are a couple shortcomings though:
# Hard-coded URL and authentication info to get the archives from the WebDAV repository. It's also a possibility that the curl utility may not be available across all hosts.
# The method used to check if tomcat was listening relied on a single 10 second sleep interval. It would be better to set a maximum wait time and then check periodically to see if Tomcat is running.
#* Also, relies on the unix pipeline of &lt;code&gt;netstat&lt;/code&gt; and &lt;code&gt;grep&lt;/code&gt; which may not behave the same way across different Unix OS variants. 
# Some of the steps of this script could be broken out into their own files. Simpler and focussed script are often easier to read, understand and maintain.

==Iteration Two==

Let's refactor the simpleTomcat.sh script to address the shortcomings mentioned above. 
The basic refactoring strategy will be to:
* Separate the deployment process logic from the individual deployment steps into two layers:
** Simple step-specific scripts that perform the stop, start and configure steps
** The simpleTomcat.sh script's role will become that of the orchestrator of the steps.
* Introduce the use of [[coreutils]] commands to address how to:
** access files from the repository
** check the Tomcat listening port

===The scripts===
In this iteration you will see the implementation of the deployment process broken into four scripts:
# start.sh: Manages the startup step
# stop.sh: Manages the stop step
# configure.sh: Manages the tomcat configuration step
# simpleTomcat.sh: Manages the process itself and calls the above scripts at the needed step

A number of [[coreutils]] commands are also used:
* [[netutil]] &lt;code&gt;[http://controltier.sourceforge.net/docs/latest/coreutils/reference/modules/type_netutil.html#cmd_listening listening]&lt;/code&gt; command checks network port status. It has options to set a maximum wait interval and will periodically retry the check 
* [[davutil]] &lt;code&gt;[http://controltier.sourceforge.net/docs/latest/coreutils/reference/modules/type_davutil.html#cmd_copy copy]&lt;/code&gt; command will be used to copy resources from the WebDAV to the local file system. 
* [[shellutil]] &lt;code&gt;[http://controltier.sourceforge.net/docs/latest/coreutils/reference/modules/type_shellutil.html#cmd_exec exec]&lt;/code&gt; command can execute scripts that are stored on the WebDAV. 

====v2/simpleTomcat.sh====

The refactored simpleTomcat.sh script now becomes a mixture of calls to commands in [[coreutils]] and calls to the new external scripts. 
Here's how each step is now be implemented:
# Step 1: Stop tomcat
#* Use the [[netutil]] &lt;code&gt;listening&lt;/code&gt; command to check if the tomcat server is running and hence listening on 28080. If it is, then stop it by calling the &lt;code&gt;[[#stop.sh|stop.sh]]&lt;/code&gt; script via [[shellutil]] &lt;code&gt;exec&lt;/code&gt;. 
# Step 2: Install packages 
#* Use the [[davutil]] &lt;code&gt;copy&lt;/code&gt; command to copy the Zip DAV resource to the local filesystem. If a previous deployment of tomcat exists, it will remove the prior version, and then use the &lt;code&gt;unzip&lt;/code&gt; command to extract the Zip.
#* Use the [[davutil]] &lt;code&gt;copy&lt;/code&gt; command to copy the War DAV resource to the local filesystem. Make the CATALINA_HOME/webapps/simple directory, then use the &lt;code&gt;unzip&lt;/code&gt; command to extract the WAR there.
# Step 3: Configure tomcat
#* Invoke the &lt;code&gt;configure.sh&lt;/code&gt; script via [[shellutil]] &lt;code&gt;exec&lt;/code&gt;
# Step 4: Start tomcat
#* Call the &lt;code&gt;[[#start.sh|start.sh]]&lt;/code&gt; script via [[shellutil]]#exec to bring up Tomcat. It verifies the tomcat server comes up by using [[netutil]] &lt;code&gt;listening&lt;/code&gt; to check the process is bound to the 28080 port.

Each step is demarcated with a set of messages emitted by the echo command.

''File listing: v2/simpleTomcat.sh'' 
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
#!/bin/sh
# File: v2/simpleTomcat.sh

die() { echo &quot;ERROR: $@&quot; ; exit 1 ; }

[ -d &quot;$CTL_BASE&quot; ] || { die &quot;ERROR: CTL_BASE not found&quot; ; }

SCRIPTS_URL=dav://examples/simpleTomcat/scripts/v2
TOMCAT_PKGBASE=apache-tomcat-5.5.28
SIMPLE_PKGBASE=simple
INSTALL_DIR=$CTIER_ROOT/pkgs
CATALINA_HOME=$INSTALL_DIR/$TOMCAT_PKGBASE

echo &quot;Deploy simple tomcat. Steps: stop, install, configure, start&quot;

#
# Step 1: Stop tomcat
#
echo &quot;begin stop (1/4) ...&quot;

listening=`ctl -z -p demo -m netutil -c listening -- -port 28080`
[ &quot;$listening&quot; = &quot;true&quot; ] &amp;&amp; {
    echo &quot;Tomcat listening (port=28080). Running stop script ...&quot;
    ctl -z -p demo -m shellutil -c exec --\
        -executable /bin/sh -scripturl $SCRIPTS_URL/stop.sh \
	-argline $CATALINA_HOME || die &quot;Script failed: stop.sh&quot;
}
echo &quot;end stop (1/4)&quot;

#
# Step 2: Install packages 
#
echo &quot;begin install (2/4) ...&quot;
ctl -z -p demo -m davutil -c copy --\
    -src dav://pkgs/demo/zip/zips/$TOMCAT_PKGBASE.zip \
    -dest $INSTALL_DIR/$TOMCAT_PKGBASE.zip || die &quot;Download failed: $TOMCAT_PKGBASE.zip&quot;
[ -d $CATALINA_HOME ] &amp;&amp; {
    rm -r $CATALINA_HOME || die &quot;failed cleaning existing tomcat deployment&quot;
}
cd $INSTALL_DIR
unzip -q $INSTALL_DIR/$TOMCAT_PKGBASE.zip || die &quot;Extract failed: $TOMCAT_PKGBASE.zip&quot;

ctl -z -p demo -m davutil -c copy --\
    -src dav://pkgs/demo/war/wars/$SIMPLE_PKGBASE.war \
    -dest $INSTALL_DIR/$SIMPLE_PKGBASE.war || die &quot;Download failed: $SIMPLE_PKGBASE.war&quot;
# extract the WAR
mkdir -p $CATALINA_HOME/webapps/$SIMPLE_PKGBASE || {
    die &quot;failed making $SIMPLE_PKGBASE directory&quot;
}
cd $CATALINA_HOME/webapps/$SIMPLE_PKGBASE
unzip -q $INSTALL_DIR/$SIMPLE_PKGBASE.war || die &quot;Extract failed: $SIMPLE_PKGBASE.war&quot;
echo &quot;end install (2/4)&quot;

#
# Step 3: Configure tomcat 
#
echo &quot;begin configure (3/4) ...&quot;
ctl -z -p demo -m shellutil -c exec --\
    -executable /bin/sh -scripturl $SCRIPTS_URL/configure.sh \
    -argline $CATALINA_HOME || die &quot;Script failed: configure.sh&quot;
echo &quot;end configure (3/4)&quot;

#
# Step 4: Start tomcat 
#
echo &quot;begin start (4/4) ...&quot;

ctl -z -p demo -m shellutil -c exec --\
    -executable /bin/sh -scripturl $SCRIPTS_URL/start.sh \
    -argline $CATALINA_HOME || die &quot;Script failed: start.sh&quot;
# verify it is running. Wait up to 10s. Checks every 500ms
listening=`ctl -z -p demo -m netutil -c listening -- -port 28080 -maxwait 10`
[ &quot;$listening&quot; = &quot;false&quot; ] &amp;&amp; die &quot;Status failed: Tomcat not listening: (port=28080)&quot;
echo &quot;end start (4/4)&quot;

echo &quot;Deployment completed. Visit: http://$(hostname):28080/$SIMPLE_PKGBASE&quot;

# end v2/simpleTomcat.sh
&lt;/syntaxhighlight&gt;

====stop.sh====
The &quot;stop.sh&quot; script is conditionally called in Step#1 in [[#v2/simpleTomcat.sh|simpleTomcat.sh]]. The &quot;stop.sh&quot; file is a shell script and wraps the Tomcat shutdown.sh script included in the Tomcat distribution. 

''File listing: stop.sh'' 
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
#!/bin/bash
# File: stop.sh

die() { echo &quot;ERROR: $@&quot; ; exit 1 ; }
[ $# = 1 ] || { die &quot;Usage: stop.sh &lt;catalina-home&gt;&quot; ; }
[ -d &quot;$1&quot; ] &amp;&amp; { 
    export CATALINA_HOME=$1
    export CATALINA_BASE=$CATALINA_HOME;
    $CATALINA_HOME/bin/shutdown.sh;
    exit $?
} || {
    echo &quot;WARN: CATALINA_HOME not found: $1&quot; ; 
}
&lt;/syntaxhighlight&gt;

====configure.sh====
Besides managing the runtime state of the deployed Tomcat instance, there is one more requirement for this example. We need to customize the Tomcat installation to not use its default set of ports. 

There are actually several steps carried out in the configure.sh script:
# Set the execute bit on the Tomcat scripts in $CATALINA_HOME/bin.
# Create a backup of the $CATALINA_BASE/conf/server.xml
# Re-write the $CATALINA_BASE/conf/server.xml to replace the standard ports with ones that won't conflict with our environment. 

The script makes use of the [[textutil]]'s &lt;code&gt;[http://controltier.sourceforge.net/docs/latest/coreutils/reference/modules/type_textutil.html#cmd_exec replace]&lt;/code&gt; command to substitute default port settings with ones for the &quot;simple&quot; deployment.

''File listing: configure.sh''
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
#!/bin/sh
# File: configure.sh

die() { echo &quot;ERROR: $@&quot; ; exit 1 ; }
[ $# = 1 ] || { die &quot;Usage: configure.sh &lt;catalina-home&gt;&quot; ; }
[ -d &quot;$1&quot; ] || { die &quot;CATALINA_HOME not found: $1&quot; ; }

CATALINA_BASE=$1
echo &quot;chmod'ing files in $CATALINA_BASE/bin/*.sh&quot;
chmod +x $CATALINA_BASE/bin/*.sh || die &quot;chmod step failed&quot;

echo &quot;Customizing $CATALINA_BASE/conf/server.xml ...&quot;

ctl -p demo -m textutil -c replace --\
 -basedir $CATALINA_BASE/conf -filebase server -token 8080 -value 28080 || {
    die &quot;Text replace failed: $CATALINA_BASE/conf/server.xml&quot;
}
ctl -p demo -m textutil -c replace --\
 -basedir $CATALINA_BASE/conf -filebase server -token 8005 -value 28105 || {
    die &quot;Text replace failed: $CATALINA_BASE/conf/server.xml&quot;
}
ctl -p demo -m textutil -c replace --\
 -basedir $CATALINA_BASE/conf -filebase server -token 8009 -value 28009 || {
    die &quot;Text replace failed: $CATALINA_BASE/conf/server.xml&quot;
}

echo &quot;$CATALINA_BASE/conf/server.xml customized&quot;
&lt;/syntaxhighlight&gt;

====start.sh====
The &quot;start.sh&quot; script is called in Step#5 in [[#simpleTomcat.sh v2|simpleTomcat.sh]]. The &quot;start.sh&quot; file is a shell script and wraps the Tomcat CATALINA_HOME/bin/startup.sh script included in the Tomcat distribution. 

''File listing: start.sh''
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
#!/bin/bash
# File: start.sh

die() { echo &quot;ERROR: $@&quot; ; exit 1 ; }
[ $# = 1 ] || { die &quot;Usage: start.sh &lt;catalina-home&gt;&quot; ; }
[ -d &quot;$1&quot; ] || { die &quot;CATALINA_HOME not found: $1&quot; ; }
export CATALINA_HOME=$1
export CATALINA_BASE=$CATALINA_HOME;
echo &quot;Invoking $CATALINA_HOME/bin/startup.sh&quot;
$CATALINA_HOME/bin/startup.sh;
exit $?
&lt;/syntaxhighlight&gt;

====v2/setup.sh====
The setup.sh script is the same as in [[#setup.sh v1]] except it will be modified to upload the new scripts to the webdav.
Below is the snippet that is added to the setup.sh for this iteration.
&lt;pre&gt;
#
# Upload the scripts
#
cd $CTIER_ROOT/examples/scripted-appserver-war-deployment/scripts
ctl -z -p demo -m davutil -c put --\
   -file `pwd`/v2 \
    -url dav://examples/simpleTomcat/scripts/v2 || {
    die &quot;Failed uploading scripts to DAV&quot;
}
&lt;/pre&gt;
You can see that the &lt;code&gt;put&lt;/code&gt; command can copy a directory of files to the WebDAV.

===Running===

====v2/setup.sh====

Like in Iteration One, the setup.sh script is invoked directly.

# &lt;pre&gt;cd $CTIER_ROOT/examples/scripted-appserver-war-deployment/scripts/v2&lt;/pre&gt;
#* Change directory to the &quot;v2&quot; subdirectory
# &lt;pre&gt;sh ./setup.sh &lt;node&gt;&lt;/pre&gt;
#* Run the setup script specifying the node (You can specify a space separated list) you want to deploy Tomcat to. Example: &lt;code&gt;sh ./setup.sh centos2&lt;/code&gt;

====v2/simpleTomcat.sh====

''Call the simpleTomcat.sh script via ctl-exec''

Use ctl-exec to execute the &lt;code&gt;simpleTomcat.sh&lt;/code&gt; script on each node that is tagged &quot;simpleTomcat&quot;. 

''execute''

&lt;pre&gt;
ctl-exec -p demo -I tags=simpleTomcat -s simpleTomcat.sh
&lt;/pre&gt;

You should see output resembling the messages shown here:

''output''

===Observations===

The refactored implementation of the deployment process addressed several issues mentioned earlier. It is less monolithic, broken down into a two layers and leverages commands from [[coreutils]]. 

The refactored design still suffers from one kind of inflexibility. 
* All or nothing execution. You can't invoke individual steps in the deployment cycle. 

==Iteration Three==

Let's refactor the implementation again to address the shortcomings mentioned in the observations in Iteration Two. 
The basic refactoring strategy will be to:
* Structure the code in the script to reflect the four main steps of the deployment cycle: stop, install, configure, start
#* This will be done by using shell functions for each of the 4 steps
* Expose the individual steps as sub commands to the main driver script, &quot;simpleTomcat.sh&quot;.
#* Option parsing will be added that accept named subcommands
# Define some jobs in Jobcenter
#* one job per function

===The scripts===

====v3/simpleTomcat.sh====
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
#!/bin/sh
# File: simpleTomcat.sh
PROG=`basename $0`
USAGE=&quot;
Usage: $PROG -c command
 -c,-command   Deploy command to run. Start|PackagesInstall|Configure|Stop|Deploy
&quot;
die() { echo &quot;ERROR: $@&quot; ; exit 1 ; }

[ -d &quot;$CTL_BASE&quot; ] || { die &quot;ERROR: CTL_BASE not found&quot; ; }

SCRIPTS_URL=dav://examples/scripted-appserver-war-deployment
TOMCAT_PKGBASE=apache-tomcat-5.5.28
SIMPLE_PKGBASE=simple
INSTALL_DIR=$CTIER_ROOT/pkgs
CATALINA_HOME=$INSTALL_DIR/$TOMCAT_PKGBASE

#
# Stop:
#
Stop() {
    listening=`ctl -z -p demo -m netutil -c listening -- -port 28080` ;
    [ &quot;$listening&quot; = &quot;true&quot; ] &amp;&amp; {
	echo &quot;Tomcat listening (port=28080). Running stop script ...&quot; ;
	ctl -z -p demo -m shellutil -c exec --\
        -executable /bin/sh -scripturl $SCRIPTS_URL/stop.sh \
	    -argline $CATALINA_HOME || die &quot;Script failed: stop.sh&quot; ;
    }
    return 0;
}

#
# Packages-Install 
#

PackagesInstall() {
# Download the tomcat Zip
    ctl -z -p demo -m davutil -c copy --\
    -src dav://pkgs/demo/zip/zips/$TOMCAT_PKGBASE.zip \
	-dest $INSTALL_DIR/$TOMCAT_PKGBASE.zip || die &quot;Download failed: $TOMCAT_PKGBASE.zip&quot; ;
    [ -d $CATALINA_HOME ] &amp;&amp; {
	rm -r $CATALINA_HOME || die &quot;failed cleaning existing tomcat deployment&quot; ;
    }
    cd $INSTALL_DIR ;
    unzip -q $INSTALL_DIR/$TOMCAT_PKGBASE.zip || die &quot;Extract failed: $TOMCAT_PKGBASE.zip&quot; ;

# Download the simple.war 
    ctl -z -p demo -m davutil -c copy --\
    -src dav://pkgs/demo/war/wars/$SIMPLE_PKGBASE.war \
	-dest $INSTALL_DIR/$SIMPLE_PKGBASE.war || die &quot;Download failed: $SIMPLE_PKGBASE.war&quot; ;
# extract the WAR
    mkdir -p $CATALINA_HOME/webapps/$SIMPLE_PKGBASE || {
	die &quot;failed making $SIMPLE_PKGBASE directory&quot; ;
    }
    cd $CATALINA_HOME/webapps/$SIMPLE_PKGBASE ;
    unzip -q $INSTALL_DIR/$SIMPLE_PKGBASE.war || die &quot;Extract failed: $SIMPLE_PKGBASE.war&quot; ;
}

#
# Configure
#
Configure() {
    ctl -z -p demo -m shellutil -c exec --\
    -executable /bin/sh -scripturl $SCRIPTS_URL/configure.sh \
	-argline $CATALINA_HOME || die &quot;Script failed: configure.sh&quot; ;
}

#
# Start
#
Start() {
    ctl -z -p demo -m shellutil -c exec --\
    -executable /bin/sh -scripturl $SCRIPTS_URL/start.sh \
	-argline $CATALINA_HOME || die &quot;Script failed: start.sh&quot; ;
# verify it is running. Wait up to 10s. Checks every 500ms
    listening=`ctl -z -p demo -m netutil -c listening -- -port 28080 -maxwait 10` ;
    [ &quot;$listening&quot; = &quot;false&quot; ] &amp;&amp; die &quot;Status failed: Tomcat not listening: (port=28080)&quot; ;
    echo &quot;Tomcat started. Visit: http://$(hostname):28080/$SIMPLE_PKGBASE&quot; ; 
}

#
# Status
#
Status() {
    listening=`ctl -z -p demo -m netutil -c listening -- -port 28080` ;
    [ &quot;$listening&quot; = &quot;true&quot; ] &amp;&amp; {
	echo &quot;Tomcat listening: (port=28080)&quot;
    } || {
	die &quot;Tomcat not listening: (port=28080)&quot;
    }
}

#
# Deploy
#
Deploy() {
    Stop &amp;&amp; PackagesInstall &amp;&amp; Configure &amp;&amp; Start;
    echo &quot;Deployment completed.&quot;;
}


while [ &quot;$#&quot; -gt 0 ]; do
    OPT=&quot;$1&quot;
    case &quot;$OPT&quot; in
    # options without arguments
	-h)
	    echo &quot;$USAGE&quot;
	    exit 0
	    ;;
	-c)
	    COMMAND=&quot;$2&quot;
	    shift
	    ;;
    # end of options, just arguments left
	*)
	    echo &quot;$USAGE&quot;
	    exit 2 
	    ;;
    esac
    shift
done

case &quot;$COMMAND&quot; in
    Stop) Stop
	;;
    Packages-Install) PackagesInstall
	;;
    Configure)	Configure
	;;
    Start) Start
	;;
    Status) Status
	;;
    Deploy) Deploy
	;;
    *)
	break;
esac

# end simpleTomcat.sh
&lt;/syntaxhighlight&gt;

''Usage''

The usage of the new simpleTomcat.sh is shown below:
&lt;pre&gt;
Usage: simpleTomcat.sh -c sub-command
 -c,-command   Command to run. Start|Packages-Install|Configure|Stop|Deploy
&lt;/pre&gt;

Because the simpleTomcat.sh now takes arguments, the ctl-exec command syntax changes slightly. For scripts that take arguments, you pass them after the &quot;--&quot; option:

&lt;code&gt;ctl-exec -p demo -I tags=simpleTomcat -s simpleTomcat.sh -- [script-arguments]&lt;/code&gt;

For example, to run the &quot;Status&quot; sub-command in simpleTomcat.sh you add &quot;-- -c Status&quot;:

&lt;code&gt;ctl-exec -p demo -I tags=simpleTomcat -s simpleTomcat.sh -- -c Status&lt;/code&gt;

When ctl-exec executes simpleTomcat.sh on the local node, it will be invoked as if you typed:
&lt;code&gt;simpleTomcat.sh -c Status&lt;/code&gt;

====v3/setup.sh====

The &quot;setup.sh&quot; script is the same as in Iteration Two. No changes were necessary.

===Running===

====v3/setup.sh====

Like in Iteration One and Two, the setup.sh script is invoked directly.

# &lt;pre&gt;cd $CTIER_ROOT/examples/scripted-appserver-war-deployment/scripts/v3/&lt;/pre&gt;
#* Change directory to the &quot;v3&quot; subdirectory
# &lt;pre&gt;sh ./setup.sh &lt;node&gt;&lt;/pre&gt;
#* Run the setup script specifying the node (You can specify a space separated list) you want to deploy Tomcat to. Example: &lt;code&gt;sh ./setup.sh centos2&lt;/code&gt;

====v3/simpleTomcat.sh====

''Deploy the tomcat script via ctl-exec''

Use ctl-exec to execute the &quot;Deploy&quot; sub-command from the &lt;code&gt;simpleTomcat.sh&lt;/code&gt; script across all nodes tagged &quot;simpleTomcat&quot;. 

''execute: Deploy''
&lt;pre&gt;
ctl-exec -p demo -I tags=simpleTomcat -s simpleTomcat.sh -- -c Deploy
&lt;/pre&gt;

''output''
&lt;pre&gt;
number of nodes to dispatch to: 1, (threadcount=1)
Connecting to centos2:22
done.
Connecting to centos2:22
cmd : chmod +x /home/alexh/ctier/ctl/var/tmp/simpleTomcat.sh
Connecting to centos2:22
cmd : /home/alexh/ctier/ctl/var/tmp/simpleTomcat.sh -c Deploy
Deploy simple tomcat. Steps: stop, install, configure, start
begin stop (1/4) ...
Tomcat listening (port=28080). Running stop script ...
Getting: http://strongbad:8080/jackrabbit/repository/controltier/projects/examples/simpleTomcat/scripts/v3/stop.sh
To: /tmp/exec1458106545160442288-stop.sh
Copying 1 file to /tmp
Tomcat stopped
end stop (1/4)
begin install (2/4) ...
Getting: http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/apache-tomcat-5.5.28.zip
To: /home/alexh/ctier/pkgs/apache-tomcat-5.5.28.zip
local file date : Sat Jun 20 15:08:03 PDT 2009
Not modified - so not downloaded
Getting: http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/war/wars/simple.war
To: /home/alexh/ctier/pkgs/simple.war
local file date : Sat Jun 20 15:08:04 PDT 2009
Not modified - so not downloaded
end install (2/4)
begin configure (3/4) ...
Getting: http://strongbad:8080/jackrabbit/repository/controltier/projects/examples/simpleTomcat/scripts/v3/configure.sh
To: /tmp/exec4481840577151954212-configure.sh
Copying 1 file to /tmp
Chmod'ing files in /home/alexh/ctier/pkgs/apache-tomcat-5.5.28/bin/*.sh
Customizing /home/alexh/ctier/pkgs/apache-tomcat-5.5.28/conf/server.xml ...
/home/alexh/ctier/pkgs/apache-tomcat-5.5.28/conf/server.xml customized
end configure (3/4)
begin start (4/4)...
Getting: http://strongbad:8080/jackrabbit/repository/controltier/projects/examples/simpleTomcat/scripts/v3/start.sh
To: /tmp/exec3072954032595161398-start.sh
Copying 1 file to /tmp
Invoking /home/alexh/ctier/pkgs/apache-tomcat-5.5.28/bin/startup.sh
Tomcat started. Visit: http://centos2:28080/simple
end start (4/4)
Deployment completed. Visit: http://centos2:28080/simple
&lt;/pre&gt;

* Run the &quot;Status&quot; subcommand:

''execute: Status''

&lt;pre&gt;
ctl-exec -p demo -I tags=simpleTomcat -s simpleTomcat.sh -- -c Status
&lt;/pre&gt;

''output''
&lt;pre&gt;
number of nodes to dispatch to: 1, (threadcount=1)
Connecting to centos2:22
done.
Connecting to centos2:22
cmd : chmod +x /home/alexh/ctier/ctl/var/tmp/simpleTomcat.sh
Connecting to centos2:22
cmd : /home/alexh/ctier/ctl/var/tmp/simpleTomcat.sh -c Status
Tomcat listening: (port=28080)
&lt;/pre&gt;

* Run the &quot;Status&quot; subcommand
''execute: Stop''

&lt;pre&gt;
ctl-exec -p demo -I tags=simpleTomcat -s simpleTomcat.sh -- -c Stop
&lt;/pre&gt;

''output''
&lt;pre&gt;
number of nodes to dispatch to: 1, (threadcount=1)
Connecting to centos2:22
done.
Connecting to centos2:22
cmd : chmod +x /home/alexh/ctier/ctl/var/tmp/simpleTomcat.sh
Connecting to centos2:22
cmd : /home/alexh/ctier/ctl/var/tmp/simpleTomcat.sh -c Stop
Tomcat listening (port=28080). Running stop script ...
Getting: http://strongbad:8080/jackrabbit/repository/controltier/projects/examples/simpleTomcat/scripts/v3/stop.sh
To: /tmp/exec2039195157561216008-stop.sh
Copying 1 file to /tmp
Tomcat stopped
&lt;/pre&gt;

* Run the &quot;Start&quot; subcommand

''execute: Start''

&lt;pre&gt;
ctl-exec -p demo -I tags=simpleTomcat -s simpleTomcat.sh -- -c Start
&lt;/pre&gt;

''output''
&lt;pre&gt;
number of nodes to dispatch to: 1, (threadcount=1)
Connecting to centos2:22
done.
Connecting to centos2:22
cmd : chmod +x /home/alexh/ctier/ctl/var/tmp/simpleTomcat.sh
Connecting to centos2:22
cmd : /home/alexh/ctier/ctl/var/tmp/simpleTomcat.sh -c Start
Getting: http://strongbad:8080/jackrabbit/repository/controltier/projects/examples/simpleTomcat/scripts/v3/start.sh
To: /tmp/exec1437938695406384114-start.sh
Copying 1 file to /tmp
Invoking /home/alexh/ctier/pkgs/apache-tomcat-5.5.28/bin/startup.sh
Tomcat started. Visit: http://centos2:28080/simple
&lt;/pre&gt;


{{Guide/navbox}}

[[Category:Scripting_Examples]]</text>
    </revision>
  </page>
  <page>
    <title>Automated Client Installer</title>
    <id>926</id>
    <revision>
      <id>14096</id>
      <timestamp>2010-11-10T15:35:22Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;ctl-depot&quot; to &quot;ctl-project&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Installation&lt;/categorytree&gt;

This document describes how to automate the installation of a  unix or cygwin based ControlTier client using the ControlTier framework as the harness.  After establishing a running ControlTier operation, it may be desirable to automate client installations and further exposing this process within jobcenter in order to support &amp;quot;self serve&amp;quot; client installations.  In addition to this obvious benefit, this process will require minimal user knowledge to get a new client up and running (such as the hostname and possibly the username of the new client).

For module reference, see {{Elements Type Reference|ClientInstaller}}

ToDo:

* test cygwin

==Prerequisites==

ControlTier server and client have been installed on the master node with Jobcenter support.  See the [[ZIP installer]] script.     

Familiarity with [[ProjectBuilder]] as this will be used to load in the ClientInstaller related configuration.

Access to the ControlTier zip installer ( (ControlTier-&amp;lt;''version''&amp;gt;.zip) , see [http://sourceforge.net/project/showfiles.php?group_id=151079&amp;package_id=199032 here] and verify your current installation version prior to downloading if the zip installer is not in your possession.

Access to the native java installer for the unix/win32 platform, see  [http://java.sun.com/javase/downloads/index_jdk5.jsp Java] 
* Unix Clients:  ControlTier supports automated installation of the jdk for unix based clients and requires the O/S dependent Sun Java self &amp;quot;bin&amp;quot; extracting archive (e.g. jdk-1_5_0_12-linux-i586.bin) 
* Cygwin/Win32 Clients: Since Cygwin uses the jdk from the result of the  native Windows exe installer, it is required that a &amp;quot;reference&amp;quot; install take place on a win32 platform where a zip archive can be created from.   This zip archive, although unlike the bin archive for unix, will serve the purpose of automating java installs on a cygwin/win32 platform.  Instructions for the native reference installation and subsequent zip packaging of it is described in this doc.
   

===Dependencies===

The following target clients are supported:

* any &amp;quot;unix&amp;quot; based system that ControlTier supports, see [[FAQ#What_operating_systems_does_ControlTier_run_on.3F | ControlTier FAQ]]
* For [[ Cygwin ]] windows clients:
** [[ Cygwin#Cygwin_software_installation | Cygwin Software Installation ]]
** [[ Cygwin#SSH_server_configuration | Cygwin SSH Server Configuration ]] applied.  
** This module will automate the following steps within the [[ Cygwin ]] section:
*** [[ Cygwin#Java_installation | Win32 Java Installation (from a zipped reference install) ]]
*** [[ Cygwin#ControlTier_installation | Controltier Client Installation ]]
** NOTE:  automating ControlTier installs on a native windows system outside the context of cygwin is not supported at this time.
* [[Installation#SSH_configuration| remote SSH configuration]] without any interactive prompting

==Configure ProjectBuilder==

In order to load the ClientInstaller configuration we need a ProjectBuilder instance.  If one is not already configured, refer to:  [[ProjectBuilder]], the following example assumes your project is named &amp;quot;ModuleDev&amp;quot; which will undoubtably differ from yours:

&lt;pre&gt;
charles-scotts-macbook-pro-15:~ demo$ ctl -p ModuleDev -m ProjectBuilder -c Register -- -type ProjectBuilder -name elements -install -installroot '${env.CTIER_ROOT}/target/moduleDev' -basedir '${env.CTIER_ROOT}/src/moduleDev'
Checking for existing object, (ProjectBuilder) elements, in project, 'ModuleDev'...
Registered new object.
The object can be viewed in the server via URL: http://charles-scotts-macbook-pro-15.local:8080/itnav/instances/View.do?maprefUri=http://www.opendepo.org/ct/ModuleDev/Objects#obj_1&amp;depot=ModuleDev
Dependency registered: charles-scotts-macbook-pro-15.local[Node] --&gt; elements[ProjectBuilder]
Updating ProjectBuilder module ...
Created dir: /Users/demo/ctier/ctl/var/tmp/downloads/ModuleDev
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/ModuleDev/publish/modules/ProjectBuilder-head.jar
To: /Users/demo/ctier/ctl/var/tmp/downloads/ModuleDev/ProjectBuilder-head.jar
Expanding: /Users/demo/ctier/ctl/var/tmp/downloads/ModuleDev/ProjectBuilder-head.jar into /Users/demo/ctier/ctl/modules/ProjectBuilder
Attempting to get Builder-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/ModuleDev/publish/modules/Builder-head.jar
To: /Users/demo/ctier/ctl/var/tmp/downloads/ModuleDev/Builder-head.jar
Created dir: /Users/demo/ctier/ctl/projects/ModuleDev/modules/Builder
Expanding: /Users/demo/ctier/ctl/var/tmp/downloads/ModuleDev/Builder-head.jar into /Users/demo/ctier/ctl/projects/ModuleDev/modules/Builder
Attempting to get Deployment-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/ModuleDev/publish/modules/Deployment-head.jar
To: /Users/demo/ctier/ctl/var/tmp/downloads/ModuleDev/Deployment-head.jar
Created dir: /Users/demo/ctier/ctl/projects/ModuleDev/modules/Deployment
Expanding: /Users/demo/ctier/ctl/var/tmp/downloads/ModuleDev/Deployment-head.jar into /Users/demo/ctier/ctl/projects/ModuleDev/modules/Deployment
Created dir: /Users/demo/ctier/ctl/projects/ModuleDev/resources/ProjectBuilder/elements/bin
Created dir: /Users/demo/ctier/ctl/projects/ModuleDev/resources/ProjectBuilder/elements/logs
Created dir: /Users/demo/ctier/ctl/projects/ModuleDev/resources/ProjectBuilder/elements/var/transforms
Updating properties ...
Updating process view file ...
Process View definition updated.
Framework info:
Type module: /Users/demo/ctier/ctl/modules/ProjectBuilder
Object directory: /Users/demo/ctier/ctl/projects/ModuleDev/resources/ProjectBuilder/elements
Object properties file: /Users/demo/ctier/ctl/projects/ModuleDev/resources/ProjectBuilder/elements/var/resource.properties
Object process view file: /Users/demo/ctier/ctl/projects/ModuleDev/resources/ProjectBuilder/elements/var/pview.xml
For more information about this object run: ctl -p ModuleDev -t ProjectBuilder -r elements -c Properties
&lt;/pre&gt;



Ensure an objects directory exists in your ProjectBuilder source hierarchy and set this directory to your working directory, again the '''moduleDev''' directory will likely differ from yours:

&lt;pre&gt;
charles-scotts-macbook-pro-15:~ demo$ mkdir -p ${CTIER_ROOT}/src/moduleDev/objects
charles-scotts-macbook-pro-15:~ demo$ cd ${CTIER_ROOT}/src/moduleDev/objects
&lt;/pre&gt;

==Configure and Load '''clientInstaller''' objects==

The following ProjectXML will be created in a '''clientInstaller.xml''' file, take note to the ControlTier version, JDK versions, and the Node resource name.  
Ensure the ControlTier and JDK versions are changed to the version you have and refer to each occurrence of  the Node resource name and ensure it matches your master Node. 


&lt;pre&gt;
&lt;?xml version=&quot;1.0&quot;?&gt;

&lt;!DOCTYPE project PUBLIC &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; &quot;project.dtd&quot;&gt;
&lt;project&gt;

   &lt;!-- set cygwinClient to true, if a cygwin client is desired, see the cygwin ClientInstaller object --&gt; 
   &lt;setting type=&quot;ClientInstallerCygwinClient&quot; name=&quot;true&quot; description=&quot;configure cygwin client&quot; settingValue=&quot;true&quot;/&gt;

   &lt;!-- set trustClient to true which will override the issue when ssh known-hosts does not recognize the target machine.  Warning, this will enable a blind trust --&gt;
   &lt;setting type=&quot;ClientInstallerTrustClient&quot; name=&quot;true&quot; description=&quot;blindly trust remote clients&quot; settingValue=&quot;true&quot;/&gt;

   &lt;!-- set a targetUser, which overrides the default which would be the same user as the master instance --&gt;
   &lt;setting type=&quot;ClientInstallerTargetUser&quot; name=&quot;ctier&quot; description=&quot;target user of the to be installed client&quot; settingValue=&quot;ctier&quot;/&gt;



   &lt;!-- JavaZip package, a zip of a previously installed (reference installation) win32 jdk such as the jdk-1.5.0_14 folder within the \Program Files\Java folder --&gt;
   &lt;package type=&quot;JavaZip&quot; 
         name=&quot;jdk-client-install-windows-i586-p.zip&quot;
         version=&quot;1.5.0_14&quot;
         release=&quot;1.5.0_14&quot;
         buildtime=&quot;&quot;
         arch=&quot;win32&quot;
         filename=&quot;jdk-1_5_0_14-windows-i586-p.zip&quot;
         filetype=&quot;zip&quot;
         base=&quot;jdk1.5.0_14&quot;
         installroot=&quot;${framework.var.dir}&quot;
         repoUrl=&quot;/JavaZip/zips/jdk-1_5_0_14-windows-i586-p.zip&quot;
         releasetag=&quot;&quot;
         installrank=&quot;30&quot;
         restart=&quot;false&quot;
         vendor=&quot;Sun&quot;
         description=&quot;windows cygwin java zip install&quot;/&gt;

  &lt;!-- native linux sun jdk installer package --&gt;
  &lt;package type=&quot;JavaBin&quot;
           name=&quot;jdk-client-install-linux-i586.bin&quot;
           version=&quot;1.5.0_12&quot;
           release=&quot;1.5.0_12&quot;
           buildtime=&quot;&quot;
           arch=&quot;linux&quot;
           filename=&quot;jdk-1_5_0_12-linux.bin&quot;
           filetype=&quot;bin&quot;
           base=&quot;jdk1.5.0_12&quot;
           installroot=&quot;${framework.var.dir}&quot;
           repoUrl=&quot;/JavaBin/bins/jdk-1_5_0_12-linux.bin&quot;
           releasetag=&quot;&quot;
           installrank=&quot;1&quot;
           restart=&quot;false&quot;
           vendor=&quot;Sun Microsystems, Inc.&quot;
           description=&quot;Java(TM) SE Development Kit 5 update 17&quot;/&gt;

   &lt;!-- ControlTier Installer package --&gt;
   &lt;package type=&quot;CTierInstallerZip&quot; 
         name=&quot;ControlTier-3.4.3.zip&quot;
         version=&quot;3.4.3&quot;
         release=&quot;3.4.3&quot;
         buildtime=&quot;&quot;
         arch=&quot;noarch&quot;
         filename=&quot;ControlTier-3.4.3.zip&quot;
         filetype=&quot;zip&quot;
         base=&quot;ControlTier-3.4.3&quot;
         installroot=&quot;${framework.var.dir}&quot;
         repoUrl=&quot;/CTierInstallerZip/zips/ControlTier-3.4.3.zip&quot;
         releasetag=&quot;&quot;
         installrank=&quot;30&quot;
         restart=&quot;false&quot;
         vendor=&quot;Sun&quot;
         description=&quot;controltier installer&quot;/&gt;


   &lt;!-- ClientInstaller for linux based clients --&gt;
   &lt;deployment type=&quot;ClientInstaller&quot; name=&quot;linux&quot; basedir=&quot;&quot; installRoot=&quot;&quot; description=&quot;linux client installer&quot; startuprank=&quot;1&quot;&gt;
      &lt;resources replace=&quot;true&quot;&gt;
         &lt;resource type=&quot;JavaBin&quot; name=&quot;jdk-client-install-linux-i586.bin&quot;/&gt;
         &lt;resource type=&quot;CTierInstallerZip&quot; name=&quot;ControlTier-3.4.3.zip&quot;/&gt;
          &lt;resource type=&quot;ClientInstallerTrustClient&quot; name=&quot;true&quot;/&gt;
         &lt;resource type=&quot;ClientInstallerTargetUser&quot; name=&quot;ctier&quot;/&gt;
      &lt;/resources&gt;
      &lt;referrers replace=&quot;false&quot;&gt;
         &lt;resource type=&quot;Node&quot; name=&quot;charles-scotts-macbook-pro-15.local&quot;/&gt;
      &lt;/referrers&gt;
   &lt;/deployment&gt;

   &lt;!-- ClientInstaller for cygwin based clients --&gt;
   &lt;deployment type=&quot;ClientInstaller&quot; name=&quot;cygwin&quot; basedir=&quot;&quot; installRoot=&quot;&quot; description=&quot;cygwin client installer&quot; startuprank=&quot;1&quot;&gt;
      &lt;resources replace=&quot;true&quot;&gt;
         &lt;resource type=&quot;ClientInstallerCygwinClient&quot; name=&quot;true&quot;/&gt;
         &lt;resource type=&quot;JavaZip&quot; name=&quot;jdk-client-install-windows-i586-p.zip&quot;/&gt;
         &lt;resource type=&quot;CTierInstallerZip&quot; name=&quot;ControlTier-3.4.3.zip&quot;/&gt;
          &lt;resource type=&quot;ClientInstallerTrustClient&quot; name=&quot;true&quot;/&gt;
      &lt;/resources&gt;
      &lt;referrers replace=&quot;false&quot;&gt;
         &lt;resource type=&quot;Node&quot; name=&quot;charles-scotts-macbook-pro-15.local&quot;/&gt;
      &lt;/referrers&gt;
   &lt;/deployment&gt;


&lt;/project&gt;
&lt;/pre&gt;

The preceding xml specifies the following:

* ClientInstaller linux object specifies:
** JavaBin package using the Sun Java standard installer for the linux platform, version 1.5.0_12
** ControlTier installer, version 3.4.3
** defaults to the &amp;quot;ctier&amp;quot; target user
*** adjust the settingValue to your desired user on the target platform in desired.
** blindly trusts remote hosts by ignoring lack of host key for the remote machine

* ClientInstaller cygwin object specifies:
** cygwin client mode is set to true to ensure cygwin configuration is applied
** JavaZip package:  a zip image of a previously installed jdk (a reference install) from the Sun Java standard installer for the win32 platform, version 1.5.0_14.
** ControlTier installer, version 3.4.3
** defaults to the &amp;quot;ctier&amp;quot; target user
*** adjust the settingValue to your desired user on the target platform in desired.
** blindly trusts remote hosts by ignoring lack of host key for the remote machine

Explanation of the  installation root:  &amp;quot;${framework.var.dir}&amp;quot;:

Each package, as you may have noticed, has an unusual installation root:  &amp;quot;${framework.var.dir}&amp;quot;.  More advanced users of the ControlTier system may find that unusual as the installation root generally identifies where the package is installed to when the referring deployment is deployed.  This is because we are bootstrapping a controltier client where the framework does not exist yet.  Because of this we implement a hybrid approach where this module, which resides on the ctier server's local framework instance, downloads the packages to a temporary workspace (i.e. ${framework.var.dir}) and subsequently pushes them for installation  via the [http://www.jcraft.com/jsch/  jsch java library] equivalent of &amp;quot;scp&amp;quot; onto the remote target server.

Explanation of the java package names:  :  &amp;quot;jdk-client-install-windows-i586-p.zip&amp;quot; and &amp;quot;jdk-client-install-linux-i586-p.zip&amp;quot;:

since these packages are &amp;quot;pushed&amp;quot; via scp to remote clients they get temporarily downloaded to a local working directory prior to the push and therefore their installation roots are different than a typical jdk package.  For this reason, we give them package names to indicate their function.


Load the clientInstaller objects:

&lt;pre&gt;
charles-scotts-macbook-pro-15:objects demo$ ctl -p ModuleDev -t ProjectBuilder -r moduleDev -c load-resources -- -filename clientInstaller.xml
Loading &quot;/Users/demo/ctier/src/moduleDev/objects/clientInstaller.xml&quot; ...
1 file(s) have been successfully validated.
Processing /Users/demo/ctier/src/moduleDev/objects/clientInstaller.xml to /Users/demo/ctier/ctl/var/tmp/projectxml-1574026733.xml
Loading stylesheet /Users/demo

&lt;/pre&gt;

Install the new Objects

&lt;pre&gt;
charles-scotts-macbook-pro-15:objects demo$ ctl-project -p ModuleDev -a install 
&quot;Install&quot; command running for resource: (ClientInstaller) cygwin
&quot;Install&quot; command running for resource: (ProjectBuilder) moduleDev
&quot;Install&quot; command running for resource: (ClientInstaller) linux
&lt;/pre&gt;

==Upload the Packages==

Upload the JavaBin, CTierInstallerZip, and JavaZip (the latter package only needed if cygwin clients are required).


Upload  JavaBin package:

Navigate to the JavaBin package object (in this case it is a jdk-client-install-linux-i586.bin package to indicate a linux platform package):
[[Image:linuxJdkNavigate.gif]]

Click Upload File and upload the java self extracting unix archive (in this case it is a linux based java installer):
[[Image:linuxJdkSelect.gif]]

After upload is complete, the package object will show that the installer is correctly referred to:
[[Image:linuxJdkUploaded.gif]]

Upload  CTierInstallerZip package:

Using the same method, navigate to the CTierInstallerZip package object and upload the ControlTier installer package.

For a cygwin java package, this requires a reference installation of an already installed version of java on windows where a zip will be generated from the installed package and uploaded as a JavaZip package:

On a windows platform where [[Dependencies#Windows_2 | Java Installation ]] has already occurred, typically this will result in the jdk residing underneath the &amp;quot;Program Files&amp;quot; or the %CTIER_ROOT%\pkgs folder for the desired JDK version:

[[Image:windowsNavigateToJavaHome.gif]]

Then, right click the folder in preparation to zip up the folder, and select &amp;quot;Add to Archive&amp;quot;

[[Image:windowsAddToArchiveFolder.gif]]

Then, ensure &amp;quot;zip&amp;quot; Archive Format is selected as well as &amp;quot;Add and Replace Files&amp;quot; for Update Mode and click OK

[[Image:windowsArchiveAsZip.gif]]

At this point, a java zip package has been created which, via the local windows browser, can then be uploaded by navigating to the JavaZip package and uploading similarly to the JavaBin package.

==Run via CTL==

The {{Elements Type Reference|ClientInstaller|ClientInstaller}} {{Elements Type Command Reference|ClientInstaller|Deploy}} command takes the following arguments:

* -targetHostname  &amp;lt;''fullyQualifiedHostname''&amp;gt; 
** required, identifies the remote hostname to install the framework and bootstrap the project onto
* [ -targetUser &amp;lt;''remoteUsername''&amp;gt; ]
** optional, overrides the configured or default local username
* [ -cygwinClient &amp;lt;true|false&amp;gt; ]
** optional, overrides the default which assumes a unix based client

In this case we select a linux host:  &amp;quot;centos45.local&amp;quot; as the '''targetHostname''', which is a required parameter.    The '''targetUser''' is not specified as it is configured to be the &amp;quot;ctier&amp;quot; user as shown in the ProjectXML's ClientInstallerTargetUser setting object.

&lt;pre&gt;
charles-scotts-macbook-pro-15:objects demo$ ctl -p ModuleDev -t ClientInstaller -r linux -c Deploy -- -targetHostname centos45.local
tart: &quot;deploy a new controltier client&quot; commands: configureClient
begin workflow command (1/1) -&gt; &quot;configureClient -targetHostname centos45.local&quot; ...
Connecting to centos45.local:22
cmd : uname
Linux
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/ModuleDev/publish/modules/CTierInstallerZip-head.jar
To: /Users/demo/ctier/ctl/var/tmp/downloads/ModuleDev/CTierInstallerZip-head.jar
Created dir: /Users/demo/ctier/ctl/projects/ModuleDev/modules/CTierInstallerZip
Expanding: /Users/demo/ctier/ctl/var/tmp/downloads/ModuleDev/CTierInstallerZip-head.jar into /Users/demo/ctier/ctl/projects/ModuleDev/modules/CTierInstallerZip
Attempting to get zip-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/ModuleDev/publish/modules/zip-head.jar
To: /Users/demo/ctier/ctl/var/tmp/downloads/ModuleDev/zip-head.jar
Created dir: /Users/demo/ctier/ctl/projects/ModuleDev/modules/zip
Expanding: /Users/demo/ctier/ctl/var/tmp/downloads/ModuleDev/zip-head.jar into /Users/demo/ctier/ctl/projects/ModuleDev/modules/zip
Attempting to get Package-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/ModuleDev/publish/modules/Package-head.jar
To: /Users/demo/ctier/ctl/var/tmp/downloads/ModuleDev/Package-head.jar
Created dir: /Users/demo/ctier/ctl/projects/ModuleDev/modules/Package
Expanding: /Users/demo/ctier/ctl/var/tmp/downloads/ModuleDev/Package-head.jar into /Users/demo/ctier/ctl/projects/ModuleDev/modules/Package
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/pkgs/ModuleDev/CTierInstallerZip/zips/ControlTier-3.4.3.zip
To: /Users/demo/ctier/ctl/var/ControlTier-3.4.3.zip
demo/ctier/ctl/var/ControlTier-3.4.3.zip&quot; todir=&quot;ctier@centos45.local:ctier/pkgs&quot; keyfile=&quot;/Users/demo/.ssh/id_dsa&quot;/
Connecting to centos45.local:22
cmd : mkdir -p ctier/pkgs
Connecting to centos45.local:22
Sending: ControlTier-3.4.3.zip : 215917025
................................................. 50%
File transfer time: 90.51 Average Rate: 2,385,586.24 B/s
done.
DEBUG: sshexec trust=&quot;true&quot; host=&quot;centos45.local&quot; username=&quot;ctier&quot; keyfile=&quot;/Users/demo/.ssh/id_dsa&quot; command=&quot;cd ctier/pkgs &amp;&amp; unzip ControlTier-3.4.3.zip&quot;/
Connecting to centos45.local:22
cmd : cd ctier/pkgs &amp;&amp; unzip -r ControlTier-3.4.3.zip
Archive:  ControlTier-3.4.3.zip
   creating: ControlTier-3.4.3/
  inflating: ControlTier-3.4.3/README.txt  

   creating: ControlTier-3.4.3/web/
  inflating: ControlTier-3.4.3/web/index.html.template  

 extracting: ControlTier-3.4.3/web/project-logo.gif  

  inflating: ControlTier-3.4.3/web/favicon.ico  

  inflating: ControlTier-3.4.3/web/context.xml  

   creating: ControlTier-3.4.3/lib/
  inflating: ControlTier-3.4.3/lib/commons-cli.jar  

  inflating: ControlTier-3.4.3/lib/installer.jar  

  inflating: ControlTier-3.4.3/install.sh  

  inflating: ControlTier-3.4.3/install.bat  

   creating: ControlTier-3.4.3/etc/
  inflating: ControlTier-3.4.3/etc/installer.properties  

   creating: ControlTier-3.4.3/etc/templates/
  inflating: ControlTier-3.4.3/etc/templates/tomcat-startup.bat.template  

   creating: ControlTier-3.4.3/etc/templates/jackrabbit/
  inflating: ControlTier-3.4.3/etc/templates/jackrabbit/config.xml.template  

  inflating: ControlTier-3.4.3/etc/templates/jackrabbit/repository.xml.template  

  inflating: ControlTier-3.4.3/etc/templates/jackrabbit/bootstrap.properties.template  

  inflating: ControlTier-3.4.3/etc/templates/jackrabbit/web.xml.template  

  inflating: ControlTier-3.4.3/etc/templates/jackrabbit/context.xml.template  

  inflating: ControlTier-3.4.3/etc/templates/tomcat-startup.sh.template  

  inflating: ControlTier-3.4.3/etc/templates/server.xml.template  

   creating: ControlTier-3.4.3/etc/templates/jetty6/
  inflating: ControlTier-3.4.3/etc/templates/jetty6/jetty-ctier-service.conf.template  

  inflating: ControlTier-3.4.3/etc/templates/jetty6/ctier-stop.sh  

  inflating: ControlTier-3.4.3/etc/templates/jetty6/start.bat.template  

  inflating: ControlTier-3.4.3/etc/templates/jetty6/realm.properties.template  

  inflating: ControlTier-3.4.3/etc/templates/jetty6/ctier-start.sh  

  inflating: ControlTier-3.4.3/etc/templates/jetty6/jetty.xml.template  

  inflating: ControlTier-3.4.3/etc/templates/jetty6/itnav-context.xml.template  

   creating: ControlTier-3.4.3/etc/xml/
  inflating: ControlTier-3.4.3/etc/xml/tomcat-users.xsl  

  inflating: ControlTier-3.4.3/etc/xml/install.xml  

  inflating: ControlTier-3.4.3/etc/xml/web.xsl  

  inflating: ControlTier-3.4.3/etc/xml/tomcat-users.xml  

  inflating: ControlTier-3.4.3/etc/xml/web-app_2_3.dtd  

  inflating: ControlTier-3.4.3/default.properties  

   creating: ControlTier-3.4.3/pkgs/
  inflating: ControlTier-3.4.3/pkgs/coreutils-extension-0.9.jar  

  inflating: ControlTier-3.4.3/pkgs/jobcenter-1.4.3.zip  

   creating: ControlTier-3.4.3/pkgs/ctl-1.4.3/
   creating: ControlTier-3.4.3/pkgs/ctl-1.4.3/lib/
   creating: ControlTier-3.4.3/pkgs/ctl-1.4.3/lib/ant/
   creating: ControlTier-3.4.3/pkgs/ctl-1.4.3/lib/ant/controllers/
   creating: ControlTier-3.4.3/pkgs/ctl-1.4.3/lib/ant/controllers/ctl/
  inflating: ControlTier-3.4.3/pkgs/ctl-1.4.3/lib/ant/controllers/ctl/projectsetupCmd.xml  

  inflating: ControlTier-3.4.3/pkgs/ctl-1.4.3/lib/ant/controllers/ctl/command-controller.xml  

  inflating: ControlTier-3.4.3/pkgs/ctl-1.4.3/lib/ant/controllers/ctl/depotunsetupCmd.xml  

  inflating: ControlTier-3.4.3/pkgs/ctl-1.4.3/lib/ant/controllers/ctl/adminCmd.xml  

   creating: ControlTier-3.4.3/pkgs/ctl-1.4.3/lib/ant/ctl/
  inflating: ControlTier-3.4.3/pkgs/ctl-1.4.3/lib/ant/ctl/nodedispatch.xml  

   creating: ControlTier-3.4.3/pkgs/ctl-1.4.3/lib/templates/
   creating: ControlTier-3.4.3/pkgs/ctl-1.4.3/lib/templates/ant/
  inflating: ControlTier-3.4.3/pkgs/ctl-1.4.3/lib/templates/ant/WorkflowCommand.template.xml  

  inflating: ControlTier-3.4.3/pkgs/ctl-1.4.3/lib/templates/ant/command.xml  

  inflating: ControlTier-3.4.3/pkgs/ctl-1.4.3/lib/templates/ant/BatCommand.template.xml  

  inflating: ControlTier-3.4.3/pkgs/ctl-1.4.3/lib/templates/ant/MANIFEST.MF.template  

  inflating: ControlTier-3.4.3/pkgs/ctl-1.4.3/lib/templates/ant/commands.properties.template  

  inflating: ControlTier-3.4.3/pkgs/ctl-1.4.3/lib/templates/ant/ShellCommand.template.xml  

  inflating: ControlTier-3.4.3/pkgs/ctl-1.4.3/lib/templates/ant/module.properties.template  

  inflating: ControlTier-3.4.3/pkgs/ctl-1.4.3/lib/templates/ant/AntCommand.template.xml  

  inflating: ControlTier-3.4.3/pkgs/ctl-1.4.3/lib/templates/ant/DaemonCommand.template.xml  

   creating: ControlTier-3.4.3/pkgs/ctl-1.4.3/lib/templates/xsl/
  inflating: ControlTier-3.4.3/pkgs/ctl-1.4.3/lib/templates/xsl/ctl-properties.xsl  

  inflating: ControlTier-3.4.3/pkgs/ctl-1.4.3/lib/templates/xsl/ad-entity-properties.xsl  

  inflating: ControlTier-3.4.3/pkgs/ctl-1.4.3/lib/templates/xsl/ad-deployments-properties.xsl  

   creating: ControlTier-3.4.3/pkgs/ctl-1.4.3/lib/templates/etc/
  inflating: ControlTier-3.4.3/pkgs/ctl-1.4.3/lib/templates/etc/framework.properties.template  

  inflating: ControlTier-3.4.3/pkgs/ctl-1.4.3/lib/templates/etc/console-log4j.properties.template  

  inflating: ControlTier-3.4.3/pkgs/ctl-1.4.3/lib/templates/etc/project.properties.template  

  inflating: ControlTier-3.4.3/pkgs/ctl-1.4.3/lib/templates/etc/ctl-defaults.properties 
Warning: Managed-Entity/lib/macrodefs.xml modified in the future.

Warning: Managed-Entity/lib/msgs.properties modified in the future.

Warning: Managed-Entity/module.properties modified in the future.

Warning: Managed-Entity/module.rdf modified in the future.

Warning: Managed-Entity/templates/document-changed.html modified in the future.

Warning: Managed-Entity/templates/notice.html modified in the future.

Warning: Managed-Entity/type.properties modified in the future.

Warning: Managed-Entity/type.rdf modified in the future.

Warning: Managed-Entity/type.xml modified in the future.

Warning: Managed-Entity/templates modified in the future.

Registering ctier.centos45.local[Node] with ctl.base: /home/ctier/ctier/ctl, ctl.home: /home/ctier/ctier/pkgs/ctl-1.4.3 ...

Registered node &quot;ctier.centos45.local&quot; with Workbench.
end workflow command (1/1) -&gt; &quot;configureClient -targetHostname centos45.local&quot;
[command.timer.ModuleDev.ClientInstaller.Deploy: 4:26.140 sec]
Workflow completed. execution time: 4:26.140 sec
&lt;/pre&gt;

After a successful Install of the client, view the Node List, to confirm the new ctier.centos45.local Node object:

[[Image:ctierNodeObjectInstalled.gif]]

In this case the Node object is called:  &amp;quot;'''ctier'''.centos45.local&amp;quot; rather than just &amp;quot;centos45.local&amp;quot;.   This is a convention that this module implements where the resource name representing this remote ctier client will contain the username in the resource name in order to differentiate other clients that might be installed on the same machine.   The ControlTier convention implemented in this module is as follows:

* if local user and remote user are the same, the Node object is just the hostname (e.g. centos45.local)
* if local user and remote user are different, the Node object is named with the &amp;lt;''username''&amp;gt;. prefix (e.g. ctier.centos45.local)
* in all cases, the Node object will contain the correct ctl_username to ensure ssh interaction occurs correctly between the server and client nodes.

==Configure Jobcenter==


create the jobs directory if it does not already exist and make it your working directory (as before, the moduleDev directory will likely differ from yours):

&lt;pre&gt;
[charles-scotts-macbook-pro-15:moduleDev]$ mkdir $CTIER_ROOT/src/moduleDev/jobs 
[charles-scotts-macbook-pro-15:moduleDev]$ cd $CTIER_ROOT/src/moduleDev/jobs 
&lt;/pre&gt;

Using your favorite editor, create and edit a jobxml file called:  clientInstaller.xml 

&lt;pre&gt;
[charles-scotts-macbook-pro-15:jobs]$ vi clientInstaller.xml 
&lt;/pre&gt;


And create the following jobxml, make note that your project will likely differ from ModuleDev:

&lt;pre&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;joblist&gt;
        &lt;job&gt;
                &lt;name&gt;controlTierLinux.Install&lt;/name&gt;
                &lt;group&gt;Operations/ModuleDev&lt;/group&gt;
                &lt;description&gt;Establish a new controltier linux client&lt;/description&gt;
                &lt;additional&gt;&lt;/additional&gt;
                &lt;context&gt;
                        &lt;depot&gt;ModuleDev&lt;/depot&gt;
                        &lt;type&gt;ClientInstaller&lt;/type&gt;
                        &lt;object&gt;linux&lt;/object&gt;
                        &lt;command&gt;Deploy&lt;/command&gt;
                &lt;/context&gt;
        &lt;/job&gt;
       &lt;job&gt;
                &lt;name&gt;controlTierCygwin.Install&lt;/name&gt;
                &lt;group&gt;Operations/ModuleDev&lt;/group&gt;
                &lt;description&gt;Establish a new controltier windows (cygwin) client&lt;/description&gt;
                &lt;additional&gt;&lt;/additional&gt;
                &lt;context&gt;
                        &lt;depot&gt;ModuleDev&lt;/depot&gt;
                        &lt;type&gt;ClientInstaller&lt;/type&gt;
                        &lt;object&gt;cygwin&lt;/object&gt;
                        &lt;command&gt;Deploy&lt;/command&gt;
                &lt;/context&gt;
        &lt;/job&gt;
&lt;/joblist&gt;
&lt;/pre&gt;

Load the jobs into jobcenter using ProjectBuilder:

&lt;pre&gt;
charles-scotts-macbook-pro-15:jobs demo$ ctl -p ModuleDev -t ProjectBuilder -r elements -c load-jobs -- -file clientInstaller.xml 
Succeeded creating/updating 2 Jobs:
        1: controlTierLinux.Install [1] &lt;/jobcenter/scheduledExecution/show/1&gt;
        2: controlTierCygwin.Install [2] &lt;/jobcenter/scheduledExecution/show/2&gt;
&lt;/pre&gt;

==Run via Jobcenter==

Login to [http://localhost:8080/jobcenter/ Jobcenter] and select either the linux or cygwin job:

[[Image:clientInstallerJobcenterJobs.gif]]

in this case we select the linux job:

[[Image:linuxInstallerJobcenterJob.gif]]

then select &amp;quot;Choose Options and Run Job…&amp;quot;:

[[Image:linuxInstallerJobcenterJobChooseOptions.gif]]

we enter &amp;quot;centos45.local&amp;quot; as the targetHostname
and a different targetUser this time, &amp;quot;demo2&amp;quot;, overriding the default &amp;quot;ctier&amp;quot; user.

Then click Run

Watching the job run

[[Image:linuxInstallerJobcenterJobFollow.gif]]

we see that the new Node object was registered.</text>
    </revision>
  </page>
  <page>
    <title>BSF command</title>
    <id>87</id>
    <revision>
      <id>16463</id>
      <timestamp>2012-02-22T12:27:43Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Undo revision 15463 by [[Special:Contributions/Sitamoyer|Sitamoyer]] ([[User talk:Sitamoyer|talk]]) Removed SPAM bot edit</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Defined Commands&lt;/categorytree&gt;
This [[Module Development Guide]] page describes how to define a command using the &quot;&lt;code&gt;BsfCommand&lt;/code&gt;&quot; [[Type-v10.xml#command|command-type]]. 

This command type is useful if you want to use one of the [http://jakarta.apache.org/bsf/ Bean Scripting Framework] languages to implement your procedure (e.g., using jython, jruby, groovy, bsh, etc).

==Create or choose a type==

You can add the command to an existing type definition or you can create a new type. To create a new type run the ProjectBuilder &lt;code&gt;create-type&lt;/code&gt; and follow the prompts:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ ctl -m ProjectBuilder -c create-type -- -type bsfcommands
&lt;/syntaxhighlight&gt;

The create-type command will generate a [[type.xml]] file where you can define your command.

Alternatively, you can use the [[Graphical type editor]] to create a new type graphically.

==Edit type.xml==

If you are using ProjectBuilder commands to define the type, it will have generated a type.xml file inside the module's source directory. Commands are defined using the &quot;command&quot; element, specifying the command-type as &quot;BsfCommand&quot;. Use the &lt;code&gt;script&lt;/code&gt; tag as a nested element to the command tag specifying the BSF language inside the script tag's &lt;code&gt;language&lt;/code&gt; attribute. The BSF script code resides in the text area of the script tag.
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
      &lt;command name=&quot;&lt;name&gt;&quot; description=&quot;&lt;description&gt;.&quot; 
              command-type=&quot;BsfCommand&quot; is-static=&quot;true&quot;&gt;
        &lt;script language=&quot;&lt;language&gt;&quot;&gt;&lt;![CDATA[
              script statements ...
	]]&gt;&lt;/script&gt;
        &lt;opts&gt;
        &lt;/opts&gt;
      &lt;/command&gt;
&lt;/syntaxhighlight&gt;
     
The ControlTier client distribution includes BSF dependencies supporting: jruby, jython, and groovy.

Here's an example defining a command called &quot;hello-ruby&quot; implemented in the ruby language:

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
      &lt;command name=&quot;hello-ruby&quot; description=&quot;ruby BSF command.&quot; 
              command-type=&quot;BsfCommand&quot; is-static=&quot;true&quot;&gt;
        &lt;script language=&quot;ruby&quot;&gt;&lt;![CDATA[
           print 'ruby says ', $project.getProperty('opts.message'), &quot;\n&quot;
	]]&gt;&lt;/script&gt;
        &lt;opts&gt;
          &lt;opt parameter=&quot;message&quot; description=&quot;option name&quot; required=&quot;false&quot;
	       property=&quot;opts.message&quot; type=&quot;string&quot; default=&quot;Hello&quot;/&gt;
        &lt;/opts&gt;
      &lt;/command&gt;
&lt;/syntaxhighlight&gt;
     
... and here another command called &quot;hello-groovy&quot; implemented with groovy:

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
      &lt;command name=&quot;hello-groovy&quot; description=&quot;groovy BSF command.&quot; 
              command-type=&quot;BsfCommand&quot; is-static=&quot;true&quot;&gt;
        &lt;script language=&quot;groovy&quot;&gt;&lt;![CDATA[
           println &quot;groovy says ${project.properties['opts.message']} \n&quot;
	]]&gt;&lt;/script&gt;
        &lt;opts&gt;
          &lt;opt parameter=&quot;message&quot; description=&quot;option name&quot; required=&quot;false&quot;
	       property=&quot;opts.message&quot; type=&quot;string&quot; default=&quot;Hello&quot;/&gt;
        &lt;/opts&gt;
      &lt;/command&gt;
&lt;/syntaxhighlight&gt;

==Build the type==

Use the &quot;build-type&quot; command to generate the command files.
&lt;pre&gt;
$ ctl -m ProjectBuilder -c build-type -- -type bsfcommands -upload -deploy
&lt;/pre&gt;

The -upload and -deploy flag cause the generated type to be uploaded to Workbench and then deployed to the local client.

==Run the command==

The bsfcommands type is now deployed and the new commands can be run:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ ctl -m bsfcommands -c hello-ruby
ruby says Hello
&lt;/syntaxhighlight&gt;

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ ctl -m bsfcommands -c hello-groovy
groovy says Hello
&lt;/syntaxhighlight&gt;
&lt;noinclude&gt;{{Manual/navbox}}&lt;/noinclude&gt;

[[Category:Defined Commands]]</text>
    </revision>
  </page>
  <page>
    <title>Backing up ControlTier</title>
    <id>1213</id>
    <revision>
      <id>14097</id>
      <timestamp>2010-11-10T15:35:29Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;ctl-depot&quot; to &quot;ctl-project&quot;</comment>
      <text xml:space="preserve">&lt;noinclude&gt;&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Backups&lt;/categorytree&gt;&lt;/noinclude&gt;
There are a number of artifacts associated with an operational ControlTier installation that should be considered candidates for backup via one mechanism or another depending on how comprehensively you wish to safeguard the data and how long you're prepared to take to restore the system in the event of data loss or corruption.

This page is structured to identify each artifact in the context of the ControlTier component that creates or maintains it and presents suggested means for safeguarding each one.

Most of these artifacts are dynamically generated sets of files of one sort or the other which are the product of normal operation and cannot be re-created from any other source. Other artifacts are intermediate forms of data that can be re-created from source, but are still candidates for backup in order to facilitate a quicker or more convenient recovery. This document identifies the category to which each artifact belongs.

Note that this documentation assumes that ControlTier has been installed in an out-of-the-box configuration based on the standard [[self-contained directory convention]]. Of course, the artifacts will also exist in non-standard installations, only their locations may vary.

==Client==
The simplest way to safeguard a ControlTier client installation is to backup everything under $CTIER_ROOT (%CTIER_ROOT%) and (on Unix/Linux systems) the ControlTier profile stored in the installation user's home directory ($HOME/.ctierrc):

&lt;pre&gt;
[user1@centos52 ~]$ ls $HOME/.ctierrc
/home/user1/.ctierrc
[user1@centos52 ~]$ ls $CTIER_ROOT
ctl  pkgs
&lt;/pre&gt;

The only proviso for this approach is to make sure that the client is idle when the backup occurs.

In the event of losing the entire client installation (e.g. disk failure) it will be possible to restore the client backup to a given point in time, and then bring it up to date against the server using [[Ctl-depot]].

Note that certain dynamically created files (e.g. log files) between the most recent backup and the point of failure will be lost though this will not affect the smooth running of the system.

More critical is the loss of framework configuration ($CTIER_ROOT/etc) and depot changes ($CTIER_ROOT/projects). This may result in the need to troubleshoot in order to re-synchronize with the ControlTier server.

==Server==
===Full Backup===
The simplest way to safeguard a ControlTier server installation is to backup everything under $CTIER_ROOT (%CTIER_ROOT%) and (on Unix/Linux systems) the ControlTier profile stored in the installation user's home directory ($HOME/.ctierrc):

&lt;pre&gt;
[anthony@centos52 ~]$ ls $HOME/.ctierrc
/home/anthony/.ctierrc
[anthony@centos52 ~]$ ls $CTIER_ROOT
bin  ctl  examples  jackrabbit  jobcenter  pkgs  reportcenter  src  workbench
&lt;/pre&gt;

The only proviso for this approach is to make sure that the server is idle when the backup occurs. Other than that, it is reasonable to execute a file based backup beneath a running ControlTier server.

In the event of losing the entire server installation (e.g. disk failure) it will be possible to restore the backup to a given point in time, and then re-synchronize the clients against the restored server using [[Ctl-depot]].

Note that certain dynamically created artifacts (e.g. log files, ReportCenter database entries, dynamically created objects in Workbench) between the most recent backup and the point of failure will be lost resulting in a gap in the state of the system that will probably have operational consequences.

===RDF database backup (Workbench data only)===

Under the covers the Workbench model data is stored in a set of RDF XML files using the [http://jena.sourceforge.net|Jena Semantic Web Framework]:

&lt;pre&gt;
[anthony@centos52 workbench]$ ls $CTIER_ROOT/workbench
rdfdata
[anthony@centos52 workbench]$ ls $CTIER_ROOT/workbench/rdfdata
Arch_UModules_Udemo         Arch_UTypes_Udemo          Map_Udemo             Objects_Udemo         Workbench
Arch_UModules_Udevelopment  Arch_UTypes_Udevelopment   Map_Udevelopment      Objects_Udevelopment  Xforms_Udemo
Arch_UObjects_Udemo         Arch_UXforms_Udemo         Modules_Udemo         Types_Udemo           Xforms_Udevelopment
Arch_UObjects_Udevelopment  Arch_UXforms_Udevelopment  Modules_Udevelopment  Types_Udevelopment
&lt;/pre&gt;

There is one set of files per project, with each set representing the current state of the given model. Even if you do use [[ProjectBuilder]] to manage modules and static objects as XML source, there is inevitably a set of dynamic changes to the project over time:

* Module changes made through the Workbench UI
* Manually created and modified objects through the Workbench UI
* Dynamincally created objects (e.g. package objects created by [[Builder]]'s repoImport command and other means

The last category is probably the key reason why you might want to backup the RDF data for convenient recovery as opposed to attempting to partially recreating the project from source. The Workbench model data is at the heart of ControlTier operations and any loss or corruption of these files causes a failure of the installation as a whole. There have been cases where a simple full file system has caused irretrievable corruption of the files requiring restoration from backup.

With this in mind, here is a simple way to use the standard [[ZipBuilder]] Elements module included with the ControlTier distribution to schedule a regular backup of these files:

==== 1. Use either [[Workbench]] or [[ProjectBuilder]] to create a [[ZipBuilder]] object with the following attributes: ====
&lt;pre&gt;
[anthony@centos52 tmp]$ cat workbenchRdf.xml 
&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt;

&amp;lt;!DOCTYPE project PUBLIC &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; &quot;project.dtd&quot;&amp;gt;

&amp;lt;project&amp;gt;
        &amp;lt;deployment type=&quot;ZipBuilder&quot; name=&quot;workbenchRdf&quot; basedir=&quot;${env.CTIER_ROOT}/workbench/rdfdata&quot; installRoot=&quot;/tmp&quot; description=&quot;Workbench RDF data file Zip file backup builder&quot; startuprank=&quot;1&quot;&amp;gt;
                &amp;lt;referrers replace=&quot;false&quot;&amp;gt;
                        &amp;lt;resource type=&quot;Node&quot; name=&quot;localhost&quot;/&amp;gt;
                &amp;lt;/referrers&amp;gt;
        &amp;lt;/deployment&amp;gt;
&amp;lt;/project&amp;gt;
[anthony@centos52 tmp]$ ctl -p development -t ProjectBuilder -r elements -c load-resources -- -filename workbenchRdf.xml 
Loading &quot;/home/anthony/tmp/workbenchRdf.xml&quot; ...
1 file(s) have been successfully validated.
Processing /home/anthony/tmp/workbenchRdf.xml to /home/anthony/ctier/ctl/var/tmp/projectxml-1785219448.xml
Loading stylesheet /home/anthony/ctier/ctl/projects/development/modules/ProjectBuilder/lib/load-resources/projectxml/project.xsl
Mapping XML to properties ...
Collecting object attributes ...
Batching object attribute updates ...
Batching resource and referrer updates ...
Executing batch update ...
[anthony@centos52 tmp]$ ctl-project -p development -a install 
.
.
.
&quot;Install&quot; command running for resource: (ZipBuilder) workbenchRdf
&lt;/pre&gt;
You may wish use an alternate directory to &quot;/tmp&quot; for the temporary storage of the Zip backup file. Change the reference to &quot;localhost&quot; to the &quot;[[ZIP_installer#Specifying_and_overriding_defaults|server.jetty.hostname]]&quot; of your installation to ensure the object is deployed to your ControlTier server.

==== 2. With the new object deployed, you can run the backup anytime as follows: ====
&lt;pre&gt;
[anthony@centos52 tmp]$ ctl -p development -t ZipBuilder -r workbenchRdf -c Build 
Start: &quot;run the build cycle&quot; commands: runBuildScript,repoImport
begin workflow command (1/2) -&gt; &quot;runBuildScript -buildstamp 200907231052&quot; ...
updating: Xforms_Udevelopment (deflated 62%)
updating: Map_Udevelopment (deflated 75%)
updating: Arch_UXforms_Udemo (deflated 61%)
updating: Arch_UModules_Udemo (deflated 94%)
updating: Modules_Udemo (deflated 91%)
updating: Objects_Udemo (deflated 82%)
updating: Modules_Udevelopment (deflated 91%)
updating: Arch_UObjects_Udevelopment (deflated 94%)
updating: Map_Udemo (deflated 74%)
updating: Types_Udemo (deflated 92%)
updating: Objects_Udevelopment (deflated 88%)
updating: Arch_UModules_Udevelopment (deflated 94%)
updating: Xforms_Udemo (deflated 61%)
updating: Arch_UTypes_Udevelopment (deflated 94%)
updating: Arch_UXforms_Udevelopment (deflated 62%)
updating: Arch_UTypes_Udemo (deflated 94%)
updating: Types_Udevelopment (deflated 92%)
updating: Workbench (deflated 77%)
updating: Arch_UObjects_Udemo (deflated 94%)
[command.timer.ZipBuilder.runBuildScript: 0.787 sec]
end workflow command (1/2) -&gt; &quot;runBuildScript -buildstamp 200907231052&quot;
begin workflow command (2/2) -&gt; &quot;repoImport -buildstamp 200907231052&quot; ...
Created dir: /home/anthony/ctier/ctl/projects/development/resources/ZipBuilder/workbenchRdf/tmp/Builder-repoImport-20090723105243
Condition: isProcessableWithoutExistingPropfile result: true
opts.propfile set to: autogenerated-builder.properties
Creating new property file: /home/anthony/ctier/ctl/projects/development/resources/ZipBuilder/workbenchRdf/tmp/Builder-repoImport-20090723105243/import-count.properties
processing files in directory: '/tmp' matching: '(workbenchRdf)(?:-200907231052)?\.(zip)$' ...
processing matched file: workbenchRdf.zip
Deleting: /tmp/autogenerated-builder.properties
Auto-generated builder properties file created: /tmp/autogenerated-builder.properties...
Copying 1 file to /tmp
Updating property file: /home/anthony/ctier/ctl/projects/development/resources/ZipBuilder/workbenchRdf/tmp/Builder-repoImport-20090723105243/import-count.properties
Copying 1 file to /home/anthony/ctier/ctl/projects/development/modules/Builder/commands
Getting: http://localhost:8080/jackrabbit/repository/controltier/projects/development/publish/modules/zip-head.jar
To: /home/anthony/ctier/ctl/var/tmp/downloads/development/zip-head.jar
Not modified - so not downloaded
zip up to date
Attempting to get Package-head.jar ...
Getting: http://localhost:8080/jackrabbit/repository/controltier/projects/development/publish/modules/Package-head.jar
To: /home/anthony/ctier/ctl/var/tmp/downloads/development/Package-head.jar
Not modified - so not downloaded
Package up to date
uploading file: /tmp/workbenchRdf.zip to: http://localhost:8080/jackrabbit/repository/controltier/projects/pkgs/development/zip/zips/workbenchRdf-200907231052.zip...
Uploading to: http://localhost:8080/jackrabbit/repository/controltier/projects/pkgs/development/zip/zips/workbenchRdf-200907231052.zip
Uploading: workbenchRdf.zip
Puted 1 file to http://localhost:8080/jackrabbit/repository/controltier/projects/pkgs/development/zip/zips/workbenchRdf-200907231052.zip
Creating new property file: /home/anthony/ctier/ctl/projects/development/resources/ZipBuilder/workbenchRdf/tmp/Builder-repoImport-20090723105243/import-list.properties
Deleting: /home/anthony/ctier/ctl/projects/development/modules/Builder/commands/entity69810085.properties
Current count: 1
Batch request performed successfully.
Current count: 1
[command.timer.Builder.repoImport: 10.504 sec]
end workflow command (2/2) -&gt; &quot;repoImport -buildstamp 200907231052&quot;
[command.timer.development.ZipBuilder.Build: 13.860 sec]
Workflow completed. execution time: 13.860 sec
&lt;/pre&gt;

==== 3. Use [[Jobcenter]] or [[ProjectBuilder]] to schedule a job to run the backup regularly as follows: ====
&lt;pre&gt;
[anthony@centos52 jobs]$ cat workbenchRdf.xml
&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;joblist&amp;gt;
        &amp;lt;job&amp;gt;
                &amp;lt;name&amp;gt;workbenchRdf.Build&amp;lt;/name&amp;gt;
                &amp;lt;description&amp;gt;Daily backup of the Workbench RDF files&amp;lt;/description&amp;gt;
                &amp;lt;additional&amp;gt;If you need to restore the files, you'll find Zip archives on the WebDAV (http://centos52:8080/jackrabbit/repository/controltier/projects/pkgs/development/zip/zips)&amp;lt;/additional&amp;gt; 
                &amp;lt;context&amp;gt;
                        &amp;lt;depot&amp;gt;development&amp;lt;/depot&amp;gt;
                        &amp;lt;type&amp;gt;ZipBuilder&amp;lt;/type&amp;gt;
                        &amp;lt;object&amp;gt;workbenchRdf&amp;lt;/object&amp;gt;
                        &amp;lt;command&amp;gt;Build&amp;lt;/command&amp;gt;
                &amp;lt;/context&amp;gt;
                &amp;lt;schedule&amp;gt;
                        &amp;lt;time hour=&quot;00&quot; minute=&quot;00&quot;/&amp;gt;
                        &amp;lt;!-- weekday values * - all 1-5 - days mon-fri 1,2,3-5 - days mon,tue,wed-fri, etc.  --&amp;gt;
                        &amp;lt;weekday day=&quot;*&quot;/&amp;gt;
                        &amp;lt;!-- month values: * - all 1-10 - month jan-oct 1,2,3-5 - months jan,feb,mar-may, etc.  --&amp;gt;
                        &amp;lt;month month=&quot;*&quot;/&amp;gt;
                &amp;lt;/schedule&amp;gt;
        &amp;lt;/job&amp;gt;
&amp;lt;/joblist&amp;gt;
[anthony@centos52 jobs]$ ctl -p development -t ProjectBuilder -r elements -c load-jobs -- -file workbenchRdf.xml 
Succeeded creating/updating 1 Jobs:
        1: workbenchRdf.Build [2] &lt;/jobcenter/scheduledExecution/show/2&gt;
&lt;/pre&gt;


Once the backup has run for the first time you'll see the Zip file in the Workbench package list. In the event of needing to restore the RDF files its is very unlikely that Workbench will be usable, so you'll need to go directly to the WebDAV (e.g. http://centos52:8080/jackrabbit/repository/controltier/projects/pkgs/development/zip/zips) to locate the Zip files.

See also: [[Workbench_RDF/XML_file_maintenance|Workbench RDF XML file maintenance]]

==Project source code==
Assuming that you're using [[ProjectBuilder]] to maintain your projects, you will soon develop an source base (modules, objects and jobs) that is the canonical source of  the static component of your operational installation (i.e. the ControlTier model). e.g.:

&lt;pre&gt;
[anthony@centos52 ~]$ ls $CTIER_ROOT/src/elements
demo  doc  modules  objects  README
[anthony@centos52 ~]$ svn info $CTIER_ROOT/src/elements
Path: /home/anthony/ctier/src/elements
URL: https://moduleforge.svn.sourceforge.net/svnroot/moduleforge/controltier/branches/controltier-3-4-services/elements
Repository Root: https://moduleforge.svn.sourceforge.net/svnroot/moduleforge
Repository UUID: 3ed12e13-7237-0410-b9af-b7dc6c7a317f
Revision: 1628
Node Kind: directory
Schedule: normal
Last Changed Author: connary_scott
Last Changed Rev: 1620
Last Changed Date: 2009-07-07 10:44:27 -0700 (Tue, 07 Jul 2009)
&lt;/pre&gt;

Typically, this source base is committed to a source code management system (CVS, Subversion, Git, etc) and should be safeguarded using whatever backup policy you've adopted for repositories and working files in general.

In the event of losing the entire installation, it will be possible to apply the restored source to a fresh ControlTier installation to recreate at least the custom modules, static objects and job definitions that make up your operational environment.

{{Installation/navbox}}
[[Category:Backups]]</text>
    </revision>
  </page>
  <page>
    <title>Backup ControlTier</title>
    <id>1272</id>
    <redirect />
    <revision>
      <id>7409</id>
      <timestamp>2009-07-23T18:50:23Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <comment>moved [[Backup ControlTier]] to [[Backing up ControlTier]]:&amp;#32;use action form of verb</comment>
      <text xml:space="preserve">#REDIRECT [[Backing up ControlTier]]</text>
    </revision>
  </page>
  <page>
    <title>Base Type Guide</title>
    <id>1086</id>
    <revision>
      <id>9962</id>
      <timestamp>2009-12-11T01:58:47Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Types&lt;/categorytree&gt;

This guide focuses on the base layer of [[Core_Type_Guide#Base_Layer|core types]]. 

{{Type guide/base}}</text>
    </revision>
  </page>
  <page>
    <title>Basic Usage</title>
    <id>695</id>
    <redirect />
    <revision>
      <id>6634</id>
      <timestamp>2009-07-07T16:41:06Z</timestamp>
      <contributor>
        <username>Redirect fixer</username>
        <id>9</id>
      </contributor>
      <comment>[[Basic Use Guide]] has been moved, it is now a redirect to [[How to use ControlTier]]</comment>
      <text xml:space="preserve">#REDIRECT [[How to use ControlTier]]</text>
    </revision>
  </page>
  <page>
    <title>Basic Use Guide</title>
    <id>1167</id>
    <redirect />
    <revision>
      <id>6633</id>
      <timestamp>2009-07-07T16:41:05Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>[[Basic Use Guide]] moved to [[How to use ControlTier]]: better name</comment>
      <text xml:space="preserve">#REDIRECT [[How to use ControlTier]]</text>
    </revision>
  </page>
  <page>
    <title>Batch-operation Type Reference</title>
    <id>1859</id>
    <revision>
      <id>12353</id>
      <timestamp>2010-01-30T01:37:35Z</timestamp>
      <contributor>
        <username>Gschueler</username>
        <id>8</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Types&lt;/categorytree&gt;
=Description=

Defines a batch operation, for use inside a [[perform-batch-request Task Reference|perform-batch-request]] task.  

Note that the contents of a batch-operation type are the same as those inside a [[add-batch-operation Task Reference|add-batch-operation]] task.
    
=Attributes=

      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	    &lt;td&gt;name&lt;/td&gt;&lt;td&gt;Name of the operation: one of &quot;addResources,removeResources,setResources,createObject,updateObject,deleteObject&quot;
&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;
      
      
=Parameters specified as nested elements=

Depending on the operation used (defined by &quot;name&quot; attribute), different embedded types are appropriate.

== Resource ==

A &quot;Resource&quot; type is used for these operations: &quot;createObject&quot;,&quot;updateObject&quot;

;Setting
: [[Setting Type Reference]]
;Node
: [[Node Type Reference]]
;Package
: [[Package Type Reference]]
;Assembly
: [[Assembly Type Reference]]
;Deployment
: [[Deployment Type Reference]]

This embedded Resource will define the properties of the object being created or updated.

== Resource URI list ==

A set of properties defined with a &quot;propertiesparameter&quot; is used for these operations: &quot;addResources,removeResources,setResources,deleteObject&quot;

;propertiesparameter
: [[propertiesparameter Type Reference]]

This element simply embeds a list of &quot;prop&quot; elements:

;prop
: [[prop Type Reference]]

Each prop has a name and value.  The operation expects one prop with the name &quot;maprefUri&quot; defining the *parent* resource URI for the operation.  For the &quot;deleteObject&quot; operation this is the only necessary prop.

For the other operations, you must include a prop for each child resource being added/removed or set, using the following pattern of names:

&quot;resourceUri.X&quot; where X is a number. These URIs will be used in the batch operation.
    
=Examples=

Perform a request defined with embedded batch operations (see [[perform-batch-request Task Reference|perform-batch-request]]):

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;perform-batch-request resultProperty=&quot;result&quot; &gt;
    &lt;batch-operation name=&quot;addResources&quot;&gt;
        &lt;propertiesparameter&gt;
            &lt;prop name=&quot;maprefUri&quot; value=&quot;${parent.maprefUri}&quot;/&gt;
            &lt;prop name=&quot;resourceUri.0&quot; value=&quot;${child0.maprefUri}&quot;/&gt;
            &lt;prop name=&quot;resourceUri.1&quot; value=&quot;${child1.maprefUri}&quot;/&gt;
        &lt;/propertiesparameter&gt;
    &lt;/batch-operation&gt;
    &lt;batch-operation name=&quot;removeResources&quot;&gt;
        &lt;propertiesparameter&gt;
            &lt;prop name=&quot;maprefUri&quot; value=&quot;${child0.maprefUri}&quot;/&gt;
            &lt;prop name=&quot;resourceUri.0&quot; value=&quot;${grandchild0.maprefUri}&quot;/&gt;
        &lt;/propertiesparameter&gt;
    &lt;/batch-operation&gt;
&lt;/perform-batch-request&gt;
&lt;/syntaxhighlight&gt;

&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Resource model Ant Types]]</text>
    </revision>
  </page>
  <page>
    <title>Bin</title>
    <id>1652</id>
    <revision>
      <id>11187</id>
      <timestamp>2009-12-14T16:15:03Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>/* Querying */</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Package&lt;/categorytree&gt;
[[File:Icon-PackageObject.png]]
The [[bin]] type represents a self extracting shar package. 


==Reference==

{{Package/reference|bin}}

==Definition==
[[File:Core-type-model.png|thumb|Core type model]]

===Metadata===

The table below gives a brief description for each of the attributes of the package type. The ones with an asterisk are required during the deployment cycle.
{{Package/type/properties}}

===Project XML===
{{Package/projectxml |example|123|bin}}

===Querying===

{{Package/querying|example|123|bin}}

{{Manual/navbox}}
[[Category:Package]]</text>
    </revision>
  </page>
  <page>
    <title>Blogs</title>
    <id>340</id>
    <revision>
      <id>16391</id>
      <timestamp>2012-02-20T12:58:08Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Undo revision 15462 by [[Special:Contributions/Sitamoyer|Sitamoyer]] ([[User talk:Sitamoyer|talk]]) Reverted SPAM bot edits</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Community&lt;/categorytree&gt;
ControlTier project members maintain two blogs that you might want to add to your favorite reader. Content and feedback for either blog are always appreciated.

* [http://dev2ops.org dev2ops.org] is a blog that maintained by two of the ControlTier founders and is about the field of release management and automation in general. It's primary focus is on how software as a service and e-commerce companies deal with the problem of getting application releases from source code in development to running applications in production. This blog was created to provoke thought in this field and from time to time guest bloggers and expert interviews will be featured.

* [http://blog.controltier.com blog.controltier.com] is the official ControlTier blog. It's a home for release information, tips, news, and anything else ControlTier related.

[[Category:Community]]</text>
    </revision>
  </page>
  <page>
    <title>Boolean option</title>
    <id>98</id>
    <revision>
      <id>11531</id>
      <timestamp>2009-12-15T16:27:50Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>/* See also */</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Command Options&lt;/categorytree&gt;
This page describes how to use the &quot;option&quot; tag to define a boolean type option. A boolean type option is a named flag that does not accept an argument.

==Choose a command==
You can add the option to an existing command definition. To create a new type with an example command that takes an option run:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m ProjectBuilder -c create-type -- -type optioncommands
&lt;/syntaxhighlight&gt;

== Edit type.xml==

This example shows a defined command called &quot;date&quot; that prints out the date and optionally the time if the &quot;-time&quot; boolean flag is specified.
If the &quot;-time&quot; option is provided, the command will have the &quot;opts.time&quot; property set. The example code checks if &quot;opts.time&quot; is set and if so, defines the time date format to include hours and  minutes.
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
   &lt;command name=&quot;date&quot; description=&quot;print the date.&quot; 
               command-type=&quot;AntCommand&quot; is-static=&quot;true&quot;&gt;
        &lt;implementation&gt;
         &lt;if&gt;
            &lt;isset property=&quot;opts.time&quot;/&gt;
            &lt;then&gt;
              &lt;property name=&quot;dformat&quot; value=&quot;MM/dd/yyyy hh:mm&quot;/&gt;
            &lt;/then&gt;
            &lt;else&gt;
              &lt;property name=&quot;dformat&quot; value=&quot;MM/dd/yyyy&quot;/&gt;
            &lt;/else&gt;
         &lt;/if&gt;
         &lt;tstamp&gt;
             &lt;format property=&quot;DATE&quot; pattern=&quot;${dformat}&quot;/&gt;
         &lt;/tstamp&gt;
         &lt;echo message=&quot;${DATE}&quot;/&gt;
        &lt;/implementation&gt;
        &lt;!--
	  ** Define an option called &quot;-time&quot;.
	  ** The command line will be parsed and set the 
	  ** value to the property named opts.aflag
	  --&gt;
        &lt;opts&gt;
          &lt;opt parameter=&quot;time&quot; description=&quot;include the time&quot; required=&quot;false&quot;
	       property=&quot;opts.time&quot; type=&quot;boolean&quot; /&gt;
        &lt;/opts&gt;
      &lt;/command&gt;      
&lt;/syntaxhighlight&gt;

Note:
* Boolean option types should also have the &quot;required&quot; attribute be set to false.

==Build the type==
Use the &quot;build-type&quot; command to generate the command files.
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
 ctl -m ProjectBuilder -c build-type -- -type optioncommands -upload -deploy
&lt;/syntaxhighlight&gt;
The -upload and -deploy flag cause the generated type to be uploaded to Workbench and then deployed to the local client.

==Run the command==

Specifying the &quot;-time&quot; option will include the time in the date:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m optioncommands -c date -- -time
12/22/2008 01:26
&lt;/syntaxhighlight&gt;

Without the required argument the command just prints the date:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m optioncommands -c date 
12/22/2008
&lt;/syntaxhighlight&gt;

Note:
* Remember that user specified options are typed after the &quot;--&quot; (double dash) characters.



&lt;noinclude&gt;{{Manual/navbox}}&lt;/noinclude&gt;

[[Category:Command Options]]</text>
    </revision>
  </page>
  <page>
    <title>Bugs</title>
    <id>1459</id>
    <revision>
      <id>16741</id>
      <timestamp>2012-05-16T03:49:55Z</timestamp>
      <contributor>
        <username>Ella19</username>
        <id>1789</id>
      </contributor>
      <minor/>
      <comment>fdfasdf</comment>
      <text xml:space="preserve">&lt;noinclude&gt;&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Development&lt;/categorytree&gt;&lt;/noinclude&gt;
ControlTier source code is [http://www.cavite-housing.com/ cavite house and lot] hosted on Sourceforge.net, and we use the Sourceforge bug tracker to track all Feature Requests and Bugs.

Please see:

* [http://sourceforge.net/tracker/?group_id=151079&amp;atid=779847 ControlTier Bug Reports] &amp;mdash; Issues preventing correct operation
* [http://sourceforge.net/tracker/?group_id=151079&amp;atid=779850 ControlTier Feature Requests] &amp;mdash; Feature enhancements

&lt;noinclude&gt;{{CtDevelopment/navbox}}
[[Category:Development]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Build</title>
    <id>1892</id>
    <revision>
      <id>12719</id>
      <timestamp>2010-05-17T00:03:47Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <comment>disambiguation page</comment>
      <text xml:space="preserve">You may be looking for:
* [[Building ControlTier]]
* The [[Builder]] type</text>
    </revision>
  </page>
  <page>
    <title>Build instructions</title>
    <id>1891</id>
    <redirect />
    <revision>
      <id>12718</id>
      <timestamp>2010-05-17T00:01:31Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <comment>add redirect to [[Building ControlTier]]</comment>
      <text xml:space="preserve">#REDIRECT [[Building ControlTier]]</text>
    </revision>
  </page>
  <page>
    <title>Build instructions 3.2</title>
    <id>111</id>
    <revision>
      <id>12715</id>
      <timestamp>2010-05-16T23:17:09Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <minor/>
      <comment>moved [[Integrated build instructions 3.2]] to [[Build instructions 3.2]]</comment>
      <text xml:space="preserve">=OVERVIEW=

This page describes the ControlTier complete build procedure:

: '''NOTE''': ''These instructions are for the 3.2 version of ControlTier.  Build instructions for 3.4 are forthcoming.''

'''Notes: '''

* These instructions are the Wiki formatted version of the build-instructions.txt found in ControlTier SVN. See also the &quot;buildall.sh&quot; script for a complete script.
* The order of steps is necessary so that subsequent builds will have their dependencies fulfilled by the artifacts produced by previous steps.  This means that some artifacts (for the most part java jar code archives) will need to be copied from the build result of one step into a repository location available to the subsequent builds.
* To accomplish this is to use a local webserver or directory tree in a maven1-style layout.  For each maven-based build in the sequence, set the maven.repo.ctlocal build property to the address of this repository.  After building one component, copy the necessary jars from the build to the local repository so they will be available for the next component.

=BUILD DEPENDENCIES=

Install the following software and define environment variables as described

Java 1.5: 
&lt;pre&gt;
		export JAVA_HOME=&lt;jdk 1.5 location&gt;
&lt;/pre&gt;
Ant 1.7:  (download 1.7.1p1: http://ctl-dispatch.sourceforge.net/repository/apache-ant/zips/apache-ant-1.7.1p1.zip )
&lt;pre&gt;
		export ANT_HOME=&lt;Ant 1.7 location&gt;
&lt;/pre&gt;
Maven 1:  
&lt;pre&gt;
		MAVEN_HOME=&lt;maven location, will differ for CTL vs CTIER&gt;
&lt;/pre&gt;

Grails 1.0.3 for Jobcenter and Reportcenter: (download: http://dist.codehaus.org/grails/grails-bin-1.0.3.tar.gz )
&lt;pre&gt;
		export GRAILS_HOME=&lt;Grails location&gt;
&lt;/pre&gt;

=SOURCE REPOSITORIES=
	
Check out the source code with the following repository URLs, and define the variables to point to their locations, as used by steps in this procedure.
	
ControlTier source:
&lt;pre&gt;
   		svn co https://controltier.svn.sourceforge.net/svnroot/controltier/branches/controltier-3-2-dev ctiersvn
   		export CTIERSVN=`pwd`/ctiersvn
&lt;/pre&gt;	
	
CTL source:
&lt;pre&gt;
   		svn co https://ctl-dispatch.svn.sourceforge.net/svnroot/ctl-dispatch/trunk ctlsvn
   		export CTLSVN=`pwd`/ctlsvn
&lt;/pre&gt;
	
Jobcenter source:
&lt;pre&gt;
		svn co https://webad.svn.sourceforge.net/svnroot/webad/branches/jobcenter-1-0-dev/webad jobcentersvn
   		export JCSVN=`pwd`/jobcentersvn
&lt;/pre&gt;

=LOCAL ARTIFACT REPOSITORY=
	
Set up a directory to serve as your local repository for build artifacts.  A URL is needed in some locations.
&lt;pre&gt;
		mkdir localrepo
		export LOCALREPO=`pwd`/localrepo
		export LOCALREPOURL=file://$LOCALREPO
&lt;/pre&gt;
	
The apache-ant 1.7.1p1 zip file will also be required for the Installer build, so place it in $LOCALREPO/apache-ant/zips/apache-ant-1.7.1p1.zip.

=BUILD=

==Build ctl-dispatch base==

The following steps will result in a CTL distribution. 

Note: 

* This does not include the Workbench client (ie, commander-extension). 

Choose a build directory (eg., $HOME/workspace)
&lt;pre&gt;
mkdir $HOME/workspace
builddir=$HOME/workspace
&lt;/pre&gt;

Checkout Source (eg, the trunk)
&lt;pre&gt;
svn co https://ctl-dispatch.svn.sourceforge.net/svnroot/ctl-dispatch/trunk workspace
&lt;/pre&gt;

Configure environment
&lt;pre&gt;
export MAVEN_HOME=$builddir/maven
export JAVA_HOME=*&lt;path to jdk-1.5 install&gt;*
&lt;/pre&gt;

Run the build procedure
&lt;pre&gt;
cd $builddir
echo maven.repo.ctierlocal = $LOCALREPOURL &gt; build.properties 
$MAVEN_HOME/bin/maven clean ctl:antConfigure
$MAVEN_HOME/bin/maven ctl:stgz ctl:tgz ctl:zip
&lt;/pre&gt;

Inspect build artifacts
You should fine a zip and tgz distribution:
&lt;pre&gt;
ls $builddir/target/dist
&lt;/pre&gt;

* pre-requisite:  SSH installation, and a ssh-keyfile in your home dir.  This is used for testing.
&lt;pre&gt;
		ssh-keygen -t dsa
		# choose defaults for location &quot;$HOME/.ssh/id_dsa
		# enter empty passphrase
		#
		
	#get the apache-ant-1.7.1p1.zip file
	mkdir -p $LOCALREPO/apache-ant/zips
	cd $LOCALREPO/apache-ant/zips
	wget -N http://ctl-dispatch.sourceforge.net/repository/apache-ant/zips/apache-ant-1.7.1p1.zip
	
	CTLVERS=1.2	
	cd $CTLSVN
    echo maven.repo.ctierlocal = $LOCALREPOURL &gt; build.properties
	MAVEN_HOME=$CTLSVN/maven
	$MAVEN_HOME/bin/maven clean ctl:antConfigure
	$MAVEN_HOME/bin/maven ctl:stgz ctl:tgz ctl:zip
&lt;/pre&gt;
	
artifacts: 
* ctl-dispatch-X.jar, 
* ctl-dispatch-X.tgz
&lt;pre&gt;
	    # NOTE:  the ctl-dispatch.jar is renamed to ctl.jar intentionally
     	mkdir -p $LOCALREPO/ctl/jars
     	mkdir -p $LOCALREPO/ctl-dispatch/tgzs
     	cp target/ctl-dispatch-$CTLVERS.jar $LOCALREPO/ctl/jars/ctl-$CTLVERS.jar
     	cp target/dist/tgzs/ctl-dispatch-$CTLVERS.tgz $LOCALREPO/ctl-dispatch/tgzs/ctl-dispatch-$CTLVERS.tgz
&lt;/pre&gt;

==Build Controltier &quot;common&quot; libs and the Workbench war==
The following steps will result in a controltier distribution. 

Note: This does not include the Workbench client (ie, commander-extension). 

Choose a build directory (eg., $HOME/workspace)
&lt;pre&gt;
mkdir $HOME/workspace
buildir=$HOME/workspace
&lt;/pre&gt;

Checkout Source (eg, the &quot;controltier-3-2-dev&quot;)
&lt;pre&gt;
svn co https://controltier.svn.sourceforge.net/svnroot/controltier/branches/controltier-3-2-dev
&lt;/pre&gt;

Configure environment
&lt;pre&gt;
export MAVEN_HOME=$builddir/maven
&lt;/pre&gt;

===common libs===

&lt;pre&gt;
	MAVEN_HOME=$CTIERSVN/maven
	
	CTIERVERS=3.2.4
	# 1. common libraries
	cd $CTIERSVN/common
	$MAVEN_HOME/bin/maven -Djava.net.preferIPv4Stack=true java:jars
&lt;/pre&gt;		
    
artifacts: 
* ctier-common-X.jar, 
* ctier-common-vocabulary-X.jar, 
* ctier-base-seed-X.jar
&lt;pre&gt;     
     	mkdir -p $LOCALREPO/ctier-common/jars
     	mkdir -p $LOCALREPO/ctier-common-vocabulary/jars
     	mkdir -p $LOCALREPO/ctier-base-seed/jars
     	cp target/distributions/ctier-common/jars/ctier-common-$CTIERVERS.jar $LOCALREPO/ctier-common/jars/ctier-common-$CTIERVERS.jar
     	cp target/distributions/ctier-common-vocabulary/jars/ctier-common-vocabulary-$CTIERVERS.jar $LOCALREPO/ctier-common-vocabulary/jars/ctier-common-vocabulary-$CTIERVERS.jar
     	cp target/distributions/ctier-base-seed/jars/ctier-base-seed-$CTIERVERS.jar $LOCALREPO/ctier-base-seed/jars/ctier-base-seed-$CTIERVERS.jar
&lt;/pre&gt;

===Workbench war===
&lt;pre&gt;
    cd $CTIERSVN/workbench
    
	# set local repository definition
	echo maven.repo.ctlocal = $LOCALREPOURL &gt; build.properties
	$MAVEN_HOME/bin/maven -Djava.net.preferIPv4Stack=true java:jar-resources
	$MAVEN_HOME/bin/maven -Djava.net.preferIPv4Stack=true java:jar war
&lt;/pre&gt;

artifacts:
* itnav-X.war
&lt;pre&gt;
     	mkdir -p $LOCALREPO/itnav/wars
     	cp target/itnav.war $LOCALREPO/itnav/wars/itnav-$CTIERVERS.war	
&lt;/pre&gt;

==Build Controltier's commander-extension for CTL==
&lt;pre&gt;
	cd $CTIERSVN/commander
	$MAVEN_HOME/bin/maven -Djava.net.preferIPv4Stack=true java:jar-resources 
	$MAVEN_HOME/bin/maven -Djava.net.preferIPv4Stack=true extension:package
   
    artifacts: commander-extension-${CTIERVERS}.jar, commander-X.jar
     	mkdir -p $LOCALREPO/commander-extension/jars
     	mkdir -p $LOCALREPO/commander/jars
     	cp dist/jars/commander-extension-${CTIERVERS}.jar $LOCALREPO/commander-extension/jars/commander-extension-${CTIERVERS}.jar
     	cp target/commander-X.jar $LOCALREPO/commander/jars/commander-X.jar
&lt;/pre&gt;

==Build or download the coreutils extension==

Note:
*  build instructions incomplete.  Please download from repository for now
&lt;pre&gt;
	#svn co https://moduleforge.svn.sourceforge.net/svnroot/moduleforge/coreutils coreutils
	#cd coreutils
	#...???
&lt;/pre&gt;

artifacts: 
* coreutils-extension-X.jar

NOTE: 
* without build instructions, download this file from the sourceforge project website and place in the local repo:
&lt;pre&gt;
    mkdir -p $LOCALREPO/coreutils-extension/jars
    cd $LOCALREPO/coreutils-extension/jars
    wget http://ctl-dispatch.sourceforge.net/repository/coreutils-extension/jars/coreutils-extension-0.9.jar
&lt;/pre&gt;

==Build the ctl-bundle==

&lt;pre&gt;
	cd $CTLSVN/bundle
	export MAVEN_HOME=../maven
	echo maven.repo.ctier = $LOCALREPOURL &gt; build.properties
	$MAVEN_HOME/bin/maven clean ctl:bundle
&lt;/pre&gt;
    
artifacts:
* ctl-X.tgz, 
* ctl-X.zip

&lt;pre&gt;
     	mkdir -p $LOCALREPO/ctl/zips
     	mkdir -p $LOCALREPO/ctl/tgzs
     	cp target/dist/zips/ctl-$CTLVERS.zip $LOCALREPO/ctl/zips/ctl-$CTLVERS.zip
     	cp target/dist/tgzs/ctl-$CTLVERS.tgz $LOCALREPO/ctl/tgzs/ctl-$CTLVERS.tgz
&lt;/pre&gt;

== Build Jobcenter==
&lt;pre&gt;
	cd $JCSVN
	JCVERS=1.1
	# copy the dependencies into the lib directory
	cp $LOCALREPO/ctl/jars/ctl-$CTLVERS.jar lib/
	cp $LOCALREPO/ctier-common/jars/ctier-common-$CTIERVERS.jar lib/
	cp $LOCALREPO/ctier-common-vocabulary/jars/ctier-common-vocabulary-$CTIERVERS.jar lib/
	cp $LOCALREPO/commander/jars/commander-$CTIERVERS.jar lib/
	export PATH=$PATH:$GRAILS_HOME/bin
	$ANT_HOME/bin/ant -Djetty.archive.available=true -f build.xml dist
&lt;/pre&gt;  
    
artifacts: 
* jobcenter-X.zip
&lt;pre&gt;
     	mkdir -p $LOCALREPO/jobcenter/zips
     	cp target/jobcenter-$JCVERS.zip $LOCALREPO/jobcenter/zips/jobcenter-$JCVERS.zip
&lt;/pre&gt;

==Build Reportcenter==
&lt;pre&gt;
	cd $CTIERSVN/reportcenter
	RCVERS=0.6
	# copy the dependencies into the lib directory
	cp $LOCALREPO/ctier-common/jars/ctier-common-$CTIERVERS.jar lib/
	export PATH=$PATH:$GRAILS_HOME/bin
	$ANT_HOME/bin/ant -Djetty.archive.available=true -f build.xml dist
&lt;/pre&gt;
   
artifacts: 
* reportcenter-X.zip

&lt;pre&gt;
     	mkdir -p $LOCALREPO/reportcenter/zips
     	cp target/reportcenter-$RCVERS.zip $LOCALREPO/reportcenter/zips/reportcenter-$RCVERS.zip
&lt;/pre&gt;

==Buid the Installers==
&lt;pre&gt;
	cd $CTIERSVN/installer
	
	echo maven.repo.ctlocal = $LOCALREPOURL &gt; build.properties
	$MAVEN_HOME/bin/maven -Djava.net.preferIPv4Stack=true clean installer:create
&lt;/pre&gt;

    
artifacts: 
* target/dist/ControlTier-Installer/jars/ControlTier-Installer-$CTIERVERS.jar, 
* target/dist/ControlTier/zips/ControlTier-$CTIERVERS.zip

[[Category:Building ControlTier]]</text>
    </revision>
  </page>
  <page>
    <title>Builder</title>
    <id>870</id>
    <redirect />
    <revision>
      <id>10078</id>
      <timestamp>2009-12-11T15:35:28Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[Category:Builder]]</comment>
      <text xml:space="preserve">#REDIRECT [[:Category:Builder]]</text>
    </revision>
  </page>
  <page>
    <title>Builder Concepts</title>
    <id>1642</id>
    <redirect />
    <revision>
      <id>11148</id>
      <timestamp>2009-12-14T02:26:45Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>moved [[Builder Concepts]] to [[Builder design pattern]]</comment>
      <text xml:space="preserve">#REDIRECT [[Builder design pattern]]</text>
    </revision>
  </page>
  <page>
    <title>Builder Settings and Attributes</title>
    <id>740</id>
    <revision>
      <id>10254</id>
      <timestamp>2009-12-11T18:51:06Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Builder&lt;/categorytree&gt;

This document describes the predefined Setting subtypes and their declared Attribute names that are associated with the [[Core Type Guide#Builder|Builder]] type.

Complete reference documentation for these related types are here:

* [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Builder.html#related_types Builder Reference - related types]

= Settings =

{| border=&quot;1px solid #aaa&quot; cellpadding=&quot;5&quot; cellspacing=&quot;0&quot;
    ! Setting !! attribute !! purpose
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Builder.html#type_BuilderBuildFile BuilderBuildFile] || ''buildFile'' || Build file the Builder should invoke
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Builder.html#type_BuilderBuildTarget BuilderBuildTarget] || ''buildTarget'' || Build target the Builder should invoke
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Builder.html#type_BuilderBuildstamp BuilderBuildstamp] || ''buildstamp'' || Optional setting to contain the most recent buildstamp
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Builder.html#type_BuilderExportDestination BuilderExportDestination] || ''builderExportDestination'' || WebDAV URL or scp destinaton for package export
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Builder.html#type_BuilderImportMax BuilderImportMax] || ''importMax'' || Maximum number of packages to import
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Builder.html#type_BuilderImportMin BuilderImportMin] || ''importMin'' || Minimum number of packages to import
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Builder.html#type_BuilderPackageBuildtimePattern BuilderPackageBuildtimePattern] || ''packageBuildtimePattern'' || Optional setting to set the package buildtime property
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Builder.html#type_BuilderPackageExtension BuilderPackageExtension] || ''packageExtension'' || name or pattern of file name extensions to import
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Builder.html#type_BuilderPackageFilebase BuilderPackageFilebase] || ''packageFilebase'' || name or pattern of filenames to import (minus file extension)
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Builder.html#type_BuilderPackageInstallRank BuilderPackageInstallRank] || ''packageInstallRank'' || install-rank of the package
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Builder.html#type_BuilderPackageInstallroot BuilderPackageInstallroot] || ''packageInstallroot'' || install-root path of package
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Builder.html#type_BuilderPackagePurgeRegex BuilderPackagePurgeRegex] || ''packagePurgeRegex'' || Buildstamp regular expression used to drive package purge selection
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Builder.html#type_BuilderPackageRequireBuildstamp BuilderPackageRequireBuildstamp] || ''requireBuildstamp'' || Whether or not to require that file names include the provided buildstamp
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Builder.html#type_BuilderPackageSeparator BuilderPackageSeparator] || ''packageSeparator'' || Character used to separate the package version (buildstamp) from the rest of the package file base
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Builder.html#type_BuilderPackageType BuilderPackageType] || ''packageType'' || Type of package
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Builder.html#type_BuilderPackageVendor BuilderPackageVendor] || ''packageVendor'' || package vendor
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Builder.html#type_BuilderPackageVersion BuilderPackageVersion] || ''packageVersion'' || package version
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Builder.html#type_BuilderScmBinding BuilderScmBinding] || ''scmBinding'' || binds scm commands to concrete SCM client commands
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Builder.html#type_BuilderScmConnection BuilderScmConnection] || ''scmConnection'' || source code repository connection string
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Builder.html#type_BuilderScmLabel BuilderScmLabel] || ''scmLabel'' || Source label to build
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Builder.html#type_BuilderScmModule BuilderScmModule] || ''scmModule'' || Source module to build
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Builder.html#type_BuilderScmQuiet BuilderScmQuiet] || ''scmQuiet'' || makes scm activity quiet
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Builder.html#type_BuilderScmUser BuilderScmUser] || ''scmUser'' || scm user 
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Builder.html#type_BuilderScmView BuilderScmView] || ''scmView'' || scm view (perforce) 
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Builder.html#type_BuilderVersionBuild BuilderVersionBuild] || ''versionBuild'' || Optional version build number used to automatically generate the package buildstamp
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Builder.html#type_BuilderVersionMajor BuilderVersionMajor] || ''versionMajor'' || Optional version major number used to automatically generate the package buildstamp
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Builder.html#type_BuilderVersionMinor BuilderVersionMinor] || ''versionMinor'' || Optional version minor number used to automatically generate the package buildstamp
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Builder.html#type_BuilderVersionRelease BuilderVersionRelease] || ''versionRelease'' || Optional version release number used to automatically generate the package buildstamp
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Builder.html#type_BuilderVersionTag BuilderVersionTag] || ''versionTag'' || Optional version tag used to automatically generate the package buildstamp
|}
{{Attributes Reference Footer}}

[[Category:Builder]]</text>
    </revision>
  </page>
  <page>
    <title>Builder Simple Example</title>
    <id>774</id>
    <revision>
      <id>16465</id>
      <timestamp>2012-02-22T12:32:55Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Undo revision 15466 by [[Special:Contributions/Petrachaney|Petrachaney]] ([[User talk:Petrachaney|talk]]) Removed SPAM bot edit</comment>
      <text xml:space="preserve">{{Version Required 3.4.3}}

This Builder Simple Example shows how to use an object of the generic [[Core_Type_Guide#Builder| Builder]] Type to coordinate a build process for a simple web application.

This example shows you how to do the following things:

# Configure a Builder object to:
#* Use a CVS repository for code checkout
#* Use an Ant build script that is part of the checked out sources
#* Use a predefined buildstamp number for the build artifact
#* Use a manually specified buildstamp number for the build artifact
#* Import the produced build artifact to the ControlTier repository as a Package resource
# Use the Builder &lt;code&gt;Build&lt;/code&gt; workflow, and its component commands
# use the [[project.xml]] resource model format to define a Builder object and its Settings

This example automates a very simple build process for a web application project named &quot;builder-simple&quot;. The web application is a simple JSP based app, that will be built using Ant. The Ant build process will create a &quot;.war&quot; file, and the Builder will be configured to look for that file after the build and to upload it to the repository along with a new Package definition.  All of the source code for the web application will be stored in a local CVS repository, which will be used to show how the Builder can do the SCM checkout.

The buildstamp for the build will be specified with Setting resources, defining each component of the buildstamp string, which uses the format: &quot;tag.major.minor.release&quot;.  The actual setting values will define the value to be: &quot;trunk.1.2.3&quot;. The build will also be shown using a user-specified buildstamp when the Build workflow is executed.

The built &quot;.war&quot; file will be uploaded to the ControlTier package repository after the build, and registered as a Package resource of type [[Core Type Guide#war|war]]. 

This example doesn't cover deploying the webapp once it has been built.  For that purpose see the [[Service Package Deployment Example]].

Since this example uses the base Builder type, the build mechanism is a simple Ant build script without any customization.  More specific Builder types are available, such as the [[Elements Type Guide#AntBuilder|AntBuilder]] which allows more customization of the Ant build, the  [[Elements Type Guide#MavenBuilder|MavenBuilder]] which builds Maven 2 projects, and [[Elements Type Guide|more]].

==Dependencies==

This example has these dependencies.

* ControlTier &amp;mdash; 3.4.3
** Meet the prerequisites and install ControlTier according to the [[Installation|Installing ControlTier]] instructions.
* Unix
** ''This example is not compatible with Windows.''  It is compatible with Linux, Mac OS X and most unix variants.
* CVS
** If the CVS binary is not available on your machine,  download and install the CVS package. Several binaries for different OS and architectures, as well as source code can be found at [http://www.nongnu.org/cvs/#downloading www.nongnu.org/cvs].  Once installed, be sure to add it to your &lt;code&gt;PATH&lt;/code&gt;.

==Building the Example==

Follow the instructions in this section to setup the example code into your environment.  

'''Note''': Don't worry about what these commands do, as they just bootstrap the example code to work in your environment and to pre-load the resource model for you. (For complete detail about how to use the [[Examples]] see [[Using the Examples]]):

Execute these bootstrap steps:

# &lt;pre&gt;cd $CTIER_ROOT/examples/builder-simple&lt;/pre&gt;
#* Navigate to the &lt;code&gt;examples/builder-simple&lt;/code&gt; directory under your &lt;code&gt;$CTIER_ROOT&lt;/code&gt; directory.
# Edit the file: &lt;code&gt;templates/defaults.xml&lt;/code&gt;
#* If you use a different node name that 'localhost', modify the file &lt;code&gt;templates/defaults.xml&lt;/code&gt; to set the value.
# &lt;pre&gt;ctl -p demo -m ProjectBuilder -c Register -- -xml projectbuilder.xml -install&lt;/pre&gt;	
#* This loads a ProjectBuilder object definition into the ControlTier Server.
# &lt;pre&gt;ctl -p demo -t ProjectBuilder -r builder-simple -c Build&lt;/pre&gt;
#* Builds a working example based on template files and your working environment. Later see [[Using_the_Examples#Further_Customization|Further Customization]]

You are now ready to run the example.

==The web application source==

You are now ready to configure the CVS repository.

The source for a simple web application is available in the directory &lt;code&gt;$CTIER_ROOT/examples/builder-simple/content/simple&lt;/code&gt;

The source files implement a trivial webapp. There will be two main source files: a JSP and a web.xml. 

==Create a CVS repository==

The source files will be maintained in a local CVS repository. Run
the following commands to create the CVS instance and import the sources:
	
&lt;pre&gt;
cd $CTIER_ROOT/examples/builder-simple
mkdir -p demo
export CVSROOT=`pwd`/demo/cvsroot; # local CVS repo path
cvs -d $CVSROOT init;                # create the repository
cd content/simple/src;                 # change directory and import the sources
cvs import -m &quot;Importing Simple example&quot; src tutorial start; 
&lt;/pre&gt;

==The build.xml==

An Ant build.xml file is present at &lt;code&gt;$CTIER_ROOT/examples/builder-simple/content/simple/src/build.xml&lt;/code&gt; that will build and package the release artifact. 

Notice the embedded properties  &lt;code&gt;${opts.basedir}, ${opts.targetdir}&lt;/code&gt; and &lt;code&gt;${opts.buildstamp}&lt;/code&gt;.
These properties will be passed in via the Builder's &quot;runBuildscript&quot; command and be replaced with the values of the configured settings.

==Noteworthy settings==
Reviewing the steps taken in preparing the simple application's source tree
a few noteworthy details should be highlighted:
	
{| cellspacing=&quot;1&quot; cellpadding=&quot;4&quot; border=&quot;1&quot; style=&quot;border: 1px solid #aaa; border-collapse:collapse;&quot;
|-
!Setting 
!Value
!Description
|-
|SCM connection 
|&lt;code&gt;$CTIER_ROOT/examples/builder-simple/demo/cvsroot&lt;/code&gt;
|path to the source in the source code repository. (used by scmCheckout) 
|-
|SCM module
|&lt;code&gt;src&lt;/code&gt;
|module to checkout of the repository (used by scmCheckout) 
|-
|source base directory
|&lt;code&gt;$CTIER_ROOT/examples/builder-simple/demo/builder-simple&lt;/code&gt;
|directory where checked out source module resides (used by scmCheckout and runBuildScript) 
|-
|build file path 
|&lt;code&gt;$CTIER_ROOT/examples/builder-simple/demo/builder-simple/src/build.xml&lt;/code&gt;
|the build file to invoke (used by runBuildScript) 
|}
	
Each of these values is configured for the Builder in the &lt;code&gt;default-object.xml&lt;/code&gt; that has been generated.  In a [[#How it Works|later section]] we will walk through the content of the file.

== Running the Example ==

You can run any of the Builder commands via CTL like so:

 ctl -p demo -t Builder -r builder-simple -c '''command-name'''

If you run the command without the &quot;-c '''command-name'''&quot; parameter you will see a listing of commands.

===Examine the Builder properties===

With the Builder configuration loaded you can examine the Builder configuration attributes via CTL.

Run the &lt;code&gt;Get-Properties&lt;/code&gt; CTL command to look at the  information about the new object:
&lt;pre&gt;
ctl -p demo -t Builder -r builder-simple -c Get-Properties -- -print
&lt;/pre&gt;
&lt;pre&gt;
[MULTI_LINE]
# builder-simple [Builder] #

A Builder to build and package the builder-simple app

## Attributes ##

*  basedir: &quot;$CTIER_ROOT/examples/builder-simple/demo/builder-simple&quot;
*  buildFile: &quot;$CTIER_ROOT/examples/builder-simple/demo/builder-simple/src/build.xml&quot;
*  buildTarget: &quot;all&quot;
*  buildstamp: &quot;0&quot;
*  defaultAllowMultiplePackageMatches: &quot;false&quot;
*  defaultDeploymentType: &quot;Builder&quot;
*  defaultFailIfPackageNotReplaced: &quot;true&quot;
*  defaultPackageName: &quot;.*&quot;
*  defaultPackageProximity: &quot;1&quot;
*  defaultPackageType: &quot;[^\.]*&quot;
*  dirlist: &quot;bin,logs,var&quot;
*  errorNotificationRecipient: &quot;${framework.admin.tolist}&quot;
*  importMax: &quot;1&quot;
*  importMin: &quot;1&quot;
*  packageBuildtimePattern: &quot;yyyymmddhhmmss&quot;
*  packageExtension: &quot;war&quot;
*  packageFilebase: &quot;builder-simple&quot;
*  packageInstallRank: &quot;0&quot;
*  packageInstallroot: &quot;${resource.attribute.jetty_basedir}/webapps/builder-simple&quot;
*  packagePurgeRegex: &quot;^(?!^0$).*$&quot;
*  packageSeparator: &quot;-&quot;
*  packageType: &quot;war&quot;
*  packageVersion: &quot;${opts.buildstamp}&quot;
*  requireBuildstamp: &quot;false&quot;
*  scmBinding: &quot;cvs&quot;
*  scmConnection: &quot;$CTIER_ROOT/examples/builder-simple/demo/cvsroot&quot;
*  scmLabel: &quot;&quot;
*  scmModule: &quot;src&quot;
*  scmQuiet: &quot;false&quot;
*  scmUser: &quot;greg&quot;
*  successNotificationRecipient: &quot;${framework.admin.tolist}&quot;
*  targetdir: &quot;$CTIER_ROOT/examples/builder-simple/demo/builder-simple/target&quot;
*  versionMajor: &quot;1&quot;
*  versionMinor: &quot;2&quot;
*  versionRelease: &quot;3&quot;
*  versionTag: &quot;trunk&quot;

.
.
.
- - -
[/MULTI_LINE]
&lt;/pre&gt;

If you go to Workbench, and navigate to the Builder List, you will see the &quot;builder-simple&quot; Builder object.

===The Build workflow command===

To run the whole build cycle, use the Builder's &lt;code&gt;Build&lt;/code&gt; workflow command. The Build command will execute the sequence of commands that comprise each step of the build life cycle. 

The &quot;Build&quot; command takes an optional parameter, &quot;-buildstamp&quot;. The &quot;buildstamp&quot; represents the build identifier is also used during package registration in the repository import step. If no -buildstamp parameter is specified, one will be automatically generated.

If you are curious what commands will run in the Build workflow view the &quot;process flow view&quot; in Workbench.
Navigate to the &quot;builder-simple&quot; Builder object in Workbench, select it and then click the &quot;Commands&quot; tab.
Scroll to the &quot;Build&quot; command and press the icon to the right.

[[Image:Builder-simple-example-Build-pview.png]]

The image shows the sequence of commands Build will run and on which Node the command can be run.

===Automatic buildstamp generation===

Run the &lt;code&gt;Build&lt;/code&gt; command without any options and the Build command will generate a buildstamp to identify the produced artifact.

''execute:''

&lt;pre&gt;
ctl -p demo -t Builder -r builder-simple -c Build
&lt;/pre&gt;

The output from this command is fairly long, and is listed in [[#Walking through the Build output messages]], but note that these steps occur:

* &lt;code&gt;Build&lt;/code&gt; begins by running the &lt;code&gt;scmCheckout&lt;/code&gt; command which runs the CVS checkout of simple's src directory. 
* Next, the &lt;code&gt;setBuildstamp&lt;/code&gt; command generates and stores a buildstamp used in later steps of the workflow
* The &lt;code&gt;runBuildScript&lt;/code&gt; command is then run to invoke the build procedure.
* Finally, the &lt;code&gt;repoImport&lt;/code&gt; command looks in the target directory for a matching artifact and then puts it into the repository, recording information about the package in the model.

After the command completes, go to the Package Manager in Workbench and list all the packages. You should see a package named &quot;builder-simple-trunk.1.2.3.war&quot;.

===User specified buildstamp===

You can also run the Build command and pass in an arbitrary buildstamp value.  
This lets a user define their own build identifier via the command option.

To use the buildstamp &quot;Mar15&quot; as the buildstamp value, add the &lt;code&gt;-buildstamp&lt;/code&gt; option.

''execute:''

&lt;pre&gt;
ctl -p demo -t Builder -r builder-simple -c Build -- -buildstamp Mar15
.
.
. 
&lt;output omitted&gt;
&lt;/pre&gt;

Notice how the &quot;Mar15&quot; buildstamp is used throughout the steps of the workflow.

Go back to the Package Manager package list and you should now see a packaged named &quot;builder-simple-Mar15.war&quot;.

==Walking through the Build output messages==

It's helpful to walk through the output of the Build workflow to understand what happened at each step. 
Each step in the workflow is demarcated with a begin/end message.

===Step 1: scmCheckout===
The scmCheckout command invokes the &quot;cvs checkout&quot; command passing in the needed parameters. 
You can see these in the second line as &quot;scmCheckout parameters&quot;:
&lt;pre&gt;
begin workflow command (1/4) -&gt; &quot;scmCheckout &quot; ...
scmCheckout parameters: {basedir=&quot;$CTIER_ROOT/examples/builder-simple/demo/builder-simple&quot;, \
    connection=&quot;$CTIER_ROOT/examples/builder-simple/demo/cvsroot&quot;, module=&quot;src&quot;, label=&quot;&quot;, scmcommand=&quot;checkout&quot; }
Created dir: $CTIER_ROOT/examples/builder-simple/demo/builder-simple
cvs checkout: Updating src
U src/build.xml
cvs checkout: Updating src/WEB-INF
U src/WEB-INF/web.xml
cvs checkout: Updating src/jsp
U src/jsp/index.jsp
[command.timer.Builder.scmCheckout: 1.128 sec]
end workflow command (1/4) -&gt; &quot;scmCheckout &quot;
&lt;/pre&gt;

Because this Builder's specified &quot;cvs&quot; for the BuilderScmBinding, the cvs client was invoked.
The cvs client implementation then formats the correct set of arguments for the cvs command.

===Step 2: setBuildstamp===

The setBuildstamp command conditionally generates a buildstamp if one is not supplied. It also stores it so the last used buildstamp is known.
&lt;pre&gt;
begin workflow command (2/4) -&gt; &quot;setBuildstamp &quot; ...
CVS does not support automatic change number generation, skipping ...
Automatically set buildstamp to &quot;trunk.1.2.3&quot;
[command.timer.Builder.setBuildstamp: 0.686 sec]
end workflow command (2/4) -&gt; &quot;setBuildstamp &quot;
&lt;/pre&gt;

Notice in the third line, &quot;trunk.1.2.3&quot; is the generated buildstamp.

===Step 3: runBuildscript===

The runBuildscript command is responsible for running the build tool, script and target. 
The second line shows the parameters used.
&lt;pre&gt;
begin workflow command (3/4) -&gt; &quot;runBuildScript &quot; ...
runBuildScript parameters: {basedir=&quot;$CTIER_ROOT/examples/builder-simple/demo/builder-simple&quot;, \
    targetdir=&quot;$CTIER_ROOT/examples/builder-simple/demo/builder-simple/target&quot;, buildstamp=&quot;trunk.1.2.3&quot;, \
    buildfile=&quot;$CTIER_ROOT/examples/builder-simple/demo/builder-simple/src/build.xml&quot;, target=&quot;all&quot; }
Created dir: $CTIER_ROOT/examples/builder-simple/demo/builder-simple/target
Building war: $CTIER_ROOT/examples/builder-simple/demo/builder-simple/target/builder-simple-trunk.1.2.3.war
[command.timer.Builder.runBuildScript: 8.491 sec]
end workflow command (3/4) -&gt; &quot;runBuildScript &quot;
&lt;/pre&gt;

Note also, any of the &quot;builder-simple&quot; Builder's property data can be referenced within the build.xml file because the Ant environment is passed into the Ant build.

===Step 4: repoImport===
The last step in the generic Build workflow is to call &lt;code&gt;repoImport&lt;/code&gt;.
The repoImport command looks for artifacts to upload to the repository.
It looks for files in the &quot;targetdir&quot; recursively, searching for files that match the configured filebase pattern and file extension.
&lt;pre&gt;
begin workflow command (4/4) -&gt; &quot;repoImport &quot; ...
Created dir: $CTIER_ROOT/ctl/projects/demo/resources/Builder/builder-simple/tmp/Builder-repoImport-20090416121609
Condition: isProcessableWithoutExistingPropfile result: true
opts.propfile set to: autogenerated-builder.properties
Creating new property file: \
    $CTIER_ROOT/ctl/projects/demo/resources/Builder/builder-simple/tmp/Builder-repoImport-20090416121609/import-count.properties
processing files in directory: '$CTIER_ROOT/examples/builder-simple/demo/builder-simple/target' \
    matching: '(builder-simple)(?:-trunk.1.2.3)?\.(war)$' ...
processing matched file: builder-simple-trunk.1.2.3.war
Auto-generated builder properties file created: $CTIER_ROOT/examples/builder-simple/demo/builder-simple/target/autogenerated-builder.properties...
Copying 1 file to $CTIER_ROOT/examples/builder-simple/demo/builder-simple/target
Updating property file: $CTIER_ROOT/ctl/projects/demo/resources/Builder/builder-simple/tmp/Builder-repoImport-20090416121609/import-count.properties
Copying 1 file to $CTIER_ROOT/ctl/projects/demo/modules/Builder/commands
Getting: http://localhost:8080/jackrabbit/repository/controltier/projects/demo/publish/modules/war-head.jar
To: $CTIER_ROOT/ctl/var/tmp/downloads/demo/war-head.jar
Created dir: $CTIER_ROOT/ctl/projects/demo/modules/war
Expanding: $CTIER_ROOT/ctl/var/tmp/downloads/demo/war-head.jar into $CTIER_ROOT/ctl/projects/demo/modules/war
Attempting to get Package-head.jar ...
Getting: http://localhost:8080/jackrabbit/repository/controltier/projects/demo/publish/modules/Package-head.jar
To: $CTIER_ROOT/ctl/var/tmp/downloads/demo/Package-head.jar
Expanding: $CTIER_ROOT/ctl/var/tmp/downloads/demo/Package-head.jar into $CTIER_ROOT/ctl/projects/demo/modules/Package
uploading file: $CTIER_ROOT/examples/builder-simple/demo/builder-simple/target/builder-simple-trunk.1.2.3.war to: \
    http://localhost:8080/jackrabbit/repository/controltier/projects/pkgs/demo/war/wars/builder-simple-trunk.1.2.3.war...
Uploading to: http://localhost:8080/jackrabbit/repository/controltier/projects/pkgs/demo/war/wars/builder-simple-trunk.1.2.3.war
Uploading: builder-simple-trunk.1.2.3.war
Puted 1 file to http://localhost:8080/jackrabbit/repository/controltier/projects/pkgs/demo/war/wars/builder-simple-trunk.1.2.3.war
Creating new property file: \
    $CTIER_ROOT/ctl/projects/demo/resources/Builder/builder-simple/tmp/Builder-repoImport-20090416121609/import-list.properties
Deleting: $CTIER_ROOT/ctl/projects/demo/modules/Builder/commands/entity1160301077.properties
Current count: 1
Batch request performed successfully.
Current count: 1
[command.timer.Builder.repoImport: 42.437 sec]
end workflow command (4/4) -&gt; &quot;repoImport &quot;
&lt;/pre&gt;

Notice on line 6 of the output 
&lt;code&gt;processing files in directory: '$CTIER_ROOT/examples/builder-simple/demo/builder-simple/target' \
matching: '(builder-simple)(?:-trunk.1.2.3)?\.(war)$' ...&lt;/code&gt;

This line shows that repoImport begins looking for files in the target dir &quot;$CTIER_ROOT/examples/builder-simple/demo/builder-simple/target&quot;.
It looks for files that match the pattern '(builder-simple)(?:-trunk.1.2.3)?\.(war)$'.
Breaking down that regular expression into the parameters: 
* filebase + buildstamp + extension.

==How it Works==

The Builder is defined in a project XML file generated into the &lt;code&gt;$CTIER_ROOT/examples/builder-simple&lt;/code&gt;. directory. This section walks through the XML definition files used to define the Setting and Builder objects
      
===The Setting definitions ===

The Settings define attributes (see: [[Builder Settings and Attributes]]) that the various commands of the [[Core Type Guide#Builder|Builder]] type use.  For our simple Builder, we configure it to use the paths mentioned above in the [[#Noteworthy settings]] section.

The specific commands of the Build workflow use the Attribute Values defined below, and their corresponding Setting subtypes are shown:

* scmCheckout
** ''scmBinding'' -  BuilderScmBinding
** ''scmConnection'' -  BuilderScmConnection
** ''scmModule'' -  BuilderScmModule
* setBuildstamp 
** ''versionMajor'' - BuilderVersionMajor
** ''versionMinor'' - BuilderVersionMinor
** ''versionRelease'' - BuilderVersionRelease
** ''versionTag'' - BuilderVersionTag
** ''buildstamp'' - BuilderBuildstamp
* runBuildscript
** ''buildFile'' - BuilderBuildFile
** ''buildTarget'' - BuilderBuildTarget
* repoImport
** ''packageType'' - BuilderPackageType
** ''packageExtension'' - BuilderPackageExtension
** ''packageFilebase'' - BuilderPackageFilebase
** ''packageInstallroot'' - BuilderPackageInstallroot

====SCM info Settings====

Three Settings are used to configure the SCM info about the CVS instance that was just setup, and are used by the &lt;code&gt;scmCheckout&lt;/code&gt; command.

* The type of SCM system used is determined by the ''scmBinding'' attribute. In this example we use CVS, so the value is &quot;cvs&quot;. 
* The SCM connection string is determined by the ''scmConnection'' attribute.
* The source code module name is set by the ''scmModule'' attribute.

Here are those setting definitions in XML:

&lt;pre&gt;
    &lt;setting type=&quot;BuilderScmModule&quot; name=&quot;builder-simple&quot; description=&quot;The builder-simple app surce module name&quot; settingValue=&quot;src&quot;/&gt;
    &lt;setting type=&quot;BuilderScmBinding&quot; name=&quot;builder-simple&quot; description=&quot;CVS binding for source code&quot; settingValue=&quot;cvs&quot;/&gt;
    &lt;setting type=&quot;BuilderScmConnection&quot; name=&quot;builder-simple&quot; description=&quot;Path to the CVS root&quot; 
        settingValue=&quot;$CTIER_ROOT/examples/builder-simple/demo/cvsroot&quot;/&gt;
&lt;/pre&gt;

====Version Settings====

After checkout, the Builder needs to know a buildstamp to use for the produced artifact.

* The &lt;code&gt;setBuildstamp&lt;/code&gt; command generates a buildstamp
* Provides an open-ended strategy to define the packaged artifacts version information

These attributes are used by the &lt;code&gt;setBuildstamp&lt;/code&gt; command:

# ''versionTag'' - a textual tag to prepend to the buildstamp, &quot;trunk&quot; in this example.
# ''versionMajor'' - the Major version number, &quot;1&quot; for this example
# ''versionMinor'' - the Minor version number, &quot;2&quot; for this example
# ''versionRelease'' - the release number, &quot;3&quot; for this example
# ''buildstamp'' - the value of the generated buildstamp, &quot;0&quot; used as a place-holder until the first buildstamp is generated

The automatic-buildstamp generation feature of Builder will combine the first 4 of these attributes into a buildstamp, in the pattern:

: ''tag''.''major''.''minor''.''release''

Note that these are all optional when defining your own Builder.

Here they are as setting definitions in XML:

&lt;pre&gt;
    &lt;setting type=&quot;BuilderVersionTag&quot; name=&quot;builder-simple&quot; description=&quot;The initial builder-simple app build tag&quot; settingValue=&quot;trunk&quot;/&gt;
    &lt;setting type=&quot;BuilderVersionMajor&quot; name=&quot;builder-simple&quot; description=&quot;The builder-simple app major version number&quot; settingValue=&quot;1&quot;/&gt;
    &lt;setting type=&quot;BuilderVersionMinor&quot; name=&quot;builder-simple&quot; description=&quot;The builder-simple app minor version number&quot; settingValue=&quot;2&quot;/&gt;
    &lt;setting type=&quot;BuilderVersionRelease&quot; name=&quot;builder-simple&quot; description=&quot;The builder-simple app release version number&quot; settingValue=&quot;3&quot;/&gt;
    &lt;setting type=&quot;BuilderBuildstamp&quot; name=&quot;builder-simple&quot; description=&quot;The initial builder-simple app buildstamp value&quot; settingValue=&quot;0&quot;/&gt;
&lt;/pre&gt;

====Build script Settings====
The third phase of the Build life cycle is to invoke the build procedure.

* The &quot;runBuildscript&quot; invokes the configured build tool and build script with specified target.
* Execution relative to &quot;basedir&quot;
* Artifacts generated to &quot;targetdir&quot;
* By default can execute an Ant build file
* You might want to override it to invoke your build procedure
** Check for existing types before overriding it
**  For example these other Builder types exist: AntBuilder, MavenBuilder, BatBuilder, RpmBuilder, ZipBuilder, etc

The attributes used by the ''runBuildscript'' command are:

# ''buildFile'' - the path to the buildfile to use by the Ant build system, we use the path to the build.xml file in the checked-out sources dir.
# ''buildTarget'' - the target to pass to the Ant build process, in this example &quot;all&quot;

Here they are as setting definitions in XML:

&lt;pre&gt;
    &lt;setting type=&quot;BuilderBuildFile&quot; name=&quot;builder-simple&quot; description=&quot;Simple app Ant build file: build.xml&quot; 
        settingValue=&quot;$CTIER_ROOT/examples/builder-simple/demo/builder-simple/src/build.xml&quot;/&gt;
    &lt;setting type=&quot;BuilderBuildTarget&quot; name=&quot;builder-simple&quot; description=&quot;Simple app Ant build target: all&quot; settingValue=&quot;all&quot;/&gt;
&lt;/pre&gt;

====Package Import info Settings====

The last step in the Build life cycle is to find the produced artifacts and import them to the repository.

* The &lt;code&gt;repoImport&lt;/code&gt; command searches from the targetdir directory and imports matching files.
* Used as metadata for package registration

The attributes used by &lt;code&gt;repoImport&lt;/code&gt; are:
# ''packageType'' - the name of a ControlTier Package subtype representing the type of the imported file, in this case &quot;war&quot;
# ''packageExtension'' - a string to match the file extension of the build artifact.  Our build produces a &quot;.war&quot; file, so we set it to &quot;war&quot;
# ''packageFilebase'' - the base name of the build artifact. our build.xml produces a &quot;builder-simple-VERSION.war&quot;, so we set it to &quot;builder-simple&quot;
# ''packageInstallroot'' - A path to set as the package-install-root property of the imported Package resource. We configure it for this example to specify a webapps dir in a hypothetical Jetty installation. &quot;${resource.attribute.jetty_basedir}/webapps/builder-simple&quot;.

Here they are as setting definitions in XML:

&lt;pre&gt;
    &lt;setting type=&quot;BuilderPackageType&quot; name=&quot;builder-simple&quot; description=&quot;Type name for Builder produced Package&quot; settingValue=&quot;war&quot;/&gt;
    &lt;setting type=&quot;BuilderPackageFilebase&quot; name=&quot;builder-simple&quot; description=&quot;File base name of the build artifact&quot; settingValue=&quot;builder-simple&quot;/&gt;
    &lt;setting type=&quot;BuilderPackageExtension&quot; name=&quot;builder-simple&quot; description=&quot;File extension of the build artifact&quot; settingValue=&quot;war&quot;/&gt;
    &lt;setting type=&quot;BuilderPackageInstallroot&quot; name=&quot;builder-simple&quot; description=&quot;Installation directory to set for the Package when deployed&quot; 
        settingValue=&quot;${resource.attribute.jetty_basedir}/webapps/builder-simple&quot;/&gt;
&lt;/pre&gt;

These are the last of the settings.
      
===The Builder Deployment===

The Deployment definition for the Builder requires noting these details:

# The name and type: We're using the generic Builder type. Call the instance &quot;builder-simple&quot; to correspond with the app name.
# The basedir directory: This is the directory where the sources will checked out
# The installroot directory: This is where targets are written
# Node referrer: This is the Node(s) where the Builder will be assigned.
# The type and name of each of the Setting resources we want to assign to the Builder

The complete file is at the path: $CTIER_ROOT/examples/builder-simple/default-object.xml

This snippet shows the Builder deployment definition:
&lt;pre&gt;
    &lt;!--
        Builder deployment definition
    --&gt;
    &lt;deployment 
        type=&quot;Builder&quot;
        name=&quot;builder-simple&quot; 
        description=&quot;A Builder to build and package the builder-simple app&quot;        
        basedir=&quot;$CTIER_ROOT/examples/builder-simple/demo/builder-simple&quot;
        installRoot=&quot;$CTIER_ROOT/examples/builder-simple/demo/builder-simple/target&quot;    
        &gt;
        &lt;referrers replace=&quot;false&quot;&gt;
            &lt;!-- add the Node as a parent dependency (referrer) --&gt;
            &lt;resource type=&quot;Node&quot; name=&quot;...&quot;/&gt;
        &lt;/referrers&gt;
        &lt;resources replace=&quot;true&quot;&gt;
            &lt;!-- add all of the settings as child dependencies (resources) --&gt;
            &lt;resource type=&quot;BuilderScmModule&quot;           name=&quot;builder-simple&quot;/&gt;
            &lt;resource type=&quot;BuilderScmBinding&quot;          name=&quot;builder-simple&quot;/&gt;
            &lt;resource type=&quot;BuilderScmConnection&quot;       name=&quot;builder-simple&quot;/&gt;
            &lt;resource type=&quot;BuilderVersionTag&quot;          name=&quot;builder-simple&quot;/&gt;
            &lt;resource type=&quot;BuilderVersionMajor&quot;        name=&quot;builder-simple&quot;/&gt;
            &lt;resource type=&quot;BuilderVersionMinor&quot;        name=&quot;builder-simple&quot;/&gt;
            &lt;resource type=&quot;BuilderVersionRelease&quot;      name=&quot;builder-simple&quot;/&gt;
            &lt;resource type=&quot;BuilderBuildFile&quot;           name=&quot;builder-simple&quot;/&gt;
            &lt;resource type=&quot;BuilderBuildTarget&quot;         name=&quot;builder-simple&quot;/&gt;
            &lt;resource type=&quot;BuilderBuildstamp&quot;          name=&quot;builder-simple&quot;/&gt;
            &lt;resource type=&quot;BuilderPackageType&quot;         name=&quot;builder-simple&quot;/&gt;
            &lt;resource type=&quot;BuilderPackageFilebase&quot;     name=&quot;builder-simple&quot;/&gt;
            &lt;resource type=&quot;BuilderPackageExtension&quot;    name=&quot;builder-simple&quot;/&gt;
            &lt;resource type=&quot;BuilderPackageInstallroot&quot;  name=&quot;builder-simple&quot;/&gt;  
        &lt;/resources&gt;
    &lt;/deployment&gt;
&lt;/pre&gt;

The XML file is uses the [[project.xml]] format and a &quot;deployment&quot; tag to define
the Builder deployment. The deployment tag has attributes for the items described in the
numbered bullet list. 

The Node reference is done via the &quot;referrers&quot; and &quot;resource&quot; tag. 

Each of the Settings we have already defined is added as a child dependency under the &quot;resources&quot;
section.

==Related Topics==

* [[Continuous Deployment Example with Tomcat]] shows how to automatically build and deploy a WAR to a Tomcat server after a code-change is performed.

{{Manual/navbox}}

[[Category:Builder Examples]]</text>
    </revision>
  </page>
  <page>
    <title>Builder design pattern</title>
    <id>699</id>
    <revision>
      <id>11147</id>
      <timestamp>2009-12-14T02:26:45Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>moved [[Builder Concepts]] to [[Builder design pattern]]</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Builder&lt;/categorytree&gt;

= Intent =

* Encourage abstracting software building so that a single abstraction can be used as an interface with a variety of build tools.
* Define an object that encapsulates the life-cycle of a software build.
* Separate the concerns of software building from software staging.
  
=Problem=

We want to design a build tool agnostic, software build life cycle process, 
but differences between software source code repositories, 
build tool setup and syntaxes demonstrate that inflexible and
diverse procedures often ensue.

= Discussion=

The application build life-cycle is dominated by processing software resources
using various tools. Primarily, the life cycle tasks fall into several
phases:

* Preparing: Obtaining the necessary source materials
* Compiling: Compiling the source code into an executable form
* Testing: Invoking related unit tests
* Packaging: Packaging the build artifacts into a distributable format
* Staging: Storing the packaged build artifact into a repository for later deployment

Each phase of the build life cycle often entails a different set of underlying
tools, procedures, order of tasks, configuration and application specific detail.
The successful result of each of these phases is often a dependency for the
subsequent phase in the cycle.

Ultimately, the goal of the build life cycle is to produce a set of release artifacts
that will be later used in the deployment life cycle. Depending on the development project,
these build artifacts might be code binaries, application presentation content, and reference
data and database scripts.

The figure below describes these different dimensions to a build process:

[[Image:builder-discussion-problem.png|problem]]

Further complicating the requirements of the build infrastructure, is the need
to produce multiple application components that integrate into a larger software
system. These application components may occupy different architectural tiers
and may even be developed by different teams. When one considers the build process
for each of these application components, one can imagine the range of different
technologies, inputs and outputs that each component requires. If one attempts
to automate the build process for a related set of application components, the diversity
of their tools, tool syntax and configuration typically become the complicating obstacle.
This complexity often perpetuates siloed processes that are only integrated by
the efforts of individuals that ensure all builds have completed, assembling the results
by hand.

An alternate approach would be to introduce an abstraction that provides a common interface
to executing the build life cycle for each component. This common interface should define
the standard process structure of the build life cycle, with each phase defined in terms
of its own phase-specific steps. These phase-specific steps can then be mapped to 
tasks that integrate with the tools and configuration used to generate each of the 
application components. 

This offers several advantages: The general build life cycle is decoupled
from the application component specific build procedures. The abstract interface
facilitates the possibility to define integrated processes that automate many related
application component builds. One can extend the generic build life cycle process
structure by defining derived classes.


[[Image:builder-discussion-solution.png|solution]]

&lt;!--
The Builder concept rests on several effective object-oriented design patterns:


&lt;ul&gt;
&lt;li&gt;Facade: A facade is an object that provides a simplified interface to a larger body 
of code. It reduces dependencies of outside code on the inner workings of the process.
The Builder uses this pattern to expose the build life cycle as a single operation.
It is this single operation that is invoked by higher level processes to
automate multiple application component builds.
Pattern Description in Portland Pattern Repsository Wiki (http://c2.com/cgi/wiki?FacadePattern)
&lt;/li&gt;
&lt;li&gt;Template method: A template method defines a program skeleton of an algorithm.
Subclasses of the method override the abstract methods to provide concrete behavior.
The Builder uses the template method pattern to define the common process structure
of the build life cycle, each phase modeled as a sequence of steps. The general
structure of the algorithm typically remain constant, with just lower levels of
the process structure modified to suit the application-component build specific needs.
Pattern Description in Portland Pattern Repsository Wiki (http://www.c2.com/cgi/wiki?TemplateMethodPattern)
&lt;/li&gt;
&lt;li&gt;Strategy: A strategy decouples the algorithm from its host, encapsulating
the algorithm into a separate class. The Builder uses this pattern to define
generic life cycle behavior that can be mapped to a particular tool. For example,
Builder exposes a set of SCM related commands and a configuration setting 
controlled by the user to bind to a particular SCM implementation.
Pattern Description in Portland Pattern Repsository Wiki (http://www.c2.com/cgi/wiki?StrategyPattern)
&lt;/li&gt;
&lt;/ul&gt;
--&gt;


= Structure= 

The builder abstraction breaks down into a common design pattern
comprised of the following types:

* Builder: provides parameters and operations that govern
the build process life-cycle. Optionally, the Builder object can
make use of packaging logic by making use of an available Package
type described next.
* Package: The [[Core Type Guide#Package|Package]] base type
provides commands for repository upload and registration. Sub types
of Package (such as zip and war types ) provide concrete implementations
for &lt;code&gt;create&lt;/code&gt; and &lt;code&gt;extract&lt;/code&gt; which can
also be taken advantage of by Builders.
Builders can interact with Package types to prepare build artifacts
for later deployment.

[[Image:builder-structure.png|structure]]

'''SCM Bindings'''

The first phase of the Build life cycle must obtain and prepare the resources 
needed in the compilation phase. Typically, these resources are fetched from a source
code repository, and depending on source code configuration management policy,
these resources may need to be identified by a label (or branch/baseline id).

Given the range of SCM systems, each with their own tool specific usage and syntax
for checking out files, committing changes, creating labels and or branches (cf. baselines), etc.,
the &lt;code&gt;Build&lt;/code&gt; workflow commands that  interact with the SCM repository
need to use the appropriate SCM client interface providing to it the needed parameters.      

The diagram below describes the proposed approach for managing various 
bindings to SCM clients. The &lt;code&gt;scmBinding&lt;/code&gt; attribute is used
to specify which SCM client binding to import. The Builder command.xml file uses
that value to load the SCM binding file, declared as an antlib.

[[Image:builder-scm-binding.png|scm binding strategy]]


Each of the standard SCM operations should be implemented using a convention
describing a well known set of
macrodef (http://ant.apache.org/manual/CoreTasks/macrodef.html)
declarations. Bindings for specific SCM clients are maintained in their own 
antlib (http://ant.apache.org/manual/CoreTypes/antlib.html) file.
Each of these macrodefs are in turn exposed as standard Builder commands.


A listing of the standard set of macrodefs follows:

{|
!macrodefs
|-
!Name!!Description!!Parameters
|-
|scmAdd||Adds a new file to the SCM||path
|-
|scmCheckout||Obtain a copy of the specified path from SCM for editing||basedir, connection, module, label, comment
|-
|scmCommit||Save changed path to SCM||path, comment
|-
|scmMkLabel||Create and apply label to path||path, label
|-
|scmMkTag||Create branch with path||path, label
|}

'''Automatic buildstamp generation'''
The key goal for the Builder's management of package staging is flexibly identifying generations of package files created over time. It is essential to maintain the package repository in terms that follow site conventions. The Builder achieves this via the &quot;buildstamp&quot; mechanism by which all package files are &quot;stamped&quot; with a text string embedded in the package file name and reflected in the package object's attributes.

While the buildstamp is exposed by both the Builder and Updater types as an optional parameter (and can hence be passed into the system), the Builder also implements the means of automatically generating standardized buildstamps of the following form:
&lt;code&gt;[tag-][major[.minor[.release]]][.build] (e.g. &quot;trunk-3.4.0.4378&quot;, &quot;3.4.0&quot;, &quot;4378&quot;, etc)&lt;/code&gt;

There are, therefore, three optional components to an automatically generated buildstamp:

# The tag is an arbitrary string often used to identify the kind of build that produced the package (e.g. &quot;trunk&quot;, &quot;release&quot;, etc)
# Up to three (major, minor, release) version numbers can be provided to form a &quot;dotted&quot; string (e.g. &quot;3&quot;, &quot;3.4&quot;, &quot;3.4.0&quot;, etc)
# A build number is automatically appended when the underlying source code management system supports it (e.g. Subversion &quot;last changed revision&quot; numbers, or Perforce &quot;change&quot; numbers).

Automatic buildstamp generation is enabled by:

# Optionally assigning a BuilderVersionTag resource, and/or ...
# Optionally assigning none, one, two or all three of the BuilderVersionMajor, BuilderVersionMinor and BuilderVersionRelease resources.
# If your source code management system supports build numbering (currently Subversion and Perforce), it will be automatically added to the generated buildstamp ...
# ... alternatively, assigning the BuilderVersionBuild resource to specify a build number will take precedence.
# You must assign the BuilderBuildstamp resource to trigger the storage of the automatically generated (or manually provided) buildstamp for use in the broader model

Note that an implication of this mechanism is that all packages staged by the Builder are given the same buildstamp.

= Commands =

Primary Commands:

* [[#Build]] - build source code and upload artifacts to the repository
* [[#Export]] - download Package artifacts from the repository and upload to another destination
* [[#Purge]] - remove unused Package definitions and artifacts

Secondary Commands:

* ''runBuildScript''
*  scmCheckout, setBuildstamp , repoImport, repoFind , repoExport, repoPurge, repoFindAndPurge

''italic'' commands should be overridden by subtypes to have specific implementations.

* [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Builder.html#Commands Builder Commands Reference]

== Build ==

The Build command is a workflow that performs the steps required to check-out and compile source, and import the resulting artifact into the package repository.

It requires a single (optional) option: &lt;code&gt;-buildstamp&lt;/code&gt;, to set the package-version number of the artifacts that are imported into the repository. If unset, then the buildstamp will either be automatically generated, or the value determined from [[Builder Settings and Attributes|Attributes defined for the Builder]].

Build executes these secondary commands:

# scmCheckout
# setBuildstamp
# ''runBuildScript''
# repoImport

The ''runBuildScript'' command simply invokes Ant on a buildfile if it exists. Subtypes that invoke different types of build tools should override this command.

* [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Builder.html#cmd_Build Reference]

== Export == 

The Export command is a workflow that retrieves the package artifact files from the package repository, and uploads those packages to another destination.

It invokes these secondary commands:

# repoFind - finds Packages in the repository matching criteria
# repoExport - downloads the Package artifacts, then uploads to a WebDAV URL or SCP destination

* [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Builder.html#cmd_Export Reference]

== Purge == 

The Purge command is a workflow that removes Package definitions from the repository and deletes the artifacts from the WebDAV storage.

It invokes these secondary commands:

# generateBuildstampExcludes - optionally creates an ''exclusion filter'' to prevent Packages that are in-use from being removed
# repoFindAndPurge - a workflow
## repoFind - find packages matching the criteria
## repoPurge - remove the found packages from the repository, and delete their artifacts

* [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Builder.html#cmd_Purge Reference]

= Example =

The Builder type defines an object that encapsulates the build life cycle
procedures for an application component. The build of a java web application
provides a simple and familiar use case that we can use as a representative
scenario.

The figure below illustrates these parts. A Builder named
&amp;quot;headlines&amp;quot; is defined to produce two packages -
headlines-2.0.1.war and appbase-2.01.jar. It takes as input
build configuration data providing key parameters describing such details
like: source code management connection information, and source code module lists.
The &lt;code&gt;scmCheckout&lt;/code&gt; command is parameterized to obtain the source code from the
the SCM repository. The &lt;code&gt;runBuildScript&lt;/code&gt; command is parameterized to invoke
the application build tool, Ant in this example.
Finally, the &lt;code&gt;repoImport&lt;/code&gt; command is parameterized to find
the packaged build artifacts produced by &lt;code&gt;runBuildScript&lt;/code&gt; to upload
and register the packages as deployable resources.    

[[Image:builder-example.png|example]]

= Check List =

# Identify the source code checkout procedure
# Discern the parameters to the builds cript
# Override the scmCheckout and runBuildScript commands in a derived Builder type
# Optionally, delegate the package creation to an exisitng Package class.

&lt;!--
= Rules of Thumb =
let subclasses implement behavior that can vary in workflow command components
--&gt;

= Related Types =

* [[Package Concepts]]
* [[Updater Concepts]]

Supertype:

* [[Deployment Concepts]]

{{Core Type Guide Linkback}}

[[Category:Builder]]</text>
    </revision>
  </page>
  <page>
    <title>Builder import file (no buildstamp)</title>
    <id>60</id>
    <revision>
      <id>13935</id>
      <timestamp>2010-11-10T15:24:44Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;-objects&quot; to &quot;-resources&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Builder&lt;/categorytree&gt;

Not everyone uses a buildstamp convention. This example shows how to upload a file that does not contain a buildstamp in the filename.

=Directory layout=
&lt;pre&gt;
top_dir
  |
  +--- src/               // source directory
  |
  `--- target/            // contains build artifacts
        |
        `--- moduleA      // war artifacts
	       |
	       `-- moduleA.war  // file to import
&lt;/pre&gt;

You can see the &quot;moduleA.war&quot; is the file to be imported.

=Command usage=
Import filename matching &quot;moduleA.war&quot; in directory top_dir/target:
&lt;pre&gt;
ctl -m Builder -c repoImport -- -targetdir top_dir/target \
    -filebase moduleA -requirebuildstamp false -extension war  \
    -type war -installroot /path/to/install/dir 
&lt;/pre&gt;

Note, the -requirebuildstamp option was specified to repoImport to not expect a buildstamp in the filename. This changes the file matching pattern to not expect a &quot;${separator}${buildstamp}&quot; component in the file name.

=Builder configuration=
To default the &lt;code&gt;repoImport&lt;/code&gt; options to those shown above define a [[Core_Type_Guide#Builder|Builder]] like so:

File listing: moduleA-nobuildstamp.xml
&lt;pre&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE project PUBLIC &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; 
    &quot;project.dtd&quot;&gt;
&lt;project&gt;
  &lt;!--
      **
      ** Defines Builder repoImport defaulting settings
      **
  --&gt;

  &lt;!-- 
    ** defaults option: -extension  
    --&gt;
  &lt;setting type=&quot;BuilderPackageExtension&quot; name=&quot;moduleA&quot; 
           description=&quot;File extension&quot; 
           settingValue=&quot;war&quot;/&gt;
  &lt;!-- 
    ** defaults option: -packagetype  
    --&gt;
  &lt;setting type=&quot;BuilderPackageType&quot; name=&quot;moduleA&quot; 
           description=&quot;Package control module&quot; 
           settingValue=&quot;war&quot;/&gt;
  &lt;!-- 
    ** defaults option: -installroot  
    --&gt;
  &lt;setting type=&quot;BuilderPackageInstallroot&quot; name=&quot;moduleA&quot; 
           description=&quot;Installation root directory&quot; 
           settingValue=&quot;/path/to/installroot&quot;/&gt;
  &lt;!-- 
    ** defaults option: -filebase  
    --&gt;
  &lt;setting type=&quot;BuilderPackageFilebase&quot; name=&quot;moduleA&quot; 
           description=&quot;The file base name&quot; 
           settingValue=&quot;moduleA&quot;/&gt;
  &lt;!-- 
    ** defaults option: -requirebuildstamp  
    --&gt;
  &lt;setting type=&quot;BuilderPackageRequireBuildstamp&quot; name=&quot;moduleA&quot; 
           description=&quot;Should package require a buildstamp in the filename&quot; 
           settingValue=&quot;false&quot;/&gt;

  &lt;!--
      **
      ** Defines Builder resource and its settings
      **
  --&gt;
  &lt;deployment 
      type=&quot;Builder&quot;
      name=&quot;moduleA&quot; 
      description=&quot;A builder object.&quot; 
      installRoot=&quot;top_dir/target&quot; 
      basedir=&quot;top_dir&quot;&gt;

   &lt;resources&gt;
      &lt;resource type=&quot;BuilderPackageExtension&quot;   name=&quot;moduleA&quot;/&gt;
      &lt;resource type=&quot;BuilderPackageType&quot;        name=&quot;moduleA&quot;/&gt;
      &lt;resource type=&quot;BuilderPackageInstallroot&quot; name=&quot;moduleA&quot;/&gt;
      &lt;resource type=&quot;BuilderPackageFilebase&quot;    name=&quot;moduleA&quot;/&gt;
      &lt;resource type=&quot;BuilderPackageRequireBuildstamp&quot; name=&quot;moduleA&quot;/&gt;
   &lt;/resources&gt;
   &lt;referrers&gt;
      &lt;resource type=&quot;Node&quot; name=&quot;localhost&quot;/&gt;
   &lt;/referrers&gt;

  &lt;/deployment&gt;
&lt;/project&gt;
&lt;/pre&gt;

To load this XML data use the [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_ProjectBuilder.html#cmd_load-resources load-resources] command:
&lt;pre&gt;
ctl -m ProjectBuilder -c load-resources -- -filename moduleA-nobuildstamp.xml
&lt;/pre&gt;

=Command usage=

After the moduleA-nobuildstamp Builder is defined, the command line options will have your defaults. Now just run repoImport with no args:
&lt;pre&gt;
ctl -t Builder -r moduleA -c repoImport
&lt;/pre&gt;

{{Manual/navbox}}

[[Category:Builder]]</text>
    </revision>
  </page>
  <page>
    <title>Builder import file (with buildstamp)</title>
    <id>62</id>
    <revision>
      <id>13936</id>
      <timestamp>2010-11-10T15:24:44Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;-objects&quot; to &quot;-resources&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Builder&lt;/categorytree&gt;

This section describes how to import a single file of the given buildstamp. The examples below assume a buildstamp convention representing a date/time stamp.

=Directory layout=
The command examples that follow correspond to a file directory layout described here:
&lt;pre&gt;
top_dir
  |
  |--- afile.xml          // a file
  |
  +--- src/               // source directory
  |
  `--- target/            // contains build artifacts
        |
        `--- moduleA      // moduleA artifacts
	       |
	       `-- moduleA-20080630.war   // file to be imported	
&lt;/pre&gt;
   
The top_dir represents some abitrary base directory where various files and subdirectories exist. The &quot;target&quot; subdirectory contains &quot;moduleA&quot; which in turn contains a build artifact that is to be uploaded to the repository.

=Command usage=
To import the &quot;moduleA-20080630.war&quot; file run repoImport like so:
&lt;pre&gt;
ctl -m Builder -c repoImport -- -targetdir top_dir/target \
    -filebase moduleA -buildstamp 20080630 -extension war  \
    -type war -installroot /path/to/install/dir 
&lt;/pre&gt;
    
After the repoImport command completes the file will have been uploaded to the repository and a new object defined with the specified metadata.

After the package has been registered you can query the repository and now see it listed:
&lt;pre&gt;
	$ ctl -p default -m Builder -c repoFind -- -packagetype war
	|
	|--(war) moduleA-20080630.war
&lt;/pre&gt;
    
=Builder configuration=
To default the &lt;code&gt;repoImport&lt;/code&gt; options to those shown above define a [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Builder.html Builder] like so:

File listing: moduleA-Builder.xml
&lt;pre&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE project PUBLIC &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; 
    &quot;project.dtd&quot;&gt;
&lt;project&gt;
  &lt;!--
      **
      ** Defines Builder repoImport defaulting settings
      **
  --&gt;

  &lt;!-- 
    ** defaults option: -extension  
    --&gt;
  &lt;setting type=&quot;BuilderPackageExtension&quot; name=&quot;moduleA&quot; 
           description=&quot;File extension&quot; 
           settingValue=&quot;war&quot;/&gt;
  &lt;!-- 
    ** defaults option: -packagetype  
    --&gt;
  &lt;setting type=&quot;BuilderPackageType&quot; name=&quot;moduleA&quot; 
           description=&quot;Package control module&quot; 
           settingValue=&quot;war&quot;/&gt;
  &lt;!-- 
    ** defaults option: -installroot  
    --&gt;
  &lt;setting type=&quot;BuilderPackageInstallroot&quot; name=&quot;moduleA&quot; 
           description=&quot;Installation root directory&quot; 
           settingValue=&quot;/path/to/installroot&quot;/&gt;
  &lt;!-- 
    ** defaults option: -filebase  
    --&gt;
  &lt;setting type=&quot;BuilderPackageFilebase&quot; name=&quot;moduleA&quot; 
           description=&quot;The file base name&quot; 
           settingValue=&quot;moduleA&quot;/&gt;

  &lt;!--
      **
      ** Defines Builder resource and its settings
      **
  --&gt;
  &lt;deployment 
      type=&quot;Builder&quot;
      name=&quot;moduleA&quot; 
      description=&quot;A builder object.&quot; 
      installRoot=&quot;top_dir/target&quot; 
      basedir=&quot;top_dir&quot;&gt;

   &lt;resources&gt;
      &lt;resource type=&quot;BuilderPackageExtension&quot;   name=&quot;moduleA&quot;/&gt;
      &lt;resource type=&quot;BuilderPackageType&quot;        name=&quot;moduleA&quot;/&gt;
      &lt;resource type=&quot;BuilderPackageInstallroot&quot; name=&quot;moduleA&quot;/&gt;
      &lt;resource type=&quot;BuilderPackageFilebase&quot;    name=&quot;moduleA&quot;/&gt;
   &lt;/resources&gt;
   &lt;referrers&gt;
      &lt;resource type=&quot;Node&quot; name=&quot;localhost&quot;/&gt;
   &lt;/referrers&gt;

  &lt;/deployment&gt;
&lt;/project&gt;
&lt;/pre&gt;

To load this XML data use the [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_ProjectBuilder.html#cmd_load-resources load-resources] command:
&lt;pre&gt;
ctl -m ProjectBuilder -c load-resources -- -filename moduleA-Builder.xml
&lt;/pre&gt;

=Command usage=

After the moduleA Builder is defined, the command line options will have your defaults. Now just run repoImport with buildstamp:
&lt;pre&gt;
ctl -t Builder -r moduleA -c repoImport -- -buildstamp 20080630
&lt;/pre&gt;

{{Manual/navbox}}

[[Category:Builder]]</text>
    </revision>
  </page>
  <page>
    <title>Builder import multiple files (with buildstamp)</title>
    <id>61</id>
    <revision>
      <id>14098</id>
      <timestamp>2010-11-10T15:35:29Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;ctl-depot&quot; to &quot;ctl-project&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Builder&lt;/categorytree&gt;

Some builds generate more than one artifact of the same type. This section describes how to import multiple package files that share the same buildstamp.

=Directory layout=
&lt;pre&gt;
top_dir
  |
  |--- afile.xml            
  |
  +--- src/                 // source directory
  |
  `--- target/              // contains build artifacts
        |
        |--- moduleA        // moduleA artifacts
	|      |
	|      `-- moduleA-20080630.war   // file to import
	|
        `--- moduleB         // moduleB artifacts
	       |
	       `-- moduleB-20080630.war   // file to import
&lt;/pre&gt;
     
The top_dir represents some arbitrary base directory where various files and subdirectories exist. The &quot;target&quot; subdirectory contains two subdirectories of its own - moduleA and moduleB - each of which contain a build artifact.

=Command usage=
Specify the -filebase argument with a regex, &quot;module.*&quot;, and a -max argument to import more packages than the default max of 1:
&lt;pre&gt;
ctl -m Builder -c repoImport -- -targetdir top_dir/target \
    -filebase &quot;module.*&quot; -buildstamp 20080630 -extension war  \
    -type war -installroot /path/to/install/dir -max 2
&lt;/pre&gt;

The regex looks for filebase patterns that begin with &quot;module&quot; and zero or more other characters. Other regex that would have worked:

* module(A|B)
* module[AB]

Specify regexes that you believe are sufficiently open or constricting as your needs dictate.

=Builder configuration=
To default the &lt;code&gt;repoImport&lt;/code&gt; options to those shown above define a {{Core Type Reference|Builder}} like so:

File listing: moduleAandB-Builder.xml
&lt;pre&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE project PUBLIC &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; 
    &quot;project.dtd&quot;&gt;
&lt;project&gt;
  &lt;!--
      **
      ** Defines Builder settings
      **
  --&gt;
  &lt;setting type=&quot;BuilderPackageExtension&quot; name=&quot;moduleAandB&quot; 
           description=&quot;File extension&quot; 
           settingValue=&quot;war&quot;/&gt;
  &lt;setting type=&quot;BuilderPackageType&quot; name=&quot;moduleAandB&quot; 
           description=&quot;Package control module&quot; 
           settingValue=&quot;war&quot;/&gt;
  &lt;setting type=&quot;BuilderImportMin&quot; name=&quot;moduleAandB&quot; 
           description=&quot;Minimum packages to import&quot; 
           settingValue=&quot;1&quot; settingType=&quot;script&quot;/&gt;
  &lt;setting type=&quot;BuilderImportMax&quot; name=&quot;moduleAandB&quot; 
           description=&quot;Maximum packages to import&quot; 
           settingValue=&quot;2&quot;/&gt;
  &lt;setting type=&quot;BuilderPackageInstallroot&quot; name=&quot;moduleAandB&quot; 
           description=&quot;Installation root directory&quot; 
           settingValue=&quot;/path/to/installroot&quot;/&gt;
  &lt;setting type=&quot;BuilderPackageFilebase&quot; name=&quot;moduleAandB&quot; 
           description=&quot;The file base name&quot; 
           settingValue=&quot;module.*&quot;/&gt;
  &lt;!--
      **
      ** Defines Builder resource
      **
  --&gt;
  &lt;deployment 
      type=&quot;Builder&quot;
      name=&quot;moduleAandB&quot; 
      description=&quot;A builder object.&quot; 
      installRoot=&quot;top_dir/target&quot; 
      basedir=&quot;top_dir/src&quot;&gt;
  &lt;!--
      **
      ** Reference the settings
      **
   --&gt;
   &lt;resources&gt;
      &lt;resource type=&quot;BuilderPackageExtension&quot; name=&quot;moduleAandB&quot;/&gt;
      &lt;resource type=&quot;BuilderPackageType&quot; name=&quot;moduleAandB&quot;/&gt;
      &lt;resource type=&quot;BuilderImportMin&quot; name=&quot;moduleAandB&quot;/&gt;
      &lt;resource type=&quot;BuilderImportMax&quot; name=&quot;moduleAandB&quot;/&gt;
      &lt;resource type=&quot;BuilderPackageInstallroot&quot; name=&quot;moduleAandB&quot;/&gt;
      &lt;resource type=&quot;BuilderPackageFilebase&quot; name=&quot;moduleAandB&quot;/&gt;
   &lt;/resources&gt;
   &lt;referrers&gt;
      &lt;resource type=&quot;Node&quot; name=&quot;localhost&quot;/&gt;
   &lt;/referrers&gt;

  &lt;/deployment&gt;
&lt;/project&gt;
&lt;/pre&gt;

To load this XML data use the [http://controltier.sourceforge.net/docs/latest/core/reference/user/ProjectBuilder/commands/load-resources.html load-resources] command:
&lt;pre&gt;
ctl -m ProjectBuilder -c load-resources -- -filename moduleAandB-Builder.xml
&lt;/pre&gt;

To then deploy the builder object the first time to the localhost node, be sure to run the [[CTL-DEPOT Command Reference|ctl-project]] command:
&lt;pre&gt;
ctl-project -p demo -a install
&lt;/pre&gt;

The output will show all the resources being installed:
&lt;pre&gt;
        &quot;Install&quot; command running for resource: (Builder) moduleA
        &quot;Install&quot; command running for resource: (Builder) moduleAandB
&lt;/pre&gt;

=Command usage=

After the &quot;moduleAandB&quot; Builder is defined you just need to specify the buildstamp:
&lt;pre&gt;
ctl -t Builder -r moduleAandB -c repoImport -- -buildstamp 20080630
&lt;/pre&gt;

{{Manual/navbox}}

[[Category:Builder]]</text>
    </revision>
  </page>
  <page>
    <title>Building ControlTier</title>
    <id>1890</id>
    <revision>
      <id>16389</id>
      <timestamp>2012-02-20T12:55:12Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Reverted SPAM bot edits</comment>
      <text xml:space="preserve">This describes the build process for ControlTier 3.5 and 3.6. (It is also possible to build each component manually without using the '''buildall.sh''' build script described below.)


Also see setting up the [[ControlTier CI Loop]]

== Prerequisites ==
* The build script is written in bash, so this requires a UNIX system. We build on Linux or Mac OS X. (Building on Cygwin is untested, but should work.)
* You must be connected to the internet, at least for the first build, because build dependencies will be pulled from the web. Dependencies pulled in this way include:
** Apache Ant 1.7.1 (patched)
** Apache Maven 1.0
** Grails 1.2.0
** Jetty
* wget or curl must be installed.
* The build process requires Java SDK to be already present on the system. 1.5 or 1.6 both work.
* The Subversion &quot;svn&quot; client must be available. 
* You need rpmbuild if you are going to build the RPMs.

== Set environment variables ==
* Set JAVA_HOME to your 1.5 or 1.6 SDK, and export it.
* Set BUILD_ROOT to a new location, such as ~/src/controltier.&lt;br /&gt;&lt;syntaxhighlight language=&quot;bash&quot;&gt;export BUILD_ROOT=~/src/controltier&lt;/syntaxhighlight&gt;

== Check out ControlTier tree ==
Make your build root and change into it, then check out the primary ControlTier source base into the &quot;ctiersvn&quot; directory.
&lt;syntaxhighlight language=&quot;bash&quot;&gt;
mkdir -p $BUILD_ROOT
cd $BUILD_ROOT
svn co https://controltier.svn.sourceforge.net/svnroot/controltier/branches/controltier-3-6-support ctiersvn
&lt;/syntaxhighlight&gt;

== Run the build script ==
Change into the ctiersvn directory and run the '''buildall.sh''' script.
&lt;syntaxhighlight language=&quot;bash&quot;&gt;
cd ctiersvn
sh buildall.sh
&lt;/syntaxhighlight&gt;
* We've only tested bash. If &lt;code&gt;sh&lt;/code&gt; is some other shell and it breaks, we'll gladly take patches to make it work (for &lt;code&gt;dash&lt;/code&gt;, for example).

When the build is complete, the installers will be at these locations:
* [[ZIP installer]]: $BUILD_ROOT/ctiersvn/installer/target/dist/ControlTier/zips/

== Usage ==
By default, this build script builds all of ControlTier and builds the zip installers. It is possible to build individual components by specifying build targets.

 sh buildall.sh ''[target1 [target2 [...]]]''

===Available targets===
* '''ctl''': [[ControlTier client]] and command dispatcher
* '''common''': Class libraries for all ControlTier web applications
* '''controltier_seed''': Default module library for ControlTier
* '''workbench''': [[Workbench]] web application and main ControlTier daemon (itnav webapp)
* '''commander_extension''': CTL extension allowing integration with ControlTier server
* '''ctl_bundle''': Client bundle (includes ctl, common, controltier_seed, commander_extension)
* '''ctl_center''': [[ControlCenter]] web application (job execution and event reporting)
* '''examples''': ControlTier out-of-the-box [[examples|example projects]]
* '''installer''': [[ZIP installer]] 
** ZIP installer artifact: $BUILD_ROOT/ctiersvn/installer/target/dist/ControlTier/zips/
* '''client_rpm''': ControlTier client RPM
* '''server_rpm''': ControlTier server [[RPM installer]] (includes client)
** RPMs: $BUILD_ROOT/ctiersvn/installer/target/rpm/RPMS/noarch/

===Default target list===
If no target is specified, the default target list is as follows: ''ctl common controltier_seed workbench commander_extension ctl_bundle ctl_center examples installer''

== Troubleshooting ==
* Often the reason one step of the build fails is because of a broken build in a previous step. Check back in the logs to see if anything in a previous build step had errors or warnings.
* If a Maven 1 build is interrupted while downloading an artifact from a repository, the build may fail unless you delete the incomplete file (so that it tries to get it again.)

[[Category:Building ControlTier]]
[[Category:Development]]</text>
    </revision>
  </page>
  <page>
    <title>Building ControlTier Software</title>
    <id>1608</id>
    <redirect />
    <revision>
      <id>10737</id>
      <timestamp>2009-12-12T21:08:44Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[Category:Building ControlTier]]</comment>
      <text xml:space="preserve">#REDIRECT [[:Category:Building_ControlTier]]</text>
    </revision>
  </page>
  <page>
    <title>Building Dukes Bank Project</title>
    <id>346</id>
    <revision>
      <id>15454</id>
      <timestamp>2011-08-26T23:07:59Z</timestamp>
      <contributor>
        <username>Dtrainor</username>
        <id>238</id>
      </contributor>
      <text xml:space="preserve">{{DukesBank}}

This page describes how to setup a project to support the Dukes Bank examples.

==Prerequisites==
This page assumes you have completed:
* [[Installation]] (ControlTier 3.3+)
* [[Server_startup_and_shutdown |ControlTier startup]]
* [[Dukes Bank system requirements]] (ie, currently works on Linux)

==Create project==

All of the documentation assumes that you are using the project named &quot;demo&quot;. You can create the &quot;demo&quot; project either graphically via Workbench or using the command line tool ctl-project.

If you haven't already created a project called &quot;demo&quot;. Go ahead and do so now using the directions below:

===Option 1: Create a project via Workbench===

Via Workbench:

 Go to the Admin page and push the &quot;Create Project&quot; button.

===Option 2: Create a project via the command line===

Run ctl-project's &quot;create&quot; action to create the CTL project name:

&lt;pre&gt;
ctl-project -p demo -a create
&lt;/pre&gt;

The &lt;code&gt;ctl-project&lt;/code&gt; command will ensure the CTL depot for the &quot;demo&quot; project has been initialized and the node registered to the ControlTier server.

Notes:
* This command might take a while to complete if this is the first interaction with the ControlTier server. This can take a long time due to the project being created and initialized and can take 3-10 minutes depending on the speed of the server processor(s).
** ''Project creation speedup is a high priority that will be addressed in 3.5''
* You can monitor the project creation activity by [[Project_setup#Confirming_the_completion_in_the_log|tailing the log files]].

===Load the Elements module library, if necessary===

If you're using ControlTier 3.6 you'll need to load the Elements library modules to the new project (since is it no longer included by default):

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[ctier@admin ~]$ ctl -p demo -m ProjectBuilder -c load-library -- -jar $CTL_HOME/lib/extensions/commander/jars/elements-seed-3.6.1.jar
Imported types defined in library: /opt/ctier/pkgs/ctl-3.6.0/lib/extensions/commander/jars/elements-seed-3.6.0.jar
&lt;/syntaxhighlight&gt;

==Register DukesBankProjectBuilder==

Your installation includes &quot;DukesBankProjectBuilder&quot;, a special type that you will use to prepare your project for the examples. 

Run the following command to register a new instance of DukesBankProjectBuilder on the ControlTier server if you are using a non-RPM installation of ControlTier:

&lt;pre&gt;
ctl -p demo -m ProjectBuilder -c Register -- -name dukesbank  -type DukesBankProjectBuilder -basedir $CTIER_ROOT/demo -installroot $CTIER_ROOT/target/demo -install
&lt;/pre&gt;
You should see output similar to below:
&lt;pre&gt;
Checking for existing object, (DukesBankProjectBuilder) dukesbank, in project, 'demo'...
Registered new object.
The object can be viewed in the server via URL: http://centos2:8080/itnav/instances/View.do?maprefUri=http://www.opendepo.org/ct/demo/Objects#obj_1&amp;depot=demo
Registering parent dependency to Node: centos2 ...
Dependency registered in project 'demo': (Node) centos2 -&gt; (DukesBankProjectBuilder) dukesbank
Installing registered object into local project name ...
Updating DukesBankProjectBuilder module ...
Getting: http://centos2:8080/jackrabbit/repository/controltier/projects/demo/publish/modules/DukesBankProjectBuilder-head.jar
To: /home/alexh/ctier/ctl/var/tmp/downloads/demo/DukesBankProjectBuilder-head.jar
Not modified - so not downloaded
Expanding: /home/alexh/ctier/ctl/var/tmp/downloads/demo/DukesBankProjectBuilder-head.jar into /home/alexh/ctier/ctl/projects/demo/modules/DukesBankProjectBuilder
Unable to convert list option to loop controls.
Updating properties ...
Updating process view file ...
Framework info:
Type module: /home/alexh/ctier/ctl/projects/demo/modules/DukesBankProjectBuilder
Object directory: /home/alexh/ctier/ctl/projects/demo/resources/DukesBankProjectBuilder/dukesbank
Object properties file: /home/alexh/ctier/ctl/projects/demo/resources/DukesBankProjectBuilder/dukesbank/var/resource.properties
Object process view file: /home/alexh/ctier/ctl/projects/demo/resources/DukesBankProjectBuilder/dukesbank/var/pview.xml
For more information about this object run: ctl -p demo -t DukesBankProjectBuilder -r dukesbank -c Properties
&lt;/pre&gt;

Note that if you are using the common client installation introduced with the [[RPM_installer|RPM installer]] CTIER_ROOT is not writable by a non-ctier user, so you should select base and installation directories locations for the DukesBankProjectBuilder that &lt;i&gt;can&lt;/i&gt; be written by your account. e.g.:

&lt;pre&gt;
[anthony@centos54 src]$ ctl -p demo -m DukesBankProjectBuilder -c Register -- -name dukesbank -type DukesBankProjectBuilder -basedir $HOME/demo -installroot $HOME/demo/target -install
Checking for existing object, (DukesBankProjectBuilder) dukesbank, in project, 'demo'...
Registered new object.
.
.
.
For more information about this object run: ctl -p demo -t DukesBankProjectBuilder -r dukesbank -c Properties
&lt;/pre&gt;

==Bootstrap the demo project==
With the DukesBankProjectBuilder object ready, you can now bootstrap the &quot;demo&quot; project using the &lt;code&gt;Prepare&lt;/code&gt; command. This command will carry out the following tasks:
# Downloads the 3rd party packages from Sourceforge. This package includes third party software to run Dukes Bank. See [[Building_Dukes_Bank_Project#Can.27t_get_demo-pkgs_.28no_direct_internet_access.29|the section below if you are behind a firewall or don't have direct internet access]].
# Uploads and registers the third party packages to the repository so they are available during deployment
# Generates the Dukes Bank management objects and registers them to the server
# Defines a set of jobs that let you manage the Dukes Bank service management tasks in JobCenter
# Prepares CTL to run the commands

NOTE: The &lt;code&gt;Prepare&lt;/code&gt; command will take a number of minutes to run. The biggest limiting factor is the download speed from SourceForge. The packages downloaded by this command are the 3rd party packages that make up the Duke's Bank Application stack. They are in a zip that is about 150MB total and could take anywhere from 5 to 30 minutes to download. If you prefer to download the zip first and then run the prepare command later, see [[Building_Dukes_Bank_Project#Can.27t_get_demo-pkgs_.28no_direct_internet_access.29|these instructions]].

Run the &quot;Prepare&quot; command:
&lt;pre&gt;
ctl -p demo -t DukesBankProjectBuilder -r dukesbank -c Prepare
&lt;/pre&gt;
... and you should see output similar to below:
&lt;pre&gt;
-------------------------------------------------
Loading dependency info for this object to the server...
-------------------------------------------------
-------------------------------------------------
Data uploaded. Looking up dependcy info...
-------------------------------------------------
Dependency registered in project 'dukesbank': (DukesBankProjectBuilder) demo -&gt; (zip) demo-pkgs-1.0.zip
-------------------------------------------------
Dependcy info found. Downloading 3rd party package ...
-------------------------------------------------
-------------------------------------------------
3rd party package downloaded.Uploading 3rd party packages in /home/demo/ctier/pkgs/dukesbank/dukesbank/demo to repository ...
-------------------------------------------------
-------------------------------------------------
Packages uploaded. Generating object model for Dukes Bank...
-------------------------------------------------
-------------------------------------------------
Model loaded. Uploading job definitions ...
-------------------------------------------------
-------------------------------------------------
Jobs loaded. Running ctl-project to install objects to CTL project project...
-------------------------------------------------
-------------------------------------------------
ctl-project completed.
-------------------------------------------------
Prepare actions completed successfully.
&lt;/pre&gt;

==Run the examples==

With the project bootstrapped for Dukes Bank you are ready to try out the examples. 

Begin with the [[Dukes Bank J2EE examples#Basic_Examples| basic Dukes Bank examples]]

==Troubleshooting==

===Error making server request===

&lt;pre&gt;
log4j:ERROR Could not connect to remote log4j server at [strongmad]. We will try again later.
java.net.ConnectException: Connection refused
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.PlainSocketImpl.doConnect(PlainSocketImpl.java:333)
	at java.net.PlainSocketImpl.connectToAddress(PlainSocketImpl.java:195)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:182)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:432)
	at java.net.Socket.connect(Socket.java:520)
	at java.net.Socket.connect(Socket.java:470)
	at java.net.Socket.&lt;init&gt;(Socket.java:367)
	at java.net.Socket.&lt;init&gt;(Socket.java:209)
	at org.apache.log4j.net.SocketAppender.connect(SocketAppender.java:203)
	at org.apache.log4j.net.SocketAppender.activateOptions(SocketAppender.java:160)
	at org.apache.log4j.config.PropertySetter.activate(PropertySetter.java:256)
	at org.apache.log4j.config.PropertySetter.setProperties(PropertySetter.java:132)
	at org.apache.log4j.config.PropertySetter.setProperties(PropertySetter.java:96)
	at org.apache.log4j.PropertyConfigurator.parseAppender(PropertyConfigurator.java:654)
	at org.apache.log4j.PropertyConfigurator.parseCategory(PropertyConfigurator.java:612)
	at org.apache.log4j.PropertyConfigurator.parseCatsAndRenderers(PropertyConfigurator.java:533)
	at org.apache.log4j.PropertyConfigurator.doConfigure(PropertyConfigurator.java:417)
	at org.apache.log4j.PropertyConfigurator.doConfigure(PropertyConfigurator.java:316)
	at org.apache.log4j.PropertyConfigurator.configure(PropertyConfigurator.java:324)
	at com.controltier.ctl.cli.CtlDepotSetupMain.&lt;init&gt;(CtlDepotSetupMain.java:76)
	at com.controltier.ctl.cli.CtlDepotSetupMain.main(CtlDepotSetupMain.java:91)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at launcher.CtlDepotSetupLauncher.main(CtlDepotSetupLauncher.java:34)
Project depot structure created: /Users/alexh/ctier/ctl/projects/demo
Invoking external setup script: /Users/alexh/ctier/pkgs/ctl-1.4/bin/commander-projectsetup.xml
Beginning Workbench client setup ...
Trying to override old definition of task document-property
com.controltier.ctl.cli.projectsetup.DepotSetupException: exception occurred in /Users/alexh/ctier/pkgs/ctl-1.4/bin/commander-projectsetup.xml: Error making server request to http://strongmad:8080/itnav: Error occurred while trying to authenticate to server: 
&lt;/pre&gt;

Possible causes:
* The ControlTier server is not running.

Resolutions:
* Check that server status and start it if necessary

===Could not find address===

&lt;pre&gt;
log4j:ERROR Could not find address of [centos].
java.net.UnknownHostException: centos: centos
	at java.net.InetAddress.getAllByName0(InetAddress.java:1145)
	at java.net.InetAddress.getAllByName(InetAddress.java:1072)
	at java.net.InetAddress.getAllByName(InetAddress.java:1008)
	at java.net.InetAddress.getByName(InetAddress.java:958)
	at org.apache.log4j.net.SocketAppender.getAddressByName(SocketAppender.java:265)
	at org.apache.log4j.net.SocketAppender.setRemoteHost(SocketAppender.java:286)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at org.apache.log4j.config.PropertySetter.setProperty(PropertySetter.java:205)
	at org.apache.log4j.config.PropertySetter.setProperty(PropertySetter.java:164)
	at org.apache.log4j.config.PropertySetter.setProperties(PropertySetter.java:129)
	at org.apache.log4j.config.PropertySetter.setProperties(PropertySetter.java:96)
	at org.apache.log4j.PropertyConfigurator.parseAppender(PropertyConfigurator.java:654)
	at org.apache.log4j.PropertyConfigurator.parseCategory(PropertyConfigurator.java:612)
	at org.apache.log4j.PropertyConfigurator.parseCatsAndRenderers(PropertyConfigurator.java:533)
	at org.apache.log4j.PropertyConfigurator.doConfigure(PropertyConfigurator.java:417)
	at org.apache.log4j.PropertyConfigurator.doConfigure(PropertyConfigurator.java:316)
	at org.apache.log4j.PropertyConfigurator.configure(PropertyConfigurator.java:324)
	at com.controltier.ctl.cli.AbstractCtlMain.parseArgs(AbstractCtlMain.java:147)
	at com.controltier.ctl.cli.BaseCtlMain.parseArgs(BaseCtlMain.java:142)
	at com.controltier.ctl.cli.CtlMain.parseArgs(CtlMain.java:135)
	at com.controltier.ctl.cli.AbstractCtlMain.run(AbstractCtlMain.java:224)
	at com.controltier.ctl.cli.CtlMain.main(CtlMain.java:79)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at launcher.CtlLauncher.main(CtlLauncher.java:34)
project not found: 'demo'
&lt;/pre&gt;


Possible causes:
* Misconfigured server address. Ensure the server hostname is set correctly and can be resolved.

Resolutions:
* Check server hostname and reinstall the software providing the correct hostnames


===Can't get demo-pkgs (no direct internet access)===

Possible causes:
* The host where you are running the demo is behind a firewall or can't download directly from the internet.
* Or, you already downloaded the demo-pkgs file and want to re-use it.

The &lt;code&gt;Prepare&lt;/code&gt; command might fail due to a failure to download the demo-pkgs zip file. You will see the &quot;Connection timed out&quot; or another connection related error.
Here's some example output showing a representative error message:
&lt;pre&gt;
.
.
.
Getting: http://internap.dl.sourceforge.net/sourceforge/moduleforge/demo-pkgs-... 
To: /home/rghorpade/apps/ctier/target/demo/demo-pkgs-1.2.zip 
Error getting http://internap.dl.sourceforge.net/sourceforge/moduleforge/demo-pkgs-... 
to /home/rghorpade/apps/ctier/target/demo/demo-pkgs-1.2.zip 
Error handler caught failed command execution: demo-pkgs-1.2.zip[zip]- 
&gt;get. reason: The following error occurred while executing this line: 

/home/rghorpade/apps/ctier/ctl/projects/demo/modules/Package/commands/ 
get.xml:43: The following error occurred while executing this line: 
/home/rghorpade/apps/ctier/ctl/projects/demo/modules/Package/commands/ 
get.xml:24: java.net.ConnectException: Connection timed out 
&lt;/pre&gt;

Resolution:

* Download the demo-pkgs (using multiple hops) 
** Saving the file locally to the demo machine is most convenient (e.g., $CTIER_ROOT/ctl/var/tmp/demo-pkgs-1.2.zip)
* Declare a different URL to the demo-pkgs by editing this XML file: &lt;code&gt;$CTL_BASE/modules/DukesBankProjectBuilder/objects/demo-pkgs-1.2.zip.xml&lt;/code&gt;

The file listing below shows the &lt;code&gt;repoUrl&lt;/code&gt; value has been changed to a local path instead of the URL accessible from the internet: 
* eg, change:      repoUrl=&quot;http://internap.dl.sourceforge.net/sourceforge/moduleforge/demo-pkgs-1.2.zip&quot;  to: &lt;code&gt;repoUrl=&quot;file:///Users/alexh/ctier/ctl/var/tmp/demo-pkgs-1.2.zip&quot;&lt;/code&gt;

File Listing: demo-pkgs-1.2.zip.xml
&lt;pre&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE project PUBLIC &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot;
&quot;project.dtd&quot;&gt;
&lt;project&gt;

  &lt;package 
      type=&quot;zip&quot;
      name=&quot;demo-pkgs-1.2.zip&quot;
      version=&quot;1.0&quot; 
      release=&quot;&quot;
      buildtime=&quot;&quot; 
      arch=&quot;noarch&quot; 
      filename=&quot;demo-pkgs-1.2.zip&quot; 
      filetype=&quot;zip&quot; 
      base=&quot;demo-pkgs&quot; 
      installroot=&quot;${resource.attribute.targetdir}/demo&quot; 
      repoUrl=&quot;file:///Users/alexh/ctier/ctl/var/tmp/demo-pkgs-1.2.zip&quot;
      releasetag=&quot;&quot; 
      installrank=&quot;1&quot; 
      restart=&quot;false&quot; 
      vendor=&quot;&quot;
      description=&quot;An archive of the Demo package dependencies&quot;/&gt;

&lt;/project&gt;
&lt;/pre&gt;


* Next, download the demo-pkgs zip through multiple hops or any other way you can indirectly get the file to the demo host. This step will vary based on your network and security environment.
** Save it the file path specified in the &lt;code&gt;repoUrl&lt;/code&gt; attribute above

The following example shows the use of the &lt;code&gt;curl&lt;/code&gt; utility to download the file locally.
&lt;pre&gt;
curl http://internap.dl.sourceforge.net/sourceforge/moduleforge/demo-pkgs-1.2.zip -r ~/ctier/ctl/var/tmp/demo-pkgs-1.2.zip 
&lt;/pre&gt;

While the example used curl to download the file, you could use any other preferred web client to get the file (e.g, wget).  

Copy the downloaded zip to the host you are running the demo. Eg,
&lt;pre&gt;
scp $CTL_BASE/var/tmp/demo-pkgs-1.2.zip demo@demo-host:~/ctier/ctl/var/tmp/demo-pkgs-1.2.zip
&lt;/pre&gt;

Now that the file is present on the host where the demo runs and you have modified repoUrl attribute in the demo-pkgs-1.2.zip.xml file,  run the Prepare command again. You should see output similar to below:

&lt;pre&gt;
Packages-Install invoking: demo-pkgs-1.2.zip[zip]-&gt;Install -installroot /Users/alexh/ctier/target/demo/demo
Start: &quot;Install object and run the package installation cycle.&quot; commands: assertPackageIsInstalled
begin workflow command (1/1) -&gt; &quot;assertPackageIsInstalled -installroot /Users/alexh/ctier/target/demo/demo&quot; ...
Executing ant file: /Users/alexh/ctier/ctl/projects/demo/modules/Package/bin/is-installed.xml
Running handler command: installPackage
begin workflow command (1/5) -&gt; &quot;installDependencies -filename demo-pkgs-1.2.zip -installroot /Users/alexh/ctier/target/demo/demo -url file:///Users/alexh/ctier/ctl/var/tmp/demo-pkgs-1.2.zip&quot; ...
Dispatching command 'Install' to objects:  ...
end workflow command (1/5) -&gt; &quot;installDependencies -filename demo-pkgs-1.2.zip -installroot /Users/alexh/ctier/target/demo/demo -url file:///Users/alexh/ctier/ctl/var/tmp/demo-pkgs-1.2.zip&quot;
begin workflow command (2/5) -&gt; &quot;prepare -filename demo-pkgs-1.2.zip -installroot /Users/alexh/ctier/target/demo/demo -url file:///Users/alexh/ctier/ctl/var/tmp/demo-pkgs-1.2.zip&quot; ...
end workflow command (2/5) -&gt; &quot;prepare -filename demo-pkgs-1.2.zip -installroot /Users/alexh/ctier/target/demo/demo -url file:///Users/alexh/ctier/ctl/var/tmp/demo-pkgs-1.2.zip&quot;
begin workflow command (3/5) -&gt; &quot;get -filename demo-pkgs-1.2.zip -installroot /Users/alexh/ctier/target/demo/demo -url file:///Users/alexh/ctier/ctl/var/tmp/demo-pkgs-1.2.zip&quot; ...
Getting: file:/Users/alexh/ctier/ctl/var/tmp/demo-pkgs-1.2.zip
To: /Users/alexh/ctier/target/demo/demo/demo-pkgs-1.2.zip
end workflow command (3/5) -&gt; &quot;get -filename demo-pkgs-1.2.zip -installroot /Users/alexh/ctier/target/demo/demo -url file:///Users/alexh/ctier/ctl/var/tmp/demo-pkgs-1.2.zip&quot;
begin workflow command (4/5) -&gt; &quot;extract -filename demo-pkgs-1.2.zip -installroot /Users/alexh/ctier/target/demo/demo -url file:///Users/alexh/ctier/ctl/var/tmp/demo-pkgs-1.2.zip&quot; ...
&lt;/pre&gt;

Notice it now is going to do a get on the local file and precedes immediately to the next step.

[[#Bootstrap_the_demo|Go back to Prepare]]</text>
    </revision>
  </page>
  <page>
    <title>Building PioneerCycling Project</title>
    <id>792</id>
    <revision>
      <id>14102</id>
      <timestamp>2010-11-10T15:35:36Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;ctl-depot&quot; to &quot;ctl-project&quot;</comment>
      <text xml:space="preserve">[[Image:PioneerCycling.gif|256px]]  

This is part of the PioneerCycling portion of the [[ControlTier and ATG | ATG/PioneerCycling ControlTier Demo]] 
==Overview==
This page describes how to setup a project to support the ATG PioneerCycling demo.

==Prerequisites==
[[Image:stop-medium.png]] These demos have been designed for and tested assuming that you have the following dependencies:
===Dependencies===
* ControlTier 3.4.3+ Installer. See: [[Installation]]
* Whichever CentOS/Redhat release is compatible with ATG9.1  with at least 4GB disk and 1GB memory
* Subversion client version 1.3, or later
** Subversion may require an upgrade since ControlTier&amp;apos;s Continuous Integration modules require a subversion client with xml support (subversion 1.1 for example does not support xml):
&lt;pre&gt;
[demo@centos45 ctier]$ rpm -q subversion
subversion-1.4.6-0.1.el4.rf
&lt;/pre&gt;If subversion version is not 1.3 or higher, execute the following procedure to download and upgrade subversion:
&lt;pre&gt;
wget ftp://rpmfind.net/linux/dag/redhat/el4/en/i386/dag/RPMS/subversion-1.4.6-0.1.el4.rf.i386.rpm
sudo rpm -U subversion-1.4.6-0.1.el4.rf.i386.rpm
&lt;/pre&gt;
* The specific JBoss EAP 4.2 version that is certified with ATG 9.1
* Requires ATG 9.1

===Setup the ATG PioneerCycling  [[Image:pioneerCycling.gif|256px]] Sample Application===
 The ATG/ControlTier demos use a sample application called PioneerCycling.
You will need to [[Building PioneerCycling Project|Setup PioneerCycling]] before proceeding with the demos.

==Create project==

All of the demo documentation assumes that you are using the project named &quot;PioneerCycling&quot;. You can create the &quot;PioneerCycling&quot; project either graphically via Workbench or using the command line tool ctl-project.

If you haven't already created a project called &quot;PioneerCycling&quot;. Go ahead and do so now using the directions below:

===Option 1: Create a project via Workbench===

Via Workbench:

 Go to the Admin page and push the &quot;Create Project&quot; button.

===Option 2: Create a project via the command line===

Run ctl-project's &quot;create&quot; action to create the CTL project name:

&lt;pre&gt;
ctl-project -p PioneerCycling -a create
&lt;/pre&gt;

The &lt;code&gt;ctl-project&lt;/code&gt; command will ensure the CTL depot for the ''PioneerCycling'' project has been initialized and the node registered to the ControlTier server.

Notes:
* This command might take a while to complete if this is the first interaction with the ControlTier server. This can take a long time due to the project being created and initialized and can take 3-10 minutes depending on the speed of the server processor(s).
** ''Project creation speedup is a high priority that will be addressed in 3.5''
* You can monitor the project creation activity by [[Project_setup#Confirming_the_completion_in_the_log|tailing the log files]].

==Download and Import the ATG Solution Library==

* Navigate to the  [http://sourceforge.net/project/showfiles.php?group_id=203118&amp;package_id=248757 ModuleForge ATG Solution Library Package] page and download the latest version of the seed jar file.
* Navigate to [http://localhost:8080/itnav/ Workbench ], ensure PioneerCycling project is selected and select Admin: [[ Image:pioneerCyclingAdmin.gif ]]
* Select Import Seed: [[ Image:pioneerCyclingImportSeed.gif ]]
* Import the seed into the project: [[ Image:pioneerCyclingChooseFile.gif ]]

==Register AtgPioneerCyclingProjectBuilder==

Ater uploading the ATG solution library, it includes &quot;AtgPioneerCyclingProjectBuilder&quot;, a special type that you will use to prepare your project for the demo. 

Run the following command to register a new instance of AtgPioneerCyclingProjectBuilder on the ControlTier server:
&lt;pre&gt;
ctl -p PioneerCycling -m ProjectBuilder -c Register -- \
      -name pioneerCycling  -type AtgPioneerCyclingProjectBuilder \
      -basedir $CTIER_ROOT/demo/atg -installroot $CTIER_ROOT/demo/atg \
      -install
&lt;/pre&gt;

Note that the installroot of this project builder determines where all the files associated with the demonstration are installed. e.g. If you have disk constrains, or are using the RPM-based installation of the ControlTier framework, you may wish to change this value.

If you are running the RPM version of the ControlTier server, then take care to ensure that the &quot;ctier&quot; user can write whichever directory you designate for the demonstration.

==Bootstrap the demo==
With the AtgPioneerCyclingProjectBuilder object ready, you can now bootstrap &quot;PioneerCycling&quot; project using the &lt;code&gt;Prepare&lt;/code&gt; command. This command will carry out the following tasks:
# Downloads the 3rd party packages from Sourceforge. This package includes third party software to run PioneerCycling. See [[Building_Dukes_Bank_Project#Can.27t_get_demo-pkgs_.28no_direct_internet_access.29|the section below if you are behind a firewall or don't have direct internet access]].
# Uploads and registers the third party packages to the repository so they are available during deployment
# Generates the PioneerCycling management objects and registers them to the server
# Defines a set of jobs that let you manage the PioneerCycling service management tasks in JobCenter
# Prepares CTL to run the commands

NOTE: The &lt;code&gt;Prepare&lt;/code&gt; command will take a number of minutes to run. The biggest limiting factor is the download speed from SourceForge. The packages downloaded by this command are the 3rd party packages that make up the Duke's Bank Application stack. They are in a zip that is about 500MB total and could take anywhere from 15 to 45 minutes to download. If you prefer to download the zip first and then run the prepare command later, see [[Building_Dukes_Bank_Project#Can.27t_get_demo-pkgs_.28no_direct_internet_access.29|these instructions]].

Run the &quot;Prepare&quot; command:
&lt;pre&gt;
[demo@centos45 projects]$ ctl -p PioneerCycling -t AtgPioneerCyclingProjectBuilder -r pioneerCycling -c Prepare 
&lt;/pre&gt;
... and you should see output similar to below:
&lt;pre&gt;
Checking for existing object, (AtgPioneerCyclingProjectBuilder) pioneerCycling, in project, 'PioneerCycling'...
Registered new object.
The object can be viewed in the server via URL: http://charles-scotts-macbook-pro-15.local:8080/itnav/instances/View.do?maprefUri=http://www.opendepo.org/ct/PioneerCycling/Objects#obj_3&amp;depot=PioneerCycling
Registering parent dependency to Node: centos45.local ...
Dependency registered in project 'PioneerCycling': (Node) centos45.local -&gt; (AtgPioneerCyclingProjectBuilder) pioneerCycling
Installing registered object into local project name ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/AtgPioneerCyclingProjectBuilder-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/AtgPioneerCyclingProjectBuilder-head.jar
Created dir: /home/demo/ctier/ctl/projects/PioneerCycling/modules/AtgPioneerCyclingProjectBuilder
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/AtgPioneerCyclingProjectBuilder-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/AtgPioneerCyclingProjectBuilder
Attempting to get AtgProjectBuilder-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/AtgProjectBuilder-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/AtgProjectBuilder-head.jar
Created dir: /home/demo/ctier/ctl/projects/PioneerCycling/modules/AtgProjectBuilder
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/AtgProjectBuilder-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/AtgProjectBuilder
Attempting to get ProjectBuilder-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/ProjectBuilder-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/ProjectBuilder-head.jar
Created dir: /home/demo/ctier/ctl/projects/PioneerCycling/modules/ProjectBuilder
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/ProjectBuilder-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/ProjectBuilder
Attempting to get Builder-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/Builder-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/Builder-head.jar
Created dir: /home/demo/ctier/ctl/projects/PioneerCycling/modules/Builder
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/Builder-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/Builder
Attempting to get Deployment-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/Deployment-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/Deployment-head.jar
Created dir: /home/demo/ctier/ctl/projects/PioneerCycling/modules/Deployment
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/Deployment-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/Deployment
Created dir: /home/demo/ctier/ctl/projects/PioneerCycling/resources/AtgPioneerCyclingProjectBuilder/pioneerCycling/bin
Created dir: /home/demo/ctier/ctl/projects/PioneerCycling/resources/AtgPioneerCyclingProjectBuilder/pioneerCycling/logs
Created dir: /home/demo/ctier/ctl/projects/PioneerCycling/resources/AtgPioneerCyclingProjectBuilder/pioneerCycling/var
Created dir: /home/demo/ctier/ctl/projects/PioneerCycling/resources/AtgPioneerCyclingProjectBuilder/pioneerCycling/var/transforms
Updating process view file ...
Process View definition updated.
For more information about this object run: ctl -p PioneerCycling -t AtgPioneerCyclingProjectBuilder -r pioneerCycling -c Properties
&lt;/pre&gt;

* Upload/Register ATG Software and License Packages.  See [[ATG Software and Licenses]]

==Run the demo==

With the project bootstrapped for PioneerCycling you are ready to try out the demo. 

Begin with [[ControlTier and ATG#Basic Demos|ControlTier/ATG demos]]

[[Category:ATG]]</text>
    </revision>
  </page>
  <page>
    <title>Bulk Node registration</title>
    <id>328</id>
    <revision>
      <id>16452</id>
      <timestamp>2012-02-22T12:01:06Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <comment>Undo revision 15469 by [[Special:Contributions/Petrachaney|Petrachaney]] ([[User talk:Petrachaney|talk]]) Removed SPAM bot edit</comment>
      <text xml:space="preserve">&lt;noinclude&gt;&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Projects&lt;/categorytree&gt;&lt;/noinclude&gt;
Information about the [[Node|Nodes]] in your environment can be registered to the [[ControlTier server]] using a [[project.xml]] file and the &lt;code&gt;node&lt;/code&gt; tag. 

If you install the ControlTier client, nodes are registered to a project by [[ctl-project]] during [[project setup]] but this page describes how to use an XML file to declare many nodes inside one file and then use [[ProjectBuilder]] to load their definitions. The clients obtain this data from the server as [[resources.xml]].

==Definition==

Create a [[project.xml]] file and use the [[Project-v10.xml#node|node]] tag to declare node metadata. Node tag attributes convey basic metadata described below:

{{Project.xml/tags/node}}

The example file called &quot;nodes.xml&quot; below defines two nodes: ubuntu and centos54-vm1. Each node declares its &lt;code&gt;hostname&lt;/code&gt; value as its IP address and they both declare the use of a common &lt;code&gt;ctlUsername&lt;/code&gt; value, &quot;demo&quot;.

The hostname and ctlUsername values are used for SSH connections during command dispatch (analogous to saying ssh ''ctlUsername''@''hostname'') . No &lt;code&gt;ctlPassword&lt;/code&gt; values were declared which means key-based authentication will be used.

File listing: nodes.xml
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;!DOCTYPE project PUBLIC
        &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; &quot;project.dtd&quot;&gt;
&lt;project&gt;

  &lt;node name=&quot;ubuntu&quot; type=&quot;Node&quot;
    description=&quot;an ubuntu host&quot;
    hostname=&quot;172.16.167.211&quot;
    osArch=&quot;i386&quot; osFamily=&quot;unix&quot; osName=&quot;Linux&quot; osVersion=&quot;2.6.27-7-generic&quot;
    ctlUsername=&quot;demo&quot; 
    tags=&quot;mac,development&quot;/&gt;

  &lt;node name=&quot;centos54-vm1&quot; type=&quot;Node&quot;
    description=&quot;a centos host&quot;
    hostname=&quot;172.16.167.129&quot;
    osArch=&quot;i686&quot; osFamily=&quot;unix&quot; osName=&quot;Linux&quot; osVersion=&quot;2.6.18-164.el5&quot;
    ctlUsername=&quot;demo&quot; 
    tags=&quot;server,qa&quot;/&gt;

&lt;/project&gt;
&lt;/syntaxhighlight&gt;

==Loading the definition==

{{Notice|Before you load the Node data, be sure the project has already been created. See [[Creating a project]] for instructions.}}

On a host where the ControlTier client has been installed and setup, run ProjectBuilder's [http://controltier.sourceforge.net/docs/snapshot/core/reference/user/ProjectBuilder/commands/load-resources.html load-resources] command and specify the XML file.

Here &lt;code&gt;load-resources&lt;/code&gt; is used to load the &quot;nodes.xml&quot; file into the project called &quot;demo&quot;:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -p demo -m ProjectBuilder -c load-resources -- -filename nodes.xml
.
.
Batch request performed successfully.
&lt;/syntaxhighlight&gt;

Successful completion will result with a &quot;Batch request performed successfully.&quot; message.

==Confirming access==

With the hosts defined as Nodes in the project's resource model, it is important to confirm access for the command dispatcher. Do this by running a trivial command across all hosts via the ctl-exec command like so:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl-exec -p demo --keepgoing -I '.*' -- uname -a
&lt;/syntaxhighlight&gt;

Output from a successful run of the &lt;code&gt;uname&lt;/code&gt; command would look similar to the messages below:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[alexh@strongbad ctl-exec][INFO] Darwin strongbad 10.5.0 Darwin Kernel Version 10.5.0: Fri Nov  5 23:20:39 PDT 2010; root:xnu-1504.9.17~1/RELEASE_I386 i386
[demo@ubuntu ctl-exec][INFO] Linux ubuntu 2.6.27-7-generic #1 SMP Fri Oct 24 06:42:44 UTC 2008 i686 GNU/Linux
[demo@centos54-vm1 ctl-exec][INFO] Linux ubuntu 2.6.27-7-generic #1 SMP Fri Oct 24 06:42:44 UTC 2008 i686 GNU/Linux
&lt;/syntaxhighlight&gt;

Let's imagine the value specifying &lt;code&gt;ctlUsername&lt;/code&gt; for the ubuntu Node was incorrect (e.g., a bogus &quot;demox&quot; login) . An incorrect ctlUsername value would cause an error during command dispatch.
Here's an example message indicating such an SSH related problem. In this case, a JSchException is thrown because the erroneous &quot;demox&quot; value was used in ubuntu's &lt;code&gt;ctlUsername&lt;/code&gt; attribute.

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[demox@ubuntu ctl-exec][ERROR] Failed execution for node: ubuntu: com.jcraft.jsch.JSchException: Auth cancel
error: Execution failed on the following 1 nodes: [ubuntu]
error: Execute this command to retry on the failed nodes:
	ctl-exec -K -p demo -I name=ubuntu -- uname -a
&lt;/syntaxhighlight&gt;

The &lt;code&gt;Auth cancel&lt;/code&gt; message above shows that when connecting to the ubuntu Node an SSH authentication error occurred. It is possible to mimic the command dispatcher's SSH connection request to ubuntu like so:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ssh -I $(awk '/framework.ssh.keypath/ {print $3}' $CTL_BASE/etc/framework.properties) demox@ubuntu uname -a
&lt;/syntaxhighlight&gt;

The awk command parses the client configuration to lookup the path to the SSH identity file. Had the ctlUsername value been correct and an &quot;Auth cancel&quot; error still occurred it's probable that server's public key was not added to the target hosts user's authorized_keys file.

==Querying==

Use [[CTL-EXEC_Command_Reference#Listing_Mode|ctl-exec listing mode]] to print out the registered nodes.

''Example''

List the nodes defined in the &quot;demo&quot; project resource model:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ ctl-exec -p demo
ubuntu centos54-vm1
&lt;/syntaxhighlight&gt;


{{Installation/navbox}}
{{Guide/navbox|state=uncollapsed}}


[[Category:Projects]]
[[Category:Node]]</text>
    </revision>
  </page>
  <page>
    <title>Bulk client installation</title>
    <id>1622</id>
    <redirect />
    <revision>
      <id>10862</id>
      <timestamp>2009-12-12T23:57:55Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>moved [[Bulk client installation]] to [[ZIP installer (multiple-clients)]]</comment>
      <text xml:space="preserve">#REDIRECT [[ZIP installer (multiple-clients)]]</text>
    </revision>
  </page>
  <page>
    <title>CLI Installer</title>
    <id>886</id>
    <redirect />
    <revision>
      <id>4815</id>
      <timestamp>2009-05-02T05:39:05Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <comment>[[CLI Installer]] moved to [[CLI installer]]</comment>
      <text xml:space="preserve">#REDIRECT [[CLI installer]]</text>
    </revision>
  </page>
  <page>
    <title>CLI installer</title>
    <id>1609</id>
    <redirect />
    <revision>
      <id>16642</id>
      <timestamp>2012-02-23T15:39:01Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Undo revision 15471 by [[Special:Contributions/Kamearobinson|Kamearobinson]] ([[User talk:Kamearobinson|talk]]) Reverting SPAM bot edits</comment>
      <text xml:space="preserve">#REDIRECT [[ZIP installer]]</text>
    </revision>
  </page>
  <page>
    <title>CTIP - Enhanced Configuration Life cycle</title>
    <id>446</id>
    <revision>
      <id>16383</id>
      <timestamp>2012-02-20T12:22:25Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Undo revision 15501 by [[Special:Contributions/Rosalynbernard|Rosalynbernard]] ([[User talk:Rosalynbernard|talk]]) Reverted SPAM bot edit</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;ControlTier Improvement Process&lt;/categorytree&gt;
==Abstract==
Enhance the configuration life cycle to support the modeling, control, release and audit of application configuration artifacts. Artifacts are modeled as documents generated from a set of templates and configuration setting resources.

Authors: [[User:ahonor|Ahonor]], [[User:ashortland|Ashortland]], [[User:Mkittleson|Mkittleson]], [[User:Bdiehl |Bdiehl]]

Status: Draft

==Description==

Currently, the 3.4.0 release of the ControlTier software provides for the generation of configuration documents, managed by the &lt;code&gt;Configure&lt;/code&gt; workflow command.  The configuration life cycle must be broadened to handle other life cycle steps to support desired use cases described in the section below.

===Use cases===

====Provision working configuration files====
Provisioning entails the generation of a working configuration document based on:

# static ready to use files, or
# dynamically from templates and resource data, or
# from a particular snapshot to replace the existing file.

The Configure workflow should be broadened to support each of the following:

The first two items are currently managed by the &lt;code&gt;Docs-Generate&lt;/code&gt; command but typically, the generation is driven by custom logic inside the Docs-Generate implementation. The generation should be driven from the object's resource model where document registrations are accessible.

====Monitor deployed configuration files====
After generation, the configuration life cycle should provide a means to monitor and detect changes to generated documents. This includes steps to
* create spapshot copies,
* check if file was modified, and
* report modifications
* on the fly
* automated on a schedule (periodically)
* alerts when configurations have shifted from the last known provisioned version

There is a command called &lt;code&gt;Docs-Verify&lt;/code&gt; that has a limited generic implementation that can do these verifications so long as they are transform-based document registrations. 
This capability should be broken down into finer grained steps to provide a more open ended skeletal design.

====Comparisons====
It is useful to compare the current configuration document to previous copies to understand the history of change but also to support trouble shooting procedures where file differences are needed.
The following document comparison operations should be included:
* compare to current snapshot
* compare to specified revision
* compare to current copy across hosts
* compare across sites: one environment configurations (content and directories) to another

Additional:
* directory structures
* Ability to designate and ignore immaterial differences (like url or directory configurations for example); this may involve pattern matching:    /dir1/dir2/xxxConstant/config where xxx may be different from environment to environment, but the rest has to follow the standard
* Gui presentation of comparisons should emulate eclipse comparisons, side by side, differences and what is the same


The &lt;code&gt;Docs-Verify&lt;/code&gt; in the present version uses the Unix utility, &quot;diff&quot;, as the underlying utility to show differences. A cross-platform alternative will be required.

====Staging control====
This refers to identifying a change that is expected to be done to production, to the internal version, to be provisioned, or to a designated template that would then be used for provisioning.   This staged element could also be versioned of itself, and tagged to correspond to where it was provisioned.

* Prepared configuration for next provision (deploy)
* Which ones have been staged but not yet promoted
* Masking of configurations – provisioning one line change for example
* Main template standard
* Other standards
* Which configurations are using which standard as a base
* Last provisioned version for each environment
* Ability to look at one configuration or a group of configuration as a “package”
* Ability to isolate environments hierarchically for compares or other actions
* All under one Apache, for example
* All for one company (&quot;Acme&quot; for example)
* All with a certain attribute (tags) 

====Ticketing====
* Alerts could generate trouble tickets (restart request because the site is down for example)

====Security====

* Super user
* Non-super user
* Security levels on different activities
* Security  control on environments
* Does it hook into LDAP, or does it have to be set up within the tool 

====Reporting====

# List of document changes made to an individual server or environment by time period.
## Configuration changes: who, what, when, where
## Configuration creep outside of authorized changes done in the tool (from monitoring)
# List of which Services are in compliance with defined configuration templates and which are out of compliance.
# Report of all changes made across the application infrastructure, by Service or Site
## Configurations that differ from template standard
# Report of the Services by type, as well as all the configuration documents being managed.
## Configurations being tracked (lay of the land)
# Report of changes to the application infrastructure between two points in time.
# Report showing a before and after view of which configuration items changed and how they changed.

====Alerts====
* Current alerts
* Alerts sent via email
* Alerts to be acknowledged via email (from blackberry)
* Alerts, total, acknowledged, time to acknowledge, etc
* Tracking of alerts and acknowledgements
* View of alerts that have not been acknowledged
* Statistics of acknowledged alerts and unacknowledged, timeframes, etc
* 2nd level escalation of unacknowledged alerts with a configurable timeframe
* Alerts based on events (configurable) such as
**  Monitored configurations shifted
**  Service is down
**  Other (log file size?)

''Note: Alerts may be broken out into their own CTIP''

==Proposed Changes==

===Life cycle Interactions===

The diagram below describes how the enhanced configuration life cycle can detect and compare changes to configuration document with respect to a previous snapshot.

[[Image:config-drift-interactions.png]]


===Extend Reporting===

====ReportCenter UI changes====
The ReportCenter UI currently categorizes report events based on these categories: command, model, job. This scheme does not support the kinds of views these use case scenarios require.

A new categorization scheme to facilitate audit views will be proposed in an external CTIP.

====New report views====
The following reporting views support auditing configuration changes:

* Means to aggregate configuration tracking results into a single report page
* Means to organize messages based on service or site

===Extend command set===

Extend the Deployment type command set to include a set of commands to support the new configuration document life cycle. These commands build on the capability of Configure, Docs-Generate and Docs-Verify.

Actions and events types:

* Provision: Produce the file matching the current state (eg, generate)
* Snapshot: Create a copy of the current file (eg, baseline)
* Verify: Checks if file matches last snapshot  (eg, audit, drift)
* Compare: Compares two copies of file (eg., diff)

===Extend project.xml===

Include the definition for a set of tags to register documents to deployments. These tags should be based on the [[Reference#Ant_Tasks_and_Types| transform tasks/types]] in the controltier extension. Reference: 
* [[Transform Task Reference]]
* [[TransformCreate Task Reference]]
* [[TransformGet Task Reference]]
* [[TemplateCreate Task Reference]]
* [[Context Type Reference]]
* [[Document Type Reference]]
* [[Template Type Reference]]

==Considerations==

==Examples==

===project.xml===
Below is a hypothetical example of a project.xml file that illustrates how to declare a Tomcat deployment and one configuration document registration:
&lt;pre&gt;
&lt;project&gt;

  &lt;deployment 
      type=&quot;Service&quot;
      name=&quot;tomcat55&quot; 
      description=&quot;Tomcat 5.5.x deployment.&quot; 
      installRoot=&quot;/demo/apache-tomcat-5.5.26&quot; 
      basedir=&quot;/demo/apache-tomcat-5.5.26&quot;&gt;
    &lt;resources&gt;
      ...
    &lt;/resources&gt;
    &lt;documents&gt;
      &lt;document type=&quot;text/plain&quot; file=&quot;server.xml&quot; dir=&quot;/demo/apache-tomcat-5.5.26/conf&quot;&gt;
	&lt;template type=&quot;ant&quot; file=&quot;server.xml.template&quot; dir=&quot;/demo/apache-tomcat-5.5.26/templates&quot;/&gt;
      &lt;/document&gt;
    &lt;/documents&gt;
  &lt;/deployment&gt;
&lt;/project&gt;
&lt;/pre&gt;

In this example, there is one document named &quot;server.xml&quot; that will be written to the directory &quot;/demo/apache-tomcat-5.5.26/conf&quot;. The filie is generated from a template named &quot;server.xml.template&quot; located in the directory, &quot;/demo/apache-tomcat-5.5.26/templates&quot;.
This registration will support the configuration life cycle command set to both produce and verify the tomcat55 Service instance.

===Change detection and comparison===

This example is based on the ControlTier 3.4.1 release of the JBossServer type that includes an enhanced implementation of the configuration life cycle. 
The example shows how JBossServer configuration files generated from templates can be checked against baseline copies. The demo also shows how the verification step connects to the reporting infrastructure.

1. Register configuration documents for JBossServer:
&lt;pre&gt;
Registered bindings.xml.
Registered jboss-service.xml.
Registered run.conf.
&lt;/pre&gt;

2. Ran Configure successfully, and found the files setup by Doc-Baseline:
&lt;pre&gt;
[anthony@centos52 var]$ pwd
/home/anthony/ctier/ctl/projects/demo/resources/JBossServer/developmentDukesBank/var
[anthony@centos52 var]$ ls baseline/home/anthony/ctier/demo/elements/development/dukesbank/jboss-4.0.3SP1/server/default/conf/
bindings.xml  bindings.xml.MD5  jboss-service.xml  jboss-service.xml.MD5  run.conf  run.conf.MD5
&lt;/pre&gt;

... three pairs: copies and checksums.

3. Ran Docs-Verify:
&lt;pre&gt;
[anthony@centos52 ~]$ ctl -p demo -t JBossServer -r developmentDukesBank -c Docs-Verify 
bindings.xml: OK
jboss-service.xml: OK
run.conf: OK
&lt;/pre&gt;

4. Hacked run.conf and re-ran Docs-Verify:
&lt;pre&gt;
[anthony@centos52 ~]$ ctl -p demo -t JBossServer -r developmentDukesBank -c Docs-Verify 
bindings.xml: OK
jboss-service.xml: OK
run.conf: CHANGED. Running diff ...
Result: 1
diff output:
1,2d0
&lt; # Here's a hack!
&lt; 
&lt;/pre&gt;

5. Saw the event in ReportCenter:

[[Image:config-drift-report-event.png]]


6. Re-baselined:
&lt;pre&gt;
[anthony@centos52 ~]$ ctl -p demo -t JBossServer -r developmentDukesBank -c Docs-Baseline -- -overwrite 
Processing document: bindings.xml
Copying 1 file to /home/anthony/ctier/ctl/projects/demo/resources/JBossServer/developmentDukesBank/var/baseline/home/anthony/ctier/demo/elements/development/dukesbank/jboss-4.0.3SP1/server/default/conf
Processing document: jboss-service.xml
Copying 1 file to /home/anthony/ctier/ctl/projects/demo/resources/JBossServer/developmentDukesBank/var/baseline/home/anthony/ctier/demo/elements/development/dukesbank/jboss-4.0.3SP1/server/default/conf
Processing document: run.conf
Copying 1 file to /home/anthony/ctier/ctl/projects/demo/resources/JBossServer/developmentDukesBank/var/baseline/home/anthony/ctier/demo/elements/development/dukesbank/jboss-4.0.3SP1/server/default/conf
[anthony@centos52 ~]$ ctl -p demo -t JBossServer -r developmentDukesBank -c Docs-Verify 
bindings.xml: OK
jboss-service.xml: OK
run.conf: OK
&lt;/pre&gt;

[[Category:ControlTier Improvement Process]]</text>
    </revision>
  </page>
  <page>
    <title>CTIP - Enhanced ctl-exec</title>
    <id>450</id>
    <revision>
      <id>13939</id>
      <timestamp>2010-11-10T15:25:00Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;-objects&quot; to &quot;-resources&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;ControlTier Improvement Process&lt;/categorytree&gt;
==Abstract==

Enhance the [[CTL-EXEC Command Reference|ctl-exec]]  utility so it can dispatch commands using deployment context selection and also provide the ability to use token substitution in the scripts it executes.

Authors: [[User:ahonor|ahonor]], [[User:Gschueler|gschueler]], [[User:anthony|ashortland]], [[User:jhmartin | jhmartin]]

==Description==

The current version  (3.2)  of ctl-exec offers a simple ad-hoc command and script dispatching mechanism that offers a level of network abstraction via the node dispatch mechanism and [[Use node filtering options|Node filtering options]]. Scripts and commands are executed just as they are specified by the user.

Example: Run the &lt;code&gt;uname&lt;/code&gt; command across all unix family hosts:
&lt;pre&gt;
$ ctl-exec -I os-family=unix -- uname -a
&lt;/pre&gt;

This example filters nodes based on the 'os-family' metadata attribute for those declared as &quot;unix&quot; and then iterates over the result host list, executing the shell commands after the &quot;--&quot; (double dash) upon each host. 

In contrast to the ad-hoc command execution offered by ctl-exec are [[:Category:Defined Commands]] supported by [[CTL_Command_Reference|ctl]].
ControlTier types provide a command definition layer, that lets you wrap an existing command or script or declare the procedure directly, and expose it to the command dispatcher. This makes it available for broader reuse.

As noted by [[User:jhmartin|jhmartin]]: 
&lt;blockquote&gt;&quot;Obviously a command that gets executed a lot should be made into a defined command, but the reality of a large environment is lots of one-off things are done and making a new command for each one is too much overhead.&quot;&lt;/blockquote&gt;

The goal of an enhanced ctl-exec is one where:
# dispatching to hosts can be based not only on host metadata but also based on the deployments on the hosts
# the scripts executed can be made data driven based on the deployment's properties expressed in the resource model.

==Proposed Changes==

===Deployment-context selection===

In 3.2, ctl-exec allows filtering based on Node data: tags, name, OS, etc.  We would add the ability to select an Object context instead of a Node context using similar methods.   Once a set of Objects are matched, the appropriate Node(s) to dispatch to would be the set of referrer Nodes for each object.  

This selection logic would be driven from the same [[resources.properties]] and [[nodes.properties]] configuration already maintained in project name configurations.

Then the execution context for each dispatch would be available consisting of the set: Depot, Type, Object, Node.

The user could specify -t/-o to specify a Type/Object combo, using regular expressions to match multiple instances.  Also, object-tags could be matched similar to the way Node-tags are currently.  

(Another idea is to allow combinations of object-context/Node-context filtering, so that the dispatch could be further filtered based on node properties).

===Token Substitution===

ctl-exec should allow macro-like expansion of string tokens. Any string-like attribute of a target should be available.

[[User:jhmartin|jhmartin]] offers a good scenario for token substitution:
&lt;blockquote&gt;&quot;As a trivial and contrived example, lets take os.name. I might want to do
something like &quot;ctl-exec -- touch /tmp/$OS.NAME$&quot;, and before sending the
command over ssh, ctl-exec should replace $OS.NAME$ with the appropriate
value.

If I had multiple application instances per host, I might want to run:
/app/$INSTANCENAME$/some-new-script with-some-argument where INSTANCE is filled in appropriately.&quot;
&lt;/blockquote&gt;

Ctl-exec would gain the ability to expand properties within the script/command that is specified.  

This could be done using ant-filter tokens, and/or property-expansion.

* Filter token: @tokenname@
* Property reference: ${some.property}

Additionally, it may be useful to have a specific syntax for expanding instance attributes by name, rather than having to specify the entire &quot;${resource.attribute.XXX}&quot;, for example, using the &quot;@&quot; symbol to mean &quot;attribute&quot;:  &quot;cd @installroot@&quot;  (this is a convenient mnemonic for sure.)

====Phased approach====
Initially, the token substitution scheme might first correspond directly to conventions used by CTL defined commands to make the two approaches consistent.
A later initiative can propose a more concise syntax for both ad-hoc and defined command templates.

===Context Data===

Ctl-exec would need to be modified to be able to both search for objects in the same way that it searches for Nodes now, and also to be able to load in the appropriate property data for each context that is being executed in.

We could do this by using the ProjectBuilder#archive-resources command, where property data is retrieved and stored in the filesystem ahead of time for a set of Objects, using the same format as CTL's &quot;deployments&quot; directory, with resource.properties files for each instance. The set of objects may have to be the set of all instances in the model if this data is to be accessed only statically and not be updated dynamically from Workbench.  

Another benefit of using this object data &quot;archived&quot; method, is that attributes/properties for the Nodes would then be available as well. The execution context would have to include the node-specific properties in the available expansion properties.  This data could be added using some well-defined property prefix, such as &quot;node.&quot;.   So all of the node properties for the *target node* would be imported under the &quot;node.*&quot; namespace, allowing the script to expand for example &quot;node.hostname&quot; to the current node's Hostname, and perhaps allowing attributes to be imported under &quot;node.attribute.*&quot;.

==Considerations==

[[User:ashortland|ashortland]] comments:

# While perhaps defaulting to &quot;@&quot; the attribute token symbol should be settable to facilitate embedding in a broad range of script types.
# Do you plan to make all resource properties available, or just attributes? If the former, then we should have a consistent and single mechanism for embedding references with no special syntax for expanding instance attributes.
# You say: 'using the same format as CTL's &quot;deployments&quot; directory' - does this mean a fully functional depot structure that could equally be used ctl itself? If so, that would provide seamless integration between the two modes of operation and a support a continuum of usage from standalone ctl-exec all the way to fully integrated ctl.
## [[User:Ahonor|Ahonor]]: Yes, it would be a normal CTL depot deployments directory populated by the [[ctl-archive]] command
# Looking at the examples I still don't get the idea of separating attribute references from other properties syntactically. Can't we either only expose attributes alone, or all properties in a consistent fashion? What's the use case that would require them to be handled differently?
## [[User:jhmartin|jhmartin]]: I agree that it would be preferable to not have to differentiate attribute vs properties. I'd think the code could be written to perform a search.  If collisions are allowed then I can see how this would be a problem.
# Can the node/object filtering include a combination of tags and name regex (e.g. &quot;-I tags=foo baa.*&quot;)?
#* [[User:Gschueler|Gschueler]]: Yes, multiple filters currently can be specified for ctl-exec by using multiple &quot;-I&quot; or &quot;-X&quot; flags.  So the same support would be made available for the new Object filter flags.
# Is there a &quot;not&quot; operator for tag specification?
#* [[User:Gschueler|Gschueler]]: No, there is not currently support for this.  However, considering that you can use both &quot;-I&quot; and &quot;-X&quot; filters (include and exclude) then it seems like this is not necessary.

==Examples==

In these examples, I'm using the property-expansion format for properties, and the @resource.attribute.TOKEN@ as a reference for ${resource.attribute.TOKEN} property value expansion. An alternate syntax could abbreviate the @resource.attribute.TOKEN@ down to simply @TOKEN@ but this is left as a separate discussion topic and not used in these examples.

Assuming there are these new flags for ctl-exec:
&lt;pre&gt;
-t, --type     Specify a regex to match Type name (default .*)
-o, --name     Specify a regex to match Object name (default .*)
-O, --resources  Specify a list of objects, or filter params for objects
-N, --xobjects Specify a list of objects, of filter params to exclude objects
&lt;/pre&gt;

===Example 1: Inline script===

Call ctl-exec specifying all JBossServer instances with a specific tag, and grepping the log files for each:

&lt;pre&gt;
ctl-exec -p demo -t JBossServer -O tags=prod -- grep @resource.attribute.httpPort@ @resource.attribute.jboss_basedir@/log/server.log
&lt;/pre&gt;

In this case, &lt;code&gt;@resource.attribute.httpPort@&lt;/code&gt; would be expanded to the &quot;resource.attribute.boss_basedir&quot; attribute value. each call would get expanded to something like:

&lt;pre&gt;
grep 8081 /home/ctier/jboss/jboss-4.0.3SP1/server/atg/log/server.log
&lt;/pre&gt;

===Example 2: Script file===

Zip log files for each Tomcat server and upload the archive to some location. The script file content is shown below:

Listing: backup-logs.sh:
&lt;pre&gt;
################
#!/bin/bash

TSTAMP=`date &quot;+%m-%d-%C%y&quot;`
cd @resource.attribute.catalinahome@
zip -cf backup.zip `pwd`/logs
scp backup.zip @resource.attribute.backup_scp_host@:archives/@node.name@/@context.type@/@resource.instance.name@/$TSTAMP.zip
rm backup.zip
###########
&lt;/pre&gt;

The listing below shows several kinds of property references each from a different part of the CTL property namespace:

* resource.attribute.catalinahome
* resource.attribute.backup_scp_host
* resource.instance.name
* node.name
* context.type

Running this hypothetical shellscript:

&lt;pre&gt;
ctl-exec -p demo -t TomcatServer -s backup-logs.sh
&lt;/pre&gt;

... would be expanded as:
&lt;pre&gt;
################
#!/bin/bash

TSTAMP=`date &quot;+%m-%d-%C%y&quot;`
cd /opt/tomcat-base
zip -cf backup.zip `pwd`/logs
scp backup.zip backup@backupserver.myorg.com:archives/PROD-SERV1/TomcatServer/tomcat-prod1/$TSTAMP.zip
rm backup.zip
###########
&lt;/pre&gt;

===Example 3===

Here a different approach is taken where token substitution is driven purely from the filtering parameters and does not assume any deep access to Deployment info.
In this mode, ctl-exec substitutes the tokens before remotely dispatching the command string. Imagine there were two nodes as described here
&lt;pre&gt;
strongbad.local:
   hostname: strongbad.local
   os-arch: i386
   os-family: unix
   os-name: Mac OS X
   os-version: 10.5.7
   tags: []
   ---- Attributes ---- 
   targetdir: /Users/alexh/ctier/demo/elements/build/cruisecontrol-bin-2.7.1/projects/dukesBank/j2eetutorial14/examples/bank
   ccDir: /Users/alexh/ctier/demo/elements/build/cruisecontrol-bin-2.7.1
   jboss_install_root: /Users/alexh/ctier/demo/elements/development/dukesbank/jboss-4.0.3SP1
   install-root: 
   jboss_basedir: /Users/alexh/ctier/demo/elements/development/dukesbank/jboss-4.0.3SP1/server/default
   basedir: 
   dirlist: bin,logs,var

ubuntu-vmware:
   hostname: ubuntu
   os-arch: i386
   os-family: unix
   os-name: Linux
   os-version: 2.6.27-7-generic
   tags: [ubuntu]
   ---- Attributes ---- 
   dirlist: bin,logs,var
&lt;/pre&gt;

One could match both these nodes using a regex and the os-name property (eg -I 'os-name=Linux|Mac.*'). 

Here's an example that shows how the value of the &quot;os-name&quot; token would be referenced in the script:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl-exec -I 'os-name=Linux|Mac.*' -- echo @os-name@
&lt;/syntaxhighlight&gt;

This should result in the following command strings being generated and executed on their respective nodes:
* ctl-exec -I 'os-name=Linux|Mac.*' -- echo Linux
* ctl-exec -I 'os-name=Linux|Mac.*' -- echo Mac OS X

====Combining Nodes and Deployments info====
It would be useful to execute commands across different types of Deployments without first setting up a Site to manage them. This could be supported by ctl-exec with the addition of two filtering flags. These would allow a user to choose Nodes based on the Deployment that are associated to them. This information exists in the [[resources.properties]] file already. Here are the hypothetical tokens:
* deployment-type: The Deployment type (eg, Service)
* deployment-name: The Deployment name  (eg, mock1 or mock2)

Using these new tokens with ctl-exec -I/-X flags would work as follows then:

&lt;pre&gt;
ctl-exec -I deployment-type=Service -I deployment-name=mock.*
&lt;/pre&gt;

The above example should match all Nodes that have child resources of Service type with instances matching the regex &quot;mock.*&quot;.

Assuming these new tokens also can be used for substitution, one could use them to execute &lt;code&gt;ctl&lt;/code&gt; commands across a set of Deployments.

Imagine there were two Deployments production-web1[Apache] and production-db1[Mysql]

The example command below should match the Nodes where they are assigned:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl-exec -I deployment-type=(?:Apache|Mysql) -I deployment-name=prod.* -- \
     ctl -t @deployment-type@ -r @deployment-name@ -c exec -- -script &quot;echo hi&quot;
&lt;/syntaxhighlight&gt;

IE, ctl-exec would expand to the following invocations to the associated Nodes: 

* ctl -t Apache -r production-web1-c exec -- -script &quot;echo hi&quot;
* ctl -t Mysql -r production-db1 -c exec -- -script &quot;echo hi&quot;

[[Category:ControlTier Improvement Process]]</text>
    </revision>
  </page>
  <page>
    <title>CTIP - Initial Linux packaging</title>
    <id>1327</id>
    <revision>
      <id>16384</id>
      <timestamp>2012-02-20T12:22:45Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Undo revision 15502 by [[Special:Contributions/Rosalynbernard|Rosalynbernard]] ([[User talk:Rosalynbernard|talk]]) Reverted SPAM bot edit</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;ControlTier Improvement Process&lt;/categorytree&gt;
==Abstract==

Introduce initial support for installation of ControlTier using common Linux package formats.

Authors: [[User:anthony|Anthony Shortland]]

==Description==

The observation has been made that the current ControlTier installation methods (Zip and Jar file based distributions) are &quot;user-centric&quot; since they suppose installation to a relocatable [[Self-contained_directory_convention|self-contained directory hierarchy]] which defaults to a &quot;CTIER_ROOT&quot; of &quot;${user.home}/ctier&quot; (on Linux/Unix anyway). This approach of strictly platform-independent installation stems from ControlTier's Java/Ant foundations.

It should be noted that while most &quot;canonical&quot; distributions of Java-based software remain in platform-agnostic Zip or Jar formats, they have all also long been repackaged in platform-specific formats. For example, the binary distribution of version 5.5 of the Tomcat application server is distributed from [http://tomcat.apache.org/download-55.cgi apache.org] in Zip (and Tgz) format, but is also available as part of the CentOS 5.2 distribution in RPM format (as a collection of 40 dependent packages ultimately supporting &quot;tomcat5-5.5.23-0jpp.7.el5_3.2.i386.rpm&quot;).

While there has long been interest in the Linux packaging of ControlTier, a couple of key developments have made it attractive to pursue that goal now. Firstly, Sun's [http://openjdk.java.net OpenJDK] project produced an open-source JDK 6 that is now included in all major Linux distributions. Secondly, as of 3.4.8 (released at the end of September 2009), ControlTier is Java 1.6 compatible.

With this context set, the purpose of this CTIP should be seen as defining the requirements and design approach for an initial &quot;system-centric&quot; Linux packaging of ControlTier that will be delivered in the near-term future (i.e. as part of the 3.4.9 release). Given this 4-6 week timeframe, the scope of the work will be a relatively modest mapping of the ControlTier installation to the Linux system directories, and not the full-level of integration necessary to allow ControlTier to become part of the standard Linux distributions (though this is the eventual goal).

There is clear precedence for this approach. Many projects maintain their own Linux packages as well as ultimately being included in the mainstream Linux distributions. A good example of this is CollabNet's [http://subversion.tigris.org/getting.html#binary-packages binary package distributions of Subversion]; the client RPM version of which (CollabNetSubversion-client-1.6.5-2.i386.rpm) installs entirely into &quot;/opt/CollabNet_Subversion&quot;. This is in contrast to the Linux distribution RPM (subversion-1.4.2-4.el5_3.1.i386.rpm) which installs into &quot;/usr&quot; and &quot;/etc&quot;.

==Proposed Changes==

===Package formats===

We should aim to support both Redhat Package Manager (rpm) and Advanced Packaging Tool (apt) format packages that will be built as part of the standard ControlTier release process and posted to [http://sourceforge.net/projects/controltier/files Sourceforge] for distribution.

===Packages===

The initial packaging should be &quot;coarse grained&quot; simply producing separate server and client packages in line with how the current install process works. A server system would install both the &quot;ctier-server&quot; and &quot;ctier-client&quot; packages, while a client system would only install the &quot;ctier-client&quot; package.

====Server (ctier-server)====

The server package (ctier-server) will include all the Jetty-based web applications (Workbench, Jobcenter, Reportcenter, JackRabbit, Ctl (or a dependency of the client-package))

====Client (ctier-client)====

The client package (ctier-client) will include the full ControlTier client installation, which includes the contents of the current &quot;CTL_HOME&quot;:

* The CTL environment, plus
* The &quot;commander-extension&quot; components: additional java libraries and scripts
* The &quot;ctier-seed&quot; modules

===Layout &amp; configuration===

====Location====

Both the server and client packages will install as optional packages (CTIER_ROOT=/opt/ctier) honoring the [[Self-contained_directory_convention|self-contained directory hierarchy]].

Install into &quot;/usr/local&quot; or elsewhere instead? Split home and base?

====System integration====

The server package should setup an init script (&quot;ctier&quot;) that facilitates automatic startup and shutdown with the system. Wrap the standard Jetty script in some way?

====Ports====

The server should come up on a well-known port. Is 8080 acceptable?

====Users and groups====

Establish a ControlTier system user and group (&quot;ctier&quot;) to own the installed software and run the server process.

====Environment====

Establish &quot;/opt/ctier/etc/profile&quot;,  &quot;/etc/ctier&quot; or &quot;/etc/profile.d/ctier&quot; to support system-wide environment setup. Maintain ~/.ctierrc to facilitate individual user's custom ControlTier environment (e.g. personal depot).

====Projects and logins====

Is it necessary to create a default project? Might be useful, or might be deferred as a post-installation step.

Install with the standard default/default authentication or is their a JNDI tie-in to system-level authentication so that users will automatically be able to use their system accounts to login to the server?

===Usage===

The packaging approach and post-installation configuration options should promote both the use of a system-wide server and client installation as well as the establishment of client projects by individual user accounts on the system.

====Common installation====
All users on the system will share a single server installation relying on Workbench projects and the frameworks authentication and authorization methods to manage their work.

In addition, the client package should establish a common depot for system-wide use.

====Individual user projects====
We should also promote the ability for individual users to interact with the common (server) installation via their own accounts. User's will exploit the common client (Ctl) installation but use their on depot (or more accurately: set of Ctl base directories).

The Ctl setup script (ctl-setup) will provide the means by which users will setup their own CTL_BASE. Default to &quot;~/ctier/ctl&quot;?

===Build process===

The standard ControlTier build process should be extended to produce rpm and apt packages as well as the current zip and jar formats.

==Status==

* status: '''Completed''' - it has been included in the [[ControlTier 3.4.9|3.4.9 release]]. - [[User:Gschueler|Gschueler]] 22:06, 18 November 2009 (UTC)

Requests filed on the sourceforge.net tracker for the two components:

===client rpm===

Tracker items:

* {{Feature Request|2873625}} - Create a RPM file release of the controltier client
** added initial ctier-client rpm build goals to the maven.xml - [[User:Gschueler|Gschueler]] 20:58, 6 October 2009 (UTC)
* {{Bug Report|2873718}} - ctl-setup produces incomplete CTL_BASE configuration
** committed changes to Setup/configuration - [[User:Gschueler|Gschueler]] 21:30, 13 October 2009 (UTC)
** {{Feature Request|2875022}} - add ctl-check tool to check that a CTL_BASE is valid
*** added ctl-check tool and initial check code - [[User:Gschueler|Gschueler]] 21:30, 13 October 2009 (UTC)

===server rpm===

Tracker item:

* {{Feature Request|2873627}} - Create a RPM file release of the controltier server
** committed ctier-server spec file and related changes - [[User:Gschueler|Gschueler]] 00:19, 29 October 2009 (UTC)

Related items:

* {{Feature Request|2886663}} - add server-setup script to configure server
** committed server-setup script and related rpm builder changes - [[User:Gschueler|Gschueler]] 00:19, 29 October 2009 (UTC)
* {{Feature Request|2892048}} - Add init script setup to server RPM
** committed: &quot;updated spec to add init script and default configuration, as well as remove service at uninstall time. The init script is a copy of the jetty.sh patched to support chkconfig&quot; - [[User:Gschueler|Gschueler]] 22:40, 5 November 2009 (UTC)

[[Category:ControlTier Improvement Process]]</text>
    </revision>
  </page>
  <page>
    <title>CTIP - New Extension Archive and Libraries</title>
    <id>400</id>
    <revision>
      <id>14104</id>
      <timestamp>2010-11-10T15:36:07Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;ctl-depot&quot; to &quot;ctl-project&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;ControlTier Improvement Process&lt;/categorytree&gt;
= Abstract =

This proposal introduces a new Archive type/format called a ControlTier Extension which would supersede both the Library Archive (&quot;seed&quot;) and the existing CTL Extension Archive format.  

This proposal also migrates the concept of the Library Archive which holds a set of related Module Jars, into a method whereby Modules will belong to a distinctly named &quot;Library&quot; which can be distributed inside a ControlTier Extension, as well as installed wholly into a CTL or Workbench instance.

The ControlTier Extension Archive would be used as the standard mechanism for propagating module changes to the clients, as well as installing module changes to a Workbench server.

= Description =

The goal is to decrease the practice of installing &quot;patches&quot; in an operational environment by installing a single Module at a time.  Instead, all modules would be distributed as part of a Library of related modules.  The Library would then be installed all at once into a CTL or Workbench installation.  The Library could be generated by ProjectBuilder or by Workbench.

Each Module would declare the name of the Library it belongs to.  When using ProjectBuilder, the create-type command would generate a template with a reasonable default Library name. The build-library command would be able to assemble a ControlTier Extension Archive file containing all of the Module definitions that are part of the same Library, and optionally upload it to Workbench. 

Workbench Types would have an additional metadata field &quot;library-name&quot; which would define the name of the Library to which a Type belongs. (For example, the Types XML format would be updated to add a XML attribute to define what library a type belongs to, &lt;types library=&quot;elements&quot; .../&gt; ) Workbench would be able to assemble a ControlTier Extension Archive for a particular Library and stage it on the DAV share. The &quot;build-library&quot; command could match all type.xml files across a modules dir for matching library name.

Workbench would be able to show a list of Library names that are installed, and list the Types that belong to each one.  

The current &quot;controltier-seed.jar&quot; which is the base set of Modules packaged in the old Library Archive format would be replaced by a new ControlTier Extension Archive which holds the same set of Modules and would be in a Library named &quot;ControlTier&quot;.

CTL Clients would no longer install individual Module archives.  The would be bootstrapped by installing extension archives.

CTL clients would be able to list the Libraries that are installed in the CTL instance, as well as query Workbench to see if a newer version of the Libraries are available.  CTL would also be able to download and install the latest version of a Library via a manually invoked command or tool. 

= New Extension Archive =

The new Archive format would extend the format defined for CTL Extension.

In addition to holding binary files, templates, dependent jars and such, it would have some predefined structure to allow it to hold these items:

* Library of Module definitions
* Object definition archive

= Additional =

Currently Modules are packaged for distribution in Module Jars.  An additional proposal for the ControlTier Extension Archive would include the Module definition contents directly in the Extension Archive rather than having two layers of zip-based archive.  This would simplify the creation and extraction processes.

= Considerations =

Please post questions/comments on the [http://groups.google.com/group/controltier Mailing List]

= Examples =

== ControlTier Archive Extension contents listing ==

&lt;code&gt;
 $ jar tvf controltier-extension-3.3.x.jar 
     0 Fri Jan 16 11:37:18 PST 2009 META-INF/
   342 Fri Jan 16 11:37:18 PST 2009 META-INF/MANIFEST.MF
     0 Fri Jan 16 11:37:16 PST 2009 bins/
     0 Fri Jan 16 11:37:16 PST 2009 jars/
     0 Fri Jan 16 11:37:16 PST 2009 modules/
     0 Fri Jan 16 11:37:16 PST 2009 properties/
  5920 Fri Jan 16 11:37:16 PST 2009 bins/commander-projectsetup.xml
 441691 Fri Jan 16 11:37:14 PST 2009 jars/commander.jar
 188671 Fri Jan 16 11:37:14 PST 2009 jars/commons-beanutils-1.7.0.jar
 279781 Fri Jan 16 11:37:16 PST 2009 jars/commons-httpclient-3.0.1.jar
 9411440 Fri Jan 16 11:37:16 PST 2009 jars/controltier-seed-3.3.0.jar
 150584 Fri Jan 16 11:37:14 PST 2009 jars/ctier-common-3.3.0.jar
 36991 Fri Jan 16 11:37:14 PST 2009 jars/ctier-common-vocabulary-3.3.0.jar
 50236 Fri Jan 16 11:37:16 PST 2009 jars/jakarta-slide-ant-webdav-2.2pre1-svn-518395-p3.jar
 192700 Fri Jan 16 11:37:16 PST 2009 jars/jakarta-slide-webdavlib-2.2pre1-svn-518395.jar
 153253 Fri Jan 16 11:37:16 PST 2009 jars/jdom-1.0.jar
 23118 Fri Jan 16 11:37:16 PST 2009 modules/ActiveMQ
     0 Tue Jan 13 19:40:24 PST 2009 modules/ActiveMQ/bin/
     0 Tue Jan 13 19:40:24 PST 2009 modules/ActiveMQ/bin/smf/
     .
     .
     .
   826 Tue Jan 13 19:40:24 PST 2009 modules/ActiveMQ/bin/startactivemq
  6740 Thu Jan 22 13:52:08 PST 2009 modules/ActiveMQ/commands.properties
  2431 Thu Jan 22 13:52:08 PST 2009 modules/ActiveMQ/commands/Docs-Generate.xml
  2442 Thu Jan 22 13:52:08 PST 2009 modules/ActiveMQ/commands/Prepare.xml
  2680 Thu Jan 22 13:52:08 PST 2009 modules/ActiveMQ/commands/Update.xml
     .
     .
     .
  8552 Tue Jan 13 19:40:24 PST 2009 modules/ActiveMQ/lib/activemq-default.xml
  4413 Tue Jan 13 19:40:24 PST 2009 modules/ActiveMQ/lib/activemq-smf.xml
  4250 Tue Jan 13 19:40:24 PST 2009 modules/ActiveMQ/lib/command.xml
   541 Thu Jan 22 13:52:08 PST 2009 modules/ActiveMQ/module.properties
 10230 Thu Jan 22 13:52:08 PST 2009 modules/ActiveMQ/module.rdf
  2618 Tue Jan 13 19:40:24 PST 2009 modules/ActiveMQ/templates/4.1/activemq.xml.template
  8365 Tue Jan 13 19:40:24 PST 2009 modules/ActiveMQ/templates/5.1/activemq.xml.template
  3419 Tue Jan 13 19:40:24 PST 2009 modules/ActiveMQ/templates/strategy/smf/service_bundle.xml.template
  1147 Thu Jan 22 13:52:08 PST 2009 modules/ActiveMQ/type.properties
 15869 Thu Jan 22 13:52:08 PST 2009 modules/ActiveMQ/type.rdf
 10438 Tue Jan 13 19:40:24 PST 2009 modules/ActiveMQ/type.xml
  5664 Fri Jan 16 11:37:16 PST 2009 modules/ActiveMQZip
     .
     .
     .
 15151 Fri Jan 16 11:37:16 PST 2009 modules/AntBuilder
     .
     .
     .
   126 Fri Jan 16 11:37:16 PST 2009 properties/antproject.properties
   471 Fri Jan 16 11:37:16 PST 2009 properties/defaults.properties
   502 Fri Jan 16 11:37:16 PST 2009 properties/extension.properties.template
   911 Fri Jan 16 11:37:16 PST 2009 properties/jndi.properties.template
&lt;/code&gt;

== Types.xml defining Library name ==


 &lt;?xml ... &gt;
 &lt;types library=&quot;elements&quot; ns:objects=&quot;...&quot; ... &gt;
    &lt;type name=&quot;TomcatSite&quot;&gt;
      ...
    &lt;/type&gt;
 &lt;/types&gt;


== Status command ==

Checking status of installed libraries:

* option 1

 $ ctl-status 

* option 2

 ctl-project -a status


Output:

&lt;pre&gt;
Running ctl-status command...
Libraries found:
- ControlTier-3.3.0
- AcmeOperations-1.2 ***
  *** version 1.3 on controltier.acme.com is newer ***
&lt;/pre&gt;

[[Category:ControlTier Improvement Process]]</text>
    </revision>
  </page>
  <page>
    <title>CTIP - Project hosting provider change</title>
    <id>1474</id>
    <revision>
      <id>11685</id>
      <timestamp>2009-12-16T16:55:39Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">Notes about potential provider change from sourceforge.net.

We are considering moving to another hosting provider for the ControlTier project's source code and bug tracking.

==Providers==

==github==

* http://github.com

* Repository types: git
* Features:
** Commit comments
** news feed
** ''extensible post-commit hooks''
* Prices (http://github.com/plans)
** Free - up to 300MB space, unlimited public repos, 0 private repos, no SSL 
*** space is soft limit, can upgrade for free for Open source
** $7-200/mo
*** SSL
*** 600MB - 60GB
*** 5-500 private repos

===pros===

===cons===

* doesn't seem to have a built-in bug/issue tracker

==Google code==

* http://code.google.com

* Repository types: subversion, mercurial
* Price: free
* Features
** Code Reviews
** Issue Tracking
** Wiki
** File downloads

===pros===

===cons===

{{CtDevelopment/navbox}}

[[Category:ControlTier_Improvement_Process]]
[[Category:ControlTier TNG]]</text>
    </revision>
  </page>
  <page>
    <title>CTIP - Self-contained Process Definition</title>
    <id>1467</id>
    <revision>
      <id>16382</id>
      <timestamp>2012-02-20T12:21:25Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Undo revision 15503 by [[Special:Contributions/Rosalynbernard|Rosalynbernard]] ([[User talk:Rosalynbernard|talk]]) Reverted SPAM bot edit</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;ControlTier Improvement Process&lt;/categorytree&gt;
The strawman self contained process definition is one where a new user with limited understanding of the ControlTier system can &amp;mdash; using scripting skills and a cursory exposure to the definition language &amp;mdash; automate multi-step procedures across hosts and resources in the network. This idea is an elaboration on the one mentioned in the [[Strawman roadmap wishlist]].

==Background==
Users following the so called &quot;[[model-driven approach]]&quot; must understand several aspects of ControlTier before they can become productive users. They must know the model semantics &amp;mdash; the [[Core Type Guide|core types]] and how they interact via [[Dispatch_command_type|dispatch command]] ([[Type_modeling]], [[Constraints]]) &amp;mdash; the standard lifecycles and corresponding workflow commands, how to model resources in [[project.xml]] and perhaps define their own workflows in [[type.xml]]. This is quite a learning curve for new users. A preferred approach would be to have a single definition file that lets users define a process, starting simply with one step and easily composing up from there.

==Goals and objectives==

* Simplicity: Expose a minimum learning curve that requires only a rudimentary understanding of the ControlTier system and abstractions
* A single source file: Support the approach where a user can define a simple one step process but then through iteration, add more steps and even resource model data 
* Support ad hoc and defined command process steps: Here a user can start without any knowledge of our type model but can initially define each step with a script. Later, after further exposure, they can begin using defined commands.
* Control over dispatching and error handling: Control node dispatching, threading, and error management.
* Composability: Ability to define process steps that depend on other sets of process steps. Also the resource model should be composable based on import like directives.

==Use-model==
A self contained process definition should support a simple use model. Below are the three phases to the cycle:
# author the process definition: This will contain process steps and resource model (optional)
# load it to the system: The definition then is loaded into the system wherein the necessary artifacts are generated to support execution (which may mean client-synchronization, too).
# run process: Once loaded to the system the process should be executable either GUI or CLI

Figure: Process use model

[[Image:strawman-process-usemodel.png]]

==Definition==
* Builds on the [[Strawman resource model definition]]
* Defines a set of tasks which may be arranged as a set or hierarchy
* Each task can nest:
** dispatches to commands or scripts
** error handler
** sub tasks

==Example definition==
Below is an XML-based example that builds on several ideas and tag names used in [[job.xml]], [[project.xml]], [[type.xml]] and [[pview.xml]]. I leave it to the reader's imagination to picture a hypothetical ControlTier DSL that can express the same process.


The hypothetical &quot;process.xml&quot; file below, through its mixture of tags, illustrates how a deployment process could be declared. The process defined here resembles the same shown in two common examples: [[Scripted_appserver_war_deployment_example]], [[Service_Package_Deployment_Example]].

A key objective for the self contained process definition is the idea of declaring both process (steps and structure) as well as a resource model. This is in contrast to the current methodology which requires a user to define a resource model in project.xml and then define new process structure in one or more custom types.
Inline comments provide a little more background about the intent of each tag.


===File listing: controltier.xml===
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;!--  Controltier definition for deploying Tomcat --&gt;
&lt;controltier id=&quot;TomcatDeployer&quot;&gt;

  &lt;!--this section defines the resource model --&gt;
  &lt;resourceset&gt;
  
    &lt;!-- create a named resourceset to contain all of the Tomcat resources 
    each resourceset has an implict ordering defined in the definition,
    which is also used as the default sort order.  Otherwise, you can
    simply specify a numeric property value for each resource, and then
    use that property as the sort key inside of &lt;relay&gt;
    --&gt;
    &lt;resourceset id=&quot;tomcats&quot;&gt;
      &lt;!-- define a resource tomcat1 and declare it is of &quot;Service&quot; type --&gt;
      &lt;resource type=&quot;Service&quot; id=&quot;tomcat1&quot;&gt;
        &lt;!-- each property either overrides defaults from the type, or is 
           new and unique to this resource --&gt;
           
        &lt;!--  deployment-startup-rank is prefdefined in Service type --&gt;
        &lt;property name=&quot;deployment-startup-rank&quot; value=&quot;1&quot; /&gt;
        
        &lt;!-- listenPort is not defined in Service type --&gt;
        &lt;property name=&quot;listenPort&quot; value=&quot;8080&quot; /&gt;
        &lt;property name=&quot;catalinaHome&quot; value=&quot;/usr/local/tomcat&quot; /&gt;
      &lt;/resource&gt;
      
      &lt;!--  another resource definition, assigning an id to this resource --&gt;
      &lt;resource type=&quot;Service&quot; id=&quot;tomcat2&quot;&gt;
        &lt;!-- ${tomcat2.deployment-startup-rank} can refer to this value --&gt;
        &lt;property name=&quot;deployment-startup-rank&quot; value=&quot;2&quot; /&gt;
        &lt;property name=&quot;listenPort&quot; value=&quot;8080&quot; /&gt;
        &lt;property name=&quot;catalinaHome&quot; value=&quot;/usr/local/tomcat&quot; /&gt;        
      &lt;/resource&gt;
    &lt;/resourceset&gt;  
    
    &lt;!-- define a database resource --&gt;
    &lt;resourceset id=&quot;mysqls&quot;&gt;
      &lt;resource type=&quot;Mysql&quot; id=&quot;db1&quot;&gt;
        &lt;property name=&quot;dbDir&quot; value=&quot;file:///app/db&quot; /&gt;
        &lt;property name=&quot;listenPort&quot; value=&quot;8888&quot; /&gt;        
      &lt;/resource&gt;
    &lt;/resourceset&gt;

    &lt;resourceset id=&quot;dbconns&quot;&gt;
        &lt;!-- these resource sets demonstrate aggregation of heterogenous resources 
        to indicate that they have a relationship to each other
        --&gt;
        &lt;resourceset&gt;
            &lt;resource ref=&quot;tomcat1&quot;/&gt;
            &lt;resource ref=&quot;db1&quot;/&gt;
        &lt;/resourceset&gt;
        &lt;resourceset&gt;
            &lt;resource ref=&quot;tomcat2&quot;/&gt;
            &lt;resource ref=&quot;db1&quot;/&gt;
        &lt;/resourceset&gt;
    &lt;/resourceset&gt;
    
    &lt;!-- Hypothetical methods to lookup resource model values (eg, &quot;file:///app/db&quot;):             --&gt;
    &lt;!-- The intent is to let process steps reference resource model data defined earlier         --&gt;
    &lt;!--                                                                                          --&gt;
    &lt;!-- xpath: //process/resource/relations/resource[as='svc1']/property[@name='listPort'/@value --&gt;
    &lt;!-- gpath: process.resource.relations..find{ it['@name'] == 'tomcat2' }.property.value.text() --&gt;
    &lt;!-- ant:   ${db1.dbDir}                                                                      --&gt;
  &lt;/resourceset&gt;
  
  &lt;!-- define the nodepatterns to match resourcesets to nodes --&gt;
  &lt;nodeset&gt;
        &lt;!-- define nodepattern for a particular resourceset, matching nodes
        with the given tags
        --&gt;
       &lt;nodepattern tags=&quot;ubuntu,tomcat&quot;&gt;
            &lt;!-- assign a resource set to the matched nodes by referring to the id --&gt;
            &lt;resourceset ref=&quot;tomcats&quot;/&gt;
       &lt;/nodepattern&gt;
       
       &lt;nodepattern tags=&quot;other&quot;&gt;
            &lt;!-- define a new resourceset with one node--&gt;
            &lt;resourceset&gt;
               &lt;!-- refer to predefined resource by id --&gt;
               &lt;resource ref=&quot;tomcat2&quot;/&gt;
            &lt;/resourceset&gt;
       &lt;/nodepattern&gt;
       
       &lt;nodepattern name=&quot;data1&quot;&gt;
            &lt;!-- define a new resourceset with one node--&gt;
            &lt;resourceset ref=&quot;mysqls&quot;/&gt;
       &lt;/nodepattern&gt;
  &lt;/nodeset&gt;

  &lt;!-- define the processes which can be called.  Processes with an id value are
       named and thus exported and can be called externally.
   --&gt;
  &lt;processes&gt;
      &lt;!--
          A sequence element defines a process subsection and is similar to a
          WorkflowCommand.
          
          Sequence can contain &quot;call&quot; and &quot;errorhandler&quot; or other sequence elements
      --&gt;
      &lt;sequence id=&quot;Update&quot;&gt;
        &lt;!--A sequence can define an errorhandler--&gt;
        &lt;errorhandler&gt;
          &lt;!--Call the report action if an error occurs--&gt;
          &lt;report&gt;Update failed&lt;/report&gt;
        &lt;/errorhandler&gt;
        &lt;!--
          a relay element defines a subsection that will iterate over a
          particular resourceset, and execute the enclosed operation or
          sequence on each Node for the nodeset of the matched resource.  
          (Similar to DispatchCommand)
        
          &quot;forall&quot; - specifies a Resourceset to iterate over
          &quot;select&quot; - specifies a pattern of Resources in the set to use, using either property=value, or [TYPE] to match by type, for a single resource
          &quot;as&quot; - sets a local resource name to use for each selected resource
          
          the sort/order allow sorting of the resources by a property value, rather
          than the default definition order, and allow descending or ascending order
          
          When the iteration runs on each Resource, the nodes assigned to that Resource are also iterated over, and the
          process executes on each Node.
        --&gt;
        &lt;!--Subprocess: Stop,Packages-Install,Configure,Start--&gt;
        &lt;relay id=&quot;Stop&quot;  forall=&quot;tomcats&quot; select=&quot;[Service]&quot; as=&quot;tomcat&quot;  sort=&quot;deployment-startup-rank&quot; order=&quot;descending&quot;&gt;
        
           &lt;!-- the following sequence will execute on each Node in &quot;tomcat&quot; resource's nodeset.  It could be restricted by using the
                nodeIncludes/nodeExcludes attributes.
           --&gt;
           &lt;sequence&gt;
              &lt;!--The call element specifies a defined command to execute--&gt;
              &lt;!-- This element is conceptually similar to the &quot;controller&quot; Ant task--&gt;
              &lt;call id=&quot;assertServiceIsDown&quot;&gt;
                &lt;command name=&quot;listening&quot; module=&quot;netutil&quot; /&gt;
                &lt;!-- options and option tag specify the command line arguments--&gt;
                &lt;options&gt;
                  &lt;option name=&quot;port&quot; value=&quot;${tomcat.listenPort}&quot; /&gt;
                  &lt;option name=&quot;assert&quot; value=&quot;false&quot; /&gt;
                &lt;/options&gt;
              &lt;/call&gt;
              &lt;!-- Stop's errorhandler calling an adhoc command--&gt;
              &lt;errorhandler&gt;
                &lt;!-- exec element specifies and adhoc command to execute--&gt;
                &lt;call id=&quot;stop&quot;&gt;
                  &lt;exec&gt;
                    &lt;executable&gt;/bin/bash&lt;/executable&gt;
                    &lt;scriptfile&gt;
                    ${tomcat.catalinaHome}/bin/shutdown.sh&lt;/scriptfile&gt;
                  &lt;/exec&gt;
                &lt;/call&gt;
              &lt;/errorhandler&gt;
              &lt;!-- Make sure Tomcat is not running --&gt;
              &lt;call id=&quot;checkIsDown&quot;&gt;
                &lt;command name=&quot;listening&quot; module=&quot;netutil&quot; /&gt;
                &lt;options&gt;
                  &lt;option name=&quot;port&quot; value=&quot;8080&quot; /&gt;
                  &lt;option name=&quot;assert&quot; value=&quot;false&quot; /&gt;
                &lt;/options&gt;
              &lt;/call&gt;
          &lt;/sequence&gt;
        &lt;/relay&gt;
        &lt;!--Subprocess: InstallTomcat,InstallWar--&gt;
        &lt;relay id=&quot;Packages-Install&quot;   forall=&quot;tomcats&quot; select=&quot;[Service]&quot; as=&quot;tomcat&quot;  sort=&quot;deployment-startup-rank&quot; order=&quot;ascending&quot;&gt;
          &lt;sequence&gt;
              &lt;!-- check for existance of catalinaHome/bin/startup.sh, and skip extract if it already exists --&gt;
              &lt;call id=&quot;existsTomcatInstall&quot;&gt;
              
                &lt;!-- this command execution specifies a &quot;resultproperty&quot;.  This is a single property which will be set
                to a single string result of the command execution.  The command must define the semantics of the result. 

                For this command, we suppose that the fileutil#available command produces a &quot;true&quot; or &quot;false&quot; string.                
                --&gt;
                &lt;command name=&quot;available&quot; module=&quot;fileutil&quot; resultproperty=&quot;tomcatzip.is.installed&quot;/&gt;
                &lt;options&gt;
                  &lt;option name=&quot;file&quot; value=&quot;${tomcat.catalinaHome}/bin/startup.sh&quot; /&gt;
                &lt;/options&gt;
              &lt;/call&gt;
              &lt;!-- do zip download/extract
              
                The &quot;unless&quot; attribute specifies a property to check.
                The &quot;equals&quot; attribute specifices a value to check agains the property.
                
                Logical attributes available:
                
                &quot;if&quot; - execute if a property is defined or has a certain value
                &quot;unless&quot; - execute if a property is NOT defined or doesn't have a certain value.
                
                These can be paired with:
                &quot;equals&quot; - execute if the property is or is not equal to this value (if/unless)
              --&gt;
              &lt;call id=&quot;install-TomcatZip&quot; unless=&quot;tomcatzip.is.installed&quot; equals=&quot;true&quot;&gt;
                &lt;command name=&quot;extract&quot; module=&quot;davutil&quot; /&gt;
                &lt;options&gt;
                  &lt;option name=&quot;url&quot;
                  value=&quot;dav://pkgs/apache-tomcat-5.5.28.zip&quot; /&gt;
                  &lt;option name=&quot;type&quot; value=&quot;zip&quot; /&gt;
                  &lt;option name=&quot;dir&quot; value=&quot;${tomcat.catalinaHome}&quot; /&gt;
                &lt;/options&gt;
              &lt;/call&gt;
              &lt;call id=&quot;install-SimpleWar&quot;&gt;
                &lt;command name=&quot;extract&quot; module=&quot;davutil&quot; /&gt;
                &lt;options&gt;
                  &lt;option name=&quot;url&quot; value=&quot;dav://pkgs/simple.war&quot; /&gt;
                  &lt;option name=&quot;type&quot; value=&quot;war&quot; /&gt;
                  &lt;option name=&quot;dir&quot;
                  value=&quot;${tomcat.catalinaHome}/webapps/simple&quot; /&gt;
                &lt;/options&gt;
              &lt;/call&gt;
          &lt;/sequence&gt;
        &lt;/relay&gt;
        &lt;!--Subprocess: rewriteServerConf,rewriteAppConf--&gt;
        
        &lt;!-- this relay shows a resourceset matching selector in the 
            iteration primitive parameters.  
            
            &quot;select&quot; describes a pattern to match against a resourceset.  The {} matches a resourceset,
            and the comma-separated patterns embedded each match against one member of the set.
            
            &quot;as&quot; in this example names the matched resources
            
            When more than one resource is selected in the iteration loop, there is no &quot;default&quot; set of
            nodes to iterate over, so the embedded &quot;sequence&quot; element must specify the nodset to use
            with the nodeIncludes attribute.
        --&gt;
        &lt;relay id=&quot;Configure&quot; forall=&quot;dbconns&quot; select=&quot;{[Service],[Mysql]}&quot; as=&quot;tomcat,db&quot; sort=&quot;deployment-startup-rank&quot; order=&quot;ascending&quot;&gt;
        
          &lt;!--
             The relay in this example has selected two resources, named tomcat and db.  In this case the set of matched nodes to execute on must
             be set explicitly, because it cannot be inferred from a single matched resource.
             
             We use the &quot;nodeIncludes&quot; attribute to specify the list of nodes.  the convenient 'resource.nodes' property lists the nodes for a resource,
             so we can use &quot;${tomcat.nodes}&quot; to indicate that the nodeset for the &quot;tomcat&quot; resource should be used.
          --&gt;
          &lt;sequence nodeIncludes=&quot;${tomcat.nodes}&quot;&gt;
              &lt;call id=&quot;rewriteServerConf&quot;&gt;
                &lt;command name=&quot;replace&quot; module=&quot;textutil&quot; /&gt;
                &lt;options&gt;
                  &lt;option name=&quot;basedir&quot; value=&quot;${tomcat.catalinaHome}/conf&quot; /&gt;
                  &lt;option name=&quot;filebase&quot; value=&quot;server.xml&quot; /&gt;
                  &lt;option name=&quot;token&quot; value=&quot;${tomcat.defaultListenPort}&quot; /&gt;
                  &lt;option name=&quot;value&quot; value=&quot;${tomcat.listenPort}&quot; /&gt;
                &lt;/options&gt;
              &lt;/call&gt;
              
              &lt;!-- 
              
              rewrite the config file using properties of the associated &quot;db&quot;
              resource.  
              
              Note that the Node assignments of each resource are available as a comma-separated list
              as &quot;${res.nodes}&quot;, and individually as &quot;${res.nodes.X}&quot; where X is a
              number starting at 1, or a node name.  Individual node metadata is available as further
              sub-properties of that path, e.g. &quot;${res.nodes.1.hostname}&quot;. 
              --&gt;
              &lt;call id=&quot;rewriteAppConf&quot;&gt;
                &lt;exec&gt;
                  &lt;executable&gt;/bin/sh&lt;/executable&gt;
                  &lt;!-- adhoc command calling an inline script --&gt;
                  &lt;script&gt;&lt;![CDATA[
                  cd ${tomcat.catalinaHome}/webapps/simple/WEB-INF/classes;
                  /usr/bin/perl -p -i -e &quot;s/@dbDir@/${db.dbDir}/g&quot; *.properties;
                  /usr/bin/perl -p -i -e &quot;s/@dbHost@/${db.nodes.1.hostname}/g&quot; *.properties
                  ]]&gt;&lt;/script&gt;
                &lt;/exec&gt;
              &lt;/call&gt;
          &lt;/sequence&gt;
        &lt;/relay&gt;
        &lt;!--Subprocess:startService,assertServiceIsUp--&gt;
        &lt;relay id=&quot;Start&quot;   forall=&quot;tomcats&quot; select=&quot;[Service]&quot; as=&quot;tomcat&quot; sort=&quot;deployment-startup-rank&quot; order=&quot;ascending&quot;&gt;
          &lt;sequence&gt;
              &lt;call id=&quot;startService&quot;&gt;
                &lt;command name=&quot;listening&quot; module=&quot;netutil&quot; /&gt;
                &lt;options&gt;
                  &lt;option name=&quot;port&quot; value=&quot;${tomcat.listenPort}&quot; /&gt;
                  &lt;option name=&quot;assert&quot; value=&quot;false&quot; /&gt;
                &lt;/options&gt;
              &lt;/call&gt;
              &lt;errorhandler&gt;
                &lt;call&gt;
                  &lt;command name=&quot;exec&quot; module=&quot;shellutil&quot; /&gt;
                  &lt;options&gt;
                    &lt;option name=&quot;script&quot;
                    value=&quot;${tomcat.catalinaHome}/bin/startup.sh&quot; /&gt;
                  &lt;/options&gt;
                  &lt;nodefilters&gt;
                    &lt;include&gt;
                      &lt;tags&gt;tomcats&lt;/tags&gt;
                    &lt;/include&gt;
                  &lt;/nodefilters&gt;
                &lt;/call&gt;
              &lt;/errorhandler&gt;
              
              &lt;!--
                 set a process context variable, in the local (node) scope
              --&gt;
              
              &lt;session-set name=&quot;startup.maxwait&quot; value=&quot;10000&quot; scope=&quot;local&quot;/&gt;
              
              &lt;!-- conditionally call this command if the startup.maxwait is set --&gt;
              &lt;call id=&quot;assertServiceIsUp&quot; if=&quot;startup.maxwait&quot;&gt;
                &lt;command name=&quot;listening&quot; module=&quot;netutil&quot; /&gt;
                &lt;options&gt;
                  &lt;option name=&quot;port&quot; value=&quot;${tomcat.listenPort}&quot; /&gt;
                  &lt;option name=&quot;assert&quot; value=&quot;true&quot; /&gt;
                  &lt;option name=&quot;maxwait&quot; value=&quot;${startup.maxwait}&quot; /&gt;
                &lt;/options&gt;
              &lt;/call&gt;
          &lt;/sequence&gt;
        &lt;/relay&gt;
      &lt;/sequence&gt;
  &lt;/processes&gt;
  &lt;!--End: Update--&gt;
&lt;/controltier&gt;
&lt;/syntaxhighlight&gt;

* [[Strawman_self_contained_process_definition_example_(relation_style)]]
* [[Strawman self contained process definition example (pview style)]]

==Derived artifacts==
It is assumed the self contained process definition will be used as input to a tool that generates ControlTier-specific artifacts (as this proposal does not assume radical architectural changes). Possible artifacts may be the current definitions already described above. For example, a process definition may correspond to a ControlTier type, where each task modeled as a defined command. Tasks with subtasks might be structured as workflow commands. Therefore, process and tasks could be represented by type.xml. Resource model declarations could correspond to project.xml.

{{CtDevelopment/navbox}}

[[Category:ControlTier TNG]]
[[Category:ControlTier Improvement Process]]
[[Category:Self-contained Process Definition]]</text>
    </revision>
  </page>
  <page>
    <title>CTIP - Simplified Resource Model Definition</title>
    <id>1492</id>
    <revision>
      <id>16385</id>
      <timestamp>2012-02-20T12:24:52Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Undo revision 15504 by [[Special:Contributions/Rosalynbernard|Rosalynbernard]] ([[User talk:Rosalynbernard|talk]]) Reverted SPAM bot edit</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Roadmap&lt;/categorytree&gt;
==Definition==
[[Image:Controller-pattern.png|thumb|Proposed Controller design pattern]]

The resource model is defined in terms of these concepts:
* Resource: A THING in the universe of discourse. There are two main kinds: Simple resource that can be controlled (instances of Controller) and those that cannot.
** Properties: Characteristics about the Resource
** Type: a named type is optional, but indicates something other than the default &quot;Controller&quot;, creates implicit property named &quot;type&quot;
** Id: an identifier for the resource, optional
* ResourceSets: A collection of Resources
** can nest other ResourceSets
** Id: has an identifier, optional
** when nesting Resource(Set)s, it can assign a name to reference them
* Nodes: Host locations where the Resource resides
** Nodes can declare or reference a ResourceSet which indicates the Resources it contains
** Tags: can be tagged
** Name, Hostname, other metadata: defined externally?
* Imports: Import external whole definitions or subsections

Figure: model structure

[[Image:strawman-resource-model-structure2.png]]

== Types ==

Resource definitions can be declared of a certain &quot;type&quot;, and by default the type is &quot;Controller&quot;.

Resource types allow the dispatcher to filter input resourcesets for use in &quot;relay&quot; operations.  They
also define some default property values.

==Example definition==
===New Style===

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;

 &lt;!--a resourceset section defines a resource model --&gt;
  &lt;resourceset&gt;
    &lt;!-- within the top-level resourceset, other resourcesets or resources can
     be defined --&gt;
    &lt;resource  type=&quot;Mysql&quot; id=&quot;db1&quot;&gt;
        &lt;!-- the type value declares an implicit property (&quot;type&quot;) --&gt;
        &lt;!-- property values are each described by a property element (patterned on property-default)--&gt;
        &lt;!-- the &quot;${env}&quot; string is defined at the command line. eg: -Denv=qa --&gt;
        &lt;property name=&quot;description&quot; value=&quot;its a ${env} db&quot;/&gt;
        &lt;property name=&quot;port&quot; value=&quot;8080&quot;/&gt;
    
    &lt;/resource&gt;
    
      &lt;!-- the &quot;id&quot; attribute gives an identifier to reference the resource--&gt;
    &lt;resource type=&quot;Service&quot; id=&quot;svc1&quot;&gt;
        &lt;property name=&quot;deployment-basedir&quot; value=&quot;/path/to/base&quot;/&gt;
    
        &lt;!-- here the &quot;svc1&quot; identifier is used  to get the deployment-basedir--&gt;
        &lt;!-- ${svc1.deployment-basedir} --&gt;
        &lt;property name=&quot;deployment-startup-rank&quot; value=&quot;1&quot;/&gt;
        &lt;!-- ${svc1.deployment-startup-rank} --&gt;
    
    &lt;/resource&gt;

    &lt;!--  another resource definition --&gt;
    &lt;resource type=&quot;Service&quot; id=&quot;svc2&quot;&gt;
        &lt;property name=&quot;deployment-basedir&quot; value=&quot;/path/to/base&quot;/&gt;
        &lt;!-- here &quot;svc2&quot; is used to reference the property--&gt;
        &lt;!-- ${svc2.deployment-basedir} --&gt;
    
        &lt;property name=&quot;deployment-startup-rank&quot; value=&quot;2&quot;/&gt;
        
    &lt;/resource&gt;
    
    &lt;!-- resourcesets can group resources together homo- or heterogeneously --&gt;
    
    &lt;resourceset id=&quot;services&quot; &gt;
        &lt;!-- this resourceset includes both services, by reference to their
        declaration ids --&gt;
        &lt;resource ref=&quot;svc1&quot;/&gt;
        &lt;resource ref=&quot;svc2&quot;/&gt;
    &lt;/resourceset&gt;
    &lt;resourceset id=&quot;dbconn1&quot;&gt;
        &lt;!-- when resource(set)s include others, they can assign names using the &quot;as&quot; attribute --&gt;
        &lt;resource ref=&quot;db1&quot; as=&quot;db&quot;/&gt;
        &lt;resource ref=&quot;svc1&quot; as=&quot;svc&quot;/&gt;
    &lt;/resourceset&gt;
  &lt;/resourceset&gt;
&lt;/syntaxhighlight&gt;


== Nodes inclusion ==

When used within controltier.xml, nodesets can reference resourcesets or resources defined earlier

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;

  &lt;!-- define the nodepatterns to match resourcesets to nodes --&gt;
  &lt;nodeset&gt;
        &lt;!-- define nodepattern for a particular resourceset, matching nodes
        with the given tags
        --&gt;
       &lt;nodepattern tags=&quot;ubuntu,tomcat&quot;&gt;
            &lt;!-- assign a resource set to the matched nodes by referring to the id --&gt;
            &lt;resourceset ref=&quot;tomcats&quot;/&gt;
       &lt;/nodepattern&gt;
       
       &lt;nodepattern tags=&quot;other&quot;&gt;
            &lt;!-- define a new resourceset with one node--&gt;
            &lt;resourceset&gt;
               &lt;!-- refer to predefined resource by id --&gt;
               &lt;resource ref=&quot;tomcat2&quot;/&gt;
            &lt;/resourceset&gt;
       &lt;/nodepattern&gt;
  &lt;/nodeset&gt;
&lt;/syntaxhighlight&gt;

{{CtDevelopment/navbox}}

[[Category:ControlTier TNG]]
[[Category:ControlTier Improvement Process]]</text>
    </revision>
  </page>
  <page>
    <title>CTIP - Single module library of last resort</title>
    <id>394</id>
    <revision>
      <id>16386</id>
      <timestamp>2012-02-20T12:45:42Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <comment>Undo revision 15505 by [[Special:Contributions/Ularedmond|Ularedmond]] ([[User talk:Ularedmond|talk]]) Reverted SPAM bot edit</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;ControlTier Improvement Process&lt;/categorytree&gt;
&lt;!--
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;CTIP:&lt;/td&gt;&lt;td&gt;#?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Title:&lt;/td&gt;&lt;td&gt;Single module library of last resort&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Version:&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Author:&lt;/td&gt;&lt;td&gt;[[User:Ahonor]]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;State:&lt;/td&gt;&lt;td&gt;Draft&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Type:&lt;/td&gt;&lt;td&gt;Project&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ControlTier-Version:&lt;/td&gt;&lt;td&gt;3.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Vote:&lt;/td&gt;&lt;td&gt;Pending&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Created:&lt;/td&gt;&lt;td&gt;Monday, 26 January 2009&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Keywords:&lt;/td&gt;&lt;td&gt;Module library&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
--&gt;
==Abstract==
Currently, there are two top level module library directories in CTL: one where standard modules included with the distribution (i.e., CTL_HOME/modules) and a second one (i.e., CTL_BASE/modules created by copying the first one during installation via [[ctl-setup]]). Finally, upon project name setup, a third kind of module library directory is created for each project. This leads to confusion and unnecessary complexity that interferes with module upgrades.
This proposal specifies a simplified module directory hierarchy with the objective of a more predictable module upgrade process.
It is also anticipated that the proposed changes will facilitate module upgrades done at the library level rather than individual modules.

==Rationale==

Out of the box, the ControlTier distribution currently includes all standard modules already installed. When a user creates a new project name (via ctl-project -a create), all the modules in the distribution are copied to the project name's module library.

During the course of project development one or more types may be modified and need to be distributed to existing CTL clients. This update process is problematic and unreliable due to the number and hierarchy of module library directories.

The diagram below describes the flow of modules to library directories driven from the various tools in 3.2:

[[Image:3-2-module-installation.png]]

The diagram shows off several issues:
* Redundancy between CTL_HOME/modules and CTL_BASE/modules
* ctl-project updates from CTL_HOME/modules not the library of last resort (where the command resolver lookup checks)
** the &quot;create&quot; action copies from CTL_HOME/modules to DEPOT/modules
* Install-Module does not update $CTL_BASE/modules but possibly should
* ctl-extension installs modules to CTL_HOME/modules and not CTL_BASE/modules where one would have expected

It's important to understand that the Install-Module command uses module version info to determine if a module is up to date:
* Install-Module uses the task, ModuleUptodate, to compare the &quot;module.version&quot; property between the installed module and the one in the downloaded Jar. This is the test:

&lt;pre&gt;
    &lt;condition property=&quot;module.uptodate&quot;&gt;
      &lt;and&gt;
	    &lt;istrue value=&quot;${installedVersion.uptodate}&quot;/&gt;
	    &lt;isfalse value=&quot;${archiveFile.newer}&quot;/&gt;
      &lt;/and&gt;
    &lt;/condition&gt;
&lt;/pre&gt;

Due to the issues raised above it is difficult to propagate module updates across a set of existing CTL project projects.

==Proposed Changes==

The primary changes are broken down into several parts:

# Eliminate CTL_HOME/modules. It's redundant.
# Ensure extension installs also refresh depot module library directories
# Modify the build process to:
## not create CTL_HOME/modules
## nor populate the reference install directory with modules
# Modify the install process to:
## Install the controltier extension to CTL_BASE/modules.This would ideally be zero but must for now include Managed-Entity, Builder and ProjectBuilder.
## Change ctl-project create action to only copy over Managed-Entity to initialize DEPOT/modules.

The diagram below describes the module installation flow minus CTL_HOME/modules

[[Image:3-3-module-installation.png]]

A couple of technical changes to note:
* Module directory copies should be done with 'overwrite=&quot;false&quot;' and 'preservelastmodified=&quot;true&quot;'.
** This will give precedence to newly staged module Jars in the WebDAV.
* The &quot;ctl-project -a create&quot; action should only copy Managed-Entity to DEPOT/modules
** Other modules ''could'' be left in CTL_BASE/modules for last resort bootstrapping (e.g., Builder and ProjectBuilder)
* ctl-extension installs to CTL_BASE/modules 
** This has the added benefit of not requiring write access to CTL_HOME if only modules are being deployed.
* ctl-project refers to CTL_BASE/modules as &quot;-packagedmoduledir&quot;
** The projectsetupCmd.xml uses this as the option name as the directory containing boostrapping modules.
* Install-Module update solely based on &quot;lastmodified&quot; comparison and not care about module.version value
** Since the &quot;HEAD&quot; version is the preferred choice it is confusing to use module.version

==Open Issues==
* Should Install-Module also update $CTL_BASE/modules besides $DEPOT/modules in case of later &quot;ctl-project -a create&quot;?
* ProjectBuilder#create-project and #Register is used during bootstrap 
** ProjectBuilder is a subtype of Builder, Deployment, Managed-Entity. Is this the minimum boostrapping module set needed in CTL_BASE/modules? If so, then only Managed-Entity should be included during &quot;ctl-project -a create&quot;.
* Forcing a complete rebuilding of the library is necessary to ensure all the module/commands.properties are regenerated to reflect new/changed commands or options

==Future==
* Single module library directory and type model for an entire ControlTier instance. $CTL_BASE/modules would be the only module lib dir

[[Category:ControlTier Improvement Process]]</text>
    </revision>
  </page>
  <page>
    <title>CTIP - Workbench Server Development Modes</title>
    <id>401</id>
    <revision>
      <id>13543</id>
      <timestamp>2010-11-10T01:46:33Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;depots&quot; to &quot;projects&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;ControlTier Improvement Process&lt;/categorytree&gt;
= Abstract =

This proposal defines a new distinction for the Workbench Server between &quot;Development Mode&quot; and &quot;Production Mode&quot;. Production Mode is to enforce the use of Workbench strictly as a package and metadata model repository, and to restrict its ability to dynamically alter the code modules in an operational environment.

= Description =

Workbench would have two modes, &quot;Development Mode&quot; and &quot;Production Mode&quot;.  Development Mode would not have any restrictions and would be much as Workbench is as of version &lt;= 3.3.0.  Production Mode would enforce this restriction:

* All Type model changes are prohibited with the exception of loading in entire Libraries via a ControlTier Extension Archive format (see the [[CTIP - New Extension Archive and Libraries]])

This means that no Workbench user would be allowed to make any patch-like changes to any code Modules.  The &quot;control code&quot; of the system would be effectively Read-Only. The only way to change the modules would be to install an entirely new Library, either over-top of an existing Library that is installed, or as a new set of modules in the system.

This mode would be configured by framework.properties (ctl) and runtime.properties (wb).

The Mechanisms for updating ctier modules on CTL Client instances would then be :

* In Development Mode, module updates are still done automatically, on a per-type, pull-based update (ie., Install-Module)
** This mechanism works in a distributed environment
* In Production Mode, updates are scheduled ahead of time, and done per-library, using ctl-extension to install 
** ctl-extension needs to be used to update all the local projects

= Considerations =

Please post questions/comments about this proposal to the [http://groups.google.com/group/controltier Mailing List]

[[Category:ControlTier Improvement Process]]</text>
    </revision>
  </page>
  <page>
    <title>CTL</title>
    <id>208</id>
    <redirect />
    <revision>
      <id>10505</id>
      <timestamp>2009-12-12T01:02:06Z</timestamp>
      <contributor>
        <username>Gschueler</username>
        <id>8</id>
      </contributor>
      <comment>Redirected page to [[CTL Command Reference]]</comment>
      <text xml:space="preserve">#REDIRECT [[CTL Command Reference]]</text>
    </revision>
  </page>
  <page>
    <title>CTL-ARCHIVE Command Reference</title>
    <id>124</id>
    <revision>
      <id>16470</id>
      <timestamp>2012-02-22T15:58:00Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Reverted SPAM bot edits</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Command-line utilities&lt;/categorytree&gt;
==Synopsis==

      &lt;pre&gt;ctl-archive -a {create|extract} -f &lt;&gt; [-p &lt;&gt; | -d &lt;&gt;]&lt;/pre&gt;

Since CTL 1.2

==Overview==
      &lt;p&gt;
	The &lt;code&gt;ctl-archive&lt;/code&gt; command is used to create and extract archived
	object data. This command is useful
	when it is preferable to use a package-centric release methodology rather than
	distribute data via a pull-based centralized client/webserver. Using ctl-archive
	you can package object resource.properties data maintained in an SCM 
	and deploy it to CTL hosts using a package distribution tool like RPM.
      &lt;/p&gt;  	   
      &lt;p&gt;
	Object data is structured in the normal CTL project name structure. 
	Archives contain these two kinds of files: 
	[[resource.properties]] for
	any object and the [[resources.properties]] that shows the mapping
	of objects to nodes:
      &lt;/p&gt;

See [[ProjectBuilder]]'s &lt;code&gt;archive-resources&lt;/code&gt; command to create an archive from data stored in Workbench.

==Directory structure==

	&lt;p&gt;For users maintaining these files in an SCM, employ the following
	directory structure to faciliate easy &lt;code&gt;ctl-archive&lt;/code&gt; use:
	&lt;/p&gt;
	&lt;p&gt; Object data : Entity info organized by type and name&lt;/p&gt;
	&lt;p&gt;
	  &lt;em&gt;{project}&lt;/em&gt;/resources/&lt;em&gt;{type}&lt;/em&gt;/&lt;em&gt;{name}&lt;/em&gt;/var/resource.{properties|xml|rdf}
	&lt;/p&gt;
	&lt;p&gt;resources.properties : Maps the resources to nodes&lt;/p&gt;
	&lt;p&gt;
	  &lt;em&gt;{project}&lt;/em&gt;/etc/resources.properties.
	&lt;/p&gt;

Example directory structure
&lt;pre&gt;
demo
|-- resources
|   `-- Service
|       |-- mock
|       |-- mock1
|       |   `-- var
|       |       `-- resource.properties
|       |-- mock2
|       |   `-- var
|       |       `-- resource.properties
|       `-- simpleApache
|           `-- var
|               `-- resource.properties
`-- etc
    `-- resources.properties
&lt;/pre&gt;

==Filtered extraction==

	&lt;p&gt;The &lt;code&gt;ctl-archive&lt;/code&gt; extract action only extracts resource.properties
	files for objects registered to hosts thost registrations
	in the resources.properties file. This ensures that extraneous object data
	is not present on any host.
	&lt;/p&gt; 
      
==Options==
      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	  &lt;th&gt;Option&lt;/th&gt;
	  &lt;th&gt;alternate&lt;/th&gt;
	  &lt;th&gt;argument&lt;/th&gt;
	  &lt;th&gt;description&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;-h&lt;/td&gt;
	  &lt;td&gt;--help
	  &lt;/td&gt;
	  &lt;td&gt;false&lt;/td&gt;
	  &lt;td&gt;displays the usage information presented above&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;-a&lt;/td&gt;
	  &lt;td&gt;--action
	  &lt;/td&gt;
	  &lt;td&gt;true&lt;/td&gt;
	  &lt;td&gt;archival action. (create or extract)&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;-d&lt;/td&gt;
	  &lt;td&gt;--dir
	  &lt;/td&gt;
	  &lt;td&gt;true&lt;/td&gt;
	  &lt;td&gt;directory containing depot deployments data&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;-f&lt;/td&gt;
	  &lt;td&gt;--file
	  &lt;/td&gt;
	  &lt;td&gt;true&lt;/td&gt;
	  &lt;td&gt;file to extract or write archived data&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;-p&lt;/td&gt;
	  &lt;td&gt;--project
	  &lt;/td&gt;
	  &lt;td&gt;true&lt;/td&gt;
	  &lt;td&gt;project name name&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;

==Execution==

      &lt;p&gt;Examples:&lt;/p&gt;

      &lt;pre&gt;ctl-archive -a create -p myproject -f myproject-archive.jar&lt;/pre&gt;
      &lt;p&gt;Create an archive for all the resources in the project name: &amp;quot;myproject&amp;quot;
      &lt;/p&gt;

      &lt;pre&gt;ctl-archive -a extract -p myproject -f myproject-archive.jar&lt;/pre&gt;
      &lt;p&gt;Extracts the object data from the archive into project name: &amp;quot;myproject&amp;quot;
      &lt;/p&gt;

      &lt;pre&gt;ctl-archive -a create -d targetdir/myproject -f myproject-archive.jar&lt;/pre&gt;
      &lt;p&gt;Create an archive for all the object data in the directory: &amp;quot;targetdir/myproject&amp;quot;
      &lt;/p&gt;

==Troubleshooting==

===No files extracted===

Condition: 
* Ran &quot;-a extract&quot; but no files were extracted from the archive.
Filtered extraction may have prevented any files to be extracted to the local CTL host.

Check:
* Make sure the resources are registered to that CTL host. Compare the value of &lt;code&gt;framework.node.name&lt;/code&gt; in ${CTL_BASE}/etc/framework.properties file to the &quot;object-deployment&quot; entries in the archive's [[resources.properties]] file. If there are no matches, then no files will be extracted.

Resolutions:
* Change the node reference so that framework.node.name matches one of the node referrers in the archive's resources.properties

{{Reference/navbox}}
[[Category:Command-line utilities]]</text>
    </revision>
  </page>
  <page>
    <title>CTL-CHECK Command Reference</title>
    <id>1445</id>
    <revision>
      <id>16471</id>
      <timestamp>2012-02-22T15:58:44Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Undo revision 15560 by [[Special:Contributions/Parrishcartwright|Parrishcartwright]] ([[User talk:Parrishcartwright|talk]]) Reverted SPAM bot edits</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Command-line utilities&lt;/categorytree&gt;
{{Version Required|3.4.9}}

== Synopsis ==

 ctl-check [-vq] -d basedir  -n nodename [-N hostname] -s serverhostname [ --key=value ]
 
==Overview ==

ctl-check analyzes the configuration properties files within a particular CTL Base directory (known as CTL_BASE).  You can use it to verify that configuration is correct for a particular base directory to connect to a particular server.

== Options==
{|  border=&quot;1&quot; style=&quot;border: 1px solid #aaa; padding:2px; border-collapse:collapse;&quot;
!Option!!Argument!!Description
|-
| -d
| true
|specifies the CTL_BASE path to check.
|-
| -n
| true
|  specify the name of the Node object in the CTL_BASE directory.  
|-
| -N
| true
| specify the hostname of the Node object in the CTL_BASE directory.  If &lt;code&gt;-N&lt;/code&gt; is not specified, then the node name value will also be used as the hostname.
|-
| -s
| true
| specifies the server hostname.
|-
| -q
| false
| executes the tool in &quot;quiet&quot; mode, where no output is printed, and only the exit status of the command tells whether the check succeeded or failed
|-
| -v
| false
| Verbose mode prints additional information
|}

You can also include other pertinent configuration properties to compare with the &lt;code&gt;--key=value&lt;/code&gt; construction.

Note that the &quot;ctl-check&quot; command takes many of the same options as the &quot;ctl-setup&quot; command.  This is because it essentially checks the configuration files in the CTL_BASE directory against the values that would be set if &quot;ctl-setup&quot; had been run with the same input properties.

== Output ==

If no errors are found, and the verbose option is not set, then there will be no output, and the tool with exit with no error code.  

Example execution:

 [ctier@centos5 ~]$ ctl-check -d $HOME/ctier/ctl -n centos5 -N centos5 -s centos5
 (no output)

If any property is set incorrectly, then the tool will exit with a positive error code, and there may be some output printed.

You can use the &lt;code&gt;-v&lt;/code&gt; &quot;verbose&quot; option to enable more detailed output.

    [ctier@centos5 ~]$ ctl-check -d $HOME/ctier/ctl -n centos5 -s centos5 -v
    . Checking properties: /home/ctier/ctier/ctl/etc/framework.properties
    . 97/97 required properties OK
    . Checking properties: /home/ctier/ctier/ctl/etc/project.properties
    . 4/4 properties OK
    . 4/4 required properties OK
    . Checking properties: /home/ctier/ctier/ctl/etc/log4j.properties
    . 21/21 properties OK
    . Checking properties: /home/ctier/ctier/ctl/etc/resource.properties
    . 10/10 required properties OK
    . Checking properties: /home/ctier/ctier/ctl/etc/modules.properties
    . 2/2 required properties OK
    . Checking properties: /home/ctier/ctier/ctl/etc/node.properties
    . 5/5 properties OK
    . 3/3 required properties OK
    . OK: CTL Base directory check complete: /home/ctier/ctier/ctl

If an incorrect property value is found, it is printed:

    [ctier@centos5 ~]$ ctl-check -d $HOME/ctier/ctl -n localhost -s localhost
    ! incorrect property: framework.node=centos5 [expected=localhost]
    ! incorrect property: framework.jobcenter.url=http://centos5:8080/jobcenter [expected=http://localhost:8080/jobcenter]
    ! incorrect property: framework.node.hostname=centos5 [expected=localhost]
    ! incorrect property: framework.server.url=http://centos5:8080/itnav [expected=http://localhost:8080/itnav]
    ! incorrect property: framework.node.name=centos5 [expected=localhost]
    ! incorrect property: framework.webdav.uri=http://centos5:8080/jackrabbit/repository/controltier/projects [expected=http://localhost:8080/jackrabbit/repository/controltier/projects]
    ! incorrect property: framework.server.hostname=centos5 [expected=localhost]
    ! file had errors: /home/ctier/ctier/ctl/etc/framework.properties
    ! incorrect property: node.name=centos5 [expected=localhost]
    ! incorrect property: node.hostname=centos5 [expected=localhost]
    ! file had errors: /home/ctier/ctier/ctl/etc/node.properties
    ! NOT OK: CTL Base directory check FAILED: /home/ctier/ctier/ctl

The output prints the values which were incorrect, along with the expected values. It also prints the path of any files that had incorrect values.  Finally it prints that the base directory check failed.

{{Reference/navbox}}
[[Category:Command-line utilities]]</text>
    </revision>
  </page>
  <page>
    <title>CTL-DEPOT Command Reference</title>
    <id>126</id>
    <redirect />
    <revision>
      <id>16643</id>
      <timestamp>2012-02-23T15:39:23Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Reverting SPAM bot edits</comment>
      <text xml:space="preserve">#REDIRECT [[CTL-PROJECT Command Reference]]</text>
    </revision>
  </page>
  <page>
    <title>CTL-EXEC Command Reference</title>
    <id>279</id>
    <revision>
      <id>16472</id>
      <timestamp>2012-02-22T15:59:19Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Removed SPAM bot edits</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Command-line utilities&lt;/categorytree&gt;
==Synopsis==

            &lt;pre&gt;ctl-exec [-h] [-v] [-V] [-q]
[-threadcount &amp;lt;1&amp;gt;] [-K] [-I filter] [-X filter] [--filter-exclude-precedence true/false]
[-p project] 
[[-s scriptfile] | -stdin | [-- command-string]]&lt;/pre&gt;

=Overview=
            &lt;p&gt;
                The CTL-EXEC command is used to remotely execute [[Running ad hoc commands| ad-hoc shell commands]] on a set of nodes
                which are specified by the filter options.
            &lt;/p&gt;
            &lt;p&gt;
                ctl-exec invocations are composed of four sections:
            &lt;/p&gt;
            &lt;pre&gt;ctl-exec [general options] [node dispatch options] &amp;lt;project&amp;gt; [command option]&lt;/pre&gt;

==General Options==
            &lt;table border=&quot;1&quot;&gt;
                &lt;tr&gt;
                    &lt;th&gt;Option&lt;/th&gt;
                    &lt;th&gt;alternate&lt;/th&gt;
                    &lt;th&gt;argument&lt;/th&gt;
                    &lt;th&gt;description&lt;/th&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td&gt;-h&lt;/td&gt;
                    &lt;td&gt;
                    &lt;/td&gt;
                    &lt;td&gt;false&lt;/td&gt;
                    &lt;td&gt;displays the usage information presented above&lt;/td&gt;
                &lt;/tr&gt;

                &lt;tr&gt;
                    &lt;td&gt;-v&lt;/td&gt;
                    &lt;td&gt;&lt;/td&gt;
                    &lt;td&gt;false&lt;/td&gt;
                    &lt;td&gt;run verbose&lt;/td&gt;
                &lt;/tr&gt;

                &lt;tr&gt;
                    &lt;td&gt;-V&lt;/td&gt;
                    &lt;td&gt;&lt;/td&gt;
                    &lt;td&gt;false&lt;/td&gt;
                    &lt;td&gt;turn on debug output&lt;/td&gt;
                &lt;/tr&gt;
		&lt;tr&gt;
                    &lt;td&gt;-q&lt;/td&gt;
                    &lt;td&gt;quiet&lt;/td&gt;
                    &lt;td&gt;false&lt;/td&gt;
                    &lt;td&gt;show only error messages&lt;/td&gt;
                &lt;/tr&gt;

		&lt;tr&gt;
                    &lt;td&gt;-N&lt;/td&gt;
                    &lt;td&gt;nodesfile&lt;/td&gt;
                    &lt;td&gt;true&lt;/td&gt;
                    &lt;td&gt;External file containing nodes model&lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;

==Node Dispatch Options==
            &lt;table border=&quot;1&quot;&gt;
                &lt;tr&gt;
                    &lt;th&gt;Option&lt;/th&gt;
                    &lt;th&gt;alternate&lt;/th&gt;
                    &lt;th&gt;argument&lt;/th&gt;
                    &lt;th&gt;description&lt;/th&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td&gt;-C&lt;/td&gt;
                    &lt;td&gt;--threadcount&lt;/td&gt;
                    &lt;td&gt;true&lt;/td&gt;
                    &lt;td&gt;number of threads&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td&gt;-K&lt;/td&gt;
                    &lt;td&gt;&lt;/td&gt;
                    &lt;td&gt;false&lt;/td&gt;
                    &lt;td&gt;keep going when an error occurs on multiple dispatch&lt;/td&gt;
                &lt;/tr&gt;

                &lt;tr&gt;
                    &lt;td&gt;-I&lt;/td&gt;
                    &lt;td&gt;--nodes&lt;/td&gt;
                    &lt;td&gt;true&lt;/td&gt;
                    &lt;td&gt;include node parameter list&lt;/td&gt;
                &lt;/tr&gt;


                &lt;tr&gt;
                    &lt;td&gt;-X&lt;/td&gt;
                    &lt;td&gt;--xnodes&lt;/td&gt;
                    &lt;td&gt;true&lt;/td&gt;
                    &lt;td&gt;exclude node parameter list&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td&gt;&lt;/td&gt;
                    &lt;td&gt;--filter-exclude-precedence&lt;/td&gt;
                    &lt;td&gt;true&lt;/td&gt;
                    &lt;td&gt;set the exclusion filter to have precedence or not. (true/false)&lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
            &lt;p&gt;
                If either one or both of &lt;code&gt;-I&lt;/code&gt; and &lt;code&gt;-X&lt;/code&gt; are specified, then the command
                is executed on the set of nodes matching the filters.  Otherwise, it is executed on &lt;strong&gt;all&lt;/strong&gt;
                nodes found.
            &lt;/p&gt;

===Node Filtering Keys ===

The &lt;code&gt;-X&lt;/code&gt; and &lt;code&gt;-I&lt;/code&gt; options allow specifying a particular set of Nodes by use of Filters.  You specify a Filter by using the argument value of &lt;code&gt;key=value&lt;/code&gt; as the argument to the option.  If no &lt;code&gt;key=&lt;/code&gt; is specified, then the default key of '''hostname''' is used.

These are the filter keys:

{| border=&quot;1&quot; cellpadding=&quot;4&quot; cellspacing=&quot;0&quot; style=&quot;border: 1px solid #aaa;border-collapse:collapse&quot;
!key !! description
|-
|hostname || the Node Hostname value (default key)
|-
|name || the Node Name
|-
|type ||the Node Type (in most cases Nodes are always &quot;Node&quot; type)
|-
|tags || the Node tags
|-
|os-name || the Node Operating System Name
|-
|os-family || the Node Operating System Family (unix,windows,...)
|-
|os-arch || the Node Operating System Architecture (x86,...)
|-
|os-version || the Node Operating System Version
|}


* See the document [[Dispatcher options]] for further discussion of node filtering.

==Project==
            &lt;p&gt;
                The set of nodes used as the basis for filtering is read from the
                [[nodes.properties]]
                file for the specific Project that is specified using the &lt;code&gt;-p&lt;/code&gt; option:
            &lt;/p&gt;
            &lt;table border=&quot;1&quot;&gt;
                &lt;tr&gt;
                    &lt;th&gt;Option&lt;/th&gt;
                    &lt;th&gt;description&lt;/th&gt;
                    &lt;th&gt;required&lt;/th&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td&gt;-p&lt;/td&gt;
                    &lt;td&gt;project name name&lt;/td&gt;
                    &lt;td&gt;TRUE, if more than one project exists&lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
            &lt;p&gt;
                The project name argument
                &lt;code&gt;-p&lt;/code&gt;
                is optional &lt;em&gt;only when there is a single project&lt;/em&gt;. Otherwise it is required.
            &lt;/p&gt;

==Execution==
            &lt;p&gt;
                The CTL-EXEC command executes in two modes, depending on whether required arguments are specified or not:
                Command Mode, and Listing Mode.
            &lt;/p&gt;
            
===Command Mode===

		&lt;p&gt; Command mode occurs when the &lt;code&gt;-p&lt;/code&gt; option is present
		(or there is only one Project),
		ando one (and only one) of the following options are specified.
		&lt;/p&gt;
		&lt;table border=&quot;1&quot;&gt;
                &lt;tr&gt;
                    &lt;th&gt;Option&lt;/th&gt;
                    &lt;th&gt;alternate&lt;/th&gt;
                    &lt;th&gt;argument&lt;/th&gt;
                    &lt;th&gt;description&lt;/th&gt;
                &lt;/tr&gt;
		&lt;tr&gt;
                    &lt;td&gt;--&lt;/td&gt;
                    &lt;td&gt;&lt;/td&gt;
                    &lt;td&gt;true&lt;/td&gt;
                    &lt;td&gt;run specified commands&lt;/td&gt;
                &lt;/tr&gt;

		&lt;tr&gt;
                    &lt;td&gt;-s&lt;/td&gt;
                    &lt;td&gt;--script&lt;/td&gt;
                    &lt;td&gt;true&lt;/td&gt;
                    &lt;td&gt;run specified script&lt;/td&gt;
                &lt;/tr&gt;
		&lt;tr&gt;
                    &lt;td&gt;-S&lt;/td&gt;
                    &lt;td&gt;--stdin&lt;/td&gt;
                    &lt;td&gt;false&lt;/td&gt;
                    &lt;td&gt;executed input read from STDIN&lt;/td&gt;
                &lt;/tr&gt;
		&lt;/table&gt;

===Command Mode: Run specified commands after &quot;--&quot;===

                    &lt;p&gt;
                        The remote (or locally) shell command that is invoked is specified after the &lt;code&gt;--&lt;/code&gt; on the command-line.
                    &lt;/p&gt;
                    &lt;p&gt;
                        This string should begin with the command name and be followed by any arguments you want to
                        pass to it.
                    &lt;/p&gt;
                    &lt;p&gt;
                        Examples:
                    &lt;/p&gt;
                    &lt;pre&gt;ctl-exec -I tags=web -- apachectl restart&lt;/pre&gt;
		    &lt;p&gt;Executes the &amp;quot;apachectl restart&amp;quot; command across all nodes
		    tagged as &amp;quot;web&amp;quot;.
		    &lt;/p&gt;
                &lt;pre&gt;ctl-exec -p MyProject -- whoami&lt;/pre&gt;
                &lt;p&gt;
                    This executes the shell command &quot;whoami&quot; on all nodes in the project &quot;MyProject&quot;.
                &lt;/p&gt;
                &lt;pre&gt;ctl-exec -- apachectl stop&lt;/pre&gt;
                &lt;p&gt;
                    If there is only one project, then the &lt;code&gt;-p&lt;/code&gt; option can be left off.  This executes
                    &quot;apachectl stop&quot; on all nodes in the one available project.
                &lt;/p&gt;
                &lt;pre&gt;ctl-exec -p MyProject -X os-family=windows -- ps -u &lt;/pre&gt;
                &lt;p&gt;
                    This executes &quot;ps -u&quot; on all non-Windows nodes in project MyProject.
                &lt;/p&gt;
                &lt;pre&gt;ctl-exec -p MyProject -I hostname=web.* -K -- apachectl status&lt;/pre&gt;
                &lt;p&gt;
                    This executes &quot;apachectl status&quot; on all nodes matching hostname &quot;web.*&quot;, and uses &lt;code&gt;-K&lt;/code&gt;
                    to keep going if any node causes an error.
                &lt;/p&gt;
                &lt;pre&gt;ctl-exec -p MyProject -I tags=dev -K -C 3 -- sh -c update.sh &lt;/pre&gt;
                &lt;p&gt;
                    This executes &quot;sh -c update.sh&quot; on all nodes with the tag &lt;code&gt;dev&lt;/code&gt;, using &lt;code&gt;-K&lt;/code&gt;,
                    and specifies &lt;code&gt;-C 3&lt;/code&gt; so that the executions happen concurrently on 3 threads.
                &lt;/p&gt;

===Command Mode: run specified script &quot;-s script&quot;===

		  &lt;p&gt;Sometimes it is preferable to save a sequence of command
		  statements into a file on the admin host
		  and then execute that file across a number of target hosts. 
		  The script specified via the &lt;code&gt;-s&lt;/code&gt; option is a script
		  local to where the ctl-exec command is executed but that script file
		  is copied to the remote target machines and then executed.

		  &lt;/p&gt;
		  &lt;p&gt;Examples:&lt;/p&gt;
		  &lt;pre&gt;ctl-exec -s myscript.sh&lt;/pre&gt;
		  &lt;p&gt;Executes the script, &amp;quot;myscript.sh&amp;quot;, across all nodes.
		  &lt;/p&gt;

		  &lt;pre&gt;ctl-exec --scriptfile myscript.sh&lt;/pre&gt;
		  &lt;p&gt;Same as above.
		  &lt;/p&gt;

		  &lt;p&gt;Note: The script file is copied to a temporary directory on the target machines
		  (on unix it is /tmp and on Windows c:\windows\temp)
		  &lt;/p&gt;

===Command Mode: executed input read from STDIN &quot;--stdin&quot;===

		  &lt;p&gt;As an alternative to specifying the commands either as deferred arguments
		  after the double hyphen (&amp;quot;--&amp;quot;) or as a saved script (&amp;quot;-s script&amp;quot;),
		  ctl-exec can also read command input from stdin.
		  &lt;/p&gt;

		  &lt;p&gt;Examples&lt;/p&gt;
		&lt;syntaxhighlight lang=&quot;bash&quot;&gt;echo &quot;uname -a&quot; | ctl-exec --stdin &lt;/syntaxhighlight&gt;
		&lt;p&gt;Execute the &amp;quot;uname -a&amp;quot; command across all nodes.
		Uses a command pipeline to print commands that are
		read via stdin.
		&lt;/p&gt;
		&lt;syntaxhighlight lang=&quot;bash&quot;&gt;ctl-exec --stdin &lt;&lt;END
  statement 1;
  statement 2;
  statement 3;
END&lt;/syntaxhighlight&gt;
                &lt;p&gt;Use a here document to input several command statements
		via stdin.
		&lt;/p&gt;
		&lt;p&gt;Note: The input read from stdin is saved to a temporary file
		and then ctl-exec uses the &lt;code&gt;-s script&lt;/code&gt; mode described above
		to transfer and invoke the script.
		&lt;/p&gt;

==Listing Mode==
                &lt;p&gt;
                    CTL-EXEC will enter Listing Mode when no Command String is specified on the command line.
                &lt;/p&gt;
                &lt;p&gt;
                    In this mode, CTL-EXEC will output the list of available nodes.
                &lt;/p&gt;
                &lt;p&gt;
                    Example:
                &lt;/p&gt;
                &lt;pre&gt;$ ctl-exec
daffy porky&lt;/pre&gt;
                &lt;p&gt;When the &lt;code&gt;-v&lt;/code&gt; (verbose)
                    option is specified, the node listing will include the details about the nodes that can be used
                    for filtering:
                &lt;/p&gt;
                &lt;ul&gt;
                    &lt;li&gt;Hostname&lt;/li&gt;
                    &lt;li&gt;OS Architecture&lt;/li&gt;
                    &lt;li&gt;OS Family&lt;/li&gt;
                    &lt;li&gt;OS Name&lt;/li&gt;
                    &lt;li&gt;OS Version&lt;/li&gt;
                    &lt;li&gt;Tags&lt;/li&gt;
                &lt;/ul&gt;
                &lt;p&gt;
                    With &lt;code&gt;-v&lt;/code&gt;:
                &lt;/p&gt;
                &lt;pre&gt;$ ctl-exec -v
Daffy:
   hostname: daffy.local
   os-arch: i386
   os-family: unix
   os-name: Mac OS X
   os-version: 10.5.2
   tags: [development]
porky:
   hostname: porky
   os-arch: x86
   os-family: windows
   os-name: Windows XP
   os-version: 5.1
   tags: [testing]&lt;/pre&gt;

                &lt;p&gt;
                    When combined with the &lt;code&gt;-I/-X&lt;/code&gt; Node Filtering options, you can easily determine which
                    nodes will be the target of any remotely executed command prior to invoking it:
                &lt;/p&gt;
                &lt;pre&gt;$ ctl-exec -v -X os-family=unix
porky:
   hostname: porky
   os-arch: x86
   os-family: windows
   os-name: Windows XP
   os-version: 5.1
   tags: [testing]&lt;/pre&gt;

=See also=
* [[Running ad hoc commands]]

{{Reference/navbox}}

[[Category:Command-line utilities]]</text>
    </revision>
  </page>
  <page>
    <title>CTL-EXTENSION Command Reference</title>
    <id>193</id>
    <revision>
      <id>16473</id>
      <timestamp>2012-02-22T15:59:45Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Removed SPAM bot edits</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Command-line utilities&lt;/categorytree&gt;
=Synopsis=
&lt;code&gt;ctl-extension [options]&lt;/code&gt;

=Overview=

The &lt;code&gt;ctl-extension&lt;/code&gt; command installs an extension archive created by [[ProjectBuilder]] build-library command.

Extensions add CTL framework level functionality that is available to any other CTL user. Extensions can include the following:

* Java class libararies which may include Ant tasks and types, and their own APIs.
* CTL command modules
* framework commands that are installed in $CTL_HOME/bin

=Options=

      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	  &lt;th&gt;Option&lt;/th&gt;
	  &lt;th&gt;alternate&lt;/th&gt;
	  &lt;th&gt;argument&lt;/th&gt;
	  &lt;th&gt;description&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;-h&lt;/td&gt;
	  &lt;td&gt;--help
	  &lt;/td&gt;
	  &lt;td&gt;false&lt;/td&gt;
	  &lt;td&gt;displays the usage information presented above&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;-S&lt;/td&gt;
	  &lt;td&gt;--nosetup
	  &lt;/td&gt;
	  &lt;td&gt;false&lt;/td&gt;
	  &lt;td&gt;do not run ctl-setup&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;-f&lt;/td&gt;
	  &lt;td&gt;--file
	  &lt;/td&gt;
	  &lt;td&gt;true&lt;/td&gt;
	  &lt;td&gt;file to install&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;-o&lt;/td&gt;
	  &lt;td&gt;--overwrite
	  &lt;/td&gt;
	  &lt;td&gt;false&lt;/td&gt;
	  &lt;td&gt;overwrite framework with files from extension&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;

=Environment Variables=
      &lt;p&gt;The following environment variables are assumed during execution:
      &lt;/p&gt;
            &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	  &lt;th&gt;key&lt;/th&gt;
	  &lt;th&gt;description&lt;/th&gt;
	&lt;/tr&gt;	
	&lt;tr&gt;
	  &lt;td&gt;CTL_HOME&lt;/td&gt;
	  &lt;td&gt;CTL installation directory&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;CTL_BASE&lt;/td&gt;
	  &lt;td&gt;CTL framework instance directory&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;

=Execution=

&lt;p&gt;Install an extension named &quot;default&quot;&lt;/p&gt;
&lt;pre&gt;ctl-extension -f default-extension.jar&lt;/pre&gt;

&lt;p&gt;Install an extension named &quot;default&quot; but don't run the ctl-setup command&lt;/p&gt;
&lt;pre&gt;ctl-extension --nosetup -f default-extension.jar&lt;/pre&gt;

=Files=

==Installation layout==
Installed extensions can be found under $CTL_HOME/lib/extensions as described below:

&lt;pre&gt;
ctl-home
  |
  +-bin                 // shell scripts
  |
  +-classes             // bootstrap classes 
  |  
  +-lib                 
  |  |
  |  |
  |  +-extensions       // extensions base directory
  |      |
  |      +-myExtension  //Example extension, &quot;myExtension&quot;
  |         |
  |         + bins
  |         + jars
  |         + modules
  |         + properties
  |
  +-pkgs                // pkgs home
&lt;/pre&gt;

{{Reference/navbox}}
[[Category:Command-line utilities]]</text>
    </revision>
  </page>
  <page>
    <title>CTL-JOBS Command Reference</title>
    <id>1920</id>
    <revision>
      <id>16455</id>
      <timestamp>2012-02-22T12:06:12Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Removed SPAM bot edit</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Command-line utilities&lt;/categorytree&gt;
{{version|3.5.2}}

==Synopsis==

&lt;pre&gt;
ctl-jobs &amp;lt;action&amp;gt; [-h] [-v] [action options...]
ctl-jobs [list] [-n name] [-g group] [-i idlist] [-p project] [-c command] [-r resource] [-t type] [-f file]
ctl-jobs load  -f file
&lt;/pre&gt;

Since CTL 3.5

==Overview==

The ctl-jobs command lists Jobs stored on the server and optionally downloads them as XML, or uploads Job XML to the server from a file.

(This command takes the place of the [[ProjectBuilder]]'s commands &quot;load-jobs&quot; and &quot;find-jobs&quot; from ControlTier 3.4)

The tool provides two actions:

;list
: list the stored Jobs on the server (default action)
;load
: upload XML job definitions up to the server

===Related Tools ===

* [[ctl-run]] runs a Job stored on the server.
* [[ctl-queue]] lists the running job executions, and can kill executions.
* [[ctl]] and [[ctl-exec]] can use the &lt;code&gt;-Q&lt;/code&gt; flag to submit &quot;transient&quot; executions to the [[Central Dispatcher]]

==General Options==

{| border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;3&quot; style=&quot;border: 1px solid #aaa; border-collapse:collapse&quot;
!Option!!alternate!!argument!!description
|-
| -h || --help || false || Displays help and usage information
|-
| -v || --verbose || false || Enable verbose output
|}

== List Action ==

Options:

{| border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;3&quot; style=&quot;border: 1px solid #aaa; border-collapse:collapse&quot;
!Option!!alternate!!argument!!description
|-
| -g || --group || true || Group name. List jobs within this group or sub-group
|-
| -i || --idlist||true||       Job ID List. List Jobs with these IDs explicitly.  Comma-separated, e.g.: 1,2,3.
|-
| -c||--command||true||      Command name. List Jobs for Defined commands using this command.
|-
| -n||--name||true||         Job Name. List jobs matching this name. 
|-
| -p||--project||true||      Project name. List jobs within this project.
|-
| -r||--resource||true||     Resource name. List jobs for Defined commands using this resource.
|-
|  -t||--type||true||         Type name. List Jobs for Defined commands using this type.
|-
|  -f||--file||true|| File path. For list action, path to store the job definitions found in XML.  
|}

The List action queries the server for a list of matching jobs, and displays the result list. 
Optionally the definitions of the matching jobs can be stored in a file if &lt;code&gt;-f&lt;/code&gt; is specified.

The jobs can be specifed explicitly by ID using the &lt;code&gt;-i/--idlist&lt;/code&gt; option.  Otherwise they are searched using the options as filter criteria, and all matching Jobs are returned.

If no options to the &lt;code&gt;list&lt;/code&gt; action are supplied, then all Jobs on the server are returned.

=== Execution ===

List all jobs on the server:

 ctl-jobs

List only a single job by ID:

  ctl-jobs -i 123

List a set of jobs by ID and store them in a file:

  ctl-jobs -i 1,23,4 --file out.xml

List all jobs in the project &quot;demo&quot;
  
  ctl-jobs -p demo

List all Jobs that run a command on the JBossServer resource named &quot;qaJboss1&quot;

  ctl-jobs -t JBossServer -r qaJboss1

List all Jobs that run a &quot;Deploy&quot; command
 
  ctl-jobs -c Deploy

Output from the command will list the job name, ID number in brackets, and the URL to view the Job in the server.

 Found 5 jobs:
    1: Build all [38] &lt;http://Venkman.local:9090/ctlcenter/scheduledExecution/show/38&gt;
    2: Build and Update Server0 [31] &lt;http://Venkman.local:9090/ctlcenter/scheduledExecution/show/31&gt;
    3: Build and Update Server1 [17] &lt;http://Venkman.local:9090/ctlcenter/scheduledExecution/show/17&gt;
    4: Build and Update Server2 [45] &lt;http://Venkman.local:9090/ctlcenter/scheduledExecution/show/45&gt;
    5: Deploy Server4 [46] &lt;http://Venkman.local:9090/ctlcenter/scheduledExecution/show/46&gt;

== Load Action ==

Options:

{| border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;3&quot; style=&quot;border: 1px solid #aaa; border-collapse:collapse&quot;
!Option!!alternate!!argument!!description
|-
| -d||--duplicate||true||    Duplicate job behavior option. When loading jobs, treat definitions that already exist on the server in the given manner: 'update' existing jobs,'skip' the uploaded definitions, or 'create' them anyway. (load action. default: update)
|-
| -f||--file||true||         File path. For load action, path to an XML file to upload. (required)
|}

The Load action uploads the specified file to the server, and the list of loaded jobs are displayed.  If any Jobs cannot be stored (e.g. the user is unauthorized to run a certain command), the list of unsuccessfully created jobs are also displayed.

The &lt;code&gt;-d/--duplicate&lt;/code&gt; option lets you specify what should happen if any of the Job definitions have the same Name and Group of an existing Job on the server.  The default option is &quot;update&quot;, which means to overwrite the existing definitions with the new version.  &quot;skip&quot; means to ignore the uploaded definition.  &quot;create&quot; means to create a new Job with the uploaded definition (hence making the Group+Name non-unique).

=== Execution===

Load a file to the server:

 ctl-jobs load -f jobs.xml
Output:
 Total Jobs Uploaded: 2 jobs
 Succeeded creating/updating 2  Jobs:
    1: Build and Update Server2 [45] &lt;http://Venkman.local:9090/ctlcenter/scheduledExecution/show/45&gt;
    2: Deploy Server4 [46] &lt;http://Venkman.local:9090/ctlcenter/scheduledExecution/show/46&gt;

If a Job was not successfully created, you will see it mentioned along with a message about why it failed.  The number next to the Job name indicates the index of the definition in the uploaded XML:

 ctl-jobs load -f jobs.xml
Output:
 Total Jobs Uploaded: 3 jobs
 Failed to add 1 Jobs:
    3: Build Server1 : Project was not found: north
 Project was not found: north
 Succeeded creating/updating 2  Jobs:
    1: Build and Update Server2 [45] &lt;http://Venkman.local:9090/ctlcenter/scheduledExecution/show/45&gt;
    2: Deploy Server4 [46] &lt;http://Venkman.local:9090/ctlcenter/scheduledExecution/show/46&gt;

If the &lt;code&gt;-d skip&lt;/code&gt; is specified, then any jobs definitions that were skipped will be listed:

 ctl-jobs load -f jobs.xml -d skip
Output:
 Total Jobs Uploaded: 2 jobs
 Skipped 2 Jobs:
    1: Build and Update Server2 [45] &lt;http://Venkman.local:9090/ctlcenter/scheduledExecution/show/45&gt;
    2: Deploy Server4 [46] &lt;http://Venkman.local:9090/ctlcenter/scheduledExecution/show/46&gt;

{{Reference/navbox}}
[[Category:Command-line utilities]]
[[Category:CTL Center]]</text>
    </revision>
  </page>
  <page>
    <title>CTL-PROJECT Command Reference</title>
    <id>1913</id>
    <revision>
      <id>16474</id>
      <timestamp>2012-02-22T16:00:10Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Removed SPAM bot edits</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Command-line utilities&lt;/categorytree&gt;
{{version|3.6.0}}

==Synopsis==

&lt;pre&gt;
ctl-project [-h] [-v] [&amp;lt;nodefilter options&amp;gt;] [-p project] [-a action] [-S] [-D] [-n]
&lt;/pre&gt;

==Overview==
      &lt;p&gt;
	The ctl-project command is used to adminstrate [[Project|project]]s
	in the CTL framework. 
      &lt;/p&gt;  	   
      &lt;p&gt;''Projects'': CTL allows you to organize modules and resource into a &amp;quot;project&amp;quot;. 
	Projects allow you to partition your work into separate workspaces. 
	You might choose to create a project for managing a process in a new environment
	or might choose to designate a project for managing a related set of services.
      &lt;/p&gt;
      &lt;p&gt;
	The ctl-project command provides a set of adminstrative actions for creating, 
	updating and removing projects in the CTL base directory.
     &lt;/p&gt;

==General Options==
      &lt;table class=&quot;wikitable&quot;&gt;
	&lt;tr&gt;
	  &lt;th&gt;Option&lt;/th&gt;
	  &lt;th&gt;alternate&lt;/th&gt;
	  &lt;th&gt;argument&lt;/th&gt;
	  &lt;th&gt;description&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;-h&lt;/td&gt;
	  &lt;td&gt;--help
	  &lt;/td&gt;
	  &lt;td&gt;false&lt;/td&gt;
	  &lt;td&gt;displays the usage information &lt;/td&gt;
	&lt;/tr&gt;

	&lt;tr&gt;
	  &lt;td&gt;-v&lt;/td&gt;
	  &lt;td&gt;--verbose&lt;/td&gt;
	  &lt;td&gt;false&lt;/td&gt;
	  &lt;td&gt;run verbose&lt;/td&gt;
	&lt;/tr&gt;
	
      &lt;/table&gt;
  
===Project===
      &lt;table class=&quot;wikitable&quot;&gt;
	&lt;tr&gt;
	  &lt;th&gt;option&lt;/th&gt;
	  &lt;th&gt;description&lt;/th&gt;
	  &lt;th&gt;required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;-p&lt;/td&gt;
	  &lt;td&gt;Name of the project &lt;/td&gt;
	  &lt;td&gt;TRUE, if more than one project exists&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;

If only one project exists in the CTL instance, then you can omit the &quot;-p&quot; option as it will be defaulted.

===Action options===
      &lt;p&gt;The &lt;code&gt;ctl-project&lt;/code&gt; command supports several actions via the &quot;-a&quot; flag: 
      &lt;/p&gt; 
      &lt;table class=&quot;wikitable&quot;&gt;
	&lt;tr&gt;
	  &lt;th&gt;action&lt;/th&gt;
	  &lt;th&gt;description&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;create&lt;/td&gt;
	  &lt;td&gt;Create a new project &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;install&lt;/td&gt;
	  &lt;td&gt;Install the modules and resources registered in the 
	  [[resources.xml]] file
	  &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;remove&lt;/td&gt;
	  &lt;td&gt;Remove the project  directory&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;purge&lt;/td&gt;
	  &lt;td&gt;Clean the project so that it only contains the
	  modules and resources specified in the
	  [[resources.xml]] file
	  &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;pview&lt;/td&gt;
	  &lt;td&gt;Generate the Process View XML files for the matched resources, using the &lt;code&gt;-n&lt;/code&gt; arguments. Can specify the resources file with &lt;code&gt;-f&lt;/code&gt;.
	  &lt;/td&gt;
	&lt;/tr&gt;
     &lt;/table&gt;

Additional options:
      &lt;table class=&quot;wikitable&quot;&gt;
	&lt;tr&gt;
	  &lt;th&gt;flag&lt;/th&gt;
	  &lt;th&gt;description&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;-S,--strict&lt;/td&gt;	      
	  &lt;td&gt;Optional flag that sets strict mode.
	  Abides by the registrations in resources.xml file&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;-D,--install&lt;/td&gt;
	  &lt;td&gt;Optional flag that specifies to run the &lt;code&gt;install&lt;/code&gt; action.&lt;/td&gt;
	&lt;/tr&gt;
       &lt;tr&gt;
	  &lt;td&gt;-n,--name&lt;/td&gt;
	  &lt;td&gt;Optional flag that specifies the name of the resource(s) to install&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;
      
=== Nodefilter Options===

  [-I &amp;lt;include&amp;gt;] [-X &amp;lt;exclude&amp;gt;] [-C threads] [-K] [-F failednodes]

These are the common Nodefilter Options used by [[Ctl]] and [[ctl-exec]] as well.

{| border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;3&quot; style=&quot;border: 1px solid #aaa; border-collapse:collapse&quot;
!option!!description
|-
| -I ''filter'' || Included node filters, see [[Node filtering options]]
|-
| -X ''filter'' || Excluded node filters, see [[Node filtering options]]
|-
| -C ''count'' || Threadcount, defaults to 1
|-
| -K || Keepgoing on node failure (no arguments)
|-
| -F ''file'' || Filepath to store the list of failed target nodes.  If this file has already been created by CTL, then '''only''' the list of nodes found in this file are targetted.
|}

If Node filter options are specified, the ctl-project execution is remotely dispatched to the matching nodes by way of [[ctl-exec]].

Example:

  ctl-project -I tags=qa -p demo -a create
  
This is exactly the same as using ctl-exec in this way:

  ctl-exec -I tags=qa -p demo -- ctl-project -p demo -a create

==Execution==

      &lt;p&gt;Examples:&lt;/p&gt;

&lt;pre&gt;ctl-project -p myproject&lt;/pre&gt;
      &lt;p&gt;Create a project named &amp;quot;myproject&amp;quot;
      &lt;/p&gt;
      
&lt;pre&gt;ctl-project -p myproject --action create&lt;/pre&gt;
      &lt;p&gt;Same as above.
      &lt;/p&gt;
     
&lt;pre&gt;ctl-project -p project --action install&lt;/pre&gt;
      &lt;p&gt;Install resources and their modules in the project
      &lt;/p&gt;

&lt;pre&gt;ctl-project -p project --action install -n tomcat1&lt;/pre&gt;
      &lt;p&gt;Install the tomcat1 resource and its module in the project
      &lt;/p&gt;

==Files==

      &lt;p&gt;Each project has its own configuration found under
      &lt;code&gt;$CTL_BASE/projects/&lt;/code&gt;&lt;em&gt;project&lt;/em&gt;&lt;code&gt;/etc/&lt;/code&gt;. These files are automatically generated on the server and stored in the WebDAV repository. The ctl-project command pulls these down when necessary.
      &lt;/p&gt;
      &lt;table class=&quot;wikitable&quot;&gt;
	&lt;caption&gt;Configuration&lt;/caption&gt;
	&lt;tr&gt;
	  &lt;th&gt;file&lt;/th&gt;
	  &lt;th&gt;description&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;[[resources.xml]]&lt;/td&gt;
	  &lt;td&gt;Specifies the resources and node metadata for this project&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;[[modules.properties]]&lt;/td&gt;
	  &lt;td&gt;Specifies the path to the module library&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;
      &lt;p&gt;&amp;nbsp;&lt;/p&gt;
      &lt;p&gt;Each project has its own resources directory found under
      &lt;code&gt;$CTL_BASE/projects/&lt;/code&gt;&lt;em&gt;project&lt;/em&gt;&lt;code&gt;/resources/&lt;/code&gt;.
      &lt;/p&gt;
      &lt;p&gt;Resources are organized by type beneath the resources directory.
      &lt;/p&gt;
    &lt;pre&gt;
$CTL_BASE/projects/&lt;project&gt;/
	  |
	  |-- resources/
	  |     |
	  |     |--TypeA
	  |     |    |
          |     |    |-- &lt;resource&gt;
          |     |    `-- &lt;resource&gt;
	  |     `--TypeB
	  |          |
          |          |-- &lt;resource&gt;
          |          `-- &lt;resource&gt;
	  `-- modules/
	        |
	        |--TypeA
                |
                `--TypeB
      &lt;/pre&gt;
      
{{Reference/navbox}}
[[Category:Command-line utilities]]</text>
    </revision>
  </page>
  <page>
    <title>CTL-QUEUE Command Reference</title>
    <id>1916</id>
    <revision>
      <id>16454</id>
      <timestamp>2012-02-22T12:05:50Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Removed SPAM bot edit</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Command-line utilities&lt;/categorytree&gt;
{{version|3.5.2}}

==Synopsis==

&lt;pre&gt;
ctl-queue &amp;lt;action&amp;gt; [-h] [-e/--eid ID]
&lt;/pre&gt;

Since CTL 3.5

==Overview==

The ctl-queue command is used to query the [[Central Dispatcher]] for a list of
currently running Executions, or to Kill a currently running execution.

The tool provides two actions:

;list
: list the currently running executions on the server (default action)
;kill
: kill the execution specified by ID

===Related Tools ===

* [[ctl-jobs]] lists the available Jobs and can download their definitions.
* [[ctl-run]] runs a Job stored on the server.
* [[ctl]] and [[ctl-exec]] can use the &lt;code&gt;-Q&lt;/code&gt; flag to submit &quot;transient&quot; executions to the [[Central Dispatcher]]

==General Options==

{|
!Option!!alternate!!argument!!description
|-
| -h || --help || false || Displays help and usage information
|}

== List Action ==

This is the default action of the tool, so to list all running Executions, simply use:

 ctl-queue

The output will display the number of executions, and their IDs and identifying names or descriptions, as well as a link to the CTL Center page to follow the output.

Example:
 
    Venkman:~ greg$ ctl-queue 
    Queue: 1 items
    [160] adhoc script job &lt;http://Venkman.local:9090/ctlcenter/execution/follow/160&gt;

== Kill Action ==

This action allows you to specify the Execution ID of a currently running execution that you want to stop.

 ctl-queue kill -e 12

Options:

{|
!Option!!alternate!!argument!!description
|-
| -e || --eid || true || ID of the execution
|}

Example:

    Venkman:~ greg$ ctl-queue kill -e 160
    ctl-queue kill: success. [160] Job status: killed

{{Reference/navbox}}
[[Category:Command-line utilities]]
[[Category:CTL Center]]</text>
    </revision>
  </page>
  <page>
    <title>CTL-RUN Command Reference</title>
    <id>1918</id>
    <revision>
      <id>16453</id>
      <timestamp>2012-02-22T12:05:23Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Undo revision 15620 by [[Special:Contributions/Nixiedelacruz|Nixiedelacruz]] ([[User talk:Nixiedelacruz|talk]]) Removed SPAM bot edit</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Command-line utilities&lt;/categorytree&gt;
{{version|3.5.2}}

==Synopsis==

&lt;pre&gt;
ctl-run [-h] [-v] [-l level] &amp;lt;nodefilters&amp;gt; [-i id] [-j group/name] [-- arguments]
&lt;/pre&gt;

Since CTL 3.5

==Overview==

The ctl-run command is used to start the execution of a Job defined in CTL Center.  The Job is executed on the server, and the ID for the execution is displayed.  This is equivalent to logging in to CTL Center and starting a Job within the web application GUI.

The Job can either be specified by ID (&lt;code&gt;-i&lt;/code&gt;), or by name and optional group (&lt;code&gt;-j&lt;/code&gt;).  The Node filters used for the execution of the job can also be specified on the commandline, and will be used instead of any already defined for the Job.  Arguments to the Execution can be specfied after (&lt;code&gt;--&lt;/code&gt;).

===Related Tools ===

* [[ctl-jobs]] lists the available Jobs and can download their definitions.
* [[ctl-queue]] lists the running job executions, and can kill executions.
* [[ctl]] and [[ctl-exec]] can use the &lt;code&gt;-Q&lt;/code&gt; flag to submit &quot;transient&quot; executions to the [[Central Dispatcher]]

==General Options==

{| border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;3&quot; style=&quot;border: 1px solid #aaa; border-collapse:collapse&quot;
!Option!!alternate!!argument!!description
|-
| -h || --help || false || Displays help and usage information
|-
| -v || --verbose || false || Enable verbose output
|-
| -l || --loglevel || true || log level. (debug|verbose|info|warning|error)
|}

=== Nodefilter Options===

  [-I &amp;lt;include&amp;gt;] [-X &amp;lt;exclude&amp;gt;] [-C threads] [-K|-N] 

These are a subset of the common Nodefilter Options used by [[Ctl]] and [[ctl-exec]] as well.

{| border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;3&quot; style=&quot;border: 1px solid #aaa; border-collapse:collapse&quot;
!option!!description
|-
| -I ''filter'' || Included node filters, see [[Node filtering options]]
|-
| -X ''filter'' || Excluded node filters, see [[Node filtering options]]
|-
| -C ''count'' || Threadcount, defaults to 1
|-
| -K || Keepgoing on node failure (no arguments)
|-
| -N || Do not keepgoing on node failure (no arguments) (overrides stored Job definition)
|-
|}

If Node filter options are specified, the Execution will adopt these filters and options instead of those in the stored Job definition.  The &lt;code&gt;-N&lt;/code&gt; option allows you to override the &quot;keepgoing&quot; option if set to true for a stored Job.

=== Run Options ===

{| border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;3&quot; style=&quot;border: 1px solid #aaa; border-collapse:collapse&quot;
!Option!!alternate!!argument!!description
|-
| -j || --job || true || Job identifier (group and name).  Run a Job specified by Job name and optional group, e.g: 'Group Name/Job Name'.
|-
| -i || --id || true || Job ID. Run the Job with this ID
|}

=== Execution ===

This tool requires a unique Job to be identified for execution.  This is done either by using &lt;code&gt;-i id&lt;/code&gt;, or &lt;code&gt;-j group/name&lt;/code&gt;.  The group is optional if only one Job with the name exists.

Examples:

 ctl-run -i 12

Runs Job with ID 12.

 ctl-run -j 'QA/test/Full Test Suite'

Runs the job named &quot;Full Test Suite&quot; in the &quot;QA/test&quot; group.

 ctl-run -g QA/test -n 'Full Test Suite'

Also runs the job named &quot;Full Test Suite&quot; in the &quot;QA/test&quot; group.

 ctl-run -j 'Full Test Suite'

Also runs the job named &quot;Full Test Suite&quot; if it is the only Job with that name.

If you try to run a job by name only, but it is not unique, you will get an error message like this:

 Venkman:~ greg$ ctl-run -j testJob
 Error: Failed request to run a job: Server reported an error: No unique job matched the input: testJob, null. found (2)

Running a Job and specifying Node filters:

  ctl-run -I tags=dev -X os-family=windows -C 2 -K -j 'test/Job 1'

{{Reference/navbox}}
[[Category:Command-line utilities]]
[[Category:CTL Center]]</text>
    </revision>
  </page>
  <page>
    <title>CTL-SETUP Command Reference</title>
    <id>127</id>
    <revision>
      <id>16475</id>
      <timestamp>2012-02-22T16:00:33Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Undo revision 15621 by [[Special:Contributions/Nixiedelacruz|Nixiedelacruz]] ([[User talk:Nixiedelacruz|talk]]) Removed SPAM bot edits</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Command-line utilities&lt;/categorytree&gt;
==Synopsis==
            
 ctl-setup [-fv] -n nodename [-N hostname] [-s serverhostname] [ --key=value ]

Since CTL 1.0

==Overview==
            &lt;p&gt;
                The CTL-SETUP command is used to setup the CTL software after the
		distribution has been extracted into its installation directory.
            &lt;/p&gt;  
	    &lt;p&gt;The role of the &lt;code&gt;ctl-setup&lt;/code&gt; command is to create a new
	    instance of the CTL framework. CTL allows and encourages the splitting
	    of the CTL software distribution (i.e., the executables that change
	    from release to release), from the user specific configuration, data
	    and module files.
	    &lt;/p&gt;
	    &lt;p&gt;During the first time installation or if the &lt;code&gt;-f&lt;/code&gt; flag is
	    set &lt;code&gt;ctl-setup&lt;/code&gt; will create a new instance of the framework
	    and generate all the configuration files found in &lt;code&gt;$CTL_BASE/etc&lt;/code&gt;.
	    &lt;/p&gt;

See also [[CTL-CHECK Command Reference]] to verify the configuration at any time.

==General Options==
            &lt;table border=&quot;1&quot;&gt;
                &lt;tr&gt;
                    &lt;th&gt;Option&lt;/th&gt;
                    &lt;th&gt;alternate&lt;/th&gt;
                    &lt;th&gt;argument&lt;/th&gt;
                    &lt;th&gt;description&lt;/th&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td&gt;-h&lt;/td&gt;
                    &lt;td&gt;
                    &lt;/td&gt;
                    &lt;td&gt;false&lt;/td&gt;
                    &lt;td&gt;displays the usage information presented above&lt;/td&gt;
                &lt;/tr&gt;

                &lt;tr&gt;
                    &lt;td&gt;-v&lt;/td&gt;
                    &lt;td&gt;&lt;/td&gt;
                    &lt;td&gt;false&lt;/td&gt;
                    &lt;td&gt;run verbose&lt;/td&gt;
                &lt;/tr&gt;

               &lt;tr&gt;
                    &lt;td&gt;-f&lt;/td&gt;
                    &lt;td&gt;&lt;/td&gt;
                    &lt;td&gt;false&lt;/td&gt;
                    &lt;td&gt;Force re-generation of configuration files&lt;/td&gt;
                &lt;/tr&gt;

                &lt;tr&gt;
                    &lt;td&gt;-n&lt;/td&gt;
                    &lt;td&gt;&lt;/td&gt;
                    &lt;td&gt;true&lt;/td&gt;
                    &lt;td&gt;The nodename&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td&gt;-N&lt;/td&gt;
                    &lt;td&gt;&lt;/td&gt;
                    &lt;td&gt;true&lt;/td&gt;
                    &lt;td&gt;The hostname&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td&gt;-key=value&lt;/td&gt;
                    &lt;td&gt;&lt;/td&gt;
                    &lt;td&gt;true&lt;/td&gt;
                    &lt;td&gt;default override&lt;/td&gt;
                &lt;/tr&gt;

            &lt;/table&gt;
      
===Key/value Options===
          &lt;p&gt;Users can override the default values during the installation by
	  specifying one or more &lt;code&gt;-key=value&lt;/code&gt; combinations. 
	  &lt;/p&gt;

==Environment variables==
      &lt;p&gt;The following environment variables are assumed during the 
      execution of &lt;code&gt;ctl-setup&lt;/code&gt;:
      &lt;/p&gt;
            &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	  &lt;th&gt;key&lt;/th&gt;
	  &lt;th&gt;description&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;JAVA_HOME&lt;/td&gt;
	  &lt;td&gt;Java installation directory&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;CTL_HOME&lt;/td&gt;
	  &lt;td&gt;CTL installation directory&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;CTL_BASE&lt;/td&gt;
	  &lt;td&gt;CTL framework instance directory&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;

==Execution==


	&lt;p&gt;Examples:&lt;/p&gt;
	&lt;pre&gt;ctl-setup -n adminhost&lt;/pre &gt;
	&lt;p&gt;This executes the ctl-setup command defining the framework hostname
	as &amp;quot;adminhost&amp;quot;
	&lt;/p&gt;

	&lt;pre&gt;ctl-setup -n user@targethost&lt;/pre&gt;

	&lt;p&gt;Specifying the node name with a &lt;em&gt;user@host&lt;/em&gt;
	format signifies the remote commands will be done
	as &amp;quot;user&amp;quot;.
	&lt;/p&gt;
	
	&lt;pre&gt;ctl-setup -n localhost --framework.workbench.integration.enabled=true&lt;/pre&gt;
	&lt;p&gt;This executes the ctl-setup command defining the framework hostname
	as &amp;quot;localhost&amp;quot; and specifies Workbench configuration be set to &amp;quot;true&amp;quot;.
	&lt;/p&gt;

==Files==

      &lt;p&gt;The &lt;code&gt;ctl-setup&lt;/code&gt; command generates a working configuration
      from a set of template files found in: $CTL_HOME/lib/templates/etc.
      Additionally, initial configuration default values are maintained in 

      &lt;code&gt;ctl-defaults.properties&lt;/code&gt; but these can be overwridden using
      --key=value flags.
      &lt;/p&gt;

==See also ==
* For server reconfiguration see [[Server-setup Command Reference]]
{{Reference/navbox}}
[[Category:Command-line utilities]]</text>
    </revision>
  </page>
  <page>
    <title>CTL API</title>
    <id>987</id>
    <revision>
      <id>10920</id>
      <timestamp>2009-12-13T00:37:23Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">{{stub}}

API docs
* [http://ctl-dispatch.sourceforge.net/docs/reference/1.3/apidocs/index.html 1.3]</text>
    </revision>
  </page>
  <page>
    <title>CTL Center</title>
    <id>1945</id>
    <revision>
      <id>16817</id>
      <timestamp>2012-08-13T18:13:50Z</timestamp>
      <contributor>
        <username>Alexpin</username>
        <id>2172</id>
      </contributor>
      <minor/>
      <comment>added js resource</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Webapps&lt;/categorytree&gt;

'''CTL Center''' (or ctlcenter) is the command console web app for ControlTier 3.6.0.  It replaces the old [[doc34:Jobcenter|Jobcenter]] and [[doc34:Reportcenter|Reportcenter]] apps found in ControlTier 3.4.x. The functionality of CTL Center merges and extends the  Jobcenter and Reportcenter.  

CTL Center is a web application running on the [[ControlTier server]] that provides a graphical interface to schedule and run any command or script via the [[command dispatcher]]. See also: [[Creating jobs]] and [[Running jobs]]

CTL Center provides a single interface to schedule, run and track the execution of commands, scripts and workflows. In addition to being a handy alternative to the CTL command line tools ([[ctl-exec]], [[ctl]]), it is also useful for delegating tasks to non-technical staff.

Besides its integration with the command dispatcher, CTL Center also integrates with  with a database. All job activity is maintained in this database so you have a history of what jobs have run, their status, who ran them, etc. Finally, CTL Center includes a viewer for the [[Node]] resources defined in a [[Project]] resource model. 

See [[RunDeck]] for a related project offering more advanced features.

== Features ==

* Web-based execution of any command (both  [[Running ad hoc commands|ad-hoc]] and [[Running defined commands|defined]])
* Executes actions across machines based on tag names and other filtering criteria
* Web-based creation, scheduling, and execution of jobs
* XML-based job creation and scheduling
* Built-in job scheduler
* Built-in fine-grain access control 
* Enables teams to follow the execution of important jobs
* Safely delegate commands and jobs to lesser skilled staff or other groups
      
== Using the GUI ==

The GUI provides a simple interface for managing Jobs as well as executing them and observing them as they run (see [[Running jobs]]).  

To get started, go to the URL for your ControlTier server.  

You can see the link to CTL Center in the default ControlTier [[server landing page]]:

[[Image:jc-front-page-link.png|border|Link to CTL Center in the front page]]

For example if your server is running on &quot;localhost&quot; on port 8080 the URL for CTL Center is: http://localhost:8080/ctlcenter

You can also get there from Workbench.  Just click the Apps&amp;hellip; link in the header of the page and select CTL Center:

[[Image:jc-apps-menu-link.png|Link to CTL Center in Apps menu]]

===Login===

Log in with your username and password.  (The default installation username/password is: '''default/default''')

[[Image:jc-login.png|border|Login to CTL Center]]
	
===Navigation===

CTL Center's page header contains global navigation control to move between browsing Jobs, Events and Resources. It also has links to logout and view the user's profile. 

[[Image:jc-navigation.png|Navigation]]

===Jobs===
From the Jobs page, one can list, create and run Jobs. A configurable filter allows a user to limit the Job listing to those Jobs matching the filtering criteria. These filter settings can be saved to a Users profile.

[[Image:jc-navigation-jobs.png|Jobs page]]

====Create Jobs====
{{main|Creating jobs}}

Creating a job is easy. The process is really just a matter of choosing a command you want to run.  Start by pressing the &quot;Create a new Job...&quot; button.

You can upload a job definition described in an XML file or you can define one right in the CTL Center UI. To define your job  in CTL Center, choose the command you want to run, configure any options it might use and then decide how and when you want to run it.
Jobs can be run on a scheduled basis. You can save a job so you can run it any time. Finally, you can run it just once.

====Run Jobs====

{{main|Running jobs}}

To run a job, you first go to the CTL Center home page, and choose the job you want to run. Press the  &amp;quot;Run job&amp;quot; button and it will add the job to the execution queue. 

Once the job starts executing, you can monitor its progress. The progress   meter will calculate its completion based on average times it maintains in its metrics database. You can also view the output in real time.

The job output can be followed by pressing the &amp;quot;output&amp;quot;.  This brings you to the job execution page where the last lines of output are displayed in real time.   Once the job has completed you can download all the output as a text file.

===Events===

{{main|View events}}

From the Events page, one can view currently executing commands in the &quot;Now Running&quot; area or browse execution history.
The execution history can be filtered based on user selected parameters. Once the filter has been set, the matching history is displayed. The current filter settings also configure an RSS link, found in the top right of the page.

[[Image:jc-navigation-events.png|Events page]]

===Resources===

{{main|View resources}}

The Resources page displays the [[Node]] resources configured in your [[Project]] resource models. Like the Jobs and Events pages a filter control can be used to limit the listing to just the Node resources matching the criteria.

[[Image:jc-navigation-resources.png|Resources page]]

==Using the CLI==

Several CTL Center functions can be managed using shell utilities:
* [[ctl-jobs]]: Lists, exports and imports Job definitions in [[job.xml]] format.
* [[ctl-run]]: Initiates the start of a saved job
* [[ctl-queue]]: Lists commands running in the execution queue and can kill them.

== Configuration ==

{{main|Ctlcenter config}}

Configuration is done in the file &lt;code&gt;$CTIER_ROOT/ctlcenter/ctlcenter-config.properties&lt;/code&gt;. 

[http://www.premier-wildlife.com]
[http://www.premier-wildlife.com Rodent Control]
{{Installation/navbox}}
{{Guide/navbox|state=uncollapsed}}
{{Manual/navbox}}
{{Reference/navbox}}

[[Category:CTL Center]]

[http://www.jakpoderwacdziewczyne.net/ przeczytaj ten tekst]

[http://poderwackobiete.blog.interia.pl/ jak poderwac kobiete]</text>
    </revision>
  </page>
  <page>
    <title>CTL Command Reference</title>
    <id>280</id>
    <revision>
      <id>16469</id>
      <timestamp>2012-02-22T15:55:30Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Reverted SPAM bot edits</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Command-line utilities&lt;/categorytree&gt;
==Synopsis==
&lt;pre&gt;
ctl [-h] [-v] [-V] [-l level] [-z]
  [-T port [-R inputServerHost] [-N identifier] ]
  [-threadcount&amp;lt;1&amp;gt;] [-K] [-I filter] [-X filter] [--filter-exclude-precedence true/false]
  [-p project] [-t type -r resource | -m module ] -c command
  [-- command-options]
&lt;/pre&gt;

==Overview==

            &lt;p&gt;
                The CTL command is used to invoke [[Running defined commands|defined commands]] in either Module or Object context, which can be
                executed
                locally or dispatched to remote nodes. The set of available Modules, Objects, and Commands will vary
                depending on
                the Modules which are deployed to the target node, and what Commands are defined in the Module.
            &lt;/p&gt;
            &lt;p&gt;
                ctl invocations are composed of five sections:
            &lt;/p&gt;
&lt;pre&gt;ctl [general options] [node dispatch options] &amp;lt;context&amp;gt; &amp;lt;command&amp;gt; [command options]&lt;/pre&gt;

==General Options==

            &lt;table border=&quot;1&quot;&gt;
                &lt;tr&gt;
                    &lt;th&gt;Option&lt;/th&gt;
                    &lt;th&gt;alternate&lt;/th&gt;
                    &lt;th&gt;argument&lt;/th&gt;
                    &lt;th&gt;description&lt;/th&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td&gt;-h&lt;/td&gt;
                    &lt;td&gt;
                    &lt;/td&gt;
                    &lt;td&gt;false&lt;/td&gt;
                    &lt;td&gt;displays the usage information presented above&lt;/td&gt;
                &lt;/tr&gt;

                &lt;tr&gt;
                    &lt;td&gt;-v&lt;/td&gt;
                    &lt;td&gt;&lt;/td&gt;
                    &lt;td&gt;false&lt;/td&gt;
                    &lt;td&gt;run verbose&lt;/td&gt;
                &lt;/tr&gt;

                &lt;tr&gt;
                    &lt;td&gt;-V&lt;/td&gt;
                    &lt;td&gt;&lt;/td&gt;
                    &lt;td&gt;false&lt;/td&gt;
                    &lt;td&gt;run verbose and with loglevel &lt;code&gt;debug&lt;/code&gt;&lt;/td&gt;

                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td&gt;-l&lt;/td&gt;
                    &lt;td&gt;--level&lt;/td&gt;
                    &lt;td&gt;true&lt;/td&gt;
                    &lt;td&gt;log level. Must be one of: &lt;code&gt;debug|verbose|info|warning|error&lt;/code&gt;. [&lt;code&gt;info&lt;/code&gt;]&lt;/td&gt;
                &lt;/tr&gt;

                &lt;tr&gt;
                    &lt;td&gt;-z&lt;/td&gt;
                    &lt;td&gt;--terse&lt;/td&gt;
                    &lt;td&gt;false&lt;/td&gt;
                    &lt;td&gt;leave log messages unadorned.&lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
            &lt;p&gt;
                Specifying &lt;code&gt;-V&lt;/code&gt; is a shortcut for specifying &lt;code&gt;-v -l debug&lt;/code&gt;.
            &lt;/p&gt;

==Node Dispatch Options==
            &lt;table border=&quot;1&quot;&gt;
                &lt;tr&gt;
                    &lt;th&gt;Option&lt;/th&gt;
                    &lt;th&gt;alternate&lt;/th&gt;
                    &lt;th&gt;argument&lt;/th&gt;
                    &lt;th&gt;description&lt;/th&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td&gt;-C&lt;/td&gt;
                    &lt;td&gt;--threadcount&lt;/td&gt;
                    &lt;td&gt;true&lt;/td&gt;
                    &lt;td&gt;number of threads&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td&gt;-K&lt;/td&gt;
                    &lt;td&gt;&lt;/td&gt;
                    &lt;td&gt;false&lt;/td&gt;
                    &lt;td&gt;keep going when an error occurs on multiple dispatch&lt;/td&gt;
                &lt;/tr&gt;

                &lt;tr&gt;
                    &lt;td&gt;-I&lt;/td&gt;
                    &lt;td&gt;--nodes&lt;/td&gt;
                    &lt;td&gt;true&lt;/td&gt;
                    &lt;td&gt;include node parameter list&lt;/td&gt;
                &lt;/tr&gt;


                &lt;tr&gt;
                    &lt;td&gt;-X&lt;/td&gt;
                    &lt;td&gt;--xnodes&lt;/td&gt;
                    &lt;td&gt;true&lt;/td&gt;
                    &lt;td&gt;exclude node parameter list&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td&gt;&lt;/td&gt;
                    &lt;td&gt;--filter-exclude-precedence&lt;/td&gt;
                    &lt;td&gt;true&lt;/td&gt;
                    &lt;td&gt;set the exclusion filter to have precedence or not. (true/false)&lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;

Specifying either or both of &lt;code&gt;-I&lt;/code&gt; and &lt;code&gt;-X&lt;/code&gt; invokes Node Dispatching using filters.

* See the document [[Use node filtering options]] for further discussion of node filtering.

==Context==
            &lt;p&gt;
                All Context options expect an argument, and do not have a long-form alternate.
            &lt;/p&gt;
            &lt;table border=&quot;1&quot;&gt;
                &lt;tr&gt;
                    &lt;th&gt;Option&lt;/th&gt;
                    &lt;th&gt;description&lt;/th&gt;
                    &lt;th&gt;required&lt;/th&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td&gt;-p&lt;/td&gt;
                    &lt;td&gt;project name name&lt;/td&gt;
                    &lt;td&gt;TRUE, if more than one depot exists&lt;/td&gt;
                &lt;/tr&gt;

                &lt;tr&gt;
                    &lt;td&gt;-m&lt;/td&gt;
                    &lt;td&gt;module name. If specified, this puts command execution in a Module context.&lt;/td&gt;
                    &lt;td&gt;FALSE if both -t and -r are specified&lt;/td&gt;
                &lt;/tr&gt;


                &lt;tr&gt;
                    &lt;td&gt;-t&lt;/td&gt;
                    &lt;td&gt;resource type name&lt;/td&gt;
                    &lt;td&gt;FALSE if -m is specified&lt;/td&gt;
                &lt;/tr&gt;

                &lt;tr&gt;
                    &lt;td&gt;-o&lt;/td&gt;
                    &lt;td&gt;resource resource name&lt;/td&gt;
                    &lt;td&gt;FALSE if -m is specified&lt;/td&gt;
                &lt;/tr&gt;

                &lt;tr&gt;
                    &lt;td&gt;-c&lt;/td&gt;
                    &lt;td&gt;command name.&lt;/td&gt;
                    &lt;td&gt;TRUE&lt;/td&gt;
                &lt;/tr&gt;


            &lt;/table&gt;
            &lt;p&gt;
                Command execution occurs in either a Module Context, or an Object Context. When
                &lt;code&gt;-m&lt;/code&gt;
                is specified,
                then it is invoked in Module Context. Otherwise if both
                &lt;code&gt;-t&lt;/code&gt;
                and
                &lt;code&gt;-o&lt;/code&gt;
                are specified,
                then it is invoked in Object Context.
            &lt;/p&gt;
            &lt;p&gt;
                To specify a Valid Context, the arguments must contain
                &lt;code&gt;-m&lt;/code&gt;
                or both
                &lt;code&gt;-t&lt;/code&gt;
                and&lt;code&gt;-o&lt;/code&gt;.
            &lt;/p&gt;
            &lt;p&gt;
                The project name argument
                &lt;code&gt;-p&lt;/code&gt;
                is optional &lt;em&gt;only when there is a single project&lt;/em&gt;. Otherwise it is required.
            &lt;/p&gt;
            &lt;p&gt;
                A Command can only execute with a valid context.
            &lt;/p&gt;

==Execution==

            &lt;p&gt;
                The CTL command executes in two modes, depending on whether required arguments are specified or not:
                Command Mode, and Listing Mode.
            &lt;/p&gt;

===Command Mode===

                &lt;p&gt;
                    Command mode occurs when all of the required Context arguments are specified and a valid Context is
                    specified.  In this mode, the Module specified by either &lt;code&gt;-m&lt;/code&gt; or &lt;code&gt;-t&lt;/code&gt; is used to
                    look up the command named with &lt;code&gt;-c&lt;/code&gt;.  This command is executed with the arguments specified
                    after the &lt;code&gt;--&lt;/code&gt; on the command line.
                &lt;/p&gt;
                &lt;p&gt;Examples:&lt;/p&gt;
                &lt;pre&gt;ctl -p MyProject -m AModule -c someCommand&lt;/pre&gt;
                &lt;p&gt;
                    This executes the command &quot;someCommand&quot; for module &quot;AModule&quot; in the project &quot;MyProject&quot;.
                &lt;/p&gt;
                &lt;pre&gt;ctl -m AModule -c someCommand&lt;/pre&gt;
                &lt;p&gt;
                    If there is only one project, then the &lt;code&gt;-p&lt;/code&gt; option can be left off.
                &lt;/p&gt;
                &lt;pre&gt;ctl -p MyProject -t AppService -r dev1 -c runTest -- -test basic -quiet&lt;/pre&gt;
                &lt;p&gt;
                    This executes the &quot;runTest&quot; command for an object, and specifies a few command options.
                &lt;/p&gt;

==Command Options==

                    &lt;p&gt;
                        Options for the invoked are specified after the &lt;code&gt;--&lt;/code&gt; on the command-line.
                        The names and kinds of options depend on the implementation of the specific defined command
                        that is being invoked, but have certain requirements:
                    &lt;/p&gt;
                    &lt;p&gt;
                        Command Options are specified using the hyphen character (&lt;code&gt;-&lt;/code&gt;) in front of the
                        name of the option.  For those options which accept a string argument, it must follow the
                        option name.
                    &lt;/p&gt;
                    &lt;p&gt;
                        E.g:
                    &lt;/p&gt;
                    &lt;pre&gt;
-- -name MyName
                    &lt;/pre&gt;
                    &lt;p&gt;
                        Boolean options do not need an argument, and their presence on the command line constitutes
                        the value &lt;code&gt;true&lt;/code&gt;, while their absence constitutes &lt;code&gt;false&lt;/code&gt;:
                    &lt;/p&gt;
                    &lt;pre&gt;
-- -aBooleanOption
                    &lt;/pre&gt;
                    &lt;p&gt;
                        String options may have default values, which will be used when the option is not specified.
                    &lt;/p&gt;
                    &lt;p&gt;
                        To specify a string argument that contains the space character &quot; &quot;, the argument must be quoted
                        for your particular shell:
                    &lt;/p&gt;
                    &lt;pre&gt;
-- -option1 &quot;a string&quot;
                    &lt;/pre&gt;
                    &lt;p&gt;
                        In general, executing the command without specifying a required
                        option will cause the command to fail and output a message indicating the set of required
                        options.
                    &lt;/p&gt;

==Command Output==

Note:
                    &lt;p&gt;
                        The output of the command will depend on its purpose and implementation, and will usually have
                        each line prefixed with the Context information. This prefixing can be turned off by invoking
                        the
                        &lt;code&gt;-z/--terse&lt;/code&gt;
                        flag.
                    &lt;/p&gt;

==Listing Mode==

                &lt;p&gt; CTL will enter Listing Mode when the arguments specified on the command line do not constitute a
                    valid Context, including when no options are specified.
                &lt;/p&gt;
                &lt;p&gt;Depending on how many contextual arguments are available, CTL will print out a list of available
                    items for forming a valid Context:
                &lt;/p&gt;

                &lt;table border=&quot;1&quot;&gt;
                    &lt;tr&gt;
                        &lt;th colspan=&quot;2&quot;&gt;Context&lt;/th&gt;
                        &lt;th&gt; Listing Output&lt;/th&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td colspan=&quot;2&quot;&gt; None&lt;/td&gt;
                        &lt;td&gt;Full list of available Projects, with their available Modules, Commands and Objects.&lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;&lt;code&gt;-p&lt;/code&gt;
                        &lt;/td&gt;
                        &lt;td&gt;Project Context&lt;/td&gt;
                        &lt;td&gt;Available Modules, Commands and Objects.
                        &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;&lt;code&gt;[-p] -m&lt;/code&gt;
                        &lt;/td&gt;
                        &lt;td&gt;Module Context&lt;/td&gt;
                        &lt;td&gt;Detailed listing of available Commands for the Module, with descriptions and command-line arguments.
                        &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;&lt;code&gt;[-p] -t&lt;/code&gt;
                        &lt;/td&gt;
                        &lt;td&gt;Type Context&lt;/td&gt;
                        &lt;td&gt;List of Objects available for the Type.
                        &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;&lt;code&gt;[-p] -t -o&lt;/code&gt;
                        &lt;/td&gt;
                        &lt;td&gt;Object Context&lt;/td&gt;
                        &lt;td&gt;Detailed listing of available Commands for the Object, with descriptions and  command-line arguments.
                        &lt;/td&gt;
                    &lt;/tr&gt;
                &lt;/table&gt;
                &lt;p&gt;
                    Thus you can easily see what context components you can use by repeatedly executing &lt;code&gt;ctl&lt;/code&gt;
                    and adding new context arguments each time.
                &lt;/p&gt;
                &lt;p&gt;
                    Running &lt;code&gt;ctl&lt;/code&gt; with no options specified will give you the broadest overview of
                    the available contexts and commands that can be run.
                &lt;/p&gt;

==Other Options==
            &lt;table border=&quot;1&quot;&gt;
                &lt;tr&gt;
                    &lt;th&gt;Option&lt;/th&gt;
                    &lt;th&gt;alternate&lt;/th&gt;
                    &lt;th&gt;argument&lt;/th&gt;
                    &lt;th&gt;description&lt;/th&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td&gt;-T&lt;/td&gt;
                    &lt;td&gt;--port&lt;/td&gt;
                    &lt;td&gt;true&lt;/td&gt;
                    &lt;td&gt;input server port&lt;/td&gt;
                &lt;/tr&gt;

                &lt;tr&gt;
                    &lt;td&gt;-R&lt;/td&gt;
                    &lt;td&gt;--host&lt;/td&gt;
                    &lt;td&gt;true&lt;/td&gt;
                    &lt;td&gt;input server remote hostname&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td&gt;-N&lt;/td&gt;
                    &lt;td&gt;--name&lt;/td&gt;
                    &lt;td&gt;true&lt;/td&gt;
                    &lt;td&gt;identifier for remote input server&lt;/td&gt;
                &lt;/tr&gt;

            &lt;/table&gt;

Note:
&lt;p&gt;The arguments for the input server (&lt;code&gt;-T/--port&lt;/code&gt;,&lt;code&gt;-R/--host&lt;/code&gt;, and&lt;code&gt;
                -N/--name&lt;/code&gt;) are unneeded by
                end-users. They are used by CTL when remotely executing commands.&lt;/p&gt;

==Environment==

CTL_CLI_TERSE - set the output of the command to be verbose or terse.  Acceptable values, true or false.

=See also=
* [[Running defined commands]]

{{Reference/navbox}}

[[Category:Command-line utilities]]</text>
    </revision>
  </page>
  <page>
    <title>CTL Objects</title>
    <id>203</id>
    <revision>
      <id>1053</id>
      <timestamp>2008-12-30T17:48:14Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>New page: A CTL &quot;object&quot; is an instance of a CTL type. Types and objects are typically defined either via XML and loaded to the repository via [[ProjectBuilder]] or created entirely through [[Workbe...</comment>
      <text xml:space="preserve">A CTL &quot;object&quot; is an instance of a CTL type. Types and objects are typically defined either via XML and loaded to the repository via [[ProjectBuilder]] or created entirely through [[Workbench]]'s graphical interface.

'''See also'''

----
* [[ProjectBuilder]]
* [[Workbench]]
* [[Understand_CTL_OO_terminology]]</text>
    </revision>
  </page>
  <page>
    <title>CTL architecture</title>
    <id>194</id>
    <revision>
      <id>15609</id>
      <timestamp>2011-10-21T10:29:15Z</timestamp>
      <contributor>
        <username>Xandersears</username>
        <id>332</id>
      </contributor>
      <comment>Deleted spam link(s)</comment>
      <text xml:space="preserve">    &lt;p&gt;
	This section describes core concepts that underly the
	CTL software and its use.
      &lt;/p&gt;

==Framework==
      &lt;p&gt;
        Framework
	built using the CTL [[APIs]], to execute specified actions.
	The dispatching framework also provides
	 projects for managing [[project]] configuration files,
	[[modules]],
	resources and their instance data.
	Several utilities are included to execute
	commands and administer the framework.
      &lt;/p&gt;

      &lt;p&gt;Figure 1: CTL Software &lt;/p&gt;

The following diagram describes the components comprising the CTL framework.

[[Image:framework.png]]

==Command dispatcher==

{{:Local dispatch mechanism}}

==Projects==

     &lt;p&gt;
       The framework repository is organized into projects.
       For each project name, the framework provides a file structure. 
       Within each project, there is a space for configuration, a module library,
       and an resource model store. 
     &lt;/p&gt;

==Nodes==

	&lt;p&gt;A machine hosting a CTL software instance is called a node. 
	By convention a node can take on one
	  of two roles, target node or admin node. A target node is 
	  one that receives commands from an admin and executes them.
	  An admin node is a central server from which remote management
	  of target nodes will be performed. Typically, the admin node
	  hosts a [[#Repository]].
	&lt;/p&gt;

[[Image:node-command-concept.png]]

      &lt;p&gt;Nodes are described with metadata in the 
      [[nodes.properties]]
      configuration file. This metadata is used by the node dispatching
      mechanism, and facilitates keyword based filtering.
      &lt;/p&gt;

==Command Dispatching==
{{main|Command execution}}
	&lt;p&gt;
	  The internal dispatch mechanism supports an execution
	  strategy referred to as &lt;code&gt;nodedispatch&lt;/code&gt;.
	  The dispatcher is able to lookup the node of the target,
	  dispatching the command remotely or locally as appropriate.
	  This feature provides network abstraction to distributed command execution
	  and makes management of server pools and clusters more convenient.
	&lt;/p&gt;

[[Image:nodedispatching.png]]

    &lt;p&gt;The command dispatcher supports two styles of dispatching:
      &lt;/p&gt;
      &lt;ul&gt;
      &lt;li&gt;[[Running ad hoc commands]]: Dispatch any command you would normally
      type at the shell to the nodes that match the filtering criteria.
      &lt;/li&gt;
      &lt;li&gt;[[Running defined commands]]: Dispatch  commands defined in a module to
      to the locations
      that match the filtering criteria. 

      &lt;/li&gt;
      &lt;/ul&gt;
	&lt;p&gt;The nodedispatch strategy uses SSH to invoke CTL actions
	on remote hosts.
	&lt;/p&gt;

==Modules==
{{main|Modules}}
      &lt;p&gt;
	A module is a packaged set of defined commands created to
	execute some set of procedures. Modules can be likened to a
	plugin to the framework. Once a module has been installed
	the framework's command dispatcher provides access to execute its commands.
      &lt;/p&gt;
     &lt;p&gt;New modules are developed with [[ProjectBuilder]] or generated by [[Graphical type editor]].&lt;/p&gt;
      &lt;p&gt;
	Modules are organized into an inheritance hierarcy of super- and sub-types to
	support generic/specific behavior and provide a means for reuse.
      &lt;/p&gt;
      &lt;p&gt;The figure below shows how a user executes a command via CTL.
       The dispatcher receives the request to run a command,
	looks up the command's handler, and then, provides as input, a
	data context that can be managed within the framework.
      &lt;/p&gt;

      &lt;p&gt;Figure 2: CTL Dispatching&lt;/p&gt;

[[Image:fwk-graph.png]]

      &lt;p&gt;&lt;strong&gt;Module Structure&lt;/strong&gt;&lt;/p&gt;
 
      &lt;p&gt;At a file level, a module has a directory stucture that organizes
      files into several locations. Modules are defined in an XML file called
      [[type.xml]]. The [[ProjectBuilder]]
      &lt;code&gt;build-type&lt;/code&gt; command
      reads the type.xml file and generates an executable set of commands.
      Alternatively, Workbench can be used to develop any aspect of a type
     and then be generated into a CTL module.
      &lt;/p&gt;
      &lt;p&gt;Figure 3: Module structure&lt;/p&gt;

[[Image:cmdmod.png]]

     &lt;p&gt;
	Inside the type.xml file, you define one or more commands.
	Commands can be used to control 
	life cycle actions but can also be used to
	control processes and interface with other tools. 
	The implementation of a command is called its &lt;em&gt;handler&lt;/em&gt;.
	Command handlers are XML files that read property files to establish
	a data context and execute the defined action.
      &lt;/p&gt;

	&lt;p&gt;
	Given the supplied parameters, the dispatcher knows how to lookup command
	handlers in the module library, generate a data context, and execute them.
      &lt;/p&gt;
      &lt;p&gt;Figure 4: Command dispatcher mechanism &lt;/p&gt;

[[Image:command-dispatcher.png]]
  
      &lt;p&gt;
	A fundamental tenet in CTL is to &amp;quot;soft code&amp;quot; commands
	by stating important detail in data files in order
	to separate the procedural logic from environment detail. This leads
	to commands that are more flexible and reusable in different environments.
      &lt;/p&gt;

==Data Context==

      &lt;p&gt;As mentioned earlier, commands in CTL are driven by 
	a data context. The CTL
	framework assumes standard data files generated from the
	type.xml file but you are free to create and use
	data from any source for your commands.
      &lt;/p&gt;

      &lt;p&gt;Data you might store in the property files include:
      &lt;/p&gt;
      &lt;ul&gt;
	&lt;li&gt;configuration data: app and environment settings&lt;/li&gt;
	&lt;li&gt;dependency data: bindings to other objects&lt;/li&gt;
	&lt;li&gt;any thing else your procedures need&lt;/li&gt;
      &lt;/ul&gt;
      &lt;p&gt;
	The framework uses several configuration files
	where global configuration data is stored. Every command handler can access
	this global data as it is loaded by the dispatcher when the
	handler is loaded. 
      &lt;/p&gt;
      &lt;p&gt;CTL uses Java property file format, key-value pairs, as its native
      format. Global configuration is stored in the 
      [[framework.properties]] file.
      &lt;/p&gt;
 
      &lt;p&gt;&lt;strong&gt;Module Context&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
		
	The module defines several standard property files:
      &lt;/p&gt;
      &lt;ol&gt;
	&lt;li&gt;[[module.properties]]: 
	This contains metadata about the module. &lt;/li&gt;
	&lt;li&gt;[[type.properties]]: 
	This contains attribute data&lt;/li&gt;
	&lt;li&gt;[[commands.properties]]: 
	This contains metadata about each command such as command parameters.&lt;/li&gt;
      &lt;/ol&gt;
      &lt;p&gt;
	Modules load this property data when executed.
	Other data can be stored in other files and read in by the command handler.
      &lt;/p&gt;

      &lt;p&gt;&lt;strong&gt;Resource Context&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
	When there is a lot of data, or when your commands need to
	use different sets of data depending on environment or location,
	the CTL framework provides the capability of defining resources
	to organize and discretely maintain the data.
	See the [[:Category:Resource model]] page
	for more information about defining and using resources.
      &lt;/p&gt;
      &lt;p&gt;The standard file for storing resource specific data is called
      the [[resource.properties]] file. This file can contain
      anything you wish and it is obtained and updated via the
      [[Managed-Entity]] Get-Properties command.
      &lt;/p&gt;

==File share==
	&lt;p&gt;
	  An important facility for managing a network of CTL 
	  nodes is a central file share. The file share is used as a common repository for various artifacts.
	  Once command modules have been developed they can be stored in 
	  the file share so that they can be distributed to nodes that require them.
	  The file share can be a simple web server or if
	  one wishes to publish files via &lt;code&gt;PUT&lt;/code&gt;, a server based on [[WebDAV]]. 
	&lt;/p&gt;
	&lt;p&gt;
	  The file share organizes content into the
	  following categories:
	&lt;/p&gt;
	&lt;ul&gt;
	&lt;li&gt;&lt;strong&gt;Configuration:&lt;/strong&gt; A set of configuration files
	  that include information about nodes and their deployments.
	  One such file, &lt;code&gt;nodes.properties&lt;/code&gt;,
	  describes the nodes in the environment to which you want to
	  dispatch actions. 
	&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;Modules:&lt;/strong&gt; A collection of packaged CTL 
	  control modules that can be deployed to CTL nodes.
	&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;Packages:&lt;/strong&gt; If you use CTL to manage deployment
	you can include a collection of software packages. These packages may
	be of various file types such as zip, tgz, rpm, war, jar, ear, etc.
	&lt;/li&gt;
	&lt;/ul&gt;

      &lt;p&gt;
	Each project name on the file share has a directory for each of these
	content categories:
      &lt;/p&gt;
      &lt;table&gt;
	&lt;tr&gt;
	  &lt;td&gt;
	    [[Image:repo-structure.png]]
	  &lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;

==Glossary==
      &lt;ul&gt;

	&lt;li&gt;Command - Defined procedure that can be executed via CTL &lt;/li&gt;
	&lt;li&gt;Command handler - An implementation of a Command&lt;/li&gt;
	&lt;li&gt;Context - Data context made available during the execution of a handler&lt;/li&gt;
	&lt;li&gt;Deployment - A registered deployment of a module or resource&lt;/li&gt;
	&lt;li&gt;Framework - An instance of the CTL command dispatching mechanism and repository of command
	modules and management data.&lt;/li&gt;
	&lt;li&gt;Module - A packaged set of Commands.&lt;/li&gt;
	&lt;li&gt;Node - A registered host to which commands can be dispatched&lt;/li&gt;
	&lt;li&gt;Project - A repository of modules and resources. &lt;/li&gt;
	&lt;li&gt;Resource - A resource that has its own workspace and an associated module.&lt;/li&gt;
         &lt;li&gt;Type - A resource type. If a subtype of Managed-Entity it may have a corresponding module.
      &lt;/ul&gt;

{{Manual/navbox}}</text>
    </revision>
  </page>
  <page>
    <title>CTL concepts</title>
    <id>1599</id>
    <redirect />
    <revision>
      <id>10492</id>
      <timestamp>2009-12-12T00:44:09Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>moved [[CTL concepts]] to [[CTL architecture]]</comment>
      <text xml:space="preserve">#REDIRECT [[CTL architecture]]</text>
    </revision>
  </page>
  <page>
    <title>CTL dispatching mechanism</title>
    <id>1605</id>
    <redirect />
    <revision>
      <id>12087</id>
      <timestamp>2009-12-20T17:15:34Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[Command dispatcher]]</comment>
      <text xml:space="preserve">#REDIRECT [[Command dispatcher]]</text>
    </revision>
  </page>
  <page>
    <title>CTL for Ant</title>
    <id>989</id>
    <redirect />
    <revision>
      <id>5577</id>
      <timestamp>2009-06-13T18:13:44Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>[[CTL for Ant]] moved to [[Ant support]]</comment>
      <text xml:space="preserve">#REDIRECT [[Ant support]]</text>
    </revision>
  </page>
  <page>
    <title>CTL for Maven</title>
    <id>217</id>
    <revision>
      <id>1101</id>
      <timestamp>2008-12-30T19:01:42Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <text xml:space="preserve">This section describes how to use the maven-ctl-plugin to invoke CTL commands from a Maven 2.0.x pom.


* [[Maven Plugin]]
* [[Maven build-library]]</text>
    </revision>
  </page>
  <page>
    <title>CTL scripting</title>
    <id>1028</id>
    <redirect />
    <revision>
      <id>6828</id>
      <timestamp>2009-07-10T14:01:54Z</timestamp>
      <contributor>
        <username>Redirect fixer</username>
        <id>9</id>
      </contributor>
      <comment>[[Script-driven Use Guide]] has been moved, it is now a redirect to [[Script-driven approach]]</comment>
      <text xml:space="preserve">#REDIRECT [[Script-driven approach]]</text>
    </revision>
  </page>
  <page>
    <title>CTRedudancy</title>
    <id>2084</id>
    <revision>
      <id>14987</id>
      <timestamp>2010-12-01T01:00:23Z</timestamp>
      <contributor>
        <username>Chuck</username>
        <id>13</id>
      </contributor>
      <comment>jobxml</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Redundancy&lt;/categorytree&gt;

= Summary =

This page describes how to configure a primary/secondary ControlTier  setup.  This configuration is meant to make a ControlTier recovery quick and easy should the primary machine go down for an unacceptable amount of time.  This setup requires some Linux System Administration skills with respect to configuring a virtual interface (an additional IP address that can be migrated from one server to another quickly to minimize impact to ControlCenter users).   Not discussed (yet) in this document is the use of an appliance such as BigIP to minimize any system configuration such as a virtual interface.  This will likely be addressed as this would minimize any privileged access to the servers.

The assumption is that there are two controltier servers where one will replicate itself to the other, and assuming a failure of the primary, a procedure to quickly bring up the secondary as the active server will be shown.

=Definition of terms=

== Active Server ==

The server that is currently in operation

== Standby Server ==

The server that is currently being replicated to

== Primary Server ==

The default designated Active Server

== Secondary Server ==

The default designated Standby Server

==Active/Standby Replication==

Two separate ControlTier servers, one currently in Active operation, the other in Standby mode where the active server replicates to the standby server.   In addition to replication, optional configuration describing a migratable and  virtual IP Address is described.  NOTE:  because a migratable IP Address is described, discussion of a load balancer such as ___ is discussed but not in detail since this will be out of scope of the ControlTier configuration.

== Migratable IP Address ==

In order to minimize end user down time, migratable IP address configuration is recommended.  This is a &quot;floating&quot; IP address and specifically accomplished via [http://www.xenocafe.com/tutorials/linux/redhat/bind_multiple_ip_addresses_to_single_nic/index.php | IPAliasing] on the currently Active server.   A privileged administrative user will be able to quickly migrate this configuration to the secondary server and back to primary with this configuration in place and therefore minimize perceivable downtime.

=Assumptions=

* Familiarity with the ControlTier Server [[Installation#Running_the_installer | installation]], preferably the [[RPM_installer | rpm server installer]].
* Two ControlTier server installations, same version (3.6 and above)
* Both servers are accessible to each other over ssh
* Servers are both installed into /opt/ctier (same as the rpm installation)
* Primary Server:  ctier-primary.acme.com (1.2.3.10)
* Secondary Server:  ctier-secondary.acme.com (1.2.3.20)
* Acme project exists on both servers
* Official Domain name of the currently active server:  ctier.acme.com (1.2.3.100)
** '''NOTE''': This is the virtual name which will become a migratable IP address
* Familiarity with linux [http://www.xenocafe.com/tutorials/linux/redhat/bind_multiple_ip_addresses_to_single_nic/index.php virtual IP address configuration] (also known as an IP alias)
* Network Card Interface:  eth0
* Netmask:  255.255.255.0
* ControlTier server installed as common &quot;ctier&quot; user on both primary/secondary servers. 
* ctier accounts are ssh equivalenced with no password:
** ctier@ct-primary.acme.com can ssh to ctier@ctier-secondary.acme.com
** ctier@ct-secondary.acme.com can ssh to ctier@ctier-primary.acme.com
* Redhat Linux ( *nix based primary and secondary servers would be very similar, windows is possible, out of scope since unix like utilities are used as the working example)
* Root (or sudo) privileges on both primary and secondary servers

=System Configuration=

== Primary System Configuration==

'''NOTE''':  the important configuration in the following /etc/hosts file is the '''ctier.acme.com''' example entry.  In this example,
the ctier.acme.com is aliased to the local server in the /etc/hosts file to satisfy internal ControlTier webapp connectivity requests and is uncommented to reflect the assumed ACTIVE state.

&lt;ol&gt;
&lt;li&gt;Configure /etc/hosts with the ctier alias:&lt;pre&gt;
[ctier@ctier-primary.acme.com ~]$ sudo cat /etc/hosts
# Do not remove the following line, or various programs
# that require network functionality will fail.
::1     localhost.localdomain   localhost

127.0.0.1       localhost.localdomain localhost

#
#
# The following line is to be  uncommented when this server is the ACTIVE server, otherwise commented
1.2.3.10    ctier-primary.acme.com ctier-primary ctier.acme.com
# The following line is to be commented when this server is the INACTIVE server, otherwise uncommented
#1.2.3.10    ctier-primary.acme.com ctier-primary&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;Configure /etc/network-scripts/ifcfg-eth0:0 with Migratable IP Alias Address:&lt;pre&gt;
[ctier@ctier-primary.acme.com ~]$ sudo cat /etc/network-scripts/ifcfg-eth0:0
DEVICE=eth0:0
IPADDR=1.2.3.100
NETMASK=255.255.255.0
BOOTPROTO=static
# ONBOOT is set to &quot;yes&quot; when this server is the ACTIVE server, otherwise should be set to &quot;no&quot;
ONBOOT=yes
#ONBOOT=no&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;Bring up the eth0:0 interface&lt;pre&gt;
[ctier@ctier-primary.acme.com ~]$ sudo /sbin/ifup eth0:0
[ctier@ctier-primary.acme.com ~]$ /sbin/ifconfig eth0:0
eth0:0    Link encap:Ethernet  HWaddr 00:50:56:37:D4:53  
          inet addr:1.2.3.100  Bcast:1.2.3.255  Mask:255.255.255.0
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          Base address:0x2000 Memory:d8920000-d8940000&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
== Secondary System Configuration==


'''NOTE''':  the important configuration in the following /etc/hosts file is the '''ctier.acme.com''' example commented entry.  In this example,
the commented ctier.acme.com is aliased to the local server in the /etc/hosts file to satisfy internal ControlTier webapp connectivity requests and is commented to reflect the assumed INACTIVE state.

&lt;ol&gt;
&lt;li&gt;Configure /etc/hosts with the commented ctier alias:&lt;pre&gt;
[ctier@ctier-primary.acme.com ~]$ cat /etc/hosts
# Do not remove the following line, or various programs
# that require network functionality will fail.
::1     localhost.localdomain   localhost

127.0.0.1       localhost.localdomain localhost

#
#
# The following line is to be  commented when this server is the ACTIVE server, otherwise uncommented
#1.2.3.20    ctier-secondary.acme.com ctier-secondary ctier.acme.com
# The following line is to be uncommented when this server is the INACTIVE server, otherwise commented
1.2.3.20    ctier-secondary.acme.com ctier-secondary&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;Configure /etc/network-scripts/ifcfg-eth0:0 with Migratable IP Alias Address:&lt;pre&gt;
[ctier@ctier-primary.acme.com ~]$ sudo cat /etc/network-scripts/ifcfg-eth0:0
DEVICE=eth0:0
IPADDR=1.2.3.100
NETMASK=255.255.255.0
BOOTPROTO=static
# ONBOOT is set to &quot;yes&quot; when this server is the ACTIVE server, otherwise should be set to &quot;no&quot;
#ONBOOT=yes
ONBOOT=no&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

= ControlTier Primary/Secondary Server Configuration =

After the ControlTier server has been installed on each server, a few adjustments should be made to ensure external references to the application refer to the common name rather than the interface that the server is currently bound to.  The following example is for the primary server, apply similar configuration for the secondary as well:

&lt;ol&gt;
&lt;li&gt;Adjust ControlCenter ctlcenter-config.properties&lt;pre&gt;
[ctier@ctier-primary.acme.com ~]$ cp /opt/ctier/ctlcenter/ctlcenter-config.properties /opt/ctier/ctlcenter/ctlcenter-config.properties.orig
[ctier@ctier-primary.acme.com ~]$ vi /opt/ctier/ctlcenter/ctlcenter-config.properties 
[ctier@ctier-primary.acme.com ~]$ diff /opt/ctier/ctlcenter/ctlcenter-config.properties /opt/ctier/ctlcenter/ctlcenter-config.properties.orig
7c7
&lt; grails.serverURL=http://ctier.acme.com:8080/ctlcenter
---
&gt; grails.serverURL=http://ctier-primary.acme.com:8080/ctlcenter&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;Adjust Workbench runtime.properties&lt;pre&gt;
[ctier@ctier-primary.acme.com ~]$ cp /opt/ctier/pkgs/jetty-6.1.21/webapps/itnav/WEB-INF/classes/runtime.properties /opt/ctier/pkgs/jetty-6.1.21/webapps/itnav/WEB-INF/classes/runtime.properties.orig
[ctier@ctier-primary.acme.com ~]$ vi /opt/ctier/pkgs/jetty-6.1.21/webapps/itnav/WEB-INF/classes/runtime.properties 
[ctier@ctier-primary.acme.com ~]$ diff /opt/ctier/pkgs/jetty-6.1.21/webapps/itnav/WEB-INF/classes/runtime.properties /opt/ctier/pkgs/jetty-6.1.21/webapps/itnav/WEB-INF/classes/runtime.properties.orig
23c23
&lt; app.external.uri = http://ctier.acme.com:8080
 ---
 &gt; app.external.uri = http://ctier-primary.acme.com:8080&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;Test both servers to ensure basic operation&lt;/li&gt;
&lt;li&gt;Stop the secondary server&lt;pre&gt;
[ctier@ctier-secondary.acme.com ~]$jetty.sh stop&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;Restart the primary server&lt;pre&gt;
[ctier@ctier-primary.acme.com ~]$jetty.sh stop
[ctier@ctier-primary.acme.com ~]$jetty.sh start&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

* '''NOTE''':  The secondary server must not be running while the primary is replicating to the secondary!

= Configuring ControlServer Server Replication Job =

A jobxml file will be configured into an existing project which will do the following:

* Verifies that the job is running on the right machine (based on hostname of primary server)
* Verifies that it can ssh to the secondary server
* Verifies that jetty is NOT running on the secondary server
* Syncs configuration and data to a local temporary directory
* Modifies the files prior to sync to ensure primary hostname is replaced by secondary hostname 
* Syncs data and configuration files to the secondary server

Copy the following sample jobxml and paste it into a file called ctier-server-sync.xml  in preparation to upload to an existing project:

&lt;pre&gt;
&lt;joblist&gt;
  &lt;job&gt;
    &lt;name&gt;ctier-server-sync&lt;/name&gt;
    &lt;description&gt;Syncs all job and project state to the secondary controltier server&lt;/description&gt;
    &lt;additional&gt;This job is a 1-way sync, which will need to be reconfigured to point to the former primary server (new secondary server) if a new primary server has been designated.&lt;/additional&gt;
    &lt;loglevel&gt;INFO&lt;/loglevel&gt;
    &lt;group&gt;acme/bootstrap&lt;/group&gt;
    &lt;context&gt;
      &lt;project&gt;acme&lt;/project&gt;
    &lt;/context&gt;

    &lt;sequence threadcount='1' keepgoing='false' strategy='node-first'&gt;
      &lt;command&gt;
        &lt;exec&gt;{ [[ $HOSTNAME != ctier-primary.acme.com ]] ; } &amp;amp;&amp;amp; { echo will not run this job on this server; exit 1; } || /bin/true&lt;/exec&gt;
      &lt;/command&gt;
      &lt;command&gt;
        &lt;exec&gt;if ! ssh ctier-secondary.acme.com  uname -a; then echo &quot;cannot connect to the standby server, ctier-secondary.acme.com, will not sync&quot;; exit 1; fi&lt;/exec&gt;
      &lt;/command&gt;
      &lt;command&gt;
        &lt;exec&gt;if ssh ctier-secondary.acme.com jetty.sh check; then echo &quot;standby controltier server is running, will not sync&quot;; exit 1; fi&lt;/exec&gt;
      &lt;/command&gt;
      &lt;command&gt;
         &lt;exec&gt;rm -rf /tmp/rsyncStandby.tmpDir&lt;/exec&gt;
      &lt;/command&gt;
      &lt;command&gt;
         &lt;exec&gt;mkdir -p /tmp/rsyncStandby.tmpDir/ctlcenter /tmp/rsyncStandby.tmpDir/ctl/projects /tmp/rsyncStandby.tmpDir/ctl/var/logs/ctlcenter&lt;/exec&gt;
      &lt;/command&gt;
      &lt;command&gt;
         &lt;exec&gt;rsync  -acz   /opt/ctier/ctlcenter/   /tmp/rsyncStandby.tmpDir/ctlcenter&lt;/exec&gt;
      &lt;/command&gt;
      &lt;command&gt;
         &lt;exec&gt;rsync  -acz   /opt/ctier/ctl/projects/   /tmp/rsyncStandby.tmpDir/ctl/projects&lt;/exec&gt;
      &lt;/command&gt;
      &lt;command&gt;
         &lt;exec&gt;rsync  -acz   /opt/ctier/ctl/var/logs/ctlcenter/  /tmp/rsyncStandby.tmpDir/ctl/var/logs/ctlcenter&lt;/exec&gt;
      &lt;/command&gt;
      &lt;command&gt;
         &lt;exec&gt;for r in /tmp/rsyncStandby.tmpDir/ctl/projects/*/etc/resources.xml; do sed -i -e &quot;s/ctier-primary/ctier-secondary/g&quot; $r ;  done&lt;/exec&gt;
      &lt;/command&gt;
      &lt;command&gt;
         &lt;exec&gt;sed -i &quot;s/ctier-primary.acme.com/ctier-secondary.acme.com/g&quot; /tmp/rsyncStandby.tmpDir/ctlcenter/ctlcenter-config.properties &lt;/exec&gt;
      &lt;/command&gt;
      &lt;command&gt;
         &lt;exec&gt;pushd  /tmp/rsyncStandby.tmpDir/; tar zcf /tmp/ctlcenter.tgz .; mv /tmp/ctlcenter.tgz .; popd&lt;/exec&gt;
      &lt;/command&gt;
      &lt;command&gt;
        &lt;exec&gt; rsync  -vacz   /tmp/rsyncStandby.tmpDir/ctlcenter.tgz  ctier-secondary.acme.com:/opt/ctier &lt;/exec&gt;
      &lt;/command&gt;
      &lt;command&gt;
        &lt;exec&gt; rsync  -vacz   /tmp/rsyncStandby.tmpDir/ctlcenter/  ctier-secondary.acme.com:/opt/ctier/ctlcenter &lt;/exec&gt;
      &lt;/command&gt;
      &lt;command&gt;
        &lt;exec&gt;rsync   -vacz   /tmp/rsyncStandby.tmpDir/ctl/projects/  ctier-secondary.acme.com:/opt/ctier/ctl/projects&lt;/exec&gt;
      &lt;/command&gt;
      &lt;command&gt;
        &lt;exec&gt;rsync   -vacz   /tmp/rsyncStandby.tmpDir/ctl/var/logs/ctlcenter/  ctier-secondary.acme.com:/opt/ctier/ctl/var/logs/ctlcenter&lt;/exec&gt;
      &lt;/command&gt;
    &lt;/sequence&gt;
    &lt;nodefilters excludeprecedence='true'&gt;
      &lt;include&gt;
        &lt;tags&gt;control&lt;/tags&gt;
      &lt;/include&gt;
    &lt;/nodefilters&gt;
    &lt;dispatch&gt;
      &lt;threadcount&gt;1&lt;/threadcount&gt;
      &lt;keepgoing&gt;false&lt;/keepgoing&gt;
    &lt;/dispatch&gt;
    &lt;schedule&gt;
      &lt;time hour='*' minute='0,15,30,45' /&gt;
      &lt;weekday day='*' /&gt;
      &lt;month month='*' /&gt;
    &lt;/schedule&gt;
&lt;!--
    &lt;notification&gt;
      &lt;onfailure&gt;
        &lt;email recipients='ReleaseEngineering@acme.com' /&gt;
      &lt;/onfailure&gt;
    &lt;/notification&gt;
--&gt;
  &lt;/job&gt;
&lt;/joblist&gt;

&lt;/pre&gt;

Load the job into the acme project
&lt;pre&gt;
[ctier@ctier-primary.acme.com ~]$ ctl-jobs load -f ctier-server-sync.xml
&lt;/pre&gt;</text>
    </revision>
  </page>
  <page>
    <title>Calling a supertype command</title>
    <id>80</id>
    <revision>
      <id>13459</id>
      <timestamp>2010-11-10T01:40:15Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;entity.&quot; to &quot;resource.&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Object-orientation&lt;/categorytree&gt;

Sometimes you want to add some additional steps to a command defined in a supertype. The name of your type's supertype is accessible via the property: ${type.supertype}. That property (among others) is automatically generated when the module is built and is stored in the module's  [[type.properties]] file.

==Create or choose type==

You can add commands to an existing type definition or you can create a new type. To create a new type run the [[ProjectBuilder]] &lt;code&gt;create-type&lt;/code&gt; and follow the prompts:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
 $ ctl -m ProjectBuilder -c create-type 
&lt;/syntaxhighlight&gt;

The create-type command will generate a type.xml file where you can define your command.

Alternatively, you can use the [[Graphical type editor]] to create a new type graphically.

==Edit type.xml==
If you are using ProjectBuilder commands to define the type, it will have generated a [[type.xml]] file inside the module's source directory. 
In the example that follows you will see the &quot;greeter&quot; type is defined to override &quot;poly&quot; type, calling its &quot;greet&quot; command and then continuing with some of its own actions.
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;type name=&quot;greeter&quot;&gt;

 &lt;description&gt;
   Overrides the supertype's &quot;greet&quot; command to add logging.
 &lt;/description&gt;

 &lt;supertype&gt;
      &lt;typereference name=&quot;poly&quot;/&gt;
 &lt;/supertype&gt;
 &lt;commands&gt;
  &lt;command name=&quot;greet&quot; description=&quot;offers a salutation&quot;
           command-type=&quot;AntCommand&quot;&gt;
   &lt;implementation&gt;
    &lt;controller&gt;
     &lt;execute&gt;
       &lt;context depot=&quot;${context.depot}&quot;
                resourceType=&quot;${context.type}&quot;
                resourceName=&quot;${context.name}&quot;/&gt;
       &lt;command name=&quot;${command.name}&quot; module=&quot;${type.supertype}&quot;/&gt;
     &lt;/execute&gt;
    &lt;/controller&gt;
    &lt;!--
     ** greeters specific implementation
    --&gt;
    &lt;tstamp/&gt; &lt;!-- generates a timestamp, TSTAMP --&gt;
    &lt;!-- log the greeting to a file --&gt;
    &lt;echo message=&quot;said hello: ${TSTAMP}&quot; 
          file=&quot;${resource.instance.dir}/var/greet.log&quot; append=&quot;true&quot;/&gt;
   &lt;/implementation&gt;
  &lt;/command&gt;

 &lt;/commands&gt;
&lt;/type&gt;
&lt;/syntaxhighlight&gt;

Note:
* Some consider calling super an anti-pattern (see [Fowler]) recommending instead the use of a template method.

==Build the type==

Use the &quot;build-type&quot; command to generate the command files.
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ ctl -m ProjectBuilder -c build-type -- -type greeter -upload -deploy
&lt;/syntaxhighlight&gt;

The -upload and -deploy flag cause the generated type to be uploaded to Workbench and then deployed to the local client.

if you are using the [[Graphical type editor]] this step is done by pressing the &quot;Package Commands&quot; button.

==Run the command==

The barker module is now deployed and the new command run:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ ctl -m greeter -c greet
Greetings!
&lt;/syntaxhighlight&gt;
&lt;noinclude&gt;{{Manual/navbox}}&lt;/noinclude&gt;

[[Category:Object-orientation]]</text>
    </revision>
  </page>
  <page>
    <title>CapitalizeMapper Type Reference</title>
    <id>1296</id>
    <revision>
      <id>11348</id>
      <timestamp>2009-12-14T22:55:37Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Types&lt;/categorytree&gt;
=Description=

      &lt;p&gt;
	The CapitilizeMapper data type is a [http://ant.apache.org/manual/CoreTypes/mapper.html mapper] that takes the input string and capitalizes it to upper case characters. 
      &lt;/p&gt;


=Examples=

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;mapper classname=&quot;com.controltier.ctl.types.CapitalizeMapper&quot; /&gt;
&lt;/syntaxhighlight&gt;

&lt;table border=&quot;1&quot;&gt;
&lt;tr&gt;&lt;th&gt;from&lt;/th&gt;&lt;th&gt;to&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;abc&lt;/td&gt;&lt;td&gt;ABC&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;aBc&lt;/td&gt;&lt;td&gt;ABC&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;a.b&lt;/td&gt;&lt;td&gt;A.B&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;
&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Ant Types]]</text>
    </revision>
  </page>
  <page>
    <title>Change-Dependencies</title>
    <id>1277</id>
    <revision>
      <id>10260</id>
      <timestamp>2009-12-11T18:53:09Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;noinclude&gt;&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Deployment&lt;/categorytree&gt;&lt;/noinclude&gt;

==Understanding Change-Dependencies==

{{Change-Dependencies/understanding}}

==Using Change-Dependencies==

{{Change-Dependencies/using}}

[[Category:Updater]]
[[Category:Deployment]]</text>
    </revision>
  </page>
  <page>
    <title>ChangePackageDependencies Task Reference</title>
    <id>1442</id>
    <revision>
      <id>13619</id>
      <timestamp>2010-11-10T15:00:27Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;entity &quot; to &quot;resource &quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Tasks&lt;/categorytree&gt;

ChangePackageDependencies task makes the server request for changing the package dependencies in the model. For an understanding of automated dependency management see [[Change-Dependencies]].

If &quot;failIfUnmatched&quot; attribute is set to &quot;true&quot;, then any unmatched dependencies will cause a failure on the server.
Otherwise, unmatched dependencies will be returned as a set of properties describing a dependency tree.  This task will set the result
property to the failure code in both cases, but will not cause a build exception in the second case.
 
There will be three dependency trees: &quot;umatched&quot;,&quot;current&quot;, and &quot;allowed&quot;.  Using the value of the &quot;propertiesPrefix&quot; attribute as &lt;code&gt;$PREFIX$&lt;/code&gt;, all the tree data will reside in properties starting with &quot;$PREFIX$unmatched&quot;, &quot;$PREFIX$current&quot; or &quot;$PREFIX$allowed&quot;.
(in the properties below that end in &quot;.list&quot;, a corresponding &quot;.size&quot; property will contain the size of the list)
 
the property &lt;code&gt;$PREFIX$unmatched.list&lt;/code&gt; will be comma separated list of IDs.  Each Id will correspond to one deployment resource.
&lt;code&gt;$PREFIX$unmatched.ID.maprefUri&lt;/code&gt;, &lt;code&gt;$PREFIX$unmatched.ID.name&lt;/code&gt;, and &lt;code&gt;$PREFIX$unmatched.ID.resourceType&lt;/code&gt; will contain the URI, name and type of the deployment.
* &lt;code&gt;$PREFIX$unmatched.ID.typeNames.list&lt;/code&gt; will contain a comma separated list of types that had multiple match choices. 
* &lt;code&gt;$PREFIX$unmatched.ID.packagType.TYPE.entities.list&lt;/code&gt; will contain a comma-separated list of resource names

The task can be called again, using the &quot;userInputAcquired&quot; attribute to tell it to retrieve user choices for the unmatched
dependencies from the properties in the Project.  It will use the &quot;propertiesPrefix&quot; as the prefix to all input properties.

These properties should be of the form:
* &lt;code&gt;$PREFIX$choice.X.TYPE=NAME&lt;/code&gt;

Where X is the ID of the deployment, TYPE is the typename of the dependency, and NAME is the name of the dependency to use.

==Parameters specified as attributes==
      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;depot&lt;/td&gt;&lt;td&gt;The project to update&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;maprefUri&lt;/td&gt;&lt;td&gt;resource URI&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;packageType&lt;/td&gt;&lt;td&gt;Name of package type to select
	  &lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;deploymentType&lt;/td&gt;&lt;td&gt;name of deployment type to select
	  &lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;version&lt;/td&gt;&lt;td&gt;version of packages to select&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;defaultPackageName&lt;/td&gt;&lt;td&gt;regex to match against potential package names. otherwise, a single package will be used&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;failIfUnmatched&lt;/td&gt;&lt;td&gt;if true, fail when there are unmatched package dependencies.&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;failIfNotReplaced&lt;/td&gt;&lt;td&gt;if true, fail when a package dependency would be removed and no matching package would replace it.&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;propertiesPrefix&lt;/td&gt;&lt;td&gt;prefix of ant properties to use when generating dependency lists and for reading input properties&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;userInputAcquired&lt;/td&gt;&lt;td&gt;if true, fail when there are unmatched package dependencies.&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;allowMultipleMatches&lt;/td&gt;&lt;td&gt;if true, all matching packages from defaultPackageName regex will be used. otherwise one of the matching packages will be used (randomly).&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;matchLongestNamePrefix&lt;/td&gt;&lt;td&gt;if true, when matching the defaultPackageName regex, use the package name with longest common prefix with the deployment name.  If multiple have same length common prefix, only one will be used.&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;
    
==Examples==
Here's an example that comes from [[Deployment]]#runChangeDependencies:

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
 &lt;change-package-dependencies 
	serverUrl=&quot;${framework.server.url}&quot; 
	depot=&quot;${context.depot}&quot; 
	resultproperty=&quot;myResult&quot; 
	comment=&quot;Change-Dependencies: Change ${opts.packagetype} dependencies to version ${opts.version} for ${opts.deploymenttype} entities.&quot;
	maprefUri=&quot;${resource.mapref-uri}&quot; 
	packageType=&quot;${opts.packagetype}&quot; 
	deploymentType=&quot;${opts.deploymenttype}&quot;
	version=&quot;${opts.version}&quot; 
	failIfUnmatched=&quot;false&quot;
	failIfNotReplaced=&quot;${opts.failIfNotReplaced}&quot; 
	propertiesPrefix=&quot;changedeps.input.&quot;
	allowMultipleMatches=&quot;${opts.allowmultiple}&quot;
	defaultPackageName=&quot;${opts.defaultPackageName}&quot;/&gt;  
&lt;/syntaxhighlight&gt;

&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Resource model Ant Tasks]]</text>
    </revision>
  </page>
  <page>
    <title>Client-only install</title>
    <id>1619</id>
    <redirect />
    <revision>
      <id>10823</id>
      <timestamp>2009-12-12T23:24:04Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>moved [[Client-only install]] to [[ZIP installer (client-only)]]</comment>
      <text xml:space="preserve">#REDIRECT [[ZIP installer (client-only)]]</text>
    </revision>
  </page>
  <page>
    <title>ClientACL</title>
    <id>1527</id>
    <redirect />
    <revision>
      <id>9542</id>
      <timestamp>2009-12-10T16:20:58Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>moved [[ClientACL]] to [[JNDI Client integration]]</comment>
      <text xml:space="preserve">#REDIRECT [[JNDI Client integration]]</text>
    </revision>
  </page>
  <page>
    <title>ClientACL31</title>
    <id>1675</id>
    <redirect />
    <revision>
      <id>11284</id>
      <timestamp>2009-12-14T19:48:14Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>moved [[ClientACL31]] to [[Client ACL (3.1)]]</comment>
      <text xml:space="preserve">#REDIRECT [[Client ACL (3.1)]]</text>
    </revision>
  </page>
  <page>
    <title>Client ACL (3.1)</title>
    <id>667</id>
    <revision>
      <id>11285</id>
      <timestamp>2009-12-14T19:48:47Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">Note that, as of ControlTier 3.1, Jobcenter has no intrinsic mechanism to manage authorization rights for job creation, modification or deletion. This means that anyone who has access to the Jobcenter console can change any job's configuration (even if they don't have the right to execute them). This applies to both scheduled and on-demand jobs. This functional gap will be dealt with in a future enhancement.

Controlling Jobcenter command execution authorization with CTL

The right of a user to execute a job from Jobcenter is synonymous with their underlying AntDepo (AD) authorization - Jobcenter literally exploits the AD access control mechanism.

AD access control is based on configuring the &quot;$ANTDEPO_BASE/etc/acls.xml&quot; file. The following DTD and default acls.xml show the scope for customizing authorization levels:
&lt;pre&gt;
$ cat acls.dtd
&lt;!ELEMENT accessto ( command ) &gt;

&lt;!ELEMENT acl ( accessto, by, using, when ) &gt;
&lt;!ATTLIST acl description CDATA #REQUIRED &gt;

&lt;!ELEMENT acls ( acl* ) &gt;

&lt;!ELEMENT by ( role ) &gt;

&lt;!ELEMENT command EMPTY &gt;
&lt;!ATTLIST command module CDATA #REQUIRED &gt;
&lt;!ATTLIST command name CDATA #REQUIRED &gt;

&lt;!ELEMENT context EMPTY &gt;
&lt;!ATTLIST context name CDATA #REQUIRED &gt;
&lt;!ATTLIST context type CDATA #REQUIRED &gt;
&lt;!ATTLIST context depot CDATA #REQUIRED &gt;

&lt;!ELEMENT role EMPTY &gt;
&lt;!ATTLIST role name NMTOKEN #REQUIRED &gt;

&lt;!ELEMENT timeandday EMPTY &gt;
&lt;!ATTLIST timeandday day CDATA #REQUIRED &gt;
&lt;!ATTLIST timeandday hour CDATA #REQUIRED &gt;
&lt;!ATTLIST timeandday minute CDATA #REQUIRED &gt;

&lt;!ELEMENT using ( context ) &gt;

&lt;!ELEMENT when ( timeandday ) &gt;

$ cat acls.xml
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE acls SYSTEM &quot;file:///home/ctier/ctier/CTL/etc/acls.dtd&quot;&gt;

&lt;acls&gt;
  &lt;acl description=&quot;admin, access to any command using any context at anytime&quot;&gt;
    &lt;accessto&gt;
      &lt;command module=&quot;*&quot; name=&quot;*&quot;/&gt;
    &lt;/accessto&gt;
    &lt;by&gt;
      &lt;role name=&quot;admin&quot;/&gt;
    &lt;/by&gt;
    &lt;using&gt;
      &lt;context depot=&quot;*&quot; type=&quot;*&quot; name=&quot;*&quot;/&gt;
    &lt;/using&gt;
    &lt;when&gt;
      &lt;timeandday day=&quot;*&quot; hour=&quot;*&quot; minute=&quot;*&quot;/&gt;
    &lt;/when&gt;
  &lt;/acl&gt;
&lt;/acls&gt;
&lt;/pre&gt;</text>
    </revision>
  </page>
  <page>
    <title>Client logs</title>
    <id>71</id>
    <revision>
      <id>13828</id>
      <timestamp>2010-11-10T15:14:11Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot; -o object&quot; to &quot; -r resource&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Installation&lt;/categorytree&gt;
This page describes the logs produced by CTL command executions.

For information about server logs see: [[Server logs]]

==CTL log==

All commands run via the &lt;code&gt;[[CTL_Command_Reference|ctl]]&lt;/code&gt; command are logged in the standard log file, &quot;command.log&quot;. 

The default configuration locates the log as shown below.

&lt;pre&gt;$CTL_BASE/var/logs/command.log&lt;/pre&gt;

CTL uses [http://logging.apache.org/log4j/1.2/index.html Apache Log4j] for logging and its configuration can be controlled via the Log4j configuration file: &lt;code&gt;$CTL_BASE/etc/log4j.properties&lt;/code&gt;.

Users can control the logging level using the &lt;code&gt;[[CTL_Command_Reference#General_Options|--level]]&lt;/code&gt; option for &lt;code&gt;ctl&lt;/code&gt;.
Eg:
&lt;pre&gt;ctl --level warning -p project -t type -r resource -c command&lt;/pre&gt;
Will run ''command'' showing only messages of log level &quot;warning&quot; or greater.

[[Category:Logging]]</text>
    </revision>
  </page>
  <page>
    <title>CommandExists Type Reference</title>
    <id>1029</id>
    <revision>
      <id>13775</id>
      <timestamp>2010-11-10T15:10:29Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;project depot&quot; to &quot;project name&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Types&lt;/categorytree&gt;
==Description==
      &lt;p&gt;
	The command-exists type is a [http://ant.apache.org/manual/CoreTypes/custom-programming.html#customconditions custom condition] that can be used
	in the [http://ant.apache.org/manual/CoreTasks/conditions.html condition] core Ant task or any task that accepts a condition.
      &lt;/p&gt;

==Attributes==
      &lt;p&gt;The command-exists condition takes three attributes&lt;/p&gt;
    
{| border=&quot;1&quot;
! attribute
! description
! required
|-
| depot
| project name
| true
|-
| module
| module name
| true
|-
| command
| command name
| true
|}

==Examples==

      &lt;pre&gt;
     &amp;lt;condition property=&quot;exists&quot;&amp;gt;
         &amp;lt;command-exists depot=&quot;${context.depot}&quot; module=&quot;shellutil&quot; command=&quot;exec&quot;/&amp;gt;
      &amp;lt;/condition&amp;gt;
      &amp;lt;fail unless=&quot;exists&quot;&gt;shellutil#exec not found!&amp;lt;/fail&amp;gt;

      &lt;/pre&gt;

&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Command Dispatcher Ant Conditions]]</text>
    </revision>
  </page>
  <page>
    <title>Command Development Guide</title>
    <id>1604</id>
    <redirect />
    <revision>
      <id>14342</id>
      <timestamp>2010-11-11T00:25:40Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[Module Development Guide]]</comment>
      <text xml:space="preserve">#REDIRECT [[Module Development Guide]]</text>
    </revision>
  </page>
  <page>
    <title>Command Dispatching</title>
    <id>2899</id>
    <redirect />
    <revision>
      <id>16437</id>
      <timestamp>2012-02-20T15:12:01Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <comment>Redirected page to [[Model-driven command dispatching]]</comment>
      <text xml:space="preserve">#REDIRECT [[Model-driven_command_dispatching]]</text>
    </revision>
  </page>
  <page>
    <title>Command Type Reference</title>
    <id>141</id>
    <revision>
      <id>13794</id>
      <timestamp>2010-11-10T15:11:47Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;object name&quot; to &quot;resource name&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Types&lt;/categorytree&gt;

=Description=

      &lt;p&gt;
	The Command data type represents a command defined in a type.
      &lt;/p&gt;

=Command=
      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;name&lt;/td&gt;&lt;td&gt;The resource name.&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;module&lt;/td&gt;&lt;td&gt;The command module name.&lt;/td&gt;&lt;td&gt; No &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;maprefuri&lt;/td&gt;&lt;td&gt;The maprefUri&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;description&lt;/td&gt;&lt;td&gt;The object description.&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;executionString&lt;/td&gt;&lt;td&gt;The command execution string value.&lt;/td&gt;&lt;td&gt; No &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;argumentString&lt;/td&gt;&lt;td&gt;The command argument string value.&lt;/td&gt;&lt;td&gt; No &lt;/td&gt;
	&lt;/tr&gt;

      &lt;/table&gt;

=Examples=

     &lt;p&gt;
       Shows Command data type used in the [[ExecuteAction Type Reference|execute]] [[Controller Task Reference|controller]] Ant
       task. 
      &lt;/p&gt;
      &lt;pre&gt;
	&amp;lt;controller&amp;gt;
	&amp;lt;execute&amp;gt;
          &amp;lt;command maprefUri=&quot;${maprefUri}&quot;
                   name=&quot;Status&quot;
                   module=&quot;Apache&quot;/&amp;gt;
	&amp;lt;execute&amp;gt;
	&amp;lt;/controller&amp;gt;
      &lt;/pre&gt;
&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Command Dispatcher Ant Types]]</text>
    </revision>
  </page>
  <page>
    <title>Command dispatcher</title>
    <id>1601</id>
    <revision>
      <id>16679</id>
      <timestamp>2012-02-29T12:48:41Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Corrected the category tree shown in the page header</comment>
      <text xml:space="preserve">&lt;noinclude&gt;
&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-
color:white;&quot;&gt;Command execution&lt;/categorytree&gt;
&lt;/noinclude&gt;
The Command Dispatcher is a core function of the ControlTier software that provides the mechanism to send commands over the network seamlessly to the correct [[Node]]s. This facility is used whenever you run a command or script, via the command-line ([[ctl]] or [[ctl-exec]]) or via [[Jobcenter]].

At the simplest level, you  send scripts or shell commands directly to any Node or set of Nodes based on simple filtering options.  The Command Dispatcher handles the details of using the correct hostname and username to do the connection, and invoking the script on the remote node(s).

When you develop a [[Resource Model]], each deployable object that is attached to a Node object can be the target of a command. You can invoke the Dispatcher to look at  your Resource model to send a command only to the appropriate set of Nodes.

The diagram below shows how a user invokes a command on an object, which is then dispatched from the server to the correct client node based on the Resource model configuration.

[[Image:Disptacher Mechanism.png]]
&lt;noinclude&gt;
==Features==

The dispatcher allows you to reliably perform tasks in a multi-node heterogeneous environment, and lets you filter targeted nodes based on a common set of filtering options.  

Together these features make up the [[CTL_concepts#Command_Dispatching|command dispatching]] mechanism:

; Simplified Node addressing
: The Node metadata stored in the Resource model allows you to use simple names to specify nodes, rather than complex hostnames. The metadata also can store specific SSH authentication info like username and password if necessary.
; Node filtering
: Any metadata for Nodes can be used to filter the targets, such as OS name, family or architecture.  Plus you can use free-form [[Tags]] to arbitrarily organize your Nodes.
; Execute multi-step procedures across distributed environments
: The Dispatcher handles the connection to Nodes, so you can focus on just getting the steps of your process correct.
; Parallelism
: You can use a Thread count option to execute on more than one Node at a time, and conveniently retry on only the set of failed Nodes if necessary.

==Core type usage==
{{Main|Core Type Guide}}

The Dispatcher is also used by the [[Core Type Guide|core types]] such as [[Service]] and [[Site]]: they have predefined workflows that automatically use the Dispatcher to send commands to their Child resources.

For example, using Site and Service types it's a convenient method to remotely control sets of stop and start operations.


When defining a Type, you can create [[:Category:Dispatch_commands|Dispatch Commands]].  This is a special command-type which use the Command Dispatcher to dispatch a command to a set of resources related to the main object.

==ControlTier tool usage==

* Use the [[ctl-exec]] tool to dispatch a script or shell command directly to a set of Nodes. See: [[Running ad hoc commands]]
* Use the [[ctl]] tool to dispatch [[:Category:Defined Commands|defined commands]]. See: [[Running defined commands]]
* Use [[Jobcenter]] to have a web-based interface for both of these actions. See: [[Creating jobs]]

A set of common [[Dispatcher options]] control Node Dispatch behavior.

{{Guide/navbox}}
{{Manual/navbox}}
[[Category:Command execution]]
&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Command dispatcher features</title>
    <id>209</id>
    <revision>
      <id>14363</id>
      <timestamp>2010-11-11T16:39:25Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">* '''Distributed execution''': when needed, transparently executes procedures on local or remote machines, enabling host and network abstraction. [[Command execution| &amp;rarr; Executing commands]]
* '''Command dispatch''': call a named command and the framework dispatches it to the underlying module. This also lets you separate the implementation of each command. [[Command dispatcher| &amp;rarr; Command dispatcher]]
* '''Command sequencing''': Define a series of commands to run in a sequence with configurable success and error handlers. The success and error handlers can invoke notification or call another command or workflow. [http://sourceforge.net/apps/mediawiki/controltier/index.php?title=Category:Workflow_Commands &amp;rarr; Workflow Commands]
* '''Self documenting''': CTL modules are declared in an XML file that supports automatic website generation via [http://forrest.apache.org Apache Forrest]. You can extend this documentation using your own doc tags. [[Generating Forrest Sites| &amp;rarr; Generating Forrest Sites]]
* '''Data-driven commands''': Make your procedures data-driven to remove values that either change often or would differ from environment-to-environment.
* '''Parallel execution''': The CTL shell tool and its built-in workflow allows you to execute actions in multiple threads enabling concurrency
* '''Extensible''': The framework is made to be extended via the modules (packaged sets of commands), as well as, extensions (libraries of modules). CTL is &quot;multi-lingual&quot; allowing you to define command implementation in a variety of languages: unix shell, windows batch, and scripting langauges like ruby, python, groovy, javascript. [[First CTL module|&amp;rarr; First module]]
* '''Cross-platform''': CTL is written in Java and includes a set of libraries to provide cross platform utilities useful to CTL module developers. [[Architecture|&amp;rarr; Architecture]]
* '''Object orientation''': CTL modules support an inheritance model and the concept of instance data. [http://sourceforge.net/apps/mediawiki/controltier/index.php?title=Category:Object-orientation OO]
* '''Security''': CTL has the option of restricting access to command execution for all defined commands. This is done via a fine grained ACL configuration along with an LDAP repository where user roles are defined. [[Installation|&amp;rarr; Configuring ControlTier]]
 
As an automation and control framework, CTL provides the following benefits:

* '''Modularizes''' management scripts by consolidating them into reusable libraries.
* '''Reduces complexity''' of scripts and makes them more resusable by parameterizing them with operational data
* '''Simplifies''' how management actions are tied together to implement multi-step procedures via workflows.
* '''Scales''' up for use in large organizations.</text>
    </revision>
  </page>
  <page>
    <title>Command dispatching</title>
    <id>2898</id>
    <redirect />
    <revision>
      <id>16436</id>
      <timestamp>2012-02-20T15:11:01Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <comment>Redirected page to [[Model-driven command dispatching]]</comment>
      <text xml:space="preserve">#REDIRECT [[Model-driven_command_dispatching]]</text>
    </revision>
  </page>
  <page>
    <title>Command execution</title>
    <id>53</id>
    <revision>
      <id>16678</id>
      <timestamp>2012-02-29T12:42:41Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Undo revision 16677 by [[Special:Contributions/Bogdan.iosif|Bogdan.iosif]] ([[User talk:Bogdan.iosif|talk]])</comment>
      <text xml:space="preserve">&lt;noinclude&gt;
&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Command execution&lt;/categorytree&gt;
&lt;/noinclude&gt;
You can execute actions using the [[Command dispatcher]] in two &quot;modes&quot;:
===Ad hoc command execution===
{{main|Running ad hoc commands}}
Lets you execute scripts via the dispatch functionality on the fly. Use this mode whenever you want to perform a distributed execution of an arbitrary shell script or set of system commands. The ControlTier client is not required for this, just SSH access.

=== Defined command execution===
{{main|Running defined commands}}
Lets you execute defined commands. A defined command enables you to break management processes into reusable named procedures and execute them in distributed fashion over the network. You can also create workflows (with error handling) that span multiple commands and execute across multiple machines. ControlTier comes with sets of defined commands and utilities you can call from your scripts, use individually, or leverage to create your own command workflows. 

=== Graphical interface ===
{{main|Ctlcenter}}
Both ad hoc and defined command execution can be performed from a graphical central console via Ctlcenter webapp. If a procedure becomes routine, [[Creating jobs|create a job]] and hand it off for self service.

&lt;noinclude&gt;
{{Guide/navbox|state=uncollapsed}}
{{Manual/navbox}}
[[Category:Command execution]]
&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Command life cycle</title>
    <id>89</id>
    <revision>
      <id>10577</id>
      <timestamp>2009-12-12T18:54:22Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Workflows&lt;/categorytree&gt;

Most command execution follows a typical pattern. Commands may need to parse command line options, get and read property data, perform their main task, and then check or process results. Establishing a common lifecycle that can be imported by all commands in a module will simplify the implementation of each command's implementation.

Each command handler generated by [[ProjectBuilder]]#build-type will contain an import statement reading the type's lifecycle targets:
&lt;pre&gt;
 &lt;import file=&quot;${module.dir}/lib/command.xml&quot;/&gt;
&lt;/pre&gt;


=Lifecycle targets=

The figure below shows a structured set of Ant targets that reflect this typical lifecycle, breaks down the process into individual steps and standardizes their order of execution.

[[Image:handler-lifecycle.png]]

Some of these targets (e.g., those outlined in black) may be empty, containing no tasks, but are declared to define the dependency structure. The targets outlined in yellow are typically implemented with tasks relevant to their respective part of the lifecycle.

The table below describes each target and their dependencies.

{| border=&quot;1&quot;
!Target !! Description !! depends
|-
|execute||Manages life-cyle of the handler. Default and main target.||-pre-execute, -execute, -post-execute
|-
| -pre-execute||prepares handler to execute||-post-props, -post-opts
|-
| -execute||implementation of the handler||None.
|-
| -post-execute||Finalization and handling of execution results||None.
|-
| -post-opts||User defined target that checks values and/or initializes params from context||-getots
|-
| -getopts||calls the GetOpts ant task.||-pre-opts
|-
| -pre-opts||Finalization and handling of execution results||None.
|-
| -post-props||Calls the Property task to read property files||-get-props
|-
| -get-props||Calls the GetProperties command||-pre-props
|-
| -pre-props||Prepares to parse options||None.
|}

Note
* Like the template method design pattern, this handler lifecycle defines the skeleton of operations which commands override to provide concrete behavior.

Because these life cycle targets are fairly generic, the content of the &lt;code&gt;${module.dir}/lib/command.xml&lt;/code&gt; should typically read it's supertype's command.xml. This can be done by referencing the supertype's file to import. For example, a subtype can read the Deployment/lib/command.xml this way:

&lt;pre&gt;
&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;project default=&quot;execute&quot;&gt;
  &lt;import file=&quot;${modules.dir}/Deployment/lib/command.xml&quot;/&gt;
&lt;/project&gt;
&lt;/pre&gt;

Warning
* If you are creating a command that overrides Get-Properties, you should declare the &quot;-get-props&quot; target as empty to avoid inadvertent infinite loops. You should also declare the &quot;-post-props&quot; target empty to avoid reading any existing properties
&lt;noinclude&gt;{{Manual/navbox}}&lt;/noinclude&gt;

[[Category:Defined Commands]]</text>
    </revision>
  </page>
  <page>
    <title>Command logging</title>
    <id>1676</id>
    <redirect />
    <revision>
      <id>11287</id>
      <timestamp>2009-12-14T19:49:53Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>moved [[Command logging]] to [[Client logs]]</comment>
      <text xml:space="preserve">#REDIRECT [[Client logs]]</text>
    </revision>
  </page>
  <page>
    <title>Commands.properties</title>
    <id>204</id>
    <revision>
      <id>13462</id>
      <timestamp>2010-11-10T01:40:22Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;entity.&quot; to &quot;resource.&quot;</comment>
      <text xml:space="preserve">=Overview=

      &lt;p&gt;This file contains the metadata describing the commands in the module.
	Command handlers can be read the file using the following code. 
	Note that the ${module.dir} property will be defined by the command dispatcher.
      &lt;/p&gt;
      &lt;code&gt;&amp;lt;property file=&amp;quot;${module.dir}/commands.properties&amp;quot;/&amp;gt;&lt;/code&gt;
      &lt;p&gt;&lt;strong&gt;Common&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;The table below lists the properties defined for any type command&lt;/p&gt;
      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	  &lt;th&gt;Property&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;command.&lt;em&gt;name&lt;/em&gt;.command-type&lt;/td&gt;&lt;td&gt;Type of handler. 
	    Can be either: ant, shell, workflow. &lt;code&gt;ant&lt;/code&gt; is the default.
	   &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;command.&lt;em&gt;name&lt;/em&gt;.controller&lt;/td&gt;&lt;td&gt;Module name.
	   &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;command.&lt;em&gt;name&lt;/em&gt;.daemon&lt;/td&gt;&lt;td&gt;Takes true if daemon, false otherwise.
	   &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;command.&lt;em&gt;name&lt;/em&gt;.doc&lt;/td&gt;&lt;td&gt;Description of command.
	   &lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;
      &lt;p&gt;Example&lt;/p&gt;
      &lt;pre&gt;command.Stop.command-type=shell
command.Stop.controller=Apache
command.Stop.daemon=false
command.Stop.doc=Stop apache server&lt;/pre&gt;

      &lt;p&gt;&lt;strong&gt;Shell type&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;For commands of the &lt;code&gt;shell&lt;/code&gt; type, the following properties are required&lt;/p&gt;
      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	  &lt;th&gt;Property&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;command.&lt;em&gt;name&lt;/em&gt;.argument-string&lt;/td&gt;&lt;td&gt;Arguments or script code. Used
	    if shell type command handler.
	   &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;command.&lt;em&gt;name&lt;/em&gt;.execution-string&lt;/td&gt;&lt;td&gt;Name of program to execute. Used if shell type command handler.
	   &lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;
      &lt;p&gt;Example&lt;/p&gt;
      &lt;pre&gt;command.Stop.argument-string=kill `cat ${resource.instance.dir}/httpd.pid`
command.Stop.execution-string=bash&lt;/pre&gt;

     &lt;p&gt;&lt;strong&gt;Workflow type&lt;/strong&gt;&lt;/p&gt;
     &lt;p&gt;For commandsof the &lt;code&gt;workflow&lt;/code&gt; type, the following property is required&lt;/p&gt;
      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	  &lt;th&gt;Property&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;command.&lt;em&gt;name&lt;/em&gt;.workflow&lt;/td&gt;&lt;td&gt;Comma separated list of commands in the workflow.
	   &lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;
      &lt;p&gt;Example&lt;/p&gt;
      &lt;pre&gt;command.Update.command-type=workflow
command.Update.workflow=Stop,Package-Install,Configure,Start
&lt;/pre&gt;

[[Category:CTL properties]]</text>
    </revision>
  </page>
  <page>
    <title>Community</title>
    <id>109</id>
    <revision>
      <id>16740</id>
      <timestamp>2012-05-16T03:49:10Z</timestamp>
      <contributor>
        <username>Ella19</username>
        <id>1789</id>
      </contributor>
      <minor/>
      <comment>adds</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Community&lt;/categorytree&gt;
Welcome to the ControlTier project community page! This is where the ControlTier project discussion and resources can be found.

==The people==
Who are the people in this community?
* Anybody responsible for managing an online service but is finding it hard to manage it because of the rising scale and complexity of [http://www.cavite-housing.com/ cavite house and lot] their application deployments
* Anybody that is interested in developing and using &quot;[[Understanding the abstracted administration paradigm|automated and abstracted administration]]&quot;
* See the [[Who's_who|who's who in the community]] page for a list of the more active people you'll find in the google group and the #controltier irc channel

[[File:karate_dojo.JPG|400px|Photo Credit: Dan Nemec of Silverpop.com]]

==The project==
What are the goals of this project? 
* Create a framework and paradigm that will allow online business operators to scale up their capabilities, shorten release cycles, improve operation quality, and simplify process.
* Develop ideas, best practices and technologies that support the &quot;automated, abstracted administration&quot; concept.
Ambitious to be sure but we're seriously taking it on!

==The software==
The ControlTier project is really a broad effort. We are tackling the problem in various ways, each of which might be supported by its own software effort.

Here are the software projects currently under development:

* CTL: Distributed command dispatching framework: [[CTL architecture]]
* Workbench: Design workbench and [[resource model]] repository (aka CMDB).
* Ctlcenter: Web-based graphical interface to CTL that also supports executing timed jobs and reporting
* [http://sourceforge.net/projects/moduleforge Moduleforge]: Collection of reusable CTL commands and workflows

All these projects are distributed in a single installer that we say comprise &quot;[[ControlTier]]&quot;.

===What powers ControlTier?===
ControlTier software was not written all from scratch. It leverages a great deal of other well known open source projects. Here are just some of the projects that underly the ControlTier components: Jetty, Grails, Jackrabbit, Ant, ant-contrib, BSF, Groovy, JSCH, Quartz, HSQL, commons, castor, lucene, Jena, Log4j, dom4j, IzPack.

==The license==

We believe this kind of software project must be open source because it is a new technology space and therefore ideas and code should be easily transferable. All projects are [[License|licensed under Apache 2.0]].

==The vision==
The following defines what we mean as the ''Control Tier'':

{{What is the Control Tier}}

== User resources ==
* [[User Guide]]
* [[Presentations]]
* [[Mailing lists]]
* [[Blogs]]
* [[IRC Channel]]
* [[Bugs]]

==Community website administration==
* [[Pushing content to the Sourceforge web service]]

[[Category: Community]]</text>
    </revision>
  </page>
  <page>
    <title>Concepts</title>
    <id>962</id>
    <revision>
      <id>14482</id>
      <timestamp>2010-11-12T00:14:35Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>/* Processes */</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Introduction&lt;/categorytree&gt;
Several fundamental concepts underly and drive the development of the ControlTier system. If you are a new user, knowing about them will help you use and integrate  ControlTier into your environment. 

==Abstracted administration==
{{main|Abstracted administration}}

In a nutshell, the idea behind abstracted administration is to separate environment detail from the procedures supporting deployment management. We consider ''deployment'' in a broad sense encompassing application systems, their supporting infrastructure and their environments. Through abstracted administration you ultimately manage deployments via a logical view giving you a means to contend with scale and complexity.
Management procedures can be gradually abstracted at different levels. 

[[Image:controltier-concepts-prism.png]]

* ''Nodes'': You want to execute the same procedure in different environments but each environment is comprised of a different set of nodes. Nodes are abstracted by describing them in terms of metadata and then executing actions across hosts that match metadata filtering criteria. Abstracting nodes from your automation process simplifies script writing as you can target actions by logically addressing nodes.
* ''Services'': You want to manage the startup and life cycle across your different application services in a coordinated way but how they integrate and should be managed differs across environments. You can encapsulate startup and life cycle procedures in abstractions that provide consistent interfaces to long running services, package installation and configuration. Service abstraction also lets you manage groups of services letting you manage them from a single point of control.
* ''Processes'': Deploying new software and administrating multi-tier application often involves the coordination of many steps and control points. You can break these steps down into reusable procedures and tie them back together again as higher level processes. Abstracting process is important to simplify complicated procedures that must be executed across different sized environments.

==Administrative framework==
{{main| Architecture}}
The vision of the ControlTier open source project is the development of an administrative framework where all activity needed for application deployment and administration can be supported. The framework supports activities like:
* Node administration: Registration and configuration of hosts where distributed management activity will occur.
* Package management: Creating and staging software packages that will be delivered and installed during deployment. This may also include integrating with the build process to automate the staging of new packages from the produced build artifacts.
* Service management: The operation of the integrated application services. This includes managing new installs and upgrades but also other routine processes like reconfiguration and startup/shutdown.
* Management integration: Define new procedures, life cycles and service definitions.

The framework is designed as a system of components providing features such as:
* Command dispatcher
* Job scheduling
* Workflows
* Resource model 
* Transforms
* File share
* Event logging
* Package management
* Authorization control
The framework provides a vital role in supporting the abstracted administration paradigm by acting as a common infrastructure to conduct service management activities.

==Command dispatching==
{{main|Command dispatcher}}
ControlTier supports a notion called Command dispatching wherein a user can specify an action (called a command) to be executed in the context of resource on any node where that resource has been associated. Internally, a mechanism called the [[command dispatcher]] does a lookup to find the nodes where the resource has been deployed and performs distributed command execution. The command executes in a data context that contains information about the target resource.

Command dispatch supports the abstracted administration paradigm by
* helping abstract nodes from command execution
* encapsulate application resources like services and packages 
* providing a data context to command execution making procedures data driven and abstracts the environment

The command dispatcher supports two methods of command execution
* Ad hoc commands: Execute any shell command or shell script across a set of hosts. Do this by [[running ad hoc commands]]
* Defined commands: Encapsulate procedures as a named command and tie them together into command workflows. Execute defined command by [[running defined commands]].

==Resource model==
{{main|Resource model}}
The command dispatcher works in conjunction with a [[resource model]]. A resource model is a representation of the application in its environment. The resource model represents applications from several aspects:
* structural: the application components are described in terms of their interrelationships
* settings: each application component may have a unique set of properties 
* artifacts: components may depend on packaged artifacts
* location: describes where the components are deployed in the network.

The resource model plays a key role in supporting abstracted administration through helping abstract the environment and service configuration. The resource model lets you describe your application both logically, as a pattern of deployment, as well as physically, in the context of physical nodes and packages. Resource models are maintained in a [[project]]. 

The resource model uses a [[Type modeling]] system to allow users to create a data model to represent their business services. The ControlTier project defines a set of core types that represent generic concepts needed to describe application systems. The [[Core Type Guide]] lists these types and pointers to reference and usage. The [[type modeling]] page describes the type system in greater detail.

==Processes==
{{main|Modules}}
When one thinks about the kinds of processes used to manage deployments, they will recognize various patterns of actions that will be performed. For example, packages need to be created, staged to a repository, distributed to hosts, extracted to installation directories, have steps applied pre and post installation. Likewise, long running processes need to be started and shutdown, have configuration prepared and applied. Later on, it may be desirable to coordinate the actions just described into a single step that can execute across a set of hosts.

ControlTier embodies and encapsulates these life cycles as process workflows. For example, activities supporting package management fall into workflows: creation and installation. Activities supporting service management fall into startup and shutdown. Life cycle workflows can build on other workflows providing a method to simplify procedures into larger but simpler steps. For example, the deployment life cycle for a service coordinates package installation with configuration management and startup and shutdown.

In ControlTier each life cycle is defined as a [[workflow command]]. A workflow command is a command definition that specifies a set of steps to run. Each step is defined as a command, too. Since a workflow is itself a command, workflows can call other workflows. 

Representing procedures as life cycles is another key aspect supporting the abstracted administration paradigm. Life cycle workflows help abstract the process by defining consistent interfaces to routine activities. See the [[Module Development Guide]] for information about developing your own processes as a workflow.

{{Manual/navbox}}

[[Category:Introduction]]</text>
    </revision>
  </page>
  <page>
    <title>Conceptual terms analysis</title>
    <id>1480</id>
    <revision>
      <id>16387</id>
      <timestamp>2012-02-20T12:50:48Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Undo revision 15476 by [[Special:Contributions/Pierrehernandez|Pierrehernandez]] ([[User talk:Pierrehernandez|talk]]) Reverted SPAM bot edits</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;ControlTier Improvement Process&lt;/categorytree&gt;

The strawman rationalization of conceptual terms aims to consolidate the terminology used through the ControlTier system with the ultimate goal of a small vocabulary.

==Background==

ControlTier is really a set of independent projects that have evolved over the years. Each of these projects talks about a common set of concepts but sometimes using different terms. As our thinking has developed and we faced new use cases and challenges, we sometimes revised some of their names because we thought they would correspond to better known idioms. Unfortunately, these inconsistencies create an unnecessary complexity to learning how to use ControlTier and make documentation difficult to write.

The following questions may help guide the effort:
* Q: What is the basic and primary objective of a ControlTier user? 
** A: To execute a command (whether ad hoc or defined) that coordinates/orchestrates one or more steps within the network

* Q: What is the CTL framework?
** A: A system of controllers whose commands are executable through the control dispatcher

==Goals and objectives==

* Agree upon the core concepts and word choices that denote them
* Review the current terms in use and map the overlapping ones, clarifying the ambiguous ones
* Refactor the system to use the new consolidated set

==Concepts==
===Modeling===
====THING====
Big overlaps between resource/object/instance/entity/context
* [[Resource]]: the fundamental thing in the ControlTier universe of discourse
** Root class in  type system
** A &quot;resource&quot; (in lowercase) usually meant as an instance of Resource and often means object/entity/thing/context
** Used in [[project.xml]] &lt;code&gt;&lt;resource&gt;&lt;/code&gt; tag
** Views call it the &quot;target resource&quot; when the info pertains to itself
* Object: an instance of a [[Resource]] type. 
** Seen in Workbench Objects tab
** For CTL argument: -r &lt;objName&gt;
** CTL calls it a DepotObject
* entity: Roughly means the &quot;target&quot; resource in the scope of a command execution
** Often is short for an instance of Managed-Entity, though it would probably have been better to call it &quot;Controllable-Resource&quot; as it is a Resource. Also, its software manifestation is called a [[Managed-Entity_Design_Pattern#Controller]] in the design pattern which would have been better than &quot;Module&quot; (an abbreviation of &quot;controller-module&quot;).
** Used in property names &lt;code&gt;resource.&lt;/code&gt;.''propName''
** The name/label of the resource is called &lt;code&gt;resourceName&lt;/code&gt; in a CTL data type
** ''I support renaming resource to object in terminology, and changing property names to something else, maybe &quot;this&quot; or &quot;self&quot; (some could move to the &quot;context&quot; namespace) [[User:Moses Lei|Moses Lei]] 08:00, 17 January 2010 (UTC)''
* Instance: An instance of a type
** Now, synonymous with object and resource
** Historical note: Originally, the term &quot;instance&quot; was used (for command execution referred to as &lt;code&gt;-i instanceName&lt;/code&gt;) but later superseded by &quot;object&quot;.
* [[Managed-Entity]]: Said to be a Resource controllable via executable commands (submits to AO)
** It is a well known core type and the basis for the Deployment layer of types. See [[Deployment_Type_Guide]]
** Should have been called a ''Controllable-Resource'' or simply ''Controller''
** ''I don't like &quot;Controller&quot; because we name types after what describes the instance (Service, JBossServer, Builder), not what describes the functionality. I prefer &quot;Controllable&quot; (in the noun sense). [[User:Moses Lei|Moses Lei]] 08:00, 17 January 2010 (UTC)''
* Deployment: Roughly means an object/instance/resource/context that can be installed in a CTL depot
** Also represents a software installation in the environment
** Used in the CTL [[resources.properties]] where its semantics are closer to DepotObject
** Used in the CTL file system: CTL_BASE/projects/''project''/resources
* Context: Describes a thing in the environment or an execution data context
** Can mean the resource that is executing a command
** Various CTL properties are described with the &lt;code&gt;context.&lt;/code&gt; prefix
** Can describe a place or extent in the RDF model (eg, archaic phrase &quot;context path&quot;)
** Describes a command execution data context

====CLASS====
Big overlaps between module/type/class/controller
* Module: The reification of a Managed-Entity type as a software artifact
** Used throughout CTL. Called a [http://controltier.sourceforge.net/docs/snapshot/javadoc/ctl-dispatch/com/controltier/ctl/common/CmdModule.html CmdModule]] the API
** In CTL can be referenced with &lt;code&gt;-m moduleName&lt;/code&gt;
** Originally called a &quot;[[Managed-Entity_Design_Pattern#Controller|Controller]]&quot;. Still can see the property: &lt;code&gt;resource.controller-module&lt;/code&gt;
* Type: An resource with a set of properties and perhaps commands
** In CTL can be referenced with &lt;code&gt;-t typeName&lt;/code&gt;
** Also referred to as &lt;code&gt;resourceType&lt;/code&gt; in CTL type defs
* Class: Synonymous with Type
** Used internally in Workbench 
* Order: A secondary classification of types: [[Type_modeling#Orders]]
** Used internally in Workbench to manage UI schemes and model management behavior
* Metatype: Same as Order
** Used in some documentation
* Basetype: Same as Order
** Used in some ProjectBuilder commands (create-type)
** Used in conversation to denote core types
* Coretype: Signifies &quot;important&quot; types used as a foundation for a ControlTier-based problem solving methodology
** Includes: Managed-Entity, Node, Package, Deployment, Mediator, Builder, Updater, Service, Site
** Used often in conversation and in documentation
* Updater: An [[Updater]] is an abstraction that coordinates build and deployment subprocesses
** More or less a misnomer 
** Does not represent a thing in the environment but a process
** ''In addition to this, the current function of [[Updater]] can easily be merged into [[Site]], making Updater obsolete. We could instead create a new type called &quot;Process&quot; or &quot;Coordinator&quot; that does more complicated things. [[User:Moses Lei|Moses Lei]] 07:53, 17 January 2010 (UTC)''

====METHOD====
* Command: Defines an executable interface in a type/class/module
** In CTL referenced via &lt;code&gt;-c commandName&lt;/code&gt;
** Declared via [[Type-v10.xml#command]]
** Described in two modes: ad-hoc vs defined
*** A better word for &quot;defined command&quot; would be &quot;dispatcher command&quot;
** There are said to be kinds of commands including: workflow, dispatch, ant, bsf, daemon, bat, shell
** Said to be declared inside a &quot;[[Managed-Entity_Design_Pattern#Controller|Controller]]&quot;
* Handler
** The generated artifact from building a module
** There are types of handlers: workflow, dispatch, ant, shell, bsf, bat, daemon
** Called a [http://controltier.sourceforge.net/docs/snapshot/javadoc/ctl-dispatch/com/controltier/ctl/common/CmdHandler.html CmdHandler] in the CTL API
* WorkflowCommand: a sequence of commands
** Sometimes referred to as a process
** &quot;sequence&quot; (or sequential) might be a better name for this command-type
* DispatchCommand: a command executed across a set of objects
** In conjunction with Workflows, also considered a process
** &quot;relay&quot; might be a better term for this command-type

There is a very unfortunate ambiguity between the term &quot;Module&quot; (CmdModule) and the now forgotten &quot;Controller&quot;. In ControlTier 2.x, objects declared abstract commands (akin to Interfaces) and then were bound to a Controller that provided the concrete implementations. Possible resolutions:
* Refactor the CTL framework renaming CmdModule to Controller and eliminate the word &quot;module&quot; 
* Refine the [[Managed-Entity design pattern]] to reconcile the naming between Managed-Entity and Controller, perhaps consolidating the concepts with the result being &quot;Controller&quot;.

''I feel there is potential here for confusion with the controller task. If we are going to rename Managed-Entity to Controller, we should give the controller task another name, maybe &quot;ctl&quot; since it's analogous to running the ctl command at the command line. [[User:Moses Lei|Moses Lei]] 07:51, 17 January 2010 (UTC)

====ASSOCIATION====
* Resources: Denotes a relationship with another Resource
** Used in the RDF model as a type property for Resource
** Used in [[project.xml]] as &lt;code&gt;resources&lt;/code&gt; tag
* Referrers: Same as above but the inverse relationship
** Used in the RDF model as a type property for Resource
** Used in [[project.xml]] as &lt;code&gt;referrers&lt;/code&gt; tag
* Dependency: Same as &quot;resources&quot; term
** Used in documentation and in conversation 
** Sometimes used to say child or parent dependency
* Child resources:  Same as &quot;resources&quot;
** Used in Workbench and in some doc
* Parent resources: Same as &quot;referrers&quot;
** Used in Workbench and in some doc

It should be noted that the nature of the &quot;resources&quot; property is that it is a aggregation relationship and does not necessarily imply whole-part composition. So &quot;dependency&quot; is considered too strong a word in some cases as it does not necessarily mean it is a required relationship.

''Perhaps we should consider what other systems think of as &quot;dependencies&quot;. For Example, apt uses the terminology &quot;Depends on:&quot; for packages needed to install a package, while the inverse is described as &quot;packages depending on...&quot; Another term we might analyse is &quot;links&quot;. Alternatively, we could scrap &quot;dependency&quot; altogether and call all associations one of these three: &quot;Parents&quot;, &quot;Children&quot; and &quot;Settings&quot;.[[User:Moses Lei|Moses Lei]] 07:45, 17 January 2010 (UTC)''

====PROPERTY====
* Property: A characteristic of a type (ie, a predicate).
** In RDF meant as an RDF property
** Very ambiguous due to the overlaps with RDF property, Java/Ant property
* Attribute
** Similar to a user-defined property
* Exported from a type-property in a class
** Similar to a user-defined property
* Ant/Java property: Key value pairs
** Stored in the file resource.properties: The ${resource.properties.file} in a CTL depot

During object execution, the data view is structured very inconsistently. The &quot;target&quot; object data is prefixed with &quot;resource.&quot; while its resources are prefixed by their order (eg setting.type.name.prop). All the data should be rooted under a single prefix/namespace. Also, not all commands execute in an object scope and so the &quot;resource.&quot; prefix is bad to begin with. Those commands rely on context. and opts. properties.

===MISCELLANEOUS===
Bad overlap between depot/project
* Depot: A repository of ControlTier artifacts
** A management realm
** Used throughout CTL and Commander tasks
** On the client, created by &lt;code&gt;ctl-project&lt;/code&gt;
* Project: Synonymous with depot
** Seems to have superseded the word &quot;depot&quot; inside the server webapps
* Library: A packaged set of modules
** Does not include objects forcing devs to stick templates inside the module hierarchy
* Extension: A CTL extension
** Can include Jars, Modules, config properties and shell scripts. See [[CTL-EXTENSION Command Reference]]
* Process: A subset of a project
** Similar to a &quot;library&quot; or &quot;pattern&quot; (archaic)
* ControlTier instance: An integrated installation of ControlTier servers and clients
** Can contain more than one depot/project
** Also called a &quot;framework&quot; in CTL 

* itnav: The webapp name of Workbench
* commander: The client layer to Workbench
* colony: The client interfacing layer inside Workbench

{{CtDevelopment/navbox}}

[[Category:ControlTier Improvement Process]]
[[Category:ControlTier TNG]]</text>
    </revision>
  </page>
  <page>
    <title>Configure</title>
    <id>923</id>
    <revision>
      <id>10261</id>
      <timestamp>2009-12-11T18:53:22Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">{{stub}}
&lt;noinclude&gt;&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Deployment&lt;/categorytree&gt;&lt;/noinclude&gt;

The '''Configure''' workfow is a command defined in the [[Deployment]] type and subtypes to handle the configuration cycle of an application deployment. It is generally implemented to call the command [[Docs-Generate]] but subtypes may include other steps.

[[Category:Commands]]
[[Category:Deployment]]
[[Category:Configure]]</text>
    </revision>
  </page>
  <page>
    <title>Configuring ControlTier to run as a Windows Service</title>
    <id>2053</id>
    <revision>
      <id>15159</id>
      <timestamp>2011-03-10T03:48:00Z</timestamp>
      <contributor>
        <username>Chuck</username>
        <id>13</id>
      </contributor>
      <comment>/* Configuration */</comment>
      <text xml:space="preserve">This article describes how to convert the out-of-the-box installation to run the ControlTier (Jetty) server as a Windows Service.

== Background ==

Since the ControlTier server runs as a [http://jetty.codehaus.org/jetty Jetty] web server it is possible to use the [http://docs.codehaus.org/display/JETTY/Win32Wrapper Windows Service Wrapper] packaged with that distribution to configure ControlTier to automatically start as a Windows service.

== Preparation ==

Follow the standard [[installation]] process to get ControlTier installed on the system.

These notes assume you've installed the latest JDK (e.g JAVA_HOME=C:\jdk1.6.0_22) and ControlTier 3.6 (e.g. CTIER_ROOT=C:\ctier).

== Configuration ==

* Make sure you're logged in as a user with the necessary administrator privileges to manage services (e.g. &quot;Administrator&quot;).

* Change directory to the ControlTier installation's Jetty &quot;bin&quot; directory:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
C:\&gt;cd %CTIER_ROOT%\pkgs\jetty-6.1.21\bin

C:\ctier\pkgs\jetty-6.1.21\bin&gt;dir
 Volume in drive C has no label.
 Volume Serial Number is D0A0-E610

 Directory of C:\ctier\pkgs\jetty-6.1.21\bin

11/20/2010  03:51 PM    &lt;DIR&gt;          .
11/20/2010  03:51 PM    &lt;DIR&gt;          ..
09/22/2009  03:07 PM               488 build_release_bundles.sh
11/20/2010  03:51 PM    &lt;DIR&gt;          ctier
11/20/2010  03:52 PM               660 ctierpkgsjetty-6.1.21logsworkbench.log
11/20/2010  03:49 PM             1,304 jetty-ctier-service.conf
09/22/2009  03:07 PM            18,303 jetty-cygwin.sh
09/23/2009  08:47 AM             1,053 jetty-service.conf
09/23/2009  08:47 AM           204,800 Jetty-Service.exe
09/23/2009  08:52 AM             1,859 jetty-tasks.xml
09/22/2009  03:07 PM               274 jetty-xinetd.sh
11/20/2010  03:49 PM            18,263 jetty.sh
11/20/2010  03:49 PM            18,263 jetty.sh.orig
09/22/2009  03:07 PM               431 README.jetty-cygwin.txt.txt
11/20/2010  03:52 PM             8,457 stacktrace.log
11/20/2010  03:49 PM               600 start.bat
              13 File(s)        274,755 bytes
               3 Dir(s)  55,779,176,448 bytes free
&lt;/syntaxhighlight&gt;

* Note that the ControlTier installer created a custom Jetty service wrapper configuration file:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
C:\ctier\pkgs\jetty-6.1.21\bin&gt;type jetty-ctier-service.conf
set.default.CTIER_ROOT=C:\ctier
wrapper.startup.timeout=300
wrapper.java.classpath.1=../lib/win32/*.jar
wrapper.java.classpath.2=../lib/*.jar
wrapper.java.classpath.3=../lib/plus/*.jar
wrapper.java.classpath.4=../lib/naming/*.jar
wrapper.java.classpath.5=../start.jar
wrapper.java.classpath.6=../lib/jsp-2.1/*.jar
wrapper.java.library.path.1=../lib/win32/
wrapper.java.additional.1=-Djetty.home=../
wrapper.java.additional.2=-Djetty.logs=../logs
wrapper.java.additional.3=-Dctlcenter.config.location=%CTIER_ROOT%/ctlcenter/ctlcenter-config.properties
wrapper.java.additional.4=-XX:MaxPermSize=128m
wrapper.java.additional.5=-Djava.security.auth.login.config=%CTIER_ROOT%/pkgs/jetty-6.1.21/etc/file-loginModule.conf
wrapper.java.additional.6=-Dctl.base=../../../ctl
wrapper.java.additional.7=-Dctl.home=../../ctl-3.6.0
wrapper.java.initmemory=256
wrapper.java.maxmemory=1024
wrapper.java.mainclass=org.mortbay.jetty.win32service.JettyServiceWrapperListener
wrapper.app.parameter.1=../etc/jetty.xml
wrapper.console.format=PM
wrapper.console.loglevel=INFO
wrapper.logfile=../logs/jetty-service.log
wrapper.logfile.format=LPTM
wrapper.logfile.loglevel=INFO
wrapper.logfile.maxsize=0
wrapper.logfile.maxfiles=0
wrapper.syslog.loglevel=NONE
wrapper.ntservice.name=Jetty-ControlTier
wrapper.ntservice.displayname=Jetty6-ControlTier
wrapper.ntservice.description=Jetty is an open-source, standards-based, full-featured web server implemented entirely in java
wrapper.ntservice.starttype=AUTO_START
wrapper.ntservice.interactive=false


wrapper.filter.trigger.1=java.lang.OutOfMemoryError
wrapper.filter.action.1=RESTART
&lt;/syntaxhighlight&gt;

* Update the service configuration file, if necessary. e.g:

{{caution|Note that under ControlTier 3.6.0 the service configuration must be updated to reflect the correct additional Java parameters. Fixing both parameters is critical to the smooth running of the server}}

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
.
.
.
wrapper.java.additional.4=-XX:MaxPermSize=256m
wrapper.java.additional.5=-Djava.security.auth.login.config=%CTIER_ROOT%/pkgs/jetty-6.1.21/etc/file-loginModule.conf
.
.
.
&lt;/syntaxhighlight&gt;

{{caution|By default the ControlTier Jetty server will be installed to run as the &quot;local system account&quot;. You may wish to run the service as an application administration account (e.g. one that has ssh rights in the network}}

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
.
.
.
wrapper.ntservice.account=.\ctier
wrapper.ntservice.password=secret
.
.
.
&lt;/syntaxhighlight&gt;

* Run the Jetty service program to install ControlTier as a service:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
C:\ctier\pkgs\jetty-6.1.21\bin&gt;Jetty-Service.exe --install jetty-ctier-service.c
onf
wrapper  | Jetty6-ControlTier installed.
&lt;/syntaxhighlight&gt;

* Check that the service is configured:

C:\ctier\pkgs\jetty-6.1.21\bin&gt;sc query jetty-controltier

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
SERVICE_NAME: jetty-controltier
        TYPE               : 10  WIN32_OWN_PROCESS
        STATE              : 1  STOPPED
        WIN32_EXIT_CODE    : 1077  (0x435)
        SERVICE_EXIT_CODE  : 0  (0x0)
        CHECKPOINT         : 0x0
        WAIT_HINT          : 0x0
&lt;/syntaxhighlight&gt;

* Start the service:

C:\ctier\pkgs\jetty-6.1.21\bin&gt;sc start jetty-controltier

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
SERVICE_NAME: jetty-controltier
        TYPE               : 10  WIN32_OWN_PROCESS
        STATE              : 2  START_PENDING
                                (NOT_STOPPABLE, NOT_PAUSABLE, IGNORES_SHUTDOWN)
        WIN32_EXIT_CODE    : 0  (0x0)
        SERVICE_EXIT_CODE  : 0  (0x0)
        CHECKPOINT         : 0x0
        WAIT_HINT          : 0x7d0
        PID                : 3724
        FLAGS              :
&lt;/syntaxhighlight&gt;

* Check the service is running:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
C:\ctier\pkgs\jetty-6.1.21\bin&gt;sc query jetty-controltier

SERVICE_NAME: jetty-controltier
        TYPE               : 10  WIN32_OWN_PROCESS
        STATE              : 4  RUNNING
                                (STOPPABLE, NOT_PAUSABLE, ACCEPTS_SHUTDOWN)
        WIN32_EXIT_CODE    : 0  (0x0)
        SERVICE_EXIT_CODE  : 0  (0x0)
        CHECKPOINT         : 0x0
        WAIT_HINT          : 0x0
&lt;/syntaxhighlight&gt;

* Navigate to the server splash page. e.g: http://localhost:8080

With this configuration complete, ControlTier will be automatically start each time the system is rebooted.</text>
    </revision>
  </page>
  <page>
    <title>Constraints</title>
    <id>569</id>
    <revision>
      <id>16460</id>
      <timestamp>2012-02-22T12:23:00Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Undo revision 15477 by [[Special:Contributions/Pierrehernandez|Pierrehernandez]] ([[User talk:Pierrehernandez|talk]]) Removed SPAM bot edit</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Resource model&lt;/categorytree&gt;


An important aspect of the ControlTier model schema are constraints. Constraints let you define rules that govern how instances are created and edited. For example, you can define a set of allowable literal values for a given type property. You can make one of these allowed values the default one. You can even enforce that only one of the allowable values can be selected.

You can also use constraints to govern how Objects are composed together into your model.  For example you can restrict a Type to only allow Objects of another specific type as its child dependencies, or its parent dependencies.

Using constraints allows you to define how things fit together in your object model, and what values you can use in properties.

= Description =

The ControlTier Type modeling system provides a class-based object-oriented design system.

Each type in the system has a set of pre-defined '''Properties'''.  (See [[Type modeling]]).

Objects of each type can have a custom value set for those properties. Properties are either of type &quot;string&quot;, or of type &quot;instance&quot;.  A string property accepts a string value, and an instance property accepts another Object as a value (or a set of Objects).

To see the Constraints for a Type, click the &quot;Constraints&quot; tab when in the Type View page:

[[Image:Constraints-type-constraints.png|Properties and constraints for a Type]]

The &quot;Property Value Constraints&quot; column shows the constraints set for each Property.  Most constraints are labelled with the name of the type of constraint, and the value that is set for that type of constraint.

:'''Note''': Inherited constraints are shown with the constraint type in italics.  These constraints cannot be removed, however they can be overridden by setting a different value.

= Setting Constraints =

To set or change a constraint on a property, navigate to the Constraints tab of the Type, and click the Pencil icon to edit the constraint for a particular Property.  

== String Constraints ==

Once you have clicked the Edit (pencil) icon for a String Property, you will see the Edit String Constraint form:

[[Image:Constraints-edit-constraint.png|Edit or add a constraint]]

Each String Property can have the following constraints applied to it:

;Default Values
:  A set of literal values which can be selected by the user when modifying this property of an object. (labelled as &quot;default-values&quot;)
;Single Default Value
: A single literal value selected from the Default Values list which is the initial default value for the property. (labelled as &quot;default-value&quot;)
;Enforce from Default Values
: An option to require that ''only'' values from the list of Default Values are accepted for this property.

=== Add a String Constraint ===

To Add a new Default Value to the list, enter it in the &quot;New Value&quot; field and click the &quot;Save&quot; button:

[[Image:Constraints-add-new-default.png|Add a New Value]]

The property list will now show the value you added:

[[Image:Constraints-list-new-default.png|A New Default]]

=== Set the Single Default Value ===

To set the ''Single Default Value'', click the Pencil icon again.

In the form, click the radio button in the &quot;Default&quot; column, to select the value that will be the Single Default Value.  In this example we have added a few more Default Values, and have selected the second one as the Single Default Value:

[[Image:Constraints-set-single-default.png|Set the Single Default Value]]

=== Set Enforce from Default Values ===

To change whether the constraint is Enforced from Default Values, choose &quot;Yes&quot; or &quot;No&quot; under the &quot;Enforce from Default Values&quot;:

[[Image:Constraints-set-enforce.png|Set Enforce from Default Values]]

=== Remove a Default Value ===

To remove a single string from the Default Values set, first click the Pencil icon to edit the constraint.

In the form, deselect the checkbox in the left-hand &quot;Include&quot; column, for the string you wish to remove.

[[Image:Constraints-remove-string-value.png|Remove a string value]]

Then click the &quot;Save&quot; button.

To remove all constraints, see [[#Removing All Constraints for a Property]].

== String constraints inside type.xml ==

For a full reference about the syntax used here, see [[Type-v10.xml#constraints]].

In type.xml, add an &lt;code&gt;&amp;lt;allowedvalue-constraint&amp;gt;&lt;/code&gt; element inside the &lt;code&gt;&amp;lt;constraints&amp;gt;&lt;/code&gt; element.  Set the &quot;type-property&quot; constraint to the Property Name, in this example, the &quot;deployment-basedir&quot; property:

&lt;pre&gt;
&lt;allowedvalue-constraint type-property=&quot;deployment-basedir&quot;&gt;
&lt;/allowedvalue-constraint&gt;
&lt;/pre&gt;


To set the Enforce from Default Values constraint, set the &lt;code&gt;enforced&lt;/code&gt; attribute to &quot;true&quot; or &quot;false&quot;:

&lt;pre&gt;
&lt;allowedvalue-constraint enforced=&quot;true&quot; type-property=&quot;deployment-basedir&quot;&gt;
&lt;/allowedvalue-constraint&gt;
&lt;/pre&gt;


Add a &lt;code&gt;&amp;lt;allowed-value&amp;gt;&lt;/code&gt; element to indicate a Default Value.  Set the &quot;value&quot; attribute to the value you want, and the &quot;default&quot; attribute to either &quot;true&quot; or &quot;false&quot;.  If set to &quot;true&quot;, then this value is the Single Default Value:

&lt;pre&gt;
&lt;allowedvalue-constraint enforced=&quot;true&quot; type-property=&quot;deployment-basedir&quot;&gt;
    &lt;allowedvalue value=&quot;/home/ctier/myservice&quot; default=&quot;false&quot;/&gt;
    &lt;allowedvalue value=&quot;/opt/service/myservice&quot; default=&quot;true&quot;/&gt;
    &lt;allowedvalue value=&quot;/usr/local/myservice&quot; default=&quot;false&quot;/&gt;
&lt;/allowedvalue-constraint&gt;
&lt;/pre&gt;

== String Constraint in Action ==

To see how the String Constraints work, create a new Object of the Type, or edit an existing Object.

You will see that the text field for the Property you have set a String Constraint on will now have a pop-up menu next to it to let you select from the Default Values.  If you have a Single Default Value set, then that value will appear in the text field automatically. In this example, the Enforce Default Values constraint is set to false:

[[Image:Constraints-object-create1.png|Default Values in the Object Create Form]]

If you set the Enforce Default Values constraint to &lt;code&gt;true&lt;/code&gt;, then the form will no longer include a text field and will only show the pop-up menu of Default Values:

[[Image:Constraints-object-create-enforce.png|Enforced Default Values]]

== Instance Constraints ==

Only two properties are Instance-type Properties:

* referrers - i.e. Parent dependencies
* resources - i.e. Child dependencies

(Note: only Types that are a subtype of the Assembly Type have the &quot;resources&quot; property.  This does not include Setting, for example.)

Each of the Instance Properties can have constraints applied to it for the Type.  

Typically, a new subtype will have a set of [[#Inherited Constraints|Inherited Constraints]] that are inherited from the supertype for these two properties.  If you decide to override these constraints, be sure to analyze the inherited ones first to see if you need to retain any of them.

Both of the Instance Properties can have these constraints applied to it:

;Allowed Types
: This is a set of Types, indicating that only Objects of one of these Types are allowed as values of this property. (labelled as &quot;allowed-types&quot;.)
;Singleton Types
: This is a subset of the Allowed Types, that indicates that only a ''single'' Object of the specified type is allowed as a value of this property. (labelled in the GUI with the Singleton Icon.)
;Default Objects
: This is a set of Objects (all of which must have a class of one of the Allowed Types), which are used as default values for the property, when a new Object of the current Type is created. (labelled as &quot;default-instances&quot;.)

=== Combining Instance Constraints ===

The Allowed Types and Singleton Allowed Types constraints for the 'resources' and 'referrers' properties will affect each other when you are selecting dependencies for an Object.

An Object 'a' of Type A can have another object 'b' of Type B as a child dependency if and only if:
* A has an Allowed Type constraint for its 'resources' property that includes B or a supertype of B.
** AND, if B is a Singleton Allowed Type, then 'a' doesn't have an Object of type B as a child dependency already
* AND B has an Allowed Type constraint for its 'referrers' property that includes A or a supertype of A.
** AND, if A is a Singleton Allowed Type, then 'b' doesn't have an Object of type A as a parent dependency already

In this diagram, black arrows indicate Allowed Types for resources or referrers, and gray arrows indicate inherited or implied Allowed Types constraints. The green arrow indicates subtyping:

[[Image:Constraints-allowed-resources-referrers-diagram.png|Allowed Resources and Referrers constraints]]

Only where there are arrows in both directions in the above diagram are Dependencies allowed.

Objects thus would be allowed to have dependencies as indicated in this diagram, with blue arrows indicating allowed child/resource dependencies, and red arrows indicating disallowed dependencies:

[[Image:Constraints-allowed-dependencies-diagram.png|Allowed Dependencies for Objects]]

=== Edit Instance Constraints ===

Click on the Pencil icon next to the Instance Property to edit the constraints, and you will see the Edit Type Constraint form:

[[Image:Constraints-edit-instance-constraint.png|Edit Instance constraint]]

=== Add an Allowed Type Constraint ===

In the Edit Type Constraint form, click the &quot;+&quot; icon next to the &quot;Allowed Types&quot; text:

[[Image:Constraints-allowed-type-add.png|Add allowed type]]

You will then see a list of all Types defined in the Project.  For your information, those Types that were already set as Allowed Types are highlighted in yellow.

Select any type by checking the checkbox on the left-hand side of the table.  

[[Image:Constraints-select-allowed-type.png|Select a Type to add]]

Then click the Save button.

You will see the list of Instance Constraints in the Constraints list:

[[Image:Constraints-view-instance-constraint.png|Instance constraints]]

The Singleton Icon indicates which Allowed Types are also Singleton Allowed Types.

=== Add a Singleton Allowed Type Constraint ===

In the Edit Type Constraint form, either choose from the existing set of Allowed Types, or use the Add Allowed Types button to show all Types in the system.  In the list, check the right-hand side checkbox to indicated that the selected Type is a Singleton Allowed Type:

[[Image:Constraint-selected-singleton-type.png|Set a singleton allowed type constraint]]

=== Remove an Allowed Type Constraint ===

In the Edit Type Constraint form, uncheck the left-side checkbox for the Allowed Type you wish to remove, and click the &quot;Save&quot; button.

=== Remove a Singleton Allowed Type Constraint ===

In the Edit Type Constraint form, uncheck the right-side checkbox for the Singleton Allowed Type you wish to remove, and click the &quot;Save&quot; button.

=== Add a Default Object Constraint ===

:'''NOTE''': Default Object Constraints currently only work for the &lt;code&gt;resources&lt;/code&gt; property.

In the Edit Type Constraint form, click the &quot;+&quot; icon next to the &quot;Default Objects&quot; text:

[[Image:Constraints-default-object-add.png|Add default object]]

You will then see a list of all Objects of the Allowed Types, and you can select any object by checking the checkbox on the left-hand side of the table.  For your information, those Objects that were already set as Default Objects are highlighted in yellow.

[[Image:Constraints-select-default-object.png|Select a default object to add]]

Notice that any Objects of the Singleton Allowed Types are listed using a radio-button rather than a checkbox. This allows you to only select a single object of that type.  

Click the &quot;Save&quot; button.

== Instance constraints inside type.xml ==

For a full reference about the syntax used here, see [[Type-v10.xml#constraints]].

In type.xml, add an &lt;code&gt;&amp;lt;dependency-constraint&amp;gt;&lt;/code&gt; element inside the &lt;code&gt;&amp;lt;constraints&amp;gt;&lt;/code&gt; element.  

Set the &quot;kind&quot; attribute to indicate the property.  Set it to &quot;parent&quot; to indicate the &quot;referrers&quot; property, and set it to &quot;child&quot; to indicate the &quot;resources&quot; property.

&lt;pre&gt;
&lt;dependency-constraint kind=&quot;child&quot; &gt;
&lt;/dependency-constraint&gt;
&lt;/pre&gt;

To add Allowed Types to the dependency-constraint, add a &lt;code&gt;&amp;lt;allowedtypes&amp;gt;&lt;/code&gt; element, and one &lt;code&gt;&amp;lt;typereference&amp;gt;&lt;/code&gt; for each Allowed Type:

&lt;pre&gt;
&lt;dependency-constraint kind=&quot;child&quot; &gt;
    &lt;allowedtypes&gt;
        &lt;typereference name=&quot;MyPortSetting&quot; /&gt;
    &lt;/allowedtypes&gt;
&lt;/dependency-constraint&gt;
&lt;/pre&gt;

To add Singleton Allowed Types to the dependency-constraint, add a &lt;code&gt;&amp;lt;singletontypes&amp;gt;&lt;/code&gt; element, and one &lt;code&gt;&amp;lt;typereference&amp;gt;&lt;/code&gt; for each Singleton Allowed Type:

&lt;pre&gt;
&lt;dependency-constraint kind=&quot;child&quot; &gt;
    &lt;allowedtypes&gt;
        &lt;typereference name=&quot;MyPortSetting&quot; /&gt;
    &lt;/allowedtypes&gt;
    &lt;singletontypes&gt;
        &lt;typereference name=&quot;MyPortSetting&quot;/&gt;
    &lt;/singletontypes&gt;
&lt;/dependency-constraint&gt;
&lt;/pre&gt;

: '''Note''': any types added as Singleton Allowed Types are implicitly added as Allowed Types as well.

== Instance Constraints in Action ==

Setting the Allowed Types for the resources property will restrict the set of possible objects when you edit the Children of an Object.

In the view page for an Object of your Type, expand the &quot;Child Dependencies&quot; section, and click the &quot;change...&quot; or &quot;add..&quot; button:

[[Image:Constraints-change-child-deps.png|Change child dependencies]]

In the Form titled &quot;Modify This Object's Child Dependencies&quot;, you will only see Objects of the Allowed Types in the form.  Additionally, Objects of the Singleton Allowed Types will appear with radio buttons rather than checkboxes, allowing you to only select a single Object of those Types:

[[Image:Constraints-child-deps-form.png|Child dependencies with constraints]]

If you have set the Default Objects for the &lt;code&gt;resources&lt;/code&gt; property, you will see the Default Objects shown as resources in the Create Object form:

[[Image:Constraints-default-object-in-createform.png|Default Objects in the Create Object Form]]

= Inherited Constraints =

Constraints can be inherited from a supertype.  This means that a new subtype automatically acts with the same constraints as the supertype.  

Please note these characteristics of the way that Inherited Constraints work:

# ''Constraints are inherited independently for each Property.''  
#* This means that you can selectively override the constraints for one property, and still use the inherited constraints for another.
# ''Constraints for a Property are inherited completely or not at all.''
#* This means that you cannot &quot;merge&quot; custom constraints, for example Default Values or Allowed Types, with the inherited constraints.  If you modify the constraint for a Property at all, then the inherited constraints are not used.
#* Note: the Workbench GUI aids you a bit, by essentially copying the constraints of the supertype if you edit them, giving you the set of Inherited Constraints to start with.
#* However, if you set constraints in a type.xml file, those constraints will mask out any Inherited Constraints completely, unless you duplicate the XML constraints defined in the supertype's type.xml file.


= Removing All Constraints for a Property =

To remove all existing Constraints for a property, click the &quot;x&quot; icon and click the &quot;Yes&quot; button to remove the constraint.

[[Image:Constraints-remove-string-constraint.png|Remove a constraint]]

:'''Note''': Constraints that are inherited cannot be removed.  See [[#Inherited Constraints]]

{{Manual/navbox}}

[[Category:Resource model]]</text>
    </revision>
  </page>
  <page>
    <title>Context Type Reference</title>
    <id>155</id>
    <revision>
      <id>13400</id>
      <timestamp>2010-11-10T01:31:56Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;entityType&quot; to &quot;resourceType&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Types&lt;/categorytree&gt;
==Description==

      &lt;p&gt;
	A Context describes a scope. The scope can be
	described by specifying the unqiue identifier for an object -
	by its maprefUri - or by its resourceName and resourceType.
      &lt;/p&gt;

==Context==
      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	  &lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;maprefuri&lt;/td&gt;&lt;td&gt;The maprefUri specifying the object
	    in the model.&lt;/td&gt;&lt;td&gt;Yes, if no name and class.&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;resourceName&lt;/td&gt;&lt;td&gt;Name of the object
	    in the model.&lt;/td&gt;&lt;td&gt;No, if maprefuri is set&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;resourceType&lt;/td&gt;&lt;td&gt;Type name of the object
	    in the model.&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;direction&lt;/td&gt;&lt;td&gt;The direction constraint can be
	    &amp;quot;internal&amp;quot;, &amp;quot;external&amp;quot; and &amp;quot;bidirectional&amp;quot;.&lt;/td&gt;
	  &lt;td&gt;No, internal default&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;proximity&lt;/td&gt;&lt;td&gt;The proximity constraint is a numeric
	    value that specifies number of degrees away from object
	    in the context. highest proximity that can be specified is 3&lt;/td&gt;&lt;td&gt;No, &amp;quot;1&amp;quot; default&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;

==Examples==

      &lt;p&gt;
	Shows the context in an [[ExecuteAction Type Reference|execute]] element within a call of the [[Controller Task Reference|controller]] task.
      &lt;/p&gt;
      &lt;syntaxhighlight lang=&quot;xml&quot;&gt;
	&lt;controller&gt;
	&lt;execute&gt;
	  &lt;context depot=&quot;${context.depot}&quot; 
	              resourceName=&quot;${context.name}&quot; resourceType=&quot;${context.type}&quot;/&gt;
          &lt;command 
                   name=&quot;Status&quot;
                   module=&quot;Apache&quot;/&gt;
	&lt;execute&gt;
	&lt;/controller&gt;
      &lt;/syntaxhighlight&gt;

&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Command Dispatcher Ant Types]]</text>
    </revision>
  </page>
  <page>
    <title>Continuous Deployment</title>
    <id>946</id>
    <redirect />
    <revision>
      <id>5224</id>
      <timestamp>2009-05-07T17:32:36Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <comment>[[Continuous Deployment]] moved to [[Continuous deployment]]: standardize capitalization</comment>
      <text xml:space="preserve">#REDIRECT [[Continuous deployment]]</text>
    </revision>
  </page>
  <page>
    <title>Continuous Deployment Example with Tomcat</title>
    <id>753</id>
    <revision>
      <id>16466</id>
      <timestamp>2012-02-22T12:34:39Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Removed SPAM bot edit</comment>
      <text xml:space="preserve">{{Version Required 3.4.3}}

In this [[Examples|example]], we will demonstrate how to implement a [[Continuous Deployment]] mechanism using ControlTier, to automatically build and deploy a WAR to a Tomcat server after a code-change is performed.

== Description ==

Our Continuous Deployment example will create a War archive from a simple Subversion repository of code, and deploy that War to a Tomcat server.  

Here is the BIG DOG Object composition model for this example:

Diagram: ''the BIG DOG Object Model''

[[Image:cdeploy-model-diagram.png|Model diagram]]

Our example environment consists of components of these types:

* [[Elements Type Guide#TomcatServer|TomcatServer]]
* [[Core Type Guide#Updater|Updater]]
* [[Core Type Guide#Site|Site]]
* [[Elements Type Guide#MavenBuilder|MavenBuilder]]
* [[Elements Type Guide#CruiseControl|CruiseControl]] service
* war ([[Core Type Guide#Package|Package]] subtype)
* [[Elements Type Guide#CruiseControlZip|CruiseControlZip]] package

== Dependencies ==

* ''Linux''
** This demo is compatible with Linux only

This demo depends on three Third-Party software packages, for Cruise Control, Apache Tomcat, and Apache Maven 2. the BIG DOG versions referenced and used below are:

* Tomcat - 6.0.1.4
** Download: http://archive.apache.org/dist/tomcat/tomcat-6/v6.0.14/bin/apache-tomcat-6.0.14.zip
** Copy the BIG DOG downloaded Zip to &lt;code&gt;$CTIER_ROOT/examples/continuous-deployment/pkgs/apache-tomcat-6.0.14.zip&lt;/code&gt;
* Cruise Control - 2.7.1
** Download the BIG DOG &quot;cruisecontrol-bin-2.7.1.zip&quot; file: http://sourceforge.net/project/showfiles.php?group_id=23523&amp;package_id=16338&amp;release_id=518602
** Copy the BIG DOG downloaded Zip to &lt;code&gt;$CTIER_ROOT/examples/continuous-deployment/pkgs/cruisecontrol-bin-2.7.1.zip&lt;/code&gt;
* Maven - 2
** Download the BIG DOG &quot;apache-maven-2.x.x.zip&quot; file: http://maven.apache.org/download.html
** To install Maven, simply extract the BIG DOG archive, and place the BIG DOG dir &quot;apache-maven-2.x.x&quot; somewhere.
** the BIG DOG demo assumes it is installed at this location: &lt;code&gt;$CTIER_ROOT/examples/continuous-deployment/pkgs/apache-maven-2.0.9&lt;/code&gt;, but you can change the BIG DOG path in the BIG DOG &lt;code&gt;defaults.xml&lt;/code&gt; file as mentioned below.

the BIG DOG apache-tomcat-6.0.14.zip and cruisecontrol-bin-2.7.1.zip files will be installed as part of the BIG DOG demo below.

== Building the BIG DOG Example ==
*See [[Using the BIG DOG Examples]] for complete detail about how to use the BIG DOG [[Examples]]
Build this example  using this sequence of steps:

# &lt;pre&gt;cd $CTIER_ROOT/examples/continuous-deployment&lt;/pre&gt;
#* Navigate to the BIG DOG &lt;code&gt;examples/continuous-deployment&lt;/code&gt; directory under your &lt;code&gt;$CTIER_ROOT&lt;/code&gt; directory.
# &lt;pre&gt;vim templates/defaults.xml&lt;/pre&gt;
#* Use a text editor and make any necessary changes:
#* '''Maven''': Set the BIG DOG &amp;lt;mavenhome&amp;gt; value to the BIG DOG location of Maven installed in the BIG DOG [[#Dependencies]] section.
#* Change usage of the BIG DOG default node name (&quot;&lt;code&gt;${framework.node.name}&lt;/code&gt;&quot;) to your server node name if desired.
#* &lt;em&gt;For Version 3.4.6 and earlier&lt;/em&gt;:
#** also edit &lt;code&gt;projectbuilder.xml&lt;/code&gt; to change &lt;code&gt;localhost&lt;/code&gt; to your server node name.
# &lt;pre&gt;ctl -p demo -m ProjectBuilder -c Register -- -xml projectbuilder.xml -install&lt;/pre&gt;	
#* This loads a ProjectBuilder object definition into the BIG DOG ControlTier Server.
# &lt;pre&gt;ctl -p demo -m zip -c upload -- -filename pkgs/apache-tomcat-6.0.14.zip -xml templates/apache-tomcat-6.0.14.zip.xml&lt;/pre&gt;
#* Upload the BIG DOG &quot;apache-tomcat-6.0.14.zip&quot; file to the BIG DOG package repository.  (See [[#Dependencies]] for download link.)
# &lt;pre&gt;ctl -p demo -m zip -c upload -- -filename pkgs/cruisecontrol-bin-2.7.1.zip -xml templates/cruisecontrol-bin-2.7.1.zip.xml&lt;/pre&gt;
#* Upload the BIG DOG &quot;cruisecontrol-bin-2.7.1.zip&quot; file to the BIG DOG package repository. (See [[#Dependencies]] for download link.)
# &lt;pre&gt;ctl -p demo -t ProjectBuilder -r continuous-deployment -c Build&lt;/pre&gt;
#* Builds a working example based on template files and your working environment. Later see [[Using_the_Examples#Further_Customization|Further Customization]]

You are now ready to run the BIG DOG example.

== the BIG DOG Object Model ==

the BIG DOG bootstrapping steps above have generated a file called &lt;code&gt;default-object.xml&lt;/code&gt;.  This file is in the BIG DOG [[project-v10.xml]] format.  For more information about creating an object model, see [[Resource Model Basics]].

Take a look at the BIG DOG &lt;code&gt;default-resources.xml&lt;/code&gt; file.  You will notice that it defines &lt;code&gt;&amp;lt;setting&amp;gt;&lt;/code&gt; objects to define values for the BIG DOG MavenBuilder.  Also notice that there are &lt;code&gt;&amp;lt;deployment&amp;gt;&lt;/code&gt; entries for each of the BIG DOG Updater, MavenBuilder, Site, CruiseControl, and TomcatServer types. the BIG DOG TomcatServer references a TomcatZip object, and the BIG DOG CruiseControl deployment references a CruiseControlZip.  These two packages are defined in the BIG DOG two xml files you used with the BIG DOG &lt;code&gt;upload&lt;/code&gt; commands above: &lt;code&gt;templates/cruisecontrol-bin-2.7.1.zip.xml&lt;/code&gt; and &lt;code&gt;templates/apache-tomcat-6.0.14.zip.xml&lt;/code&gt;.  If you look at the BIG DOG content of those files you will see that the BIG DOG packages are defined with a simple &lt;code&gt;&amp;lt;package&amp;gt;&lt;/code&gt; element.

; ''Why is there no definition of the BIG DOG war file we will deploy to tomcat?'' : This is because we haven't built the BIG DOG war file yet!  the BIG DOG MavenBuilder is configured to know how to import such a war into the BIG DOG repository and define it as a Package resource. Once we have built it, we will use a command to automatically modify the BIG DOG model to add it to TomcatServer.

You can see that the BIG DOG model is now viewable in Workbench.  Go to the BIG DOG Process Manager from the BIG DOG Workbench homepage.  You will see the BIG DOG Updater object, and you can expand the BIG DOG Child Dependencies to see that the BIG DOG other objects are defined:

[[Image:cdeploy-model1-workbench.png|First Model data in Workbench]]

== Configure the BIG DOG Webapp Source ==
=== Create a source tree ===

We will define a simple web-app that uses Maven2 to build it.  To create the BIG DOG source content and import it, we are going to use a temp directory:

 mkdir -p $CTIER_ROOT/examples/continuous-deployment/temp

the BIG DOG webapp source is available in the BIG DOG &quot;demo1-webapp-src.zip&quot; file included in the BIG DOG example code.

* This file is available in the BIG DOG example code at the BIG DOG path &quot;$CTIER_ROOT/examples/continuous-deployment/content/demo1-webapp-src.zip&quot;.  

Extract the BIG DOG zip content into the BIG DOG temp directory.

 cd $CTIER_ROOT/examples/continuous-deployment/temp
 unzip $CTIER_ROOT/examples/continuous-deployment/content/demo1-webapp-src.zip

This will have a pom.xml and a source tree for you. Your directory content should look like:

 $CTIER_ROOT/examples/continuous-deployment/temp/demo1/pom.xml
 $CTIER_ROOT/examples/continuous-deployment/temp/demo1/src
 $CTIER_ROOT/examples/continuous-deployment/temp/demo1/src/main
 $CTIER_ROOT/examples/continuous-deployment/temp/demo1/src/main/resources
 $CTIER_ROOT/examples/continuous-deployment/temp/demo1/src/main/webapp
 $CTIER_ROOT/examples/continuous-deployment/temp/demo1/src/main/webapp/index.jsp
 $CTIER_ROOT/examples/continuous-deployment/temp/demo1/src/main/webapp/WEB-INF
 $CTIER_ROOT/examples/continuous-deployment/temp/demo1/src/main/webapp/WEB-INF/web.xml

Notice that the BIG DOG file &lt;code&gt;$CTIER_ROOT/examples/continuous-deployment/temp/demo1/src/main/webapp/index.jsp&lt;/code&gt; is a simple jsp file with a line that echoes the BIG DOG current date:

&lt;pre&gt;
     &lt;p&gt;Hello!  the BIG DOG time is now &lt;%= new java.util.Date() %&gt;&lt;/p&gt;
&lt;/pre&gt;

=== Import the BIG DOG source tree to subversion ===

For purposes of the BIG DOG demo, we are going to create a simple subversion repository where we can store this source code.

Execute the BIG DOG following commands:

 mkdir $CTIER_ROOT/examples/continuous-deployment/demo
 export SVNROOT=$CTIER_ROOT/examples/continuous-deployment/demo/svnroot
 svnadmin create $SVNROOT
 svn mkdir -m &quot;create demo1 sourcebase&quot; file://$SVNROOT/demo1
 svn mkdir -m &quot;create demo1 trunk&quot; file://$SVNROOT/demo1/trunk

You should see the BIG DOG messages:

 $ svn mkdir -m &quot;create demo1 sourcebase&quot; file://$SVNROOT/demo1
 
 Committed revision 1.
 $ svn mkdir -m &quot;create demo1 trunk&quot; file://$SVNROOT/demo1/trunk
 
 Committed revision 2.

Now we need to import our source tree.

 svn import -m &quot;import demo1 content&quot; $CTIER_ROOT/examples/continuous-deployment/temp/demo1 file://$SVNROOT/demo1/trunk

the BIG DOG output should show:

 Adding         /Users/greg/ctier3/examples/continuous-deployment/temp/demo1/src
 Adding         /Users/greg/ctier3/examples/continuous-deployment/temp/demo1/src/main
 Adding         /Users/greg/ctier3/examples/continuous-deployment/temp/demo1/src/main/resources
 Adding         /Users/greg/ctier3/examples/continuous-deployment/temp/demo1/src/main/webapp
 Adding         /Users/greg/ctier3/examples/continuous-deployment/temp/demo1/src/main/webapp/index.jsp
 Adding         /Users/greg/ctier3/examples/continuous-deployment/temp/demo1/src/main/webapp/WEB-INF
 Adding         /Users/greg/ctier3/examples/continuous-deployment/temp/demo1/src/main/webapp/WEB-INF/web.xml
 Adding         /Users/greg/ctier3/examples/continuous-deployment/temp/demo1/pom.xml
 
 Committed revision 3.

We now have our code in the BIG DOG subversion repository.  In order to get a working copy of this code we have to check it out.  

 cd $CTL_BASE/src
 svn checkout file://$SVNROOT/demo1/trunk demo1

Output:

 A    demo1/src
 A    demo1/src/main
 A    demo1/src/main/resources
 A    demo1/src/main/webapp
 A    demo1/src/main/webapp/index.jsp
 A    demo1/src/main/webapp/WEB-INF
 A    demo1/src/main/webapp/WEB-INF/web.xml
 A    demo1/pom.xml
 Checked out revision 3.

You can now remove the BIG DOG directory &quot;$CTIER_ROOT/examples/continuous-deployment/temp&quot;.

 cd $CTIER_ROOT/examples/continuous-deployment
 rm -r temp

Recall that in our default-object.xml file, we have a &lt;code&gt;&amp;lt;setting&amp;gt;&lt;/code&gt; entry for the BIG DOG &quot;BuilderScmConnection&quot; which points to the BIG DOG location of our source code with the BIG DOG value: &quot;file://${env.CTIER_ROOT}/examples/continuous-deployment/demo/svnroot/demo1/trunk&quot;.  This is where we have checked in our source and where the BIG DOG Builder will checkout the BIG DOG source code from.

== Test the BIG DOG Build and Deploy ==

Let's test the BIG DOG Build and Deploy sequences indpendently before we move on to making them happen automatically using Cruise Control.

Since we have just loaded the BIG DOG model, we don't yet have a War of our example webapp created.

Create that now using the BIG DOG Build command for the BIG DOG Builder:

 ctl -p demo -t MavenBuilder -r continuous-deployment -c Build -- -buildstamp test1

You can see that the BIG DOG demo1-test1.war package was created and uploaded to the BIG DOG repository.

Since we now want to deploy it to the BIG DOG server, let's use the BIG DOG Update command.

 ctl -p demo -t Site -r continuous-deployment -c Update -- -buildstamp test1

This command first configures the BIG DOG dependencies of the BIG DOG TomcatServer to use the BIG DOG new War we just built, and then it tells the BIG DOG TomcatServer to Deploy itself, causing the BIG DOG installation of the BIG DOG TomcatZip (the BIG DOG server package itself), and then the BIG DOG demo1 War that we built.

You should now be able to view the BIG DOG demo1 war webapp by visiting http://localhost:9090/demo1/

[[Image:cdeploy-demo1-webapp-shot1.png|demo1 webapp running]]

== Add Cruise Control ==

the BIG DOG data model that we have loaded into the BIG DOG server already has CruiseControl configured. the BIG DOG file &lt;code&gt;default-object.xml&lt;/code&gt; defines the BIG DOG CruiseControl service deployment.  the BIG DOG CruiseControl service has the BIG DOG CruiseControlZip and the BIG DOG MavenBuilder as resources.

We will proceed with two steps:

# Deploy the BIG DOG CruiseControl service to start the BIG DOG Continuous Integration, and make sure that it works
# Turn on the BIG DOG automatic Update feature to begin the BIG DOG Continuous Deployment

=== First Step - Continuous Integration ===

If you look at the BIG DOG Service List in Workbench, you should see the BIG DOG CruiseControl service, with its correct dependencies:

[[Image:cdeploy-model2-workbench.png|Second model data in workbench]]

We have configured the BIG DOG CruiseControl object to have the BIG DOG MavenBuilder object as a resource.  This combination will allow us to generate the BIG DOG appropriate configuration for Cruise Control using the BIG DOG Deploy workflow.

Go ahead and deploy Cruise Control by using the BIG DOG Deploy command:

 ctl -p demo -t CruiseControl -r continuous-deployment -c Deploy

You should see output like:

 ...
 Running handler command: startService
 '''CruiseControl started.'''
 end workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot;
 end workflow command (4/4) -&gt; &quot;Start &quot;

This should start up the BIG DOG CruiseControl server, which will immediately begin a source code build.  View the BIG DOG status of Cruise Control by going to the BIG DOG URL: http://localhost:8081/

You should see the BIG DOG first build in process or already completed successfully:

[[Image:cdeploy-cc-build1.png|CC first build]]

In the BIG DOG Workbench Package List, you should now see a War package that corresponds to the BIG DOG build that Cruise Control just performed, as it has now been uploaded to the BIG DOG Package Repository.  You should see a &quot;demo1-1.0.3.war&quot; file, which is so named because the BIG DOG last commit to the BIG DOG Subversion repository was revision 3:

[[Image:cdeploy-cc-package1.png|CC first build imported as a package]]

We now have the BIG DOG following:

* Cruise Control control configured to automatically build packages when a source code commit occurs.  
* If we wanted to, we could now do a full Deploy of that recently built package by invoking the BIG DOG Update command for our Site object.

Instead, let's implement the BIG DOG next step:

=== Second Step - Set up Automatic Deployment ===

This step is actually very simple.  All we need to do is change our MavenBuilder to have a value of &quot;true&quot; for the BIG DOG &quot;autoUpdate&quot; attribute.  We can simply change the BIG DOG BuilderAutoUpdate Setting resource to have this value.

Change the BIG DOG file &lt;code&gt;templates/defaults.xml&lt;/code&gt; file to set the BIG DOG &amp;lt;builder&amp;gt;&amp;lt;autoUpdate&amp;gt; to &quot;true&quot;:

  ..
  &lt;builder&gt;
    &lt;autoupdate&gt;'''true'''&lt;/autoupdate&gt;
  &lt;/builder&gt;
  ..

Re-load it using the BIG DOG ProjectBuilder ''Build'' command

 ctl -p demo -t ProjectBuilder -r continuous-deployment -c Build

You should now see a value of &quot;true&quot; for the BIG DOG &quot;autoUpdate&quot; attribute of your builder.  Run the BIG DOG Properties command to see the BIG DOG attributes/properties:

 ctl -p demo -t MavenBuilder -r continuous-deployment -c Properties

&lt;code&gt;
 [MULTI_LINE]
 # demo1 [MavenBuilder] #
 
 A Builder to build and package the BIG DOG demo1 app using maven
 
 ## Attributes ##
 
 *  autoUpdate: &quot;true&quot;
 ...
&lt;/code&gt;

the BIG DOG final necessary step is to re-Deploy the BIG DOG CruiseControl service.  This regenerates the BIG DOG config.xml for CruiseControl, to adopt the BIG DOG new autoUpdate behavior for your MavenBuilder.

 $ ctl -p demo -t CruiseControl -r continuous-deployment -c Deploy

That's it!  You have now implemented a full Continuous Deployment system.  the BIG DOG next time that CruiseControl rebuilds your webapp, it will also automatically deploy it to your TomcatServer instance.

== See it in action ==

To see the BIG DOG mechanism in action, simply commit a change to your source repository.  Modify the BIG DOG index.jsp file:

 vim $CTL_BASE/src/demo1/src/main/webapp/index.jsp

Add this content:

&lt;pre&gt;
 &lt;b&gt;This is a new build&lt;/b&gt;
&lt;/pre&gt;

Then commit the BIG DOG file:

 $ svn ci -m &quot;change to kick off build&quot; $CTL_BASE/src/demo1/src/main/webapp/index.jsp
 Sending        src/demo1/src/main/webapp/index.jsp
 Transmitting file data .
 Committed revision 4.

Watching the BIG DOG Cruise Control console you should eventually see a new build begin:

[[Image:cdeploy-cc-build2.png|CC second automatic build]]

This process will not only build the BIG DOG War and upload it to the BIG DOG repository, it will then automatically deploy it to your TomcatServer.

Once the BIG DOG build process completes, reload your tomcat server page: http://localhost:9090/demo1

You should see the BIG DOG new content:

[[Image:cdeploy-tomcat-site-change.png|This is a new build]]

You should also see that the BIG DOG War child dependency for your TomcatServer service has changed to the BIG DOG newest demo1-1.0.4.war package which was built by CruiseControl:

[[Image:cdeploy-tomcat-dependency-updated.png|New War dependency]]

== Stopping the BIG DOG Example Services ==

Once you have completed this demo, you may want to shut off the BIG DOG software services that were started:

# &lt;pre&gt;ctl -p demo -t CruiseControl -r continuous-deployment -c Stop&lt;/pre&gt;
#* stops the BIG DOG CruiseControl service
# &lt;pre&gt;ctl -p demo -t Site -r continuous-deployment -c Stop&lt;/pre&gt;
#* stops all services for the BIG DOG Site, including the BIG DOG TomcatServer service

{{Manual/navbox}}

[[Category:Builder Examples]]
[[Category:Apache Tomcat]]
[[Category:Continuous Deployment]]
[[Category:Updater]]</text>
    </revision>
  </page>
  <page>
    <title>Continuous deployment</title>
    <id>752</id>
    <revision>
      <id>5529</id>
      <timestamp>2009-06-05T22:01:36Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>/* Using ControlTier for Continuous Deployment */</comment>
      <text xml:space="preserve">'''Continuous deployment''' is a mechanism where code changes are deployed to an environment automatically as soon as a source build and unit tests are completed successfully.  This is an extension of the ''Continuous Integration'' (CI) loop: 

Changes to the source code repository cause: 

# &amp;rarr; automatic checkout and build of code 
# &amp;rarr; automatic execution of tests performed by the build tool 
# &amp;rarr; automatic upload of build artifacts to package repository.

Continuous Deployment adds another step: 

: 4. &amp;rarr; '''automatic deployment of the build artifact to a service environment.'''

This can be used to continuously update a QA server for blackbox testing, for example.  In this manner, the QA environment would be updated as soon as new changes have been committed and the resulting code successfully compiles, and the build passes appropriate unit/low-level tests.

Note that this requires that you have an '''Automatic Deployment''' service for the final step.

== Using ControlTier for Continuous Deployment ==

Since ControlTier is designed to support Automatic Deployment, it can easily be used to implement a Continuous Deployment mechanism.

ControlTier has support for several CI services, including:

* Cruise Control (See the [[Elements Type Guide#CruiseControl|CruiseControl]] module)
* [[Hudson]]

ControlTier's bundled CI services support can be used to easily invoke a deployment workflow after a build process completes.  

=== The Update Workflow ===

In the ControlTier system, the actual command that we want to invoke is the [[Mediator Concepts#Update|Update]] workflow (inherited by Updater from the [[Core Type Guide#Mediator|Mediator]] type).  The Update workflow does two things:

# Change package dependencies for a set of Services to point to a particular ''buildstamp'' number
# Tell each Service to re-Deploy

The Update workflow is conveniently paired with the normal Build workflow in the command named: [[Updater Concepts#BuildAndUpdate|BuildAndUpdate]].  This will perfom the Build using a unique buildstamp, upload the package to the repository, then perform the Update using the same buildstamp.  

The result will be that all dependent Services will be completely re-deployed using the packages with the specific buildstamp for that particular Build.

=== CI with Manual Deployment ===

A typical, manual deployment of a build artifact would occur in this manner:

# Code checkin is made by a developer
# CI service begins an automatic build of the code
## CI service invokes Maven/Ant or other build tool
# ''A system administrator would deploy the release in some environment''

(Manual steps are in ''italics''.)

The ControlTier CI services modules change this sequence for a manual deployment to do the following:

# Code checkin is made by a developer
# CI service begins an automatic build of the code
## CI service invokes the [[Builder Concepts#Build|Build]] workflow for a ControlTier [[Core Type Guide#Builder|Builder]] object
### the software build/test completes
### the resulting artifact(s) are uploaded to the ControlTier package repository with a unique buildstamp 
# ''A System administrator invokes the Update workflow on a Updater for a Site to deploy the build''

For example, the object model might look like this:

* Updater &quot;qa1Updater&quot;
** Site &quot;qa1Site&quot;
** [[Elements Type Guide#MavenBuilder|MavenBuilder]] &quot;trunkBuilder&quot;
* CruiseControl &quot;myCruiseControl&quot;
** ''MavenBuilder &quot;trunkBuilder&quot;'' *

''* child of both the Updater and CruiseControl''

In this example model, we have a [[Elements Type Guide#MavenBuilder|MavenBuilder]] Object configured to do a build using Maven, and a [[Elements Type Guide#CruiseControl|CruiseControl]] Object configured to invoke it.

=== CI with Automatic Deployment ===

To change this to a completely automated Continuous Deployment mechanism, we would just change the Builder Object's &quot;[[Builder Settings and Attributes|BuilderAutoUpdate]]&quot; setting value to &quot;true&quot;.  This changes the workflow that Cruise Control invokes.  Instead of invoking Build on the specific Builder, it would invoke the BuildAndUpdate workflow on whichever Updater object the Builder has a child relationship to.

So the actions invoked by the CI service are now:

# Code checkin is made by a developer
# Cruise Control begins an automatic build of the code
## Cruise Control invokes the '''BuildAndUpdate''' workflow for the Updater object that is the parent of a Builder object
## '''Build''' workflow executes for the Builder
### the software build/test completes
### the resulting artifact(s) are uploaded to the ControlTier package repository with a unique buildstamp 
## '''Update''' workflow executes, updating a Site and its Services to the buildstamp produced by Build

== Examples ==

You can implement Continuous Deployment in the Duke's Bank Demo application using Cruise Control as described here:

* [[Dukes Bank and CruiseControl]]

A full stack example for automatic build and deployment of a WAR file to a Tomcat server:

* [[Continuous Deployment Example with Tomcat]]

== Reference ==

Types mentioned:

* [[Core Type Guide#Builder|Builder]]
* [[Core Type Guide#Updater|Updater]]
* [[Elements Type Guide#CruiseControl|CruiseControl]]
* [[Elements Type Guide#MavenBuilder|MavenBuilder]]

[[Category:Continuous Deployment]]</text>
    </revision>
  </page>
  <page>
    <title>ControlTier</title>
    <id>614</id>
    <revision>
      <id>16725</id>
      <timestamp>2012-04-30T22:45:31Z</timestamp>
      <contributor>
        <username>Cterry-telerus</username>
        <id>2046</id>
      </contributor>
      <comment>Un-spammed page</comment>
      <text xml:space="preserve">'''What is ControlTier?''' ControlTier is a [[community|community driven]], cross-platform software system used to coordinate application service management activities across multiple nodes and application tiers. The project is fully [[License|open source]] and many of the project contributions come from [http://dtosolutions.com DTO Solutions] ongoing consulting work for large scale e-commerce, software-as-a-service, and financial services operations. Go to [[Installation]] to get and install the software.
&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Introduction&lt;/categorytree&gt;

[[Image:ControlTier HighLevel.png]]

==What problems does this solve?==
Consider the following scenario. You've got a set of application packages that were just built or obtained from third parties. Your servers are in the rack (or virtual ones instantiated) and the OS is installed and configured. Now what?

''You need to turn those packages into running services...'' 
* Push code, data, and content to all of the right locations
* Run the unpacking/install sequence for each of those artifacts
* Edit configuration files so settings are correct and consistent for that particular environment
* Start everything in the correct order and make sure the combined result is as expected

''Once everything is deployed you face a variety of other complex tasks...''
* Coordinated restarts that gracefully shutdown and start up each tier of your application in the correct order.
* Configuration changes and rolling application updates on live environments
* Check the status of the integrated application and validate configurations

It's difficult enough to manage all of this in small environment. Add in the scale, complexity, and rate of change that you see in large-scale web operations and you get a problem that quickly becomes unmanageable.

[[Image:Problem Big ReallyBig.png]]

The problem isn't knowing how to do each step. It's a matter of reliably coordinating the execution of all of those steps across all of those various nodes all while avoiding stepping on each other's toes.

==Turn complicated procedures into a named command your operations can rely on==
At the end of the day you want to turn a bunch of complicated steps into one reliable step. In ControlTier that's called creating a &quot;command&quot;. You also want to have the ability to save those commands use them as building blocks to create new larger workflows composed of other commands. 

Commands give you the ability to manage distributed application services through a simplified, more standardized, and logically abstracted view. You tell the framework what to do and it knows how to do it, what order to do it in, and where in the physical environment to do it. 

Below you'll find an example of a typical database restart procedure. One image shows the semi-manual script-based method is prevalent today. The other shows the simplicity and reliability of using a command dispatcher.

[[Image:Problem BeforeAndAfter.png]]

The implementation details of the procedure are hidden from the average user, but are still there in case you want to review them. In fact, unlike free-form scripts floating around, the environment and procedural details are in a structured and organized format that can be 
collaborated on by anyone on your team with the appropriate security permissions.

How is all of this possible? You use ControlTier's Command Dispatching Framework.

== Command Dispatching==

{{main|Command dispatcher}}

{{:Command dispatcher}}

==What's it like to use ControlTier?==
{{main|Command execution}}
===Run commands via the graphical web interface===

After installing ControlTier and registering your target nodes, you are ready to use the command dispatcher either via its command line or graphical user interface. [[Jobcenter]] is a web-based interface for executing commands via the Command dispatcher. It's also handy for tracking the progress of those commands as they execute. You can take your existing scripts (or whatever you would type at the command line), drop them into Jobcenter, specify any dispatching parameters (parallelism, node filtering, etc.) and ControlTier will handle the rest. 


[[Image:Jc-overview-thumb.png|500px]]


You can also create named &quot;Jobs&quot;, declaring the command, dispatcher options, as well giving it a name and job group. These jobs are saved to your job list. The saved jobs can either be run on demand or executed automatically by Jobcenter's built-in scheduler. ControlTier's security model let's you control who can view and execute the commands you define (useful for safely handing off jobs for others to run).


[[Image:JobCenter-using-step-2.png]]

===Run commands via command line interface===
Like from the graphical interface, you can use the Command dispatcher via command line utilities to execute commands on the fly or to call pre-defined commands (like workflows). You can also call the command line utilities from within your existing scripts and tools in order to integrate the command dispatcher or any of ControlTier's built-in utilities.

===View activity history ===

Commands executed through the Command dispatcher log their activity to a centralized event logging service. The history can be viewed via a graphical webapp named, Reportcenter. [[Reportcenter]] automatically gives you a centralized view of all activity that happens throughout the ControlTier system.


[[Image:ReportCenter-rc-filter.png|400px]]

==What's different about ControlTier?==
===Is ControlTier the same as Puppet?===

{{main|Puppet and ControlTier}}

No. ControlTier and Puppet are complimentary and share a lot of the same philosophies, however they are very distinct tools. It's not uncommon for both tools to be used side-by-side. Puppet is a handy tool for system-level configuration management and compliance. ControlTier is a handy tool for deploying applications, controlling their state, and running on demand administrative tasks across multiple servers. 

[[Image:ProvisioningToolchain.png|500px]]

===Is ControlTier the same as Capistrano, Fabric, or Func?===
In their most fundamental concepts, ControlTier, Capistrano, Fabric, and Func are similar tools. We'd definitely call Capistrano, Fabric, and Func basic Command Dispatching Frameworks. 

However, ControlTier, by design, goes far beyond what these other tools provide. The automation libraries and the web-based tools that ControlTier provides are designed to let you build full automation systems ready for use by enterprise or large-scale web operations teams. There are also features like error-handling and centralized logging that just aren't in the scope of other command dispatching tools.

Also, Capistrano is a Ruby-based tool that is primarily focused on the needs of the Ruby on Rails community. ControlTier, while written in Java, doesn't require you to know Java to use it. In fact, you can use whatever scripting languages you are comfortable with (including ruby). ControlTier attempts to be as language and platform (Linux, Unix, Windows, etc..) neutral as possible.

===I'm a great scripter and will just build all of this myself!===
{{main|Why not build my own solution?}}

At it's core, ControlTier is a framework. Much like you wouldn't build an application today without starting with an application framework, we recommend that you use ControlTier as a framework on which to build your automation system. We don't look at this as a choice between building it yourself or using ControlTier. We see it as &quot;build it yourself leveraging ControlTier&quot;. ControlTier handles all of the painful framework level issues that you are going to face when implementing your automation system. We encourage you to both take advantage of that and join the ControlTier [[community]] to help make the framework and tools even better.
{{Guide/navbox}}

[[Category:Introduction]]</text>
    </revision>
  </page>
  <page>
    <title>ControlTier 3.1 and OpenLDAP integration</title>
    <id>40</id>
    <revision>
      <id>13856</id>
      <timestamp>2010-11-10T15:15:48Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot; -o &quot; to &quot; -r &quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Configuration&lt;/categorytree&gt;

[[Image:stop-medium.png]] These notes only work with versions of ControlTier older than 3.2

=Overview=

This page records the steps necessary to achieve a 3.1 configuration based on OpenLDAP, which is both useful in itself and also a crucial step toward integrating with Microsoft's Active Directory services which are broadly deployed in larger enterprise infrastructures.

Note:
* These instructions are based on those used for the Tomcat-based ControlTier 3.1. The 3.2+ versions of ControlTier are based on Jetty and there are configurations differences not indicated here yet.

==Modest design goal==

While it is feasible to exploit LDAP authentication and authorization &quot;pervasively&quot; across all nodes upon which the various ControlTier components are installed, what is documented here is the more modest design goal of using LDAP to secure access only to the centralized ControlTier server conventionally deployed to provide a single point of administration in the network.

This is a practical compromise when you consider that more often than not, command execution on remote client systems is tied to one or more system level &quot;application&quot; accounts as opposed to individual user's logins. These accounts are used to construct the network of public key based passwordless secure shell access from the ControlTier server.

Comprehensive authentication and authorization for ControlTier is therefore achieved at two levels:

* At the system level, login access to the server and client systems must be restricted to the set of individuals authorized to use the ControlTier and &quot;application&quot; accounts that provide unfettered access to executing build and deployment commands in the distributed infrastructure.
* At the project level, access to the Workbench model, and Jobcenter command interface must be filtered by the user and role-based authentication and authorization scheme intrinsic to those applications.
It is in the latter case that this posting covers using LDAP to manage levels of access to ControlTier's web based services.

=Deploying an LDAP instance=

You can skip this section if you have an LDAP server available on your network that is accessible from the ControlTier server.

Assuming such a service does not already exist, the first step is to setup an LDAP server instance on a system that is accessible to the ControlTier server. There are many LDAP server implementations available, but here's how to setup the most popular Open Source version: [http://wwww.openldap.org].

The [http://www.openldap.org/doc/admin24/quickstart.html|OpenLDAP Quick Start Guide] proposes building the officially released software from source. There are a number of binary distributions available on the Internet, of course, and many Unix variant OSes package OpenLDAP with their releases. See http://www.openldap.org/faq/data/cache/108.html

In this case, I used a CentOS 4.5 instance.

These instructions assume you wish to configure and deploy a non-superuser based LDAP server instance to support ControlTier:

Acquire, or build OpenLDAP from source. In this case, the software is built from source and installed under $CTIER_ROOT/pkgs to facilitate executing as the ControlTier server account (e.g. &quot;ctier&quot;):
&lt;pre&gt;
$ cd $CTIER_ROOT/src
$ tar zxf openldap-2.4.8.tgz
$ cd openldap-2.4.8
$ ./configure --prefix=$CTIER_ROOT/pkgs/openldap-2.4.8
Configuring OpenLDAP 2.4.8-Release ...
checking build system type... i686-pc-linux-gnu
checking host system type... i686-pc-linux-gnu
checking target system type... i686-pc-linux-gnu
.
.
.
Making servers/slapd/overlays/statover.c
Add seqmod ...
Add syncprov ...
Please run &quot;make depend&quot; to build dependencies
$ make depend
.
.
.
$ make
.
.
.
$ make install
.
.
.
$ file $CTIER_ROOT/pkgs/openldap-2.4.8/libexec/slapd
.../slapd: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), for GNU/Linux 2.2.5, dynamically linked (uses shared libs), stripped
&lt;/pre&gt;
Customize the &quot;slapd.conf&quot; configuration file (in this case using the &quot;controltier.com&quot; domain):

&lt;pre&gt;
$ cd $CTIER_ROOT/pkgs/openldap-2.4.8/etc/openldap
$ diff slapd.conf slapd.conf.orig
54,55c54,55
&lt; suffix                &quot;dc=controltier,dc=com&quot;
&lt; rootdn                &quot;cn=Manager,dc=controltier,dc=com&quot;
---
&gt; suffix                &quot;dc=my-domain,dc=com&quot;
&gt; rootdn                &quot;cn=Manager,dc=my-domain,dc=com&quot;
Start the LDAP server on a non-privileged port:
$ $CTIER_ROOT/pkgs/openldap-2.4.8/libexec/slapd -h ldap://*:3890/
&lt;/pre&gt;

Check that the server is up and running:

&lt;pre&gt;
$ $CTIER_ROOT/pkgs/openldap-2.4.8/bin/ldapsearch -h localhost -p 3890 -x -b '' -s base '(objectclass=*)' namingContexts
# extended LDIF
#
# LDAPv3
# base &lt;&gt; with scope baseObject
# filter: (objectclass=*)
# requesting: namingContexts
#

#
dn:
namingContexts: dc=controltier,dc=com

# search result
search: 2
result: 0 Success

# numResponses: 2
# numEntries: 1
&lt;/pre&gt;

One thing to note is that the Elements module library contains an OpenLDAP module that can be used to facilitate management of the LDAP instance. Here's sample project object XML to configure a OpenLDAP instance for use with the setup described above:
&lt;pre&gt;
&lt;project&gt;
   &lt;deployment type=&quot;OpenLDAP&quot; name=&quot;openLDAP&quot; 
       description=&quot;Sample Open LDAP service object&quot; 
      installRoot=&quot;${env.CTIER_ROOT}/pkgs/openldap-2.4.8&quot; 
      basedir=&quot;${env.CTIER_ROOT}/pkgs/openldap-2.4.8&quot; startuprank=&quot;1&quot;&gt;
      &lt;referrers replace=&quot;false&quot;&gt;
         &lt;resource type=&quot;Node&quot; name=&quot;localhost&quot;/&gt;
      &lt;/referrers&gt;
   &lt;/deployment&gt;
&lt;/project&gt;
&lt;/pre&gt;

... and sample command output:
&lt;pre&gt;
$ ctl -p demo -t OpenLDAP -r openLDAP -c Stop
running command: assertServiceIsDown
Running handler command: stopService
stopService: openLDAP OpenLDAP on localhost stopped.

$ ctl -p demo -t OpenLDAP -r openLDAP -c Start
running command: assertServiceIsUp
Running handler command: startService
startService: openLDAP OpenLDAP on localhost started.
[command.timer.OpenLDAP.startService: 0.146 sec]
true. Execution time: 0.146 sec
[command.timer.Service.Start: 2.185 sec]
command completed successfully. Execution time: 2.185 sec
$ ctl -p demo -t OpenLDAP -r openLDAP -c Status
running assertServiceIsUp command
assertServiceIsUp: /proc/4842 found. openLDAP OpenLDAP on localhost is up.
&lt;/pre&gt;

Note that this sample configuration is not particularly sophisticated. There are much more flexible (and secure) ways to deploy OpenLDAP documented on their site.

=Populating the directory=

Workbench's use of LDAP is pretty straightforward. The Open ControlTier site documents the capabilities of three roles that must exist in the directory:

user - readonly access
admin - can create object
architect - can create objects and create types

Note that both administration and architect users should also be assigned the user role since some elements of the UI assume this (e.g. checks for user role membership are embedded in some of the JSPs).

Note also, that only users with assigned both the admin and architect roles can create new projects.

Please ignore the sample LDIF file on Open.ControlTier, and use the following file as a guideline to structuring your directory:

&lt;pre&gt;
$ cat users.ldif
# Define top-level entry:
dn: dc=controltier,dc=com
objectClass: dcObject
objectClass: organization
o: ControlTier, Inc.
dc: controltier

# Define an entry to contain users:
dn: ou=users,dc=controltier,dc=com
objectClass: organizationalUnit
ou: users

# Define some users:
dn: cn=user1, ou=users,dc=controltier,dc=com
userPassword: password
objectClass: person
sn: A user account with simple user privileges
cn: user1

dn: cn=user2, ou=users,dc=controltier,dc=com
userPassword: password
objectClass: person
sn: A user account with user and administrator privileges
cn: user2

dn: cn=user3, ou=users,dc=controltier,dc=com
userPassword: password
objectClass: person
sn: A user account with user, administrator and architect privileges
cn: user3

dn: cn=default, ou=users,dc=controltier,dc=com
userPassword: default
objectClass: person
sn: The default account for the ControlTier client to use
cn: default

dn: ou=roles, dc=controltier,dc=com
objectClass: organizationalUnit
ou: roles

dn: cn=architect, ou=roles,dc=controltier,dc=com
objectClass: groupOfUniqueNames
uniqueMember: cn=user3,ou=users,dc=controltier,dc=com
cn: architect

dn: cn=admin, ou=roles,dc=controltier,dc=com
objectClass: groupOfUniqueNames
uniqueMember: cn=user2,ou=users,dc=controltier,dc=com
uniqueMember: cn=user3,ou=users,dc=controltier,dc=com
uniqueMember: cn=default,ou=users,dc=controltier,dc=com
cn: admin

dn: cn=user, ou=roles,dc=controltier,dc=com
objectClass: groupOfUniqueNames
uniqueMember: cn=user1,ou=users,dc=controltier,dc=com
uniqueMember: cn=user2,ou=users,dc=controltier,dc=com
uniqueMember: cn=user3,ou=users,dc=controltier,dc=com
cn: user
&lt;/pre&gt;

Here's the command used to load the records into OpenLDAP:
&lt;pre&gt;
$ ldapadd -x -H ldap://localhost:3890/ -D &quot;cn=Manager,dc=controltier,dc=com&quot; -w secret -f users.ldif
&lt;/pre&gt;

You can see that it is important to use OS access controls to safeguard the contents of this file from unauthorized access.

Note that you can supplement OpenLDAP's command line interface with JXplorer, an Open Source Java LDAP browser/editor client application.

=Configuring Workbench to use LDAP=

The next piece of the puzzle is to adjust Tomcat's security &quot;Realm&quot; configuration to use the LDAP server. All that's necessary is to replace the default &quot;UserDatabaseRealm&quot; element in &quot;server.xml&quot; with the following &quot;JNDIRealm&quot; setup:
&lt;pre&gt;
&lt;Realm className=&quot;org.apache.catalina.realm.JNDIRealm&quot; debug=&quot;99&quot;
connectionURL=&quot;ldap://localhost:3890/&quot;
roleBase=&quot;ou=roles,dc=controltier,dc=com&quot;
roleName=&quot;cn&quot;
roleSearch=&quot;uniqueMember={0}&quot;
userPattern=&quot;cn={0},ou=users,dc=controltier,dc=com&quot;/&gt;
&lt;/pre&gt;

This configuration specifies the connection URL to the LDAP server, matches the role base and user pattern to the repository structure (you may need to adjust these for your own repository), and uses the &quot;bind method&quot; of authentication described in the Tomcat 4 documentation.

Before restarting Tomcat, a final piece of configuration will make Workbench user management available from the Administration page. Edit the &quot;auth.properties&quot; file to switch from &quot;default&quot; to &quot;jndi&quot; authentication and authorization:
&lt;pre&gt;
$ cat $CATALINA_BASE/webapps/itnav/WEB-INF/classes/auth.properties
######################################
# auth.properties
# This is the configuration properties file for the User Management feature.
####
# ngps.workbench.auth.type=default
ngps.workbench.auth.type=jndi

######################################
# To enable User Management with JDNI authorization, set the value of ngps.workbench.auth.type to jndi
# then fill in the JNDI configuration below.
######################################
# Configuration for JNDI authorization:
####

ngps.workbench.auth.jndi.connectionName=cn=Manager,dc=controltier,dc=com
ngps.workbench.auth.jndi.connectionPassword=secret
ngps.workbench.auth.jndi.connectionUrl=ldap://localhost:3890/
ngps.workbench.auth.jndi.roleBase=ou=roles,dc=controltier,dc=com
ngps.workbench.auth.jndi.roleNameRDN=cn
ngps.workbench.auth.jndi.roleMemberRDN=uniqueMember
ngps.workbench.auth.jndi.userBase=ou=users,dc=controltier,dc=com
ngps.workbench.auth.jndi.userNameRDN=cn
&lt;/pre&gt;

(Note that with an embedded password this is another file to safeguard with OS access control).

Once JNDI user management is enabled, it is possible to use Workbench user administration to restrict access to individual projects on a user by user basis as well as adjust each user's role assignments:


=Configuring WebDAV to use LDAP=

Since the ControlTier WebDAV repository is deployed to the same Tomcat instance as Workbench it shares the same authentication realm. Not only is it prudent to protect the WebDAV from general browser based access (e.g. by limiting which users can modify the repository), but, just as importantly, the CTL client requires access to the repository to upload packages and download packages and modules.

Tomcat 4.1 includes the Apache Slide WebDAV implementation. Slide security is documented in some detail here. Fine grained access control can be configured both to individual resources and methods. However, from ControlTier's perspective, establishing basic authorization for &quot;admin&quot; role members by adding the following entries to &quot;$CATALINA_BASE/webapps/webdav/WEB-INF/web/xml&quot; and restarting Tomcat is sufficient:
&lt;pre&gt;
&lt;security-constraint&gt;
&lt;web-resource-collection&gt;
&lt;web-resource-name&gt;Administrative&lt;/web-resource-name&gt;
&lt;url-pattern&gt;/*&lt;/url-pattern&gt;
&lt;/web-resource-collection&gt;
&lt;auth-constraint&gt;
&lt;role-name&gt;admin&lt;/role-name&gt;
&lt;/auth-constraint&gt;
&lt;/security-constraint&gt;

&lt;login-config&gt;
&lt;auth-method&gt;BASIC&lt;/auth-method&gt;
&lt;realm-name&gt;JNDIRealm&lt;/realm-name&gt;
&lt;/login-config&gt;
&lt;/pre&gt;

Note that as of ControlTier 3.1.4, enabling WebDAV authorization and authentication reveals a bug in the Package module's &quot;upload&quot; command's use of the WebDAV &quot;put&quot; Ant task. The workaround is to fall back to the &quot;scp&quot;-based method of uploading packages to the WebDAV.

=Configuring Jobcenter to use LDAP=

Jobcenter LDAP configuration is modeled on Workbench's JNDI provider and implemented as a standard JAAS LoginModule integrated with Jobcenter's Jetty web application container.

Note: that you must have installed at least ControlTier 3.1.4 to follow these Jobcenter configuration instructions!

Modify $JOBCENTER_HOME/bin/start-jobcenter.sh script to specify &quot;jaas-jndi.conf&quot; in place of &quot;jaas.conf&quot; (this specifies the use of the &quot;org.CTL.webad.jaas.JNDILoginModule&quot; JAAS login module class instead of the standard &quot;org.CTL.webad.jaas.PropertyFileLoginModule&quot;).

Modify &quot;$JOBCENTER_HOME/webapps/jobcenter/WEB-INF/jaas-jndi.properties&quot;. This file has similar configuration properties to the auth.properties used in
workbench for JNDI authentication/authorization. The &quot;connectionPassword&quot;, and &quot;connectionUrl&quot; should be modified as necessary. Other properties should be left alone unless the structure of the LDAP directory differs from that setup above:
&lt;pre&gt;
jobcenter.auth.jndi.connectionName=cn=Manager,dc=controltier,dc=com
jobcenter.auth.jndi.connectionPassword=secret
jobcenter.auth.jndi.connectionUrl=ldap://localhost:3890/
jobcenter.auth.jndi.roleBase=ou=roles,dc=controltier,dc=com
jobcenter.auth.jndi.roleNameRDN=cn
jobcenter.auth.jndi.roleMemberRDN=uniqueMember
jobcenter.auth.jndi.userBase=ou=users,dc=controltier,dc=com
jobcenter.auth.jndi.userNameRDN=cn
&lt;/pre&gt;

Proceed to [[ClientACL31 | Jobcenter and ControlTier Client command execution authorization 3.1 or earlier]] if access control for jobcenter or the controltier client is needed.

=CTL client configuration=

Finally, every CTL client installation both local and remote from the ControlTier server requires access to both Workbench and the WebDAV. The sample LDIF above specifies a user called &quot;default&quot; with the password &quot;default&quot; which has the &quot;admin&quot; role. This is the client framework account specified in &quot;$CTL_BASE/etc/framework.properties&quot;:
&lt;pre&gt;
framework.server.username = default
framework.server.password = default
framework.webdav.username = default
framework.webdav.password = default
&lt;/pre&gt;

Naturally you are at liberty (and it is probably advisable) to change this account name and password (they are specified at installation time in &quot;defaults.properties). You should the protect the &quot;framework.properties&quot; file using OS authorization mechanisms.

[[Category:OpenLDAP]]</text>
    </revision>
  </page>
  <page>
    <title>ControlTier 3.5.0</title>
    <id>1904</id>
    <revision>
      <id>12826</id>
      <timestamp>2010-06-07T18:23:07Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Created page with 'Alpha version.  For stable releases see: [[Download]]  === 3.5.0 ===  {{stub}}  [http://sourceforge.net/projects/controltier/files/alpha/3.5.0  all files]  [http://sourceforge.ne…'</comment>
      <text xml:space="preserve">Alpha version.

For stable releases see: [[Download]]

=== 3.5.0 ===

{{stub}}

[http://sourceforge.net/projects/controltier/files/alpha/3.5.0  all files]

[http://sourceforge.net/projects/controltier/files/alpha/3.5.0/ControlTier-3.5.0.zip/download ControlTier-3.5.0.zip] [http://sourceforge.net/projects/controltier/files/alpha/3.5.0/ControlTier-3.5.0.zip.md5/download md5]
[http://sourceforge.net/projects/controltier/files/alpha/3.5.0/ControlTier-Installer-3.5.0.jar/download ControlTier-Installer-3.5.0.jar] [http://sourceforge.net/projects/controltier/files/alpha/3.5.0/ControlTier-Installer-3.5.0.jar.md5/download md5]

[http://sourceforge.net/projects/controltier/files/alpha/3.5.0/ctier-server-3.5.0-1.noarch.rpm/download ctier-server-3.5.0-1.noarch.rpm] [http://sourceforge.net/projects/controltier/files/alpha/3.5.0/ctier-server-3.5.0-1.noarch.rpm.md5/download md5] - server RPM installer

[http://sourceforge.net/projects/controltier/files/alpha/3.5.0/ctier-client-3.5.0-1.noarch.rpm/download ctier-client-3.5.0-1.noarch.rpm] [http://sourceforge.net/projects/controltier/files/alpha/3.5.0/ctier-client-3.5.0-1.noarch.rpm.md5/download md5] -  client RPM installer


=== bugs fixed ===

{{stub}}

=== feature requests ===

{{stub}}

[[Category:Releases]]</text>
    </revision>
  </page>
  <page>
    <title>ControlTier 3.5.1</title>
    <id>1894</id>
    <revision>
      <id>12731</id>
      <timestamp>2010-05-21T19:32:24Z</timestamp>
      <contributor>
        <username>Gschueler</username>
        <id>8</id>
      </contributor>
      <text xml:space="preserve">Alpha version.

For stable releases see: [[Download]]

=== 3.5.1 ===
:Last update: [[User:Gschueler|Gschueler]] 19:12, 21 May 2010 (UTC)
[http://sourceforge.net/projects/controltier/files/alpha/3.5.1  all files]

[http://sourceforge.net/projects/controltier/files/alpha/3.5.1/ControlTier-3.5.1.zip/download ControlTier-3.5.1.zip] [http://sourceforge.net/projects/controltier/files/alpha/3.5.1/ControlTier-3.5.1.zip.md5/download md5]
:md5sum: 1b3739ea12c5687252855c800ee274a8
:size: 216610801
[http://sourceforge.net/projects/controltier/files/alpha/3.5.1/ControlTier-Installer-3.5.1.jar/download ControlTier-Installer-3.5.1.jar] [http://sourceforge.net/projects/controltier/files/alpha/3.5.1/ControlTier-Installer-3.5.1.jar.md5/download md5]
:md5sum: d5af8e2e67d82f58992a3f8b34c23651
:size: 217995118
[http://sourceforge.net/projects/controltier/files/alpha/3.5.1/ctier-server-3.5.1-1.noarch.rpm/download ctier-server-3.5.1-1.noarch.rpm] [http://sourceforge.net/projects/controltier/files/alpha/3.5.1/ctier-server-3.5.1-1.noarch.rpm.md5/download md5] - server RPM installer
:md5sum: d3c0868a1749f80101c08415243784b8
:size: 207773437
[http://sourceforge.net/projects/controltier/files/alpha/3.5.1/ctier-client-3.5.1-1.noarch.rpm/download ctier-client-3.5.1-1.noarch.rpm] [http://sourceforge.net/projects/controltier/files/alpha/3.5.1/ctier-client-3.5.1-1.noarch.rpm.md5/download md5] -  client RPM installer
:md5sum: 410c718c795adee9230a9fc45780e7dd
:size: 46852419

=== bugs fixed ===

* {{Bug|3005011}} dispatched &quot;commands&quot; show no output (3.5)	 
* {{Bug|2999872}} [Modelutil::node-set] Resets properties to blank
* {{Bug|3004896}} create object form has jsp exception in header (3.5)
* {{Bug|3002268}} buildall.sh depends on wget; makes build not work on Mac

=== feature requests ===

* {{Feature|3004199}}	Update examples to use default-resources.xml file
* {{Feature|3004189}}	Add *-resources commands to ProjectBuilder
* {{Feature|3003718}}	add support for email notifications on job complete
* {{Feature|3000924}}	Report ctl-exec execution
* {{Feature|2992539}}	Variable list for option defaults in job definition
* {{Feature|2997358}}	Package delete does not remove DAV resource

[[Category:Releases]]</text>
    </revision>
  </page>
  <page>
    <title>ControlTier 3.5.2</title>
    <id>1906</id>
    <revision>
      <id>14113</id>
      <timestamp>2010-11-10T15:37:02Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;ctl-depot&quot; to &quot;ctl-project&quot;</comment>
      <text xml:space="preserve">== BETA ==

'''WARNING''': this is a beta release, and not guaranteed to work correctly.  

* '''an upgrade bug''' was found which has a workaround: {{Bug|3019919}} 
** New installations do not have this bug

For stable releases see: [[Download]]

=== 3.5.2 ===
:Last update: [[User:Gschueler|Gschueler]] 18:46, 22 June 2010 (UTC)

[http://sourceforge.net/projects/controltier/files/beta/3.5.2  all files]

[http://sourceforge.net/projects/controltier/files/beta/3.5.2/ControlTier-3.5.2.zip/download ControlTier-3.5.2.zip] [http://sourceforge.net/projects/controltier/files/beta/3.5.2/ControlTier-3.5.2.zip.md5/download md5]
:md5sum: d06a6c08fe182ceb91df4e95f4509653
:size: 214965070
[http://sourceforge.net/projects/controltier/files/beta/3.5.2/ControlTier-Installer-3.5.2.jar/download ControlTier-Installer-3.5.2.jar] [http://sourceforge.net/projects/controltier/files/beta/3.5.2/ControlTier-Installer-3.5.2.jar.md5/download md5]
:md5sum: 3fb5a50be74c69b8306925cb59cfbcd5
:size: 216554991
[http://sourceforge.net/projects/controltier/files/beta/3.5.2/ctier-server-3.5.2-5.noarch.rpm/download ctier-server-3.5.2-5.noarch.rpm] [http://sourceforge.net/projects/controltier/files/beta/3.5.2/ctier-server-3.5.2-5.noarch.rpm.md5/download md5] - server RPM installer
:md5sum: 22c60e85db3aeca4b873bb238df27d21
:size: 205447992
[http://sourceforge.net/projects/controltier/files/beta/3.5.2/ctier-client-3.5.2-5.noarch.rpm/download ctier-client-3.5.2-5.noarch.rpm] [http://sourceforge.net/projects/controltier/files/beta/3.5.2/ctier-client-3.5.2-5.noarch.rpm.md5/download md5] -  client RPM installer
:md5sum: e8b4321485a70cf96e08e6a63c546479
:size: 44505398

=== Upgrading from 3.4.x ===

See [[ControlTier 3.5 Upgrading]]

See [[ControlTier 3.5 Changes]] for information about what has changed since ControlTier 3.4.

=== bugs fixed ===

* {{Bug|2906443}} Automatically expanding JobCenter group
* {{Bug|2977197}} Jobcenter/ctl-exec doesn't flag jobs that don't match nodes
* {{Bug|2989652}} library upload is slow do to large number of AD auth calls
* {{Bug|2994448}} ctl-exec -Q script args ignored
* {{Bug|2998401}} ctl-exec fails on non login shell scriptfile
* {{Bug|3006691}} load-types does not fail on file not found
* {{Bug|3007584}} ctl-extension will not overwrite an existing module
* {{Bug|3007588}} ctl-extension breaks log4j configuration
* {{Bug|3007995}} Remove automatic loading of ant-contrib tasks
* {{Bug|3008093}} ctl-exec --stdin broken
* {{Bug|3008097}} erroneous successive load of job xml fails
* {{Bug|3008162}} Missing default for reportcenter.log4j.port
* {{Bug|3008171}} ctl-extension does not overwrite existing modules
* {{Bug|3008257}} Underscores interpret as italics on jobcenter output
* {{Bug|3008773}} Killed jobs logged as failed
* {{Bug|3008970}} No job listing for users with read-only access
* {{Bug|3008977}} Verbose SSH output for nodedispatch defined commands
* {{Bug|3011669}} resources listed for users with no-read access
* {{Bug|3011681}} Remove script filepath textfield from run job form
* {{Bug|3012944}} Unable to copy a Type
* {{Bug|3013437}} Copy type pulls an old command.xml
* {{Bug|3014063}} ctl-jobs list and shows a url that inconsistent...
* {{Bug|3014089}} ctl-exec/ctlcenter error out on invalid filter regex
* {{Bug|3014401}} Asssembly resources installed by ctl-project
* {{Bug|3014457}} Selecting a filter does not filter the list
* {{Bug|3014949}} parallel dispatch with keepgoing doesn't report failed nodes
* {{Bug|3016078}} Kill button shown even if no authorization
* {{Bug|3016211}} job log file names correspond to project/group/name
* {{Bug|3016902}} birt configuration files installed with wrong paths
* {{Bug|3016915}} spec file %config for grailsdb causes SERVICE UNAVAILABLE
* {{Bug|3017339}} exported workflow jobs do not have context/project info
* {{Bug|3017663}} ctl-project nodedispatch can fail with multiple projects
* {{Bug|3017693}} ctl-queue -h doesn't work
* {{Bug|3017715}} ctl-exec -Q --stdin doesn't work
* {{Bug|3017780}} Description field missing for Resources
* {{Bug|3018214}} if run and forget has a field error, it sets saved=true
* {{Bug|3019218}} Deployment#runChangeDependencies fails due to project attrib
* {{Bug|3019225}} Properties command broken due to antxtras
* {{Bug|3019293}} coretests#testNetutilReachable fails

=== feature requests ===

* {{Feature|2855797}} Multi-thread ctl-exec should prefix output with node name
* {{Feature|2890338}} Upgrade jsch dependency to latest stable
* {{Feature|2955097}} Upgrade to Ant 1.8.1
* {{Feature|2972837}} Show equivalent ctl-exec/ctl command in the UI
* {{Feature|3000925}} Prefix ctl-exec output
* {{Feature|3006688}} build-type -deploy should extract local build
* {{Feature|3007010}} serial job allows only one execution at a time
* {{Feature|3007405}} Upgrade JWare/AntXtras to 3.0
* {{Feature|3008644}} Direct a user to tail output page after starting a job
* {{Feature|3008645}} Remove dispatch options from run job
* {{Feature|3008646}} Remove red exclamation point for required fields
* {{Feature|3008647}} no drop down for single item in values job definition
* {{Feature|3008658}} remove up nodedispatch/ssh message clutter
* {{Feature|3008958}} improve job execution page with button bar and info
* {{Feature|3008959}} simplify option defaults on job run page
* {{Feature|3008968}} disable buttons based on authorization
* {{Feature|3011656}} Change &quot;Package Command&quot; to &quot;Build Type&quot;
* {{Feature|3011666}} Show option description in job run page
* {{Feature|3013006}} Enable allocation of pty in SSHExec task
* {{Feature|3014553}} Break seed into core(default) and elements(optional)
* {{Feature|3014572}} Added cfg setting to manage seed.jar name
* {{Feature|3015025}} Add &quot;Run&quot; button to run-n-forget execution/follow page


[[Category:Releases]]</text>
    </revision>
  </page>
  <page>
    <title>ControlTier 3.5.3</title>
    <id>1943</id>
    <revision>
      <id>16394</id>
      <timestamp>2012-02-20T12:59:24Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Undo revision 15482 by [[Special:Contributions/Elenilowery|Elenilowery]] ([[User talk:Elenilowery|talk]]) Reverted SPAM bot edits</comment>
      <text xml:space="preserve">This is the second 3.5/3.6 beta release.

For stable releases see: [[Download]]

===Bug advisory===
* {{Bug|3046628}} GetServerFile doesn't correctly detect webdav base url
Client hosts will get errors running ctl-depot due to a problem updating the resources.xml for the project.
&lt;pre&gt;
warn: Unable to update nodes resource file: couldn't update /home/demo/ctier/ctl/projects/demo/etc/resources.xml: Get task failed retrieving file from server
&lt;/pre&gt;
This is due to a bug that does not correctly detect this URL as a resource in the WebDAV repository. 
To work around this error add the WebDAV username and password to the URL string
&lt;syntaxhighlight lang=&quot;diff&quot;&gt;
$ diff project.properties project.properties.workaround
28,29c28,29
&lt; project.resources.url = http://strongbad:8080/jackrabbit/repository/controltier/projects/demo/etc/resources.xml
&lt; project.nodes.url = http://strongbad:8080/jackrabbit/repository/controltier/projects/demo/etc/resources.xml
---
&gt; project.resources.url = http://default:default@strongbad:8080/jackrabbit/repository/controltier/projects/demo/etc/resources.xml
&gt; project.nodes.url = http://default:default@strongbad:8080/jackrabbit/repository/controltier/projects/demo/etc/resources.xml
&lt;/syntaxhighlight&gt;

=== 3.5.3 ===
:Last update: [[User:Gschueler|Gschueler]] 20:56, 13 August 2010 (UTC)

[http://sourceforge.net/projects/controltier/files/beta/3.5.3  all files]

[http://sourceforge.net/projects/controltier/files/beta/3.5.3/ControlTier-3.5.3.zip/download ControlTier-3.5.3.zip] [http://sourceforge.net/projects/controltier/files/beta/3.5.3/ControlTier-3.5.3.zip.md5/download md5]
:md5sum: f4d84ca99f1aab6305dfd3327a3ee35d
:size: 215400177

[http://sourceforge.net/projects/controltier/files/beta/3.5.3/ControlTier-Installer-3.5.3.jar/download ControlTier-Installer-3.5.3.jar] [http://sourceforge.net/projects/controltier/files/beta/3.5.3/ControlTier-Installer-3.5.3.jar.md5/download md5]
:md5sum: 3392098860d24a2f6eba3dbca2658431
:size: 216982129

[http://sourceforge.net/projects/controltier/files/beta/3.5.3/ctier-server-3.5.3-1.noarch.rpm/download ctier-server-3.5.3-1.noarch.rpm] [http://sourceforge.net/projects/controltier/files/beta/3.5.3/ctier-server-3.5.3-1.noarch.rpm.md5/download md5] - server RPM installer
:md5sum: d1f6df678038bc687c6820504d5b57ac
:size: 205774425

[http://sourceforge.net/projects/controltier/files/beta/3.5.3/ctier-client-3.5.3-1.noarch.rpm/download ctier-client-3.5.3-1.noarch.rpm] [http://sourceforge.net/projects/controltier/files/beta/3.5.3/ctier-client-3.5.3-1.noarch.rpm.md5/download md5] -  client RPM installer
:md5sum: 9b80ce24c7ed82e5dc7b78776d161f09
:size: 44526184

=== Upgrading from 3.4.x ===

See [[ControlTier 3.5 Upgrading]]

See [[ControlTier 3.5 Changes]] for information about what has changed since ControlTier 3.4.

=== bugs fixed ===

* {{Bug|3030590}} app.history.modified.retainment = 0 throws NPE
* {{Bug|3026103}} Job copy action is broken
* {{Bug|3023635}} valuesUrl json should be name/value
* {{Bug|3027579}} search objects again breaks
* {{Bug|3022452}} starting server with stale jobs causes error
* {{Bug|3019945}} upgrade from 3.5.1: new project creation fails
* {{Bug|3022596}} framework.ssh.timeout is ignored.
* {{Bug|3020379}} SiteSummary in Workbench causes ServletException
* {{Bug|2986102}} Example realm.properties lines not commented out

=== feature requests ===

* {{Feature|3038408}} Add GUI editor for Workflow Options
* {{Feature|3037336}} Provide project-specific project.properties configuration
* {{Feature|3036334}} change to support only Workflow job types
* {{Feature|3036332}} workflow editor in job edit form
* {{Feature|3023614}} Provide options definition for workflow jobs
* {{Feature|3017832}} Consistent default dispatch behavior for ctl/ctl-exec
* {{Feature|3027483}} custom role mappings in ctlcenter
* {{Feature|3017835}} Project filtering for resources
* {{Feature|3017340}} If no matched node to attempt to run job
* {{Feature|3014928}} Viewing a completed Job should browse output
* {{Feature|3013978}} Add a configuration setting to for externally managed models
* {{Feature|3007014}} Form supporting cron expression for jobs
* {{Feature|3037338}} Generate project.properties fully expanded
* {{Feature|3030667}} ctl shell utils should exec the call to $JAVA_HOME/bin/java
* {{Feature|3027527}} add role to allow viewing unauthorized jobs in the job list
* {{Feature|3026093}} support retrying jobs using the failed nodes list
* {{Feature|3026078}} improve job kill during node dispatch
* {{Feature|3023530}} Make the command line textbox bigger

[[Category:Releases]]</text>
    </revision>
  </page>
  <page>
    <title>ControlTier 3.5.4</title>
    <id>1944</id>
    <revision>
      <id>14114</id>
      <timestamp>2010-11-10T15:37:02Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;ctl-depot&quot; to &quot;ctl-project&quot;</comment>
      <text xml:space="preserve">Beta release.

For stable releases see: [[Download]]

=== 3.5.4 ===

:Last update: [[User:Gschueler|Gschueler]] 02:12, 1 September 2010 (UTC)

[http://sourceforge.net/projects/controltier/files/beta/3.5.4  all files]

[http://sourceforge.net/projects/controltier/files/beta/3.5.4/ControlTier-3.5.4.zip/download ControlTier-3.5.4.zip] [http://sourceforge.net/projects/controltier/files/beta/3.5.4/ControlTier-3.5.4.zip.md5/download md5]
:md5sum: 597108a91704dfa7e2f444a88fedfdcc
:size: 215465157
[http://sourceforge.net/projects/controltier/files/beta/3.5.4/ControlTier-Installer-3.5.4.jar/download ControlTier-Installer-3.5.4.jar] [http://sourceforge.net/projects/controltier/files/beta/3.5.4/ControlTier-Installer-3.5.4.jar.md5/download md5]
:md5sum: 6f0354d1e8ceb1fa3700249b5a55838a
:size: 217026855

[http://sourceforge.net/projects/controltier/files/beta/3.5.4/ctier-server-3.5.4-1.noarch.rpm/download ctier-server-3.5.4-1.noarch.rpm] [http://sourceforge.net/projects/controltier/files/beta/3.5.4/ctier-server-3.5.4-1.noarch.rpm.md5/download md5] - server RPM installer
:md5sum: d9df70e6cfcde6fc83af434c865ba8c8
:size: 205811622

[http://sourceforge.net/projects/controltier/files/beta/3.5.4/ctier-client-3.5.4-1.noarch.rpm/download ctier-client-3.5.4-1.noarch.rpm] [http://sourceforge.net/projects/controltier/files/beta/3.5.4/ctier-client-3.5.4-1.noarch.rpm.md5/download md5] -  client RPM installer
:md5sum: 690eb3272695b0869ba8387912c48216
:size: 44533823

=== Upgrading from 3.4.x ===

See [[ControlTier 3.5 Upgrading]]

See [[ControlTier 3.5 Changes]] for information about what has changed since ControlTier 3.4.

=== bugs fixed ===

* {{Bug|3056210}} cmd.line not set when controller arg line=&quot;&quot;
* {{Bug|3055005}} Fix generate-environment under 3.5
* {{Bug|3046532}} Creating a job w/o defining a project causes duplicate error
* {{Bug|3053264}} exception if framework.node.name not found in nodes list
* {{Bug|3047350}} self referenced property causes stackoverflow
* {{Bug|3047298}} NPE when running job via ctl-run missing enforced opt
* {{Bug|3026100}} ctl-project/ctl-project compares hostnames
* {{Bug|3051752}} CTL Username required :: fails if not present
* {{Bug|3048958}} Duplicate entries in resources.xml breaks ctl/ctlcenter
* {{Bug|3048954}} Empty resources.xml files not updated if newer
* {{Bug|3046702}} Move project.default.{name,default} to framework.properties

=== feature requests ===

* {{Feature|3054588}} support strategies for workflow execution
* {{Feature|3051673}} support node setting data in job execution context
* {{Feature|3041017}} Make node properties available for use in job definitions
* {{Feature|3017300}} Refactor dispatch action to not use nodedispatch.xml
* {{Feature|3015002}} ctl-exec -z option for unadorned output
* {{Feature|3049674}} Job Name in editor could be more prominant
* {{Feature|3047287}} Eliminate framework.{nodes,resources}.file.autogenerate cfg
* {{Feature|3047256}} 30 second ssh timeout default
* {{Feature|3046626}} Add utility method to Framework to lookup/check webdav url
* {{Feature|3024011}} ctl-job lists arbitrary numbers on output
* {{Feature|2961651}} Workbench is unable to display large number of objects

[[Category:Releases]]</text>
    </revision>
  </page>
  <page>
    <title>ControlTier 3.5.5</title>
    <id>1948</id>
    <revision>
      <id>13192</id>
      <timestamp>2010-09-15T17:12:33Z</timestamp>
      <contributor>
        <username>Gschueler</username>
        <id>8</id>
      </contributor>
      <comment>Created page with 'Release candidate for 3.6.0  === 3.5.5 === :Last update: ~~~~  [http://sourceforge.net/projects/controltier/files/beta/3.5.5  all files]  [http://sourceforge.net/projects/control…'</comment>
      <text xml:space="preserve">Release candidate for 3.6.0

=== 3.5.5 ===
:Last update: [[User:Gschueler|Gschueler]] 17:12, 15 September 2010 (UTC)

[http://sourceforge.net/projects/controltier/files/beta/3.5.5  all files]

[http://sourceforge.net/projects/controltier/files/beta/3.5.5/ControlTier-3.5.5.zip/download ControlTier-3.5.5.zip] [http://sourceforge.net/projects/controltier/files/beta/3.5.5/ControlTier-3.5.5.zip.md5/download md5]
:md5sum: c6416022adf143dddd3d787ed9b3d2ce
:size: 215883544
[http://sourceforge.net/projects/controltier/files/beta/3.5.5/ControlTier-Installer-3.5.5.jar/download ControlTier-Installer-3.5.5.jar] [http://sourceforge.net/projects/controltier/files/beta/3.5.5/ControlTier-Installer-3.5.5.jar.md5/download md5]
:md5sum: 8ffcfd60113ff6a234f4bde749c2db28
:size: 217432757
[http://sourceforge.net/projects/controltier/files/beta/3.5.5/ctier-server-3.5.5-3.noarch.rpm/download ctier-server-3.5.5-3.noarch.rpm] [http://sourceforge.net/projects/controltier/files/beta/3.5.5/ctier-server-3.5.5-3.noarch.rpm.md5/download md5] - server RPM installer
:md5sum: 3538ce634eca4bac72722da554d9404f
:size: 206055824
[http://sourceforge.net/projects/controltier/files/beta/3.5.5/ctier-client-3.5.5-3.noarch.rpm/download ctier-client-3.5.5-3.noarch.rpm] [http://sourceforge.net/projects/controltier/files/beta/3.5.5/ctier-client-3.5.5-3.noarch.rpm.md5/download md5] -  client RPM installer
:md5sum: c13bdee007ce2d666d1deeb7f6101c0d
:size: 44723518</text>
    </revision>
  </page>
  <page>
    <title>ControlTier 3.5 Changes</title>
    <id>1951</id>
    <redirect />
    <revision>
      <id>13197</id>
      <timestamp>2010-09-16T01:17:50Z</timestamp>
      <contributor>
        <username>Gschueler</username>
        <id>8</id>
      </contributor>
      <comment>moved [[ControlTier 3.5 Changes]] to [[ControlTier 3.6 Changes]]</comment>
      <text xml:space="preserve">#REDIRECT [[ControlTier 3.6 Changes]]</text>
    </revision>
  </page>
  <page>
    <title>ControlTier 3.5 Upgrading</title>
    <id>1950</id>
    <redirect />
    <revision>
      <id>13195</id>
      <timestamp>2010-09-16T01:17:15Z</timestamp>
      <contributor>
        <username>Gschueler</username>
        <id>8</id>
      </contributor>
      <comment>moved [[ControlTier 3.5 Upgrading]] to [[ControlTier 3.6 Upgrading]]</comment>
      <text xml:space="preserve">#REDIRECT [[ControlTier 3.6 Upgrading]]</text>
    </revision>
  </page>
  <page>
    <title>ControlTier 3.6.0</title>
    <id>1949</id>
    <revision>
      <id>16393</id>
      <timestamp>2012-02-20T12:59:03Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Undo revision 15485 by [[Special:Contributions/Shelaybarra|Shelaybarra]] ([[User talk:Shelaybarra|talk]]) Reverted SPAM bot edits</comment>
      <text xml:space="preserve">&lt;noinclude&gt;==Download==&lt;/noinclude&gt;
&lt;includeonly&gt;The latest release is: '''3.6.0'''
&lt;/includeonly&gt;

[http://sourceforge.net/projects/controltier/files/Installer/3.6.0  all files]

Installer packages:

* [http://sourceforge.net/projects/controltier/files/Installer/3.6.0/ControlTier-3.6.0.zip/download ControlTier-3.6.0.zip] [http://sourceforge.net/projects/controltier/files/Installer/3.6.0/ControlTier-3.6.0.zip.md5/download md5] (size: 215886410)

RPM packages:

* [http://sourceforge.net/projects/controltier/files/Installer/3.6.0/ctier-server-3.6.0-1.noarch.rpm/download ctier-server-3.6.0-1.noarch.rpm] [http://sourceforge.net/projects/controltier/files/Installer/3.6.0/ctier-server-3.6.0-1.noarch.rpm.md5/download md5] - server RPM installer (size: 206047591)

* [http://sourceforge.net/projects/controltier/files/Installer/3.6.0/ctier-client-3.6.0-1.noarch.rpm/download ctier-client-3.6.0-1.noarch.rpm] [http://sourceforge.net/projects/controltier/files/Installer/3.6.0/ctier-client-3.6.0-1.noarch.rpm.md5/download md5] -  client RPM installer (size: 44720944)

&lt;includeonly&gt;
See the [[ControlTier 3.6.0#Release Notes|Release Notes]]
&lt;/includeonly&gt;
All ControlTier software releases are available at Sourceforge in the ControlTier project [https://sourceforge.net/projects/controltier/files/ here]
&lt;noinclude&gt;
Once you have downloaded one of the installers, continue to the next step: [[Installation|Installation &amp;rarr;]], or the [[RPM installers|RPM installation &amp;rarr;]].

==Release Notes==

This is the first stable relase of the 3.5/3.6 development line.

Many differences exist between 3.4 and 3.6.  Please see the Upgrading section for more information.  most documentation about 3.5 applies to 3.6.

=== Upgrading from 3.4.x ===

Please see these documents for information on upgrading from 3.4:

* See [[ControlTier 3.6 Upgrading]]
* See [[ControlTier 3.6 Changes]] for information about what has changed since ControlTier 3.4.

===Contributors===

:'''Many thanks to bug filers, mailing list participants, and committers'''

* [[User:Noahcampbell|Noah Campbell]]
* [[User:Ahonor|Alex Honor]]
* [[User:Moses_Lei|Moses Lei]]
* [[User:Gschueler|Greg Schueler]]
* [https://sourceforge.net/users/connary_scott/ Chuck Scott]
* [[User:Anthony|Anthony Shortland]]

Reminder: find us on IRC, Google Groups, and more: [[Community]]

===Documentation===

The ControlTier Wiki is at http://controltier.org/.

== Changes since 3.5.4 ==

=== bugs fixed ===

* {{Bug|3066298}} Standard multi-node site/service dispatching broken  ...
* {{Bug|3064002}} itnav error using JettyCachingLdapLoginModule
* {{Bug|3062940}} Log format wonky on parallel job execution
* {{Bug|3059672}} node-oriented wf job failed nodes list wrong
* {{Bug|3059652}} parallel execution fails
* {{Bug|3059101}} workflow options in defined command args are not expanded
* {{Bug|3058996}} commands with quotes cause errors
* {{Bug|3058264}} pass options to jobref in command sequences
* {{Bug|3067145}} dispatch-command gives &amp;quot;deprecated&amp;quot; warning under 3.5.5
* {{Bug|3063052}} job with resource context WorkflowCommand item fails
* {{Bug|3061428}} v0/simpleTomcat.sh doesn&amp;#039;t work with the RPM install
* {{Bug|3057736}} Make ctl-exec -s execution more reliable
* {{Bug|3054656}} Downloaded Job XML is not well formatted
* {{Bug|3057873}} excption prints stacktrace in all log levels
* {{Bug|3057684}} Workflow creates temp files unnecessarily
* {{Bug|3067128}} load-resources fails to resolve the relative  repo URL ...
* {{Bug|3061524}} Database Exceptions on Jetty Stop

=== Features ===

* {{Feature|3063871}} Update execution output page display
* {{Feature|3058457}} Add tree when creating Job Reference in Workflow
* {{Feature|3058261}} Move notification and schedule lower in job form

&lt;/noinclude&gt;
&lt;noinclude&gt;[[Category:Releases]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>ControlTier 3.6.1</title>
    <id>2225</id>
    <revision>
      <id>16392</id>
      <timestamp>2012-02-20T12:58:36Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Undo revision 16102 by [[Special:Contributions/WalterLucchesi|WalterLucchesi]] ([[User talk:WalterLucchesi|talk]]) Reverted SPAM bot edits</comment>
      <text xml:space="preserve">&lt;noinclude&gt;==Download==&lt;/noinclude&gt;
&lt;includeonly&gt;The latest release is: '''3.6.1'''
&lt;/includeonly&gt;
[http://sourceforge.net/projects/controltier/files/Installer/3.6.1 all files]

ZIP installer

* [http://sourceforge.net/projects/controltier/files/Installer/3.6.1/ControlTier-3.6.1.zip/download ControlTier-3.6.1.zip] [http://sourceforge.net/projects/controltier/files/Installer/3.6.1/ControlTier-3.6.1.zip/download md5] (size: 217433154)

RPM packages

* [http://sourceforge.net/projects/controltier/files/Installer/3.6.1/ctier-client-3.6.1-1.noarch.rpm/download ctier-client-3.6.1-1.noarch.rpm] [http://sourceforge.net/projects/controltier/files/Installer/3.6.1/ctier-client-3.6.1-1.noarch.rpm/download md5] (size: 44496858)

* [http://sourceforge.net/projects/controltier/files/Installer/3.6.1/ctier-server-3.6.1-1.noarch.rpm/download ctier-server-3.6.1-1.noarch.rpm] [http://sourceforge.net/projects/controltier/files/Installer/3.6.1/ctier-server-3.6.1-1.noarch.rpm/download md5] (size: 206603428)

CTL standalone packages:

* [http://sourceforge.net/projects/controltier/files/Installer/3.6.1/ctl-dispatch-3.6.1.zip/download ctl-dispatch-3.6.1.zip] [http://sourceforge.net/projects/controltier/files/Installer/3.6.1/ctl-dispatch-3.6.1.zip/download md5] (size: 43063819)

* [http://sourceforge.net/projects/controltier/files/Installer/3.6.1/commander-extension-3.6.1.jar/download commander-extension-3.6.1.jar] [http://sourceforge.net/projects/controltier/files/Installer/3.6.1/commander-extension-3.6.1.jar/download md5] (size: 5879029)

Alternatively, you may install by following the instructions at the [http://repo.controltier.org ControlTier yum repository].

&lt;includeonly&gt;
See the [[ControlTier 3.6.1#Release Notes|Release Notes]]
&lt;/includeonly&gt;
All ControlTier software releases are available at Sourceforge in the ControlTier project [https://sourceforge.net/projects/controltier/files/ here]

&lt;noinclude&gt;

Once you have downloaded one of the installers, continue to the next step: [[Installation|Installation &amp;rarr;]], or the [[RPM installers|RPM installation &amp;rarr;]].

==Release Notes==

The ControlTier project is pleased to announce ControlTier 3.6.1. ControlTier is an open source, cross-platform build and deployment automation framework. ControlTier can help you to coordinate and scale service management and administration activities across multiple nodes and application tiers.

This is the first maintenance release of the 3.6 stable line. This release adds a large number of bugfixes as well as new module features.

===Contributors===

:'''Many thanks to bug filers, mailing list participants, and committers'''

Coders:

* [[User:noahcampbell|Noah Campbell]]
* [[User:Moses_Lei|Moses Lei]]
* [[User:Gschueler|Greg Schueler]]
* [https://sourceforge.net/users/connary_scott/ Chuck Scott]
* [[User:Anthony|Anthony Shortland]]

Patches:

* Adrian Howchin
* Miguel Lamy
* Reigner Yrastorza

Reminder: find us on IRC, Google Groups, and more: [[Community]]

===Documentation===

The ControlTier Wiki is at http://controltier.org/.

== Changes since 3.6.0 ==

=== Bugs fixed ===
* {{bug|3408479}} framework.extensions.dir being ignored if CTL_HOME set
* {{bug|3396786}} Error handler for static commands is missing module=&quot;foo&quot;
* {{bug|3392167}} Fix Package get to avoid breaking on partial files
* {{bug|3381326}} ctier-client RPM: &quot;warning: group {ctier} does not exist&quot;
* {{bug|3338717}} java.io.tmpdir should be changed from /tmp to avoid conflict
* {{bug|3338384}} archive-resources command fails to find module.properties
* {{bug|3317601}} &amp;quot;warning: user builduser does not exist&amp;quot; on RPM install
* {{bug|3317413}} Node level command executions fails
* {{bug|3315897}} Build library does not package extensions properly
* {{bug|3308587}} ctlcenter audit log should be turned on by default
* {{bug|3307602}} Generalize JBossServer up/down assertion checks
* {{bug|3277881}} CruiseControlService module broken under 3.6.0
* {{bug|3204649}} Mediator dispatchCmd fails with &amp;quot;No matched nodes: null&amp;quot;
* {{bug|3174607}} Datasource template does not respect min and max attributes
* {{bug|3169871}} find-resources output doesn&amp;#039;t work with load-resources
* {{bug|3156653}} moddav get fails for Windows paths
* {{bug|3156064}} generate-environment fails with &amp;quot;mixed&amp;quot; paths
* {{bug|3150687}} installJBpmIntoJBoss command fails to find database type
* {{bug|3132815}} JBossServer#waitforStopEvent does not work on Solaris
* {{bug|3132812}} Packages should be allowed to have Package children
* {{bug|3117142}} /opt/ctier/ctl is not group-writable
* {{bug|3116936}} 3.6.0 tries to install node setting resources?
* {{bug|3107204}} ProjectBuilder does not support Builders-repoImport
* {{bug|3106788}} org.hibernate.HibernateException: could not determine type o
* {{bug|3081082}} ApacheSystemService deploy fails on permissions problems
* {{bug|3076820}} Loopback mounted Linux ISO appear to be corrupted
* {{bug|3075722}} Yum update/install fails due to use of YumRpm file name
* {{bug|3068175}} framework.ssh.timeout causes commands to fail unnecessarily
* {{bug|3067937}} apache mod_dav server errors

=== Features ===
* {{feature|3392173}} Add support for setting HTTP max threads ...
* {{feature|3392171}} Add support for checking for startup errors
* {{feature|3362030}} Add basic support for integrating with EC2 instances
* {{feature|3317611}} Add ability to dispatch Site-like commands using Node
* {{feature|3315967}} Update Commander for Workbench-less/S3 operations
* {{feature|3315875}} Update ctl-dispatch to support Workbench-less/S3 operations
* {{feature|3315847}} Update Elements library to support Workbench-less/S3 mode
* {{feature|3315844}} Update the Element library to support Workbench-less/S3 mode
* {{feature|3315752}} Update the Core library to support Workbench-less/S3 mode
* {{feature|3315748}} Add S3 support to the AWS module library
* {{feature|3291471}} Allow ControlTier to act as a Rundeck resource provider
* {{feature|3152648}} System services should be configured to start at boot time
* {{feature|3152585}} The Apache module should support SSL and DAV config
* {{feature|3131749}} Add support for &amp;quot;jbosssvc.exe&amp;quot; Windows service operation
* {{feature|3118727}} Add support for running Active MQ as a Windows service
* {{feature|3105454}} Add support for Redhat/JBoss jBPM 
* {{feature|3082435}} Add support for a web-based Subversion server


&lt;/noinclude&gt;
&lt;noinclude&gt;[[Category:Releases]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>ControlTier 3.6 Changes</title>
    <id>1911</id>
    <revision>
      <id>16400</id>
      <timestamp>2012-02-20T13:08:50Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Undo revision 15483 by [[Special:Contributions/Elenilowery|Elenilowery]] ([[User talk:Elenilowery|talk]]) Reverted SPAM bot edits</comment>
      <text xml:space="preserve">This document describes changes from ControlTier 3.4.x and is designed to inform a 3.4.x user of pertinent things that have altered in the behavior and architecture of the software.

== Nomenclature ==

3.4.x had a number of overlapping and/or conflicting names for concepts in the system, and we tried to reduce the number of terms used and refine their essential meaning.

To this end, we have tried to eliminate some words and concepts and replace them with better alternatives:

{| class=&quot;wikitable&quot;
! 3.4 Word !! 3.5 Replacement !! context
|-
| resource || '''resource''' || Ant properties, [[#Client-side cache]], [[#Ant tasks]]
|-
| deployment || '''resource''' || [[#Client-side cache]], [[#Ant tasks]]
|-
| object || '''resource''' || Ant properties, [[#Client-side cache]], [[#CLI Tools]], [[#ProjectBuilder]]
|-
| depot || project || GUI tools, CLI tools, Ant properties, [[#Client-side cache]], [[#Ant tasks]]
|}

:'''Note''': not all uses of the deprecated terms may have been replaced yet, but it is our goal to streamline all uses of these terms eventually.

== GUI Tools ==

=== CTL Center ===

The Reportcenter and Jobcenter web apps have been merged into a new UI called Ctl Center.  Once you install the server, you can access this UI at the URL of &lt;code&gt;http://server:port/ctlcenter&lt;/code&gt;.

This tool provides a revamped interface for defining and running Jobs, and integrates the Reportcenter under a page called Reports.  This tool also has a Resources page which lets you peruse the Nodes that are defined for the system.

==== Authorizations ====

The CTL Center tool has a built-in mechanism for defining Authorization for users of the system.

User accounts and authentication has not changed, and is still handled via external configuration of either LDAP or file-based user definitions.

Users of CTL Center have a Profile, and users with &quot;admin&quot; role, can modify and add Profiles under the Admin section of the UI.

Users can be allowed or denied authorization in the following actions:

* Jobs: Create, Read, Update, Delete, Run, Kill
* Events: Create, Read, ''Update*'', ''Delete*''
* Resources: ''Create*'', Read, ''Update*'', ''Delete*''

:'''*''': The current UI does not implement operations that need these authorizations as of version 3.5.2


The [[Acls.xml]] file for CTL still governs at the base level which commands and/or scripts are allowed to be executed by user roles.  The Authorizations in CTL Center additionally govern which actions can be performed in the CTL Center GUI or can be invoked using one of the new [[#CLI Tools]].

==== Job.xml changes ====

The XML created and consumed by CTL Center has some changes from 3.4.

See [[Controltier 3.5 job.xml changes]]

==== Job execution changes ====

All Job executions are now serialized.  This means that only one execution for any Job definition can be running at once.  This was an oft-requested feature, and prevents inadvertent running of the same Job twice.

Note that this doesn't mean that a Defined Command, script, or shell command cannot be run twice at the same time.  It only limits it by Job definition.  So if you have two Jobs with the same command, they could both be run.  It also does not prevent a Run-and-forget Job, or a [[ctl]]/[[ctl-exec]] queued job from running the same defined command or script at the same time.

=== Workbench ===

The Workbench GUI has not altered significantly. One change is that the &quot;Apps...&quot; menu previously shared between Reportcenter, Jobcenter, and Workbench has been removed.  Links to CTL Center and Workbench are available at the top-level context of the ControlTier web server.

== CLI Tools ==

=== Renamed ===

The &lt;code&gt;ctl-project&lt;/code&gt; tool has ben renamed to &lt;code&gt;ctl-project&lt;/code&gt;.  

:See [[ctl-project]].

=== Added ===

Several new CLI tools have been added to the software:

* [[ctl-queue]] - lists all running jobs on the server
* [[ctl-run]] - Runs a Job on the server by name or by ID
* [[ctl-jobs]] - lists Jobs defined on the server, loads job.xml files to the server, and can download job.xml files

=== Modified ===

The [[ctl]] and [[ctl-exec]] tools have been modified to reflect nomenclature changes, and to add additional features.

* &lt;code&gt;ctl&lt;/code&gt;
** the &lt;code&gt;-o object&lt;/code&gt; argument is deprecated and &lt;code&gt;-r resource&lt;/code&gt; should be used instead.

* both &lt;code&gt;ctl&lt;/code&gt; and &lt;code&gt;ctl-exec&lt;/code&gt;
** a new &lt;code&gt;-Q/--queue&lt;/code&gt; flag is available, which sends the execution details to the Central Dispatcher in CTL Center for execution instead of running the command/exec locally.

Example:

   ctl -Q -m textutil -c tail -- -file /logfile

This submits the execution to CTL Center where it is executed like a normal &quot;Run and Forget&quot; job.

* &lt;code&gt;ctl-exec&lt;/code&gt;
** Now all executions through &lt;code&gt;ctl-exec&lt;/code&gt; are logged as Reports in CTL Center

* &lt;code&gt;ctl-project&lt;/code&gt; (formerly ctl-project)
** Supports include, exclude nodedispatch flags to ctl-project. Example: &lt;code&gt;ctl-project -p demo -I .* -X adminhost -a create&lt;/code&gt;


== Client-side cache ==

In ControlTier 3.4, the client-side cache of metadata for a project is called the ''depot'', and lives at this path: &lt;code&gt;$CTL_BASE/projects/&amp;lt;projectname&amp;gt;&lt;/code&gt;.

In 3.5, &quot;depot&quot; has been renamed to &quot;project&quot; to be clearer for new users.  The new cache location is at &lt;code&gt;$CTL_BASE/projects/&amp;lt;projectname&amp;gt;&lt;/code&gt;

=== Structure ===

The structure of a client's ''project'' directory has also changed slightly.

3.4.x paths:

* &lt;code&gt;$CTL_BASE/projects/demo&lt;/code&gt; - base dir for the project &quot;demo&quot;
* &lt;code&gt;$CTL_BASE/projects/demo/resources&lt;/code&gt; - resources directory
* &lt;code&gt;$CTL_BASE/projects/demo/resources/'''type'''&lt;/code&gt; - resources of type '''type''' 
* &lt;code&gt;$CTL_BASE/projects/demo/resources/'''type'''/'''name'''&lt;/code&gt; - object '''name''' of type '''type'''
* &lt;code&gt;$CTL_BASE/projects/demo/resources/'''type'''/'''name'''/var/resource.properties&lt;/code&gt; - properties for the object

3.5 paths:

* &lt;code&gt;$CTL_BASE/projects/demo&lt;/code&gt; - base dir for the project &quot;demo&quot;
* &lt;code&gt;$CTL_BASE/projects/demo/resources&lt;/code&gt; - resources directory
* &lt;code&gt;$CTL_BASE/projects/demo/resources/'''type'''&lt;/code&gt; - resources of type '''type''' 
* &lt;code&gt;$CTL_BASE/projects/demo/resources/'''type'''/'''name'''&lt;/code&gt; - resource '''name''' of type '''type'''
* &lt;code&gt;$CTL_BASE/projects/demo/resources/'''type'''/'''name'''/var/resource.properties&lt;/code&gt; - properties for the resource

=== Resource files ===

3.4 used two types of files to store information about deployments and nodes, both in Java properties format.  In 3.5 we have changed these to use the &quot;Resource XML&quot; (aka &quot;Project XML&quot;) format, and combined them into a single file.

3.4:
* &lt;code&gt;$CTL_BASE/projects/demo/etc/resources.properties&lt;/code&gt; - properties describing object to node mapping (deployments)
* &lt;code&gt;$CTL_BASE/projects/demo/etc/nodes.properties&lt;/code&gt; - properties describing nodes

3.5:
* &lt;code&gt;$CTL_BASE/projects/demo/etc/resources.xml&lt;/code&gt; - Resource XML file describing both Nodes and mapping of installed Resources.

Workbench now generates the resources.xml format into the DAV share, and the ControlTier client can automatically synch this file to its local cache.

If you are not using Workbench, then you can use your existing Resource XML source as-is in this location.

== Modules ==

Some changes to the way Modules work require you to upgrade them.  See [[ControlTier 3.5 Upgrading]].

=== ProjectBuilder ===

ProjectBuilder commands &lt;code&gt;*-resources&lt;/code&gt; have been renamed to &lt;code&gt;*-resources&lt;/code&gt;. Eg (load-resources → load-resources).

The &lt;code&gt;*-jobs&lt;/code&gt; commands are deprecated, you should use the &lt;code&gt;ctl-jobs&lt;/code&gt; CLI tool now.

=== Managed-Entity renamed ===

The &quot;Managed-Entity&quot; module has been renamed to &quot;Module&quot;.  This now serves as the base type for installable control Modules.  A module named &quot;Managed-Entity&quot; still exists to provide backwards compatibility.

=== Elements Modules are separate install ===

The default set of modules for new projects has now been reduced to the &quot;core&quot; modules. 

This excludes the &quot;Elements&quot; modules including many solution modules (such as JBossServer, MySql, etc.)

These modules are now a separate install.  To install them, use the &quot;load-library&quot; command from ProjectBuilder:

  ctl -p demo -m ProjectBuilder -c load-library -- -jar $CTL_HOME/lib/extensions/commander/jars/elements-seed-3.5.2.jar
  
You can also upload them to Workbench in the Admin section of the GUI.  Click on &quot;Admin&quot; and click the &quot;Import Seed&quot; button.  Select the elements-seed-3.5.x.jar and upload it.

== Ant Tasks ==

A number of the CTL and Commander Ant tasks have been modified, mostly to reflect the Nomenclature changes.

Example in the &lt;code&gt;&amp;lt;controller&amp;gt;&lt;/code&gt; task, the context &quot;resourceType&quot;, &quot;resourceName&quot; and &quot;depot&quot; attributes have been replaced with &quot;resourceType&quot;, &quot;resourceName&quot; and &quot;project&quot;: 

&lt;syntaxhighlight&gt;
  &lt;controller&gt;
    &lt;execute&gt;
      &lt;context resourceName=&quot;mock&quot; resourceType=&quot;Service&quot; project=&quot;demo&quot;/&gt;
      &lt;command name=&quot;cmdX&quot;/&gt;
      &lt;arg line=&quot;-arg1 val1 -bool1&quot;/&gt;
    &lt;/execute&gt;
  &lt;/controller&gt;
&lt;/syntaxhighlight&gt;

[[Category:Changes]]</text>
    </revision>
  </page>
  <page>
    <title>ControlTier 3.6 Upgrading</title>
    <id>1909</id>
    <revision>
      <id>16406</id>
      <timestamp>2012-02-20T13:14:11Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Reverted SPAM bot edits</comment>
      <text xml:space="preserve">= Upgrading to ControlTier 3.5 from ControlTier 3.4.x =

== New Projects ==

New Projects will now use the &quot;core&quot; set of modules '''only'''.  

To install the solution modules from the Elements library, see [[ControlTier_3.5_Changes#Elements_Modules_are_separate_install]]

== Modules ==

Ant handlers from 3.4 will have be modified slightly to work in 3.5.

The biggest change is that we have upgraded the bundled Ant version from 1.7.1 to 1.8.1, which causes some incompatibilities with third-party libraries.

# The [http://jwaresoftware.org/wiki/antxtras/home AntXtras library] has been upgraded from version 0.5.1 to 3.0.0b1, meaning that Handlers which declare the AntXtras task/typedefs need to be updated.
# The ant-contrib library has been removed from the default taskdefs for handlers, meaning it now has to be declared explicitly in handlers if the tasks are being used.
# Properties available to ant handlers have been renamed from &lt;code&gt;resource.*&lt;/code&gt; to &lt;code&gt;resource.*&lt;/code&gt;.  The &lt;code&gt;resource.*&lt;/code&gt; namespace is still available for the time being but is deprecated. If you reference these properties in your Ant command handlers, you should transition to using &lt;code&gt;resource.*&lt;/code&gt;.  

=== AntXtras ===

To update the AntXtras declarations, modify your handler xml files:

Change your &lt;code&gt;&lt;project&gt;&lt;/code&gt; declaration to declare the updated namespace. 

From this (3.4):

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
  &lt;project xmlns:ax=&quot;antlib:com.idaremedia.antx&quot; ...&gt;
&lt;/syntaxhighlight&gt;

To this (3.5):

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
  &lt;project xmlns:ax=&quot;antlib:org.jwaresoftware.antxtras&quot; ...&gt;
&lt;/syntaxhighlight&gt;
    
Secondly, change the &lt;code&gt;&lt;taskdef&gt;&lt;/code&gt; for AntXtras from this (3.4):

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
  &lt;taskdef resource=&quot;com/idaremedia/antx/antlib.xml&quot; uri=&quot;ax:/antx.idaremedia.com&quot;/&gt;  
&lt;/syntaxhighlight&gt;
      
To this (3.5):

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
  &lt;taskdef resource=&quot;org/jwaresoftware/antxtras/install/antlib.xml&quot; uri=&quot;ax:/antxtras.jwaresoftware.org&quot;/&gt;
&lt;/syntaxhighlight&gt;
       
See the [http://jwaresoftware.org/wiki/antxtras/home AntXtras website] for more information about how the tasks you may use have changed.

=== ant-contrib ===

'''Use of ant-contrib tasks is deprecated'''.

* Ant-contrib is a very old library that is now somewhat incompatible with Ant 1.8x
* In particular, the &lt;code&gt;&amp;lt;var unset=&quot;true&quot;&amp;gt;&lt;/code&gt; task no longer works in Ant 1.8.  If you used this task before, you should update your Ant command handlers.
** A useful alternative is the [http://ant.apache.org/manual/Tasks/local.html Local task] built-in to Ant 1.8.

We are still distributing the library with ControlTier, however the ant-contrib taskdefs are '''no longer implicitly defined for Ant command handlers in 3.5'''.  If you still use the ant-contrib tasks (such as &lt;code&gt;&lt;if&gt;..&lt;/if&gt;&lt;/code&gt;) then you need to declare the ant-contrib taskdef to use it.  

We recommend that you do this in the &lt;code&gt;lib/command.xml&lt;/code&gt; file which by default is automatically included at the top of your Ant command handlers.

Simply add this at the top of the &lt;code&gt;&lt;project&gt;&lt;/code&gt; section:

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
       &lt;!-- declare ant-contrib task defs--&gt; 
       &lt;taskdef resource=&quot;net/sf/antcontrib/antcontrib.properties&quot;/&gt;
&lt;/syntaxhighlight&gt;

=== resource.* and resource.attribute.* properties ===

The &lt;code&gt;resource.&lt;/code&gt; property namespace has been renamed to &lt;code&gt;resource.&lt;/code&gt;.  

&lt;code&gt;resource.&lt;/code&gt; remains for compatibility for the time being, but is deprecated.

Example: if you use the &lt;code&gt;defaultproperty&lt;/code&gt; in your Type.xml for a Command's opts like this (3.4):

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;opt parameter=&quot;url&quot; description=&quot;the repo url&quot; required=&quot;true&quot; property=&quot;opts.url&quot; type=&quot;string&quot; defaultproperty=&quot;resource.package-repo-url&quot;/&gt;
&lt;/syntaxhighlight&gt;

You should change it to this (3.5): 

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;opt parameter=&quot;url&quot; description=&quot;the repo url&quot; required=&quot;true&quot; property=&quot;opts.url&quot; type=&quot;string&quot; defaultproperty=&quot;resource.package-repo-url&quot;/&gt;
&lt;/syntaxhighlight&gt;

Similarly, if you reference attribute values using &lt;code&gt;resource.attribute.X&lt;/code&gt;, it should be changed to &lt;code&gt;resource.attribute.X&lt;/code&gt;.

[[Category:Upgrading]]</text>
    </revision>
  </page>
  <page>
    <title>ControlTier Administration</title>
    <id>123</id>
    <redirect />
    <revision>
      <id>10758</id>
      <timestamp>2009-12-12T21:23:28Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[Category:Installation]]</comment>
      <text xml:space="preserve">#REDIRECT [[:Category:Installation]]</text>
    </revision>
  </page>
  <page>
    <title>ControlTier CI Loop</title>
    <id>2161</id>
    <revision>
      <id>16644</id>
      <timestamp>2012-02-23T15:41:07Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Undo revision 15490 by [[Special:Contributions/Detraransdell|Detraransdell]] ([[User talk:Detraransdell|talk]]) Reverting SPAM bot edits</comment>
      <text xml:space="preserve">Setting up the ControlTier Continuous Integration Build

== Assumptions: ==

'''JAVA_HOME'''=/usr/lib/jvm/java-1.6.0 as a result of the installation of rundeck and we will be using this java for building, running Jenkins, and running Rundeck

This CI Environment will be using  [http://jenkins-ci.org/ Jenkins] for the Continuous Integration.   

[http://rundeck.org/ rundeck] documentation will be added for further automation with respect to the [https://sourceforge.net/projects/controltier/ ControlTier release to SourceForge]


== Install rundeck (from the [http://rundeck.org/downloads.html downloads]): ==
* Install the Rundeck yum repo configuration:
 &lt;nowiki&gt;
[root@build ~]# rpm -Uvh http://rundeck.org/latest.rpm
Retrieving http://rundeck.org/latest.rpm
Preparing...                ########################################### [100%]
   1:rundeck-repo           ########################################### [100%]
&lt;/nowiki&gt;
* Install Rundeck:
 &lt;nowiki&gt;
[root@build ~]# yum install -y rundeck
Loaded plugins: fastestmirror
Loading mirror speeds from cached hostfile
Setting up Install Process
Resolving Dependencies
--&gt; Running transaction check
---&gt; Package rundeck.noarch 0:1.2.0-0.43 set to be updated
--&gt; Processing Dependency: rundeck-config for package: rundeck
--&gt; Running transaction check
---&gt; Package rundeck-config.noarch 0:1.2.0-0.43 set to be updated
--&gt; Finished Dependency Resolution

Dependencies Resolved

=================================================================================================================================================================================================
 Package                                          Arch                                     Version                                       Repository                                         Size
=================================================================================================================================================================================================
Installing:
 rundeck                                          noarch                                   1.2.0-0.43                                    rundeck-release                                    44 M
Installing for dependencies:
 rundeck-config                                   noarch                                   1.2.0-0.43                                    rundeck-release                                   7.4 k

Transaction Summary
=================================================================================================================================================================================================
Install      2 Package(s)         
Update       0 Package(s)         
Remove       0 Package(s)         

Total download size: 44 M
Downloading Packages:
(1/2): rundeck-config-1.2.0-0.43.noarch.rpm                                                                                                                               | 7.4 kB     00:00     
(2/2): rundeck-1.2.0-0.43.noarch.rpm                                                                                                                                      |  44 MB     00:07     
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Total                                                                                                                                                            5.7 MB/s |  44 MB     00:07     
Running rpm_check_debug
Running Transaction Test
Finished Transaction Test
Transaction Test Succeeded
Running Transaction
  Installing     : rundeck                                                                                                                                                                   1/2 
  Installing     : rundeck-config                                                                                                                                                            2/2 

Installed:
  rundeck.noarch 0:1.2.0-0.43                                                                                                                                                                    

Dependency Installed:
  rundeck-config.noarch 0:1.2.0-0.43                                                                                                                                                             

Complete!
&lt;/nowiki&gt;
* Configure the rundeck user account for appropriate access privileges, become the rundeck user and verify access:
 &lt;nowiki&gt;
[[root@build ~]# usermod -G root,wheel rundeck
[root@build ~]# groups rundeck
rundeck : rundeck root wheel
[root@build ~]# grep ^%wheel /etc/sudoers
%wheel	ALL=(ALL)	NOPASSWD: ALL
[root@build ~]# chmod 440  /etc/shadow
[root@build ~]# su - rundeck
[rundeck@build ~]$ sudo id
uid=0(root) gid=0(root) groups=0(root),1(bin),2(daemon),3(sys),4(adm),6(disk),10(wheel)
&lt;/nowiki&gt;
* Create the a public/private key pair for the rundeck user:
 &lt;nowiki&gt;
[rundeck@build ~]$ ssh-keygen -t dsa -N ''
Generating public/private dsa key pair.
Enter file in which to save the key (/home/rundeck/.ssh/id_dsa): 
Your identification has been saved in /home/rundeck/.ssh/id_dsa.
Your public key has been saved in /home/rundeck/.ssh/id_dsa.pub.
The key fingerprint is:
5c:bf:e9:6e:2b:19:54:c8:62:64:6f:a8:ed:38:e1:1c rundeck@build.ctier.dtosolutions.com
&lt;/nowiki&gt;
== Install Jenkins using the redhat rpm (from the [http://jenkins-ci.org/redhat/ jenkins downloads]): ==
* Download the rpm and install (example references version 1.403-1.1) 
 &lt;nowiki&gt;
[rundeck@build ~]$ wget -O /tmp/jenkins.rpm http://jenkins-ci.org/latest/redhat/jenkins-1.403-1.1.noarch.rpm
--2011-03-24 13:23:36--  http://jenkins-ci.org/latest/redhat/jenkins.rpm
Resolving jenkins-ci.org... 192.18.49.133
Connecting to jenkins-ci.org|192.18.49.133|:80... connected.
HTTP request sent, awaiting response... 302 Found
Location: http://jenkins-ci.org/downloads/redhat/jenkins-1.403-1.1.noarch.rpm [following]
--2011-03-24 13:23:37--  http://jenkins-ci.org/downloads/redhat/jenkins-1.403-1.1.noarch.rpm
Connecting to jenkins-ci.org|192.18.49.133|:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 38821047 (37M) [text/plain]
Saving to: `/tmp/jenkins.rpm'

100%[=======================================================================================================================================================&gt;] 38,821,047   962K/s   in 40s     

2011-03-24 13:24:16 (957 KB/s) - `/tmp/jenkins.rpm' saved [38821047/38821047]

[rundeck@build ~]$ rpm -qp /tmp/jenkins.rpm 
jenkins-1.403-1.1

[rundeck@build ~]$ sudo rpm -i /tmp/jenkins.rpm
&lt;/nowiki&gt;
*Adjust jenkins configuration to run as rundeck 
 &lt;nowiki&gt;
[rundeck@build ~]$ sudo vi /etc/sysconfig/jenkins 
[rundeck@build ~]$ sudo grep JENKINS_USER /etc/sysconfig/jenkins
JENKINS_USER=&quot;rundeck&quot;
[rundeck@build ~]$ sudo chown -R rundeck:rundeck /var/lib/jenkins
[rundeck@build ~]$ sudo chown -R rundeck:rundeck /var/log/jenkins
&lt;/nowiki&gt;
* Optional, move /var/lib/jenkins to a decent storage partition:
 &lt;nowiki&gt;
[root@build lib]# pwd
/var/lib
[root@build lib]# mv jenkins /mnt
[root@build lib]# ln -s /mnt/jenkins 
&lt;/nowiki&gt;
* Start the Jenkins server:
 &lt;nowiki&gt;
[rundeck@build ~]$ sudo /etc/rc.d/init.d/jenkins start
Starting Jenkins                                            [  OK  ]
&lt;/nowiki&gt;
* Configure Jenkins to use local account authentication and add local account(s) for Jenkins job management
** Configure Jenkins via the UI, example url:  http://localhost:8080/configure and check &quot;Enable security&quot;, select &quot;Unix user/group database&quot; and for authorization, select &quot;Logged-in users can do anything&quot; and Save   
 [[File:01_hudsonConfigureSecurity.jpg|hudsonConfigureSecurity]]
** Add local accounts if necessary:
 &lt;nowiki&gt;
[rundeck@build ~]$ sudo /usr/sbin/useradd chuck
[rundeck@build ~]$ sudo passwd chuck
Changing password for user chuck.
New UNIX password: 
Retype new UNIX password: 
passwd: all authentication tokens updated successfully.
&lt;/nowiki&gt;
** Verify ability to login
[[File:01_hudsonLogin.jpg|hudsonLoginPage]] [[File:02_hudsonLogin.jpg|exampleUserLoggedIn]]

== Configure CI  jobs: ==
Refer to the jenkins utility script [https://controltier.svn.sourceforge.net/svnroot/controltier/branches/controltier-3-6-support/ci/loadHudsonJob.sh loadHudsonJob.sh] which automates jobs in jenkins config xml format
Additionally, refer to the config xml files in [https://controltier.svn.sourceforge.net/svnroot/controltier/branches/controltier-3-6-support/ci/hudson hudson ci] where the following config xml files are:
&lt;pre&gt;
ControlTier-3.6.1.zip.config.xml
ControlTier-3.6.1-client.rpm.config.xml	
ControlTier-3.6.1-server.rpm.config.xml
&lt;/pre&gt;
* Load ControlTier  jobs:
 &lt;nowiki&gt;
[chuck@build controltier-3-6-support chuck]$ cat ControlTier-3.6.1.zip.config.xml | ./loadJob.sh  ControlTier-3.6.1.zip chuck myPassword
[chuck@build controltier-3-6-support chuck]$ cat ControlTier-3.6.1-client.rpm.config.xml  | ./loadJob.sh  ControlTier-3.6.1-client.rpm  chuck myPassword
[chuck@build controltier-3-6-support chuck]$ cat ControlTier-3.6.1-server.rpm.config.xml  | ./loadJob.sh  ControlTier-3.6.1-server.rpm  chuck myPassword
&lt;/nowiki&gt;
[[File:03_hudsonJobsLoaded.jpg|hudsonJobsLoaded]]</text>
    </revision>
  </page>
  <page>
    <title>ControlTier Demo</title>
    <id>1288</id>
    <redirect />
    <revision>
      <id>7603</id>
      <timestamp>2009-07-25T19:10:21Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[Dukes Bank J2EE examples]]</comment>
      <text xml:space="preserve">#REDIRECT [[Dukes Bank J2EE examples]]</text>
    </revision>
  </page>
  <page>
    <title>ControlTier Environment Variables</title>
    <id>21</id>
    <revision>
      <id>16401</id>
      <timestamp>2012-02-20T13:10:36Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Undo revision 15493 by [[Special:Contributions/Detraransdell|Detraransdell]] ([[User talk:Detraransdell|talk]]) Reverted SPAM bot edits</comment>
      <text xml:space="preserve">&lt;noinclude&gt;&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Installation&lt;/categorytree&gt;&lt;/noinclude&gt;

===JAVA_HOME===
* Be aware that ControlTier requires the Java Development Kit to be installed. A JRE is not enough.
* If you have previously set the JRE_HOME variable, you will need to reset it to point to JAVA_HOME (or the same path)

=== Unix ===
On Unix/Linux, a file called .ctierrc will be generated in the home directory of the user that runs the ControlTier installer. This file contains the environment variables that your shell needs to run the ControlTier client and server. 

Add the following to your shell profile (e.g. &quot;$HOME/.bashrc&quot;). Be sure the shell profile you choose is read for both interactive and non-interactive shells, so &quot;$HOME/.profile&quot; may not be a good choice.
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
if [ -f ~/.ctierrc ]; then
   . ~/.ctierrc
else
   echo ~/.ctierrc not found 1&gt;&amp;2
fi
&lt;/syntaxhighlight&gt;
Source ~/.ctierrrc, for the settings to take immediate effect.

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ . ~/.bashrc
&lt;/syntaxhighlight&gt;

====Bash users====
Bash users should source the .ctierrc file from their .bashrc file. 
Quoting from the bash man page:
&lt;blockquote&gt;Bash attempts to determine when it is being run  by  the  remote  shell  daemon, in this case sshd. If bash determines it is being run by sshd, it reads and executes commands from ~/.bashrc, if that file exists and  is readable. &lt;/blockquote&gt;
The .bashrc file is read during remote SSH connections which are non-interactive. The  .bash_profile  is only read for interactive logins. The .bash_profile can in turn source the .bashrc file.
Here's a recommended ordering for the file sourcing:

&lt;blockquote&gt;.bash_profile &amp;rarr; .bashrc &amp;rarr; .ctierrc&lt;/blockquote&gt;

See the [http://www.gnu.org/software/bash/manual/bashref.html bash man page] for more information. The [http://www.gnu.org/software/bash/manual/bashref.html#Bash-Startup-Files Bash Startup Files] section gives an in depth explanation.

=== Windows ===
On Windows systems the installer creates a file called ctier.bat in the user's home folder (probably under C:\Documents and Settings). Running this batch file sets the necessary variables and PATH for ControlTier's use:

&lt;syntaxhighlight lang=&quot;dos&quot;&gt;C:\&gt;&quot;%HOMEPATH%\ctier.bat&quot;&lt;/syntaxhighlight&gt;
''output''
&lt;syntaxhighlight lang=&quot;dos&quot;&gt;
C:\&gt;set CTIER_ROOT=C:\ctier
C:\&gt;set JETTY_HOME=C:\ctier\pkgs\jetty-6.1
C:\&gt;set CTL_HOME=C:\ctier\pkgs\ctl-1.1
C:\&gt;set CTL_BASE=C:\ctier\ctl
C:\&gt;set JAVA_HOME=C:\ctier\pkgs\j2sdk1.5.0_15
C:\&gt;set Path=C:\ctier\pkgs\jobcenter-1.0\bin;C:\ctier\pkgs\ctl-1.1\bin;C:\ctier\workbench\bin;C:\ctier\pkgs\jobcenter-1.0\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\ctier\pkgs\GRAPHV~1.14\Graphviz\bin;;C:\ctier\pkgs\Graphviz\bin;;C:\ctier\GRAPHV~1.14\Graphviz\bin;;C:\ctier\pkgs\GRAPHV~1.14\Graphviz\bin;;C:\ctier\pkgs\GRAPHV~1.1\Graphviz\bin;&quot;C:\ctier\pkgs\graphviz-2.16\Bin&quot;;
&lt;/syntaxhighlight&gt;


===PATH===
Be sure the PATH includes the executables in $CTL_HOME/bin otherwise you might see an error like so:
&lt;pre&gt;
bash: ctl: command not found
&lt;/pre&gt;
Sourcing the .ctierrc file should insure the PATH is set correctly. Check remote hosts like so:
&lt;pre&gt;
ssh remotehost which ctl
&lt;/pre&gt;
Be sure a path is returned otherwise, the PATH is not set correctly.

&lt;noinclude&gt;
{{Installation/navbox}}
[[Category:Installation requirements]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>ControlTier Improvement Process</title>
    <id>404</id>
    <redirect />
    <revision>
      <id>11689</id>
      <timestamp>2009-12-16T16:57:14Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[Category:ControlTier Improvement Process]]</comment>
      <text xml:space="preserve">#REDIRECT [[:Category:ControlTier Improvement Process]]</text>
    </revision>
  </page>
  <page>
    <title>ControlTier Server</title>
    <id>273</id>
    <redirect />
    <revision>
      <id>1198</id>
      <timestamp>2008-12-30T22:50:03Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>[[ControlTier Server]] moved to [[ControlTier server]]</comment>
      <text xml:space="preserve">#REDIRECT [[ControlTier server]]</text>
    </revision>
  </page>
  <page>
    <title>ControlTier TNG</title>
    <id>1724</id>
    <redirect />
    <revision>
      <id>11694</id>
      <timestamp>2009-12-16T16:59:25Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[Category:ControlTier TNG]]</comment>
      <text xml:space="preserve">#REDIRECT [[:Category:ControlTier TNG]]</text>
    </revision>
  </page>
  <page>
    <title>ControlTier Vandelay</title>
    <id>1727</id>
    <redirect />
    <revision>
      <id>11700</id>
      <timestamp>2009-12-16T17:03:34Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[Category:ControlTier Vandelay]]</comment>
      <text xml:space="preserve">#REDIRECT [[:Category:ControlTier Vandelay]]</text>
    </revision>
  </page>
  <page>
    <title>ControlTier and ATG</title>
    <id>887</id>
    <redirect />
    <revision>
      <id>4821</id>
      <timestamp>2009-05-02T05:47:16Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <comment>[[ControlTier and ATG]] moved to [[ATG demo]]: more descriptive</comment>
      <text xml:space="preserve">#REDIRECT [[ATG demo]]</text>
    </revision>
  </page>
  <page>
    <title>ControlTier client</title>
    <id>272</id>
    <revision>
      <id>16645</id>
      <timestamp>2012-02-23T15:41:19Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Undo revision 15491 by [[Special:Contributions/Detraransdell|Detraransdell]] ([[User talk:Detraransdell|talk]]) Reverting SPAM bot edits</comment>
      <text xml:space="preserve">A ControlTier client is an installation of the ControlTier [[command dispatcher]] and any library or extensions. A ControlTier client is the target of management requests from the [[ControlTier server]], the centralized administrative host. See the [[Architecture]] page for more information about the technical components.

To get version information about your client, run: ctl -h:
&lt;pre&gt;
...
[CTL version 1.4.2 (1621)]
&lt;/pre&gt;
The version (eg, 1.4.2) and build number (eg, 1621) will be printed on the last line.

See the [[:Category:Installation]] for information about client software installation.</text>
    </revision>
  </page>
  <page>
    <title>ControlTier installer</title>
    <id>286</id>
    <redirect />
    <revision>
      <id>4676</id>
      <timestamp>2009-05-01T02:03:00Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <comment>Redirect to [[Installation]], no useful info on this page</comment>
      <text xml:space="preserve">#REDIRECT [[Installation]]</text>
    </revision>
  </page>
  <page>
    <title>ControlTier server</title>
    <id>270</id>
    <revision>
      <id>11256</id>
      <timestamp>2009-12-14T19:25:49Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">The ControlTier Server is where the webapp container and the ControlTier webapps are hosted. It is also the administrative host from which centralized distributed management actions are performed and thus also uses the [[ControlTier client]]. See the [[Architecture]] page for more information about the technical components that comprise the server.

[[Image:Landingpage.png|thumb|Landing page]]

As of version 3.2, the following webapps will be installed:
* [[WebDAV]]
* [[Jobcenter]]
* [[Reportcenter]]
* [[Workbench]]

To get information about the software versions running on your server, visit the [[server landing page]] page (e.g., http://adminhost:8080).

See [[:Category:Installers]] for information about installing the software.</text>
    </revision>
  </page>
  <page>
    <title>ControlTier server logs</title>
    <id>1677</id>
    <redirect />
    <revision>
      <id>11289</id>
      <timestamp>2009-12-14T19:50:13Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>moved [[ControlTier server logs]] to [[Server logs]]</comment>
      <text xml:space="preserve">#REDIRECT [[Server logs]]</text>
    </revision>
  </page>
  <page>
    <title>Controller Task Reference</title>
    <id>136</id>
    <revision>
      <id>16479</id>
      <timestamp>2012-02-23T14:33:00Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Undo revision 15479 by [[Special:Contributions/Pierrehernandez|Pierrehernandez]] ([[User talk:Pierrehernandez|talk]]) Removed SPAM bot edit</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Tasks&lt;/categorytree&gt;

      &lt;p&gt;
	Takes the specified execute action and its related elements and
	performs the action. The controller task is the primary
	Ant interface to interact with the resources accessible via the [[Command dispatcher]]. 
      &lt;/p&gt;

Since CTL 1.0

==Parameters==

      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;ctl_base&lt;/td&gt;&lt;td&gt;The CTL_BASE directory path&lt;/td&gt;&lt;td&gt;No.&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;module_base&lt;/td&gt;&lt;td&gt;The module base directory path&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;projects_base&lt;/td&gt;&lt;td&gt;The objects depot base directory path&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;
&lt;!--
	&lt;tr&gt;
	  &lt;td&gt;resultproperty&lt;/td&gt;&lt;td&gt;The property to store the
	  success/failure status&lt;/td&gt;&lt;td&gt;No. Defaults to property
	  named result&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;outputproperty&lt;/td&gt;&lt;td&gt;The property to store the output
	  of the action.&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;
--&gt;
      &lt;/table&gt;

==Parameters specified as nested element==

      &lt;p&gt;&lt;strong&gt;execute&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
	If an [[ExecuteAction Type Reference|execute]]
	element is specified, the specified command will be executed
	in the specified context.
      &lt;/p&gt;


==Examples==

Executes the Stop command in the current &lt;em&gt;object&lt;/em&gt; context.

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
        &lt;controller&gt;
          &lt;execute&gt;
            &lt;context depot=&quot;${project.name}&quot;
                     resourceType=&quot;${context.type}&quot;
                     resourceName=&quot;${context.name}&quot;/&gt;
            &lt;command name=&quot;Stop&quot;/&gt;
          &lt;/execute&gt;
        &lt;/controller&gt;
&lt;/syntaxhighlight&gt;

Call the [[netutil]] listening command in a &lt;em&gt;static&lt;/em&gt; context for the specifed port using localdispatch.
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
    &lt;controller&gt;
      &lt;execute strategy=&quot;localdispatch&quot;&gt;
        &lt;context depot=&quot;${context.depot}&quot;/&gt;
        &lt;command name=&quot;listening&quot; module=&quot;netutil&quot;/&gt;
        &lt;arg line=&quot;-port 80&quot;/&gt;
      &lt;/execute&gt;
    &lt;/controller&gt;
&lt;/syntaxhighlight&gt;

&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Command Dispatcher Ant Tasks]]</text>
    </revision>
  </page>
  <page>
    <title>Controltier 3.5 job.xml changes</title>
    <id>1927</id>
    <revision>
      <id>12895</id>
      <timestamp>2010-06-18T18:56:13Z</timestamp>
      <contributor>
        <username>Gschueler</username>
        <id>8</id>
      </contributor>
      <text xml:space="preserve">{{Version|3.5.2}}

= Jobs.xml Changes =

(Since 3.5.2)

The Jobs.xml format for ControlTier 3.5 has been updated and had additional features added since 3.4.

'''The new syntax is defined in the [[Job-v20.xml]] document.'''

* the &quot;depot&quot; context item is renamed to &quot;project&quot;
* A set of predefined, or remotely loaded, option values can be assigned to a Command option for Defined Command jobs, as well as define a regular expression to validate the input.
* Email notifications can be defined to send success/failure messages to recipients when the Job finishes
* A Job can be defined as a Workflow &quot;sequence&quot;, providing a list of commands, scripts, or other Jobs to invoke in order


== Project context ==

The &quot;depot&quot; context element has been renamed to &quot;project&quot;.  However, backwards compatibility is retained.

&lt;syntaxhighlight&gt;
   &lt;job&gt;
       ...
       &lt;context&gt;
           &lt;project&gt;...&lt;/project&gt;
       &lt;/context&gt;
   &lt;/job&gt;
&lt;/syntaxhighlight&gt;
 
== Options for Job definitions ==

{{Feature|2992539}}

Job can now include a set of definitions to indicate an allowed set of user input values for the Options for the underlying Defined Command.

This allows you to further restrict/validate the input arguments to the command run by the Job when the Job is run via the GUI.

In addition to allowing you to specify a static list of allowed values, you can
specify a remote URL to retrieve the values from.  This URL must return JSON data (either 
a simple list of string values, or a map of value to label strings).

=== definition ===

&lt;syntaxhighlight&gt;
   &lt;job&gt;
       ...
       &lt;context&gt;
           &lt;project&gt;...&lt;/project&gt;
           &lt;command&gt;...&lt;/command&gt;
           &lt;name&gt;...&lt;/name&gt;
           &lt;type&gt;...&lt;/type&gt;
           &lt;options&gt;
                &lt;!-- specify a set of options here --&gt;
                &lt;option.../&gt;
           &lt;/options&gt;
       &lt;/context&gt;
   &lt;/job&gt;
&lt;/syntaxhighlight&gt;

Each Option definition has these attributes:

{|  class=&quot;wikitable&quot; 
! name !! description !! required
|-
| name || Name of the option || true
|-
| value || Default value or default selection || false
|-
| values || Comma-separated list of values to allow the user to choose from || false
|-
| valuesUrl || URL to a remote service providing JSON data to supply the list of values. See [[#Remote option values]] || false
|-
| valuesenforced || true/false: if true, don't allow simple textfield input, and only present the list of allowed values.  If false, include a textfield for arbitrary user input || true
|-
| regex || A regular expression to restrict allowed user input, valid only when valuesenforced is 'false' || false
|}

=== Examples===

&lt;syntaxhighlight&gt;
    &lt;option name=&quot;buildstamp&quot; value=&quot;789&quot; values=&quot;123,456,789&quot; enforcedvalues=&quot;false&quot; regex=&quot;^\d+$&quot;/&gt;
&lt;/syntaxhighlight&gt;

Specifies the default value of &quot;789&quot;, three values to populate the select menu, and a regular expression to match all entry values.  Since enforcedvalues=&quot;false&quot;, there will be textfield for the user to fill out.

&lt;syntaxhighlight&gt;
    &lt;option name=&quot;buildstamp&quot; valuesUrl=&quot;http://test.com:9090/myoptions?option=${option.name}&quot; enforcedvalues=&quot;true&quot; /&gt;
&lt;/syntaxhighlight&gt;

Specifies a remote URL to load the option values from, and makes them enforced.

=== Run Job form ===

If you specify the &quot;values&quot; attribute, you will see a select menu next to the option when you run the Job:

[[Image:options-list1.png]]

If &quot;valuesenforced&quot; is &quot;true&quot;, then only the select menu will be available:

[[Image:options-list-enforced1.png]]

=== Remote option values ===

If the &quot;valuesUrl&quot; is specified for an Option, then the list of allowed values is retrieved from this URL.

The format of the response is expected to be [http://www.json.org/ JSON data].

Two styles of return data are supported:

''value list'': A list of values.  

Example JSON:
&lt;syntaxhighlight lang=&quot;javascript&quot;&gt;
 [&quot;x value for test&quot;,&quot;y value for test&quot;]
&lt;/syntaxhighlight&gt;

This will populate the select menu with the given values.

[[Image:remote-option-values1.png]]

''value/label map'': a map of values with label text.

Example JSON:
&lt;syntaxhighlight lang=&quot;javascript&quot;&gt; 
 {&quot;x value&quot;:&quot;X Label&quot;,&quot;y value&quot;:&quot;Y Label&quot;, &quot;a value&quot;:&quot;A Label&quot;}
&lt;/syntaxhighlight&gt;

This will show only the labels, but the corresponding value will be used in the option.

[[Image:remote-option-values2.png]]

==== Variable expansion in remote URLs ====

The URL used in the &quot;valuesUrl&quot; can embed variables which will be filled with certain context items when making the remote request.

Two types of expansions are available, Job context, and Option context.

To include job information in the URL, specify a variable of the form &lt;code&gt;${job.''property''}&lt;/code&gt;:

Properties available for Job context:
{| class=&quot;wikitable&quot;
 ! variable !! value 
 |-
 | name || Name of the Job
 |-
 | group || Group of the Job
 |-
 | description || Job description
|-
|type || Type name of a Defined Command job
|-
|resource|| Resource name of a Defined Command job
|-
|command|| Command name of a Defined Command job
|-
|project || Project name
|-
|argString|| Default argument string for a job
|-
|adhoc|| true/false.  False if it is a Defined Command Job, true if it is an adhoc script job.
|}
 
To include Option information in the URL, specify a variable of the form &lt;code&gt;${option.''property''}&lt;/code&gt;:

Properties available for Option context:
{| class=&quot;wikitable&quot;
 ! variable !! value 
 |-
 | name || Name of the current option
|}

Examples:

 valuesUrl=&quot;http://server.com/test?name=${option.name}&quot;

Passes the option name as the &quot;name&quot; query parameter to the URL.

 valuesUrl=&quot;http://server.com/test?jobname=${job.name}&amp;jobgroup=${job.group}&quot;

Passes the job name and group as query parameters.

==== Remote request failures ====

If the request for the remote option values fails, then the GUI form will display a warning message, and the option will be allowed to use a textfield to set the value.

== Notifications ==

{{Feature|3003718}} (since 3.5.1)

Job definitions can now include an optional &lt;code&gt;&amp;lt;notification&amp;gt;&lt;/code&gt; section:

&lt;syntaxhighlight&gt;
  &lt;job&gt;
    ...
    &lt;notification&gt;
        &lt;onfailure&gt;
            &lt;email recipients=&quot;test@example.com,foo@example.com&quot; /&gt;
        &lt;/onfailure&gt;
        &lt;onsuccess&gt;
            &lt;email recipients=&quot;test@example.com&quot; /&gt;
        &lt;/onsuccess&gt;
    &lt;/notification&gt;
  &lt;/job&gt;
&lt;/syntaxhighlight&gt;

The section can include one or both of &lt;code&gt;onfailure&lt;/code&gt; or &lt;code&gt;onsuccess&lt;/code&gt; sections.  Inside these are allowed a &lt;code&gt;email&lt;/code&gt; element with a &lt;code&gt;recipient&lt;/code&gt; attribute defining a comma-separated list of email addresses.

The &lt;code&gt;onsuccess&lt;/code&gt; emails will be sent a message when any execution of the Job is successful.

The &lt;code&gt;onfailure&lt;/code&gt; emails will be sent a message when any execution of the Job fails or is killed.

Email support uses the [http://www.grails.org/plugin/mail grails mail plugin]. Configuration of the plugin can be added to the ctlcenter-config.properties file in $CTIER_ROOT/ctlcenter

basic configuration items that should may be modified:

    grails.mail.host=&lt;hostname&gt;
    grails.mail.port=&lt;port&gt;
    grails.mail.default.from=&quot;ctier-server@yourhost&quot;

'''See [http://www.grails.org/plugin/mail grails mail plugin] for more configuration information.'''

== Workflow Sequences ==

Jobs can now be defined as Workflow &quot;sequences&quot;.  Instead of running a single command or script, Jobs can now run a sequence of items.  

Types of sequence items that can be run:

* Defined Commands, either static or resource-context commands
* Scripts, shell commands, or script files.
* Other Jobs.

Since Jobs can now be Workflows and run other Jobs, you can chain together Workflows as necessary.

Workflows also support a &quot;keepgoing&quot; flag, to indicate that the Workflow sequence should continue even if an item fails.
 
 &lt;syntaxhighlight&gt;
  &lt;job&gt;
   ...
   &lt;context&gt;
      &lt;project&gt;demo&lt;/project&gt;
    &lt;/context&gt;
    &lt;sequence keepgoing=&quot;false&quot;&gt;
      &lt;command ... &gt;&lt;/command&gt;
      &lt;command ... &gt;&lt;/command&gt;
      &lt;command ... &gt;&lt;/command&gt;
    &lt;/sequence&gt;
    ...
   &lt;/job&gt;
&lt;/syntaxhighlight&gt;

To define a Workflow Job, the Job must have a &lt;code&gt;&amp;lt;context&amp;gt;&amp;lt;project&amp;gt;name&amp;lt;/project&amp;gt;&amp;lt;context&amp;gt;&lt;/code&gt; section defining the Project context.

The workflow is defined by a &lt;code&gt;sequence&lt;/code&gt; element.

Attributes:

{| class=&quot;wikitable&quot;
 ! name !! description
 |-
 | keepgoing || true/false.  (default false). If true, the workflow sequence will continue even if there is a failure
 |}
 
 Elements:
 
{| class=&quot;wikitable&quot;
 ! name !! description !! count
 |-
 | command || Defines a command item to run || 1+ items required
 |} 

Different types of &lt;code&gt;&amp;lt;command&amp;gt;&lt;/code&gt; elements can be used, as shown below.

=== Defined Command Item ===

To add a Defined Command item to the Workflow, use a &lt;code&gt;name&lt;/code&gt; attribute, and specify the context.  The &lt;code&gt;&amp;lt;arg line=&quot;...&quot;/&amp;gt;&lt;/code&gt; is optional.

Static (Module context):
&lt;syntaxhighlight&gt;
&lt;command name=&quot;command-name&quot;  module=&quot;module-name&quot;&gt;
    &lt;arg line=&quot;cli-arguments...&quot; /&gt;
&lt;/command&gt;
&lt;/syntaxhighlight&gt;

Resource context:
&lt;syntaxhighlight&gt;
&lt;command name=&quot;command-name&quot;  module=&quot;module-name&quot; resource=&quot;resource-name&quot;
    &lt;arg line=&quot;cli-arguments...&quot; /&gt;
&lt;/command&gt;
&lt;/syntaxhighlight&gt;

=== Script Items ===

Simple shell command:
&lt;syntaxhighlight&gt;
&lt;command&gt;
  &lt;exec&gt;uptime -a &lt;/exec&gt;
&lt;/command&gt;
&lt;/syntaxhighlight&gt;

Inline script.  Note that using CDATA section will preserve linebreaks in the script.  Simply put the script within a &lt;code&gt;script&lt;/code&gt; element:
&lt;syntaxhighlight&gt;
&lt;command&gt;
    &lt;script&gt;&lt;![CDATA[#!/bin/bash
echo this is a test
echo whatever
exit 2 ]]&gt;&lt;/script&gt;
&lt;/command&gt;
&lt;/syntaxhighlight&gt;

Script File:
&lt;syntaxhighlight&gt;
&lt;command &gt;
    &lt;scriptfile&gt;/path/to/a/script&lt;/scriptfile&gt;
    &lt;scriptargs&gt;-whatever something&lt;/scriptargs&gt;
&lt;/command&gt;      
&lt;/syntaxhighlight&gt;

=== Job Item ===

The Job item allows you to execute another Job.  Specify a unique name and group for the job within a &lt;code&gt;jobref&lt;/code&gt; element:

&lt;syntaxhighlight&gt;
&lt;command&gt;
    &lt;jobref name=&quot;changeDeps job&quot; group=&quot;/test/jobs&quot;/&gt;
&lt;/command&gt;
&lt;/syntaxhighlight&gt;

[[Category:Changes]]</text>
    </revision>
  </page>
  <page>
    <title>CopSSH (windows)</title>
    <id>38</id>
    <revision>
      <id>12399</id>
      <timestamp>2010-03-16T14:06:10Z</timestamp>
      <contributor>
        <username>Anthony</username>
        <id>42</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Configuration&lt;/categorytree&gt;

NOTE that we now recommend the use of [[Cygwin|Cygwin/OpenSSH]] on Windows.

ControlTier's ability to automatically coordinate distributed command execution is built on a Secure Shell (SSH) protocol &quot;network&quot;.

The assumption is that the system user account on a given system used to run a given &quot;dispatchCmd&quot; from ControlTier (usually from the administration node running Jobcenter) has been &quot;equivalenced&quot; to all client users and systems necessary to allow non-interactive authentication via SSH. This is usually achieved using public key authentication.

While it is a fair bet that a given Unix/Linux system will be running the SSH server to enable login services, this is almost never the case for Windows systems.

This posting captures the (unfortunately complex and arcane!) steps necessary to deploy an OpenSSH server on a Windows system. The goal is to enable the SSH service, enable a designated Windows user for remote access and facilitate command execution using the command shell (cmd.exe). (These notes do not deliver a full Cygwin installation, just the minimum necessary to enable SSH access).

The notes are an updated version of a posting to the ControlTier Google group.

==SSH installation==

* Download the latest version of copSSH ( http://www.itefix.no/i2/copssh )- this packaging of OpenSSH and Cygwin provides a GUI based installer that simplifies Windows installation.
* Run the copSSH setup program as a user with Administrators group membership.
* Install to &quot;C:\copSSH&quot; or &quot;C:\cygwin&quot; rather than the default location (make sure that there are no spaces in any of the Cygwin paths).

==User setup==

* Create or designate a Windows local (not domain based) system account as the ControlTier user.
* Set a password for the user, and set its home folder to the Cygwin installation hierarchy, e.g.: &quot;C:\copSSH\home\user&quot;
** To set the Home Folder in Windows XP:
**# Navigate to: Control Panels &gt; Administrative Tools &gt; Computer Management
**# Expand the System Tools &gt; Local Users and Groups.  Click on &quot;Users&quot;
**# Right-click the chosen user account, and choose &quot;Properties&quot;
**# Click on the &quot;Profile&quot; tab
**# Under the Home Folder section, enter the new path under &quot;Local Path: &quot;
* Log on and off once as the user to ensure settings are established, running a &quot;cmd&quot; shell to confirm that the HOMEDRIVE/HOMEPATH has indeed been set correctly.

==Enable SSH for the user==

* Run copSSH's &quot;01. Activate a user&quot; item from the start menu.

* Select the &quot;user&quot; and leave the default command shell for the time being.
* Change the user's shell to &quot;/bin/cmd.sh&quot;
* Deselect the options to create public key authentication keys and link the user's real home directory.
* Create the following script in the Cygwin &quot;bin&quot; directory (e.g. &quot;C:\copSSH\bin&quot;) using Notepad or similar:
&lt;pre&gt;
C:\copSSH\bin&gt;type cmd.sh
#!/bin/bash
if [[ $# -eq 0 ]]
then
   exec /cygdrive/c/windows/system32/cmd /Q
else
   shift
   exec /cygdrive/c/windows/system32/cmd /Q /C &quot;$@&quot;
fi
&lt;/pre&gt;

Convert the script to a Unix style text file as follows:
&lt;pre&gt;
C:\copSSH\bin&gt;d2u cmd.sh
cmd.sh: done.
&lt;/pre&gt;

Test the SSH login using a password from a remote system:

&lt;pre&gt;
$ ssh build@myhost.mydomain
build@myhost.mydomain's password: 
Last login: Thu Apr 10 08:11:49 2008 from 10.10.1.30
Microsoft Windows [Version 5.2.3790]
(C) Copyright 1985-2003 Microsoft Corp.

C:\copSSH\home\build&gt;whoami
myhost\build
&lt;/pre&gt;

Note: 
* Unfortunately, there is no full-screen editor that works directly over the SSH terminal window to the Windows server. Either edit files locally using WordPad (which understands Unix text files) and the &quot;d2u&quot; program as necessary, or scp configuration files off to a remote Unix/Linux system for editing.
Create a Unix text &quot;authorized_keys&quot; file (no extensions) in the users &quot;.ssh&quot; directory containing the public key of the remote ControlTier user that will administer the box (usually from the ControlTier server).
Confirm that it is possible to ssh to the account on the system from the equivalenced account on the ControlTier server and authenticate using public key (i.e. without interactively provided a password):
&lt;pre&gt;
$ ssh build@myhost.mydomain pwd
/home/build
&lt;/pre&gt;

Note:
*  When ssh'ing into Windows system (e.g. using Putty) be careful about how the backspace character is mapped. The Windows command shell expects &quot;Control-H&quot;. Using other characters can cause spurious characters to be embedded in file and directory names, etc.

==Configure the environment==
* By default, the SSH daemon/service does not support setting custom environment. Edit SSH daemon's configuration file (e.g. &quot;C:\copSSH\etc\sshd_config&quot;) and set &quot;PermitUserEnvironment yes&quot;.
* Create an &quot;environment&quot; file in the user's &quot;.ssh&quot; directory containing the following variables required by the ControlTier client:
&lt;pre&gt;
C:\copSSH\home\build\.ssh&gt;type environment
JAVA_HOME=C:\Java\jrockit-R27.4.0-jdk1.5.0_12
CTL_HOME=C:\ctier\pkgs\ctl-1.2
CTIER_ROOT=C:\ctier
CTL_BASE=C:\ctier\ctl
&lt;/pre&gt;

Note: 
* The values of these variables will change with future upgrades and will be specific to your installation choices.
* Use the &quot;Advanced&quot; tab of the &quot;System Properties&quot; control panel to add the CTL bin directory &quot;c:\ctier\pkgs\ctl-1.4.3\bin&quot; directory to the &quot;Path&quot; system environment variable
* Restart the &quot;copSSHD&quot; service to pick up the changes.
* Ssh into the box as the user user and check that the variables are &quot;set&quot; in the command shell.

==Windows version-specific notes==

===Windows XP===

Following this process on XP required me to modify the windows firewall since it was actually On.

I did the following:

Start
-&gt;ControlPanel
-&gt;NetworkConnections
-&gt;ChangeWIndowsFirewallSettings
-&gt;Exceptions

Click Add Port
* Name: sshd
* Port number: 22
* TCP selected

Click OK

===Windows Server 2003===
Deploying copSSH to Windows Server 2003 has revealed an issue specific to that variant of Windows.

Since Windows Server 2003 needs full credentials (username and password) to &quot;switch effective user&quot;, automatic command execution using PKA authentication does not work using the general configuration described in this posting.

A future enhancement will modify ControlTier's Node type to store usernames and passwords as distinct attributes and supply them to Ant's SSHExec task thereby obviating the need for PKA to automate command execution.

Meanwhile, I've followed these instructions to switch the user who runs the SSH service to the application owner account required by my project.

While not completely satisfactory, this approach at least allows PKA to continue to be used while guaranteeing that commands run as the desired user account.

Despite the complexity of these notes you may concede the relief not having to reboot the Windows server to make it all work!

&lt;noinclude&gt;{{Installation/navbox}}&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Copy-opts Task Reference</title>
    <id>959</id>
    <revision>
      <id>11402</id>
      <timestamp>2009-12-14T23:13:25Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Tasks&lt;/categorytree&gt;
The &lt;code&gt;copy-opts&lt;/code&gt; task provides a convenient and concise method to copy the options passed to a command to a string. This is useful when one command, such as a [[Workflow_Type_Reference|Workflow]] or a [[DispatchAction_Task_Reference|Dispatch]] command, needs to dispatch to another command and pass in all options that were set either directly via command line or through the option defaulting mechanism handled by the &lt;code&gt;[[GetOpts_Task_Reference|get-opts]]&lt;/code&gt; task.

The &lt;code&gt;copy-opts&lt;/code&gt; task handles copying both string or boolean option types. The task works in conjunction with the CTL command dispatcher to lookup metadata about each option to determine its argument type. If the argument type is not defined by the commands metadata &lt;code&gt;copy-opts&lt;/code&gt; assumes it is a string type.

==Parameters==
      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;resultproperty&lt;/td&gt;&lt;td&gt;Name of property to store result&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;override&lt;/td&gt;&lt;td&gt; boolean specifying if resultproperty should be overridden if it already was set.&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;opts&lt;/td&gt;&lt;td&gt;comma separated list of options to copy if they are set&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;

	&lt;tr&gt;
	  &lt;td&gt;failifnotfound&lt;/td&gt;&lt;td&gt;boolean specifying to fail the task if no matching option was found.&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;

==Examples==

The first example specifies &quot;params1&quot; in the &lt;code&gt;opts&lt;/code&gt; attribute. This copies the &quot;-param1&quot; option to the resultproperty &quot;result&quot;:

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;!--
	Mimic setting &quot;-param1 val1 -param2 val2&quot; as command line arguments.
  --&gt;
&lt;property name=&quot;opts.param1&quot; value=&quot;val1&quot;/&gt;
&lt;property name=&quot;opts.param2&quot; value=&quot;val2&quot;/&gt;

&lt;copy-opts opts=&quot;param1&quot; resultproperty=&quot;result&quot; override=&quot;true&quot;/&gt;
&lt;echo&gt;${result}&lt;/echo&gt;
&lt;/syntaxhighlight&gt;
* Echoing &quot;result&quot; should print: &quot;-param1 val1&quot; 
* The &quot;-param2 val2&quot; is not copied as it is not listed in the &lt;code&gt;opts&lt;/code&gt; attribute.

The second example specifies &quot;params1,params2&quot; in the &lt;code&gt;opts&lt;/code&gt; attribute. Also, both of these options are of boolean type. Boolean type options do not take arguments so the generated result should just define a result string with the option names:

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;!--
	Option metadata for the command, &quot;MyCommand&quot;
	Both param1 and param2 options are of type boolean:
  --&gt;	
&lt;property name=&quot;command.MyCommand.opts.param1.type&quot; value=&quot;boolean&quot;/&gt;
&lt;property name=&quot;command.MyCommand.opts.param2.type&quot; value=&quot;boolean&quot;/&gt;

&lt;!--
	Mimic setting &quot;-param1 val1 -param2 val2&quot; as command line arguments.
	The get-opts task sets booleans to &quot;true&quot;:
  --&gt;	
&lt;property name=&quot;opts.param1&quot; value=&quot;true&quot;/&gt;
&lt;property name=&quot;opts.param2&quot; value=&quot;true&quot;/&gt;

&lt;copy-opts opts=&quot;param1,param2&quot; resultproperty=&quot;result&quot; override=&quot;true&quot;/&gt;
&lt;echo&gt;${result}&lt;/echo&gt;
&lt;/syntaxhighlight&gt;
* Echoing the &quot;result&quot; should print: &quot;-param1 -param2&quot;

The third example shows both boolean and string option types. Here &quot;bool1,param1&quot; are specified in the &lt;code&gt;opts&lt;/code&gt; attribute. 

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;!--
	Option metadata for the command, &quot;MyCommand&quot;
	Both bool1 and param1 options types are declared :
  --&gt;	
&lt;property name=&quot;command.MyCommand.opts.bool1.type&quot; value=&quot;boolean&quot;/&gt;
&lt;property name=&quot;command.MyCommand.opts.param1.type&quot; value=&quot;string&quot;/&gt;

&lt;!--
	Mimic get-opts by setting &quot;-bool1 -param1 val1&quot; as command line arguments.
  --&gt;	
&lt;property name=&quot;opts.bool1&quot; value=&quot;true&quot;/&gt;
&lt;property name=&quot;opts.param1&quot; value=&quot;val1&quot;/&gt;

&lt;copy-opts opts=&quot;bool1,param1&quot; resultproperty=&quot;result&quot; override=&quot;true&quot;/&gt;
&lt;echo&gt;${result}&lt;/echo&gt;
&lt;/syntaxhighlight&gt;
* Echoing &quot;result&quot; should print: &quot;-bool1 -param1 val1&quot;

&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Command Dispatcher Ant Tasks]]
[[Category:Command Options]]</text>
    </revision>
  </page>
  <page>
    <title>CopyOpts Task Reference</title>
    <id>969</id>
    <redirect />
    <revision>
      <id>5303</id>
      <timestamp>2009-05-22T19:52:26Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>[[CopyOpts Task Reference]] moved to [[Copy-opts Task Reference]]: Renamed to match task name</comment>
      <text xml:space="preserve">#REDIRECT [[Copy-opts Task Reference]]</text>
    </revision>
  </page>
  <page>
    <title>Core Type Guide</title>
    <id>694</id>
    <redirect />
    <revision>
      <id>11126</id>
      <timestamp>2009-12-14T01:55:07Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[Category:Types]]</comment>
      <text xml:space="preserve">#REDIRECT [[:Category:Types]]</text>
    </revision>
  </page>
  <page>
    <title>Coreutils</title>
    <id>746</id>
    <redirect />
    <revision>
      <id>12446</id>
      <timestamp>2010-03-31T15:24:16Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[Utility Type Guide]]</comment>
      <text xml:space="preserve">#REDIRECT [[Utility Type Guide]]</text>
    </revision>
  </page>
  <page>
    <title>Coreutils Type Guide</title>
    <id>1007</id>
    <redirect />
    <revision>
      <id>5789</id>
      <timestamp>2009-06-18T19:07:40Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>[[Coreutils Type Guide]] moved to [[Coreutils]]</comment>
      <text xml:space="preserve">#REDIRECT [[Coreutils]]</text>
    </revision>
  </page>
  <page>
    <title>Course - Architect: Commands and Workflows</title>
    <id>545</id>
    <revision>
      <id>16675</id>
      <timestamp>2012-02-27T16:49:41Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Setting sort key</comment>
      <text xml:space="preserve">==Overview==
=== What you will learn ===
==== Learn To ====
* Understand Command concepts: Context scopes, command life cycle, command types
* Understand Attributes
* Declare commands to interface tools and implement procedures
* Declare Workflow commands to implement multi-step processes
* Declare Error and success handlers for Workflows

=== Audience ===

* System Engineers
* Developers

=== Prerequisites ===
==== Required Prerequisites ====
* Command shell (Unix or Windows)
* [[Course - ControlTier Intro]]
* [[Course - Automation Development Essentials]]

==== Suggested Prerequisites ====

* Basic programming skills such as shell scripting
* [[Course_-_Service_Life_cycle_Management]]

=== Course Objectives ===
''List the things that will be accomplished during the course here...''

* Learn how to implement basic commands for scripting
* Implement commands that take named parameters
** Default options using literal and attribute values
* Learn how to use Workflows to implement processes
** Understand several commonly used design patterns
** Declare error and success handlers

== Course Topics==
==Concepts==
===Attributes===
* Attributes are essentially a way of creating custom &quot;named&quot; properties for a type.
* These attributes provide a way to create a set of named instance data fields for your objects
* Attribute data is made part of the commands executing data context
** Access them via ${resource.attribute.NAME}, where &quot;NAME&quot; is the attribute's name.
* The ControlTier types declare a number of attributes supporting their commands
* Often used to provide command option defaulting

See: [[Attributes]]

===Command types===

There are several kinds of command types:
* Command: Executes a shellscript
* AntCommand: Executes Ant code
* BsfCommand: Executes Bean Shell Scripting Framework script
* WorkflowCommand: Executes a sequence of commands for one object
* DispatchCommand: Executes a single command across a set of objects

===Context scopes===

* Static: Command is executed directly from the module (akin to calling a static method)
** Includes framework configuration, dispatcher context
** CLI syntax: ctl -p ''project'' -m ''type'' -c ''command''
* Object: Command is executed in the context of the object
** Includes same info as &quot;static&quot; but also includes object instance data
** CLI syntax: ctl -p ''project'' -t ''type'' -r ''object'' -c ''command''

Reference: [[CTL_Command_Reference#Context]]

===Command life cycle===

* Each command handler generated by ProjectBuilder#build-type will contain an import statement reading the type's lifecycle targets:

Eg:
&lt;pre&gt;
&lt;import file=&quot;${module.dir}/lib/command.xml&quot;/&gt;
&lt;/pre&gt;

* This file defines the pattern of command execution
* Each step in the life cycle is defined in a block of XML
* Steps are structured in a hierarchical order shown in the diagram below
** Diagram arrows indicate dependencies. Targets to the left and down are executed first

[[Image:Handler-lifecycle.png]]

* It's considered best practice to share a common definition
* The ProjectBuilder &quot;build-type&quot; command generates the command.xml file for you
** By default, it simply imports the standard one defined in Deployment

Example Listing:
&lt;pre&gt;
&lt;!--
    command.xml: Defines the standard set of targets 
                 that comprise the lifecycle of a command handler.
--&gt;
&lt;project default=&quot;execute&quot;&gt;
  &lt;import file=&quot;${modules.dir}/Deployment/lib/command.xml&quot;/&gt;
&lt;/project&gt;
&lt;/pre&gt;

See also: [[Command life cycle]]

===Workflow Patterns===
* Workflows are a sequence of commands 
* Normally called one after the other in a single thread
* Can be configured to run commands in more than one thread for concurrent execution

The following few sections describe common design patterns that use Workflow.

====Sequences====
* A set of commands are simply executed in sequence. 
* Each completes before the subsequent one begins

====Template method pattern====
* A design pattern for defining a program skeleton [http://en.wikipedia.org/wiki/Template_method_pattern]
* Template method pattern is used in several workflow command designs in the ControlTier library
** Builder: Build
** Package: installPackage
** Service: Deploy, Stop, Start

Example: Package's installPackage command

[[Image:Package-installPackage.png]]

* &lt;code&gt;installPackage&lt;/code&gt; workflow calls several primitive operations: installDependencies, prepare, get, extract, and finish.

See also: [[Template method pattern]]

====Idempotent Actions====

* The term ''idempotent'' is used to describe methods or subroutine calls that can safely be called multiple times, as invoking the procedure a single time or multiple times results in the system maintaining the same state

=====Example: Service's Stop =====
Service provides an implementation supporting a generic shutdown procedure which first checks if the service is down, and if not, to then run the &lt;code&gt;stopService&lt;/code&gt; method.

[[Image:idempotent-stop.png]]

* The standard Service algorithm to shut down a service can be maintained in spite of exceptional scenarios particular to a service.

Example: Tomcat

* the &lt;code&gt;stopService&lt;/code&gt; command is changed into a command workflow which first attempts to stop tomcat by sending the &lt;code&gt;SHUTDOWN&lt;/code&gt; message to the control port.
* If that fails, it then invokes the &lt;code&gt;runShutdownScript&lt;/code&gt; command which then attempts to stop the service by calling the tomcat shutdown script.

[[Image:idempotent-stop-tomcat.png]]

Use this pattern to extend components of the startup and shutdown workflow
* Incorporate special logic yet
* works within the basic logical skeleton provided by Service.

==ProjectBuilder Setup==
* You can register an instance of ProjectBuilder from the command line using the &lt;code&gt;Register&lt;/code&gt;
** The &quot;-o training&quot; option defines the new object's name (ie training) and does not have to exist in the project model

&lt;pre&gt;
ctl -p demo -t ProjectBuilder -r training -c Register -- \
	   -basedir $CTL_BASE/src -installroot $CTL_BASE/target -install
&lt;/pre&gt;
&lt;pre&gt;
Checking for existing object, (ProjectBuilder) training, in project, 'demo'...
Registered new object.
.
.
.
For more information about this object run: ctl -p demo -t ProjectBuilder -r training -c Properties	
&lt;/pre&gt;

See: [[Use ProjectBuilder]]

==Create new type==
* Run the &lt;code&gt;create-type&lt;/code&gt; command to define a new type
* The create-type command takes your input and generates the source files to maintain a new module

You will be prompted three times. Your responses should be:
* Name of type: &quot;poly&quot;
* Description of type: &quot;says hi&quot;
* Choose a supertype: &quot;Deployment&quot;

&lt;pre&gt;
ctl -p demo -t ProjectBuilder -r training -c create-type
&lt;/pre&gt;
&lt;pre&gt;
Name of type: 
poly
Description of type: 
says hi 
Choose a supertype:  ([Managed-Entity], Package, Builder, Deployment, Service)
Deployment
Creating module definition files in directory: /Users/alexh/ctier/ctl/src ...
Creating directory structure...
Created dir: /Users/alexh/ctier/ctl/src/modules/poly
Created dir: /Users/alexh/ctier/ctl/src/modules/poly/bin
Created dir: /Users/alexh/ctier/ctl/src/modules/poly/commands
Created dir: /Users/alexh/ctier/ctl/src/modules/poly/objects
Created dir: /Users/alexh/ctier/ctl/src/modules/poly/templates
Initializing type module from template dir: /Users/alexh/ctier/ctl/projects/demo/modules/ProjectBuilder/templates/boilerplate ...
Copying 2 files to /Users/alexh/ctier/ctl/src/modules/poly
Define commands and attributes in this file: /Users/alexh/ctier/ctl/src/modules/poly/type.xml
&lt;/pre&gt;


Run &lt;code&gt;build-type&lt;/code&gt; command
&lt;pre&gt;
ctl -p demo -t ProjectBuilder -r training -c build-type -- -type poly -upload -deploy
&lt;/pre&gt;

===Define a new Attribute===
* Create a new type called &quot;PolyMessage&quot; to manage message values for poly objects
** Make it a subtype of the DeploymentSetting
** Constrain the use of PolyMessage to &quot;poly&quot; objects only
** The attribute maps &quot;message&quot; to the value of of the type-property, &quot;settingValue&quot;

Inside the &quot;poly&quot; type.xml file, insert the following type definition.

&lt;pre&gt;
&lt;type role=&quot;concrete&quot; uniqueInstances=&quot;true&quot; name=&quot;PolyMessage&quot; order=&quot;Setting&quot;&gt;
  &lt;description&gt;A message for poly&lt;/description&gt;
  &lt;supertype&gt;
    &lt;typereference name=&quot;DeploymentSetting&quot;/&gt;
  &lt;/supertype&gt;
  &lt;attributes&gt;
    &lt;attribute name=&quot;message&quot; type-property=&quot;settingValue&quot;/&gt;
  &lt;/attributes&gt;
  &lt;constraints&gt;
    &lt;dependency-constraint enforced=&quot;false&quot; kind=&quot;parent&quot;&gt;
      &lt;allowedtypes&gt;
        &lt;typereference name=&quot;poly&quot;/&gt;
      &lt;/allowedtypes&gt;
    &lt;/dependency-constraint&gt;
    &lt;allowedvalue-constraint
	enforced=&quot;false&quot;
	type-property=&quot;settingValue&quot;&gt;
      &lt;allowedvalue value=&quot;foo&quot; default=&quot;true&quot;/&gt;
      &lt;allowedvalue value=&quot;bar&quot; default=&quot;false&quot;/&gt;
    &lt;/allowedvalue-constraint&gt;
  &lt;/constraints&gt;
&lt;/type&gt;
&lt;/pre&gt;

Run &lt;code&gt;build-type&lt;/code&gt; command
&lt;pre&gt;
ctl -p demo -t ProjectBuilder -r training -c build-type -- -type poly -upload -deploy
&lt;/pre&gt;

==Define resources==
===Create definition===

File listing: $CTL_BASE/src/modules/poly/objects/training/object.xml

&lt;pre&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE project PUBLIC &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; &quot;project.dtd&quot;&gt;

&lt;project&gt;
  &lt;!-- 
	 ** Create an instance of PolyMessage containing the value we want for the poly &quot;training&quot; instance
    --&gt;
  &lt;setting type=&quot;PolyMessage&quot; name=&quot;training&quot; settingValue=&quot;ARGH! Shiver me timbers.&quot;/&gt;
  &lt;deployment 
      type=&quot;poly&quot;
      name=&quot;training&quot; 
      description=&quot;The training poly deployment.&quot; 
      installRoot=&quot;${ctl.base}/projects/demo/resources/poly/training&quot; 
      basedir=&quot;${ctl.base}/projects/demo/resources/poly/training&quot; &gt;
    &lt;referrers&gt;
      &lt;resource name=&quot;strongbad&quot; type=&quot;Node&quot; /&gt;
   &lt;/referrers&gt;
   &lt;resources&gt;
  	  &lt;resource name=&quot;training&quot; type=&quot;PolyMessage&quot;/&gt;
   &lt;/resources&gt;
  &lt;/deployment&gt;
&lt;/project&gt;
&lt;/pre&gt;

===Load the definition===

&lt;pre&gt;
ctl -p demo -t ProjectBuilder -r training -c load-resources -- \
  -filename $CTL_BASE/src/modules/poly/objects/training/object.xml
&lt;/pre&gt;

* You can view the poly object in Workbench
** Notice the attribute value for &quot;message&quot;

===Deploy the object===

&lt;pre&gt;
ctl-project -p demo -a install
&lt;/pre&gt;

==Command options==

* Provides named parameters to commands. 
** Used to pass flags and arguments to the command
* When specified, sets a property in the command context
** Eg, &quot;-arg1 value&quot; ==&gt; ${opts.arg1} = 'value1'
* Can default values to project model data via object instance data
** Eg, resource.attribte.''attrib''

See: [[Type-v10.xml#opts]], [[Type-v10.xml#opt]]

===Boolean option===

* Used to specify an optional flag
* When user specifies the flag, sets the named property to the value &quot;true&quot;
** otherwise the property is not set.

&lt;pre&gt;
&lt;opt parameter=&quot;verbose&quot;
     description=&quot;hypothetical verbose flag&quot;
     property=&quot;opts.verbose&quot;
     type=&quot;boolean&quot;/&gt;
&lt;/pre&gt;

See: [[Boolean option]]
===String option===

* Used to specify a named parameter that takes an argument
* When user specifies the flag, sets the named property to the value of the argument
* Can be set to be &quot;required&quot;
** If required=true and the property value is not set, the option parser throws an error

&lt;pre&gt;
&lt;opt parameter=&quot;message&quot;
     description=&quot;optional message parameter&quot;
     required=&quot;false&quot;
     property=&quot;opts.message&quot;
     type=&quot;string&quot; /&gt;
&lt;/pre&gt;

See: [[String option]]

==Scripting Commands==
The following sections describe command types useful for implementing a command through some scripted procedure.
===Shell command===
Invokes shellscript through a system level interpreter.

* command-type=&quot;Command&quot;

Elements
* execution-string: Command interpreter 
** The name of the shell executable which is to be executed. This shell must support taking a single parameter whose value is a script file which is to be executed. 
** Examples include: sh, bash, cmd.exe, perl
** If the value is &quot;cmd.exe&quot; it is interpreted as a windows .bat script
* argument-string: Any nested text is treated as the contents of the script that is to be executed within the shell. Embedded properties will be converted.

&lt;pre&gt;
&lt;command name=&quot;echo&quot; description=&quot;second command.&quot; 
         command-type=&quot;Command&quot; is-static=&quot;true&quot;&gt;
  &lt;execution-string&gt;bash&lt;/execution-string&gt;
  &lt;argument-string&gt;echo bash says ${opts.message}&lt;/argument-string&gt;
  &lt;opts&gt;
    &lt;opt parameter=&quot;message&quot; description=&quot;option name&quot; required=&quot;false&quot;
     property=&quot;opts.message&quot; type=&quot;string&quot; default=&quot;hi there!&quot;/&gt;
  &lt;/opts&gt;
&lt;/command&gt;
&lt;/pre&gt;

After inserting this into the type.xml and running build-type you can run it like so:

&lt;pre&gt;
ctl -p demo -t poly -r training -c echo
&lt;/pre&gt;

See: [[Shell_command]]

===Ant command===
Invokes Ant code

* command-type=&quot;AntCommand&quot;

Elements
* implementation: Include any ant tasks inside this element.
** Essentially any element that can reside inside an Ant &quot;target&quot; element

&lt;pre&gt;
&lt;command name=&quot;emit&quot; description=&quot;say something with Ant.&quot; 
         command-type=&quot;AntCommand&quot; is-static=&quot;true&quot;&gt;
  &lt;implementation&gt;
    &lt;echo message=&quot;ant says ${opts.message}&quot;/&gt;
  &lt;/implementation&gt;
  &lt;opts&gt;
    &lt;opt parameter=&quot;message&quot; description=&quot;option name&quot; required=&quot;false&quot;
     property=&quot;opts.message&quot; type=&quot;string&quot; default=&quot;creepers&quot;/&gt;
  &lt;/opts&gt;
&lt;/command&gt;
&lt;/pre&gt;
Properties are referenced using Ant property syntax

After inserting this into the type.xml and running build-type you can run it like so:

&lt;pre&gt;
ctl -p demo -t poly -r training -c emit
&lt;/pre&gt;

See: [[Ant command]]

===BSF command===
Implement a command using a language supported by the [http://jakarta.apache.org/bsf/ Bean Scripting Framework].
* command-type=&quot;BsfCommand&quot;

Elements
* script: BSF script to execute
** Specify the desired BSF language using the &lt;code&gt;langauge&lt;/code&gt; attribute

&lt;pre&gt;
&lt;command name=&quot;shine&quot; description=&quot;ruby BSF command.&quot; 
             command-type=&quot;BsfCommand&quot; is-static=&quot;true&quot;&gt;
       &lt;script language=&quot;ruby&quot;&gt;&lt;![CDATA[
          print 'ruby says ', $project.getProperty('opts.message'), &quot;\n&quot;
	]]&gt;&lt;/script&gt;
       &lt;opts&gt;
         &lt;opt parameter=&quot;message&quot; description=&quot;option name&quot; required=&quot;false&quot;
	       property=&quot;opts.message&quot; type=&quot;string&quot; default=&quot;dazzle&quot;/&gt;
       &lt;/opts&gt;
&lt;/command&gt;
&lt;/pre&gt;
* The ruby script can access properties via the &lt;code&gt;$project.getProperty('&lt;/code&gt;''property-name''&lt;code&gt;')&lt;/code&gt;

After inserting this into the type.xml and running build-type you can run it like so:

&lt;pre&gt;
ctl -p demo -t poly -r training -c shine
&lt;/pre&gt;

See: [[BSF command]]

===Override inherited command===

* A subtype can override commands inherited from its supertype. 
* To override a command, simply declare the same named command in the subtype's type.xml.

See: [[Override_an_inherited_command]]

===Calling a supertype command===
* Override the supertype command
* Sometimes you want to add some additional steps to a command defined in a supertype. 
* The name of your type's supertype is accessible via the property: ${type.supertype} defined in your module's type.properties file.

Example using &quot;AntCommand&quot; command-type to use the [[Controller_Task_Reference|controller]] task to call the supertype:
&lt;pre&gt;
&lt;command name=&quot;Properties&quot; description=&quot;Call the Properties command&quot;
           command-type=&quot;AntCommand&quot;&gt;
   &lt;implementation&gt;
	 &lt;!--
	     ** your subtype specific logic can go here ...
	   --&gt;
	&lt;echo&gt;before call to supertype&lt;/echo&gt;
	
	 &lt;!--
	     ** Call the super type command
	   --&gt;
    &lt;controller&gt;
     &lt;execute&gt;
       &lt;context depot=&quot;${context.depot}&quot;
                resourceType=&quot;${context.type}&quot;
                resourceName=&quot;${context.name}&quot;/&gt;

       &lt;!-- The supertype name is referenced via &quot;type.supertype&quot; --&gt;
       &lt;command name=&quot;Properties&quot; module=&quot;${type.supertype}&quot;/&gt;

     &lt;/execute&gt;
    &lt;/controller&gt;
    &lt;!--
        **  ... and/or more subtype specific logic here.
      --&gt;
	&lt;echo&gt;after call to supertype&lt;/echo&gt;

   &lt;/implementation&gt;
&lt;/command&gt;
&lt;/pre&gt;

After running the &lt;code&gt;build-type&lt;/code&gt; command you can try the overridden Properties command:

&lt;pre&gt;
ctl -p demo -t poly -r training -c Properties
&lt;/pre&gt;
You can notice the messages that were added in the before/after areas:
&lt;pre&gt;
before call to supertype
[MULTI_LINE]
# training [poly] #

The training poly deployment.

## Attributes ##

*  defaultAllowMultiplePackageMatches: &quot;false&quot;
*  defaultDeploymentType: &quot;poly&quot;
*  defaultFailIfPackageNotReplaced: &quot;true&quot;
*  defaultPackageName: &quot;.*&quot;
*  defaultPackageProximity: &quot;1&quot;
*  defaultPackageType: &quot;[^\.]*&quot;
*  dirlist: &quot;bin,logs,var&quot;
*  errorNotificationRecipient: &quot;${framework.admin.tolist}&quot;
*  successNotificationRecipient: &quot;${framework.admin.tolist}&quot;
*  message: &quot;ARGH! Shiver me timbers.&quot;

## Dependencies ##

### Parent Dependencies ###
1.   strongbad [Node]

### Child Dependencies ###

1.   training [PolyMessage]
    *  doc: &quot;Object created by ProjectBuilder project XML loader&quot;
    *  encrypted: &quot;false&quot;
    *  name: &quot;training&quot;
    *  order: &quot;Setting&quot;
    *  settingType: &quot;&quot;
    *  type: &quot;PolyMessage&quot;
    *  value: &quot;ARGH! Shiver me timbers.&quot;

- - -
[/MULTI_LINE]
Deleting: /Users/alexh/ctier/ctl/projects/demo/resources/poly/training/var/resource.properties-2012972055.tmp
after call to supertype
&lt;/pre&gt;

See: [[Calling_a_supertype_command]]

==Option Defaulting==
===Option defaulting with a literal===

* Use the &lt;code&gt;default&lt;/code&gt; attribute
** Eg, default=&quot;hello&quot;

Example:
&lt;pre&gt;
&lt;opt parameter=&quot;message&quot; description=&quot;option name&quot; required=&quot;false&quot;
	       property=&quot;opts.message&quot; type=&quot;string&quot; default=&quot;Hello&quot;/&gt;
&lt;/pre&gt;

See: [[Option_defaulting_with_a_literal]]
===Option defaulting with an attribute===

* Use the &lt;code&gt;defaultproperty&lt;/code&gt; attribute
** Eg, defaultproperty=&quot;resource.attribute.messsage&quot;
Example
&lt;pre&gt;
&lt;opt parameter=&quot;message&quot; description=&quot;option name&quot; required=&quot;false&quot;
	       property=&quot;opts.message&quot; type=&quot;string&quot; 
           defaultproperty=&quot;resource.attribute.message&quot;/&gt;
&lt;/pre&gt;

Here's an example of &quot;echo&quot; that now is defaulted to the &quot;message&quot; attribute:
&lt;pre&gt;
&lt;command name=&quot;echo&quot; description=&quot;second command.&quot; 
         command-type=&quot;Command&quot; is-static=&quot;true&quot;&gt;
  &lt;execution-string&gt;bash&lt;/execution-string&gt;
  &lt;argument-string&gt;echo bash says ${opts.message}&lt;/argument-string&gt;
  &lt;opts&gt;
    &lt;opt parameter=&quot;message&quot; description=&quot;option name&quot; required=&quot;false&quot;
     property=&quot;opts.message&quot; type=&quot;string&quot; default=&quot;hi there!&quot; defaultproperty=&quot;resource.attribute.message&quot;/&gt;
  &lt;/opts&gt;
&lt;/command&gt;
&lt;/pre&gt;

See: [[Option defaulting with an attribute]]

===Option defaulting with literal and an attribute===

This section describes how to use the &quot;option&quot; tag to define a string type option that is defaulted either by an attribute (if it is set) or a literal default.
Example:
&lt;pre&gt;
&lt;opt parameter=&quot;message&quot; description=&quot;option name&quot; required=&quot;false&quot;
	       property=&quot;opts.message&quot; type=&quot;string&quot; 
               default=&quot;Hello&quot;
               defaultproperty=&quot;resource.attribute.message&quot;/&gt;
&lt;/pre&gt;

See: [[Option_defaulting_with_a_literal_and_attribute]]

==Developing Workflows==
===Workflows and shared options===

* Options passed to the workflow command must also be supported by the commands in the sequence
** Ie, they share a common subset of options
* An option parsing error will occur if any of the commands in the sequence do not accept the workflow parameter

See also: [[Workflow_and_options]]

===Sequential execution===

Example:
&lt;pre&gt;
&lt;command name=&quot;stammer&quot; description=&quot;first workflow command&quot;		
		command-type=&quot;WorkflowCommand&quot; is-static=&quot;true&quot;
		error-handler-type=&quot;FAIL&quot;
		&gt;
	 &lt;workflow&gt;
	   &lt;command name=&quot;slither&quot;/&gt;
	   &lt;command name=&quot;echo&quot;/&gt;
	   &lt;command name=&quot;emit&quot;/&gt;
	   &lt;command name=&quot;shine&quot;/&gt;
	 &lt;/workflow&gt;
        &lt;opts&gt;
         &lt;opt parameter=&quot;message&quot; description=&quot;option name&quot; required=&quot;false&quot;
	       property=&quot;opts.message&quot; type=&quot;string&quot; default=&quot;duh...?&quot;/&gt;
       &lt;/opts&gt;
   &lt;/command&gt;
&lt;/pre&gt;

After inserting this into the type.xml and running build-type you can run it like so:

&lt;pre&gt;
ctl -p demo -t poly -r training -c stammer
&lt;/pre&gt;

===Parallel execution===
* Executes nested commands in parallel
** with no guarantees of thread safety. 
* Every command will run in its own thread, 
** with the likelihood of concurrency problems scaling with the number of CPUs on the host system.
* While the commands within the workflow are being run, the main thread will be blocked waiting for all the child threads to complete. 
* If any command fails, control is caught by the error handler

Attributes
* threadcount: Specifies maximum numbers of thread to use.	

Example:
&lt;pre&gt;
&lt;command name=&quot;garble&quot; description=&quot;parallel workflow command&quot;		
		command-type=&quot;WorkflowCommand&quot; is-static=&quot;true&quot;
		error-handler-type=&quot;FAIL&quot;
		&gt;
	 &lt;workflow threadcount=&quot;5&quot;&gt;
	   &lt;command name=&quot;slither&quot;/&gt;
	   &lt;command name=&quot;echo&quot;/&gt;
	   &lt;command name=&quot;emit&quot;/&gt;
	   &lt;command name=&quot;shine&quot;/&gt;
	   &lt;command name=&quot;groovy&quot;/&gt;
	 &lt;/workflow&gt;
        &lt;opts&gt;
         &lt;opt parameter=&quot;message&quot; description=&quot;option name&quot; required=&quot;false&quot;
	       property=&quot;opts.message&quot; type=&quot;string&quot; default=&quot;duh...?&quot;/&gt;
       &lt;/opts&gt;
   &lt;/command&gt;
&lt;/pre&gt;

After inserting this into the type.xml and running build-type you can run it like so:

&lt;pre&gt;
ctl -p demo -t poly -r training -c garble
&lt;/pre&gt;

==Workflow Success and Error handling==
===Success handling===
* Provides email notification upon success of workflow execution
* Includes output of command as a file attachment

Attribute
* notify-email: Recipient email address

Elements
* notify-subject: the email's subject line
* notify-message-file: template file to use as the message body

Example:
&lt;pre&gt;
&lt;success-handler notify-email=&quot;NAME@HOST&quot;&gt;
  &lt;notify-subject&gt;SUBJECT&lt;/notify-subject&gt;
  &lt;notify-message-file&gt;PATH&lt;/notify-message-file&gt;
&lt;/success-handler&gt;
&lt;/pre&gt;

* Further success handling can be implemented inside the &quot;-post-execute&quot; target.

''Warning'': Assumes the CTL client has been configured to use an email server

===Error handling===
* An error handler can be configured to catch errors thrown during the execution of the workflow command sequence
* Three kinds of handler responses
** ignore: Continue execution 
** fail: Fail immediately
** handler: Invoke the configured handler(s)
* Several kinds of configurable handler actions:
** notify: Send an email notification
** prompt: Prompt the user for continue-or-exit input from the console
** report: Generate a report message
** command: Run the named command. This provides an open ended hook to call a command or another workflow

See also: [[Type-v10.xml#error-handler]]

====Email notification====
* Error handler can be configured to send an email notification
* Email will have a file attachment with all the output of this workflow

Attributes
* email: The recipients email address

Elements
* subject: The subject line
* message-file: template file to use as the message body
** Specified file can contain any property names that exist in the commands data context
** Can be plain text or an HTML file

Example
&lt;pre&gt;
&lt;error-handler quiet=&quot;false&quot;&gt;
    &lt;notify email=&quot;support@acme&quot;&gt;
      &lt;subject&gt;My workflow failed!&lt;/subject&gt;
      &lt;message-file&gt;/path/to/my/message/file&lt;/message-file&gt;
    &lt;/notify&gt;
&lt;/error-handler&gt;
&lt;/pre&gt;

File listing: Example message file in HTML
&lt;pre&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Error Notice&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;p&gt;This is an automated message from the command: ${command.module}#${command.name}:
    &lt;br/&gt;${module.description}&lt;/p&gt;
    &lt;p&gt;
      Boy, something caused an error!
    &lt;/p&gt;
    &lt;p&gt;
      Log file is attached.
    &lt;/p&gt;
  &lt;/body&gt;
&lt;/html&gt;
&lt;/pre&gt;

''Warning'': Assumes the CTL client has been configured to use an email server

====Report message====

* Generate a report message logged by ReportCenter

&lt;pre&gt;
&lt;error-handler&gt;
   &lt;report&gt;REPORT MESSAGE&lt;/report&gt;
&lt;/error-handler&gt;
&lt;/pre&gt;

====Run a command====

* Invoke the named command
** Can be any command (or workflow) in this module
* Arguments specified to the workflow are passed to the called command

&lt;pre&gt;
&lt;error-handler&gt;
   &lt;command name=&quot;aCommand&quot;/&gt;
&lt;/error-handler&gt;
&lt;/pre&gt;


===Workflows for idempotent actions===
A common design pattern implemented in Workflows and error handlers are idempotent actions

The diagram below describes a workflow named &quot;MyAction&quot;

It is comprised of three commands:
# MyAction: This is a Workflow that structures the program flow 
# doMyAction: This contains the implementation to achieve the action and result in the expected resulting condition
# assertMyActionConditionIsMet: This command checks to see if it is necessary to run doMyAction

[[Image:workflow-diagram-MyAction.png]]

Definition for the three commands.
&lt;pre&gt;
	
  &lt;command name=&quot;MyAction&quot;  description=&quot;example idempotent workflow&quot; 
	   command-type=&quot;WorkflowCommand&quot; error-handler-type=&quot;HANDLER&quot;&gt;
    &lt;error-handler quiet=&quot;true&quot;&gt;
      &lt;command name=&quot;doMyAction&quot;/&gt;
    &lt;/error-handler&gt;
    &lt;workflow threadcount=&quot;1&quot;&gt;
      &lt;command name=&quot;assertMyActionConditionIsMet&quot;/&gt;
    &lt;/workflow&gt;
  &lt;/command&gt;

  &lt;command name=&quot;assertMyActionConditionIsMet&quot;  description=&quot;asserts the condition is met. fail otherwise&quot; 
	   command-type=&quot;Command&quot;&gt;
    &lt;execution-string&gt;bash&lt;/execution-string&gt;
    &lt;argument-string&gt;[ -f /tmp/condition.txt ] || exit 1;&lt;/argument-string&gt;
  &lt;/command&gt;

  &lt;command name=&quot;doMyAction&quot;  description=&quot;command to run if condition is not met&quot; 
	   command-type=&quot;Command&quot;&gt;
    &lt;execution-string&gt;bash&lt;/execution-string&gt;
    &lt;argument-string&gt;echo I did it&lt;/argument-string&gt;
  &lt;/command&gt;
&lt;/pre&gt;

Run the MyAction command
&lt;pre&gt;
$ ctl -p demo -t poly -r training -c MyAction
Start: &quot;example idempotent workflow&quot; commands: assertMyActionConditionIsMet
begin workflow command (1/1) -&gt; &quot;assertMyActionConditionIsMet &quot; ...
Running handler command: doMyAction
I did it
end workflow command (1/1) -&gt; &quot;assertMyActionConditionIsMet &quot;
[command.timer.demo.poly.MyAction: 1.805 sec]
Workflow completed. execution time: 1.805 sec
&lt;/pre&gt;
* The &lt;code&gt;assertMyActionConditionIsMet&lt;/code&gt; command did not find the expected condition (ie, presence of /tmp/condition.txt)
* The errorhandler caught the failure and ran &quot;doMyAction&quot;

Create the &quot;/tmp/condition.txt&quot; file to satisfy the condition:
&lt;pre&gt;
touch /tmp/condition.txt
&lt;/pre&gt;

Run the MyAction command again:
&lt;pre&gt;
$ ctl -p demo -t poly -r training -c MyAction
Start: &quot;example idempotent workflow&quot; commands: assertMyActionConditionIsMet
begin workflow command (1/1) -&gt; &quot;assertMyActionConditionIsMet &quot; ...
end workflow command (1/1) -&gt; &quot;assertMyActionConditionIsMet &quot;
Workflow completed. execution time: 1.172 sec
&lt;/pre&gt;

* Notice, there is no echo message this time
* ...and therefore the &lt;code&gt;doMyAction&lt;/code&gt; command was not run

== Suggested Next Courses ==

* Architect: Advanced

==Appendix==
===Complete type.xml example===
This is the complete type.xml example which includes  poly with its attribute default and dependency constraint, and the PolyMessage type, with its attribute definition:
&lt;pre&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;

&lt;!--
This document is used to define one or more Types.
For reference, see: http://apps.sourceforge.net/mediawiki/controltier/index.php?title=Type-v10.xml
--&gt;
&lt;types
    xmlns:module=&quot;http://open.controltier.com/base/Modules#&quot;
    xmlns:type=&quot;http://open.controltier.com/base/Types#&quot;
    xmlns:cmd=&quot;http://open.controltier.com/base/Modules/Commands#&quot;&gt;

  &lt;!-- The type element defines a Type and command module. --&gt;
  &lt;type
      name=&quot;poly&quot;
      role=&quot;concrete&quot;
      uniqueInstances=&quot;true&quot;&gt;

    &lt;!-- description of the Type --&gt;
    &lt;description&gt;says hi&lt;/description&gt;

    &lt;supertype&gt;
      &lt;!-- supertype/typereference: defines the supertype of the Type --&gt;
      &lt;typereference name=&quot;Deployment&quot;/&gt;
    &lt;/supertype&gt;

    &lt;command-settings&gt;
      &lt;!-- command-settings: properties of the command module --&gt;
      &lt;!-- See Wiki: --&gt;
      &lt;!-- http://apps.sourceforge.net/mediawiki/controltier/index.php?title=Type-v10.xml#command-settings --&gt;
      &lt;notification notify=&quot;false&quot;/&gt;
      &lt;template-directory&gt;&lt;/template-directory&gt;
      &lt;dependency-view parents=&quot;false&quot; children=&quot;true&quot; proximity=&quot;1&quot;/&gt;
      &lt;logger name=&quot;poly&quot;/&gt;
    &lt;/command-settings&gt;


    &lt;attributes&gt;
      &lt;!-- Define attributes of the Type here --&gt;
      &lt;!-- See Wiki: --&gt;
      &lt;!-- http://apps.sourceforge.net/mediawiki/controltier/index.php?title=Type-v10.xml#attributes --&gt;

    &lt;/attributes&gt;

    &lt;constraints&gt;
      &lt;!-- Define constraints of the Type here --&gt;
      &lt;!-- See Wiki:  --&gt;
      &lt;!-- http://apps.sourceforge.net/mediawiki/controltier/index.php?title=Type-v10.xml#constraints --&gt;

    &lt;/constraints&gt;

    &lt;commands&gt;
      &lt;!-- Define commands here --&gt;
      &lt;!-- See the Documentation on the ControlTier Wiki: --&gt;
      &lt;!-- http://apps.sourceforge.net/mediawiki/controltier/index.php?title=Type-v10.xml#commands --&gt;

      &lt;!-- Command command-type--&gt;
      &lt;command name=&quot;echo&quot; description=&quot;second command.&quot; 
	       command-type=&quot;Command&quot; is-static=&quot;true&quot;&gt;
	&lt;execution-string&gt;bash&lt;/execution-string&gt;
	&lt;argument-string&gt;echo bash says ${opts.message}&lt;/argument-string&gt;
	&lt;opts&gt;
	  &lt;opt parameter=&quot;message&quot; description=&quot;option name&quot; required=&quot;false&quot;
	       property=&quot;opts.message&quot; type=&quot;string&quot; default=&quot;hi there!&quot; defaultproperty=&quot;resource.attribute.message&quot;/&gt;
	&lt;/opts&gt;
      &lt;/command&gt;

      &lt;!-- AntCommand command-type--&gt;

      &lt;command name=&quot;emit&quot; description=&quot;say something with Ant.&quot; 
	       command-type=&quot;AntCommand&quot; is-static=&quot;true&quot;&gt;
	&lt;implementation&gt;
	  &lt;echo message=&quot;ant says ${opts.message}&quot;/&gt;
	&lt;/implementation&gt;
	&lt;opts&gt;
	  &lt;opt parameter=&quot;message&quot; description=&quot;option name&quot; required=&quot;false&quot;
	       property=&quot;opts.message&quot; type=&quot;string&quot; default=&quot;creepers&quot;/&gt;
	&lt;/opts&gt;
      &lt;/command&gt;
      &lt;!-- BsfCommand command-type--&gt;

      &lt;command name=&quot;shine&quot; description=&quot;ruby BSF command.&quot; 
	       command-type=&quot;BsfCommand&quot; is-static=&quot;true&quot;&gt;
	&lt;script language=&quot;ruby&quot;&gt;&lt;![CDATA[
	print 'ruby says ', $project.getProperty('opts.message'), &quot;\n&quot;
	]]&gt;&lt;/script&gt;
	&lt;opts&gt;
	  &lt;opt parameter=&quot;message&quot; description=&quot;option name&quot; required=&quot;false&quot;
	       property=&quot;opts.message&quot; type=&quot;string&quot; default=&quot;dazzle&quot;/&gt;
	&lt;/opts&gt;
      &lt;/command&gt;

      &lt;!-- overridden command that calls supertype --&gt;
      &lt;command name=&quot;Properties&quot; description=&quot;Call the Properties command&quot;
	       command-type=&quot;AntCommand&quot;&gt;
	&lt;implementation&gt;
	  &lt;!--
	      ** your subtype specific logic can go here ...
	  --&gt;
	  &lt;echo&gt;before call to supertype&lt;/echo&gt;
	  
	  &lt;!--
	      ** Call the super type command
	  --&gt;
	  &lt;controller&gt;
	    &lt;execute&gt;
	      &lt;context depot=&quot;${context.depot}&quot;
		       resourceType=&quot;${context.type}&quot;
		       resourceName=&quot;${context.name}&quot;/&gt;

	      &lt;!-- The supertype name is referenced via &quot;type.supertype&quot; --&gt;
	      &lt;command name=&quot;Properties&quot; module=&quot;${type.supertype}&quot;/&gt;

	    &lt;/execute&gt;
	  &lt;/controller&gt;
	  &lt;!--
	      **  ... and/or more subtype specific logic here.
	  --&gt;
	  &lt;echo&gt;after call to supertype&lt;/echo&gt;

	&lt;/implementation&gt;
      &lt;/command&gt;

      &lt;!-- sequential workflow --&gt;
      &lt;command name=&quot;stammer&quot; description=&quot;first workflow command&quot;		
	       command-type=&quot;WorkflowCommand&quot; is-static=&quot;true&quot;
	       error-handler-type=&quot;FAIL&quot;
	       &gt;
	&lt;workflow&gt;
	  &lt;command name=&quot;slither&quot;/&gt;
	  &lt;command name=&quot;echo&quot;/&gt;
	  &lt;command name=&quot;emit&quot;/&gt;
	  &lt;command name=&quot;shine&quot;/&gt;
	&lt;/workflow&gt;
	&lt;opts&gt;
	  &lt;opt parameter=&quot;message&quot; description=&quot;option name&quot; required=&quot;false&quot;
	       property=&quot;opts.message&quot; type=&quot;string&quot; default=&quot;duh...?&quot;/&gt;
	&lt;/opts&gt;
      &lt;/command&gt;

      &lt;!-- parallel workflow--&gt;
      &lt;command name=&quot;garble&quot; description=&quot;parallel workflow command&quot;		
	       command-type=&quot;WorkflowCommand&quot; is-static=&quot;true&quot;
	       error-handler-type=&quot;FAIL&quot;
	       &gt;
	&lt;workflow threadcount=&quot;5&quot;&gt;
	  &lt;command name=&quot;slither&quot;/&gt;
	  &lt;command name=&quot;echo&quot;/&gt;
	  &lt;command name=&quot;emit&quot;/&gt;
	  &lt;command name=&quot;shine&quot;/&gt;
	&lt;/workflow&gt;
	&lt;opts&gt;
	  &lt;opt parameter=&quot;message&quot; description=&quot;option name&quot; required=&quot;false&quot;
	       property=&quot;opts.message&quot; type=&quot;string&quot; default=&quot;duh...?&quot;/&gt;
	&lt;/opts&gt;
      &lt;/command&gt;

    &lt;!-- idempotent pattern example --&gt;
  &lt;command name=&quot;MyAction&quot;  description=&quot;example idempotent workflow&quot; 
	       command-type=&quot;WorkflowCommand&quot; error-handler-type=&quot;HANDLER&quot;&gt;
	&lt;error-handler quiet=&quot;true&quot;&gt;
	  &lt;command name=&quot;doMyAction&quot;/&gt;
	&lt;/error-handler&gt;
	&lt;workflow threadcount=&quot;1&quot;&gt;
	  &lt;command name=&quot;assertMyActionConditionIsMet&quot;/&gt;
	&lt;/workflow&gt;
      &lt;/command&gt;

      &lt;command name=&quot;assertMyActionConditionIsMet&quot;  description=&quot;asserts the condition is met. fail otherwise&quot; 
	       command-type=&quot;Command&quot;&gt;
	&lt;execution-string&gt;bash&lt;/execution-string&gt;
	&lt;argument-string&gt;[ -f /tmp/condtition.txt ] || exit 1;&lt;/argument-string&gt;
      &lt;/command&gt;

      &lt;command name=&quot;doMyAction&quot;  description=&quot;command to run if condition is not met&quot; 
	       command-type=&quot;Command&quot;&gt;
	&lt;execution-string&gt;bash&lt;/execution-string&gt;
	&lt;argument-string&gt;echo I did it&lt;/argument-string&gt;
      &lt;/command&gt;

    &lt;/commands&gt;
  &lt;/type&gt;

  &lt;!--
      Multiple &lt;type&gt; elements are allowed.
  --&gt;

  &lt;!-- 
	** Create a Setting type that exports an attribute named &quot;message&quot; :
    --&gt;
  &lt;type role=&quot;concrete&quot; uniqueInstances=&quot;true&quot; name=&quot;PolyMessage&quot; order=&quot;Setting&quot;&gt;
    &lt;description&gt;A message for poly&lt;/description&gt;
    &lt;supertype&gt;
      &lt;typereference name=&quot;DeploymentSetting&quot;/&gt;
    &lt;/supertype&gt;
    &lt;attributes&gt;
      &lt;attribute name=&quot;message&quot; type-property=&quot;settingValue&quot;/&gt;
    &lt;/attributes&gt;
    &lt;constraints&gt;
      &lt;dependency-constraint enforced=&quot;false&quot; kind=&quot;parent&quot;&gt;
	&lt;allowedtypes&gt;
	  &lt;typereference name=&quot;poly&quot;/&gt;
	&lt;/allowedtypes&gt;
      &lt;/dependency-constraint&gt;
    &lt;/constraints&gt;
  &lt;/type&gt;
&lt;/types&gt;
&lt;/pre&gt;

[[Category:Training Topics|160]]</text>
    </revision>
  </page>
  <page>
    <title>Course - Automation Development Essentials</title>
    <id>524</id>
    <revision>
      <id>16674</id>
      <timestamp>2012-02-27T16:49:28Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Setting sort key</comment>
      <text xml:space="preserve">==Overview==
=== What you will learn ===

Learn and understand the basic concepts and tools to develop automation modules.

==== Learn To ====

* Define a ControlTier object-oriented type model
* Use the ProjectBuilder development tool to create custom types
* Use &quot;type.xml&quot; file to define custom types
* Define an object model using &quot;project.xml&quot;

=== Audience ===

* System Engineers
* Developers

=== Prerequisites ===
==== Required Prerequisites ====

* Knowledge of object oriented concepts
* Command shell (Unix or Windows)
* [[Course_-_ControlTier_Intro|ControlTier Introduction Course]]

==== Suggested Prerequisites ====

* Basic programming skills such as shell scripting
* [[Course_-_Service_Life_cycle_Management]]

=== Course Objectives ===

* Understand the tools and key concepts to create custom types using ProjectBuilder
* Create commands and options for your custom type

== Course Topics==

==Architect's Role and Responsibilities==
===Role===
Often a &quot;System Engineer&quot;, This person creates the management integration code and scripts for the deployment process. They design and develop a custom Type model in the ControlTier software to represent the unique Deployment processes needed for the business service architecture. They maintain a library of code defining the Types used by the Service Manager as well as the Package Manager.
===Responsibilities===
* Develop integration and deployment code and scripts
* Design a Type Model to support the Deployment of software components for the Business Service
* Design a Type Model to support the Package Manager in Building custom software and producing Package artifacts
* Support the Service Manager's needs in designing the deployment model

===Activities===
* Design a Deployment and Build system
* Develop a set of Types
* Build and Load the Types into the ControlTier Server

==Concepts and Architecture==
===Solution Library===

* The ControlTier solution library is a set of foundational automation modules
* Automation modules contain types definitions and executable commands
* Building a solution is primarily achieved through configuring workflow commands implemented in the library
* The solution library contains structured and working processes already

Example: Integrated build and deployment process
* Provides a coordinated application service provisioning process 
** spans from build through to deployment.
* Library modules interact to provide and end-to-end workflow 
** automates packages being created,
** the storage of those packages in the ControlTier repository, and their 
** consumption by various Deployments and Services hosted on Nodes in the target environment. 

[[Image:coordinated-process.png]]

* Automation modules are not monolithic scripts but are object-oriented components. 
* Each module defines a type and a set of commands (akin to class methods), and attributes (akin to class properties). 
* Each step of the provisioning process is defined as a command in a type. 
* These commands are then combined together in workflow commands to establish higher level processes.

The following chart shows the library types and a subset of the commands each provides.

[[Image:base-types.png]]

* You can customize the behavior of any part of the process through sub-typing
** add new commands and overriding existing ones from the appropriate base type
* The object-oriented approach facilitates process refactoring
**  Refactoring is a very important requirement to keep up with a changing application

===Projects===
====Project model====
* In ControlTier, automation activity occurs within the context of a project model. 
* The project model is based on the type definitions and instances of those types
** The project model represents your application service's structure
** configuration of the application service components
** settings that drive the automation workflows
** metadata about the build artifacts that are used during deployment operations

====Types====

* A ''type'' defines the characteristics of an object via attributes and constraints (c.f., member data and roles)  
* A type's commands define the things it can do (c.f., methods). 
* A type can be relatively self contained, and include internal resources such as file templates, library dependencies, utilities, etc. 

====Objects====

* An ''object'' is a particular instance of a type. 
* An object inherits the characteristics defined by its type but can override them with values unique to itself.
* Objects collaborate by calling commands on each other. 
* Objects only collaborate with those that the constraints of the type definition allow.
* Objects represent the resource that comprise the business service and their configuration
* Objects can be arranged in composition hierarchies to describe
** whole part relationships representing software system structure
** package dependencies
** configuration settings

====Modules====
* A ''module'' is a set of type artifacts packaged into a JAR
** Includes command executables, property data
* Produced by ProjectBuilder or Workbench

[[Image:module-concept.png]]

The framework's dispatcher
* resolves the command to its handler, 
* provides data context and 
* then executes it

See also: [[Understand_CTL_OO_terminology]]

====Depots====

* A ''depot'' is a client side repository of project working data
** contains a subset of the server-side repository
* Depot is a local copy of the modules and objects relevant to that client

The repository on the server is a centralized store accessible by each of the clients
The repository provides access to
* Release artifacts: The packages uploaded during the build and distributed during deployment
* Model artifacts: These are types and objects, along with staged modules
* Activity data: Model revisions and history

[[Image:project-content.png]]

===CTL Framework===
* CTL contains a command dispatching framework built using the CTL API, to execute specified actions. 

[[Image:Node-command-concept.png]]

* The framework provides project projects for managing project configuration files, modules, objects and their instance data.
* Several utilities are included to execute commands and administer the framework.

The following diagram describes the components comprising the CTL framework.

[[Image:framework.png]]

===Command dispatching mechanism===

From the specified parameters, the CTL command dispatcher knows how to
* lookup command handlers in the module library, 
* generate a data context, and 
* execute the command handler.

[[Image:command-dispatcher.png]]

* A fundamental tenet in CTL is to &quot;soft code&quot; commands 
* State important detail in data files :
** separates the procedural logic from environment detail
** leads to commands that are more flexible and reusable in different environments

[[Image:framework-overview.png]]

See also: [[Understand_CTL_dispatching_mechanism]], [[CTL architecture]], [[Understanding_the_abstracted_administration_paradigm]]

===Introducing ProjectBuilder===
* ProjectBuilder is a type containing commands to produce and maintain the project model
* It is a Builder and therefore supports a Build life cycle
** Checkout project model sources (eg type and resource definitions)
** Build the types into a reusable library that can be uploaded to the repository

[[Image:pb-overview.png]]

Defining new modules is simple and follows a typical edit, build, run cycle as shown in the figure below:

[[Image:pb-dev-cycle.png]]

# Edit type.xml: Define the type, it's command, attributes and constraints
# Run the build-type command to compile the type definition into a software module
# Run the commands defined in the module via the dispatcher

See also: [[type.xml]]

==ProjectBuilder Setup==

* You can register an instance of ProjectBuilder from the command line using the &lt;code&gt;Register&lt;/code&gt;
** The &quot;-o training&quot; option defines the new object's name (ie training) and does not have to exist in the project model

&lt;pre&gt;
ctl -p demo -t ProjectBuilder -r training -c Register -- \
	   -basedir $CTL_BASE/src -installroot $CTL_BASE/target -install
&lt;/pre&gt;
&lt;pre&gt;
Checking for existing object, (ProjectBuilder) training, in project, 'demo'...
Registered new object.
.
.
.
For more information about this object run: ctl -p demo -t ProjectBuilder -r training -c Properties	
&lt;/pre&gt;

* Once the ProjectBuilder object is registered and installed you can run any of its commands.

Try the command line completion (assumes bash shell):

&lt;pre&gt;
ctl -p demo -t ProjectBuilder -r training -c[tab] 
&lt;/pre&gt;
&lt;pre&gt;
Build                       Properties                  create-project              purge-resources
Change-Dependencies         Purge                       create-type                 refactor-rename
Configure                   Register                    exec                        remove-tag
Deploy                      Register-Dependency         find-jobs                   repoExport
Docs-Generate               Set-Properties              find-resources                repoFind
Docs-Verify                 Update                      generate-forrest-docs       repoImport
Export                      add-tag                     generate-jobs               repoPurge
Get-Process-View            archive-resources             generate-resources            runBuildScript
Get-Properties              build-library               generateBuildstampExcludes  runChangeDependencies
Get-Supers                  build-object                load-jobs                   scmCheckout
Install                     build-type                  load-library                setBuildstamp
Install-Module              convert-rdf                 load-resources                
Packages-Install            create-object               load-types
&lt;/pre&gt;	

Run the &quot;Properties&quot; command to see the configuration of this ProjectBuilder:
&lt;pre&gt;
ctl -p demo -t ProjectBuilder -r training -c Properties
&lt;/pre&gt;

You can also view the information about this object from Workbench.

* Navigate to the Package Maanger -&gt; Builder List menu and click in the &quot;training&quot; instance.
* Clicking on it will show you the details tab
** You can see its properties and commands via the buttons shown in the screenshot

[[Image:workbench-ProjectBuilder-training-view.png]]

See also: [[Use_ProjectBuilder]]

==Type Modeling==

See: [[Type_modeling]], [[Attributes]], [[Constraints]]

==Create new type==
* Run the &lt;code&gt;create-type&lt;/code&gt; command to define a new type
* The create-type command takes your input and generates the source files to maintain a new module

You will be prompted three times. Your responses should be:
* Name of type: &quot;poly&quot;
* Description of type: &quot;says hi&quot;
* Choose a supertype: &quot;Deployment&quot;

&lt;pre&gt;
ctl -p demo -t ProjectBuilder -r training -c create-type
&lt;/pre&gt;
&lt;pre&gt;
Name of type: 
poly
Description of type: 
says hi 
Choose a supertype:  ([Managed-Entity], Package, Builder, Deployment, Service)
Deployment
Creating module definition files in directory: /Users/alexh/ctier/ctl/src ...
Creating directory structure...
Created dir: /Users/alexh/ctier/ctl/src/modules/poly
Created dir: /Users/alexh/ctier/ctl/src/modules/poly/bin
Created dir: /Users/alexh/ctier/ctl/src/modules/poly/commands
Created dir: /Users/alexh/ctier/ctl/src/modules/poly/objects
Created dir: /Users/alexh/ctier/ctl/src/modules/poly/templates
Initializing type module from template dir: /Users/alexh/ctier/ctl/projects/demo/modules/ProjectBuilder/templates/boilerplate ...
Copying 2 files to /Users/alexh/ctier/ctl/src/modules/poly
Define commands and attributes in this file: /Users/alexh/ctier/ctl/src/modules/poly/type.xml
&lt;/pre&gt;

===Inside the module directory===

* At a file level, a module has a directory structure that organizes files into several locations. 
* Modules are defined in an XML file called type.xml. 
* The ProjectBuilder's &quot;build-type&quot; command reads the type.xml file and generates an executable set of commands.
* Alternatively, Workbench can be used to develop any aspect of a type and then be generated into a CTL module.

Module directory layout:
&lt;pre&gt;
module_name
  |
  |--- commands.properties // file containing command metadata (auto-generated)
  |--- module.properties   // file containing module metadata (auto-generated)
  |--- type.properties     // file containing type metadata (auto-generated)
  |--- type.xml            // file containing command definitions (user created/modified)
  |
  +--- bin                 // optional binaries, shell scripts, etc.
  |
  +--- commands            // contains generated commands
  |
  +--- lib                 // optional resource files
&lt;/pre&gt;

Run &lt;code&gt;build-type&lt;/code&gt; command
* The &quot;-type poly&quot; specifies to build the module for the &quot;poly&quot; type
* The &quot;-upload&quot; flag indicates to upload the module to Workbench and load it into the project model
* The &quot;-deploy&quot; flag stipulates to then install the module into the local project project. 
** After a module is deployed you can run its commands

&lt;pre&gt;
ctl -p demo -t ProjectBuilder -r training -c build-type -- -type poly -upload -deploy
&lt;/pre&gt;

&lt;pre&gt;
Building type using the buildmodule.xml via classloader
converting type.xml for module: poly
generating handlers...
packaging module: poly
Copying 1 file to /Users/alexh/ctier/ctl/src/modules/poly
Copying 1 file to /Users/alexh/ctier/ctl/src/modules/poly
Deleting: /Users/alexh/ctier/ctl/src/modules/poly/module.properties.temp
Building jar: /Users/alexh/ctier/ctl/target/modules/poly-1.jar
Uploading built module to server ...
processing files in directory: /Users/alexh/ctier/ctl/target/modules
scanning for files matching pattern: (poly)-([0-9]+)\.jar
Uploading jar: /Users/alexh/ctier/ctl/target/modules/poly-1.jar to server: 'strongbad' ...
Installing new build of &quot;poly&quot; module from server ...
Getting: http://strongbad:8080/jackrabbit/repository/controltier/projects/demo/publish/modules/poly-head.jar
To: /Users/alexh/ctier/ctl/var/tmp/downloads/demo/poly-head.jar
Created dir: /Users/alexh/ctier/ctl/projects/demo/modules/poly
Expanding: /Users/alexh/ctier/ctl/var/tmp/downloads/demo/poly-head.jar into /Users/alexh/ctier/ctl/projects/demo/modules/poly
&lt;/pre&gt;

Since the module was uploaded you can view the &quot;poly&quot; type definition in Workbench:
* Go to the home page
* In the &quot;Type Search&quot; text field, type in &quot;poly&quot;
* View the &quot;poly&quot; type

Figure: Detail view page for &quot;poly&quot;

[[Image:workbench-Type-poly-details.png]]

Figure: Commands view page for &quot;poly&quot;

[[Image:workbench-Type-poly-commands.png]]

From the command line you can also list the commands of poly like so:
&lt;pre&gt;
ctl -p demo -m poly
&lt;/pre&gt;

The &quot;-m&quot; option indicates to list the commands in the module &quot;poly&quot;.

See also: [[First CTL module]]

===Inside the type.xml===

* The type.xml is the central source file for the poly module.
* The screenshot below shows the generated type.xml file produced by &lt;code&gt;create-type&lt;/code&gt;
* The type.xml file defines one or more types, each of which is declared inside its own &lt;code&gt;type&lt;/code&gt; tag
* Types have a common set of attributes and elements
** Each type has a name, description and supertype
** They also have a number of global command-settings
** &lt;code&gt;attributes&lt;/code&gt; declare object properties
** &lt;code&gt;constraints&lt;/code&gt; govern the kinds of relationships and literal values for types
** &lt;code&gt;commands&lt;/code&gt; define the set of executable operations

Figure: $CTL_BASE/src/modules/poly/type.xml.

[[Image:screenshot-poly-type.xml.png]]

==Define a command==

* Inside the &lt;code&gt;commands&lt;/code&gt; element in the type.xml file, you define one or more commands.
* Commands can be used to control life cycle actions but can also be used to control processes and interface with other tools.
* The implementation of a command is called its handler.
* Command handlers are XML files that read property files to establish a data context and execute the defined action.
* Handlers are generated by the &lt;code&gt;build-type&lt;/code&gt; command

===Insert command tags===
* Define commands using the &quot;command&quot; tag set
* Each command tag includes attributes describing type of command, description
** Commands can also define parameters via the &quot;opts&quot; and &quot;opt&quot; tags
* Each command definition is a child of the &quot;commands&quot; element

Define a command named &quot;slither&quot;:
&lt;pre&gt;
 &lt;command name=&quot;slither&quot; description=&quot;Say something with python.&quot; 
               command-type=&quot;BsfCommand&quot; is-static=&quot;true&quot;&gt;       
	&lt;script language=&quot;jython&quot;&gt;print &quot;python says: %s&quot; % project.getProperty('opts.message')&lt;/script&gt;
	&lt;opts&gt;
	  &lt;opt parameter=&quot;message&quot; description=&quot;message to print&quot; required=&quot;false&quot; 
	       property=&quot;opts.message&quot; type=&quot;string&quot; defaultproperty=&quot;context.name&quot; default=&quot;ssss&quot;/&gt;
	&lt;/opts&gt;
  &lt;/command&gt;
&lt;/pre&gt;

* This example command was defined as a BsfCommand command-type
** Uses BSF to support a variety of scripting languages (eg, jython, ruby, javascript, groovy, beanshell, etc)
* Other command-types include: Ant, Shell, Daemon, Workflow, DispatchCommand

See also: [[Define a command]]

===Run build-type===

Run the &lt;code&gt;build-type&lt;/code&gt; command to generate a working module:
&lt;pre&gt;
ctl -p demo -t ProjectBuilder -r training -c build-type -- -type poly -upload -deploy
&lt;/pre&gt;

If you check the content of your source directory you will now see a new XML file in the commands directory:

&lt;pre&gt;
$ ls $CTIER_ROOT/ctl/src/modules/poly/commands
slither.xml
&lt;/pre&gt;

Going back to Workbench, you can view the poly commands listing again:

[[Image:workbench-Type-poly-commands-slither.png]]

You will now see the definition for &quot;slither&quot;

===Run the command===

Specify the &quot;poly&quot; module name via the &lt;code&gt;-m&lt;/code&gt; parameter and the &quot;slither&quot; command using &lt;code&gt;-c&lt;/code&gt;:
&lt;pre&gt;
ctl -p demo -m poly -c slither
&lt;/pre&gt;
You should see the following output.
&lt;pre&gt;
python says: ssss
&lt;/pre&gt;	

The &quot;ssss&quot; string comes from the &lt;code&gt;default=&quot;ssss&quot;&lt;/code&gt; attribute definition from the type.xml

Try it again but this time specify your own argument

&lt;pre&gt;
ctl -p demo -m poly -c slither -- -message training
&lt;/pre&gt;
You should see the following output.
&lt;pre&gt;
python says: training
&lt;/pre&gt;

====Referencing context data====

* Commands execute in a data context accessible to the script inside the handler
* Context data comes in the form of property names 
* All commands share basic context info including
** framework configuration
** dispatching metadata
** environment variables (via ${env.KEYNAME} format)

Print the CTL_BASE environment variable:
&lt;pre&gt;
$ ctl -p demo -m poly -c slither -- -message '${env.CTL_BASE}'
python says: /Users/alexh/ctier/ctl
&lt;/pre&gt;

Print the name of this CTL instance's node name:
&lt;pre&gt;
$ ctl -p demo -m poly -c slither -- -message &quot;'I am on Node, \${framework.node.name}'&quot;
python says: I am on Node, strongbad
&lt;/pre&gt;
	
Print the name of the module being dispatched to:
&lt;pre&gt;
$ ctl -p demo -m poly -c slither -- -message '${context.module}'
python says: poly
&lt;/pre&gt;
	
==Define an object==
* You can only get so far using defaults and command line options for context data
* You can define an instance of your type to manage its own context data

===Create definition===

File listing: $CTL_BASE/src/modules/poly/objects/training/object.xml

&lt;pre&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE project PUBLIC &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; &quot;project.dtd&quot;&gt;

&lt;project&gt;
  &lt;deployment 
      type=&quot;poly&quot;
      name=&quot;training&quot; 
      description=&quot;The training poly deployment.&quot; 
      installRoot=&quot;${ctl.base}/projects/demo/resources/poly/training&quot; 
      basedir=&quot;${ctl.base}/projects/demo/resources/poly/training&quot; &gt;
    &lt;referrers&gt;
      &lt;resource name=&quot;strongbad&quot; type=&quot;Node&quot; /&gt;
   &lt;/referrers&gt;
  &lt;/deployment&gt;
&lt;/project&gt;
&lt;/pre&gt;

===Load the definition===

&lt;pre&gt;
ctl -p demo -t ProjectBuilder -r training -c load-resources -- \
  -filename $CTL_BASE/src/modules/poly/objects/training/object.xml
&lt;/pre&gt;

[[Image:workbench-Type-poly-resources.png]]

===Deploy the object===

&lt;pre&gt;
ctl-project -p demo -a install --name training
&lt;/pre&gt;

==Call the command via the object==

&lt;pre&gt;
ctl -p demo -t poly -r training -c slither
&lt;/pre&gt;
&lt;pre&gt;
python says: training
&lt;/pre&gt;	
	
* The string, &quot;training&quot;, was supplied using the value of &quot;${context.name}&quot;
* Recall the message option definition in &quot;slither&quot; included: &lt;code&gt;defaultproperty=&quot;context.name&quot;&lt;/code&gt;
* The &quot;context.name&quot; property is a dynamic property generated in the data context by the dispatcher
** context.name specifies the name of the object being referenced in the &quot;-o&quot; argument 

You can still specify your own message via argument string:
&lt;pre&gt;
$ ctl -p demo -t poly -r training -c slither -- -message hi
python says: hi
&lt;/pre&gt;

* You can use the &lt;code&gt;Properties&lt;/code&gt; command to see all the property names

&lt;pre&gt;
ctl -p demo -t poly -r training -c Properties -- -format plain
&lt;/pre&gt;

==Manage sources in SCM==
* It is considered best practice and also highly encouraged to manage the project sources in an SCM

# Import the sources to the SCM
# Configure ProjectBuilder settings to support checkout
# Run the ProjectBuilder &lt;code&gt;scmCheckout&lt;/code&gt; command
&lt;pre&gt;
ctl -p demo -t ProjectBuilder -r training -c scmCheckout	
.
.
.
&lt;/pre&gt;

See [[Use ProjectBuilder]] for a complete set of instructions on setting up ProjectBuilder for SCM checkout and Build life cycle.

==Suggested Next Courses==

* [[Course - Architect: Commands and Workflows]]

[[Category:Training Topics|150]]</text>
    </revision>
  </page>
  <page>
    <title>Course - ControlTier Intro</title>
    <id>422</id>
    <revision>
      <id>16670</id>
      <timestamp>2012-02-27T16:48:04Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Setting sort key</comment>
      <text xml:space="preserve">==Overview==
=== What you will learn ===

This course describes the overall ControlTier concept.  This includes the components that define a Control Tier, and the roles that people must adopt to build, manage, control, support and maintain a complex multi-tier application for a live Business Service environment.  

You will learn how the various Roles support the ControlTier concept, and how they play a part in continued operations.  You will understand the activities that each Role will perform.

You will learn the infrastructure of ControlTier software, processes, and user actions. You will learn how the conceptual components of the Control Tier are defined in the ControlTier system, and the core Type Model used to define them.

You will learn to use the Graphical User Interfaces of each of the ControlTier software components, and the basics of the CTL Command-line interface. 

==== Learn To ====
* Interact with the ControlTier software via GUI and command-line
* Explain the roles and activities used by ControlTier
* Understand the concepts and core Type system

=== Audience ===

* Software Engineers
* Build and Release Engineers
* System Engineers
* System Administrators

=== Prerequisites ===
==== Required Prerequisites ====

* Awareness of modern software architectures and operational procedures
* Familiarity with using web-based applications

==== Suggested Preqrequisites ====

* Experience in some part with one of:
** Command shell (Unix or Windows)
** Software Development
** Operational Management
** System Administration
** Build and Release Management

=== Course Objectives ===

* Define the Control Tier needed to manage a Business Service
* Define the fundamental roles that support the ControlTier concept
* Categorize operational activities to apply to one of the roles
* Map existing software/operational items in a working system to the concepts used in ControlTier
* Familiarity with the purpose and usage of the core Type model

== Course Topics==

== Fundamentals ==

=== What is the Control Tier ? ===

{{What is the Control Tier}}

See also [[Concepts]].

== Roles &amp; Responsibilities ==

=== Roles ===
The Control Tier typically consists of these roles:

; System Administrator
: This person is responsible for installing and maintaining the ControlTier software and its configurations.  They are in charge of maintaining the registry of Nodes in the system, and managing user accounts and roles.

; Package Manager
: This person is often known as the &quot;Build Engineer&quot; or &quot;Release Engineer&quot; or &quot;SCM Guy&quot;.  They are responsible for creating new builds of software components, as well as maintaining and populating a repository of build artifacts. Often this also includes third-party or externally supplied package artifacts. They produce packages that are consumed by the Service Manager.

; Service Manager
: Often called the &quot;Application Administrator&quot; or &quot;Deploy Guy&quot;, this person is responsible for deploying software packages, and managing configurations.  They design and maintain the topology of a set of applications in the environment. They consume build Packages produced by the Package Manager, and must adapt their designs to the Nodes made available by the System Administrator.

; Architect
: Often a &quot;System Engineer&quot;, This person creates the management integration code and scripts for the deployment process. They design and develop a custom Type model in the ControlTier software to represent the unique Deployment processes needed for the business service architecture.  They maintain a library of code defining the Types used by the Service Manager as well as the Package Manager.

=== Responsibilities ===

Each role has a set of unique responsibilities, and some responsibilities must be fulfilled by collaboration between some or all of the roles.

==== System Administrator ====

* Install the ControlTier Server software
* Configure user accounts and roles, including LDAP or other Directory based authentication if required
* Install the ControlTier Client on provisioned hardware as needed and allocate Nodes to projects
* Perform required system maintainence, such as backing up data, managing disk space, upgrading software, etc.

==== Package Manager ====

The Package Manager's primary responsibility is to create the Build Process, produce Package artifacts from the Build Process to be imported into the Repository, and maintain the Repository:

* Run builds as needed to produce valid Package artifacts that are imported into the Package Repository.
* Import third-party or external Package artifacts into the Repository.
* Perform maintainence of the Package repository such as purging old and unused artifacts to create space.
* Develop a Build process using the built-in Builder type and related modules.
* Collaborate as needed with an Architect to develop any custom code required for the Build process.

==== Service Manager ====
* Conduct service management processes to support the business service
* Develop an Object Model representing the Services and Deployments in the Business Service
* Maintain the Object Model
* Run commands that support service management processes

==== Architect ====

* Develop integration and deployment code and scripts
* Design a Type Model to support the Deployment of software components for the Business Service
* Design a Type Model to support the Package Manager in Building custom software and producing Package artifacts
* Support the Service Manager's needs in designing the deployment model

== Activities == 

* System Administrator
** Install the ControlTier Server
** Install the ControlTier Client on a Node
** Configure Users and Roles
** Configure LDAP Authentication
* Package Manager
** Build a Package Artifact and Import it into the Repository
** Purge unused Packages from the Repository
* Service Manager
** Create a project.xml to represent a Deployment configuration
** Deploy an integrated set of Software components and configurations
** Update a Deployment with a new version of a Package
** Start and Stop Services and Sites
* Architect
** Design a Deployment and Build system
** Develop a set of Types
** Build and Load the Types into the ControlTier Server

== User Interfaces and Orientation ==

* CTL
* Workbench
* Jobcenter
* Reportcenter

All of the GUI applications can be switched between using the &quot;Apps&amp;hellip;&quot; menu in the top navbar of the screen:

[[Image:GUI_apps_menu.png||||Apps Menu]]

* Switch between the three applications using the menu. Use the same login credentials when prompted.

=== CTL ===

CTL is the ControlTier Client toolset, and consists of several command-line based tools for using ControlTier.

;&lt;code&gt;ctl&lt;/code&gt;
:The primary command-line tool for ControlTier.  This tool invokes Defined Commands and can list available elements in the client installation

The &lt;code&gt;ctl&lt;/code&gt; tool can be used to list available contexts:

&lt;pre&gt;
$ ctl -p demo 
Service: An interface to an application service deployment
commands: [Change-Dependencies, Configure, Deploy, Docs-Generate, ...
...

$ ctl -p demo -t TomcatController 
[objects]
  tomcat1: The Tomcat deployment.

...

$ ctl -p demo -t TomcatController -r tomcat1 
TomcatController: Controls Tomcat
[commands]
  Change-Dependencies: Query model and switch package dependencies to the specified version or buildstamp.
    [options]
    [-buildstamp &lt;&gt;]: build identifier. Required if no -version opt
    [-version &lt;&gt;]: package version. Required if no -buildstamp opt
  Configure: Run the configuration cycle for the deployment.
  ...
&lt;/pre&gt;

It is primarily used to invoke defined commands for particular contexts:

&lt;pre&gt;
$ ctl -p demo -t TomcatController -r tomcat1 -c Start 
begin workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot; ...
Executing bourne shell script: /Users/greg/ctier2/ctl/projects/demo/modules/TomcatController/bin/isup.sh
Tomcat is UP
end workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot;
&lt;/pre&gt;

&lt;code&gt;ctl&lt;/code&gt; has two &quot;modes&quot;, either Object Context, or Module Context.  Module context allows you to execute some commands without needing an associated Object Model.  Object Context commands require that an Object of the selected Type exists deployed to the CTL instance to work.  (Module and Object commands correspond to the Object-oriented concepts of &quot;instance&quot; vs. &quot;static&quot; methods.)

;&lt;code&gt;ctl-exec&lt;/code&gt;
: This tool allows you to dispatch ad-hoc execution of scripts to any set of Nodes via simple filtering criteria.  It lets you easily execute a shell script or command on any set of Nodes in a one-off fashion.

You can use &lt;code&gt;ctl-exec&lt;/code&gt; to quickly execute a simple shell command across all Nodes registered to your Project:

&lt;pre&gt;
$ ctl-exec -- uname -a
number of nodes to dispatch to: 3, (threadcount=1)
Darwin dev1 9.6.0 Darwin Kernel Version 9.6.0: Mon Nov 24 17:37:00 PST 2008; root:xnu-1228.9.59~1/RELEASE_I386 i386
Darwin dev2 9.6.0 Darwin Kernel Version 9.6.0: Mon Nov 24 17:37:00 PST 2008; root:xnu-1228.9.59~1/RELEASE_I386 i386
Darwin qa1 9.6.0 Darwin Kernel Version 9.6.0: Mon Nov 24 17:37:00 PST 2008; root:xnu-1228.9.59~1/RELEASE_I386 i386
&lt;/pre&gt;

You can use the &lt;code&gt;-I&lt;/code&gt; option to include only a subset of the Nodes:

&lt;pre&gt;
$ ctl-exec -I dev1 -- uname -a
number of nodes to dispatch to: 1, (threadcount=1)
Darwin dev1 9.6.0 Darwin Kernel Version 9.6.0: Mon Nov 24 17:37:00 PST 2008; root:xnu-1228.9.59~1/RELEASE_I386 i386
&lt;/pre&gt;

You can use the &lt;code&gt;-X&lt;/code&gt; option to exclude some set of all of the Nodes, and filters can also specify certain properties to be used, such as &quot;tags&quot;:

&lt;pre&gt;
$ ctl-exec -X tags=dev -- uname -a
number of nodes to dispatch to: 1, (threadcount=1)
Darwin qa1 9.6.0 Darwin Kernel Version 9.6.0: Mon Nov 24 17:37:00 PST 2008; root:xnu-1228.9.59~1/RELEASE_I386 i386
&lt;/pre&gt;

;&lt;code&gt;ctl-project&lt;/code&gt;
: This tool is used by System Administrators to setup and register a Node for a particular Project.  It can also be used to update the set of deployed Object definitions for a particular Node and Project, with the &lt;code&gt;-a install&lt;/code&gt; option.

&lt;code&gt;ctl-project -a install&lt;/code&gt; accesses the Server to determine the set of control Modules and Objects for the Node, and then installs them:

&lt;pre&gt;
$ ctl-project -p demo -a install
&quot;Install&quot; command running for resource: (TomcatController) tomcat1
&quot;Install&quot; command running for resource: (ProjectBuilder) tutorial
&lt;/pre&gt;

;&lt;code&gt;ctl-setup&lt;/code&gt;
: This tool can be used by System Administrators to configure a new installation of the CTL software on a Node.

=== Workbench ===

Workbench is the ControlTier Server.  The name &quot;Workbench&quot; is often used to mean the Server application itself, or merely the GUI portion of it. It is a web-based application that can be used to navigate, view, design and develop both Type Models and Object Models.  It also provides a WebDAV-based repository used for storing Package Artifacts and other files used by the ControlTier Server.

To access Workbench, you must first log in:

[[Image:Workbench_login.png|200px|||Login]]

Once you have logged in, select a project

[[Image:Workbench_select_project1.png]]

[[Image:Workbench_select_project2.png]]

Workbench organizes its contents into four main sections:  Node Manager, Package Manager, Service Manager, and Process Manager.

[[Image:Workbench_four_sections.png|200px|||Four Sections]]

Click the &quot;Advanced Search&quot; button to search for any Object or Type:

[[Image:Workbench_search.png]]

You will be presented with the Search Results:

[[Image:Workbench_search_results.png|200px|||Search Results]]

Click a Type name to view the Type:

[[Image:Workbench_view_type.png|200px|||View Type]]

From the Object Search results, click an Object name to view an object:

[[Image:Workbench_view_object.png|200px|||View Object]]

Or from the main page you can also choose the &quot;Browse Types&quot; to navigate to any Type or Object:

[[Image:Workbench_type_browser1.png]]

[[Image:Workbench_type_browser.png]]

===Jobcenter===

Login to Jobcenter.

[[Image:Jobcenter_login.png|200px|||Login]]

You will be able to browse the list of Jobs, and expand the Groups to view grouped Jobs.

[[Image:Jobcenter_joblist.png|200px|||Jobs List]]

Click on a Job name to view more details about it.

[[Image:Jobcenter_job_view.png|200px|||Job View]]

Click on the &quot;Run Job Now&quot; to run the Job immediately without changing the options, or click &quot;Choose Options and Run Job&quot; to execute a Job and specify some options.

[[Image:Jobcenter_run_job.png|200px|||Run a Job]]

You will be able to see all running Jobs in the Now Running page, as well as recently completed Jobs.

[[Image:Jobcenter_now_running.png|200px|||Now Running Page]]

Previous executions of each Job can be seen from the Job List, or from the Job page.

[[Image:Jobcenter_previous_executions.png|200px|||Previous Executions]]

===Reportcenter===

Reportcenter provides lists of reports from three sources: Jobcenter Job execution results, CTL command-line execution results, and Workbench model and data changes, or a combined list of all three.

Selecting Reportcenter from the Apps&amp;hellip; menu from either Jobcenter or Workbench will take you to the appropriate view in Reportcenter.

[[Image:Reportcenter_all_list.png|200px|||Reportcenter - All Events View]]

==Dukes Bank Demo==

Go through the Basic demos to get a hands on experience of ControlTier in action.

See: [[ControlTier_Demo]]

== Suggested Next Courses ==

* See: [[Training Topics]]

[[Category:Training Topics|110]]</text>
    </revision>
  </page>
  <page>
    <title>Course - Deployment Automation Essentials</title>
    <id>525</id>
    <redirect />
    <revision>
      <id>3133</id>
      <timestamp>2009-03-09T17:29:05Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>[[Course - Deployment Automation Essentials]] moved to [[Course - Automation Development Essentials]]</comment>
      <text xml:space="preserve">#REDIRECT [[Course - Automation Development Essentials]]</text>
    </revision>
  </page>
  <page>
    <title>Course - Package Manager</title>
    <id>465</id>
    <revision>
      <id>16672</id>
      <timestamp>2012-02-27T16:49:11Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Setting sort key</comment>
      <text xml:space="preserve">==Overview==
=== What you will learn ===

===== Learn To =====
* Import packaged artifacts into the ControlTier repository
* Integrate your build process into a Builder 
* Maintain the repository

=== Audience ===

* Build engineers
* System engineers

=== Prerequisites ===
==== Required Prerequisites ====

* Command shell (Unix or Windows)
* [[Course_-_ControlTier_Intro|ControlTier Introduction Course]]

==== Suggested Prerequisites ====

* Familiarity with software building and software configuration management tools
* Familiarity with system packaging

=== Course Objectives ===

* Introduce the ControlTier repository and Builder and Package types
* Import packaged artifacts into the repository
* Integrate the build process to the repository import process
* Maintenance of the repository

== Course Topics==
==Package Manager's Role and Responsibilities==
===Role===
This person is often known as the &quot;Build Engineer&quot; or &quot;Release Engineer&quot; or &quot;SCM Guy&quot;. They are responsible for creating new builds of software components, as well as maintaining and populating a repository of build artifacts. Often this also includes third-party or externally supplied package artifacts. They produce packages that are consumed by the Service Manager.
===Responsibilities===
* Run builds as needed to produce valid Package artifacts that are imported into the Package Repository.
* Import third-party or external Package artifacts into the Repository.
* Perform maintenance of the Package repository such as purging old and unused artifacts to create space.
* Develop a Build process using the built-in Builder type and related modules.
* Collaborate as needed with an Architect to develop any custom code required for the Build process.

===Activities===
* Build a Package Artifact and Import it into the Repository
* Purge unused Packages from the Repository

==Repository Overview==

===Uses===

====Package Library====
	
* The repository is a convenient tool to use as a package library for software, or any packaged artifact. 
* You can populate the package repository by directly uploading 3rd-party packages or connect your build process to the	package import utilities provided in ControlTier.

[[Image:repository-package-library.png]]

* Each uploaded packaged artifact is also registered with a set of common metadata that describes 
** version,
** owner,
** location,
** dependencies and
**  installation information.

====Support Deployment====
* Combined with CTL, you can deploy packages using the package repository as a centralized store. 
* Any kind of package can   be stored and distributed from the repository. 
* There's built in   suppport for common archive formats like RPM, PKG, JAR, WAR and even Zip and Tar/Gz. 
* You can define your own kinds of package types when the need arises.

[[Image:repository-package-deployment.png]]

*  The ControlTier repository supports package metadata needed by CTL package life cycle commands  to prepare, get, extract and finish. 
* You can hook in your existing   prepare and finish scripts, as well. 
* A chief benefit to using CTL to deploy packages is large scale release management. 
* CTL enables you deploy packages  logically, letting you target just the machines where your integrated   software system components are distributed.
* Any HTTP  client can also access packages in the repository (eg use wget, curl or any other HTTP client to download files. 
* You can also use scripting interfaces to lookup packages and read their metadata.
      
====Track Use====
Tracking can be done at a couple of levels. 
* You can use the metadata that describes each package in the repository to define its lifecycle state (eg. it's tested, deployed). 
* You can also use the configuration data store to register where the package is currently deployed and for what component.
* This gives you convenient roll up views that tell you on what nodes and for which applications a given package is used.

[[Image:repository-package-tracking.png]]

* Workbench's repository also supports the storage of packaged artifacts. 
* These artifacts may be the product of an internally developed software build or orignate from a 3rd-party vendor. 
* Workbench provides a graphical and scriptable interface to browsing the content of the repository. 

[[Image:workbench-repository-cursory.png]]

===Based on WebDAV===
* The repository is based on [http://jackrabbit.apache.org/ Apache Jackrabbit] an implementation of standard web technology, called WebDAV, and 
* is combined with the configuration metadata features. 
* All package artifacts are accessible via HTTP and all storage operations can be done via a WebDAV client (eg, GET, PUT, DELETE, MKCOL).

====WebDAV client====
The ControlTier solution library includes a module named {{coreref|davutil|davutil}} that provides commands for a small set of basic DAV operations.
Running &lt;code&gt;ctl -p demo -m davutil&lt;/code&gt; will print the set of commands.

You can also use other standard DAV client utilties. See [http://www.webdav.org] for references to WebDAV resources.

===CMDB Integration===

* The ControlTier repository also integrates with the CMDB.
* Packages are also registered as an object in the CMDB at import time.
* The CMDB supports features like tracking, dependencies and cataloging. 
* What ties it together is the URL
** Opens possibility to not storing it in the WebDAv but elsewhere!

==Workbench Package Manager==

* The Workbench application includes an interface to managing packages. 
* Provides a graphical view to what is in the repository
* Includes views into the build configurations used by the business service

===User Interface===

From the Workbench home page, click the Package Manager icon

Within the Package Manager there are two tools:
# Package List: Manages deployable artifacts
# Builder List: Manages software build logic

[[Image:workbench-package-manager.png]]

Clicking on the package list icon will list packages that have been imported to the repository.  
Each package shows three kinds of information
* metadata about the package
* what Services is registered to use it
* the node(s) the package is registered to reside

[[Image:workbench-package-manager-package-list.png]]

The Builder list action will list the builder configurations that populate the repository with packages.

Each listed builder can be expanded to show
* What node the builder is registered to run
* Base and install directories where checkouts and targets can be found

[[Image:workbench-package-manager-builder-list.png]]

==The Package and Builder Types==
=== Package===

* The Package type represents a deployable packaged artifact 
* Package type provides commands for repository upload and registration.
* Attributes of the Package provide the metadata model for artifacts in the repository
* Ties into the deployment model 

====Need and objectives====
Problems addressed by Package:

* A business service may require a multitude of diverse packages
* Packages come with many differences in formats and tools
* No common life cycle to create and install them

[[Image:package-discussion-problem.png]]

Solution objectives:

* Define an object that encapsulates the lifecycle of a software package.
* Decouple content from life cycle
* Abstract the differences between different package formats behind standard life cycle commands
* Define a set of key metadata attributes 
* Support for package dependencies
** ... even across packages of different formats!
* Provide hooks to call scripts and tools during life cycle steps

[[Image:package-discussion-solution.png]]

* The Package abstraction organizes the details of the package life cycle into several categories:
** configuration, procedures, context and content.
*** Package configuration encompasses essential installation, version, dependency, storage and deployment attributes. This configuration data is used to drive the package life cycle procedures.
*** Life cycle procedures fall into two general categories: creation and installation. 
**** Creation methods take as input package content and output a package artifact using the format specific to that package type. Additionally, the creation method can store the package artifact into a release repository for later distribution. 
**** Installation methods pull the package from the repository, extract it to the host and perform optional pre- and post-installation.
** Occasionally, environment specific information is required by the life cycle methods (though one should strive to avoid this), therefore the package abstraction provides the means to override configuration parameters with needed values.

The graphic below describes the two phases of the build and installation cycle for a package.

[[Image:package-example.png]]

====Life cycle commands====

;Creation
: create, upload, register

;Installation
: Install, assertPackageIsInstalled, installPackage, installDependencies, prepare, get, extract, finish

[[Image:workbench-package-processflow-installPackage.png]]

Any of these commands can be overridden to specify your own custom logic but...
* Ordinarily, only &quot;prepare&quot; and &quot;finish&quot; are typical

See: [[Prepare_Finish_Scripts]]

===Builder===
The Builder type defines an object that encapsulates the build life cycle procedures for an application component. 

====Need and objectives====

Problems addressed by Package:

* Multiple software components each with their own build tool and or configuration
* Heterogenous tools each with setup and sytax
* Heterogenous artifacts

* The figure below describes these different dimensions to a build process:

[[Image:builder-discussion-problem.png]]

Solution objectives:

* Builder abstraction that provides a common interface to executing the build life cycle for each component. 
* A common interface defining a standard process structure of the build life cycle, with each phase defined in terms of its own phase-specific steps. 
* The phase-specific steps can then be mapped to tasks that integrate with the tools and configuration used to generate each of the application components.

This offers several advantages: 
*  The general build life cycle is decoupled from the application component specific build procedures. 
* The abstract interface facilitates the possibility to define integrated processes that automate many related application component builds. 
* One can extend the generic build life cycle process structure by defining derived classes.

[[Image:builder-discussion-solution.png]]

The figure below illustrates these parts. 

* A Builder named &quot;headlines&quot; is defined to produce two packages - headlines-2.01.war and appbase-2.01.jar. 
* It takes as input build configuration data providing key parameters describing such details like: source code management connection information, and source code module lists.
* The &lt;code&gt;{{corecmd|Builder|scmCheckout}}&lt;/code&gt; command is parameterized to obtain the source code from the the SCM repository.
* The &lt;code&gt;{{corecmd|Builder|runBuildScript}}&lt;/code&gt; command is parameterized to invoke the application build tool, Ant in this example. 
* Finally, the &lt;code&gt;{{corecmd|Builder|repoImport}}&lt;/code&gt; command is parameterized to find the packaged build artifacts produced by &lt;code&gt;runBuildScript&lt;/code&gt; to upload and register the packages as deployable resources.

[[Image:builder-example.png]]

====Life cycle commands====

The Build life cycle:

;scmCheckout
:Checks out files into -basedir of -module via the -connection using method -binding.
;setBuildstamp
: Optionally automatically generate the buildstamp, updating the model if required 
; runBuildscript
: Invokes the build tool and script
;repoImport
: Import packages into the repository.

Any of these commands can be overridden BUT sometimes
* &quot;runBuildscript&quot; is overridden to interface your build tool or procedure
* &quot;Build&quot; to manage your own build life cycle (e.g., define your own sequence of commands)

==Importing Packages==

The import process breaks down into two main steps:
# Choose the appropriate Package type
## This could be from the ControlTier solution library (eg, zip, tgz, rpm, etc) or one of your own subtypes
# Upload the file to the repository
## This is done via WebDAV PUT 
# Register package metadata
## This is done either automatically or via a provided XML file
# Choose the method
## Packaged artifacts can be uploaded via the Workbench graphical interface or via the CTL command line.

The CTL command line is the typical method to upload packages and register them to the repository.

When via the command line, use the standard &lt;code&gt;upload&lt;/code&gt; command to store and register the packaged artifact.

===With automatic registration===

* The &lt;code&gt;{{corecmd|Package|upload}}&lt;/code&gt; command supports a minimal metadata registration
* Registration includes, file type, file name, base name, installroot and URL 
** file type is determined by the extension
** file name: the filename minus its directory
** base name: is the file name minus the extension
** installroot: the dirname of the file
** url: a composition based on the above

The basic usage to upload a file using CTL:
&lt;p&gt;
&lt;code&gt;ctl -p &lt;/code&gt;''project''&lt;code&gt; -m &lt;/code&gt;''packagetype''&lt;code&gt; -c upload -- -filename &lt;/code&gt;''/path/to/file'' [-register]
&lt;/p&gt;

The following example shows how to upload an example &quot;Zip&quot; file left over from the Dukes Bank demo:
&lt;pre&gt;
ctl -p demo -m zip -c upload -- \
  -filename $CTIER_ROOT/pkgs/ctl-1.4.10/pkgs/apache-ant-1.7.1p1/docs/manual/tutorial-tasks-filesets-properties.zip -register
&lt;/pre&gt;

Notice the output message show the file is PUT into the WebDAV and then registered as a Package resource:

&lt;pre&gt;
Uploading to: http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/tutorial-tasks-filesets-properties.zip
Uploading: tutorial-tasks-filesets-properties.zip
Puted 1 file to http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/tutorial-tasks-filesets-properties.zip
Registered package: tutorial-tasks-filesets-properties.zip[zip]
&lt;/pre&gt;

Go to Workbench to view it in the repository:

[[Image:workbench-package-manager-tutorial-zip-view.png]]

Click the object and examine the automatically registered metadata.

===With a provided XML file===

* You can set any of the Package metadata properties explicitly via a [[project.xml]] XML definition.
* You can use Workbench to provide an example XML template.
* Navigate to the &quot;zip&quot; type in Workbench and then click the &quot;View Package Import Template&quot; link. 
* It will reveal an XML template file you can use to define your own zip object:

[[Image:workbench-package-import-template.png]]

* Cut and paste the template content to a file so you can edit the XML.
* Specify values for the attributes: base, buildtime, filename, installroot, name, vendor and version
* By convention the XML file name is ''filename'' + &quot;.xml&quot; (e.g., tutorial-tasks-filesets-properties.zip.xml)

File listing: tutorial-tasks-filesets-properties.zip.xml

&lt;pre&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE project PUBLIC &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot;
        &quot;project.dtd&quot;&gt;
&lt;project&gt;
  &lt;package
          arch=&quot;&quot;
          base=&quot;tutorial-tasks-filesets-properties&quot;
          buildtime=&quot;20090310&quot;
          description=&quot;A zip package example&quot;
          filename=&quot;tutorial-tasks-filesets-properties.zip&quot;
          filetype=&quot;zip&quot;
          installroot=&quot;${env.CTIER_ROOT}/pkgs/tutorial-tasks-filesets-properties&quot;
          installrank=&quot;&quot;
          name=&quot;tutorial-tasks-filesets-properties.zip&quot;
          release=&quot;&quot;
          releasetag=&quot;&quot;
          repoUrl=&quot;/zip/zips/tutorial-tasks-filesets-properties.zip&quot;
          restart=&quot;false&quot;
          type=&quot;zip&quot;
          vendor=&quot;default&quot;
          version=&quot;1&quot;
          /&gt;
&lt;/project&gt;
&lt;/pre&gt;

Run the &lt;code&gt;{{corecmd|Package|upload}}&lt;/code&gt; command with the &lt;code&gt;-filename&lt;/code&gt; option but this time also include the &quot;&lt;code&gt;-xml&lt;/code&gt;&quot; option specifying the path to your XML file:
&lt;pre&gt;
ctl -p demo -m zip -c upload --  \
 -filename $CTIER_ROOT/pkgs/ctl-1.4.10/pkgs/apache-ant-1.7.1p1/docs/manual/tutorial-tasks-filesets-properties.zip \
 -xml /tmp/tutorial-tasks-filesets-properties.zip.xml
&lt;/pre&gt;
You will see output resembling this:
&lt;pre&gt;
Uploading to: http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/tutorial-tasks-filesets-properties.zip
Uploading: tutorial-tasks-filesets-properties.zip
Puted 1 file to http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/tutorial-tasks-filesets-properties.zip
Loading metadata from XML file: '/tmp/tutorial-tasks-filesets-properties.zip.xml' ...
Loading &quot;/tmp/tutorial-tasks-filesets-properties.zip.xml&quot; ...
1 file(s) have been successfully validated.
Processing /tmp/tutorial-tasks-filesets-properties.zip.xml to /Users/alexh/ctier/ctl/var/tmp/projectxml-712219703.xml
Loading stylesheet /Users/alexh/ctier/ctl/projects/demo/modules/ProjectBuilder/lib/load-resources/projectxml/project.xsl
Mapping XML to properties ...
Collecting object attributes ...
Batching object attribute updates ...
Batching resource and referrer updates ...
Executing batch update ...
&lt;/pre&gt;

Notice that after the file was PUT into the WebDAV, the XML file is processed.

Go back to Workbench and view the package metadata.

You should find the values you specified.

===Self serve via Workbench===

* Sometimes a graphical interface is needed to upload packaged artifacts to the repository
* Workbench provides an interface to create new package objects or update existing ones

====Define package====

* Go to the page: Package Manager &gt; Package List
* Click the &quot;+&quot; icon to create a new Package resource
* Select the subtype and fill out the form.
** Leave the &quot;Repository URL&quot; blank
* Press save

[[Image:workbench-package-create-form.png]]

====Upload file====

* Press the &quot;Upload file&quot; link. This will reveal a form
* You can upload a file via Browser upload or refer to a directory in the server install root
* Press the &quot;Choose File&quot; button in the Upload a File field
* Click the &quot;Suggested Path&quot; link to insert the DAV path
* Upload the file

[[Image:workbench-package-upload-form.png]]

You can go back and make updates any time now.

* See: [[Setting_up_a_Package_for_import]], [[Creating_packages#Creating_a_package_from_a_directory|Creating a package from a directory]]

==Using a Builder==

* The build life cycle is coordinated via the Builder.
* Builders are highly configurable as you will see below
* The Builder provides a generic definition of the life cycle and parameters to drive it
* Other examples of Builder have an extended Build life cycle like ZipBuilder and RpmBuilder

[[Image:workbench-rpmbuilder.png]]

====Defining a Builder====

* Many of the Builder commands work relative to a directory that contains the source files of the project.
** This directory is referred to as &quot;basedir&quot;. 
* A second directory must be identified where Builder's build artifacts will be written. 
** That directory is referred to as &quot;targetdir&quot;.

The Builder is responsible for several key steps in the build life cycle and therefore is highly configurable.

The one-to-one relationship between a Builder and it's Package type
* Most convenient
* Make the Builder create a flexible enough installroot for the generated Package
* Source code to buildscript correlation

It is considered best practice to manage all the key configuration in a [[project.xml]] XML file.

The one below is an example showing the JBossAntBuilder, one of the Builders in the Duke's Bank demo:

&lt;pre&gt;
&lt;?xml version=&quot;1.0&quot;?&gt;

&lt;!DOCTYPE project PUBLIC &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; &quot;project.dtd&quot;&gt;
&lt;project&gt;

  &lt;deployment type=&quot;JBossAntBuilder&quot; name=&quot;dukesBank&quot; 
	      description=&quot;Duke's bank JBoss application Ant builder&quot; 
	      basedir=&quot;/Users/alexh/ctier/demo/elements/build/cruisecontrol-bin-2.7.1/projects/dukesBank&quot;
	      installRoot=&quot;/Users/alexh/ctier/demo/elements/build/cruisecontrol-bin-2.7.1/projects/dukesBank/j2eetutorial14/examples/bank&quot; 
	      startuprank=&quot;1&quot;&gt;

    &lt;referrers replace=&quot;false&quot;&gt;
      &lt;!--
         ** References Node where the Builder resides:
       --&gt;
      &lt;resource type=&quot;Node&quot; name=&quot;strongbad&quot;/&gt;
    &lt;/referrers&gt;
  &lt;/deployment&gt;
&lt;/project&gt;
&lt;/pre&gt;

Registration is done via the &lt;code&gt;{{corecmd|ProjectBuilder|load-resources}}&lt;/code&gt;.

For example:
&lt;pre&gt;
ctl -p demo -t DukesBankProjectBuilder -r dukesBank -c load-resources -- -filename /path/to/JBossAntBuilder.dukesBank.xml
&lt;/pre&gt;

Run the Install command to be sure it's ready to use:

&lt;pre&gt;
ctl -p demo -t JBossAntBuilder -r dukesBank -c Install
&lt;/pre&gt;

===Querying the Repository===

* Use the Builder's &lt;code&gt;{{corecmd|Builder|repoFind}}&lt;/code&gt; command to query the repository
* The &lt;code&gt;repoFind&lt;/code&gt; command queries the project model maintained in the server for packages that match -packagetype, -version and/or -buildstamp. 
* The -packagetype and -buildstamp are defaulted to Builder attributes
* If the -purge option is specified, the results will be passed as input to the {{corecmd|Builder|repoPurge}} for removal from the repository.

Example:

&lt;pre&gt;
ctl -p demo -t JBossAntBuilder -r dukesBank -c repoFind
&lt;/pre&gt;

JBossAntBuider is defaulted to look for JBossEar packages.

===The Build workflow===

The steps of the build cycle is executed via the &lt;code&gt;{{corecmd|Builder|Build}}&lt;/code&gt; command:

&lt;pre&gt;
ctl -p demo -t JBossAntBuilder -r dukesBank -c Build 
&lt;/pre&gt;

Without arguments a buildstamp is automatically generated. You can specify your own via the &quot;-buildstamp&quot; option:

&lt;pre&gt;
ctl -p demo -t JBossAntBuilder -r dukesBank -c Build -- -buildstamp 123
&lt;/pre&gt;

The JBossAntBuilder's Build command is the generic one, calling scmCheckout, setBuildstamp, runBuildscript and repoImport

The following sections describe each command step and its configuration settings.

====scmCheckout====
* The first command in the Build command sequence is &lt;code&gt;{{corecmd|Builder|scmCheckout}}&lt;/code&gt;
* Will checkout source code into the Builder's &quot;basedir&quot;

&lt;pre&gt;
ctl -p demo -t JBossAntBuilder -r dukesBank -c scmCheckout 
&lt;/pre&gt;

* The checkout command is determined by the Builder's &quot;BuilderScmBinding&quot; setting
* The connection string is determined by the Builder's &quot;BuilderScmConnection&quot; setting
* The code module is set by the &quot;BuilderScmModule&quot; setting.

You can manage these in XML :
&lt;pre&gt;
  &lt;setting type=&quot;BuilderScmModule&quot; name=&quot;dukesBank&quot; description=&quot;Duke's Bank source module&quot; 
	   settingValue=&quot;j2eetutorial14&quot;/&gt;
  &lt;setting type=&quot;BuilderScmBinding&quot; name=&quot;dukesBank&quot;
	   description=&quot;Duke's Bank is configured to use Subversion&quot;
	   settingValue=&quot;svn&quot;/&gt;
  &lt;setting type=&quot;BuilderScmConnection&quot; name=&quot;dukesBank&quot;
	   description=&quot;The Duke's Bank source code&quot; 
	   settingValue=&quot;https://moduleforge.svn.sourceforge.net/svnroot/moduleforge/elements/branches/3.2.4/demo/DukesBank/src&quot;/&gt;
&lt;/pre&gt;

====BuilderScmBinding setting====

The setting, BuilderScmBinding, configures the Builder to a particular SCM client.

Currently these four come out of the box:
* cvs
* p4
* none
* svn

[[Image:workbench-type-BuilderScmBinding.png]]

* If &quot;none&quot; is chosen then the &lt;code&gt;scmCheckout&lt;/code&gt; command is effectively disabled.
* These choices are advisory and not an enforced constraint
* You can create your own BuilderScmBinding that specifies its own value

====setBuildstamp====

* The &lt;code&gt;{{corecmd|Builder|setBuildstamp}}&lt;/code&gt; command generates a buildstamp
* Provides an open-ended strategy to define the packaged artifacts version information

The Dukes Bank example uses a combination of SVN revision information plus setting data:
&lt;pre&gt;
ctl -p demo -t JBossAntBuilder -r dukesBank -c setBuildstamp 
&lt;/pre&gt;
&lt;pre&gt;
Checking &quot;https://moduleforge.svn.sourceforge.net/svnroot/moduleforge/elements/branches/3.2.4/demo/DukesBank/src&quot; for the last changed revision ...
Deleting: /Users/alexh/ctier/ctl/projects/demo/resources/JBossAntBuilder/dukesBank/var/null1823584233.out
Automatically set buildstamp to &quot;trunk.1.2.3.952&quot;
[command.timer.Builder.setBuildstamp: 8.315 sec]
&lt;/pre&gt;

Notice the buildstamp is set to &quot;trunk.1.2.3.952&quot;
* The &quot;.952&quot; represents the Subversion revision ID
* The &quot;trunk.1.2.3&quot; is based on the Builder settings

Builder Settings:
* Like &lt;code&gt; {{corecmd|Builder|scmCheckout}}&lt;/code&gt; it uses BuilderScmBinding and BuilderScmConnection 
* Additionally uses: BuilderBuildstamp , BuilderVersionTag, BuilderVersionMajor, BuilderVersionMinor, and BuilderVersionRelease
** These are later used for package registration too

&lt;pre&gt;
  &lt;setting type=&quot;BuilderBuildstamp&quot; name=&quot;dukesBank&quot; 
	   description=&quot;The initial Duke's Bank buildstamp value&quot;
	   settingValue=&quot;0&quot;/&gt;
  &lt;setting type=&quot;BuilderVersionTag&quot; name=&quot;dukesBank&quot; 
	   description=&quot;The initial Duke's Bank build tag&quot; 
	   settingValue=&quot;trunk&quot;/&gt;
  &lt;setting type=&quot;BuilderVersionMajor&quot; name=&quot;dukesBank&quot;
	   description=&quot;The Duke's Bank major version number&quot; 
	   settingValue=&quot;1&quot;/&gt;
  &lt;setting type=&quot;BuilderVersionMinor&quot; name=&quot;dukesBank&quot; 
	   description=&quot;The Duke's Bank minor version number&quot; 
	   settingValue=&quot;2&quot;/&gt;
  &lt;setting type=&quot;BuilderVersionRelease&quot; name=&quot;dukesBank&quot;
	   description=&quot;The Duke's Bank release version number&quot; 
	   settingValue=&quot;3&quot;/&gt;
&lt;/pre&gt;

* Looking at the setting examples above you should be able to see how their values are combined to produce &quot;trunk.1.2.3&quot;

====runBuildscript====

* The &lt;code&gt;{{corecmd|Builder|runBuildScript}}&lt;/code&gt; command invokes the configured build tool and build script with specified target.
* Execution relative to &quot;basedir&quot;
* Artifacts generated to &quot;targetdir&quot;
* By default can execute an Ant build file
* You might want to override it to invoke your build procedure
** Check for existing types before overriding it
**  For example these other Builder types exist: AntBuilder, MavenBuilder, BatBuilder, RpmBuilder, ZipBuilder, etc

The &lt;code&gt; runBuildScript &lt;/code&gt; command can be run without arguments since it this JBossAntBuilder is already configured:

&lt;pre&gt;
ctl -p demo -t JBossAntBuilder -r dukesBank -c runBuildScript 
&lt;/pre&gt;

* It's driven by these settings: BuilderBuildstamp, BuilderBuildFile, BuilderBuildTarget 

&lt;pre&gt;
 &lt;setting type=&quot;BuilderBuildstamp&quot; name=&quot;dukesBank&quot; 
	   description=&quot;The initial Duke's Bank buildstamp value&quot;
	   settingValue=&quot;0&quot;/&gt;
  &lt;setting type=&quot;BuilderBuildFile&quot; name=&quot;dukesBank&quot; 
	   description=&quot;Name of the Duke's Bank build file&quot; 
	   settingValue=&quot;j2eetutorial14/examples/bank/jboss-build.xml&quot;/&gt;
  &lt;setting type=&quot;BuilderBuildTarget&quot; name=&quot;dukesBank&quot; 
	   description=&quot;Duke's Bank build target&quot; 
	   settingValue=&quot;-Djboss.home=${resource.attribute.jboss_install_root} compile package-ejb package-web package-client assemble-app&quot;/&gt;
&lt;/pre&gt;

====repoImport====

* The &lt;code&gt;{{corecmd|Builder|repoImport}}&lt;/code&gt; command recursively scans directories under -targetdir
** This value is configured by the Builder's targetdir attribute (i.e., resource.attribute.targetdir)
* Looks for files that match the regexes &amp;mdash; (filebase).(extension) &amp;mdash; and loads them into the repository.

Run it without any arguments to import the build artifact :
&lt;pre&gt;
ctl -p demo -t JBossAntBuilder -r dukesBank -c repoImport 
&lt;/pre&gt;

Notice that it looks for filenames that match the regular expression: (JBossDukesBank)(?:-trunk.1.2.3.952)?\.(ear)$

This pattern will match files named:
* JBossDukesBank-trunk.1.2.3.952.ear
or
* JBossDukesBank-trunk.ear

In the output below you'll notice it found &quot;JBossDukesBank.ear&quot; and imports it.

&lt;pre&gt;
Created dir: /Users/alexh/ctier/ctl/projects/demo/resources/JBossAntBuilder/dukesBank/tmp/Builder-repoImport-20090226172145
Condition: isProcessableWithoutExistingPropfile result: true
opts.propfile set to: autogenerated-builder.properties
Creating new property file: /Users/alexh/ctier/ctl/projects/demo/resources/JBossAntBuilder/dukesBank/tmp/Builder-repoImport-20090226172145/import-count.properties
processing files in directory: '/Users/alexh/ctier/demo/elements/build/cruisecontrol-bin-2.7.1/projects/dukesBank/j2eetutorial14/examples/bank' matching: '(JBossDukesBank)(?:-trunk.1.2.3.952)?\.(ear)$' ...
processing matched file: jar/JBossDukesBank.ear
Deleting: /Users/alexh/ctier/demo/elements/build/cruisecontrol-bin-2.7.1/projects/dukesBank/j2eetutorial14/examples/bank/jar/autogenerated-builder.properties
Auto-generated builder properties file created: /Users/alexh/ctier/demo/elements/build/cruisecontrol-bin-2.7.1/projects/dukesBank/j2eetutorial14/examples/bank/jar/autogenerated-builder.properties...
Copying 1 file to /Users/alexh/ctier/demo/elements/build/cruisecontrol-bin-2.7.1/projects/dukesBank/j2eetutorial14/examples/bank/jar
Copying 1 file to /Users/alexh/ctier/ctl/projects/demo/modules/Builder/commands
Getting: http://strongbad:8080/jackrabbit/repository/controltier/projects/demo/publish/modules/JBossEar-head.jar
To: /Users/alexh/ctier/ctl/var/tmp/downloads/demo/JBossEar-head.jar
Not modified - so not downloaded
JBossEar up to date
Attempting to get ear-head.jar  ...
Getting: http://strongbad:8080/jackrabbit/repository/controltier/projects/demo/publish/modules/ear-head.jar
To: /Users/alexh/ctier/ctl/var/tmp/downloads/demo/ear-head.jar
Not modified - so not downloaded
ear up to date
Attempting to get Package-head.jar  ...
Getting: http://strongbad:8080/jackrabbit/repository/controltier/projects/demo/publish/modules/Package-head.jar
To: /Users/alexh/ctier/ctl/var/tmp/downloads/demo/Package-head.jar
Not modified - so not downloaded
Package up to date
uploading file: /Users/alexh/ctier/demo/elements/build/cruisecontrol-bin-2.7.1/projects/dukesBank/j2eetutorial14/examples/bank/jar/JBossDukesBank.ear to: http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/JBossEar/ears/JBossDukesBank-trunk.1.2.3.952.ear...
Uploading to: http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/JBossEar/ears/JBossDukesBank-trunk.1.2.3.952.ear
Uploading: JBossDukesBank.ear
Puted 1 file to http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/JBossEar/ears/JBossDukesBank-trunk.1.2.3.952.ear
Registered package: JBossDukesBank.ear[Package]
Creating new property file: /Users/alexh/ctier/ctl/projects/demo/resources/JBossAntBuilder/dukesBank/tmp/Builder-repoImport-20090226172145/import-list.properties
Package &quot;JBossDukesBank-trunk.1.2.3.952.ear (JBossEar)&quot; already registered. Updating object info.
Deleting: /Users/alexh/ctier/ctl/projects/demo/modules/Builder/commands/entity351702598.properties
Updating property file: /Users/alexh/ctier/ctl/projects/demo/resources/JBossAntBuilder/dukesBank/tmp/Builder-repoImport-20090226172145/import-count.properties
Current count: 1
Batch request performed successfully.
Current count: 1
[command.timer.Builder.repoImport: 7.868 sec]
&lt;/pre&gt;

You should also note that it will register the package using the last generated buildstamp, &quot;trunk.1.2.3.952&quot;.

* The BuilderPackageType, BuilderPackageFilebase, BuilderPackageExtension, BuilderPackageInstallroot configure repoImport
* Used as metadata for package registration

&lt;pre&gt;
 &lt;setting type=&quot;BuilderPackageType&quot; name=&quot;dukesBank&quot; 
	   description=&quot;Enterprise archive file extension&quot; 
	   settingValue=&quot;JBossEar&quot;/&gt;
  &lt;setting type=&quot;BuilderPackageFilebase&quot; name=&quot;dukesBank&quot;
	   description=&quot;Enterprise archive file base name&quot; 
	   settingValue=&quot;JBossDukesBank&quot;/&gt;
  &lt;setting type=&quot;BuilderPackageExtension&quot; name=&quot;dukesBank&quot;
	   description=&quot;Enterprise archive file extension&quot; 
	   settingValue=&quot;ear&quot;/&gt;
  &lt;setting type=&quot;BuilderPackageInstallroot&quot; name=&quot;dukesBank&quot;
	   description=&quot;Enterprise archive file installation directory&quot;
	   settingValue=&quot;${resource.attribute.jboss_basedir}/deploy&quot;/&gt;
&lt;/pre&gt;

====Full Builder XML example====

Here's a complete definition for the JBossAntBuilder:

File listing excerpt from: $CTIER_ROOT/demo/default-object.xml
&lt;pre&gt;
&lt;?xml version=&quot;1.0&quot;?&gt;

&lt;!DOCTYPE project PUBLIC &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; &quot;project.dtd&quot;&gt;
&lt;project&gt;
  &lt;!-- Builder settings: --&gt;
  &lt;setting type=&quot;BuilderAntHome&quot; name=&quot;dukesBank&quot;
	   description=&quot;Value of ANT_HOME&quot;
	   settingValue=&quot;/Users/alexh/ctier/demo/elements/build/apache-ant-1.7.1&quot;/&gt;
  &lt;setting type=&quot;BuilderJBossHome&quot; name=&quot;dukesBank&quot;
	   description=&quot;Value of JBOSS_HOME&quot;
	   settingValue=&quot;/Users/alexh/ctier/demo/elements/build/jboss-4.0.3SP1&quot;/&gt;
  &lt;setting type=&quot;BuilderScmModule&quot; name=&quot;dukesBank&quot; description=&quot;Duke's Bank source module&quot; 
	   settingValue=&quot;j2eetutorial14&quot;/&gt;
  &lt;setting type=&quot;BuilderScmBinding&quot; name=&quot;dukesBank&quot;
	   description=&quot;Duke's Bank is configured to use Subversion&quot;
	   settingValue=&quot;svn&quot;/&gt;
  &lt;setting type=&quot;BuilderScmConnection&quot; name=&quot;dukesBank&quot;
	   description=&quot;The Duke's Bank source code&quot; 
	   settingValue=&quot;https://moduleforge.svn.sourceforge.net/svnroot/moduleforge/elements/branches/3.2.4/demo/DukesBank/src&quot;/&gt;
  &lt;setting type=&quot;BuilderVersionTag&quot; name=&quot;dukesBank&quot; 
	   description=&quot;The initial Duke's Bank build tag&quot; 
	   settingValue=&quot;trunk&quot;/&gt;
  &lt;setting type=&quot;BuilderVersionMajor&quot; name=&quot;dukesBank&quot;
	   description=&quot;The Duke's Bank major version number&quot; 
	   settingValue=&quot;1&quot;/&gt;
  &lt;setting type=&quot;BuilderVersionMinor&quot; name=&quot;dukesBank&quot; 
	   description=&quot;The Duke's Bank minor version number&quot; 
	   settingValue=&quot;2&quot;/&gt;
  &lt;setting type=&quot;BuilderVersionRelease&quot; name=&quot;dukesBank&quot;
	   description=&quot;The Duke's Bank release version number&quot; 
	   settingValue=&quot;3&quot;/&gt;
  &lt;setting type=&quot;BuilderBuildstamp&quot; name=&quot;dukesBank&quot; 
	   description=&quot;The initial Duke's Bank buildstamp value&quot;
	   settingValue=&quot;0&quot;/&gt;
  &lt;setting type=&quot;BuilderBuildFile&quot; name=&quot;dukesBank&quot; 
	   description=&quot;Name of the Duke's Bank build file&quot; 
	   settingValue=&quot;j2eetutorial14/examples/bank/jboss-build.xml&quot;/&gt;
  &lt;setting type=&quot;BuilderBuildTarget&quot; name=&quot;dukesBank&quot; 
	   description=&quot;Duke's Bank build target&quot; 
	   settingValue=&quot;-Djboss.home=${resource.attribute.jboss_install_root} compile package-ejb package-web package-client assemble-app&quot;/&gt;
  &lt;setting type=&quot;BuilderPackageType&quot; name=&quot;dukesBank&quot; 
	   description=&quot;Enterprise archive file extension&quot; 
	   settingValue=&quot;JBossEar&quot;/&gt;
  &lt;setting type=&quot;BuilderPackageFilebase&quot; name=&quot;dukesBank&quot;
	   description=&quot;Enterprise archive file base name&quot; 
	   settingValue=&quot;JBossDukesBank&quot;/&gt;
  &lt;setting type=&quot;BuilderPackageExtension&quot; name=&quot;dukesBank&quot;
	   description=&quot;Enterprise archive file extension&quot; 
	   settingValue=&quot;ear&quot;/&gt;
  &lt;setting type=&quot;BuilderPackageInstallroot&quot; name=&quot;dukesBank&quot;
	   description=&quot;Enterprise archive file installation directory&quot;
	   settingValue=&quot;${resource.attribute.jboss_basedir}/deploy&quot;/&gt;

  &lt;deployment type=&quot;JBossAntBuilder&quot; name=&quot;dukesBank&quot; 
	      description=&quot;Duke's bank JBoss application Ant builder&quot; 
	      basedir=&quot;/Users/alexh/ctier/demo/elements/build/cruisecontrol-bin-2.7.1/projects/dukesBank&quot;
	      installRoot=&quot;/Users/alexh/ctier/demo/elements/build/cruisecontrol-bin-2.7.1/projects/dukesBank/j2eetutorial14/examples/bank&quot; 
	      startuprank=&quot;1&quot;&gt;
    &lt;resources replace=&quot;true&quot;&gt;
 
      &lt;!--
      ** scmCheckout info:
      --&gt;
      &lt;resource type=&quot;BuilderScmBinding&quot; name=&quot;dukesBank&quot;/&gt;
      &lt;resource type=&quot;BuilderScmConnection&quot; name=&quot;dukesBank&quot;/&gt;
      &lt;!--
      ** repoImport info:
      --&gt;
      &lt;resource type=&quot;BuilderVersionTag&quot; name=&quot;dukesBank&quot;/&gt;
      &lt;resource type=&quot;BuilderVersionMajor&quot; name=&quot;dukesBank&quot;/&gt;
      &lt;resource type=&quot;BuilderVersionMinor&quot; name=&quot;dukesBank&quot;/&gt;
      &lt;resource type=&quot;BuilderVersionRelease&quot; name=&quot;dukesBank&quot;/&gt;
      &lt;resource type=&quot;BuilderBuildstamp&quot; name=&quot;dukesBank&quot;/&gt;
      &lt;resource type=&quot;BuilderPackageType&quot; name=&quot;dukesBank&quot;/&gt;
      &lt;resource type=&quot;BuilderPackageFilebase&quot; name=&quot;dukesBank&quot;/&gt;
      &lt;resource type=&quot;BuilderPackageExtension&quot; name=&quot;dukesBank&quot;/&gt;
      &lt;resource type=&quot;BuilderPackageInstallroot&quot; name=&quot;dukesBank&quot;/&gt;

      &lt;!--
      ** runBuilscript info:
      --&gt;
      &lt;resource type=&quot;BuilderBuildFile&quot; name=&quot;dukesBank&quot;/&gt;
      &lt;resource type=&quot;BuilderBuildTarget&quot; name=&quot;dukesBank&quot;/&gt;

      &lt;!--
      ** JBossAntBuilder specific info:
      --&gt;
     &lt;resource type=&quot;JBossZip&quot; name=&quot;jboss-4.0.3SP1.zip&quot;/&gt;
      &lt;resource type=&quot;AntZip&quot; name=&quot;apache-ant-1.7.1-bin.zip&quot;/&gt;
      &lt;resource type=&quot;BuilderAntHome&quot; name=&quot;dukesBank&quot;/&gt;
      &lt;resource type=&quot;BuilderJBossHome&quot; name=&quot;dukesBank&quot;/&gt;

    &lt;/resources&gt;
    &lt;referrers replace=&quot;false&quot;&gt;
      &lt;resource type=&quot;Node&quot; name=&quot;strongbad&quot;/&gt;
    &lt;/referrers&gt;
  &lt;/deployment&gt;
&lt;/project&gt;
&lt;/pre&gt;


* See: [[Setting_up_a_Builder_for_package_imports]]

==Creating Packages==

* The creation of a package involves preparing one or more files into an archive suitable for deployment
* The ControlTier solution library includes a set of types that can create various package formats 
* Your build tool may already have a means to create packages
* You might not need to create packages as you already have them on hand (eg, 3rd party ones)

See: [[Creating_packages]]

==Installing a Package==

The flip side of the package life cycle is installation.
Packages are installed via the &lt;code&gt;{{corecmd|Package.html|Install}}&lt;/code&gt; command. Here's the basic syntax

ctl -p ''project'' -t ''type'' -r ''name'' -c Install

Here's an example that installs the tutorial-tasks-filesets-properties.zip package to the local host:

&lt;pre&gt;
ctl -p demo -t zip -r tutorial-tasks-filesets-properties.zip -c Install
&lt;/pre&gt;
The Install command is actually a workflow made up of several steps as 
can be seen in the following output:
&lt;pre&gt;
Start: &quot;Install object and run the package installation cycle.&quot; commands: assertPackageIsInstalled
begin workflow command (1/1) -&gt; &quot;assertPackageIsInstalled &quot; ...
Executing ant file: /Users/alexh/ctier/ctl/projects/demo/modules/Package/bin/is-installed.xml
Running handler command: installPackage
begin workflow command (1/5) -&gt; &quot;installDependencies -filename tutorial-tasks-filesets-properties.zip -installroot  -url http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/tutorial-tasks-filesets-properties.zip&quot; ...
Dispatching command 'Install' to objects:  ...
end workflow command (1/5) -&gt; &quot;installDependencies -filename tutorial-tasks-filesets-properties.zip -installroot  -url http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/tutorial-tasks-filesets-properties.zip&quot;
begin workflow command (2/5) -&gt; &quot;prepare -filename tutorial-tasks-filesets-properties.zip -installroot  -url http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/tutorial-tasks-filesets-properties.zip&quot; ...
end workflow command (2/5) -&gt; &quot;prepare -filename tutorial-tasks-filesets-properties.zip -installroot  -url http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/tutorial-tasks-filesets-properties.zip&quot;
begin workflow command (3/5) -&gt; &quot;get -filename tutorial-tasks-filesets-properties.zip -installroot  -url http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/tutorial-tasks-filesets-properties.zip&quot; ...
Getting: http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/tutorial-tasks-filesets-properties.zip
To: /tutorial-tasks-filesets-properties.zip
end workflow command (3/5) -&gt; &quot;get -filename tutorial-tasks-filesets-properties.zip -installroot  -url http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/tutorial-tasks-filesets-properties.zip&quot;
begin workflow command (4/5) -&gt; &quot;extract -filename tutorial-tasks-filesets-properties.zip -installroot  -url http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/tutorial-tasks-filesets-properties.zip&quot; ...
Expanding: /tutorial-tasks-filesets-properties.zip into /Users/alexh/ctier/ctl/projects/demo/modules/zip/commands
end workflow command (4/5) -&gt; &quot;extract -filename tutorial-tasks-filesets-properties.zip -installroot  -url http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/tutorial-tasks-filesets-properties.zip&quot;
begin workflow command (5/5) -&gt; &quot;finish -filename tutorial-tasks-filesets-properties.zip -installroot  -url http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/tutorial-tasks-filesets-properties.zip&quot; ...
Deleting: /tutorial-tasks-filesets-properties.zip
end workflow command (5/5) -&gt; &quot;finish -filename tutorial-tasks-filesets-properties.zip -installroot  -url http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/tutorial-tasks-filesets-properties.zip&quot;
end workflow command (1/1) -&gt; &quot;assertPackageIsInstalled &quot;
[command.timer.demo.Package.Install: 9.062 sec]
Workflow completed. execution time: 9.062 sec
&lt;/pre&gt;

===Install via Node dispatch===
This example showed how you can install a package to the local host but normally you will want
to install the package to a set of assigned nodes.

From the central admin host, you could then [[Use_node_filtering_options|use node dispatch]] to execute the &lt;code&gt;Install&lt;/code&gt; command
everywhere that package has been assigned.
&lt;pre&gt;
ctl -I '.*' -p demo -t zip -r tutorial-tasks-filesets-properties.zip -c Install
&lt;/pre&gt;

See: [[Deploying Packages to Nodes]] for more information about assigning Packages to Nodes

==More examples==

===Generic Builder===

* See: [[HOWTO_-_Generic_Builder_Setup]]

===ZipBuilder===

* See: [[HOWTO - ZipBuilder Setup]]

==Import Only Builder==

* See: [[Builder_import_file_%28no_buildstamp%29]]
* See: [[Builder_import_file_%28with_buildstamp%29]]

==Maintenance==

===Purging===

;Purge
: The &lt;code&gt;{{corecmd|Builder|Purge}}&lt;/code&gt; command finds the set of package objects associated with the provided package type and/or buildstamp (or buildstamp regex) and deletes them from the repository and the object model that are not in use and are not associated with the most recent build (per resource.attribute.buildstamp). [[Jobcenter|Run from Jobcenter]].
; repoPurge
:  The &lt;code&gt;{{corecmd|Builder|repoPurge}}&lt;/code&gt; command processes results of &lt;code&gt;{{corecmd|Builder|repoFind}}&lt;/code&gt; and removes each package from the repository &amp;mdash; deleting the file from the WebDAV and object in the project model.  The &lt;code&gt;-packagename&lt;/code&gt; and &lt;code&gt;-packagetype&lt;/code&gt; arguments allow one to filter the &lt;code&gt;repoFind&lt;/code&gt; result data, only purging objects matching those patterns. (ad hoc)

* Avoids the most recent build
* Use &lt;code&gt;Purge&lt;/code&gt; for schedulable  (it's contextual)
* Make sure the Builder object has &quot;BuilderBuildstamp&quot; settings defined

There's a default package purge regex. Be confident it's what you want.

&lt;pre&gt;
ctl -p demo -t JBossAntBuilder -r dukesBank -c Purge
&lt;/pre&gt;

== Suggested Next Courses ==

* [[Course_-_Service_Life_cycle_Management]]

[[Category:Training Topics|130]]</text>
    </revision>
  </page>
  <page>
    <title>Course - Service Life cycle Management</title>
    <id>488</id>
    <revision>
      <id>16673</id>
      <timestamp>2012-02-27T16:49:20Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Setting sort key</comment>
      <text xml:space="preserve">==Overview==
=== What you will learn ===
* Use the Control Tier infrastructure to manage the runtime state and deployment of your application

===== Learn To =====
* Model and control your long running application deployments as Services
* Model and control your integrated multi-tier Services as a Site
* Set up and run jobs in JobCenter

=== Audience ===

* Application Administrators
* Release Engineers

=== Prerequisites ===
==== Required Prerequisites ====
* [[Course_-_ControlTier_Intro|ControlTier Introduction]]
* Command shell (Unix or Windows)
* Editing text files

==== Suggested Prerequisites ====
* Completed the basic [[ControlTier Demo]]
* XML editing experience
* Familiarity with release management and deployment concepts and practices
* Basic understanding of multi-tier application software systems
* Knowledge about basic object orientation concepts

=== Course Objectives ===

* Explain the role, responsibility and activities of the Service Manager
* Learn about the foundational types, Service and Site and their use for managing an application
* Become end-users of the ControlTier platform components to deploy and operate a software service

== Course Topics==

==Role, Responsibilities and Activities==

This section describes the role, responsibilities and activities of the Service Manager

; Role
: Often called the &quot;Application Administrator&quot; or &quot;Deploy Guy&quot;, this person is responsible for deploying software packages, and managing configurations. They design and maintain the topology of a set of applications in the environment. They consume build Packages produced by the Package Manager, and must adapt their designs to the Nodes made available by the System Administrator.

'''Responsibilities'''

* Conduct service management processes to support the business service
** Deploy application releases
** Manage the runtime state of the business service
** Ensure consistent configuration of the application components
* Develop an Object Model representing the Services and Deployments in the Business Service

'''Activities'''

* Create a project.xml to represent a Deployment configuration
* Deploy an integrated set of Software components and configurations
* Update a Deployment with a new version of a Package
* Start and Stop Services and Sites

==Service Management Processes==

A ''Service management process'' is a category of management processes that supports and sustains a business service throughout its life cycle. 
Examples of these processes include:
* build: produce packaged artifacts used during application release and deployment (role: Package Manager)
* ''configuration'': management of the application's configuration items, their registration, relationships and deployed state
* detective: the monitoring for configuration and build compliance (role: System Administrator)
* ''release'': preparation of build artifacts for deployment
* ''deployment'': installation and configuration of build artifacts
* monitoring: ongoing health checks of the running application  (role: System Administrator)
* verification: testing the build conforms to the stated specifications  (role: Package Manager)

The Service Manager is responsible for any number of these processes but most commonly: configuration, release and deployment.

==Service Management Infrastructure==

The role of the service management infrastructure is as a facility to operate the business service through defined service management processes.

The infrastructure is based on the components that comprise the Control Tier:

* '''CTL''': command dispatching framework supporting service management processes. 
* '''Job Center''': provides a graphical console to run CTL commands
* '''Workbench''': Multi-purpose server application providing CMDB, automation design and repository support
* '''Report Center''': A logging and reporting service used to track activity history and run [http://www.eclipse.org/birt/phoenix/ BIRT] reports
* '''ProjectBuilder''': A command line utility for managing business service and automation modules as source files (overseen by the Architect)
* '''Repository''': A WebDAV based centralized store containing packaged build artifacts (managed by the Package Manager), CMDB metadata and CTL automation modules.

[[Image:Platform-overview.png]]

Note, the System Administrator is responsible to maintain the ControlTier software components and provide access to the Service Manager and other roles.

See also: [[Platform overview]]

===Workbench Service Manager===
* Specialized CMDB view for the Service Manager role
* The Workbench application includes an interface to view and manage application service definitions
* Provides a graphical view into Services, their interrelations and as logical collections called Sites

====User Interface====
From the Workbench home page, click the &quot;Service Manager&quot; icon.

Within the Service Manager there are two tools:
# Service List: Manages deployed Services
# Site List: Manages collections of Services

[[Image:workbench-service-manager.png]]

Click the Service List icon to list services that have been defined in the CMDB.
Each services shows three kinds of information
* metadata about the Service
* the Packages that Service depends on
* what Nodes that Service is assigned

[[Image:workbench-ServiceManager-ServiceList.png]]

Clicking the Site List icon will list services that have been defined in the CMDB.
Each Site shows three kinds of information
* metadata about the Site
* the Packages that the Services that comprise the Site depends on (grouped by Service type)
* what Nodes the Services that comprise the Site are assigned (grouped by Service type)

[[Image:workbench-ServiceManager-SiteList.png]]

A &quot;Service&quot; in the ControlTier model is any long running application process.

Later in this course you will learn how to define Services and Sites via an XML definition file.

===CTL===

Service Managers use CTL to execute predefined commands and workflows that implement service management processes

CTL is:
* a distributed control dispatching framework and toolset,
* a framework for people who need to automate the management of software services,
* or automate other IT tasks that spans multiple machines.

Typically, Service Managers run CTL commands from the designated centralized admin host (typically the ControlTier server).

The System Administrator is responsible to maintain the CTL installations and security configuration.

===JobCenter===

JobCenter provides a graphical interface to running CTL commands. 

JobCenter supports three kinds of command executions:
* Run and forget: You can select an object and command and then run it one time
* Saved job: Select an object and command and save it as a re-runnable job.
* Timed job: Select an object, command and schedule to have the job run on a periodic basis.

Depending on your access control configuration, you will see a subset of the defined jobs. 

[[Image:jobcenter-list-dukesbank.png]]

Later in this course, you will learn how to define your own jobs in JobCenter both via it's graphical interface and also via an XML definition file.

----

==Type Model==
* An object model defined by a type hierarchy
* Types contain both a set of objects that reflect structure of the business service and also the process definition
* Service management processes are defined in the ControlTier model. 
* Each process step is defined as a command.
* Commands are combined into simpler steps called Workflows
* Commands and workflows are defined in a type

Example: Service Commands

[[Image:workbench-Service-commands.png]]


The next few sections describe the core types that underly the deployment and runstate management of a distributed business service

----

==The Deployment Type==

* Encapsulates the life-cycle of software deployment.
* Separates the concerns of software installation from software configuration.
* Facilitates abstracting software deployments so that a single definition can be used in multiple environment contexts.

===Need and objectives===

The &quot;ingredients&quot; of a software deployment

* scripts: the procedures to install and configure the installation
* dependencies and sequencing: the order in which the steps of the procedures should be undertaken
* config files: deployment specific and possibly customized configuration files prepared for this deployment
* binaries: executable files 
* app content: non-executable files
* environment details: knowledge of the specifics that differ between environments
* dev, qa, prod environment: different host configurations

The figure below illustrates the different dimensions of information a person deploying an application must consider.

[[Image:deployment-discussion-problem.png]]

Primarily, the deployment tasks fall into two categories:

* software installation: locating and distributing the needed files to the designated host
* configuration setup: customizing the software installation using the needed application and environment specific parameters

The differences between deployments within their specific application environment context undermine a desirable goal to have a single procedure that can be used anywhere in any environment and any software version. 

Deployment type's objectives:

* provide standard strategies for managing software deployment
** a generic logical skeleton for managing installation and configuration
* encapsulate the contextual application environment differences.

[[Image:deployment-discussion-solution.png]]

The Deployment type defines a standard approach for
* Installation:
** Support separation of directories where static executable files reside from those where runtime files supporting configuration and logging exist.
* Configuration:
** Support configuration templat-ization that will increase reuse and consistency across environments and externalize differences into the deployment model


Example: Apache web server

The figure below illustrates these parts. A Deployment named &quot;apache&quot; is defined to
* depend on two packages &amp;mdash;  httpd-2.0.1.tgz and mod_jk.zip, and 
* corresponding configuration files, httpd.conf and jk.conf. 

[[Image:deployment-example.png]]

The environment specific context is provided to the Deployment object which in turn uses it when parameterizing the configuration and package installation procedures.

===Life cycle commands===

&lt;table border=&quot;1&quot;&gt;
  &lt;tr&gt;&lt;th&gt;Command&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Life cycle&lt;/th&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Deployment.html#cmd_Configure Configure]&lt;/td&gt;&lt;td&gt;Run the configuration cycle&lt;/td&gt;&lt;td&gt;Configuration&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Deployment.html#cmd_Deploy Deploy]&lt;/td&gt;&lt;td&gt;Run the deployment cycle, coordinating package installation and configuration.&lt;/td&gt;&lt;td&gt;Deployment&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Deployment.html#cmd_Docs-Generate Docs-Generate]&lt;/td&gt;&lt;td&gt;Generate the configured template-based documents.&lt;/td&gt;&lt;td&gt;Configuration&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Deployment.html#cmd_Docs-Verify Docs-Verify]&lt;/td&gt;&lt;td&gt;Verify the documents generated by Docs-Generate.&lt;/td&gt;&lt;td&gt;Configuration&lt;/td&gt;&lt;/tr&gt;	
  &lt;tr&gt;&lt;td&gt;[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Deployment.html#cmd_Packages-Install Packages-Install]&lt;/td&gt;&lt;td&gt;Install the configured package dependencies for the deployment.&lt;/td&gt;&lt;td&gt;Installation&lt;/td&gt;&lt;/tr&gt;				
&lt;/table&gt;

Any of these commands can be overridden to specify your own custom logic but...
* Ordinarily, only &quot;Deploy&quot; is typical and only overridden to either add or change the order of commands ... as you will see in the Service type

----

==The Service Type==

* Encapsulates the life cycle of a long running software service.
* Abstracts the startup and shutdown methods to control the runtime state of a service.
* Extends the Deployment type to inherit the package installation and configuration operations.

===Need and objectives===

The &quot;ingredients&quot; of a Service deployment:

* executable files: represent the programs used by the long running process
* scripts and tools: used to manage the long running process 
* start sequence: the steps necessary to perform a functioning running process
* stop sequence: the steps necessary to perform a complete shutdown of the process
* config files: configuration files used by the scripts and tools and the executable files

''plus''
* the ingredients of the Deployment type!

[[Image:service-discussion-problem.png]]

Some challenges faced when managing long running services:

* how to check if the process was already running 
* avoid starting multiple processes which may cause undesirable conflicts 
* what to do if the normal stop operation fails
* intimate knowledge of the application code or operating system features to control a service's runtime state.
* dependencies on other services!

Service type objectives:

* build on the capabilities of the Deployment type 
* provide standard strategies for managing the runtime state of a service.
** a generic logical skeleton for starting up and shutting down a service can be embodied 
** subtypes integrate with the underlying service executables and or operating system
** separates the variant and invariant behavior, minimizing the amount of code to be written.

[[Image:service-discussion-solution.png]]

Example: Apache web server
* begin integrating the Service's procedural interfaces using the provided apachectl command. 
** startService can be defined as apachectl start and stopService as apachectl stop.

[[Image:service-example.png]]

Service management commands provide a standard interface that hides the implementation allowing you to change it later but build workflows across it.

===Life cycle commands===

&lt;table border=&quot;1&quot;&gt;
  &lt;tr&gt;&lt;th&gt;Command&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Life cycle&lt;/th&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Service.html#cmd_assertServiceIsDown assertServiceIsDown]&lt;/td&gt;&lt;td&gt;confirm the service is down&lt;/td&gt;&lt;td&gt;Shutdown&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Service.html#cmd_assertServiceIsUp assertServiceIsUp]&lt;/td&gt;&lt;td&gt;confirm the service is running&lt;/td&gt;&lt;td&gt;Startup&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Service.html#cmd_Restart Restart]&lt;/td&gt;&lt;td&gt;Restart the service process&lt;/td&gt;&lt;td&gt;Shutdown, Startup&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Service.html#cmd_Start Start]&lt;/td&gt;&lt;td&gt;Start the service process&lt;/td&gt;&lt;td&gt;Startup&lt;/td&gt;&lt;/tr&gt;	
  &lt;tr&gt;&lt;td&gt;[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Service.html#cmd_startService startService]&lt;/td&gt;&lt;td&gt;Invoke the service startup procedure&lt;/td&gt;&lt;td&gt;Startup&lt;/td&gt;&lt;/tr&gt;			
  &lt;tr&gt;&lt;td&gt;[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Service.html#cmd_Status Status]&lt;/td&gt;&lt;td&gt;Get the status of the Service&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Service.html#cmd_Stop Stop]&lt;/td&gt;&lt;td&gt;Stop the service process&lt;/td&gt;&lt;td&gt;Shutdown&lt;/td&gt;&lt;/tr&gt;					
  &lt;tr&gt;&lt;td&gt;[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Service.html#cmd_stopService stopService]&lt;/td&gt;&lt;td&gt;Invoke the service shutdown procedure&lt;/td&gt;&lt;td&gt;Shutdown&lt;/td&gt;&lt;/tr&gt;					
&lt;/table&gt;

Runstate control is the essential life cycle provided by the Service type. This includes several key operations described below.

''Idempotent Start''

Service provides an implementation supporting a generic start up procedure that first checks if the service is up and if not, to then run the &lt;code&gt;[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Service.html#cmd_startService startService]&lt;/code&gt; method.

[[Image:idempotent-start.png]]

''Idempotent Stop''

Service provides an implementation supporting a generic shutdown procedure which first checks if the service is down, and if not, to then run the &lt;code&gt;[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Service.html#cmd_stopService stopService]&lt;/code&gt; method.

[[Image:idempotent-stop.png]]

* The standard Service algorithm to shut down a service can be maintained in spite of exceptional scenarios particular to a service. 

Example: Tomcat Stop

* the &lt;code&gt;stopService&lt;/code&gt; command is changed into a command workflow which first attempts to stop tomcat by sending the &lt;code&gt;SHUTDOWN&lt;/code&gt; message to the control port. 
* If that fails, it then invokes the &lt;code&gt;runShutdownScript&lt;/code&gt; command which then attempts to stop the service by calling the tomcat shutdown script.

[[Image:idempotent-stop-tomcat.png]]

Use this pattern to extend components of the startup and shutdown workflow 
* Incorporate special logic yet 
* works within the basic logical skeleton provided by Service.

''Extended Deploy''

Service overrides the Deploy command defined by Deployment to add Stop and Start to the command sequence.

[[Image:workbench-Service-Deploy-graph.png]]

''Update''

* Using Update is a convenient way to move to a particular release of software. 
* The Update workflow can be used to automate model changes to remap package dependencies, via Change-Dependencies, and then call the Deploy.

==Using a Service==

* Services are highly configurable via Settings as you will see below
* To use a service it first must be defined and then installed as a CTL resource

===The Deploy workflow===

The Deploy workflow command sequence can be executed via the &quot;Deploy&quot; command:

&lt;pre&gt;
ctl -p demo -t JBossServer -r developmentDukesBank -c Deploy 
&lt;/pre&gt;

The JBossServer's Deploy command is the generic one, calling Stop, Packages-Install, Configure and Start

The following sections describe each command step.

====Stop====

* The first command in the Deploy command sequence is Stop
* Calls the assertServiceIsDown command
* If it is not down, runs the stopService command

&lt;pre&gt;
ctl -p demo -t JBossServer -r developmentDukesBank -c Stop 
&lt;/pre&gt;

JBossServer provides its own implementation for
* assertServiceIsDown: Connects to the shutdown port. Conditionally, checks the process table.
* stopServiceWrapper: Workflow that calls:
** stopService: Sends SHUTDOWN message to the JBoss shutdown port. Conditionally, calls the JBoss shutdown script
** waitforStopEvent: Waits for log to contain startup message

====Packages-Install====
* Second command installs any configured package dependencies

JBossServer uses the inherited command from Deployment. It is not overridden.

====Configure====
* The third command configures the JBoss instance after the packages are installed
* This command is a workflow that calls Docs-Generate to do the actual configuration file generation

JBossServer provides its own implementation for
* Docs-Generate: Generates several configuration files from templates. Uses the JBossServer instance data to supply environment specific values
** Also generates data sources configuration based on Rdb relationship

====Start====

* The last command in the Deploy command sequence is Start
** Calls the assertServiceIsUp command
** If it is not up, runs the startService command

&lt;pre&gt;
ctl -p demo -t JBossServer -r developmentDukesBank -c Start 
&lt;/pre&gt;

JBossServer provides its own implementation for:
* assertServiceIsUp: Connects to the shutdown port. Conditionally, checks the process table.
* startServiceWrapper:  Workflow that calls:
** startService: Calls the JBoss &quot;run.sh&quot; script
** waitforStartEvent: Waits for log to contain startup message

===Using Node Dispatch===

* Up till now, you have run commands locally to control the Services. 
* CTL also lets you run commands that execute across the network. 
* This is provides a convenient way to manage a set of Services without worrying about where they are hosted.

For example, to run the &quot;Status&quot; command across all hosts where the JBossServer is running use the &quot;&lt;code&gt;-I&lt;/code&gt;&quot; option.
&lt;pre&gt;
ctl -I '.*' -p demo -t JBossServer -r developmentDukesBank -c Status
&lt;/pre&gt;
This example says to execute across all hosts. You can also specify keywords like os-name, os-family, os-arch, os-version but most importantly, via tags.

&lt;pre&gt;
ctl -I tags=devl+secure,server -p demo -t JBossServer -r developmentDukesBank -c Status	
&lt;/pre&gt;

All of the keywords can accept a single value, a comma-separated list, or a regular expression.
In addition, the tags keyword can use the boolean operator + to represent logical AND. The comma used to separate lists serves as logical OR. The following example matches all nodes tagged with both &quot;devel&quot; AND &quot;secure&quot;, OR with &quot;server&quot;:

See: [[Use_node_filtering_options]]

===Defining a Service===

* Many of the Service commands work relative to a directory that contains instance configuration.
** This directory is referred to as &quot;basedir&quot;. 
* A second directory must be identified where Service's package artifacts will be written. 
** That directory is referred to as &quot;installRoot&quot;.
* The &quot;startuprank&quot; attribute describes the relative order for startup and shutdown commands

====JBossServer====

It is considered best practice to manage all the key configuration in an XML file.

The one below is an example showing the JBossServer, one of the Services in the Duke's Bank demo:

&lt;pre&gt;
 &lt;deployment 
	type=&quot;JBossServer&quot; name=&quot;developmentDukesBank&quot; 
	description=&quot;Development environment JBoss server&quot; 
	basedir=&quot;/Users/alexh/ctier/demo/elements/development/dukesbank/jboss-4.0.3SP1/server/default&quot; 
	installRoot=&quot;/Users/alexh/ctier/demo/elements/development/dukesbank/jboss-4.0.3SP1&quot; 
	startuprank=&quot;2&quot;&gt;
    
    &lt;resources replace=&quot;true&quot;&gt;
      &lt;resource type=&quot;JBossZip&quot; name=&quot;jboss-4.0.3SP1.zip&quot;/&gt;
      &lt;resource type=&quot;JBossPortConfig&quot; name=&quot;developmentDukesBank&quot;/&gt;
      &lt;resource type=&quot;JBossJavaOpts&quot; name=&quot;developmentDukesBank&quot;/&gt;
      &lt;resource type=&quot;HsqldbRdb&quot; name=&quot;developmentDukesBank&quot;/&gt;
    &lt;/resources&gt;

    &lt;referrers replace=&quot;false&quot;&gt;
      &lt;resource type=&quot;Node&quot; name=&quot;strongbad&quot;/&gt;
    &lt;/referrers&gt;
  &lt;/deployment&gt;
&lt;/pre&gt;

... and here are the related JBossServer settings
&lt;pre&gt;
	&lt;!-- JBossServer settings: --&gt;
  &lt;setting type=&quot;JBossPortConfig&quot; name=&quot;developmentDukesBank&quot; 
	description=&quot;JBoss service bindings port configuration&quot; 
	settingValue=&quot;ports-01&quot;/&gt;
  &lt;setting type=&quot;JBossPortConfig&quot; name=&quot;stagingDukesBank&quot; 
	description=&quot;JBoss service bindings port configuration&quot; 
	settingValue=&quot;ports-02&quot;/&gt;
  &lt;setting type=&quot;JBossJavaOpts&quot; name=&quot;developmentDukesBank&quot; 
	description=&quot;JBoss Java options&quot; 
	settingValue=&quot;-Djava.naming.provider.url=jnp://localhost:1199&quot;/&gt;
  &lt;setting type=&quot;JBossJavaOpts&quot; name=&quot;stagingDukesBank&quot; 
	description=&quot;JBoss Java options&quot;
 	settingValue=&quot;-Djava.naming.provider.url=jnp://localhost:1299&quot;/&gt;
&lt;/pre&gt;

====HsqldbRdb====

Here's one showing HsqldbRdb, one of the Services in the Duke's Bank demo:

&lt;pre&gt;
 &lt;deployment 
		type=&quot;HsqldbRdb&quot; name=&quot;developmentDukesBank&quot; 
		description=&quot;Stand-alone Hypersonic SQL database instance&quot; 
		basedir=&quot;/Users/alexh/ctier/demo/elements/development/dukesbank/hsqldb&quot; 		
		installRoot=&quot;/Users/alexh/ctier/demo/elements/development/dukesbank/hsqldb&quot; 
		startuprank=&quot;1&quot;&gt;
		
    &lt;resources replace=&quot;true&quot;&gt;
      &lt;resource type=&quot;HsqldbZip&quot; name=&quot;hsqldb_1_8_0_10.zip&quot;/&gt;
      &lt;resource type=&quot;HsqldbRdbDmp&quot; name=&quot;db1-00000000.0.zip&quot;/&gt;
      &lt;resource type=&quot;RdbPort&quot; name=&quot;developmentDukesBank&quot;/&gt;
      &lt;resource type=&quot;RdbConnection&quot; name=&quot;developmentDukesBank&quot;/&gt;
      &lt;resource type=&quot;HsqldbRdbSchema&quot; name=&quot;developmentDukesBank&quot;/&gt;
    &lt;/resources&gt;

    &lt;referrers replace=&quot;false&quot;&gt;
      &lt;resource type=&quot;Node&quot; name=&quot;strongbad&quot;/&gt;
    &lt;/referrers&gt;
  &lt;/deployment&gt;

  &lt;deployment type=&quot;HsqldbRdbSchema&quot; name=&quot;developmentDukesBank&quot; 
	description=&quot;Stand-alone Hypersonic SQL database schema&quot; 
	basedir=&quot;&quot; installRoot=&quot;&quot;/&gt;
  
&lt;/pre&gt;
... and here are the related Hsqldb settings

&lt;pre&gt;
    &lt;!-- Hsqldb settings: --&gt;
	&lt;setting type=&quot;RdbPort&quot; name=&quot;developmentDukesBank&quot; 
		description=&quot;Database connection port&quot; 
		settingValue=&quot;1701&quot;/&gt;
	&lt;setting type=&quot;RdbConnection&quot; name=&quot;developmentDukesBank&quot; 
		description=&quot;JDBC connection string&quot; 
		settingValue=&quot;jdbc:hsqldb:hsql://strongbad:1701&quot;/&gt;
	  &lt;setting type=&quot;RdbPort&quot; name=&quot;stagingDukesBank&quot; 
		description=&quot;Database connection port&quot; 
		settingValue=&quot;1702&quot;/&gt;
	  &lt;setting type=&quot;RdbConnection&quot; name=&quot;stagingDukesBank&quot; 
		description=&quot;JDBC connection string&quot;
		settingValue=&quot;jdbc:hsqldb:hsql://strongbad:1702&quot;/&gt;
&lt;/pre&gt;


==More Service examples==

===Use Service to manage Tomcat 5===

In this section, you will setup the generic Service type to manage the life cycle of Tomcat

Here are the rough steps
# Upload the apache-jakarta package to the repository and register it
# Define the Service and package dependency and deploy it: [[Deploying_Packages_to_a_Service]]
# Connect startup and shutdown scripts to the Service life cycle hook commands [[Screencast: Configuring a Service with your start and stop scripts]]
# Re run the Deploy workflow

Later considerations
* Configuration for Change-Dependencies
** Override the defaults to select just your package types

See also: [[Custom_service_scripts]]
----

==The Mediator Type==
See [[Mediator_Concepts]]

==The Site Type==

'''Intent'''
* Lets you group Services ...
* and then lets you control the group as a single object as a simple command
* Site represents your integrated software systems and extends [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Mediator.html Mediator]
* Coordinates service control operations which may be distributed over a network hosts.
* Manage software stacks or clusters as a single object

===Need and objectives===
* control the deployment and runtime state: of distributed application services, but each service must be updated and controlled individually, 
* implicit procedural order: The procedural order should reflect the runtime dependency hierarchy that is often inherent to sets of integrated software services.
* environment deployment differences: QA might have 2 nodes where PROD might have 20
* perform actions that are isolated to a subset of the services
* unmediated and possibly conflicting operations: Multi-user administration in the distributed environment

Example:

[[Image:site-discussion-problem.png]]

These scenarios highlight the following considerations:

* network abstraction: a means to abstract the location of the resources deployed within the network
* sequencing: a means to describe the ordering of procedures that recognize the runtime state dependency of the software components.

Solution objectives:

* an abstraction of a set of integrated software services that both 
* hide the differences in how services are deployed in different environments and 
* encapsulates the sequencing logic for each of the routine high level procedures.
* use the same procedures in different environments without knowing beforehand how services are deployed in the network, 
* and not have to know the runtime dependencies of the underlying services.

[[Image:site-discussion-solution.png]]

The diagram above illustrates the role the Site abstraction plays.

The Site object provides a standard encapsulation of routine procedures
* Stop, Start, Status and Update, 
* delegates concrete actions to Services
* point of mediation where conflicts can be mitigated

The administrator can still manage Services individually when desired.

See: [[Site_Concepts]]

====Runtime State Control====

The [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Site.html Site] type provides commands to manage the runtime state and deployment of a set of related software services.

''Stop''

* Service property &lt;code&gt;startup-rank&lt;/code&gt; utilized to order its set of services according to 
** smaller numeric values to services which should be started up before others that should be started afterwards.

Pseudo code example; 
* finds all its services, 
** sorts them in descending order, 
** calling the Stop action on each Service resource.

&lt;pre&gt;
FOR each service in the result of sortByStartupRank(set: Services, order: descending)
       DISPATCH-CALL Stop on Service
END FOR
&lt;/pre&gt;

Example:
Site object depends on two kinds of Service resources, web and app. 
* The web objects have startup rank 2 while the app objects have startup rank 1.
* According to the algorithm above
** the web services would be stopped 
** then the app services, since app services have a lower startup-rank value.

[[Image:site-example.png]]

Dispatch commands also use Node Dispatch to look up the host where the Service commands must be executed

''Update''

The default logic of the Update sequence
* first instructs all the Services to stop, 
* then install their software dependencies, 
* configure themselves, and then 
* start up.

The Site's Update sequence matches the steps of the Service resource itself.

[[Image:site-lifecycle-update1.png]]

''Custom Update''
* Use your own logic to coordinate runstate control across Services
** Implement rolling updates to avoid service interruption.

Example: Custom Update
* sequence begins by invoking the Update action to the &quot;App&quot; tier, 
* and then the &quot;Web&quot; tier, 
** subsequently invoking the Update action to the whole set of Service resources.

[[Image:site-lifecycle-update2.png]]

See: [[Site_Concepts#Runtime_State_Control]]

===Life cycle commands===

[[Image:workbench-Site-developmentDukesBank-Update-pview.png]]

==Using a Site==

* The run state and deploy life cycle of collections of Services are coordinated via the Site
* Commands issued to the Site are dispatched to the Services that are configured as resources of the Site
* Site life cycle commands include options to filter which Services are dispatched to

===Dispatching Commands===

====Life cycle commands====

Run Status across all services in the developmentDukesBank Site:
&lt;pre&gt;
ctl -p demo -t Site -r developmentDukesBank -c Status
&lt;/pre&gt;

====Command options====

The life cycle commands include two filtering flags. Both take regular expressions:
* -resourcename: Name or pattern of the Service resource
* -resourcetype: Type or pattern of the Service type

Run Status across only the JBossServer services in the developmentDukesBank Site:

&lt;pre&gt;
ctl -p demo -t Site -r developmentDukesBank -c Status -- -resourcetype JBossServer
&lt;/pre&gt;

Run Status across only the services in that have 'dev' in their name
&lt;pre&gt;
ctl -p demo -t Site -r developmentDukesBank -c Status -- -resourcename 'dev.*'
&lt;/pre&gt;

===The Deploy workflow===

The Site's [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Mediator.html#cmd_Deploy Deploy] command (like many other Site commands inherited by [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Mediator.html Mediator]) dispatches the &quot;Deploy&quot; command to its Services.
&lt;pre&gt;
ctl -p demo -t Site -r developmentDukesBank -c Deploy
&lt;/pre&gt;

====Using dispatchCmd====

* &lt;code&gt;dispatchCmd&lt;/code&gt; command lets you dispatch any command to a Site's services
* Site not required to have the corresponding command 

The example below runs the &quot;stopServiceWrapper&quot; command across all JBossServer instances
&lt;pre&gt;
ctl -p demo -t Site -r developmentDukesBank -c dispatchCmd -- -resourcetype JBossServer -command stopServiceWrapper
&lt;/pre&gt;

===Understanding Change-Dependencies===

{{Understanding Change-Dependencies}}

===Using Change-Dependencies===

{{Change-Dependencies/using}}

===Defining a Site===

* A Site is really defined in terms of its Service dependencies

The one below is an example showing a Site in the Duke's Bank demo:

&lt;pre&gt;
 &lt;deployment type=&quot;Site&quot; name=&quot;developmentDukesBank&quot; 
		description=&quot;Duke's Bank development environment services&quot; 
		basedir=&quot;&quot; installRoot=&quot;&quot; startuprank=&quot;1&quot;&gt;
		
    &lt;resources replace=&quot;true&quot;&gt;
      &lt;resource type=&quot;DefaultPackageType&quot; name=&quot;developmentDukesBank&quot;/&gt;
      &lt;resource type=&quot;JBossServer&quot; name=&quot;developmentDukesBank&quot;/&gt;
      &lt;resource type=&quot;HsqldbRdb&quot; name=&quot;developmentDukesBank&quot;/&gt;
    &lt;/resources&gt;

    &lt;referrers replace=&quot;false&quot;&gt;
      &lt;resource type=&quot;Node&quot; name=&quot;strongbad&quot;/&gt;
    &lt;/referrers&gt;
  &lt;/deployment&gt;
&lt;/pre&gt;

Note that this Site is comprised of two Services:
* JBossServer
* HsqldbRdb

Additionally, the Site defines a &quot;DefaultPackageType&quot; setting:

&lt;pre&gt;
	&lt;setting type=&quot;DefaultPackageType&quot; name=&quot;developmentDukesBank&quot; 
		description=&quot;Duke's Bank development environment updater application package type&quot; 
		settingValue=&quot;JBossEar&quot;/&gt;  
&lt;/pre&gt;

The DefaultPackageType setting specifies, &quot;JBossEar&quot;, as the package type to use by the Change-Dependencies command.

See also [[Mock_Site_Example]].
----

==Jobs==

* Jobs let you run a command from a centralized server
* Set up jobs for all the routine operations
* Use it for any self-serve needs

There are three ways to run a job:
# Run and forget
# Named
# Scheduled

Additionally, jobs can be specified to
* Provide options to commands
* Dispatch to nodes 
* Change log level
* Include documentation
* Be grouped into a hierarchy

===Running Jobs===
* User docs here: [[Running jobs]]
* Home page contains set of defined jobs
* Organized by groups
* Use arrows to reveal the job definitions
* Each job has a set of actions
* Also includes summary of previous job executions

[[Image:jobcenter-list-dukesbank.png]]

Selected jobs allow you to
* view details showing the job's object and command 
* list previous job executions
* Run the job now
* Choose command options and then run the job

[[Image:jobcenter-dukesbank-Site-Status.png]]

Once the job runs, JobCenter redirects to the &quot;Now Running&quot; page
* Shows all currently running and recently run jobs
* Running jobs include progress bar to  indicate time to completion
* Each job has a link to view the job output

[[Image:jobcenter-dukesbank-nowrunning.png]]

Clicking a running job brings you to the progress page for that command
* By default shows a &quot;tail&quot; output that follows the last generated messages (configured to 20 by default)
* Also includes a progress bar. 
** Progress is based on historical data

Other output display options
* Browse Output: Groups messages by the command that emitted them 

[[Image:jobcenter-dukesbank-Site-Restart-tail.png]]
* Process View: Provides a workflow view of progress
[[Image:jobcenter-dukesbank-Site-Restart-pview.png]]

===Setting up Jobs===
User docs here: [[Creating jobs]]
====Via JobCenter====

[[Image:jobcenter-create-job-JBossServer-Status.png]]

====Via ProjectBuilder====

* ProjectBuilder provides two jobs to manage job definitions
* find-jobs: Queries JobCenter for registered jobs
** Parameters provide query filters
** Also supports purging jobs 
* load-jobs: Loads an job XML file containing job definitions

Example below finds all registered jobs and saves it to a file:
&lt;pre&gt;
ctl -p demo -m ProjectBuilder -c find-jobs -- -out /tmp/jobs.xml
&lt;/pre&gt;
&lt;pre&gt;
No filters specified, finding all jobs
Jobs xml content written to: /tmp/jobs.xml
&lt;/pre&gt;

* Examine the &quot;/tmp/jobs.xml&quot; file.
* Defined as a list of jobs
* Each job specification includes name, information, loglevel, context and optionally a schedule

&lt;pre&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;

&lt;joblist&gt;
 &lt;job&gt;
    &lt;name&gt;Purge&lt;/name&gt;
    &lt;group&gt;Build/DukesBank&lt;/group&gt;
    &lt;description&gt;Purge unused and non-current JBossEar packages from the repository&lt;/description&gt;
    &lt;additional&gt;This job deploys the most recent build on schedule throughout the work day&lt;/additional&gt;
    &lt;loglevel&gt;INFO&lt;/loglevel&gt;
    &lt;context&gt;
      &lt;depot&gt;demo&lt;/depot&gt;
      &lt;type&gt;JBossAntBuilder&lt;/type&gt;
      &lt;object&gt;dukesBank&lt;/object&gt;
      &lt;command&gt;Purge&lt;/command&gt;
      &lt;loglevel&gt;INFO&lt;/loglevel&gt;
    &lt;/context&gt;
    &lt;!--
	** define a schedule for the Purge job:
	**  weekday values * - all 1-5 - days mon-fri 1,2,3-5 - days mon,tue,wed-fri, etc.
	**  month values: * - all 1-10 - month jan-oct 1,2,3-5 - months jan,feb,mar-may, etc
    --&gt;
    &lt;schedule&gt;
      &lt;time hour=&quot;1&quot; minute=&quot;0&quot;/&gt;
      &lt;weekday day=&quot;*&quot;/&gt;
      &lt;month month=&quot;*&quot;/&gt;
    &lt;/schedule&gt;
  &lt;/job&gt;
&lt;/joblist&gt;
&lt;/pre&gt;

&lt;pre&gt;
ctl -p demo -m ProjectBuilder -c load-jobs -- -file /tmp/jobs.xml
&lt;/pre&gt;
&lt;pre&gt;
Succeeded creating/updating 9 Jobs:
	1: Build [1] &lt;/jobcenter/scheduledExecution/show/1&gt;
	2: BuildAndUpdate [3] &lt;/jobcenter/scheduledExecution/show/3&gt;
	3: Purge [2] &lt;/jobcenter/scheduledExecution/show/2&gt;
	4: Restart [8] &lt;/jobcenter/scheduledExecution/show/8&gt;
	5: Restart [6] &lt;/jobcenter/scheduledExecution/show/6&gt;
	6: Status [9] &lt;/jobcenter/scheduledExecution/show/9&gt;
	7: Status [5] &lt;/jobcenter/scheduledExecution/show/5&gt;
	8: Update [7] &lt;/jobcenter/scheduledExecution/show/7&gt;
	9: Update [4] &lt;/jobcenter/scheduledExecution/show/4&gt;
&lt;/pre&gt;

See: [[Job-v10.xml]]

----

== Suggested Next Courses ==
* [[Course - Automation Development Essentials]]

[[Category:Training Topics|140]]</text>
    </revision>
  </page>
  <page>
    <title>Course - System Administration: Part 1</title>
    <id>462</id>
    <revision>
      <id>16671</id>
      <timestamp>2012-02-27T16:48:19Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Setting sort key</comment>
      <text xml:space="preserve">==Overview==
=== What you will learn ===

The topics in this course provide a foundation for administrating a ControlTier software infrastructure.

You will learn about the ControlTier infrastructure deployment models, software dependencies, environment management and toolset.

You will learn how to install, configure and maintain the client and server software components, including the network configuration to support distributed administration.

You will learn how to execute ad hoc commands using the CTL tools, as well as, track and audit these activities.

==== Learn To ====
* Learn the role, responsibilities and activities of the ControlTier administrator
* Understand the ControlTier architecture  and its components
* Install the ControlTier software
* Setup and manage the ControlTier server
* Understand the SSH configuration necessary for distributed administration
* Set up multiple clients across the network.
* Execute ad-hoc commands across the network using CTL
* Track activity via the logging and reporting capabilities

=== Audience ===

* System Administrators
* System Engineers

=== Prerequisites ===
==== Required Prerequisites ====

* Awareness of modern software architectures and operational procedures
* Basic system administration skills
* Command shell (Unix or Windows)

==== Suggested Preqrequisites ====

* [[Course_-_ControlTier_Intro|ControlTier Introduction Course]]

=== Course Objectives ===
* Design a ControlTier client-server configuration suitable for a given environment
* Install an operational ControlTier infrastructure that can support service management operations
* Learn about Nodes
* Familiarity with the ControlTier administrative toolset

== Course Topics==

==System Administrator's Role and Responsibilities==

===Role===
This person is responsible for installing and maintaining the ControlTier software and its configurations. 
They are in charge of maintaining the registry of Nodes in the system, and managing user accounts and roles.
Their customers are the ControlTier users: Service Manager, Repository Manager and Architect

===Responsibilities===
General
* Install the ControlTier Server software
* Install the ControlTier Client on provisioned hardware as needed
* Correctly register each node in the ControlTier project(s)
* Perform required system maintainence, such as backing up data, managing disk space
* Perform upgrades of the ControlTier software, and/or dependencies 

Additional
* Configure user accounts and roles
* Integrate LDAP based authentication and authorization if required

===Activities===
General
* Define the server and client configuration 
* Establish a suitable login and access policy
* Install the ControlTier Server
* Install the ControlTier Client on all desired hosts
* Register Nodes to projects
* Configure Users and Roles

Additional
* Configure LDAP integration

----

== ControlTier Architecture and Components ==

===Platform Components===

[[Image:platform-overview.png]]

See: [[Platform_overview]]

===Architecture===

[[Image:arch-overview.png]]

Client-server architecture
*Server:
** Based on a single Jetty instance
** Server host contains the ControlTier centralized management tools and repository
** Server host from which centralized administration is performed
** Application components include: Jackrabbit, Workbench, JobCenter, ReportCenter
*Client:
** Based on CTL instances
** Any host where commands are executed require the client. ''This includes the server host, too!''
** Software components include: CTL, ControlTier-extension

See: [[Architecture]]

===Network Protocols===

The ControlTier components interact over the network under several modes of communication:
* remote command invocation via SSH
* repository access for package and configuration artifacts via HTTP
* logging and notification via Log4J

====Remote Command Invocation====

* SSH is the basis for all remote command execution.

* CTL provides the &quot;nodedispatch&quot; capability used to execute commands across a set of hosts. When a command must be executed remotely SSH is used.

* Normally, actions from the administration host are dispatched via outbound SSH commands to the target hosts. Part of the installation and setup of the client software is preparing the SSH key configuration to allow remote commands from the central host.

EG:
[admin host] &amp;mdash; connects-to &amp;rarr; [target host]

* By default, SSH runs on port 22.

====Why SSH?====
CTL's nodedispatch uses SSH for remote command invocation. But why SSH?
* It's well known (the devil you know)
** Strengths and weaknesses have been exhaustively scrutinized
* SSH is ubiquitous (at least on *nix) and cross platform
** OpenSSH is typically already on *nix hosts
** Cygwin or OpenSSH can be used on Windows hosts

====File share====

====File Share Access====

* HTTP is the basis for all access to the repository.

;Packages
:These are files that represent the build artifacts and/or third party software packages. Files are uploaded via HTTP/PUT while all downloads are done via HTTP/GET

;Project data
:These are the resources that describe the topology and settings of the business service. The CTL instances access this data via Workbench client software.

;Modules
:These are the automation modules that support all the service management processes. The CTL instances can update themselves via HTTP/GET to modules deployed on the DAV.

By default, all access is done over port 8080 but that can be changed to suit local conventions.
Additionally, SSL can be used to secure HTTP communication.

====Repository Storage====

Repository content is stored in two areas:

1) Project data

* Content: Type and Object model 
* Format: RDF/XML files
* Location: $CTIER_ROOT/workbench/rdfdata
* Access: Workbench (HTTP)

2) Package data

* Content: Any deployable artifact (e.g., tgz, zip, jar, rpm, ...)
* Format: Apache Jackrabbit
* Location: $CTIER_ROOT/jackrabbit
* Access: WebDAV (HTTP)

----

== Installation ==

===Dependencies===

Required:
* ControlTier software is Java-based and requires a JDK. Java 1.5 or Java 1.6 are supported.
* Workbench uses Graphviz for generating diagrams

Optional:
* Apache Forrest used to generate documentation from type definitions

See: [[Dependencies]]

====Self Contained Directory Convention====
It's considered best-practice convention to use a standard installation directory layout.

Everything located under CTIER_ROOT

See: [[Self_Contained_Directory_Convention]]

===ControlTier Environment Variables===

There are several key environment varaibles that support a working installation:

* CTIER_ROOT
* CTL_HOME
* CTL_BASE
* JETTY_HOME
* JAVA_HOME

Each of these are defined in a resource file that can and should be sourced from the login shell. 

For bash login, ensure these are set in the $HOME/.bashrc like so:

&lt;pre&gt;
if [ -f ~/.ctierrc ]; then
   . ~/.ctierrc
else
   echo ~/.ctierrc not found 1&gt;&amp;2
fi
&lt;/pre&gt;

See: [[ControlTier_Environment_Variables]]

===Graphical versus CLI Installer===

* The ControlTier software distribution is installed via a ControlTier installer. The installer will configure an integrated set of components.

* There are two types of installers: graphical and command line. The graphical installer is suitable only for a single node client and server installation.

* The command line installer can be used to install either the server or the client. This course will cover the command line installer.

===SSH configuration===

* ControlTier uses SSH for remote execution. 
* The SSH configuration must allow the ControlTier server machine to dispatch commands to client machines. 
* Therefore, SSH is assumed to be installed and configured appropriately to allow this access. 
* SSH should not prompt for a password. 

===Overriding Installer Defaults===

* The installer is driven by a number of settings in the default.properties file located within the ControlTier installer directory. 
* You can use the &quot;-Dkey=val&quot; pairs to override these defaults from the command line.

Eg: &lt;code&gt;sh ./install.sh -Dserver.jetty.hostname=`hostname`&lt;/code&gt;

See: [[INSTALL Command Reference]], [[ZIP_installer#Specifying_and_overriding_defaults]]

=== Server Install ===

====System requirements====

* Processor: &gt;1Ghz
* Memory: &gt;2GB
* Disk space: &gt;4GB (for software install plus space for repository storage)
** ControlTier client and server software (includes dependencies): 300MB
* Network port bindings: HTTP (8080 in default install), Log4J listener (1055 in default install), SSH (usually 22, but may be different on your network)

Of course these are just general guidelines. Requirements depend on:
* the number of projects 
* workload profile
* the size of the repository 
* desired response time

====Installation Procedure====

There are several steps to install the ControlTier software:
# download the installer zip file from Sourceforge (see: [[Download]])
# extract the the zip
# change directory to the installer root dir
# run the install script specifying the server hostname (plus any other desired override)

===Server startup/shutdown===

See: [[Server_Startup_and_Shutdown]]

===Client installs===

Client software installation is similar to the server installation except the &lt;code&gt;--client&lt;/code&gt; flag should be used.

==== System requirements====

* ControlTier client software (includes Java): 150MB
* Network port bindings: SSH (eg, 22)

See: [[ZIP_installer#Client-only]]

----

== Login and Access==

The ControlTier infrastructure must support login and access supporting the activities for each of the roles.

===Logins===

The installer will generate a Jetty configuration file called &quot;realm.properties. This file defines accounts and corresponding authorization roles. 

You can find this file here: &lt;code&gt;$JETTY_HOME/etc/realm.properties&lt;/code&gt;

Here's an example of three user IDs created by default.

&lt;pre&gt;
# The format is
#  &lt;username&gt;: &lt;password&gt;[,&lt;rolename&gt; ...]
#
# This sets the default user accounts for the ControlTier apps
#
default:default,user,admin,architect,deploy,build
deploy:deploy,user,deploy
build:build,user,build
&lt;/pre&gt;

See the [http://docs.codehaus.org/display/JETTY/Realms Jetty REALMS] page for more information about configuring this file.

===Role Access===

Out of the box, the ControlTier installation will define these roles:

;build 
:Repository Manager user using the Builder that interfaces with the build tools and process

;deploy 
:Service management user that does deployments and restarts

;architect 
:Architect user/developer. Cannot run commands but can define new project types in the server

;admin 
:System Administrator user can run any command

===Self Service Access Example===

* JobCenter account(s) for executing jobs ... but no system account access

----

==Project Depots==

* All activities are done in the context of a project. Each project is supported by a depot where project resources are maintained. 
* The System Administrator will coordinate with the Service Manager user to create these projects when needed
* The authoritative copy of the project resources are maintained at the ControlTier server's repository. 
* Each client installation has a project name, a locally (cached) copy of just the resources needed by that node
* The [[ctl-project]] command is used to create project projects on client hosts

[[Image:project-content.png]]

See: [[:Category:Projects]]

----

==Nodes==

* A machine hosting a CTL software instance is called a node.
* By convention a node can take on one of two roles, target node or admin node. A target node is one that receives commands from an admin and executes them. An admin node is a central server from which remote management of target nodes will be performed.

[[Image:node-command-concept.png]]

=== Registering Nodes===

* Nodes are registered during project name set up but they can also be registered via XML definition and then loaded to the server.

* Node information includes basic host metadata:

* name: a symbolic name of the node
* description: description of the node's role or function
* hostname: administrative hostname. (eg, &quot;strongbad.local&quot;). Can also be the same as &quot;name&quot;.
* os-arch: operating system architecture (eg, &quot;i386&quot;)
* os-family: operating system family (eg, &quot;unix&quot; or &quot;windows&quot;)
* os-name: operating system name (eg, &quot;Linux&quot;, &quot;Darwin&quot;, &quot;SunOS&quot;)
* os-version: operating system version (eg, &quot;2.6&quot;, &quot;9.2.2&quot;, &quot;4.3.1&quot;)
*  tags: user defined tags

There are four CTL specific node fields:

* ctl-base: the $CTL_BASE value
* ctl-home: the $CTL_HOME value
* ctl-password-set: a true/false value specifying if a password should be used for remote command invocation
* ctl-password: the password used with the ctl-username 
* ctl-username: the system account used for remote command invocation

====ctl-project vs ProjectBuilder load-resources====
There are two means to register a Node to a project: ctl-project or ProjectBuilder's load-resources.

The ctl-project -a install command registers node information based on what was specified during the installation process.

For full control of Node registration see: [[Bulk_Node_registration]]

----

== Command execution== 

* The client part of the install contains a component called CTL, the command dispatching framework used to execute actions in the distributed environment.

See: [[Command_execution]]

===Ad hoc commands===

* The ctl-exec command is used to execute commands to registered nodes. 

[[Image:ctl-exec-cartoon.png]]

See: [[Running ad hoc commands]]

===Defined commands===

Use ctl whenever you want to run a pre defined command from a ControlTier library.

[[Image:ctl-cartoon.png]]

See: [[Running defined commands]]

===Node filtering===

You can select what nodes you want the commands executed via node filtering flags.

See: [[Use node filtering options#Filtering_Options|Node filtering options]]

==Logging and Reporting==

===Logging===
Server and client components log via Log4J. Both are configured to log activity to files

Server logs (3.2.x):
* Locations:
** Jetty stdout/stderr: CTIER_ROOT/pkgs/jetty-6.1.14/logs/YYYY_MM_DD.stderrout.log
** Workbench: pkgs/jetty-6.1.14/logs/workbench.log

Client log (3.2.x)
* Location: CTL_BASE/var/log/command.log

===Reporting===

Commands can executed via the CTL instances can also submit report messages over TCP to the server. 

This is done via Log4J log records and a Log4J socket appender configuration and a corresponding listener running on the server.

===Configuration===
Server configuration (3.2.x):
* Locations: 
** Workbench: CTIER_ROOT/pkgs/jetty-6.1.14/webapps/itnav/WEB-INF/classes/log4j.properties
** JobCenter: CTIER_ROOT/pkgs/jetty-6.1.14/webapps/jobcenter/WEB-INF/classes/log4j.properties
** ReportCenter: CTIER_ROOT/pkgs/jetty-6.1.14/webapps/reportcenter/WEB-INF/classes/log4j.properties


Client configuration (3.2.x)
* Location: $CTL_BASE/etc/log4j.properties

----

==Backup==

...use ZipBuilder to do RDF backup

== Suggested Next Courses ==

* [[Course_-_Package_Manager]]


[[Category:Training Topics|120]]</text>
    </revision>
  </page>
  <page>
    <title>Create-batch-request Task Reference</title>
    <id>1857</id>
    <revision>
      <id>12469</id>
      <timestamp>2010-04-02T01:48:27Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Tasks&lt;/categorytree&gt;
=Description=

Creates a batch request object and stores it with the given Id.

Use this with the [[add-batch-operation Task Reference|add-batch-operation]], and [[perform-batch-request Task Reference|perform-batch-request]] to perform a set of changes.

=Parameters=

      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;id&lt;/td&gt;&lt;td&gt;Identifier to store the request object.  Reference this using the &quot;requestId&quot; attribute in other tasks.
&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;depot&lt;/td&gt;&lt;td&gt;Project name&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;comment&lt;/td&gt;&lt;td&gt;Change log comment for the batch request&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;

=Examples=

Add an &quot;addResources&quot; operation:

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;create-batch-request id=&quot;someId&quot; depot=&quot;${context.depot}&quot; comment=&quot;Batch data request&quot;/&gt;
&lt;/syntaxhighlight&gt;


&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Resource model Ant Tasks]]</text>
    </revision>
  </page>
  <page>
    <title>Create-type</title>
    <id>1146</id>
    <revision>
      <id>10948</id>
      <timestamp>2009-12-13T00:58:19Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;code&gt;create-type&lt;/code&gt; is a defined command provided in [[ProjectBuilder]]. It is used to create a new type definition as a set of XML source files.</text>
    </revision>
  </page>
  <page>
    <title>Create a seed library</title>
    <id>118</id>
    <revision>
      <id>14120</id>
      <timestamp>2010-11-10T15:37:50Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;ctl-depot&quot; to &quot;ctl-project&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;ProjectBuilder&lt;/categorytree&gt;

Part of making your modules ready for broad use is packaging them so they can be distributed to Workbench installations. This document describes the &quot;seed&quot; archive.

For ControlTier server users, especially those that use a sophisticated object model, a seed archive type is the preferred choice. A &quot;seed&quot; is short for &quot;project seed&quot;, an archive of type definitions that are loaded into the Workbench model for the specified project. When the seed is uploaded to a Workbench project all the modules are loaded and staged into its repository. They can be downloaded by CTL installations that use those modules.

==Identify module directory==

This is the directory where ProjectBuilder reads your module src directories. For example, the default location for module source is &quot;$CTL_BASE/src/modules&quot;. Your module src directory might be in a different location.

==Run the command==

Building a seed archive is easy and accomplished via the &lt;code&gt;build-library&lt;/code&gt; command with the &quot;-archive seed&quot; option. Use the &quot;-upload&quot; flag to also upload it to Workbench:

&lt;pre&gt;
ctl -m ProjectBuilder -c build-library -- -archive seed -upload
&lt;/pre&gt;

The modules will be downloaded as needed by your objects or via the ctl-project command like so:
&lt;pre&gt;
ctl-project -a install
&lt;/pre&gt;

{{Manual/navbox}}

[[Category:ProjectBuilder]]
[[Category:Modules]]</text>
    </revision>
  </page>
  <page>
    <title>Create an extension library</title>
    <id>117</id>
    <revision>
      <id>14122</id>
      <timestamp>2010-11-10T15:38:22Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;ctl-depot&quot; to &quot;ctl-project&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Artifacts&lt;/categorytree&gt;

Part of making your modules ready for broad use is packaging them so they can be distributed to your CTL installations. This document describes the &quot;extension&quot; archive.

An extension is an archive of modules and other supporting resources that effectively enhance the CTL framework. (See the [[Extension]] for more information about what can be included in the archive).

==Identify module directory==

This is the directory where ProjectBuilder reads your module src directories. For example, the default location for module source is &quot;$CTL_BASE/src/modules&quot;. Your module src directory might be in a different location.

==Run the command==

Building an extension archive is easy and accomplished via the &lt;code&gt;build-library&lt;/code&gt; command with the &quot;-archive extension&quot; option:
&lt;pre&gt;
ctl -m ProjectBuilder -c build-library -- -archive extension
&lt;/pre&gt;

The build-library command will generate a new Jar file that can be used by the ctl-extension command like so:
&lt;code&gt;
ctl-extension -f /path/to/targetdir/your-extension-vers.jar 
&lt;/code&gt;

Remember to run ctl-project to update the modules in each project.

{{Manual/navbox|state=uncollapsed}}
{{Reference/navbox}}
[[Category:ProjectBuilder]]
[[Category:Extensions]]</text>
    </revision>
  </page>
  <page>
    <title>Create your own Service type</title>
    <id>1195</id>
    <redirect />
    <revision>
      <id>6767</id>
      <timestamp>2009-07-08T23:27:03Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <comment>[[Create your own Service type]] moved to [[Creating your own Service type]]: make page title a gerund per guidelines</comment>
      <text xml:space="preserve">#REDIRECT [[Creating your own Service type]]</text>
    </revision>
  </page>
  <page>
    <title>Creating Additional Users</title>
    <id>1865</id>
    <redirect />
    <revision>
      <id>12427</id>
      <timestamp>2010-03-23T22:24:02Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <comment>moved [[Creating Additional Users]] to [[Managing users]]:&amp;#32;This isn't just about creating</comment>
      <text xml:space="preserve">#REDIRECT [[Managing users]]</text>
    </revision>
  </page>
  <page>
    <title>Creating Jobs with Jobcenter</title>
    <id>1574</id>
    <redirect />
    <revision>
      <id>10030</id>
      <timestamp>2009-12-11T04:02:03Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <comment>moved [[Creating Jobs with Jobcenter]] to [[Creating jobs]]:&amp;#32;make title more concise and easier to find</comment>
      <text xml:space="preserve">#REDIRECT [[Creating jobs]]</text>
    </revision>
  </page>
  <page>
    <title>Creating a project</title>
    <id>347</id>
    <revision>
      <id>15682</id>
      <timestamp>2011-11-15T11:25:24Z</timestamp>
      <contributor>
        <username>Rob.percival</username>
        <id>377</id>
      </contributor>
      <comment>rvv</comment>
      <text xml:space="preserve">This page describes how to '''create a ControlTier project'''. A [[project]] is a logical group of nodes, packages, services, and processes that interact with one another.
&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Projects&lt;/categorytree&gt;

==ControlTier server setup==

===Option 1: Create a project via Workbench===

Login to [[Workbench]].

Go to the Admin page and push the &quot;Create Project&quot; button.

This will bring you to the create project form:

[[Image:workbench-create-project-form.png]]

Fill in the form, giving the project name and description. Note, do not use spaces for the project name.

Push the &quot;Create&quot; button and you will be redirected to the progress page:

[[Image:workbench-create-project-progress.png]]

Once the project is created the browser will direct you to the home page.

===Option 2: Create a project via the command line===

On the ControlTier server, run [[CTL-DEPOT_Command_Reference|ctl-project]] &quot;create&quot; action to create the project (substituting &quot;MyProject&quot; with your new project name) :

&lt;pre&gt;
ctl-project -p MyProject -a create
&lt;/pre&gt;

As projects have become obsolete, in 3.6.0 this becomes:

&lt;pre&gt;
ctl-project -p MyProject -a create
&lt;/pre&gt;

Running the &lt;code&gt;ctl-project&lt;/code&gt; create action on the server will create the project, ensure the CTL depot for the new project has been initialized, and register the admin host to the new project.

Note:
* This command might take a while to complete due to the project being created and initialized and can take 3-10 minutes depending on the speed of the server processor(s). See the next section [[#Confirming_the_completion_in_the_log]] to watch the progress in the log file.

===Confirming the completion in the log===

You can view the progress by watching the &quot;$JETTY_HOME/logs/workbench.log&quot; file (see [[ControlTier server logs]]).

&lt;pre&gt;
.
.
.
2009-03-27 14:57:46,834 [Thread-46] WARN  com.networkgps.itnav.projects.Store - Begin: project creation: MyProject
2009-03-27 14:57:46,835 [Thread-46] WARN  com.networkgps.itnav.projects.Store - Begin: project model initialization: MyProject
2009-03-27 14:57:47,006 [Thread-46] INFO  com.controltier.log.common - Create new Project: MyProject
2009-03-27 14:57:47,012 [Thread-46] WARN  com.networkgps.itnav.projects.Store - Done: project model initialization: MyProject
2009-03-27 14:57:47,012 [Thread-46] WARN  com.networkgps.itnav.projects.Store - Begin: extract seed archive: MyProject
2009-03-27 14:57:47,118 [Thread-46] WARN  com.networkgps.itnav.projects.Store - Done: extract seed archive: MyProject
2009-03-27 14:57:47,124 [Thread-46] WARN  com.networkgps.itnav.projects.Store - Begin: install seed archive: MyProject
2009-03-27 14:59:14,986 [Thread-46] WARN  com.networkgps.itnav.projects.Store - Begin: stage all modules: MyProject
2009-03-27 14:59:18,682 [Thread-46] WARN  com.networkgps.itnav.projects.Store - Done: stage all modules: MyProject
2009-03-27 14:59:18,682 [Thread-46] WARN  com.networkgps.itnav.projects.Store - Done: install seed archive: MyProject
2009-03-27 14:59:18,683 [Thread-46] WARN  com.networkgps.itnav.projects.Store - Done: project creation: MyProject
&lt;/pre&gt;
Watch for the final messages to confirm the project is done being created and populated: &quot;Done: project creation: MyProject&quot;.

==ControlTier client setup==

{{Setup/project/client}}

&lt;noinclude&gt;{{Manual/navbox}}&lt;/noinclude&gt;

[[Category:Projects]]</text>
    </revision>
  </page>
  <page>
    <title>Creating jobs</title>
    <id>666</id>
    <revision>
      <id>15679</id>
      <timestamp>2011-11-15T11:22:25Z</timestamp>
      <contributor>
        <username>Rob.percival</username>
        <id>377</id>
      </contributor>
      <comment>rvv</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;CTL Center&lt;/categorytree&gt;

Jobs can be created using the GUI interface and a web browser, or using [[job.xml]] loaded with [[ctl-jobs]].  Jobs can also be exported into XML format from [[CTL Center]].

For information on Executing Jobs and Viewing their results, see: [[Running jobs]]

== Description ==

CTL Center is a tool for running Commands in the ControlTier system without the need to use the commandline.  It is a web application that you can access from your web browser.  

It provides a simplified yet still powerful way of executing commands and ad-hoc scripts.

== What you can do with CTL Center ==

CTL Center allows you to pre-configure all of the options you would provide when executing a command on the commandline: named arguments, node dispatch configuration, context and command name; and store that configuration as a &quot;Job&quot;.  You can organize Jobs, and you can configure Jobs to run automatically on a certain schedule.

Since CTL Center respects the ACLs definition for the ControlTier Client installation, you can use role-based authorization to restrict some users to only a subset of Jobs.  This provides a Self-Service type interface, where some users can have access to a limited set of Jobs to execute.

=== Kinds of Jobs ===

Jobs in CTL Center are stored in one of three ways:

# Stored - These jobs cab be manually executed at will or scheduled to run at certain intervals
#: Stored Jobs can be executed at any time. Scheduled Jobs have a certain schedule, and run automatically at certain times.  They also can be manually executed.
# Temporary - These jobs are executed immediately and not stored.
#: Temporary jobs are executed as soon as they are created, and their configuration is not stored for later use.

Jobs in CTL Center run a ''Workflow'', a sequence of one or more commands. There are several types of Workflow items:

* Command - Calls a system command
* Script - An line defined script
* Script file - A script local to the server copied to each Node and executed
* Defined Command - Executes a Defined Command for a particular context
* Job Reference - Calls another job

A Temporary Job that runs a single Command or Script workflow item is the same as using the commandline tool [[ctl-exec]], which can use the Node Dispatching mechanism to execute a script on a set of remote Nodes.

A Job that runs a single Defined Command is the same as using the commandline tool [[ctl]] to execute a command.  

=== Grouping Jobs ===

Jobs can be organized into Groups.  Each Job can specify a &quot;group path&quot;, which is a &quot;/&quot;-delimited string.  When viewed in the GUI, the groups will be shown with a Folder icon and a number indicating how many Jobs are in that Group.  The Groups can be expanded or collapsed to simplify the interface.

=== Using Jobs === 

Information on how to use Jobs once they are defined can be found here:

* [[Running jobs]]

=== The Jobs List and Job View pages ===

The main view for the CTL Center GUI is the Jobs List Page.  This is the first page shown after you log in, and shows you the list of all available Jobs organized by Group.  Many actions can be performed on a Job from this list view.  Each Job can be viewed in more detail by clicking on the Job name in the list, which will bring you to the Job View Page.  From the Job View Page, more detail is shown.

== Using the GUI ==

The GUI provides a simple interface for managing Jobs as well as executing them and observing them as they run (see [[Running jobs]]).  

=== Creating Jobs ===

To create a new Job, click the &quot;New Job&amp;hellip;&quot; link on the right-side:

[[Image:jc-create-job-link.png|New Job link]]

You will see the Create New Job form:

[[Image:jc-create-new-job-form.png|border|Create New Job form]]

First select the project that you are going to use.  (If there is only one project then it will be selected for you.)

Fundamentally, a Job defines a Workflow that contains one or more items. Press the &quot;Add an item&quot; link to add an item.

You will next choose the type of Workflow item. There are several types: Command, Script, Script file, Defined Command, Job Reference.

[[Image:jc-workflow-command-types.png|Workflow command items]]

Each workflow item type is described in the next few sections.

==== Command workflow item ====

Calls a shell command in a single line.

[[Image:jc-workflow-command-type.png|Command workflow item]]

This is similar to calling &lt;code&gt;ctl-exec -- &lt;command&gt;&lt;/code&gt;.

==== Script workflow item ====

Executes the supplied shell script content. Optionally, can pass an argument to the script specified in the lower text field. 

[[Image:jc-workflow-script-type.png|Script workflow item]]

This is similar to calling &lt;code&gt;ctl-exec --stdin -- args &lt;&lt;EOF
	script code here
EOF&lt;/code&gt;.

==== Create a Script file workflow item ====

Executes the script file local to the sever to the filtered Node set. Arguments can be passed to the script by specifying them in the lower text field.

[[Image:jc-workflow-scriptfile-type.png|Script file workflow item]]

This is similar to calling &lt;code&gt;ctl-exec -s scriptfile&lt;/code&gt;.

==== Defined Command workflow item ====

Calls a command defined in a [[Module]].

You can now specify the Context for the Defined Command.  This is the same as setting the flags &lt;code&gt;-m &amp;lt;module&amp;gt; [-t type -r &amp;lt;resource&amp;gt;] -c &amp;lt;command&amp;gt;&lt;/code&gt; for the commandline tool &lt;code&gt;ctl&lt;/code&gt;.  (Note that you do not need to select an Resource if you want to execute a Static command.)

Select the Module or Resource for the context:

[[Image:jc-select-object.png|Select a Resource]]

[[Image:jc-select-module.png|Select a Module]]

Once you have selected the context, the Commands list will be populated with the Commands available for that context.

Select the command you wish to run:

[[Image:jc-select-command.png|Select a Command]]

Then any commandline options that are available for the command will populate the Options section.  If any are available you may fill them in:

[[Image:jc-select-options.png|Select options]]

Each field in the options list can have several indicators next to it.  The '''purple diamond''' indicates that an Attribute supplies a default value. (See: [[Attributes]]).  '''Gray text''' indicates that the option has a default value.  A '''Red warning sign''' indicates that the option is ''required'' (must have a value to execute successfully). 

:''Note'': You can set any option when [[Running job]], so even though the option may be required to execute, you don not necessarily need to set it in the Job definition.

Some options with indicators:

[[Image:jc-options-indicators.png|Some options with indicators]]

==== Job Reference workflow item ====

To call another saved Job, create a Job Reference item. Enter the name of the Job and its group. You might also navigate and select a Job from the &quot;Choose A Job...&quot; link. Finally, if the Job defines Options, you can specify them in the commandline arguments text field.

[[Image:jc-workflow-jobref-type.png|Job reference workflow item]]

====Reordering the Workflow sequence====

The order of the Workflow items can be modified by hovering over any item and then clicking and dragging the double arrow icon [[Image:icon-tiny-drag.png]] to the desired position. 

[[Image:jc-sequence-reorder.png|Reorder the workflow sequence]]

==== Dispatching to Nodes ====

By default, jobs execute on the CTL Center server. To dispatch the commands to client Nodes check the &quot;Dispatch to Nodes&quot; option. 

[[Image:jc-defined-command-dispatch-option.png|Dispatch option for Defined Command Job]]

This reveals a &quot;Filtering Options&quot; control where include and exclude filters can be configured.

[[Image:jc-node-filtering-options.png|Node Filtering Options]]

These options correspond to the &lt;code&gt;-I/--nodes -X/--xnodes -Z,--filter-exclude-precedence&lt;/code&gt; commandline options for both the &lt;code&gt;ctl&lt;/code&gt; and &lt;code&gt;ctl-exec&lt;/code&gt; commandline tools.

You can choose to either use the Inclusion filters, or the Exclusion filters. (See detail in the [[Use node filtering options]] section.)

To choose a filter and set its value, click one of the Filter names:

[[Image:jc-node-filter-hostname.png|Hostname node filter selected]]

Set the value or regular expression for the filter.  You can remove the filter by clicking the red &quot;x&quot; next to the filter field.

You can use both Include and Exclude filters to customize the Node dispatch.  

Optionally, set the precedence of the filters (exclude or include) with the &quot;Exclude Filters have precedence?&quot; option.  If you choose &quot;No&quot; then the Include filters will have [[Use node filtering options#Precedence|precedence]].

The &quot;Matched nodes&quot; area will display Nodes that match the filtering criteria.
[[Image:jc-node-filter-matched.png|Hostname node filter matched]]

If no match is found then the &quot;Matched nodes&quot; area will say &quot;None&quot;.

[[Image:jc-node-filter-nonematched.png|Hostname node filter none matched]]


The &quot;Dispatch Options&quot; section lets you specify how many parallel threads should be used in the dispatch, and whether the entire Job should fail if one of the dispatched executions fails.  

Enter the number of parallel threads (default: 1), and select either &quot;Yes&quot; or &quot;No&quot; for the &quot;Keep going on error?&quot; option:

[[Image:jc-dispatch-options.png|Dispatch Options for a job]]

==== Choose the Logging level====

Select a value from the &quot;Log level&quot; pop-up menu to set the logging level.

By default the value is &quot;4. Warning&quot;.  This will have moderate logging output.  If you need to see more output during execution, you can select a lower level.  If you want to see less output, you can select &quot;5. Error&quot; which is the highest level.

[[Image:jc-logging-level.png|Log level popup]]

==== Choosing the storage type ====

When creating the job you will see these options:

[[Image:jc-save-job-no.png|Saving the Job]]

'''Run and forget'''

If you want to create a ''Temporary'' Job that is executed immediately, choose &quot;No&quot;.  After defining a Workflow, click the &quot;Run And forget&quot; button to run the job immediately.

[[Image:jc-temporary-job-run-now.png|Run And Forget a Temporary Job]]

'''Saved'''

If you want to create a ''Stored'' Job,  select &quot;Yes&quot; for &quot;Save this job?&quot;.

[[Image:jc-store-job-details.png|Stored job details]]

* Job Name: Enter a Name for the Job.
* Group: Enter a /-separated path for the Group.  You can also click the &quot;Choose Group&amp;hellip;&quot; option to select an existing group name.
* Job Description: Enter a Description to describe what the Job is used for.
* Additional Information: Enter any Additional Information.  This might include instructions for Operators or users about the use or purpose of the Job.  

Once the job information the Workflow have been set, click the &quot;Create&quot; button to create the Job.  You will see the Job definition:

[[Image:jc-created-job.png|The created job]]

If the Job was placed in a group, navigate through the triangular disclosure icons to reveal the detail and control bar.

'''Scheduled'''

If you want to create a ''Scheduled'' Job, select Yes under &quot;Schedule to run repeatedly?&quot;

[[Image:jc-scheduled-job-options.png|Scheduling options]]

The schedule can be defined in a simple graphical chooser or Unix crontab format.

To use the simple chooser, choose an hour and minute.  You can then choose &quot;Every Day&quot; (default), or uncheck that option and select individual days of the week.  You can select &quot;Every Month&quot; (default) or unselect that option and choose specific months of the year:

[[Image:jc-scheduled-job-simple.png|Scheduling simple]]

If the crontab time and date format is preferred, enter a cron expression.

[[Image:jc-scheduled-job-crontab.png|Scheduling crontab]]

The exact crontab syntax used is referenced here: [http://www.quartz-scheduler.org/docs/api/1.8.1/org/quartz/CronExpression.html CronExpression]

=== Job Options ===

Jobs that require user input before running, can declare named options. Once chosen from the run job page, the selected option values can be referenced from the commands in the Workflow.

To create options, click the &quot;add options&quot; link.

[[Image:jc-options-add-link.png|Options add]]

To edit existing options press the &quot;edit&quot; link:

[[Image:jc-options-edit-link.png|Edit link]]

====Option definition====

[[Image:jc-options-edit-form.png|Options form]]

The option edit form includes a number of parameters described below:

* Option Name: the option name
* Description: description of the option (optional)
* Default Value: the default option value (optional)
Allowed Values (optional)
* List: comma separated list of values
* Remote URL: URL to a list of JSON values. See [[#Remote option values]]
Restrictions
* None: Any value can be used
* Enforced from Allowed Values: Must choose from a value defined by &quot;Allowed Values&quot;
* Match Regular Expression: Value must match the specified regular expression
Requirement
* No: Specifying the option is not required
* Yes: Specifying the option is required

====Edit options====

The Job edit page contains a link to edit each of the options. It provides a brief summary of how each option is defined.

[[Image:jc-options-edit-summary.png|Options edit form]]

Move the mouse over the row for the option to delete or modify it. Click the edit link to open the option editor.

====Remote option values====

If the &quot;valuesUrl&quot; is specified for an Option, then the list of allowed values is retrieved from this URL. File URL schemes are acceptable (e.g, file:///path/to/job/options/optA.json).

The format of the response is expected to be [http://www.json.org/ JSON data].

Two styles of return data are supported:

''value list'': A list of values.  

Example JSON:
&lt;syntaxhighlight lang=&quot;javascript&quot;&gt;
 [&quot;x value for test&quot;,&quot;y value for test&quot;]
&lt;/syntaxhighlight&gt;

This will populate the select menu with the given values.

[[Image:remote-option-values1.png]]

''label/value map'': a map of values with label text.

Example JSON:
&lt;syntaxhighlight lang=&quot;javascript&quot;&gt; 
 {&quot;X Label&quot;:&quot;x value&quot;,&quot;Y Label&quot;:&quot;y value&quot;, &quot;A Label&quot;:&quot;a value&quot;}
&lt;/syntaxhighlight&gt;

This will show only the labels, but the corresponding value will be used in the option.

[[Image:remote-option-values2.png]]

===== Variable expansion in remote URLs =====

The URL used in the &quot;valuesUrl&quot; can embed variables which will be filled with certain context items when making the remote request.

Two types of expansions are available, Job context, and Option context.

To include job information in the URL, specify a variable of the form &lt;code&gt;${job.''property''}&lt;/code&gt;:

Properties available for Job context:
{| class=&quot;wikitable&quot;
 ! variable !! value 
 |-
 | name || Name of the Job
 |-
 | group || Group of the Job
 |-
 | description || Job description
|-
|type || Type name of a Defined Command job
|-
|resource|| Resource name of a Defined Command job
|-
|command|| Command name of a Defined Command job
|-
|project || Project name
|-
|argString|| Default argument string for a job
|-
|adhoc|| true/false.  False if it is a Defined Command Job, true if it is an adhoc script job.
|}
 
To include Option information in the URL, specify a variable of the form &lt;code&gt;${option.''property''}&lt;/code&gt;:

Properties available for Option context:
{| class=&quot;wikitable&quot;
 ! variable !! value 
 |-
 | name || Name of the current option
|}

Examples:

 valuesUrl=&quot;http://server.com/test?name=${option.name}&quot;

Passes the option name as the &quot;name&quot; query parameter to the URL.

 valuesUrl=&quot;http://server.com/test?jobname=${job.name}&amp;jobgroup=${job.group}&quot;

Passes the job name and group as query parameters.

===== Remote request failures =====

If the request for the remote option values fails, then the GUI form will display a warning message, and the option will be allowed to use a textfield to set the value.

[[Image:jc-option-remoteUrl-failed.png|Failed loading remote option values]]

=== Updating and Copying Jobs ===

All of the data you set when creating a job can be modified.  To edit a Job, you can either click the Pencil icon in the Job list:

[[Image:jc-job-list-edit-icon.png|Edit job]]

Similarly, to Copy a Job definition to a new Job, choose the Copy icon or the Copy button.

=== Searching for Jobs ===

The Job list view lets you search for Jobs using the Filter option.

Click the &quot;Filter&quot; link to show the filter options:

[[Image:jc-filter-link.png|Filter link]]

This will show the Filter fields:

[[Image:jc-filter-fields.png|Filter fields]]

Enter a value in any of the filter fields: 

* Job Name - the name of the job
* Group - the name of the job group
* Description - Job description text
* Additional Desc: Additional description text
* Loglevel: Output log level

The Job list will be filtered to include only the matching jobs:

[[Image:jc-filter-name-result.png|Filter result for job name]]

To refine the filter, click on the blue-outlined Filter description, and change the filter fields.

To reset the filter and go back to the full job list, either click the &quot;CTL Center&quot; link in the header bar, or click the &quot;Clear&quot; button in the Filter fields.

=== Deleting Jobs ===

In the Job list, click the red &quot;X&quot; icon for the Job you want to delete:

[[Image:jc-delete-tool-icon.png|Delete tool icon]]

Click &quot;Yes&quot; when it says &quot;Really delete this Job?&quot;

[[Image:jc-delete-prompt.png|Really Delete job prompt]]

=== Importing Jobs as XML ===

If you have a &quot;jobs.xml&quot; file (See [[#Using ProjectBuilder|below]]) and want to upload it via the GUI web interface, you can do so.

Click on the &quot;Create a new Job&quot; button in the Job list.

In the &quot;Create New Job&quot; form, click on the button that says &quot;Uplaod Job XML File...&quot; on the right side:

[[Image:jc-create-form-upload-button.png|Upload XML button in create form]]

You will see the &quot;Upload XML&quot; form:

[[Image:jc-upload-xml-form.png|Upload XML form]]

Click the Choose File button and choose your jobs.xml file to upload.

Choose an option where it says &quot;When a job with the same name already exists:&quot;:

* ''Update'' - this means that a job defined in the xml will overwrite any existing job with the same name
* ''Skip'' - this means that a job defined in the xml will be skipped over if there is an existing job with the same name
* ''Create'' - this means that the job defined in the xml will be used to create a new job if there is an existing job with the same name.

Click the Upload button.  If there are any errors with the Job definitions in the XML file, they will show up on the page.

:'''Note''': see the [[#Troubleshooting jobs.xml upload]] if you have problems upload the jobs.xml file.

== Using the CLI==

CTL Center has a service interface that can be used by the [[ctl-jobs]] command to perform many of the actions that can be performed by the GUI.

ctl-jobs has two actions that let you interact with CTL Center from the commandline:

* ''list'' - search for jobs matching a filter, and downlod the XML definitions of matching jobs.
* ''load'' - upload a jobs.xml file to define new jobs and update existing jobs.

:'''Note''': The XML format for the jobs is defined in the section: [[job-v20.xml]].

=== Creating Jobs ===

To define new Jobs, first create a new xml file to hold your job definitions.  Typically this is called &quot;jobs.xml&quot;.

It may be useful for you to have a templatized version of this file that you can use to generate your job definitions.

Here is an example jobs.xml:

&lt;pre&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;

&lt;joblist&gt;
  &lt;job&gt;
    &lt;name&gt;dev1-myserver - Deploy Job&lt;/name&gt;
    &lt;description&gt;Deploy the dev1 server&lt;/description&gt;
    &lt;additional/&gt;
    &lt;loglevel&gt;WARN&lt;/loglevel&gt;
    &lt;group&gt;DEV/Deployment&lt;/group&gt;
    &lt;context&gt;
      &lt;depot&gt;test2&lt;/depot&gt;
      &lt;type&gt;MyService&lt;/type&gt;
      &lt;object&gt;dev1-myserver&lt;/object&gt;
      &lt;command&gt;Deploy&lt;/command&gt;
    &lt;/context&gt;
    &lt;dispatch&gt;
      &lt;threadcount&gt;1&lt;/threadcount&gt;
      &lt;keepgoing&gt;false&lt;/keepgoing&gt;
    &lt;/dispatch&gt;
  &lt;/job&gt;
&lt;/joblist&gt;
&lt;/pre&gt;

This defines a job that runs the &quot;Deploy&quot; command for MyService resource.  The &amp;lt;context&amp;gt; section defines the contextual info for the Job.

Store your jobs.xml file, and use the &lt;code&gt;load-jobs&lt;/code&gt; command to upload it to the server:

&lt;pre&gt;
ctl-jobs load -file jobs.xml
&lt;/pre&gt;
This should produce output like this:
&lt;pre&gt;
Succeeded creating/updating 1 Jobs:
	1: dev1-myserver - Deploy Job [2] &lt;/ctlcenter/scheduledExecution/show/2&gt;
&lt;/pre&gt;

==== Troubleshooting jobs.xml upload ====

If there is an error with your jobs.xml definition, you will see a message in the output.

* &quot;Error performing request. Jobs XML Document was not valid: JobXMLException: ''XXX'' element not found&quot;
** This indicates that the element named ''XXX'' is required and was not found in your jobs.xml.  Refer to the documentation for the particular element: [[job-v20.xml]]
* &quot;Error performing request. Unable to parse file: org.xml.sax.SAXParseException: ...&quot;
** Your XML file was malformed.  Make sure your tags are closed correctly.

If your XML file parses correctly, but there is an error storing a particular Job, you will see a message like this:

&lt;pre&gt;
Failed to add 1 Jobs:
	1: dev1-myserver - Deploy Job [2] &lt;/ctlcenter/scheduledExecution/show/2&gt; : Project was not found: test2
Error retrieving command from the context: Framework resource not found: 'test2'. basedir: /Users/greg/ctier3/ctl/projects
&lt;/pre&gt;

Each Job that had an error will be listed, along with the error message(s) that cause it to not be stored.  

Some error messages you might see:
* &quot;Project was not found: ''PROJECT'', Error retrieving command from the context: Framework resource not found: ''PROJECT''. basedir: ''CTL_BASE''/projects&quot;
** There is no project named &quot;''PROJECT''&quot; in the CTL_BASE shown.  Make sure that the &lt;code&gt;&amp;lt;context&amp;gt;&amp;lt;depot&amp;gt;&lt;/code&gt; section has the correct project name, and that you have created the depot in your CTL_BASE with the ctl-project command.
* &quot;Error retrieving command from the context: module not found: ''Module''&quot;
** The &lt;code&gt;&amp;lt;type&amp;gt;&lt;/code&gt; context element indicates a Type that is not deployed in the CTL_BASE.  Make sure the Object/Module is deployed.
* &quot;Error retrieving command from the context: Framework resource not found: ''COMMAND''. basedir: /path/to/''Module''&quot;
** The command named was not found in the Module.  Make sure you are specifying the command name correctly.

=== About Job IDs ===

Each job definition on the Server has an internal unique ID number assigned to it.  If you are simply interacting with the GUI this number is not important to understand.  However, when using the ctl-jobs &lt;code&gt;load&lt;/code&gt; and &lt;code&gt;list&lt;/code&gt; commands it can be useful.

The output of the &lt;code&gt;load&lt;/code&gt; command shown earlier was:

&lt;pre&gt;
Succeeded creating/updating 1 Jobs:
	1: dev1-myserver - Deploy Job [2] &lt;/ctlcenter/scheduledExecution/show/2&gt;
&lt;/pre&gt;

The text &quot;[2]&quot; shows that the job that was created or modified has ID &quot;2&quot;.  The text &lt;code&gt;&amp;lt;/ctlcenter/scheduledExecution/show/2&amp;gt;&lt;/code&gt; shows the URL path to the job view page for ID 2.

You can use the ID number to identify jobs uniquely, which is useful especially when [[#Deleting Jobs 2|Deleting Jobs]].

=== Updating Jobs ===

By default, running the &lt;code&gt;load&lt;/code&gt; command uses the &lt;code&gt;--duplicate&lt;/code&gt; with a default of &quot;update&quot;.  This means that any job definitions in your XML file that have the same name as an existing job in the server will overwrite those existing jobs. 

This is typically what you want to do, as you might modify your jobs.xml file and the re-run the &lt;code&gt;load&lt;/code&gt; command to update the jobs on the server.

You can also specify these values for the &lt;code&gt;--duplicate&lt;/code&gt; option:

* &quot;update&quot; - update existing jobs with the new definitions
* &quot;create&quot; - create new jobs with the same name
* &quot;skip&quot; - skip existing jobs

(These correspond to the &quot;When a job with the same name already exists&quot; options in the [[#Importing Jobs as XML]] section.)

The value of &quot;skip&quot; would allow you to add new job definitions in jobs.xml to the server without modifying existing jobs.

=== Searching for Jobs ===

You can search for Jobs using the same set of filters as the GUI allows, with the &lt;code&gt;ctl-jobs list&lt;/code&gt; command.

&lt;pre&gt;
$ ctl-jobs list --name deploy
&lt;/pre&gt;

This specifies the &quot;Job Name&quot; filter with a value of &quot;deploy&quot;.

The output would look like:
&lt;pre&gt;
Found 1 Jobs:
 - info [7] &lt;http://strongbad:8080/ctlcenter/scheduledExecution/show/7&gt;
&lt;/pre&gt;

You can find all Jobs by simply not using a filter option:

&lt;pre&gt;
$ ctl-jobs list
Found 2 Jobs:
	- Update MyServer [11] &lt;http://strongbad:8080/ctlcenter/scheduledExecution/show/11&gt;
	- dev1-myserver - Deploy Job [12] &lt;http://strongbad:8080/ctlcenter/scheduledExecution/show/12&gt;
&lt;/pre&gt;

The commandline options for filtering correspond to the Filter options in the section [[#Searching for Jobs]]:

* &lt;code&gt;--name&lt;/code&gt; - Job name filter
* &lt;code&gt;--project&lt;/code&gt; - Project name filter

In addition, these options provide further filtering:

* &lt;code&gt;--group&lt;/code&gt; - Specify a group name filter
* &lt;code&gt;--idlist&lt;/code&gt; - find Jobs with the specified IDs.  A comma-separated list, e.g. &quot;1,2,3&quot;.

=== Exporting Jobs as XML ===

If you specify the &lt;code&gt;-f&lt;/code&gt; option for the &lt;code&gt;ctl-jobs list&lt;/code&gt; command, then the Jobs found by the filters will be stored in a file in XML format:

&lt;pre&gt;
$ ctl-jobs list --name deploy -f temp.xml
&lt;/pre&gt;

This specifies the &quot;Job Name&quot; filter with a value of &quot;deploy&quot;, and stores the jobs.xml definitions of the found jobs in a file called &quot;temp.xml&quot;.

The output would look like:
&lt;pre&gt;
Wrote XML file to: /Users/greg/ctier3/temp.xml
&lt;/pre&gt;

You can use the output XML file directly with &lt;code&gt;ctl-jobs load&lt;/code&gt; if desired.

=== Deleting Jobs ===

You can delete jobs from CTL Center by using the &lt;code&gt;-purge&lt;/code&gt; option of the ProjectBuilder &lt;code&gt;find-jobs&lt;/code&gt; command.

All jobs matching the specified set of filters will be deleted.

It is recommended that the &lt;code&gt;-out&lt;/code&gt; option be used in conjunction with this to minimize lost data. These two options can be combined to both store the Jobs XML of the matched jobs and delete them on the server.

When deleting jobs, it is also useful to use the &lt;code&gt;-idlist&lt;/code&gt; option to specifically delete a list of Jobs by ID.  This way you will not inadvertently delete any Jobs that someone else might have created in between your last find-jobs execution and your -purge execution.

&lt;pre&gt;
$ ctl -m ProjectBuilder -c find-jobs -- -idlist 1,2 -out deleted.xml -purge
Jobs xml content written to: /Users/greg/ctier3/deleted.xml
Delete succeeded
	Deleted 2 Jobs: [1,2]
	Job 'Update MyServer' was successfully deleted.
	Job 'dev1-myserver - Deploy Job' was successfully deleted.
&lt;/pre&gt;

You can later use the &quot;deleted.xml&quot; file to reload the jobs that you have deleted if desired.

{{Guide/navbox}}

[[Category:Jobs]]
[[Category:CTL Center]]</text>
    </revision>
  </page>
  <page>
    <title>Creating packages</title>
    <id>59</id>
    <revision>
      <id>15678</id>
      <timestamp>2011-11-15T11:21:43Z</timestamp>
      <contributor>
        <username>Rob.percival</username>
        <id>377</id>
      </contributor>
      <comment>rvv</comment>
      <text xml:space="preserve">&lt;noinclude&gt;&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Package&lt;/categorytree&gt;&lt;/noinclude&gt;
This document describes how to create and store packages in the ControlTier repository. 

ControlTier includes a set of package types, one of which can be used to manage the creation and installation life cycle for your build artifacts:

* [[bin]]: A self extracting shar package
* [[ear]]: An EAR package (J2EE)
* [[jar]]: An JAR package (J2SE)
* [[pkg]]: A SVR4 package (System V Release 4)
* [[rpm]]: An RPM package (Redhat)
* [[tgz]]: A GZip compressed TAR package
* [[war]]: A WAR package (J2EE)
* [[zip]]: A Zip package
* [[file]]: A single file package

Each of these types has steps to create, upload and install the packaged files of its archive format. You can override the behavior of any  step through subtyping. 
If you have an archive format or set of steps that is not covered by an existing type, then subtype the closest Package type and add or implement the needed steps.

The table below gives a brief description for each of the attributes of a package type. The ones with an asterisk are required during the deployment cycle.

{{Package/type/properties}}

The remainder of this page shows how to use one of the standard package types to create and upload artifacts to the repository. You can create packages of other types by following the same procedures.

==Upload an existing file as a package==

In this example you will see how to upload the zip distribution of Apache Tomcat 5.5 downloaded from here: http://archive.apache.org/dist/tomcat/tomcat-5/v5.5.26/bin/. 
Download the apache-tomcat-5.5.26.zip file to the directory, $CTIER_ROOT/pkgs.

Storing an existing file in the repository is done in two steps:

===Define the package metadata file===

Metadata is used to describe the archive file in the repository. This metadata is needed later during the deployment cycle. 

Create a metadata file describing the package using the attributes described earlier in the table above.  The &lt;code&gt;package&lt;/code&gt; XML tag has attributes for each of the ones described in the table. This file will be used during the upload process to register the package.

Use your favorite text editor and create an XML file like the one below and save it to the same directory where the archive exists (e.g., $CTIER_ROOT/pkgs).

File listing: apache-tomcat-5.5.26.zip.xml

&lt;pre&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE project PUBLIC &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; 
    &quot;project.dtd&quot;&gt;
&lt;project&gt;
  &lt;package 
      arch=&quot;noarch&quot;
      base=&quot;apache-tomcat-5.5.26&quot; 
      buildtime=&quot;2008061570109&quot; 
      description=&quot;The Tomcat application server.&quot; 
      filename=&quot;apache-tomcat-5.5.26.zip&quot; 
      filetype=&quot;zip&quot; 
      installroot=&quot;${env.CTIER_ROOT}/demo/apache-tomcat-5.5.26&quot;
      installrank=&quot;1&quot; 
      name=&quot;apache-tomcat-5.5.26.zip&quot; 
      release=&quot;&quot;
      releasetag=&quot;&quot;
      repoUrl=&quot;/zip/zips/apache-tomcat-5.5.26.zip&quot; 
      restart=&quot;false&quot;
      type=&quot;zip&quot;
      vendor=&quot;&quot;
      version=&quot;5.5.26&quot;      
     /&gt;
&lt;/project&gt;
&lt;/pre&gt;

The attributes in the XML shows the package is of type, &quot;zip&quot; and is named &quot;apache-tomcat-5.5.26.zip&quot; and will be installed to &quot;$CTIER_ROOT/demo/apache-tomcat-5.5.26&quot;. 
You can see other metadata describing version buildtime, repository URL among others.

===Upload the file to the repository===

The next step is to upload the file to the repository using the metadata defined in the xml file above.

Use the &lt;code&gt;upload&lt;/code&gt; command from the &quot;zip&quot; type to upload the zip file and the metadata XML file:
&lt;pre&gt;
	ctl -m zip -c upload -- \
            -xml $CTIER_ROOT/pkgs/apache-tomcat-5.5.26.zip.xml \
	    -filename $CTIER_ROOT/pkgs/apache-tomcat-5.5.26.zip 
&lt;/pre&gt;

Output from the upload should resemble the text below:
&lt;pre&gt;
Uploading to: http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/apache-tomcat-5.5.26.zip
Uploading: apache-tomcat-5.5.26.zip
Puted 1 file to http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/apache-tomcat-5.5.26.zip
Set registration params from xml file: /demo/object.xml
&lt;/pre&gt;

After the package has been registered you can query the repository and see it listed. 

Use the &lt;code&gt;find-resources&lt;/code&gt; command to list all &quot;zip&quot; packages:

&lt;pre&gt;
	$ ctl -p demo -m ProjectBuilder -c find-resources -- -type zip
	|
	|--(zip) apache-tomcat-5.5.26.zip
&lt;/pre&gt;

For a graphical alternative, you can use the PackageManager in Workbench and view the packages there. 

Go to Workbench → PackageManager → Package List. You will see it list all packages.

==Creating a package from a directory==

You might have a directory of files that you want to archive and then later extract during deployment. In this section you will see how to create an archive from a [[reference directory]] and then upload it to the repository.

===Prepare reference directory===

A ''reference directory'' is a directory that contains the files and directories as you want them on the target hosts relative to its installation root directory.

For this example, imagine we have a reference directory named &quot;foo-agent&quot; that contains an executable called foo.agent, and a configuration subdirectory. 

Follow the steps below to simulate the foo-agent reference directory:

* First create the installation root directory:
&lt;pre&gt;
cd $CTIER_ROOT/pkgs
mkdir -p foo-agent/conf
&lt;/pre&gt;

* Populate the directory with the foo agent files:
&lt;pre&gt;
touch foo-agent/foo.agent
touch foo-agent/conf/foo.conf
&lt;/pre&gt;

The reference directory now contains one subdirectory, &quot;conf&quot; and two files: foo.agent and foo.conf.
&lt;pre&gt;
$ ls -lR foo-agent
foo-agent:
total 12
drwxrwxr-x  2 alexh alexh 4096 Jan 17 19:35 conf
-rw-rw-r--  1 alexh alexh    0 Jan 17 19:35 foo.agent

foo-agent/conf:
total 4
-rw-rw-r--  1 alexh alexh 0 Jan 17 19:35 foo.conf
&lt;/pre&gt;

===Archive the files and upload the archive to the repository===

With the reference installation directory prepared you are ready to create the package. This is done via the &quot;create&quot; command.

The create command takes several options. 
* The -installroot option references your reference directory. 
* The -filename option specifies the package file that will be the archive of the installroot. 

Use the &lt;code&gt;create&lt;/code&gt; command with the following options to create the archive:
&lt;pre&gt;
ctl -m zip -c create -- -installroot $CTIER_ROOT/pkgs/foo-agent -filename foo-agent-1.zip -buildstamp 1
&lt;/pre&gt;
&lt;pre&gt;
Packaging files in directory: /home/alexh/ctier/pkgs/foo-agent ...
Building zip: /home/alexh/ctier/pkgs/foo-agent-1.zip
Copying 1 file to /home/alexh/ctier/pkgs
Generated package metadata file: /home/alexh/ctier/pkgs/foo-agent/../object.xml
Done.
&lt;/pre&gt;
      
As you can tell by reading through the message output, the files were packaged into an archive called &quot;foo-agent-1.zip&quot; .

Next create a metdata file to describe it:

File listing: foo-agent-1.zip.xml

&lt;pre&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE project PUBLIC &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; 
    &quot;project.dtd&quot;&gt;
&lt;project&gt;
  &lt;package 
      arch=&quot;noarch&quot;
      base=&quot;foo-agent&quot; 
      buildtime=&quot;20090117&quot; 
      description=&quot;The Foo Agent archive.&quot; 
      filename=&quot;foo-agent-1.zip&quot; 
      filetype=&quot;zip&quot; 
      installroot=&quot;${env.CTIER_ROOT}/pkgs/foo-agent&quot; 
      installrank=&quot;&quot; 
      name=&quot;foo-agent-1.zip&quot; 
      release=&quot;&quot;
      releasetag=&quot;&quot;
      repoUrl=&quot;/zip/zips/foo-agent-1.zip&quot; 
      restart=&quot;false&quot;
      type=&quot;zip&quot;
      vendor=&quot;&quot;
      version=&quot;1&quot;      
      /&gt;
&lt;/project&gt;	
&lt;/pre&gt;

Use the &lt;code&gt;upload&lt;/code&gt; command to upload and register the package to the repository:

&lt;pre&gt;
$ ctl -m zip -c upload --\
   -xml $CTIER_ROOT/pkgs/foo-agent-1.zip.xml \
   -filename $CTIER_ROOT/pkgs/foo-agent-1.zip
&lt;/pre&gt;
&lt;pre&gt;
Uploading to: http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/foo-agent-1.zip
Uploading: foo-agent-1.zip
Puted 1 file to http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/foo-agent-1.zip
Loading metadata from XML file: '/home/alexh/ctier/pkgs/foo-agent-1.zip.xml' ...
Loading &quot;/home/alexh/ctier/pkgs/foo-agent-1.zip.xml&quot; ...
1 file(s) have been successfully validated.
Processing /home/alexh/ctier/pkgs/foo-agent-1.zip.xml to /home/alexh/ctier/ctl/var/tmp/projectxml-34564367.xml
Loading stylesheet /home/alexh/ctier/ctl/projects/demo/modules/ProjectBuilder/lib/load-resources/projectxml/project.xsl
Mapping XML to properties ...
Collecting object attributes ...
Batching object attribute updates ...
Batching resource and referrer updates ...
Executing batch update ...
&lt;/pre&gt;

After the package has been registered you can query the repository and now see it listed:
&lt;pre&gt;
	$ ctl -p demo -m ProjectBuilder -c find-resources -- -type zip
	|
	|--(zip) apache-tomcat-5.5.26.zip
	|
	|--(zip) foo-agent-1.zip
&lt;/pre&gt;

===Uploading without an XML metadata file===
It's also possible to create and upload a package without creating an XML metadata file.
This makes creation and upload one operation. 

In this mode, you do not need to provide an XML file. The package will be registered based on the information provided by &lt;code&gt;create&lt;/code&gt;'s arguments.
&lt;pre&gt;
cd $CTIER_ROOT/pkgs
ctl -m zip -c create -- -installroot `pwd`/foo-agent -filename foo-agent-1.zip -upload 
Copying 1 file to /tmp 
Generated package metadata file: /home/alexh/ctier/pkgs/foo-agent/../object.xml 
Packaging files in directory: /home/alexh/ctier/pkgs/foo-agent ... 
Building zip: /home/alexh/ctier/pkgs/foo-agent-1.zip 
Uploading to: 
http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/foo-agent-1.zip 
Uploading: foo-agent-1.zip 
Puted 1 file to 
http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/foo-agent-1.zip 
Set registration params from xml file: /home/alexh/ctier/pkgs/foo-agent/../object.xml 
Done. 
&lt;/pre&gt;
      
As you can tell by reading through the output, the files were packaged up into a new archive called &quot;foo-agent-1.zip&quot; and uploaded to the repository. At the end the archive was registered as a package using metadata generated by the create command.

==Install Package==

Now that the archive file is created, uploaded and registered it is ready for deployment.

All packages' installation cycle is driven by the &lt;code&gt;Install&lt;/code&gt; command. This command is actually a workflow that has a number of steps including: checking installation status, download from repository, extraction and finish.

You can deploy the desired package via the Install command by specifying its package name and type. The &quot;-t&quot; and &quot;-o&quot; options specify the zip type and the name, &quot;foo-agent-1.zip&quot;:
&lt;pre&gt;
$ ctl -t zip -r foo-agent-1.zip -c Install 
&lt;/pre&gt;
&lt;pre&gt;
Start: &quot;Install object and run the package installation cycle.&quot; commands: assertPackageIsInstalled
begin workflow command (1/1) -&gt; &quot;assertPackageIsInstalled &quot; ...
Executing ant file: /home/alexh/ctier/ctl/projects/demo/modules/Package/bin/is-installed.xml
Running handler command: installPackage
begin workflow command (1/5) -&gt; &quot;installDependencies -filename foo-agent-1.zip -installroot /home/alexh/ctier/pkgs/foo-agent -url http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/foo-agent-1.zip&quot; ...
Dispatching command 'Install' to objects:  ...
end workflow command (1/5) -&gt; &quot;installDependencies -filename foo-agent-1.zip -installroot /home/alexh/ctier/pkgs/foo-agent -url http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/foo-agent-1.zip&quot;
begin workflow command (2/5) -&gt; &quot;prepare -filename foo-agent-1.zip -installroot /home/alexh/ctier/pkgs/foo-agent -url http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/foo-agent-1.zip&quot; ...
end workflow command (2/5) -&gt; &quot;prepare -filename foo-agent-1.zip -installroot /home/alexh/ctier/pkgs/foo-agent -url http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/foo-agent-1.zip&quot;
begin workflow command (3/5) -&gt; &quot;get -filename foo-agent-1.zip -installroot /home/alexh/ctier/pkgs/foo-agent -url http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/foo-agent-1.zip&quot; ...
Getting: http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/foo-agent-1.zip
To: /home/alexh/ctier/pkgs/foo-agent/foo-agent-1.zip
end workflow command (3/5) -&gt; &quot;get -filename foo-agent-1.zip -installroot /home/alexh/ctier/pkgs/foo-agent -url http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/foo-agent-1.zip&quot;
begin workflow command (4/5) -&gt; &quot;extract -filename foo-agent-1.zip -installroot /home/alexh/ctier/pkgs/foo-agent -url http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/foo-agent-1.zip&quot; ...
Expanding: /home/alexh/ctier/pkgs/foo-agent/foo-agent-1.zip into /home/alexh/ctier/pkgs/foo-agent
end workflow command (4/5) -&gt; &quot;extract -filename foo-agent-1.zip -installroot /home/alexh/ctier/pkgs/foo-agent -url http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/foo-agent-1.zip&quot;
begin workflow command (5/5) -&gt; &quot;finish -filename foo-agent-1.zip -installroot /home/alexh/ctier/pkgs/foo-agent -url http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/foo-agent-1.zip&quot; ...
Deleting: /home/alexh/ctier/pkgs/foo-agent/foo-agent-1.zip
end workflow command (5/5) -&gt; &quot;finish -filename foo-agent-1.zip -installroot /home/alexh/ctier/pkgs/foo-agent -url http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/foo-agent-1.zip&quot;
end workflow command (1/1) -&gt; &quot;assertPackageIsInstalled &quot;
[command.timer.demo.Package.Install: 3.620 sec]
Workflow completed. execution time: 3.620 sec
&lt;/pre&gt;

The output shows a message for each of the workflow steps. 
When the installation is complete the files will have been extracted to the registered &quot;installroot&quot;.

The Install command accepts the &quot;&lt;code&gt;-installroot&lt;/code&gt;&quot; parameter in case you want to change the installation root directory:
&lt;pre&gt;
$ ctl -t zip -r foo-agent-1.zip -c Install  -- -installroot /tmp/baba
.
.
.
end workflow command (1/1) -&gt; &quot;assertPackageIsInstalled -installroot /tmp/baba&quot;
Workflow completed. execution time: 3.539 sec
&lt;/pre&gt;

The directory listing below shows the archive content extracted to &quot;/tmp/baba&quot;:
&lt;pre&gt;
$ ls /tmp/baba
conf  foo.agent
&lt;/pre&gt;

==Related Topics==

You might have a build process that is generating artifacts you would like to add to the repository. Consult the 
[[Builder]] page for information on integrating with build tools.

You might want to deploy these packages to application services. Consult the 
[[Deploying Packages to a Service]] and [[Service Package Deployment Example]].

{{Guide/navbox}}
{{Manual/navbox}}
[[Category:Package Examples]]</text>
    </revision>
  </page>
  <page>
    <title>Creating your own Service type</title>
    <id>92</id>
    <revision>
      <id>15681</id>
      <timestamp>2011-11-15T11:24:05Z</timestamp>
      <contributor>
        <username>Rob.percival</username>
        <id>377</id>
      </contributor>
      <comment>rvv</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Service&lt;/categorytree&gt;
{{mergefrom|Service subtype control scripts}}
: ''See a [http://open.controltier.com/media/tutorial-Service-object-scripts.swf screencast]''
: ''See a [http://open.controltier.com/media/tutorial-Service-subtype.swf screencast]''

Some application deployments have long running processes that have a runtime state. Examples include web servers, application servers, databases, messaging services, as well as custom developed proprietary services. Each of these deployments has a set of procedures for start up and shutdown. Some also have procedures to check the state of the long running process. Yet others have procedures to query the service to obtain diagnostics or performance data.

Service, one of the standard modules of the ControlTier base library, provides a standard set of commands that model the lifecycle of a deployment that has long running processes. Service establishes an interface for managing start up, shutdown and status checking of long running processes.

'''Hook commands'''

The Service type declares four commands responsible for controlling the runtime state of a long running service. These commands are actually hooks, that can be configured to call one of your scripts.

Additionally, these hook commands are actually called by higher level command workflows that use the hook commands as primitive operations. The table below describes each hook command and notes the workflow command that uses it.

&lt;table border=&quot;1&quot;&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Workflow&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;assertServiceIsUp&lt;/td&gt;&lt;td&gt;Check if service is running. Exit 0 if running. Exit non-zero otherwise.&lt;/td&gt;&lt;td&gt;Start, Status&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;assertServiceIsDown&lt;/td&gt;&lt;td&gt;Check if service is not running. Exit 0 if down. Exit non-zero otherwise.&lt;/td&gt;&lt;td&gt;Stop&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;startService&lt;/td&gt;&lt;td&gt;Start the service. Exit 0 if successful. Exit non-zero otherwise.&lt;/td&gt;&lt;td&gt;Start&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stopService&lt;/td&gt;&lt;td&gt;Stop the service. Exit 0 if successful. Exit non-zero otherwise.&lt;/td&gt;&lt;td&gt;Stop&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

The one vital assumption the workflows make of your scripts is how they return exit codes. Your scripts should exit 0 when successful and non-zero (e.g., exit code 1) when not successful.

=Hooking in your scripts=

You can attach your scripts to a Service by registering them as a setting of your Service resource. The XML file below describes a Service named &quot;tomcat1&quot; and four scripts (hypothetically) residing in $HOME/bin.

Each script is registered as a setting that exports an attribute used by the Service commands to look up the location of your script.
&lt;pre&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE project PUBLIC &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; 
    &quot;project.dtd&quot;&gt;
&lt;project&gt;
  &lt;!--
      **
      ** Defines path to the Service control scripts metadata
      **
  --&gt;
  &lt;setting type=&quot;ServiceStartScript&quot; name=&quot;tomcat1&quot; 
           description=&quot;The script used by startService&quot; 
           settingValue=&quot;${env.HOME}/bin/tomcat-start.sh&quot; settingType=&quot;script&quot;/&gt;
  &lt;setting type=&quot;ServiceStopScript&quot; name=&quot;tomcat1&quot; 
           description=&quot;The script used by stopService&quot; 
           settingValue=&quot;${env.HOME}/bin/tomcat-stop.sh&quot; settingType=&quot;script&quot;/&gt;
  &lt;setting type=&quot;ServiceIsUpScript&quot; name=&quot;tomcat1&quot; 
           description=&quot;The script used by assertServicesIsUp&quot; 
           settingValue=&quot;${env.HOME}/bin/tomcat-isup.sh&quot; settingType=&quot;script&quot;/&gt;
  &lt;setting type=&quot;ServiceIsDownScript&quot; name=&quot;tomcat1&quot; 
           description=&quot;The script used by assertServicesIsDown&quot; 
           settingValue=&quot;${env.HOME}/bin/tomcat-isdown.sh&quot; settingType=&quot;script&quot;/&gt;
  &lt;!--
      **
      ** Defines the Service metadata
      **
  --&gt;
  &lt;deployment 
      type=&quot;Service&quot;
      name=&quot;tomcat1&quot; 
      description=&quot;The Tomcat deployment.&quot; 
      installRoot=&quot;/demo/apache-tomcat-5.5.26&quot; 
      basedir=&quot;/demo/apache-tomcat-5.5.26&quot;&gt;

      &lt;!-- 
        **
        ** References the scripts to be run by the Service lifecycle commands 
	      **
	    --&gt;
     &lt;resources&gt;
      &lt;resource name=&quot;tomcat1&quot; type=&quot;ServiceStopScript&quot; /&gt;
      &lt;resource name=&quot;tomcat1&quot; type=&quot;ServiceStartScript&quot; /&gt;
      &lt;resource name=&quot;tomcat1&quot; type=&quot;ServiceIsDownScript&quot; /&gt;
      &lt;resource name=&quot;tomcat1&quot; type=&quot;ServiceIsUpScript&quot; /&gt;
     &lt;/resources&gt;
  &lt;/deployment&gt;

&lt;/project&gt;
&lt;/pre&gt;

The bold text represents your procedure defined insinde a script. T The italicized text shows a convention that uses the Service's name (&quot;tomcat1&quot;) as a the setting object's name. This acts as a visual key to help show the association between them.


The graphic above describes the mapping of Service resource to the settings that represent the four scripts.

=Making your own service controllers=

The Service resource establishes a working set of commands that govern the runtime state of application deployments with long running processes. Service provides a ready means to hook your scripts into that life cycle control structure. There are times though where you may wish to create your own service controller.

For example, sometimes it is advantageous to package your scripts so control operations are self-sufficient (eg., not rely on external scripts being present, they may be missing or they may be the wrong version).

You might also prefer to implement your procedures directly inside CTL, or you might even want to invent your own life cycle control structure. In addition, you might want to establish a set of defaults that fit with the assumptions of your local environment.

CTL modules are the vehicle for packaging your scripts, defining defaults, and customizing the Service control lifecycle commands. Writing a module is a simple process facilitated by ProjectBuilder. Each procedure will be formalized as a command in a module. You can declare and assign defaults in the form of attributes of your new module type.

=Make a new Service control module=
== Create a new module==

Module creation is done via the &quot;ProjectBuilder&quot; module's create-type command. For this example, a module called &quot;TomcatController&quot; is created to control the runtime state of Tomcat. TomcatController will be a subtype of Service and inherit the default control commands.
&lt;pre&gt;
ctl -m ProjectBuilder -c create-type -- -supertype Service -type TomcatController
&lt;/pre&gt;
After running create-type, the initial source code for the new module is generated. In this example, the source is found at: $CTL_BASE/src/modules/TomcatController.

Modules have a standard directory structure with standard subdirectories where you can store files.
&lt;pre&gt;
module_name
  |
  |--- type.xml            // file containing module definition
  |
  +--- bin/                // location to store your control scripts.
  |
  +--- commands/           // contains generated command files
  |
  +--- lib/                // optional resource files used by your commands
&lt;/pre&gt;
      
By convention, the bin directory is where scripts called by service control commands can be located. In the lib subdirectory, ancillary files like templates, or data files can be stored.

==Establishing defaults==

Your management procedures often make assumptions about key settings. These settings might be executable paths, network ports, configuration file locations, or something peculiar to your procedure. It's a good idea to externalize this data in the form of named attributes. Doing so establishes a data model for your module and allows your procedures to be more flexible. Once externalized, your procedures refer to the attribute name rather than a hard coded value.

Defaults are defined using the attribute-default tags inside the type.xml file.

Edit the generated type.xml file and modify the attribute definitions (eg, edit $CTL_BASE/src/modules/TomcatController/type.xml). Locate the attributes tags and introduce your attribute defaults between them using the attribute-default tag:
&lt;pre&gt;
&lt;attributes&gt;
...
      &lt;attribute-default name=&quot;catalinaHome&quot; 
         value=&quot;/demo/tomcat&quot;&gt;
	&lt;doc&gt;Path to CATALINA_HOME&lt;/doc&gt;
      &lt;/attribute-default&gt;
      &lt;attribute-default name=&quot;catalinaBase&quot; 
         value=&quot;/demo/tomcat&quot;&gt;
	&lt;doc&gt;Path to CATALINA_BASE&lt;/doc&gt;
      &lt;/attribute-default&gt;
      &lt;attribute-default name=&quot;port&quot; 
         value=&quot;8080&quot;&gt;
	&lt;doc&gt;Tomcat server listening port&lt;/doc&gt;
      &lt;/attribute-default&gt;
&lt;/attributes&gt;
&lt;/pre&gt;

In this example several attribute-default definitions are declared: one for the catalinaHome and catalinaBase that declare the Tomcat installation directories. The third attribute default declares the server listening port. Each of these attributes will be used by the procedures declared in step#3.

==Declare your procedures==

As mentioned earlier, your procedures may already be in the form of scripts, while others might be an accepted manual set of steps.

The first exmple shows how to package existing scripts in a module. This makes the module self sufficent and avoids problems due dependencies on external scripts (eg, they are missing, out of date).

Imagine a set of existing scripts existed: status.sh, start.sh, isup.sh, isdown.sh. These would be copied to the bin/ subdirectory of the module source (e.g, $CTL_BASE/src/modules/TomcatController/bin). These scripts can then be referred to as ${module.dir}/bin/script-name. The ${module.dir}/bin path represents the module directory's bin/ path after the module has been installed.

You then define defaults for the module establishing the new script locations. This will simplify setup of the new module, later. The attribute-default definitions below map each script to their appropriate attribute:
&lt;pre&gt;
    &lt;attributes&gt;
      &lt;attribute-default name=&quot;service-start-script&quot; 
          value=&quot;${modules.dir}/TomcatController/bin/start.sh&quot;&gt;
        &lt;doc&gt;script to execute for startService command&lt;/doc&gt;
      &lt;/attribute-default&gt;
      &lt;attribute-default name=&quot;service-stop-script&quot; 
          value=&quot;${modules.dir}/TomcatController/bin/stop.sh&quot;&gt;
        &lt;doc&gt;script to execute for stopService command&lt;/doc&gt;
      &lt;/attribute-default&gt;
      &lt;attribute-default name=&quot;service-isup-script&quot; 
          value=&quot;${modules.dir}/TomcatController/bin/isup.sh&quot;&gt;
        &lt;doc&gt;script to execute for assertServiceIsUp command&lt;/doc&gt;
      &lt;/attribute-default&gt;
      &lt;attribute-default name=&quot;service-isdown-script&quot; 
          value=&quot;${modules.dir}/TomcatController/bin/isdown.sh&quot;&gt;
        &lt;doc&gt;script to execute for assertServiceIsDown command&lt;/doc&gt;
      &lt;/attribute-default&gt;

      ...
    &lt;/attributes&gt;
&lt;/pre&gt;

The bold text shows each of the scripts relative to their location in the module. No assumption is made about what these scripts are called.

So far two sets of attributes have been defined. One set defined a set of settings describing configuration aspects of the Tomcat server (step#2). The second set defined a set of default locations for the scripts after they were copied to the module. The next example shows how a command definition can make use of both.

=Passing arguments to your scripts=

Your procedures might need parameters of their own. The example below shows how to override the standard Service's implementation to define a new option that references one of the new attributes defined earlier as an argument value:
&lt;pre&gt;
     &lt;!--
	  **
	  ** assertServiceIsUp 
	  **
      --&gt;
      &lt;command name=&quot;assertServiceIsUp&quot; description=&quot;assertServiceIsUp command.&quot;
          command-type=&quot;Command&quot; is-static=&quot;true&quot;&gt;
	&lt;execution-string&gt;${module.dir}/bin/isup.sh&lt;/execution-string&gt;
        &lt;argument-string&gt;-port ${opts.port}&lt;/argument-string&gt;
        &lt;!--
	  **
	  ** define an option called -port and default it to the attribute: 
	  **
         --&gt;
        &lt;opts&gt;
          &lt;opt parameter=&quot;port&quot; description=&quot;tomcat listing port&quot; required=&quot;false&quot;
	       property=&quot;opts.port&quot; type=&quot;string&quot; defaultproperty=&quot;resource.attribute.port&quot;/&gt;
        &lt;/opts&gt;
      &lt;/command&gt;
&lt;/pre&gt;

You can see the resource.attribute.port property is used as the default for the -port option.

Setting environment variables with command options

The next set of examples show how to overide Service command definitions to allow the setting of environment variables. These environment variables are set with values passed in by the command. Additionally, the option is defaulted to an attribute value.
&lt;pre&gt;
    &lt;commands&gt;
      &lt;!--
	  **
	  ** stopService 
	  **
      --&gt;
      &lt;command name=&quot;stopService&quot; description=&quot;Stop command.&quot; 
          command-type=&quot;Command&quot; is-static=&quot;true&quot;&gt;
	&lt;execution-string&gt;bash&lt;/execution-string&gt;
        &lt;argument-string&gt;&lt;![CDATA[
	export CATALINA_HOME=${opts.basedir};
	export CATALINA_BASE=${opts.basedir};
	${module.dir}/bin/stop.sh
	]]&gt;
	&lt;/argument-string&gt;
        &lt;opts&gt;
          &lt;opt parameter=&quot;basedir&quot; description=&quot;catalina home&quot; required=&quot;false&quot;
	  property=&quot;opts.basedir&quot; type=&quot;string&quot; defaultproperty=&quot;resource.attribute.catalinaHome&quot;/&gt;
        &lt;/opts&gt;
      &lt;/command&gt;

     &lt;!--
	  **
	  ** startService 
	  **
      --&gt;
      &lt;command name=&quot;startService&quot; description=&quot;Start command.&quot; command-type=&quot;Command&quot;
         is-static=&quot;true&quot;&gt;
	&lt;execution-string&gt;bash&lt;/execution-string&gt;
        &lt;argument-string&gt;&lt;![CDATA[
	export CATALINA_HOME=${opts.basedir};
	export CATALINA_BASE=${opts.basedir};
	${module.dir}/bin/start.sh
	]]&gt;
	&lt;/argument-string&gt;
        &lt;opts&gt;
          &lt;opt parameter=&quot;basedir&quot; description=&quot;catalina home&quot; required=&quot;false&quot;
	  property=&quot;opts.basedir&quot; type=&quot;string&quot; defaultproperty=&quot;resource.attribute.catalinaHome&quot;/&gt;
        &lt;/opts&gt;
      &lt;/command&gt;
&lt;/pre&gt;
      
The example above, defined two procedures as commands named &quot;stopService&quot; and &quot;startService&quot;. Each of these commands calls a script located inside the module. The -basedir option has been added and its initial value is set to the attribute default, catalinaHome. Two environment variables, CATALINA_BASE and CATALINA_HOME, are also set to the value of the catalinaHome attribute.

The examples in this section were confined to passing arguments and setting environment variables. Of course, you could have radically changed these command definitions. CTL allows you to define commands in many different ways using different implementation languages. The important thing is to preserve the semantics of the commands you override, since higher level workflows rely on them.

==Build the the module==

The last step before you can use your module is to build and upload it to the repository. Use the build-type command in ProjectBuilder and specify your module name and the -upload flag.
&lt;pre&gt;
ctl -m ProjectBuilder -c build-type -- -type TomcatController -upload
&lt;/pre&gt;

The new module is ready for use.

==Define an instance==
Preparations for use
To begin using the TomcatController type, an instance of it must be defined. TomcatController objects can then be mapped to the Nodes on which they will be deployed.

Because attributes were used to default command options to reasonable defaults, the definition of a new service object is very simple in XML using a deployment tag:
&lt;pre&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
    &lt;!DOCTYPE project PUBLIC &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; 
        &quot;project.dtd&quot;&gt;
    &lt;project&gt;

  &lt;!--
      **
      ** Defines a TomcatController resource named &quot;tomcat1&quot;
      **
  --&gt;
  &lt;deployment 
      type=&quot;TomcatController&quot;
      name=&quot;tomcat1&quot; 
      description=&quot;The Tomcat deployment.&quot; 
      installRoot=&quot;/demo/apache-tomcat-5.5.26&quot; 
      basedir=&quot;/demo/apache-tomcat-5.5.26&quot; &gt;

     &lt;!--
      **
      ** References the localhost node where the Tomcat server will run
      **
      --&gt;
    &lt;referrers replace=&quot;false&quot;&gt;
      &lt;resource type=&quot;Node&quot; name=&quot;localhost&quot;/&gt;
    &lt;/referrers&gt;
  &lt;/deployment&gt;

&lt;/project&gt;
&lt;/pre&gt;

Notice because attributes were used to default the location of the scripts (now also inside the module) no additional settings were required to define their locations.

In this case, the script locations won't change but it is possible that some of the Tomcat configuration settings might change. Maybe Tomcat server port is different in QA.

This example also shows the &quot;tomcat1&quot; server will run on the Node &quot;localhost&quot;.

The XML example below shows the definition of a TomcatController named &quot;qaTomcatServer&quot; that has its own port setting.

&lt;pre&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
    &lt;!DOCTYPE project PUBLIC &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; 
        &quot;project.dtd&quot;&gt;
    &lt;project&gt;
  &lt;!--
      **
      ** Defines a setting different server port value for QA
      **
  --&gt;
  &lt;setting type=&quot;Port&quot; name=&quot;qaTomcatServer&quot; 
           description=&quot;The port used by the QA tomcat server&quot; 
           settingValue=&quot;18080&quot; settingType=&quot;http&quot;/&gt;
  &lt;!--
      **
      ** Defines a deployment resource for TomcatController named &quot;qaTomcatServer&quot;
      **
  --&gt;
  &lt;deployment 
      type=&quot;TomcatController&quot;
      name=&quot;qaTomcatServer&quot; 
      description=&quot;The Tomcat deployment.&quot; 
      installRoot=&quot;/demo/apache-tomcat-5.5.26&quot; 
      basedir=&quot;/demo/apache-tomcat-5.5.26&quot; &gt;

      &lt;!-- 
        **
        ** References the QA port setting.
	      **
	      --&gt;
     &lt;resources&gt;
      &lt;resource name=&quot;qaTomcatServer&quot; type=&quot;Port&quot; /&gt;
     &lt;/resources&gt;

     &lt;!--
      **
      ** References the QA node where the Tomcat server will run
      **
      --&gt;
    &lt;referrers replace=&quot;false&quot;&gt;
      &lt;resource type=&quot;Node&quot; name=&quot;qa-app1&quot;/&gt;
    &lt;/referrers&gt;
  &lt;/deployment&gt;
&lt;/project&gt;
&lt;/pre&gt;
	
Following a convention described earlier the TomcatController resource name is used to key to the Port setting for visual aid. This example also shows the Tomcat server will run on the Node &quot;qa-app1&quot;.

These resource definitions can be loaded via ProjectBuilder using the load-resources command:
&lt;pre&gt;
ctl -p project -m ProjectBuilder -c load-resources -- -filename /path/to/metadata.xml
&lt;/pre&gt;

With the resources registered to the repository, the last step is to prepare CTL via ctl-project.
&lt;pre&gt;
ctl-exec -- ctl-project -a install
&lt;/pre&gt;

=Execute the service control commands=
==CLI execution==

To run a command from your utility you'll use the following form:
&lt;pre&gt;
ctl -p project -t TomcatController -r resource -c command
&lt;/pre&gt;
To run the &quot;assertServiceIsUp&quot; command for the &quot;tomcat1&quot; Tomcat server on the local host run:
&lt;pre&gt;
ctl -p default -t TomcatController -r tomcat1 -c assertServiceIsUp
&lt;/pre&gt;

...or to run the &quot;assertServiceIsUp&quot; command on nodes tagged &quot;tomcats&quot; in the project named &quot;default&quot; run:

&lt;pre&gt;
ctl -I tags=tomcats -p default -t TomcatController -r tomcat1 -c assertServiceIsUp
&lt;/pre&gt;

You might recall that assertServiceIsUp command is actually used by higher level workflow commands. You can call assertServiceIsUp via the Status command like so:

&lt;pre&gt;
ctl -p default -t TomcatController -r tomcat1 -c Status
&lt;/pre&gt;

==GUI execution==

You can execute the command shown above using JobCenter GUI. Go to the JobCenter webapp. Click the &quot;Create a new job&quot; button. Choose your project and then press the &quot;Execute a Defined Command&quot; radio button. Scroll down the list box and locate the &quot;TomcatController&quot; type. This will load the resources list box. Scroll down and click the desired object (eg &quot;tomcat1&quot;).

Choose the desired command (eg &quot;assertServiceIsUp&quot;)

Configure the node dispatch option (perhaps speciying tags=tomcats) and then press &quot;Run&quot;. Of course, you can save this job to run at a later time, if desired.

{{Manual/navbox}}

[[Category:Service]]</text>
    </revision>
  </page>
  <page>
    <title>Ctl</title>
    <id>844</id>
    <redirect />
    <revision>
      <id>10506</id>
      <timestamp>2009-12-12T01:02:33Z</timestamp>
      <contributor>
        <username>Gschueler</username>
        <id>8</id>
      </contributor>
      <comment>Redirected page to [[CTL Command Reference]]</comment>
      <text xml:space="preserve">#REDIRECT [[CTL Command Reference]]</text>
    </revision>
  </page>
  <page>
    <title>Ctl-depot</title>
    <id>293</id>
    <redirect />
    <revision>
      <id>9722</id>
      <timestamp>2009-12-10T21:14:09Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[CTL-DEPOT Command Reference]]</comment>
      <text xml:space="preserve">#REDIRECT [[CTL-DEPOT Command Reference]]</text>
    </revision>
  </page>
  <page>
    <title>Ctl-exec</title>
    <id>864</id>
    <redirect />
    <revision>
      <id>10485</id>
      <timestamp>2009-12-12T00:32:43Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[CTL-EXEC Command Reference]]</comment>
      <text xml:space="preserve">#REDIRECT [[CTL-EXEC Command Reference]]</text>
    </revision>
  </page>
  <page>
    <title>Ctl-extension</title>
    <id>1839</id>
    <redirect />
    <revision>
      <id>12178</id>
      <timestamp>2009-12-21T16:56:55Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[CTL-EXTENSION Command Reference]]</comment>
      <text xml:space="preserve">#REDIRECT [[CTL-EXTENSION Command Reference]]</text>
    </revision>
  </page>
  <page>
    <title>Ctl-jobs</title>
    <id>1919</id>
    <redirect />
    <revision>
      <id>12866</id>
      <timestamp>2010-06-17T23:24:46Z</timestamp>
      <contributor>
        <username>Gschueler</username>
        <id>8</id>
      </contributor>
      <comment>Redirected page to [[CTL-JOBS Command Reference]]</comment>
      <text xml:space="preserve">#REDIRECT [[CTL-JOBS Command Reference]]</text>
    </revision>
  </page>
  <page>
    <title>Ctl-project</title>
    <id>1914</id>
    <redirect />
    <revision>
      <id>14014</id>
      <timestamp>2010-11-10T15:30:43Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;CTL-PROJECT&quot; to &quot;CTL-DEPOT&quot;</comment>
      <text xml:space="preserve">#REDIRECT [[CTL-DEPOT Command Reference]]</text>
    </revision>
  </page>
  <page>
    <title>Ctl-queue</title>
    <id>1915</id>
    <redirect />
    <revision>
      <id>12859</id>
      <timestamp>2010-06-17T18:11:01Z</timestamp>
      <contributor>
        <username>Gschueler</username>
        <id>8</id>
      </contributor>
      <comment>Redirected page to [[CTL-QUEUE Command Reference]]</comment>
      <text xml:space="preserve">#REDIRECT [[CTL-QUEUE Command Reference]]</text>
    </revision>
  </page>
  <page>
    <title>Ctl-run</title>
    <id>1917</id>
    <redirect />
    <revision>
      <id>12863</id>
      <timestamp>2010-06-17T19:05:01Z</timestamp>
      <contributor>
        <username>Gschueler</username>
        <id>8</id>
      </contributor>
      <comment>Redirected page to [[CTL-RUN Command Reference]]</comment>
      <text xml:space="preserve">#REDIRECT [[CTL-RUN Command Reference]]</text>
    </revision>
  </page>
  <page>
    <title>Ctl-run cannot honor default value set in UI</title>
    <id>2134</id>
    <revision>
      <id>15099</id>
      <timestamp>2010-12-30T07:18:51Z</timestamp>
      <contributor>
        <username>Chengkai</username>
        <id>108</id>
      </contributor>
      <comment>Why CTL-RUN Cannot Honor Default Value Set in the UI</comment>
      <text xml:space="preserve">Let say if we create a job in CTL Center, named &quot;Deploy ABC&quot; with option deployHost set to xyz as it default value.  If this is running from the UI, if one does not enter any other host name, the &quot;xyz&quot; will be use. But running the job from command line by ctl-run 'Deploy ABC' without providing a value to -deployHost will fail with no value provide to -deployHost.

Why can ctl-run honor the default value set in the UI?  Any remedy for it?</text>
    </revision>
  </page>
  <page>
    <title>Ctl-setup</title>
    <id>1597</id>
    <redirect />
    <revision>
      <id>10468</id>
      <timestamp>2009-12-11T23:08:39Z</timestamp>
      <contributor>
        <username>Gschueler</username>
        <id>8</id>
      </contributor>
      <comment>Redirected page to [[CTL-SETUP Command Reference]]</comment>
      <text xml:space="preserve">#REDIRECT [[CTL-SETUP Command Reference]]</text>
    </revision>
  </page>
  <page>
    <title>CtlSSHExec Task Reference</title>
    <id>1907</id>
    <revision>
      <id>12845</id>
      <timestamp>2010-06-16T19:40:15Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Created page with '&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Command Dispatcher Ant Tasks&lt;/categorytr…'</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Command Dispatcher Ant Tasks&lt;/categorytree&gt;

Runs a command on a remote machine running SSH daemon.  It is an extension of the [http://ant.apache.org/manual/Tasks/sshexec.html sshexec] task, and as such, supports the same attributes. See the [http://ant.apache.org/manual ANT documentation] for a description of the &lt;sshexec&gt; task parameters.

{{version|3.5.2}}

==Parameters==

===Attributes===

These attributes are unique to ctlsshexec:

&lt;table border=&quot;1&quot;&gt;
&lt;tr&gt;&lt;th&gt;attribute&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;th&gt;required&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;allocatePty&lt;/td&gt;&lt;td&gt;allocate a pseudo terminal&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;


&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Command Dispatcher Ant Tasks]]</text>
    </revision>
  </page>
  <page>
    <title>Ctlcenter</title>
    <id>2022</id>
    <redirect />
    <revision>
      <id>14629</id>
      <timestamp>2010-11-17T22:59:26Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>moved [[Ctlcenter]] to [[CTL Center]] over redirect</comment>
      <text xml:space="preserve">#REDIRECT [[CTL Center]]</text>
    </revision>
  </page>
  <page>
    <title>Ctlcenter config</title>
    <id>1946</id>
    <revision>
      <id>16396</id>
      <timestamp>2012-02-20T13:05:57Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Undo revision 15559 by [[Special:Contributions/Parrishcartwright|Parrishcartwright]] ([[User talk:Parrishcartwright|talk]]) Reverted SPAM bot edits</comment>
      <text xml:space="preserve">The configuration file for [[Ctlcenter]] is &lt;code&gt;$CTIER_ROOT/ctlcenter/ctlcenter-config.properties&lt;/code&gt;.

== Summary ==

This file is typically configured correctly for you out of the box on a vanilla install of ControlTier.  It is also rewritten when [[server-setup.sh]] is executed.

''TODO: more detail about config properties''

== Role mapping ==

(Feature available as of version {{version|3.5.4}}) 

Role mapping is a way of adapting the User Roles provided by your authentication system to the Application Roles used by the [[Ctlcenter]] web app.  This lets you work with whatever authentication provider based roles you have.

; Application Roles : Role names used by the CTL Center application for testing whether the user is allowed to perform certain actions

; User Roles : Role names used by an authencation system

These properties provide a mapping of allowed ''Application Roles'' to a set of specified ''User Roles''.  The defaults shown here match the set of default User Roles installed in the &quot;file based login&quot; mechanism when you install ControlTier.

If you use your own directory-based authentication (LDAP or AD) you may need to modify the roles you use, especially if you are unable to change the roles/groups that User profiles are assigned to in your directory.

These are the Application Roles that the role mapping can override:

{| class=&quot;wikitable&quot;
! Application Role name !! description !! default User Role mapping
|-
| admin || Super user - all application actions are allowed || admin
|-
| user_admin || modify user profiles || admin
|-
| workflow_read || Read/view Jobs || user
|-
| workflow_create || Create new Jobs || architect
|-
| workflow_update || Edit existing Jobs || architect
|-
| workflow_delete || Delete Jobs || architect
|-
| workflow_kill || Kill running jobs || deploy,build
|-
| workflow_run || Execute a Job || deploy,build
|-
| events_read || Read/view Event logs || user
|-
| events_create || Create new Events || user
|-
| events_update || Modify Events (unused) || architect
|-
| events_delete || Delete Events (unused) || architect
|-
| resources_read || Read/View Resources || user
|-
| resources_create || Create Resources (unused) || deploy,build
|-
| resources_update || Update Resources (unused) || deploy,build
|-
| resources_delete || Delete Resources (unused) || deploy,build
|-
| job_view_unauthorized || special role for viewing jobs that the user is unauthorized to run || ct_job_view_unauthorized
|}

:'''Note''': Setting the mapping value to a comma-separated list of Role names grants that Application Role to a user in ''any'' of the mapped roles.

If no role mapping is defined for an Application Role, then the literal name of the Application Role will be tested as the role name.  E.g. If &quot;mappedRoles.admin&quot; is not defined, then a role named &quot;admin&quot; will be used.

The default set of roles and mappings are listed here:

&lt;pre&gt;
#
#Map ctlcenter actions to allowed roles
# mappedRoles.X=A,B,C
# means allow X to users in role A, B or C
#
mappedRoles.admin=admin
mappedRoles.user_admin=admin
mappedRoles.workflow_read=user
mappedRoles.workflow_create=architect
mappedRoles.workflow_update=architect
mappedRoles.workflow_delete=architect
mappedRoles.workflow_kill=deploy,build
mappedRoles.workflow_run=deploy,build
mappedRoles.events_read=user
mappedRoles.events_create=user
mappedRoles.events_update=architect
mappedRoles.events_delete=architect
mappedRoles.resources_read=user
mappedRoles.resources_create=deploy,build
mappedRoles.resources_update=deploy,build
mappedRoles.resources_delete=deploy,build
#special role for viewing jobs unauthorized to run
mappedRoles.job_view_unauthorized=ct_job_view_unauthorized
&lt;/pre&gt;

You can replace all of the ''User Roles'' shown in this file with your own custom role names from your directory service.

== GUI options ==

You can modify some display features of the CTL Center GUI by setting these properties:

{| class=&quot;wikitable&quot;
! Property !! Description !! example
|-
|ctlcenter.gui.title|| Title shown in app header || Test App
|-
|ctlcenter.gui.logo|| Logo icon path relative to the &lt;code&gt;$JETTY/webapps/ctlcenter/images&lt;/code&gt; dir ||test/test-logo.png
|-
|ctlcenter.gui.logo-width|| Icon width for proper display (32px is best) || 32px
|-
|ctlcenter.gui.logo-height|| Icon height for proper display (32px is best) || 32px
|-
|ctlcenter.gui.appsmenu|| Show the &quot;Apps..&quot; menu with a link to Workbench (true/false) || true
|-
|ctlcenter.gui.titleLink||URL for the link used by the app header icon. Defaults to the ControlTier server frontpage URL. || http://google.com
|-
|}

[[Category:Configuration]]
{{Installation/navbox}}</text>
    </revision>
  </page>
  <page>
    <title>Custom service scripts</title>
    <id>294</id>
    <revision>
      <id>10243</id>
      <timestamp>2009-12-11T18:43:01Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">
You may have an existing set of scripts to manage the startup and shutdown of a long running application service.
You can attach these scripts to the service cycle commands found in the Service type. 

The following pages show how to configure a Service to specify your startup and shutdown commands:
* [[External Status script]]
* [[External Start script]]
* [[External Stop script]]

{{Manual/navbox}}

[[Category:Service]]</text>
    </revision>
  </page>
  <page>
    <title>Cygwin</title>
    <id>1563</id>
    <redirect />
    <revision>
      <id>9819</id>
      <timestamp>2009-12-10T22:43:54Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>moved [[Cygwin]] to [[Cygwin installation]]</comment>
      <text xml:space="preserve">#REDIRECT [[Cygwin installation]]</text>
    </revision>
  </page>
  <page>
    <title>Cygwin for 3.4.6</title>
    <id>1564</id>
    <redirect />
    <revision>
      <id>9822</id>
      <timestamp>2009-12-10T22:44:51Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>moved [[Cygwin for 3.4.6]] to [[Cygwin pre 3.4.7]]</comment>
      <text xml:space="preserve">#REDIRECT [[Cygwin pre 3.4.7]]</text>
    </revision>
  </page>
  <page>
    <title>Cygwin installation</title>
    <id>39</id>
    <revision>
      <id>16407</id>
      <timestamp>2012-02-20T13:15:47Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Undo revision 15622 by [[Special:Contributions/Nixiedelacruz|Nixiedelacruz]] ([[User talk:Nixiedelacruz|talk]]) Reverted SPAM bot edits</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Installation&lt;/categorytree&gt;
This document describes creating a Unix-centric OpenSSH/Cygwin installation designed to make a Windows server look as much like a Unix system as possible when accessed from the network in order to simplify managing a few Windows based systems in largely Unix based environment.

==Cygwin software installation==
* Create a local or domain Windows administrator account that has a POSIX user name (I use the &quot;build&quot; account for these notes).
* Download and run the Cygwin installer. http://www.cygwin.com/
* The cleanest way to install Cygwin in the root of its own dedicated partition since it is absolutely necessary that the Cygwin root directory is synonymous with the Windows file system root for that drive so that Java's platform agnostic path management will work equally well with the Unix or Windows versions of key paths. Using a separate partition is desirable in order to separate the application installation (under ControlTier and Cygwin) from the Windows OS installation (typically on drive C:):
&lt;pre&gt;
$ df -k
Filesystem           1K-blocks      Used Available Use% Mounted on
E:\bin                20964348    213848  20750500   2% /usr/bin
E:\lib                20964348    213848  20750500   2% /usr/lib
E:                    20964348    213848  20750500   2% /
c:                     8377864   7003552   1374312  84% /cygdrive/c
$ cd /
$ ls
Cygwin.bat  RECYCLER                   bin       dev  home  proc  usr
Cygwin.ico  System Volume Information  cygdrive  etc  lib   tmp   var
&lt;/pre&gt;
If this is not feasible then ignore the warnings and select &quot;C:\&quot; as the installation root directory to create a &quot;hybrid&quot; directory structure:
&lt;pre&gt;
$ pwd
/
$ ls
AUTOEXEC.BAT            MSDOS.SYS                  WINDOWS   home          tmp
CONFIG.SYS              MSOCache                   bin       lib           usr
Cygwin.bat              NTDETECT.COM               boot.ini  ntldr         var
Cygwin.ico              Program Files              cygdrive  pagefile.sys
Documents and Settings  RECYCLER                   cygwin    proc
IO.SYS                  System Volume Information  etc 
&lt;/pre&gt;

Beyond the base package set make sure you include &quot;openssh&quot; (and hence its dependencies). Of course, there are many many other useful packages that you'll probably like to include for a practical installation of Cygwin (e.g. &quot;rsync&quot;, &quot;unzip&quot;, &quot;zip&quot;, &quot;vim&quot;, etc).

===Misc configuration===
Other issues you may have to deal with after installing Cygwin....

* Double-check key file permissions:
** chmod 644 /etc/passwd
** chmod 644 /etc/group
** chmod 1775 /var

* Update group membership
** change local account's supernumerary group membership to include &quot;Administrators&quot; (i.e. edit /etc/group) if you want the user to be able to use administrator privileges from the Cygwin environment.

==SSH server configuration==
Cygwin includes a script to configure the SSH service, run from a &quot;Cygwin Bash Shell&quot; (Note the value given to the CYGWIN environment variable. Note also my comment to the original posting regarding W2k3 Server complications) :
&lt;pre&gt;
$ ssh-host-config
Generating /etc/ssh_config file
Privilege separation is set to yes by default since OpenSSH 3.3.
However, this requires a non-privileged account called 'sshd'.
For more info on privilege separation read /usr/share/doc/openssh/README.privsep
.

Should privilege separation be used? (yes/no) yes
Generating /etc/sshd_config file


Warning: The following functions require administrator privileges!

Do you want to install sshd as service?
(Say &quot;no&quot; if it's already installed as service) (yes/no) yes

Which value should the environment variable CYGWIN have when
sshd starts? It's recommended to set at least &quot;ntsec&quot; to be
able to change user context without password.
Default is &quot;ntsec&quot;.  CYGWIN=binmode ntsec tty

The service has been installed under LocalSystem account.
To start the service, call `net start sshd' or `cygrunsrv -S sshd'.

Host configuration finished. Have fun!
&lt;/pre&gt;

Start the SSH service:

&lt;pre&gt;
$ net start sshd
The CYGWIN sshd service is starting.
The CYGWIN sshd service was started successfully.
&lt;/pre&gt;

==Java installation==

Naturally, you can use the Windows system default Java installation so long as its either Java 1.4 or 1.5. However, it may be preferable to install a version of Java specifically for the use of ControlTier. By convention this is installed into &quot;$CTIER_ROOT/pkgs&quot; (usually &quot;$HOME/ctier/pkgs&quot; of the account used to run ControlTier).

Note that although Sun distributes its JDK in Windows (graphical) installer format, there's nothing stopping you creating a Zip file of a &quot;reference&quot; installation and using that to setup Java across the network.

Wherever Java is installed, set up the JAVA_HOME environment variable ahead of the ControlTier installation.

'''If your system java is installed in the default location C:\Program Files\Java\jdk1.5.0\ then you need to escape the space in &quot;Program Files&quot; using a backslash, like this: ''C:/Program\ Files/Java/jdk1.5.0/''''' 

Alternatively, you can just copy the jdk1.5.0 folder into your controltier pkgs installation directory and just the set the JAVA_HOME variable accordingly, sidestepping the problem with spaces.

==ControlTier installation==

[[ControlTier 3.4.7]] has added direct support for installation of the ControlTier client on Cygwin based Windows Nodes.

You can follow these instructions to install the client software.  

Before continuing, please read the normal [[ZIP installer (client-only)]] directions, and decide which options to pass to the install.sh script.

===Environment===

Setup the key environment variables with Windows paths using the unix forward-slash separator:

&lt;pre&gt;
$ export CTIER_ROOT=C:/ctier
$ export JAVA_HOME=C:/ctier/pkgs/jdk1.5.0_14 
&lt;/pre&gt;

===Install Script===

Execute the install.sh script from the Cygwin Bash shell:

&lt;pre&gt;
$ sh install.sh --client -Dserver.hostname=ctierserver

-check-prereqs:
     [echo] Using compatible Java version: 1.5

-load-props:
     [echo] System hostname: wiley
     [echo] Node OS Family is 'cygwin'
     [echo] Using CTIER_ROOT: C:/ctier
     [echo] Using server HOSTNAME: gozer
     [echo] Using client HOSTNAME: wiley
.
.
.
echo-rcfile-info:
     [echo]
     [echo] A .ctierrc file was generated at:
     [echo]     C:\ICW\home\ctier\.ctierrc
     [echo] containing the appropriate environment variables for the installed
     [echo] ControlTier Client To use it, add the following to your .profile
     [echo] or equivalent:
     [echo]
     [echo]     if [ -f ~/.ctierrc ]; then
     [echo]     . ~/.ctierrc
     [echo]     else
     [echo]     echo ~/.ctierrc not found 1&gt;&amp;2
     [echo]     fi

install-client:
     [echo] Install Complete

Setup build successful.

&lt;/pre&gt;

A &quot;.ctierrc&quot; file will be created in the Cygwin user's home directory to ensure the correct shell environment is available when executing commands.  You should make sure to &quot;source&quot; the file from your &quot;.profile&quot; or &quot;.bashrc&quot; file as appropriate.

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ pwd
/home/build
$ cat .ctierrc
# this file was generated by ControlTier installer.

export CTIER_ROOT=C:\\ctier

export CTL_HOME=C:\\ctier\\pkgs\\ctl-1.4.7
export CTL_BASE=C:\\ctier\\ctl


export PATH=$CTL_HOME/bin:$PATH

if [ -n &quot;$BASH&quot; ] ; then
    . $CTL_HOME\\etc\\bash_completion.sh ;
    if [ -t 0 -a -z &quot;$CTL_CLI_TERSE&quot; ]
    then
      CTL_CLI_TERSE=true
      export CTL_CLI_TERSE
    fi
fi

&lt;/syntaxhighlight&gt;

:Note: When install.sh is executed under cygwin, it simply invokes the install.bat script with an additional parameter &quot;-Dcygwin=true&quot;.  This parameter configures the .ctierrc file correctly for cygwin.  The install.bat script can be used directly for non-cygwin Windows installations.

{{Installation/navbox}}
[[Category:Cygwin]]</text>
    </revision>
  </page>
  <page>
    <title>Cygwin on Windows</title>
    <id>883</id>
    <redirect />
    <revision>
      <id>4809</id>
      <timestamp>2009-05-02T05:34:02Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <comment>[[Cygwin on Windows]] moved to [[Cygwin]]: Cygwin is Windows-only</comment>
      <text xml:space="preserve">#REDIRECT [[Cygwin]]</text>
    </revision>
  </page>
  <page>
    <title>Cygwin pre 3.4.7</title>
    <id>1314</id>
    <revision>
      <id>14126</id>
      <timestamp>2010-11-10T15:38:40Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;ctl-depot&quot; to &quot;ctl-project&quot;</comment>
      <text xml:space="preserve">:Note: This document is for [[ControlTier 3.4.6]] and earlier. For newer versions, see:  [[Cygwin installation]].

=Overview=
In this HOWTO, I'm going to document a Unix-centric OpenSSH/Cygwin installation designed to make a Windows server look as much like a Unix system as possible when accessed from the network in order to simplify managing a few Windows based systems in largely Unix based environment.

=Cygwin software installation=
* Create a local or domain Windows administrator account that has a POSIX user name (I use the &quot;build&quot; account for these notes).
* Download and run the Cygwin installer.
* The cleanest way to install Cygwin in the root of its own dedicated partition since it is absolutely necessary that the Cygwin root directory is synonymous with the Windows file system root for that drive so that Java's platform agnostic path management will work equally well with the Unix or Windows versions of key paths. Using a separate partition is desirable in order to separate the application installation (under ControlTier and Cygwin) from the Windows OS installation (typically on drive C:):
&lt;pre&gt;
$ df -k
Filesystem           1K-blocks      Used Available Use% Mounted on
E:\bin                20964348    213848  20750500   2% /usr/bin
E:\lib                20964348    213848  20750500   2% /usr/lib
E:                    20964348    213848  20750500   2% /
c:                     8377864   7003552   1374312  84% /cygdrive/c
$ cd /
$ ls
Cygwin.bat  RECYCLER                   bin       dev  home  proc  usr
Cygwin.ico  System Volume Information  cygdrive  etc  lib   tmp   var
&lt;/pre&gt;
If this is not feasible then ignore the warnings and select &quot;C:\&quot; as the installation root directory to create a &quot;hybrid&quot; directory structure:
&lt;pre&gt;
$ pwd
/
$ ls
AUTOEXEC.BAT            MSDOS.SYS                  WINDOWS   home          tmp
CONFIG.SYS              MSOCache                   bin       lib           usr
Cygwin.bat              NTDETECT.COM               boot.ini  ntldr         var
Cygwin.ico              Program Files              cygdrive  pagefile.sys
Documents and Settings  RECYCLER                   cygwin    proc
IO.SYS                  System Volume Information  etc 
&lt;/pre&gt;

Beyond the base package set make sure you include &quot;openssh&quot; (and hence its dependencies). Of course, there are many many other useful packages that you'll probably like to include for a practical installation of Cygwin (e.g. &quot;rsync&quot;, &quot;unzip&quot;, &quot;zip&quot;, &quot;vim&quot;, etc).

==Misc configuration==
other issues you may have to deal with after installing cygwin....

* permissions
** chmod 644 /etc/passwd
** chmod 644 /etc/group
** chmod 1775 /var

* group membership
** change local account's primary group from &quot;None&quot; to &quot;Administrators&quot;

=SSH server configuration=
Cygwin includes a script to configure the SSH service, run from a &quot;Cygwin Bash Shell&quot; (Note the value given to the CYGWIN environment variable. Note also my comment to the original posting regarding W2k3 Server complications) :
&lt;pre&gt;
$ ssh-host-config
Generating /etc/ssh_config file
Privilege separation is set to yes by default since OpenSSH 3.3.
However, this requires a non-privileged account called 'sshd'.
For more info on privilege separation read /usr/share/doc/openssh/README.privsep
.

Should privilege separation be used? (yes/no) yes
Generating /etc/sshd_config file


Warning: The following functions require administrator privileges!

Do you want to install sshd as service?
(Say &quot;no&quot; if it's already installed as service) (yes/no) yes

Which value should the environment variable CYGWIN have when
sshd starts? It's recommended to set at least &quot;ntsec&quot; to be
able to change user context without password.
Default is &quot;ntsec&quot;.  CYGWIN=binmode ntsec tty

The service has been installed under LocalSystem account.
To start the service, call `net start sshd' or `cygrunsrv -S sshd'.

Host configuration finished. Have fun!
&lt;/pre&gt;

Start the SSH service:

&lt;pre&gt;
$ net start sshd
The CYGWIN sshd service is starting.
The CYGWIN sshd service was started successfully.
&lt;/pre&gt;

=Java installation=

Naturally, you can use the Windows system default Java installation so long as its either Java 1.4 or 1.5. However, it may be preferable to install a version of Java specifically for the use of ControlTier. By convention this is installed into &quot;$CTIER_ROOT/pkgs&quot; (usually &quot;$HOME/ctier/pkgs&quot; of the account used to run ControlTier).

Note that although Sun distributes its JDK in Windows (graphical) installer format, there's nothing stopping you creating a Zip file of a &quot;reference&quot; installation and using that to setup Java across the network.

Wherever Java is installed, set up the JAVA_HOME environment variable ahead of the ControlTier installation.

=ControlTier installation=

As of ControlTier 3.1.5 the Unix install script (&quot;install.sh&quot;) is not compatible with Cygwin (possibly due to assumptions built into Sun's JDK on Windows).

For this reason, installing the ControlTier software over the network still follows the Windows pattern.
Setup the key environment variables with Windows style values:

&lt;pre&gt;
$ export CTIER_ROOT=~/ctier
$ export JAVA_HOME=~/ctier/pkgs/jdk1.5.0_14 
&lt;/pre&gt;

The key thing is to run the &quot;install.bat&quot; command shell from the Cygwin Bash shell:
&lt;pre&gt;
$ cmd.exe /C install.bat --client

-check-prereqs:
     [echo] Using compatible Java version: 1.5

-load-props:
     [echo] Using CTIER_ROOT: /home/build/ctier
.
.
.
     [echo]     if [ -f ~/.ctierrc ]; then
     [echo]     . ~/.ctierrc
     [echo]     else
     [echo]     echo ~/.ctierrc not found 1&gt;&amp;2
     [echo]     fi

install-client:
     [echo] Install Complete
&lt;/pre&gt;

Next, manually setup the &quot;.ctierrc&quot; file in the Cygwin user's home directory to ensure the correct shell environment is available:
&lt;pre&gt;
$ pwd
/home/build
$ cat .ctierrc
# this file was generated by ControlTier installer.
                    
export CTIER_ROOT=$HOME/ctier

export CTL_HOME=$HOME/ctier/pkgs/ctl-1.4.4
export CTL_BASE=$HOME/ctier/ctl

# Server settings

export JETTY_HOME=$HOME/ctier/pkgs/jetty-6.1.14
export JETTY_LOGS=$HOME/ctier/pkgs/jetty-6.1.14/logs
export JETTY_RUN=$JETTY_LOGS
export JAVA_HOME=$HOME/ctier/pkgs/jdk1.5.0_12
CONFIG_PROPS=&quot;-Djobcenter.config.location=$HOME/ctier/jobcenter/jobcenter-config.properties -Dreportcenter.config.location=$HOME/ctier/reportcenter/reportcenter-config.properties&quot;
export JAVA_OPTIONS=&quot;-XX:MaxPermSize=128m -Xmx1024m -Xms256m $CONFIG_PROPS&quot;


export PATH=$CTL_HOME/bin:$JETTY_HOME/bin:$PATH

if [ -n &quot;$BASH&quot; ] ; then
    . $CTL_HOME/etc/bash_completion.sh ;
    if [ -t 0 -a -z &quot;$CTL_CLI_TERSE&quot; ]
    then
      CTL_CLI_TERSE=true
      export CTL_CLI_TERSE
    fi
fi
&lt;/pre&gt;

Finally, override the &quot;ctl-project&quot; and &quot;ctl&quot; scripts to invoke their Windows counterparts:
&lt;pre&gt;
$ cat $CTL_HOME/bin/ctl-project
#!/bin/sh

exec cmd.exe /C ctl-project.bat &quot;$@&quot;
$ cat $CTL_HOME/bin/ctl
#!/bin/sh

exec cmd.exe /C ctl.bat &quot;$@&quot;
&lt;/pre&gt;

With this &quot;sleight of hand&quot; in place, it is possible to manage Windows systems on the network in the same way as their Unix/Linux counterparts taking full advantage of the Cygwin and Java/Ant abstractions of the underlying OS facilities.

(By the way, a future version of ControlTier will resolve the script and JDK compatibility issues that result in the customizations in this posting).

[[Category:Cygwin]]</text>
    </revision>
  </page>
  <page>
    <title>Dav:// prefix</title>
    <id>1398</id>
    <revision>
      <id>14027</id>
      <timestamp>2010-11-10T15:31:17Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;/jackrabbit/repository/workbench&quot; to &quot;/jackrabbit/repository/controltier/projects&quot;</comment>
      <text xml:space="preserve">&lt;noinclude&gt;
&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;File share&lt;/categorytree&gt;
&lt;/noinclude&gt;
As of 3.4.5, the root of the WebDAV repository that is configured in the CTL [[framework.properties]] (i.e., framework.webdav.uri) file can be addressed as &quot;dav://&quot;. This is a shorthand provided as a convenience letting users specify a shorter URL string. (ie, dav:// versus http://strongbad:8080/jackrabbit/repository/controltier/projects). The [[Davutil]] commands support this addressing and overtime the rest of ControlTier commands that reference the WebDAV resources will eventually.

For example this URL:
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
http://strongbad:8080/jackrabbit/repository/controltier/projects/junk/fun
&lt;/syntaxhighlight&gt;

Can be shortened to:
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
dav://junk/fun
&lt;/syntaxhighlight&gt;

The &quot;dav://&quot; prefix is translated to the value of &lt;code&gt;framework.webdav.uri&lt;/code&gt; defined in [[framework.properties]].

&lt;noinclude&gt;
{{Manual/navbox}}
[[Category:WebDAV]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Davutil</title>
    <id>748</id>
    <revision>
      <id>14348</id>
      <timestamp>2010-11-11T00:45:49Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Types&lt;/categorytree&gt;
[[File:Icon-AssemblyObject.png]]
[[davutil]] is a utility containing several commands useful for managing resources in a [http://www.webdav.org WebDAV] repository. 
The utility contains commands supporting getting, putting and deleting files. Can also create new collections (similar to a directory) and move and copy resources inside the WebDAV.

The '''davutil''' commands are useful for getting and putting files in the ControlTier [[File share]].
  
==Reference==

* [http://controltier.sourceforge.net/docs/latest/core/reference/user/davutil/index.html davutil reference]

{{Manual/navbox}}

[[Category:WebDAV]]
[[Category:Utility types]]</text>
    </revision>
  </page>
  <page>
    <title>Davutil usage</title>
    <id>1018</id>
    <redirect />
    <revision>
      <id>5909</id>
      <timestamp>2009-06-26T18:19:08Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>[[Davutil usage]] moved to [[Davutil]]</comment>
      <text xml:space="preserve">#REDIRECT [[Davutil]]</text>
    </revision>
  </page>
  <page>
    <title>Decrypt-node-password Task Reference</title>
    <id>1849</id>
    <revision>
      <id>16459</id>
      <timestamp>2012-02-22T12:20:03Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Undo revision 15623 by [[Special:Contributions/Nixiedelacruz|Nixiedelacruz]] ([[User talk:Nixiedelacruz|talk]]) Removed SPAM bot edit</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Tasks&lt;/categorytree&gt;

=Description=

Looks up a [[Node]]'s ctlPassword property, and returns the decrypted value.
   
=Parameters=
      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;depot&lt;/td&gt;&lt;td&gt;The project to update&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;resultproperty&lt;/td&gt;&lt;td&gt;Property to set with
	  success/fail value&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;outputproperty&lt;/td&gt;&lt;td&gt;Property to set with
	  the decrypted password&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;comment&lt;/td&gt;&lt;td&gt;Text describing purpose of update&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;

=Parameters specified as nested elements=
      &lt;p&gt;&lt;strong&gt;resource&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
	A [[Resource Type Reference|resource]] object.
      &lt;/p&gt;
The resource element must specify a name and type attribute.  This should correspond to a Node object on the server.
    
=Examples=

Get the decrypted password for a Node:

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;decrypt-node-password depot=&quot;${context.depot}&quot;
    resultproperty=&quot;result&quot;
    outputproperty=&quot;thepass&quot;
    comment=&quot;&quot;&gt;
    &lt;resource name=&quot;somenode&quot; type=&quot;Node&quot;/&gt;
&lt;/decrypt-node-password&gt;
&lt;echo message=&quot;password is ${thepass}&quot;/&gt;
&lt;/syntaxhighlight&gt;

&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Resource model Ant Tasks]]
[[Category:Resource]]</text>
    </revision>
  </page>
  <page>
    <title>DecryptNodePassword Task Reference</title>
    <id>1850</id>
    <redirect />
    <revision>
      <id>12313</id>
      <timestamp>2010-01-19T00:57:32Z</timestamp>
      <contributor>
        <username>Gschueler</username>
        <id>8</id>
      </contributor>
      <comment>moved [[DecryptNodePassword Task Reference]] to [[Decrypt-node-password Task Reference]]</comment>
      <text xml:space="preserve">#REDIRECT [[Decrypt-node-password Task Reference]]</text>
    </revision>
  </page>
  <page>
    <title>Define a command</title>
    <id>78</id>
    <revision>
      <id>11520</id>
      <timestamp>2009-12-15T16:19:45Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>/* Run the command */</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Workflows&lt;/categorytree&gt;

: ''See a [http://open.controltier.com/media/tutorial-Define-a-Command.swf short screencast]''

Commands are defined within the type definition file: [[type.xml]].
Commands wrap the known command or procedure and once defined, become exposed to the automation framework for broad use. These commands can later evolve to follow conventions supporting virtualized administration.

== Create or choose a type ==
You can add commands to an existing type definition or you can create a new type.

To create a new type run:
&lt;pre&gt;
$ ctl -m ProjectBuilder -c create-type
&lt;/pre&gt;

The create-type command will generate a type.xml file where you can define your command.

== Edit type.xml==
Open the type.xml in an editor and locate the &quot;&lt;commands&gt;&quot; tag. Notice the &quot;salute&quot; command definition, simply a wrapper around the bash interpreter.

&lt;pre&gt;
&lt;type name=&quot;hello&quot; role=&quot;concrete&quot; 
        uniqueInstances=&quot;true&quot;&gt;
 &lt;description&gt; Says hello. &lt;/description&gt;

 &lt;supertype&gt;
      &lt;typereference name=&quot;Managed-Entity&quot;/&gt;
 &lt;/supertype&gt;
 &lt;command-settings&gt;
      &lt;notification notify=&quot;false&quot;/&gt;
      &lt;template-directory&gt;&lt;/template-directory&gt;
      &lt;dependency-view parents=&quot;false&quot; children=&quot;true&quot; proximity=&quot;1&quot;/&gt;
     &lt;logger name=&quot;hello&quot;/&gt;
 &lt;/command-settings&gt;
 &lt;commands&gt;
  &lt;command name=&quot;salute&quot; description=&quot;offer a salutation&quot;
           command-type=&quot;Command&quot; is-static=&quot;true&quot;&gt;
   &lt;execution-string&gt;bash&lt;/execution-string&gt;
   &lt;argument-string&gt;echo hello&lt;/argument-string&gt;
  &lt;/command&gt;
 &lt;/commands&gt;
&lt;/type&gt;
&lt;/pre&gt;

When a user runs this command the echo command will print &quot;hello&quot; to the console.

== Build the type ==
Use the &quot;build-type&quot; command to generate the command files.

&lt;pre&gt;
$ ctl -m ProjectBuilder -c build-type -- -type hello -upload -deploy
&lt;/pre&gt;

The -upload and -deploy flag cause the generated type to be uploaded to Workbench and then deployed to the local client.

== Run the command ==

The hello module is now deployed and the new command run:

&lt;pre&gt;
$ ctl -m hello -c salute
hello
&lt;/pre&gt;

[[Category:Defined Commands]]
[[Category:Screencasts]]</text>
    </revision>
  </page>
  <page>
    <title>Defined Commands</title>
    <id>1706</id>
    <redirect />
    <revision>
      <id>11523</id>
      <timestamp>2009-12-15T16:23:58Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[Category:Defined Commands]]</comment>
      <text xml:space="preserve">#REDIRECT [[:Category:Defined Commands]]</text>
    </revision>
  </page>
  <page>
    <title>Defined commands</title>
    <id>70</id>
    <revision>
      <id>13865</id>
      <timestamp>2010-11-10T15:16:16Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot; -o &quot; to &quot; -r &quot;</comment>
      <text xml:space="preserve">=Overview=

ControlTier types provide a command definition layer, that lets you wrap an existing command or script or declare the procedure directly, and expose it to the command dispatcher. Defined commands are packaged and distributed to the ControlTier client infrastructure where operations staff can execute them.

The ControlTier solution software includes a number of command libraries. Each of these libraries is comprised of defined commands.

=Listing=

The ctl command supports a listing feature allowing you to list all the projects and their contents: modules their commands, and possibly their objects.

As mentioned earlier the install will have created a project called &quot;default&quot; along with a set of modules.

The example below shows modules in the default project:
&lt;pre&gt;
$ ctl   
shellutil: various shell utilities
commands: [env, exec, kill, pkill, ps, whoami]
...snip...
&lt;/pre&gt;
      
The example above gave an overview of the modules and commands in that project but if you want to know more about the commands for a given module add the &quot;-m modulename&quot; arguments. Below the commands for [http://controltier.sourceforge.net/docs/latest/coreutils/reference/modules/type_shellutil.html shellutil] are listed:

&lt;pre&gt;
$ ctl -m shellutil
shellutil: various shell utilities
[commands]
  env*: get environment info
    [options]
    -key &lt;&gt;: env key
  exec*: executes a command
    [options]
    -scriptfile &lt;&gt;: scriptfile to execute
    -failonerror &lt;&gt;: fail if there is an error
    [-executable &lt;&gt;]: executable path
    -timeout &lt;&gt;: Stop the command if it doesn't finish within the specified time
    -os &lt;&gt;: list of Operating Systems on which the command may be executed.
    -output &lt;&gt;: Name of a file to which to write the output. 
    -script &lt;&gt;: script to execute
    -argline &lt;&gt;: arguments for execututable
  kill*: kill process
    [options]
    -sig &lt;&gt;: signal to send
    [-pid &lt;&gt;]: process id
  pkill*: kill named process
    [options]
    -pname &lt;&gt;: process name
    -sig &lt;&gt;: signal to send
  ps*: get process info
    [options]
    -pname &lt;&gt;: process name
    -output &lt;&gt;: output file
    -pid &lt;&gt;: process id
    -format &lt;&gt;: output format. (plain, yaml) 
  whoami*: print the user name
&lt;/pre&gt;

Note
* What does the asterisk next to the command mean? Commands that are marked as static get an asterisk denoting that you can run them outside of an object context.

=Options=

CTL has a variety of options that can be dispalyed via -help. Typing ctl -help shows a complete listing of all the ctl options and some examples.

User defined commands stored in modules may have thier own options. Information about these options is displayed via ctl's listing feature. To specify options specific to commands use two dashes after specifying the ctl options.

The general option pattern follows this form:

&lt;code&gt;ctl [ctl-options] [-- [command-options]]&lt;/code&gt;
For example, the following command shows several ctl options and one option specific to a command.
&lt;pre&gt;
ctl -I 'web.*' -m shellutil -c ps -- -pname bash
&lt;/pre&gt;
When no arguments are specifed, ctl falls into listing mode. See below.

Commands that define their own options can declare them as optional or required. They may also have their own default values. If a required option is not specified, the command will fail printing its usage. Remember to use the &quot;--&quot; (double dash) to separate the ctl options from those of the command.

Note
* Bash users: Users that run the bash shell can take advantage of CTL's command completion capability. Begin typing ctl command line syntax and hit the tab key. The command completion should suggest the next command option.
 
==Quoting whitepsace==
Command-options that take arguments with white space must be specially quoted to ensure the strings are not broken up during the option parsing.

The format uses both double and single quotes around your the argument containing whitespace: &quot;'string with whitespaces'&quot;

For example, imagine a command named hello that takes an option named -message. If the argument passed to -message has whitespace use the quoting format shown above:
&lt;code&gt;
ctl -m helloworld -c hello -- -message &quot;'hi there'&quot;
&lt;/code&gt;

=Running commands=

The ctl command has two command invocation styles to support the static and object contexts described above.

The usage pattern for a static command is:

&lt;code&gt;ctl -m module -c command&lt;/code&gt;

The -m option specifies the name of the module. The -c option specifies the name of the command in that module.

By convention, simple utility commands are designed to run in a static context. For example, the commands in the coreutils library work in a static context.

One of the coreutil modules, called &quot;shellutils&quot; has a command called ps, that shows a normalized set of process information.
&lt;pre&gt;
ctl -m shellutil -c ps
&lt;/pre&gt;
The other mode in which a command can be run is within an object context. Instead of using the -m module argument, you will use the -t type and -r resource options to specify an object context.

The usage pattern for an object context command is:
&lt;pre&gt;
ctl -t type -r resource -c command
&lt;/pre&gt;

The type argument is the object's type name but also corresponds to the module of the same name. Object instance data is stored in the project name and is loaded at execution time.

One module that is designed to run in both a static and object context is &quot;ProjectBuilder&quot;. This module is used to develop new CTL modules. The example below shows the create-type command running in the context of an resource named &quot;default&quot;.
&lt;pre&gt;
ctl -t ProjectBuilder -r default -c create-type
vs.
ctl -m ProjectBuilder -c create-type
 &lt;/pre&gt;

&lt;noinclude&gt;{{Manual/navbox}}&lt;/noinclude&gt;

[[Category:Defined Commands]]</text>
    </revision>
  </page>
  <page>
    <title>Demo system requirements</title>
    <id>1290</id>
    <redirect />
    <revision>
      <id>7606</id>
      <timestamp>2009-07-25T19:12:21Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>moved [[Demo system requirements]] to [[Dukes Bank system requirements]]</comment>
      <text xml:space="preserve">#REDIRECT [[Dukes Bank system requirements]]</text>
    </revision>
  </page>
  <page>
    <title>Demos</title>
    <id>890</id>
    <redirect />
    <revision>
      <id>4832</id>
      <timestamp>2009-05-02T06:18:20Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <comment>Redirecting to [[ControlTier Demo]]</comment>
      <text xml:space="preserve">#REDIRECT [[ControlTier Demo]]</text>
    </revision>
  </page>
  <page>
    <title>Dependencies</title>
    <id>13</id>
    <revision>
      <id>16402</id>
      <timestamp>2012-02-20T13:11:00Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Undo revision 15624 by [[Special:Contributions/Nixiedelacruz|Nixiedelacruz]] ([[User talk:Nixiedelacruz|talk]]) Reverted SPAM bot edits</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Installation&lt;/categorytree&gt;

ControlTier has 2 dependencies:

* [[#Java|Java 1.5/1.6]] : The install process requires that the latest version of Java Development Kit 1.5 or 1.6 be installed. You must have the JAVA_HOME environment variable defined in your JDK environment before running the install script. See below for instructions on installing Java.
* [[#Graphviz |Graphviz]] (Optional) : Graphviz is a visualization software package that must be installed in order to see graphs (command workflows, object relationships, etc.) in the [[Workbench]] web interface . It is the only part of the server install that is platform specific. See below for instructions on installing Graphviz. It's also worth noting that Workbench can function without Graphviz with the consequence being the graphing action will result in a broken image in the graph display area.

This section covers installing the dependencies and setting up the [[Self Contained Directory Convention]] described in the previous two sections.

Note
* The typographic convention: &quot;$ &quot; (Unix/Linux) and &quot;C:\&gt;&quot; (Windows) is used to indicate the system for which the commands are intended.
* These instructions work equally well from a Bash shell on a Unix/Linux system, or on a Windows system using the Command Prompt.

== Set CTIER_ROOT ==

The first step is to choose the value of the CTIER_ROOT. For the purpose of these instructions, we assume CTIER_ROOT to have the default value. Avoid choosing a directory that contains spaces since this is not handled reliably throughout the system (this particularly eliminates anything under &quot;C:\Documents and Settings&quot; on Windows).

==Self contained directory convention==
Create the basic directory structure as per the Self Contained Directory Convention

{{:SelfContainedDirectory}}

===Unix===

&lt;pre&gt;
$ export CTIER_ROOT=~/ctier
$ mkdir -p $CTIER_ROOT/pkgs
&lt;/pre&gt;

===Windows===

&lt;pre&gt; 
C:\&gt;set CTIER_ROOT=C:\ctier
C:\&gt;mkdir %CTIER_ROOT%\pkgs
&lt;/pre&gt;

== Java ==
Both the [http://openjdk.java.net/ Open JDK] and Sun (Oracle) JVMs can be used.
Earlier versions of ControlTier require Java '''1.5'''. 
''Java 1.6 will work fine with releases beginning with 3.4.8.''
We also encourage that you provide a separate Java install to support ControlTier deployment. Doing this will isolate the ControlTier install from system wide or application specific changes and needs.

===Unix===
On a Unix/Linux system download the latest self-extracting file version of 
[http://java.sun.com/javase/downloads/index_jdk5.jsp http://java.sun.com/javase/downloads/index_jdk5.jsp] appropriate for your system into $CTIER_ROOT/pkgs and install it as follows. e.g:

&lt;pre&gt;
$ cd $CTIER_ROOT/pkgs
$ sh j2sdk-1_5_0_15-linux-i586.bin 
.
.
.
Creating j2sdk1.5.0_15/jre/lib/plugin.jar
Creating j2sdk1.5.0_15/jre/javaws/javaws.jar
Done.
&lt;/pre&gt;

This should result in a new $CTIER_ROOT/pkgs subdirectory containing the Java install (eg, &quot;j2sdk1.5.0_15&quot;).
Do not register browsers with this version if you do not want to replace your currently installed Java version.

=== Mac OS X===

On a Mac OS X system your Java home will be set to a logical path like &lt;code&gt;/Library/Java/Home&lt;/code&gt; with a set of symbolic links pointing to a particular version. 

These links also add the &quot;java&quot; executable to the &quot;/usr/bin&quot; path. Eg;
&lt;pre&gt;
$ which java
/usr/bin/java
&lt;/pre&gt;

Calling the executable will show you what version it is currently pointing to:
&lt;pre&gt;
$ java -version
java version &quot;1.5.0_16&quot;
Java(TM) 2 Runtime Environment, Standard Edition (build 1.5.0_16-b06-284)
Java HotSpot(TM) Client VM (build 1.5.0_16-133, mixed mode, sharing)
&lt;/pre&gt;

The system-wide Java version is set via &quot;Java Preferences.app&quot; which you can find in /Applications/Utilities/Java.
If you are currently running a non 5.0 version you can run the &quot;Java Preferences&quot; application and change it to 5.0

Alternatively, you can set the correct JAVA_HOME and PATH via your login initialization profile. You can see the available versions
in: /System/Library/Frameworks/JavaVM.framework/Versions:
&lt;pre&gt;
$ ls
1.3@		1.4.1@		1.5.0/		A/
1.3.1/		1.4.2/		1.6@		Current@
1.4@		1.5@		1.6.0/		CurrentJDK@
&lt;/pre&gt;

You can therefore set your JAVA_HOME to: /System/Library/Frameworks/JavaVM.framework/Versions/1.5.0/Home

=== Windows===
On a Windows system, download the latest &quot;Offline Installation&quot; version of Sun's 1.5.0 J2SE SDK and install it into %CTIER_ROOT%\pkgs as follows:

[[Image:j2sdk.png]]

===Verify===
Be sure you have the correct version of Java.

Run the &quot;java&quot; executable with the &quot;-version&quot; flag:
&lt;pre&gt;
java -version
&lt;/pre&gt;
...and you should see the output show the version number:
&lt;pre&gt;
java version &quot;1.5.0_17&quot;
Java(TM) 2 Runtime Environment, Standard Edition (build 1.5.0_17-b04)
Java HotSpot(TM) Client VM (build 1.5.0_17-b04, mixed mode)
&lt;/pre&gt;

Make sure it is the right version!


====JRE_HOME====
* If you have previously set the &lt;code&gt;JRE_HOME&lt;/code&gt; variable, you will need to reset it to point to &lt;code&gt;JAVA_HOME&lt;/code&gt; (or the same path)

== Graphviz ==

Graphviz is used to generate diagrams in Workbench.

===Unix===
On a Unix/Linux system ensure that version 2.x of Graphviz is installed as part of the operating system image:

&lt;pre&gt;
$ which dot
/usr/bin/dot
$ dot -V
dot version 2.2 (Tue Mar 22 18:02:44 UTC 2005)
&lt;/pre&gt;

If it is not installed go to http://www.graphviz.org and locate the Download page. There are Linux, Mac and Windows distributions. Of course, they have instructions to build it from source, too.

===Windows===
On a Windows system, download the current stable release of the binary distribution of the 2.x version of the 
[[http://www.graphviz.org/Download_windows.php|Graphviz installer]] and install it into %CTIER_ROOT%\pkgs as follows. e.g.:

[[Image:graphviz.png]]


At this point you are ready to proceed with the [[ZIP installer]] interface based installation of the ControlTier software depending on your circumstances and preferences.


{{Installation/navbox}}
[[Category:Installation requirements]]</text>
    </revision>
  </page>
  <page>
    <title>Deploy</title>
    <id>919</id>
    <revision>
      <id>10262</id>
      <timestamp>2009-12-11T18:53:28Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">{{stub}}
&lt;noinclude&gt;&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Deployment&lt;/categorytree&gt;&lt;/noinclude&gt;
The '''Deploy''' workfow is a command defined in the [[Deployment]] type and subtypes. It is generally implemented to call the commands [[Packages-Install]] and [[Configure]] but subtypes may include other steps to manage startup and shutdown, among other steps.

[[Category:Commands]]
[[Category:Deployment]]</text>
    </revision>
  </page>
  <page>
    <title>Deploying Packages to Nodes</title>
    <id>95</id>
    <revision>
      <id>16467</id>
      <timestamp>2012-02-22T12:39:12Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Undo revision 15629 by [[Special:Contributions/Santiagomccray|Santiagomccray]] ([[User talk:Santiagomccray|talk]]) Removed SPAM bot edit</comment>
      <text xml:space="preserve">&lt;noinclude&gt;&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Package&lt;/categorytree&gt;&lt;/noinclude&gt;
This page describes how to deploy Packages to Nodes.

==Setup==

===Option 1: XML configuration=== 

A [[project.xml]] file describes the package metadata via the [[Project-v10.xml#package|package]] tag. Beyond describing the package you  can also assign the nodes to which the package should be installed using the [[Project-v10.xml#referrers|referrers]] tag. 

The example below describes the apache-tomcat-5.5.26.zip zip package should be deployed to node1 and node2.

File listing: apache-tomcat-5.5.26.zip.xml
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE project PUBLIC &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; 
    &quot;project.dtd&quot;&gt;
&lt;project&gt;

  &lt;package 
      arch=&quot;noarch&quot;
      base=&quot;apache-tomcat-5.5.26&quot; 
      buildtime=&quot;2008061570109&quot; 
      description=&quot;The Tomcat application server.&quot; 
      filename=&quot;apache-tomcat-5.5.26.zip&quot; 
      filetype=&quot;zip&quot; 
      installroot=&quot;/demo/apache-tomcat-5.5.26&quot; 
      installrank=&quot;&quot; 
      name=&quot;apache-tomcat-5.5.26.zip&quot; 
      release=&quot;&quot;
      releasetag=&quot;&quot;
      repoUrl=&quot;/zip/zips/apache-tomcat-5.5.26.zip&quot; 
      restart=&quot;false&quot;
      type=&quot;zip&quot;
      vendor=&quot;&quot;
      version=&quot;5.5.26&quot;      
      &gt;
     &lt;!--
      **
      ** References the nodes as parent dependencies to the package
      **
      --&gt;
    &lt;referrers replace=&quot;false&quot;&gt;

       &lt;!-- Change the node names to the ones already registered in your environment --&gt;

      &lt;resource type=&quot;Node&quot; name=&quot;node1&quot;/&gt;
      &lt;resource type=&quot;Node&quot; name=&quot;node2&quot;/&gt;
    &lt;/referrers&gt;
   &lt;/package&gt;
&lt;/project&gt;	      
&lt;/syntaxhighlight&gt;

Use the [[zip]] &lt;code&gt;upload&lt;/code&gt; command to stage and register the package to the repository.
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m zip -c upload -- \
	-filename apache-tomcat-5.5.26.zip \
        -xml apache-tomcat-5.5.26.zip.xml
&lt;/syntaxhighlight&gt;

===Option 2: GUI configuration===

Package to node assignements can also be done via the [[Workbench]] GUI. 
# Go to: Workbench → PackageManager → Package List, and locate the package you wish to deploy.
# Select that package and find the &quot;Parent Referrers&quot; link and press the Change button. A list of nodes and checkboxes will be displayed. 
# Select the checkboxes for the nodes where you want the package installed.

==Execution==

To deploy the package across all nodes where the package is registered, run the &lt;code&gt;Install&lt;/code&gt; command on the package uploaded earlier. Use include/exclude options to enable the node dispatch feature of CTL to run Install across the Nodes where the package was associated. 

Run the &lt;code&gt;[[ctl-project]]&lt;/code&gt; command to prepare for command execution

&lt;pre&gt;
ctl-project -p demo -a install
&lt;/pre&gt;
===CLI execution===


You can use [[CTL_Command_Reference|ctl]] to execute the Install command for the package.

Here the &lt;code&gt;-I&lt;/code&gt; node dispatch options specifies to run the following command across all hosts where apache-tomcat-5.5.26.zip has been assigned:
&lt;pre&gt;
ctl -I '.*' -p demo -t zip -r apache-tomcat-5.5.26.zip -c Install
&lt;/pre&gt;

===GUI execution===

You can execute the command shown above using [[Jobcenter]] GUI. Locate the package in PackageManager: 

Workbench → PackageManager → Package List. 

Click the package and press the &quot;Commands&quot; button. Then click the blue arrow button for the &quot;Install&quot; command. This will bring you to JobCenter's job creation form.

Configure the node dispatch option and then press &quot;Run&quot;. Of course, you can save this job to run at a later time, if desired.

==See also==
* [[Deploying Packages to a Service]]

[[Category:Package Examples]]
[[Category:Node]]</text>
    </revision>
  </page>
  <page>
    <title>Deploying Packages to a Service</title>
    <id>93</id>
    <revision>
      <id>16381</id>
      <timestamp>2012-02-20T11:35:11Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <comment>Undo revision 15628 by [[Special:Contributions/Santiagomccray|Santiagomccray]] ([[User talk:Santiagomccray|talk]]) Reverted SPAM bot edits</comment>
      <text xml:space="preserve">&lt;noinclude&gt;&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Examples&lt;/categorytree&gt;&lt;/noinclude&gt;
: ''See a [http://open.controltier.com/media/tutorial-Package-Deployment.swf screencast]''

This page describes how to deploy one or more packages that have been loaded into the repository via the [[Service]] type.

See the [[Creating packages]] page for instructions on adding new packages.

Service's parent type [[Deployment]]&quot; defines a set of commands used to manage the deployment cycle. Two commands in particular of note are:
* Packages-Install: This command dispatches the &quot;Install&quot; command to each configured package dependency
* Deploy: This command invokes Packages-Install.

It is likely that you are deploying packages to an application service so the &quot;Service&quot; type is more appropriate. Because Service is a subtype of Deployment it inherits the Packages-Install and Deploy commands. Service also overrides &quot;Deploy&quot; to ensure the service is restarted after package installation.

==Setup==

These instructions use an example where the Apache Tomcat server software will be deployed.

The first step is to load a package to the repository. Follow the instructions to load the tomcat zip distribution as described in [[Creating packages#Upload_an_existing_file_as_a_package]].

Use the find-resources command to ensure the  apache-tomcat-5.5.26.zip package was indeed uploaded to the repository:
&lt;pre&gt;
$ ctl -p demo -m ProjectBuilder -c find-resources -- -type zip
	|
	|--(zip) apache-tomcat-5.5.26.zip
&lt;/pre&gt;

To define the package dependencies two kinds of steps occur. Firstly, the resources are defined. Secondly, dependency relationships are established between the resources. You can define the resources either by XML or via the Workbench GUI.

=== XML configuration===

Using XML configuration is probably the quickest and most succinct way carry out the two-step process of registering objects and assigning dependency relationships. The example below reflects the model described in the earlier graphic.

File listing: tomcat1.xml

&lt;pre&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE project PUBLIC &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; 
    &quot;project.dtd&quot;&gt;
&lt;project&gt;
  
  &lt;!--
      **
      ** Describe the deployment:
      **
  --&gt;
  &lt;deployment 
      type=&quot;Service&quot;
      name=&quot;tomcat1&quot; 
      description=&quot;The Tomcat deployment.&quot; 
      installRoot=&quot;${env.CTIER_ROOT}/demo&quot; 
      basedir=&quot;${env.CTIER_ROOT}/demo&quot; &gt;
     &lt;!--
      **
      ** Define a child dependency on this tomcat zip:
      **
      --&gt;
     &lt;resources&gt;
      &lt;resource name=&quot;apache-tomcat-5.5.26.zip&quot; type=&quot;zip&quot; /&gt;
     &lt;/resources&gt;
     &lt;!--
      **
      ** Define a parent dependency to the node where you are running this demo. 
      **
      --&gt;
    &lt;referrers replace=&quot;false&quot;&gt;
       &lt;!--
          ** Change this line to one that matches your node name:
       --&gt;
      &lt;resource type=&quot;Node&quot; name=&quot;centos2&quot;/&gt;
    &lt;/referrers&gt;
  &lt;/deployment&gt;

&lt;/project&gt;	
&lt;/pre&gt;
      
Notice  the value for the &quot;installRoot&quot; attribute in the XML. This is specifying the directory where the apache zip will be extracted. 

Load the XML file with the load-resources command:
&lt;pre&gt;
 ctl -m ProjectBuilder -c load-resources -- -filename tomcat1.xml
Loading &quot;/home/alexh/ctier/pkgs/tomcat1.xml&quot; ...
1 file(s) have been successfully validated.
Processing /home/alexh/ctier/pkgs/tomcat1.xml to /home/alexh/ctier/ctl/var/tmp/projectxml-324396149.xml
Loading stylesheet /home/alexh/ctier/ctl/projects/demo/modules/ProjectBuilder/lib/load-resources/projectxml/project.xsl
Mapping XML to properties ...
Collecting object attributes ...
Batching object attribute updates ...
Batching resource and referrer updates ...
Executing batch update ...
&lt;/pre&gt;

You can run another ProjectBuilder command to query the server to see if the new Service was defined. This time run &lt;code&gt;find-resources&lt;/code&gt;:
&lt;pre&gt;
$ ctl -p demo -m ProjectBuilder -c find-resources -- -type Service
Deleting: /Users/alexh/ctier/ctl/var/sessions/find-resources/find.session
...
|--(Service) tomcat1
...
&lt;/pre&gt;

== GUI configuration==

GUI configuration via Workbench's web interface is practical when the individual objects are already registered. This means the packages have already been uploaded to the repository and the nodes exist in NodeManager (probably when the CTL installation occurred). Given those assumptions setup should really just include the creation of the tomcat1 Service resource and the dependency setup.

# Create Service resource. Navigate to the Service type, and create an object called &quot;tomcat1&quot;. Fill in the form as described in the XML example, specifying description, basedir and install root directories.
# Assign deployment-to-package child dependencies. Locate the &quot;Child Resources&quot; link and press the Change button. Tick the checkboxes for theapache-tomcat-5.5.26.zip package.
# Assign node parent dependencies. Locate the &quot;Parent Dependencies&quot; link and press the Change button. Press the checkboxes for the desired nodes.

==Run ctl-project==

With the configuration completed, the next step is to ensure the tomcat1 object is installed on the needed machines. On the server, run the &lt;code&gt;ctl-exec&lt;/code&gt; command to execute [[CTL-DEPOT_Command_Reference| ctl-project]] utility:

&lt;pre&gt;
ctl-exec -I &quot;.*&quot; -- ctl-project -p demo -a install
.
.
.
&quot;Install&quot; command running for resource: (Service) tomcat1
&lt;/pre&gt;

Ensure that you see &quot;tomcat1&quot; has been installed as shown in the message output above.

==Execution==
With the package in the repository and the tomcat1 Service registered you now ready to deploy the package.

===Check dependencies===

It's useful to look at how the &quot;tomcat1&quot; Service is configured. The &quot;ctl-project&quot; command should have ensured the object is now installed on the CTL node.
Information about an object is available via the &quot;Properties&quot; command. 

Run the &lt;code&gt;Properties&lt;/code&gt; command without arguments:

&lt;pre&gt;
$ ctl -p demo -t Service -r tomcat1 -c Properties
[MULTI_LINE]
# tomcat1 [Service] #

The Tomcat deployment.

## Attributes ##

*  defaultAllowMultiplePackageMatches: &quot;false&quot;
*  defaultDeploymentType: &quot;Service&quot;
*  defaultFailIfPackageNotReplaced: &quot;true&quot;
*  defaultPackageName: &quot;.*&quot;
*  defaultPackageProximity: &quot;1&quot;
*  defaultPackageType: &quot;[^\.]*&quot;
*  errorNotificationRecipient: &quot;${framework.admin.tolist}&quot;
*  service-isdown-executable: &quot;&quot;
*  service-isdown-script: &quot;&quot;
*  service-isup-executable: &quot;&quot;
*  service-isup-script: &quot;&quot;
*  service-start-executable: &quot;&quot;
*  service-start-script: &quot;&quot;
*  service-stop-executable: &quot;&quot;
*  service-stop-script: &quot;&quot;
*  successNotificationRecipient: &quot;${framework.admin.tolist}&quot;

## Dependencies ##

### Parent Dependencies ###
1.   centos2 [Node]

### Child Dependencies ###

1.   apache-tomcat-5.5.26.zip [zip]
    *  doc: &quot;The Tomcat application server.&quot;
    *  name: &quot;apache-tomcat-5.5.26.zip&quot;
    *  order: &quot;Package&quot;
    *  package-arch: &quot;noarch&quot;
    *  package-base: &quot;apache-tomcat-5.5.26&quot;
    *  package-buildtime: &quot;2008061570109&quot;
    *  package-filename: &quot;apache-tomcat-5.5.26.zip&quot;
    *  package-filetype: &quot;zip&quot;
    *  package-install-rank: &quot;&quot;
    *  package-install-root: &quot;${resource.deployment-basedir}&quot;
    *  package-release: &quot;&quot;
    *  package-release-tag: &quot;&quot;
    *  package-repo-url: &quot;http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/apache-tomcat-5.5.26.zip&quot;
    *  package-restart: &quot;false&quot;
    *  package-vendor: &quot;&quot;
    *  package-version: &quot;5.5.26&quot;
    *  type: &quot;zip&quot;
- - -
[/MULTI_LINE]
Deleting: /home/alexh/ctier/ctl/projects/demo/resources/Service/tomcat1/var/resource.properties-801978448.tmp
&lt;/pre&gt;

You see general information, attribute values, and child-dependencies. You can see in the example output above that the apache-tomcat-5.5.26.zip [zip] object is a child dependency.
This means the &quot;Packages-Install&quot; command will ensure to install the package.

===Deploy===

====CLI====

To deploy the packages to the local host run:
&lt;pre&gt;
ctl -p demo -t Service -r tomcat1 -c Deploy
begin workflow command (1/4) -&gt; &quot;Stop &quot; ...
begin workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot; ...
end workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot;
end workflow command (1/4) -&gt; &quot;Stop &quot;
begin workflow command (2/4) -&gt; &quot;Packages-Install &quot; ...
Start: &quot;Install the configured package dependencies for the deployment.&quot; Beginning installation for packages:   apache-tomcat-5.5.26.zip[zip] ...
Dispatching command 'assertPackageIsVerified' to objects: apache-tomcat-5.5.26.zip[zip] ...
starting: apache-tomcat-5.5.26.zip[zip]-&gt;assertPackageIsVerified ...
Getting: http://strongbad:8080/jackrabbit/repository/controltier/projects/demo/publish/modules/zip-head.jar
To: /home/alexh/ctier/ctl/var/tmp/downloads/demo/zip-head.jar
Not modified - so not downloaded
zip up to date
Packages-Install invoking: apache-tomcat-5.5.26.zip[zip]-&gt;Install -installroot /demo/apache-tomcat-5.5.26
Start: &quot;Install object and run the package installation cycle.&quot; commands: assertPackageIsInstalled
begin workflow command (1/1) -&gt; &quot;assertPackageIsInstalled -installroot /demo/apache-tomcat-5.5.26&quot; ...
Executing ant file: /home/alexh/ctier/ctl/projects/demo/modules/Package/bin/is-installed.xml
Running handler command: installPackage
begin workflow command (1/5) -&gt; &quot;installDependencies -filename apache-tomcat-5.5.26.zip -installroot /demo/apache-tomcat-5.5.26 
-url http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/apache-tomcat-5.5.26.zip&quot; ...
Dispatching command 'Install' to objects:  ...
end workflow command (1/5) -&gt; &quot;installDependencies -filename apache-tomcat-5.5.26.zip -installroot /demo/apache-tomcat-5.5.26 
-url http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/apache-tomcat-5.5.26.zip&quot;
begin workflow command (2/5) -&gt; &quot;prepare -filename apache-tomcat-5.5.26.zip -installroot /demo/apache-tomcat-5.5.26 
-url http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/apache-tomcat-5.5.26.zip&quot; ...
end workflow command (2/5) -&gt; &quot;prepare -filename apache-tomcat-5.5.26.zip -installroot /demo/apache-tomcat-5.5.26 
-url http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/apache-tomcat-5.5.26.zip&quot;
begin workflow command (3/5) -&gt; &quot;get -filename apache-tomcat-5.5.26.zip -installroot /demo/apache-tomcat-5.5.26 
-url http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/apache-tomcat-5.5.26.zip&quot; ...
Created dir: /demo/apache-tomcat-5.5.26
Getting: http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/apache-tomcat-5.5.26.zip
To: /demo/apache-tomcat-5.5.26/apache-tomcat-5.5.26.zip
end workflow command (3/5) -&gt; &quot;get -filename apache-tomcat-5.5.26.zip -installroot /demo/apache-tomcat-5.5.26 
-url http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/apache-tomcat-5.5.26.zip&quot;
begin workflow command (4/5) -&gt; &quot;extract -filename apache-tomcat-5.5.26.zip -installroot /demo/apache-tomcat-5.5.26 
-url http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/apache-tomcat-5.5.26.zip&quot; ...
Expanding: /demo/apache-tomcat-5.5.26/apache-tomcat-5.5.26.zip into /demo/apache-tomcat-5.5.26
end workflow command (4/5) -&gt; &quot;extract -filename apache-tomcat-5.5.26.zip -installroot /demo/apache-tomcat-5.5.26
 -url http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/apache-tomcat-5.5.26.zip&quot;
begin workflow command (5/5) -&gt; &quot;finish -filename apache-tomcat-5.5.26.zip -installroot /demo/apache-tomcat-5.5.26 
-url http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/apache-tomcat-5.5.26.zip&quot; ...
Deleting: /demo/apache-tomcat-5.5.26/apache-tomcat-5.5.26.zip
end workflow command (5/5) -&gt; &quot;finish -filename apache-tomcat-5.5.26.zip -installroot /demo/apache-tomcat-5.5.26 
-url http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/apache-tomcat-5.5.26.zip&quot;
end workflow command (1/1) -&gt; &quot;assertPackageIsInstalled -installroot /demo/apache-tomcat-5.5.26&quot;
[command.timer.default.Package.Install: 7.152 sec]
Workflow completed. execution time: 7.152 sec
Executing script: /home/alexh/ctier/ctl/projects/demo/modules/Package/bin/is-verified.xml ...
Package is VERIFIED
Completed: Installed packages:   apache-tomcat-5.5.26.zip[zip]
end workflow command (2/4) -&gt; &quot;Packages-Install &quot;
begin workflow command (3/4) -&gt; &quot;Configure &quot; ...
begin workflow command (1/1) -&gt; &quot;Docs-Generate &quot; ...
end workflow command (1/1) -&gt; &quot;Docs-Generate &quot;
end workflow command (3/4) -&gt; &quot;Configure &quot;
begin workflow command (4/4) -&gt; &quot;Start &quot; ...
begin workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot; ...
end workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot;
end workflow command (4/4) -&gt; &quot;Start &quot;
&lt;/pre&gt;

...or to multiple hosts using node dispatching:

&lt;pre&gt;
ctl -I &quot;.*&quot; -p demo -t Service -r tomcat1 -c Deploy
.
.
.
&lt;/pre&gt;

====GUI====

You can execute the command shown above using JobCenter GUI. Go to the JobCenter webapp. Click the &quot;Create a new job&quot; button. Choose your project and then press the &quot;Execute a Defined Command&quot; radio button. Scroll down the list box and locate the &quot;Service&quot; type and then click the &quot;tomcat1&quot; object. This will load the commands list box. Scroll down and click the &quot;Deploy&quot; command.

Configure the node dispatch option and then press &quot;Run&quot;. Of course, you can save this job to run at a later time, if desired.

==Connecting deployment to startup and shutdown==

You may have existing scripts to manage startup and shutdown that you would like to incorporate into the deployment process.

See the [[Custom service scripts]] page to configure your Service to call your scripts.

{{Manual/navbox}}

[[Category:Service Examples]]
[[Category:Package Examples]]
[[Category:Screencasts]]</text>
    </revision>
  </page>
  <page>
    <title>Deployment</title>
    <id>1074</id>
    <redirect />
    <revision>
      <id>10082</id>
      <timestamp>2009-12-11T15:40:59Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[Category:Deployment]]</comment>
      <text xml:space="preserve">#REDIRECT [[:Category:Deployment]]</text>
    </revision>
  </page>
  <page>
    <title>Deployment Concepts</title>
    <id>1640</id>
    <redirect />
    <revision>
      <id>11143</id>
      <timestamp>2009-12-14T02:25:48Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>moved [[Deployment Concepts]] to [[Deployment design pattern]]</comment>
      <text xml:space="preserve">#REDIRECT [[Deployment design pattern]]</text>
    </revision>
  </page>
  <page>
    <title>Deployment Settings and Attributes</title>
    <id>741</id>
    <revision>
      <id>10264</id>
      <timestamp>2009-12-11T18:53:46Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;noinclude&gt;&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Deployment&lt;/categorytree&gt;&lt;/noinclude&gt;
= Overview =

This document describes the predefined Setting subtypes and their declared Attribute names that are associated with the [[Core Type Guide#Deployment|Deployment]] type.

Complete reference documentation for these related types are here:

* [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Deployment.html#related_types Deployment Reference - related types]

= Settings =

{| border=&quot;1px solid #aaa&quot; cellpadding=&quot;5&quot; cellspacing=&quot;0&quot;
    ! Setting !! attribute !! purpose
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Deployment.html#type_DefaultAllowMultiplePackageMatches DefaultAllowMultiplePackageMatches] || ''defaultAllowMultiplePackageMatches'' || A setting to configure the default allowmultiple command option used by runChangeDependencies
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Deployment.html#type_DefaultDeploymentType DefaultDeploymentType] || ''defaultDeploymentType'' || A setting to configure the default Deployment type used by runChangeDependencies
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Deployment.html#type_DefaultFailIfPackageNotReplaced DefaultFailIfPackageNotReplaced] || ''defaultFailIfPackageNotReplaced'' || A setting to configure the default failIfNotReplaced command option used by runChangeDependencies
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Deployment.html#type_DefaultPackageName DefaultPackageName] || ''defaultPackageName'' || A setting to configure the default Package name used by Change-Dependencies
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Deployment.html#type_DefaultPackageProximity DefaultPackageProximity] || ''defaultPackageProximity'' || A setting to configure the default package dependency proximity
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Deployment.html#type_DefaultPackageType DefaultPackageType] || ''defaultPackageType'' || A setting to configure the default Package type used by runChangeDependencies
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Deployment.html#type_DeploymentErrorNotificationRecipient DeploymentErrorNotificationRecipient] || ''errorNotificationRecipient'' || A setting defining recipients of error notications 
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Deployment.html#type_DeploymentSuccessNotificationRecipient DeploymentSuccessNotificationRecipient] || ''successNotificationRecipient'' || A setting defining recipients of success notications 
|}
{{Attributes Reference Footer}}

[[Category:Deployment]]</text>
    </revision>
  </page>
  <page>
    <title>Deployment Type Guide</title>
    <id>1087</id>
    <revision>
      <id>12056</id>
      <timestamp>2009-12-20T16:48:50Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Types&lt;/categorytree&gt;
[[Image:Edit-find.svg|left|86px|Technical documentation]]

Deployment types represent a set of design patterns providing a framework to manage build and deployment processes. If you are interested in applying these patterns to solve your automation needs, be sure to read the [[Methodology]] page as it will help guide you.

The Deployment layer builds on the [[Base Type Guide|base types]] providing a number of types that define commands and workflows for managing the end-to-end application life cycle. 

{{Type guide/deployment}}

[[Category:Types]]</text>
    </revision>
  </page>
  <page>
    <title>Deployment Type Reference</title>
    <id>185</id>
    <revision>
      <id>13799</id>
      <timestamp>2010-11-10T15:12:07Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;object name&quot; to &quot;resource name&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Types&lt;/categorytree&gt;
=Description=
      &lt;p&gt;
	The Deployment data type represents an object of a Deployment base type.
      &lt;/p&gt;
   
=Attributes=
      &lt;table class=&quot;wikitable&quot;&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;name&lt;/td&gt;&lt;td&gt;The resource name.&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;type&lt;/td&gt;&lt;td&gt;The object type name.&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;maprefuri&lt;/td&gt;&lt;td&gt;The maprefUri&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;description&lt;/td&gt;&lt;td&gt;The object description.&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;includeExistingResources&lt;/td&gt;&lt;td&gt;Boolean flag specifying
	  whether to merge included entities with existing child
	  resources. &lt;/td&gt;&lt;td&gt;No, defaults to true.&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;basedir&lt;/td&gt;&lt;td&gt;The base directory.&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;
    
=Nested elements=

      &lt;p&gt;
	Uses one or more [[EntityReference Type Reference|entityreference]] elements
	to represent child resources.
      &lt;/p&gt;

=Examples=

     &lt;p&gt;
       Shows Deployment data type used in the [[ObjectUpdate Task Reference|object-update]] Ant
       task. 
      &lt;/p&gt;
      &lt;pre&gt;
	&amp;lt;object-update depot=&quot;${resource.depot}&quot;
                       resultproperty=&quot;result&quot;
                       comment=&quot;Updated myDeployment object.&quot;&amp;gt;
          &amp;lt;deployment maprefUri=&quot;http://www.opendepo.rog/DepOnt#DeploymentSubtype_myDeployment&quot;
                    name=&quot;myDeployment&quot;
                    type=&quot;DeploymentSubtype&quot;
                    description=&quot;my descriptive text.&quot;
	            basedir=&quot;/my/base/directory&quot;
	            includeExistingResources=&quot;false&quot;&amp;gt;

            &amp;lt;entityreference maprefuri=&quot;${resource.mapref-uri}&quot;/&amp;gt;
            &amp;lt;entityreference maprefuri=&quot;http://www.opendepo.org/DepOnt#SomeType_19&quot; /&amp;gt;

          &amp;lt;/deployment&amp;gt;
	&amp;lt;/object-update&amp;gt;
      &lt;/pre&gt;

&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Resource model Ant Types]]
[[Category:Deployment]]</text>
    </revision>
  </page>
  <page>
    <title>Deployment design pattern</title>
    <id>701</id>
    <revision>
      <id>11142</id>
      <timestamp>2009-12-14T02:25:48Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>moved [[Deployment Concepts]] to [[Deployment design pattern]]</comment>
      <text xml:space="preserve">&lt;noinclude&gt;&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Deployment&lt;/categorytree&gt;&lt;/noinclude&gt;
= Intent =

* Define an object that encapsulates the life-cycle of software deployment.
* Separate the concerns of software installation from software configuration.
* Encourage abstracting software deployments so that a single definition can be used in multiple environment contexts.

= Problem =
We want to design a reusable software deployment procedures, but dependencies between software packages and environment-specific configuration demonstrate that an inflexible &amp;quot;hard-coded&amp;quot; result often ensues.

= Discussion =

The post development application life-cycle is dominated by migrating software from one environment to another. Primarily, the migration tasks fall into two categories:

* software installation: locating and distributing the needed files to the designated host
* configuration setup: customizing the software installation using the needed application and environment specific parameters

Because a software deployment can differ depending on context, the installer must often be aware of both the constant and variable details and then mentally translate the steps of the deployment process accordingly. The figure below illustrates the different dimensions of information a person deploying an application must consider.

[[Image:deployment-discussion-problem.png|problem]]

The differences between deployments within their specific application environment context undermine a desirable goal to have a single procedure that can be used anywhere in any environment and any software version. This jumble of configuration and procedural information seem intertwined and difficult to separate.

An alternate approach would be to introduce an abstraction of deployment that breaks the configuration and installation problem into separate concerns and encapsulate the contextual application environment differences.

This offers several advantages: Configuration and installation are decoupled from one another, many mappings between environment contexts and configuration and installation can be maintained and the entire deployment procedure can be extended by defining derived classes.

[[Image:deployment-discussion-solution.png|solution]]

Further, the deployment abstraction defines a standard structure for software deployment as well as, a standard deployment life-cycle.

As a standard structure, the deployment abstraction accounts for key parameters like installation root and deployment base directory, two properties which may be the same in some cases, but should be separable to distinguish directories where static executable files reside from those where runtime files supporting configuration and logging exist. 

Along similar lines, the deployment structure organizes dependency, configuration and environment information into a mapped context that facilitates abstracting configuration files and procedures. The abstracted configuration and procedures can then take form as template files increasing their reuse and decreasing the maintenance of environment specific variations.

Finally, the deployment abstraction defines a standard update life-cycle for the deployment processes promoting the configuration and installation steps into formalized and standard operations. 

= Example =

The Deployment type defines an object that maintains environment and dependency context, as well as, one that coordinates the installation and configuration processes. A deployment of an Apache web server is a simple yet representative scenario wherein a set of package dependencies, configuration files and environment specific parameters must be combined to produce a working httpd deployment. 

The figure below illustrates these parts. A Deployment named &amp;quot;apache&amp;quot; is defined to depend on two packages - httpd-2.0.1.tgz and mod_jk.zip, and corresponding configuration files, httpd.conf and jk.conf. The environment specific context is provided to the Deployment object which in turn uses it when parameterizing the configuration and package installation steps.

[[Image:deployment-example.png|example]]

= Structure =

The deployment abstraction breaks down into a common design pattern comprised of several types:

* Deployment: provides parameters and procedures that govern the deployment life-cycle.
* [[Core Type Guide#Package|Package]]: encapsulates the package format specific installation procedures (e.g., extraction and verification).
* Document: encapsulate the generation of configuration files from templates.

[[Image:deployment-structure.png|structure]]

= Check List =

# Identify the package dependencies and configuration files required for the deployment
# Discern the parameters that differ across environments that affect the configuration and installation process.
# Encapsulate those parameters as attributes of a new class of Deployment.
# Delegate the package installation and doc generation to objects of those types.

= Related Types =

* [[Package Concepts]]

Supertype:

* [[Managed-Entity Concepts]]

Subtypes:

* [[Builder Concepts]]
* [[Mediator Concepts]]
* [[Service Concepts]]

{{Core Type Guide Linkback}}

[[Category:Deployment]]</text>
    </revision>
  </page>
  <page>
    <title>Deployments.properties</title>
    <id>1967</id>
    <redirect />
    <revision>
      <id>14052</id>
      <timestamp>2010-11-10T15:32:29Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>moved [[Deployments.properties]] to [[Resources.properties]]</comment>
      <text xml:space="preserve">#REDIRECT [[Resources.properties]]</text>
    </revision>
  </page>
  <page>
    <title>Depot.properties</title>
    <id>1968</id>
    <redirect />
    <revision>
      <id>14080</id>
      <timestamp>2010-11-10T15:34:06Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>moved [[Depot.properties]] to [[Project.properties]]</comment>
      <text xml:space="preserve">#REDIRECT [[Project.properties]]</text>
    </revision>
  </page>
  <page>
    <title>Developer Guide</title>
    <id>1054</id>
    <redirect />
    <revision>
      <id>10196</id>
      <timestamp>2009-12-11T17:54:09Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[User Guide]]</comment>
      <text xml:space="preserve">#REDIRECT [[User Guide]]</text>
    </revision>
  </page>
  <page>
    <title>Developer Index</title>
    <id>1132</id>
    <revision>
      <id>10195</id>
      <timestamp>2009-12-11T17:52:57Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">
[[Image:Crystal_Clear_app_tutorials.png|right|150]]
{{architect_index}}</text>
    </revision>
  </page>
  <page>
    <title>Developer Reference</title>
    <id>1037</id>
    <redirect />
    <revision>
      <id>10193</id>
      <timestamp>2009-12-11T17:52:02Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[Reference]]</comment>
      <text xml:space="preserve">#REDIRECT [[Reference]]</text>
    </revision>
  </page>
  <page>
    <title>Development</title>
    <id>1667</id>
    <redirect />
    <revision>
      <id>11238</id>
      <timestamp>2009-12-14T19:02:30Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[Category:Development]]</comment>
      <text xml:space="preserve">#REDIRECT [[:Category:Development]]</text>
    </revision>
  </page>
  <page>
    <title>Development planning</title>
    <id>1322</id>
    <redirect />
    <revision>
      <id>10736</id>
      <timestamp>2009-12-12T21:07:48Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[Category:Development]]</comment>
      <text xml:space="preserve">#REDIRECT [[:Category:Development]]</text>
    </revision>
  </page>
  <page>
    <title>Development scope (Vandelay)</title>
    <id>1876</id>
    <redirect />
    <revision>
      <id>16646</id>
      <timestamp>2012-02-23T15:41:49Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Undo revision 15456 by [[Special:Contributions/Danalovett|Danalovett]] ([[User talk:Danalovett|talk]]) Reverting SPAM bot edits</comment>
      <text xml:space="preserve">#REDIRECT [[3-5 Development]]</text>
    </revision>
  </page>
  <page>
    <title>Dispatch-command Task Reference</title>
    <id>142</id>
    <revision>
      <id>16366</id>
      <timestamp>2012-02-08T15:16:53Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <comment>Undo revision 15648 by [[Special:Contributions/Janwalls|Janwalls]] ([[User talk:Janwalls|talk]]). Reason: SPAM bot</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Tasks&lt;/categorytree&gt;

=Description=

      &lt;p&gt;
	dispatch-command iterates over the results of a context selector
	and calls the named command with selected paramaters.
      &lt;/p&gt;
      &lt;p&gt;Selectors are specified as nested elements, you
      must specify exactly one. The selectors are any data type
      that implements the &lt;code&gt;IDispatchContextSelector&lt;/code&gt; java interface.
      &lt;/p&gt;
  
To define a dispatch-command via XML and ProjectBuilder see [[Type.xml#dispatch-command]].
=Attributes=

      &lt;table class=&quot;wikitable&quot;&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;name&lt;/td&gt;&lt;td&gt;Workflow name&lt;/td&gt;&lt;td&gt;Yes. Defaults to ${command.name}&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;macro&lt;/td&gt;&lt;td&gt;Name of macro to execute for before the call to the specified command.
	  If a macro name is specified but has not been declared it is ignored.&lt;/td&gt;&lt;td&gt;No, Defaults to &lt;code&gt;dispatch-command-macro&lt;/code&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;requirematch&lt;/td&gt;&lt;td&gt;Requires one or more matches. The task will fail if no match is made.&lt;/td&gt;&lt;td&gt;No. Defaults to &quot;true&quot;&lt;/td&gt;
	&lt;/tr&gt;

	&lt;tr&gt;
	  &lt;td&gt;strategy&lt;/td&gt;&lt;td&gt;Execution strategy&lt;/td&gt;&lt;td&gt;Yes. &lt;code&gt;localdispatch&lt;/code&gt; or &lt;code&gt;nodedispatch&lt;/code&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;threadcount&lt;/td&gt;&lt;td&gt;Number of threads to execute the workflow&lt;/td&gt;&lt;td&gt;No, Any integer greater than 0 (1 is default)&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;

=Parameters specified as nested elements=

      &lt;p&gt;&lt;strong&gt;errorhandler&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;This task can optionally use an errorhandler.
      If an error occurs during the course of the execution,
      the [[ErrorHandler Type Reference|errorhandler]] can
      be configured to handle the exception according to your specification.
      &lt;/p&gt;



      &lt;p&gt;&lt;strong&gt;selector&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
        This task requires an &lt;em&gt;[http://controltier.sourceforge.net/docs/snapshot/javadoc/ctl-dispatch/com/controltier/ctl/types/dispatch/IDispatchContextSelector.html IDispatchContextSelector]&lt;/em&gt;
	nested element. This datatype is responsible for selecting matching object contexts. 
	that will be the target of the dispatched command. Each implementation of
	the IDispatchContextSelector can lookup objects using its own algorithm.
	The task iterates over the matched objects and for each one executes the specified.
	command.
	One selector must be nested inside a &lt;code&gt;&amp;lt;context&amp;gt;&amp;lt;/context&amp;gt;&lt;/code&gt; tag set.
      &lt;/p&gt;
      &lt;p&gt;The table below describes the standard attributes and elements common to all selectors:
      &lt;/p&gt;
      &lt;table class=&quot;wikitable&quot;&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;sortkey&lt;/td&gt;&lt;td&gt;The sort key. All selectors support &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt;
	  sort keys.&lt;/td&gt;&lt;td&gt;true&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;sortorder&lt;/td&gt;&lt;td&gt;Sort order (ascending or descending).&lt;/td&gt;&lt;td&gt;Defaults to &lt;code&gt;ascending.&lt;/code&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;depot&lt;/td&gt;&lt;td&gt;Project project.&lt;/td&gt;&lt;td&gt;true.&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;


      &lt;p&gt;&lt;strong&gt;include element&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;Selectors can use an &lt;code&gt;include&lt;/code&gt; tag to specifie filter patterns to the selector:
      &lt;/p&gt;
      &lt;table class=&quot;wikitable&quot;&gt;
	&lt;tr&gt;
	  &lt;td&gt;name&lt;/td&gt;&lt;td&gt;Object name regex&lt;/td&gt;&lt;td&gt;yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;type&lt;/td&gt;&lt;td&gt;Type name regex&lt;/td&gt;&lt;td&gt;yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;th colspan=&quot;3&quot;&gt; Example &lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td colspan=&quot;3&quot;&gt;
	    &lt;code&gt; &amp;lt;include name=&quot;.*&quot; type=&quot;Managed-[A-Z]+&quot;/&amp;gt;&lt;/code&gt;
	  &lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;


      &lt;p&gt;The table below describes the three existing selectors:
      &lt;/p&gt;
      &lt;table class=&quot;wikitable&quot;&gt;
	&lt;tr&gt;
	  &lt;th&gt;select-resources&lt;/th&gt;&lt;th&gt;Selects from locally installed objects&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td colspan=&quot;2&quot;&gt;
	    &lt;syntaxhighlight&gt;
     &lt;context&gt;
	&lt;select-resources sortkey=&quot;name&quot; sortorder=&quot;ascending&quot; depot=&quot;${context.depot}&quot;&gt;
	  &lt;include name=&quot;.*&quot; type=&quot;Managed-Entity&quot;/&gt;
	&lt;/select-resources&gt;
     &lt;/context&gt;
	    &lt;/syntaxhighlight&gt;
	  &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;th&gt;select-deployments&lt;/th&gt;&lt;th&gt;Selects from registered objects in resources.properties&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td colspan=&quot;2&quot;&gt;
	    &lt;syntaxhighlight&gt;
     &lt;context&gt;
	&lt;select-deployments sortkey=&quot;name&quot; sortorder=&quot;ascending&quot; depot=&quot;${context.depot}&quot;&gt;
	  &lt;include name=&quot;me[0-9]+&quot; type=&quot;Managed-Entity&quot;/&gt;
	&lt;/select-deployments&gt;
     &lt;/context&gt;
	    &lt;/syntaxhighlight&gt;
	  &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;th&gt;select-dependencies&lt;/th&gt;&lt;th&gt;Selects from object dependency data&lt;/th&gt;
	&lt;/tr&gt;
        &lt;tr&gt;
           &lt;td colspan=&quot;2&quot;&gt;Attributes&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
           &lt;td&gt;source&lt;/td&gt;&lt;td&gt;&quot;context&quot; (default) or &quot;file&quot;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
           &lt;td&gt;file&lt;/td&gt;&lt;td&gt;path to the property file&lt;/td&gt;
        &lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td colspan=&quot;2&quot;&gt;This selector supports an open ended set of sortkey values 
	  typicaly of dependency data. The selector looks at the fourth string in
	  the given the format: &lt;em&gt;relationtype.type.name.sortkey&lt;/em&gt;. For example,
	  &amp;quot;startup-rank&amp;quot; can be used as the sort key for this property:
	  &lt;code&gt;deployment.Service.me1.startup-rank&lt;/code&gt;.
	  &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td colspan=&quot;2&quot;&gt;
	  &lt;syntaxhighlight&gt;
    &lt;!-- Define dependency data in the current command context --&gt;
    &lt;!-- format: relationtype.type.name.sortkey = value --&gt;

    &lt;property name=&quot;deployment.Service.me1.startup-rank&quot; value=&quot;1&quot;/&gt;
    &lt;property name=&quot;deployment.Service.me2.startup-rank&quot; value=&quot;2&quot;/&gt;

    &lt;context&gt;
	&lt;select-dependencies sortkey=&quot;startup-rank&quot; depot=&quot;${context.depot}&quot;
			     sortorder=&quot;descending&quot;
			     relationtypes=&quot;deployment&quot; source=&quot;context&quot;&gt;
	  &lt;include name=&quot;me.*&quot; type=&quot;[^.]*&quot;/&gt;
	&lt;/select-dependencies&gt;
    &lt;/context&gt;
	  &lt;/syntaxhighlight &gt;
	  &lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;

=Examples=
 

      &lt;p&gt;Example: select-dependencies&lt;/p&gt;
     &lt;p&gt;
        This example shows the use of the &lt;code&gt;select-dependencies&lt;/code&gt; selector
	to dispatch the Install command using &amp;quot;package-install-rank&amp;quot; as the sort key:
      &lt;/p&gt;

      &lt;pre&gt;
	&amp;lt;!-- define three package object dependencies --&amp;gt;
	&amp;lt;property name=&quot;package.war.headlines-1.0.package-install-rank&quot; 
	    value=&quot;3&quot;/&amp;gt;
	&amp;lt;property name=&quot;package.jar.hncore-1.2.package-install-rank&quot; 
            value=&quot;2&quot;/&amp;gt;
	&amp;lt;property name=&quot;package.zip.jakarta-tomcat-4.1.31.package-install-rank&quot; 
            value=&quot;1&quot;/&amp;gt;

	&amp;lt;!-- 
	  ** select the resources based on include patterns 
	  ** and sort by package-install-rank 
	  --&amp;gt;
	&amp;lt;dispatch-command name=&quot;Packages-Install&quot; requirematch=&quot;false&quot;&amp;gt;
	  &amp;lt;command name=&quot;Install&quot;/&amp;gt;
	  &amp;lt;arg line=&quot;&quot;/&amp;gt;
	  &amp;lt;contexts&amp;gt;
            &amp;lt;select-dependencies source=&quot;context&quot; 
	         sortkey=&quot;package-install-rank&quot; sortorder=&quot;ascending&quot;
		 depot=&quot;${context.depot}&quot;
		 &amp;gt;
	         &amp;lt;include name=&quot;.*&quot; type=&quot;(?:war|jar|zip)&quot;/&amp;gt;
	       &amp;lt;/select-dependencies&amp;gt;
	  &amp;lt;/contexts&amp;gt;
	&amp;lt;/dispatch-command&amp;gt;
      &lt;/pre&gt;


      &lt;p&gt;Example: select-deployments&lt;/p&gt;

      &lt;p&gt;
        This example shows the use of the &lt;code&gt;select-deployments&lt;/code&gt; selector
	to dispatch the Install command:
      &lt;/p&gt;
      &lt;p&gt;resources.properties content:&lt;/p&gt;
      &lt;pre&gt;
object-deployment.default.SimpleAntBuilder.tutorial=build-1
object-deployment.default.SimpleApacheService.tutorial=web-1
object-deployment.default.SimpleTomcatService.simple=app-1
object-deployment.default.Site.simple=adminhost
object-deployment.default.Updater.simple=adminhost
      &lt;/pre&gt;
      &lt;pre&gt;
	&amp;lt;dispatch-command name=&quot;Deploy&quot; requirematch=&quot;false&quot;&amp;gt;
	  &amp;lt;command name=&quot;Deploy&quot;/&amp;gt;
	  &amp;lt;arg line=&quot;&quot;/&amp;gt;
	  &amp;lt;contexts&amp;gt;
            &amp;lt;select-deployments 
	         sortkey=&quot;type&quot; sortorder=&quot;ascending&quot;
		 depot=&quot;${context.depot}&quot;
		 &amp;gt;
	         &amp;lt;include name=&quot;.*&quot; type=&quot;(?:SimpleTomcatService|SimpleApacheService)&quot;/&amp;gt;
	       &amp;lt;/select-deployments&amp;gt;
	  &amp;lt;/contexts&amp;gt;
	&amp;lt;/dispatch-command&amp;gt;
      &lt;/pre&gt;

&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Command Dispatcher Ant Tasks]]</text>
    </revision>
  </page>
  <page>
    <title>DispatchAction Task Reference</title>
    <id>971</id>
    <redirect />
    <revision>
      <id>5307</id>
      <timestamp>2009-05-22T19:54:18Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>[[DispatchAction Task Reference]] moved to [[Dispatch-command Task Reference]]: Renamed to match task name</comment>
      <text xml:space="preserve">#REDIRECT [[Dispatch-command Task Reference]]</text>
    </revision>
  </page>
  <page>
    <title>Dispatch command</title>
    <id>1634</id>
    <redirect />
    <revision>
      <id>11001</id>
      <timestamp>2009-12-13T16:28:29Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[Category:Dispatch commands]]</comment>
      <text xml:space="preserve">#REDIRECT [[:Category:Dispatch_commands]]</text>
    </revision>
  </page>
  <page>
    <title>Dispatch command and macro</title>
    <id>344</id>
    <revision>
      <id>14129</id>
      <timestamp>2010-11-10T15:55:39Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;ctl-depot&quot; to &quot;ctl-project&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Defined Commands&lt;/categorytree&gt;

This page describes how to define a command using the &quot;DispatchCommand&quot; handler type that dispatches a command and invokes a macro before each command execution.

==Create or choose type==

You can add the command to an existing type definition or you can use [[ProjectBuilder]] to create a new type. This example uses Deployment's &quot;Packages-Install&quot; command.

==Edit Type definition==
This example shows the Deployment type's definition for the &quot;Packages-Install&quot; command. You can view this
file in your CTL install: $CTL_BASE/modules/Deployment/type.xml

You will notice the Status command-type attribute is set to &lt;code&gt;DispatchCommand&lt;/code&gt;
and there are several sets of nested tags:
* opts: this defines the command's option set
* error-handler: this defines what do if an error occurs
* success-handler: defines a notification upon successful completion
* dispatch-command: this specifies the target objects to dispatch the Status command.
Additionally, there are 
* property-default&quot; tags, which define defaults for the dispatch-command tags.

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;types xmlns:cmd=&quot;http://open.controltier.com/base/Modules/Commands#&quot; 
             xmlns:module=&quot;http://open.controltier.com/base/Modules#&quot; 
             xmlns:type=&quot;http://open.controltier.com/base/Types#&quot;&gt;
  &lt;type role=&quot;concrete&quot; uniqueInstances=&quot;true&quot; name=&quot;Site&quot;&gt;
    ...
    &lt;commands&gt;
      ...
      &lt;command name=&quot;Packages-Install&quot; 
	       description=&quot;Install the configured package dependencies for the deployment.&quot;
	       command-type=&quot;DispatchCommand&quot;  error-handler-type=&quot;FAIL&quot;&gt;
	&lt;property-default override=&quot;false&quot; property=&quot;opts.resourcetype&quot; 
			  from=&quot;resource.attribute.defaultPackageType&quot; default=&quot;[^\.]*&quot;/&gt;
	&lt;property-default override=&quot;false&quot; property=&quot;opts.packageproximity&quot; 
			  from=&quot;resource.attribute.defaultPackageProximity&quot; default=&quot;1&quot;/&gt;
	&lt;dispatch-command threadcount=&quot;1&quot; requirematch=&quot;false&quot; strategy=&quot;localdispatch&quot;&gt;
	  &lt;command name=&quot;assertPackageIsVerified&quot;/&gt;
	  &lt;arg line=&quot;&quot; /&gt;
	  &lt;contexts&gt;
	    &lt;select-dependencies sortkey=&quot;package-install-rank&quot; sortorder=&quot;ascending&quot; relationtype=&quot;Package&quot;&gt;
	      &lt;include type=&quot;${opts.resourcetype}&quot; name=&quot;.*&quot;/&gt;
	    &lt;/select-dependencies&gt;
	  &lt;/contexts&gt;
	&lt;/dispatch-command&gt;
	&lt;opts&gt;
	  &lt;opt parameter=&quot;resourcetype&quot; description=&quot;type name or type name regex of packages to install&quot; 
	       required=&quot;false&quot; property=&quot;opts.resourcetype&quot; type=&quot;string&quot; 
	       default=&quot;[^\.]*&quot;/&gt;
	  &lt;opt parameter=&quot;packageproximity&quot; description=&quot;package resource proximity&quot; 
	       required=&quot;false&quot; property=&quot;opts.packageproximity&quot; type=&quot;string&quot; 
	       default=&quot;1&quot; defaultproperty=&quot;resource.attribute.defaultPackageProximity&quot;/&gt;
	  &lt;opt parameter=&quot;buildstamp&quot; description=&quot;build identifer. currently ignored&quot;
	       required=&quot;false&quot; property=&quot;opts.buildstamp&quot; type=&quot;string&quot;/&gt;
	&lt;/opts&gt;
	
      &lt;/command&gt;    
     ...
   &lt;/commands&gt;
  &lt;/type&gt;
&lt;/types&gt;
&lt;/syntaxhighlight&gt;

==Build the type==

If you are defining your own type build and upload it to the server:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m ProjectBuilder -c build-type -- -type type -upload
&lt;/syntaxhighlight&gt;

==Define the macro==
The build-type command will generate the XML handler for the command. The next step is to define the macro called by dispatch-command before each execution of the &quot;assertPackageIsVerified&quot; command.

You can see an example in the Packages-Install.xml file below. This macro does a couple things:
* makes sure the Package resource's module is installed
* then calls the Package &quot;Install&quot; command

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
  &lt;macrodef name=&quot;dispatch-command-macro&quot;&gt; 
    &lt;attribute name=&quot;name&quot;/&gt;  
    &lt;attribute name=&quot;type&quot;/&gt;  
    &lt;attribute name=&quot;depot&quot;/&gt;  
    &lt;sequential&gt; 
      &lt;!--
	  **
	  ** Lookup the Pacakge object's installroot, evaluating it in
	  ** this Deployment object's data context, ensuring property expansion.
	  **
      --&gt;  
      &lt;package-property resultproperty=&quot;package.installroot&quot; 
                     type=&quot;@{type}&quot; name=&quot;@{name}&quot; field=&quot;package-install-root&quot;/&gt;  
      &lt;echo level=&quot;verbose&quot;&gt;Set package.installroot=${package.installroot}&lt;/echo&gt;  
      &lt;!--
	  **
	  ** Run the Install-Module command for the Package
	  **
      --&gt;  
      &lt;controller&gt; 
        &lt;execute&gt; 
          &lt;context depot=&quot;${context.depot}&quot;/&gt;  
          &lt;command name=&quot;Install-Module&quot; module=&quot;Managed-Entity&quot;/&gt;  
          &lt;arg line=&quot;-module @{type}&quot;/&gt; 
        &lt;/execute&gt; 
      &lt;/controller&gt;  
      &lt;!--
	  **
	  ** Run the Install command passing in the expanded installroot.
	  ** This facilitates relocation via the Deployment.
	  ** The -nomodule is being passed since Install-Module already ran.
	  **
      --&gt;  
      &lt;echo level=&quot;info&quot;&gt;Packages-Install invoking: @{name}[@{type}]-&amp;gt;Install -installroot ${package.installroot}&lt;/echo&gt;  
      &lt;controller&gt; 
        &lt;execute&gt; 
          &lt;context depot=&quot;${context.depot}&quot; resourceName=&quot;@{name}&quot; resourceType=&quot;@{type}&quot;/&gt;  
          &lt;command name=&quot;Install&quot;/&gt;  
          &lt;arg line=&quot;-installroot ${package.installroot}&quot;/&gt;  
          &lt;property name=&quot;opts.nomodule&quot; value=&quot;false&quot;/&gt; 
        &lt;/execute&gt; 
      &lt;/controller&gt; 
    &lt;/sequential&gt; 
  &lt;/macrodef&gt;  
&lt;/syntaxhighlight&gt;

Run the build-type command again to package up the type:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m ProjectBuilder -c build-type -- -type type -upload
&lt;/syntaxhighlight&gt;

==Define resources==

The Status command uses the &lt;code&gt;select-dependencies&lt;/code&gt; tag to dispatch the command to the Site's Service and/or Mediator dependencies.
The [[project.xml]] file below describes an example setup in the DukesBank demo.

File listing: services.xml

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;!DOCTYPE project PUBLIC
        &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; &quot;project.dtd&quot;&gt;
&lt;project&gt;
&lt;deployment 
      type=&quot;JBossServer&quot;
      name=&quot;developmentDukesBank&quot; 
      description=&quot;JBossServer instance #1&quot; 
      installRoot=&quot;${env.CTIER_ROOT}/demo/elements/development/dukesbank/jboss-4.0.3SP1&quot; 
      basedir=&quot;${env.CTIER_ROOT}/demo/elements/development/dukesbank/jboss-4.0.3SP1/server/default&quot; &gt;
   &lt;referrers&gt;
      &lt;resource type=&quot;Node&quot; name=&quot;strongbad&quot;/&gt;
   &lt;/referrers&gt;
   &lt;resources&gt;
        &lt;resource type=&quot;JBossZip&quot; name=&quot;jboss-4.0.3SP1.zip&quot;/&gt;
   &lt;/resources&gt;
&lt;/deployment&gt;
&lt;/project&gt;
&lt;/syntaxhighlight&gt;

Load this data if necessary via the load-resources command:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m ProjectBuilder -c load-resources -- -filename services.xml
&lt;/syntaxhighlight&gt;

Likewise, if necessary, deploy the resources to CTL:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl-project -a install
&lt;/syntaxhighlight&gt;

==Run the command==

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -p dukesbank -c JBossServer -r developmentDukesBank -c Packages-Install
&lt;/syntaxhighlight&gt;

{{Manual/navbox}}

[[Category:Dispatch commands]]</text>
    </revision>
  </page>
  <page>
    <title>Dispatch command to dependencies</title>
    <id>343</id>
    <revision>
      <id>14130</id>
      <timestamp>2010-11-10T15:55:54Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;ctl-depot&quot; to &quot;ctl-project&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Defined Commands&lt;/categorytree&gt;

This page describes how to define a command using the &quot;DispatchCommand&quot; handler type. This command type is useful if you want to call a command across a set of child dependency objects.

==Create or choose type==

You can add the command to an existing type definition or you can use [[ProjectBuilder]] to create a new type. This example uses Site's &quot;Status&quot; command.

==Edit Type definition==
This example shows the Site type's definition for the &quot;Status&quot; command. You can view this
file in your CTL install: $CTL_BASE/modules/Site/type.xml

You will notice the Status command-type attribute is set to &lt;code&gt;DispatchCommand&lt;/code&gt;
and there are several sets of nested tags:
* opts: this defines the command's option set
* error-handler: this defines what do if an error occurs
* success-handler: defines a notification upon successful completion
* dispatch-command: this specifies the target objects to dispatch the Status command.
Additionally, there are 
* property-default&quot; tags, which define defaults for the dispatch-command tags.

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;types xmlns:cmd=&quot;http://open.controltier.com/base/Modules/Commands#&quot; 
             xmlns:module=&quot;http://open.controltier.com/base/Modules#&quot; 
             xmlns:type=&quot;http://open.controltier.com/base/Types#&quot;&gt;
  &lt;type role=&quot;concrete&quot; uniqueInstances=&quot;true&quot; name=&quot;Site&quot;&gt;
    ...
    &lt;commands&gt;
      ...
      &lt;command name=&quot;Status&quot; description=&quot;Call the Status command for the Services configured for the Site.&quot;
	       command-type=&quot;DispatchCommand&quot; error-handler-type=&quot;IGNORE&quot;&gt;
        &lt;opts&gt;
	  &lt;opt parameter=&quot;resourcename&quot; description=&quot;resource name pattern&quot; 
                    required=&quot;false&quot; property=&quot;opts.resourcename&quot; type=&quot;string&quot; /&gt;
	  &lt;opt parameter=&quot;resourcetype&quot; description=&quot;resource type name&quot; 
                    required=&quot;false&quot; property=&quot;opts.resourcetype&quot; type=&quot;string&quot; /&gt;
	  &lt;opt parameter=&quot;strategy&quot; description=&quot;dispatch execution strategy&quot;
                    required=&quot;false&quot; property=&quot;opts.strategy&quot; type=&quot;string&quot; /&gt;
	  &lt;opt parameter=&quot;buildstamp&quot; description=&quot;the build identifier&quot; 
                    required=&quot;false&quot; property=&quot;opts.buildstamp&quot; type=&quot;string&quot; /&gt;
        &lt;/opts&gt;
        &lt;error-handler&gt;
          &lt;report&gt;Workflow failed.&lt;/report&gt;
        &lt;/error-handler&gt;
        &lt;success-handler&gt;
          &lt;notify-subject&gt;[${context.type}:${context.name} @ ${framework.node.hostname}] ${command.name} - SUCCESS&lt;/notify-subject&gt;
          &lt;notify-message-file&gt;${modules.dir}/Deployment/templates/notice.html&lt;/notify-message-file&gt;
        &lt;/success-handler&gt;
	&lt;property-default override=&quot;false&quot; property=&quot;opts.resourcetype&quot; 
			  from=&quot;resource.attribute.dispatchResourceType&quot; default=&quot;[^\.]*&quot;/&gt;
	&lt;property-default override=&quot;false&quot; property=&quot;opts.resourcename&quot; 
			  from=&quot;resource.attribute.dispatchResourceName&quot; default=&quot;.*&quot;/&gt;
	&lt;property-default override=&quot;false&quot; property=&quot;opts.threadCount&quot; 
			  from=&quot;resource.attribute.threadCount&quot; default=&quot;1&quot;/&gt;
	&lt;property-default override=&quot;false&quot; property=&quot;opts.strategy&quot; 
			  from=&quot;resource.attribute.dispatchExecutionStrategy&quot; default=&quot;nodedispatch&quot;/&gt;
	&lt;dispatch-command threadcount=&quot;${opts.threadCount}&quot; requirematch=&quot;false&quot; strategy=&quot;${opts.strategy}&quot;&gt;
	  &lt;command name=&quot;Status&quot;/&gt;
	  &lt;arg line=&quot;&quot; /&gt;
	  &lt;contexts&gt;
	    &lt;select-dependencies sortkey=&quot;deployment-startup-rank&quot; 
                                                   sortorder=&quot;ascending&quot; relationtype=&quot;(?:Service|Mediator)&quot;&gt;
	      &lt;include type=&quot;${opts.resourcetype}&quot; name=&quot;${opts.resourcename}&quot;/&gt;
	    &lt;/select-dependencies&gt;
	  &lt;/contexts&gt;
	&lt;/dispatch-command&gt;	
      &lt;/command&gt;
    ...
   &lt;/commands&gt;
  &lt;/type&gt;
&lt;/types&gt;
&lt;/syntaxhighlight&gt;

==Build the type==

If you are defining your own type build and upload it to the server:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m ProjectBuilder -c build-type -- -type type -upload
&lt;/syntaxhighlight&gt;

==Define resources==

The Status command uses the &lt;code&gt;select-dependencies&lt;/code&gt; tag to dispatch the command to the Site's Service and/or Mediator dependencies.
The [[project.xml]] file below describes an example setup in the DukesBank demo.

File listing: services.xml

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;!DOCTYPE project PUBLIC
        &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; &quot;project.dtd&quot;&gt;
&lt;project&gt;
&lt;deployment 
      type=&quot;JBossServer&quot;
      name=&quot;developmentDukesBank&quot; 
      description=&quot;JBossServer instance #1&quot; 
      installRoot=&quot;${env.CTIER_ROOT}/demo/elements/development/dukesbank/jboss-4.0.3SP1&quot; 
      basedir=&quot;${env.CTIER_ROOT}/demo/elements/development/dukesbank/jboss-4.0.3SP1/server/default&quot; &gt;
   &lt;referrers&gt;
      &lt;resource type=&quot;Node&quot; name=&quot;strongbad&quot;/&gt;
   &lt;/referrers&gt;
&lt;/deployment&gt;
&lt;deployment 
      type=&quot;HsqldbRdb&quot;
      name=&quot;developmentDukesBank&quot; 
      description=&quot;JBossServer instance #2&quot; 
      installRoot=&quot;${env.CTIER_ROOT}/development/dukesbank/hsqldb&quot; 
      basedir=&quot;${env.CTIER_ROOT}/development/dukesbank/hsqldb&quot; &gt;
   &lt;referrers&gt;
      &lt;resource type=&quot;Node&quot; name=&quot;strongbad&quot;/&gt;
   &lt;/referrers&gt;
&lt;/deployment&gt;
&lt;deployment 
      type=&quot;Site&quot;
      name=&quot;developmentDukesBank&quot; 
      description=&quot;Site instance #1&quot; 
      installRoot=&quot;${resource.instance.dir}&quot; 
      basedir=&quot;${resource.instance.dir}&quot; &gt;
   &lt;referrers&gt;
      &lt;resource type=&quot;Node&quot; name=&quot;strongbad&quot;/&gt;
   &lt;/referrers&gt;
   &lt;resources&gt;
     &lt;resource type=&quot;Service&quot; name=&quot;service1&quot;/&gt;
     &lt;resource type=&quot;Service&quot; name=&quot;service2&quot;/&gt;
   &lt;/resources&gt;
&lt;/deployment&gt;

&lt;/project&gt;
&lt;/syntaxhighlight&gt;

Load this data if necessary via the load-resources command:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m ProjectBuilder -c load-resources -- -filename services.xml
&lt;/syntaxhighlight&gt;

Likewise, if necessary, deploy the resources to CTL:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl-project -a install
&lt;/syntaxhighlight&gt;

==Run the command==

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -p dukesbank -c Site -r developmentDukesBank -c Status
&lt;/syntaxhighlight&gt;

==See also==
* [[Dispatch command and macro]]

{{Manual/navbox}}

[[Category:Dispatch commands]]</text>
    </revision>
  </page>
  <page>
    <title>Dispatch command with options</title>
    <id>1323</id>
    <revision>
      <id>14131</id>
      <timestamp>2010-11-10T15:55:54Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;ctl-depot&quot; to &quot;ctl-project&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Defined Commands&lt;/categorytree&gt;


This page describes how to control option passing to delegated commands  via the [[:Category:Dispatch commands|DispatchCommand]]  command-type. In this scenario a caller's command dispatches another command to a set of matching child resources. There can be two kinds of options defined by the caller's command: 
# Dispatch parameters: options controlling which resources are selected to receive the command dispatch.
# Custom command options: additional options passed through to the receiver's command 

The example below shows a command called &quot;dispatchCommandA&quot; that will dispatch a command named &quot;commandA&quot; to a set of matching receivers. It shows the two kinds of options:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;ctl -p project -t type -r caller -c dispatchCommandA -- -resourcename receiver -arg1 val1 -arg2 val2&lt;/syntaxhighlight&gt;

The &quot;-resourcename receiver&quot; dispatch parameter specifies that only resources with the name &quot;receiver&quot; should be dispatched to, while the &quot;-arg1 val1 arg2 val2&quot; are custom options to be passed through to the command handled by the receiver. The example below shows how the receiver would have been invoked:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;ctl -p project -t type -r receiver -c commandA -- -arg1 val1 -arg2 val2&lt;/syntaxhighlight&gt;
	
The definition of a &quot;DispatchCommand&quot; type allows one to to control the options that are passed to the receivers. For example, it might be desirable to only pass a subset of options to the receiver. Using the earlier case, perhaps only &quot;-arg1 val1&quot; should be passed (maybe because -arg2 is not supported by the receiver). 
The needed behavior can be specified like this...

&lt;syntaxhighlight&gt;ctl -p project -t type -r caller -c dispatchCommandA -- -resourcename receiver -arg1 val1 -arg2 val2 -options arg1&lt;/syntaxhighlight&gt;

... resulting in a call like this (notice only -arg1 is passed but not -arg2):

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;ctl -p project -t type -r receiver -c commandA -- -arg1 val1&lt;/syntaxhighlight&gt;


==Define type and command definition for the caller==
This example defines a custom type called &quot;MySite&quot;, a subtype of [[Site]]. This type will dispatch a command called &quot;commandA&quot; to a set of associated objects.

You can add the command to an existing type definition or you can use [[ProjectBuilder]] to create a new type. This example creates the type, &quot;MySite&quot; using the &lt;code&gt;[http://controltier.sourceforge.net/docs/latest/core/reference/user/ProjectBuilder/commands/create-type.html create-type]&lt;/code&gt; command (accept the defaults when prompted).

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;ctl -p demo -m ProjectBuilder -c create-type -- -type MySite -supertype Site
	.
	.
	.
Define commands and attributes in this file: /Users/alexh/ctier/ctl/src/modules/MyService/type.xml		
&lt;/syntaxhighlight&gt;

Open the file generated by the &lt;code&gt;create-type&lt;/code&gt; command in your favorite editor: (eg, vi /Users/alexh/ctier/ctl/src/modules/MyService/type.xml)	

Copy and paste the XML shown in the listing below inside the &lt;code&gt;commands&lt;/code&gt; element.

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;command name=&quot;dispatchCommandA&quot; description=&quot;Dispatch commandA to matching receivers.&quot; 
         command-type=&quot;DispatchCommand&quot; error-handler-type=&quot;FAIL&quot;&gt;

    &lt;property-default override=&quot;false&quot; property=&quot;opts.resourceType&quot; from=&quot;resource.attribute.dispatchResourceType&quot; default=&quot;[^\.]*?&quot;/&gt;
    &lt;property-default override=&quot;false&quot; property=&quot;opts.resourceName&quot; from=&quot;resource.attribute.dispatchResourceName&quot; default=&quot;receiver.*&quot;/&gt;
    &lt;property-default override=&quot;false&quot; property=&quot;opts.threadCount&quot; from=&quot;resource.attribute.threadCount&quot; default=&quot;1&quot;/&gt;
    &lt;property-default override=&quot;false&quot; property=&quot;opts.options&quot; from=&quot;resource.attribute.dispatchOptionsCommandA&quot; default=&quot;arg1,arg2&quot;/&gt;

    &lt;dispatch-command threadcount=&quot;${opts.threadCount}&quot; requirematch=&quot;false&quot; strategy=&quot;nodedispatch&quot;&gt;
      &lt;command name=&quot;commandA&quot;/&gt;
      &lt;arg line=&quot;${opts.options}&quot;/&gt;
      &lt;contexts&gt;
        &lt;select-dependencies sortkey=&quot;deployment-startup-rank&quot; sortorder=&quot;ascending&quot; source=&quot;context&quot; relationtype=&quot;[^\.]*&quot;&gt;
          &lt;include name=&quot;${opts.resourceName}&quot; type=&quot;${opts.resourceType}&quot;/&gt;
        &lt;/select-dependencies&gt;
      &lt;/contexts&gt;
    &lt;/dispatch-command&gt;

	&lt;opts&gt;	
	  &lt;opt parameter=&quot;resourcename&quot; description=&quot;resource name pattern&quot; 
	       required=&quot;false&quot; property=&quot;opts.resourceName&quot; type=&quot;string&quot;/&gt;
	  &lt;opt parameter=&quot;resourcetype&quot; description=&quot;resource type name&quot;
	       required=&quot;false&quot; property=&quot;opts.resourceType&quot; type=&quot;string&quot;/&gt; 
	  &lt;opt parameter=&quot;options&quot; description=&quot;option names to pass to receiver&quot;
	       required=&quot;false&quot; property=&quot;opts.options&quot; type=&quot;string&quot;/&gt;        
	  &lt;opt parameter=&quot;arg1&quot; description=&quot;the first arg&quot; 
	       required=&quot;false&quot; property=&quot;opts.arg1&quot; type=&quot;string&quot;/&gt;
	  &lt;opt parameter=&quot;arg2&quot; description=&quot;the second arg&quot;
	       required=&quot;false&quot; property=&quot;opts.arg2&quot; type=&quot;string&quot;/&gt;	 
	&lt;/opts&gt;
&lt;/command&gt;
&lt;/syntaxhighlight&gt;

The following sections walk through the command definition in more detail.

===Command declaration===
The &lt;code&gt;[[Type-v10.xml#command|command]]&lt;/code&gt; element defines a new command in this type called &quot;dispatchCommandA&quot;. The &lt;code&gt;command-type&lt;/code&gt; attribute specifies this is a &quot;DispatchCommand&quot; type. The &lt;code&gt;error-handler-type&lt;/code&gt; attribute specifies to fail the command immediately if any error occurs.

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;command name=&quot;dispatchCommandA&quot; description=&quot;Dispatch commandA to matching receivers.&quot; 
         command-type=&quot;DispatchCommand&quot; error-handler-type=&quot;FAIL&quot;&gt;
&lt;/syntaxhighlight&gt;	

===Property defaults===
The next elements define defaults about how to control the dispatching selection and option passing behavior. Each &lt;code&gt;property-default&lt;/code&gt; element sets a property based on the value of a property using the &lt;code&gt;from&lt;/code&gt; attribute. If the property referred to by the &lt;code&gt;from&lt;/code&gt; attribute is not set, then a literal specified with the &lt;code&gt;default&lt;/code&gt; will be used.
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;property-default override=&quot;false&quot; property=&quot;opts.resourceType&quot; from=&quot;resource.attribute.dispatchResourceType&quot; default=&quot;[^\.]*?&quot;/&gt;
&lt;property-default override=&quot;false&quot; property=&quot;opts.resourceName&quot; from=&quot;resource.attribute.dispatchResourceName&quot; default=&quot;receiver.*&quot;/&gt;
&lt;property-default override=&quot;false&quot; property=&quot;opts.threadCount&quot; from=&quot;resource.attribute.threadCount&quot; default=&quot;1&quot;/&gt;
&lt;property-default override=&quot;false&quot; property=&quot;opts.options&quot; from=&quot;resource.attribute.dispatchOptionsCommandA&quot; default=&quot;arg1,arg2&quot;/&gt;
&lt;/syntaxhighlight&gt;
These are the purposes of each of the properties declared by &lt;code&gt;property-default&lt;/code&gt;:
* opts.resourceType: The type of objects to select. Here a regex is used that will select all types
* opts.resourceName: The name of the resources to select. Here a regex is used to match any object that is named with the prefix &quot;receiver&quot;. 
* opts.threadCount: the number of threads to execute if multiple objects are selected.  
* opts.options: The list of allowed options that can be passed through to the called command.

This style of setting options based on property and literal string parallels option defaulting. See [[Option defaulting with an attribute or literal]].

===Dispatch-command configuration===
The heart of the definition is done inside the &lt;code&gt;[[Type-v10.xml#dispatch-command|dispatch-command]]&lt;/code&gt; element. It in turn uses a set of attributes and nested elements to describe how to select the resources as well as how to dispatch the command. Some of the values specified refer to properties declared by &lt;code&gt;property-default&lt;/code&gt; in the previous section. 
* threadCount: Specifies number of threads to execute if multiple receivers are matched. Here &quot;${opts.threadCount}&quot; is referenced that was defined by property-default to default to &quot;1&quot; if the &lt;code&gt;resource.attribute.threadCount&lt;/code&gt; property was not set.
* requirematch: If set true, requires at least one receiver is matched. If false, just exit.
* strategy: The execution strategy. The &lt;code&gt;nodedispatch&lt;/code&gt; strategy specifies that network command dispatched should be used to invoke commands on remote resources. If &lt;code&gt;localdispatch&lt;/code&gt; was used then the receiver is assumed to reside on the same node as the caller.
* command: The command element specifies the name of the command to be invoked by the receiver. Here it is &quot;commandA&quot;.
* arg: The arg element's &lt;code&gt;line&lt;/code&gt; attribute specifies &quot;${opts.options}&quot; declared earlier  using &lt;code&gt;property-default&lt;/code&gt;. The value &quot;arg1,arg2&quot; is used, unless the property resource.attribute.dispatchOptionsCommandA is set. If this was set blank, then no options will be passed to the receiver command.

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;dispatch-command threadcount=&quot;${opts.threadCount}&quot; requirematch=&quot;false&quot; strategy=&quot;nodedispatch&quot;&gt;
  &lt;command name=&quot;commandA&quot;/&gt;
  &lt;arg line=&quot;${opts.options}&quot;/&gt;
  &lt;contexts&gt;
    &lt;select-dependencies sortkey=&quot;deployment-startup-rank&quot; sortorder=&quot;ascending&quot; source=&quot;context&quot; relationtype=&quot;[^\.]*&quot;&gt;
      &lt;include name=&quot;${opts.resourceName}&quot; type=&quot;${opts.resourceType}&quot;/&gt;
    &lt;/select-dependencies&gt;
  &lt;/contexts&gt;
&lt;/dispatch-command&gt;
&lt;/syntaxhighlight&gt;

The &lt;code&gt;context&lt;/code&gt; nested element contains the filtering logic to look up matching resources. Here the &lt;code&gt;[[Type-v10.xml#select-dependencies|select-dependencies]]&lt;/code&gt; element is used to look up objects that are child resources of the caller.
The &lt;code&gt;[[Type-v10.xml#include|include]]&lt;/code&gt; element specifies the filter used to lookup the resources.
* name: name of the resources. Here &quot;${opts.resourceName}&quot; is specified that was declared earlier by &lt;code&gt;property-default&lt;/code&gt;. For this example, resources that have a name that matches the pattern &quot;receiver.*&quot; should be selected
* type: type of the resources. Here &quot;${opts.resourceType}&quot; is specified that was declared earlier by &lt;code&gt;property-default&lt;/code&gt;. For this example, resources of any type should be matched (ie, &quot;[^\.]*?&quot;).

The other attributes defined in &lt;code&gt;select-dependencies&lt;/code&gt; are not described here but can be similarly managed via the &lt;code&gt;property-default&lt;/code&gt; tag (eg, sortkey, sortorder, relationtype).

===Command options===
Option tags are included to provided command line specification to filter the receivers and the options to pass.
Each &lt;code&gt;[[Type-v10.xml#opt|opt]]&lt;/code&gt; tag specifies a ''property'' attribute that corresponds to those defaulted via &lt;code&gt;property-default&lt;/code&gt;.

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;opts&gt;	
  &lt;opt parameter=&quot;resourcename&quot; description=&quot;resource name pattern&quot; 
       required=&quot;false&quot; property=&quot;opts.resourceName&quot; type=&quot;string&quot;/&gt;
  &lt;opt parameter=&quot;resourcetype&quot; description=&quot;resource type name&quot;
       required=&quot;false&quot; property=&quot;opts.resourceType&quot; type=&quot;string&quot;/&gt; 
  &lt;opt parameter=&quot;options&quot; description=&quot;option names to pass to receiver&quot;
       required=&quot;false&quot; property=&quot;opts.options&quot; type=&quot;string&quot;/&gt;   
  &lt;opt parameter=&quot;arg1&quot; description=&quot;the first arg&quot; 
       required=&quot;false&quot; property=&quot;opts.arg1&quot; type=&quot;string&quot;/&gt;
  &lt;opt parameter=&quot;arg2&quot; description=&quot;the second arg&quot;
       required=&quot;false&quot; property=&quot;opts.arg2&quot; type=&quot;string&quot;/&gt;      
&lt;/opts&gt;
&lt;/syntaxhighlight&gt;

The purpose of each option is listed here:
* resourcename: provides a command line override to the receivers to select
* resourcetype: provides a command line override to the type of receivers to select
* options: provides a command line override to the list of options that should be passed to the receiver command. Option names are comma delimited
* arg1: custom option to pass to the receiver command
* arg2: custom option to pass to the receiver command

Notice the opt tags do not specify &lt;code&gt;propertydefault&lt;/code&gt; or &lt;code&gt;default&lt;/code&gt; attributes to manage automatic command line option defaulting. These are avoided since the &lt;code&gt;property-default&lt;/code&gt; elements discussed [[#Property_defaults|earlier]] are managing that.

===Build the type===

Types defined by type.xml can be built and uploaded to the server using [[ProjectBuilder]]#[http://controltier.sourceforge.net/docs/latest/core/reference/user/ProjectBuilder/commands/build-type.html build-type].

Just hit return to accept the prompts.

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -p demo -m ProjectBuilder -c build-type -- -type MySite -upload
.
.
.
Uploading jar: /Users/alexh/ctier/target/modules/MySite-1.jar to server: 'strongbad.local' ...
&lt;/syntaxhighlight&gt;

==Define type and command definition for the receiver==
This example creates a new type called &quot;MyService&quot;, for the receiver objects.  Use the &lt;code&gt;create-type&lt;/code&gt; command to generate the initial definition. Hit return to accept the prompts.

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;ctl -p demo -m ProjectBuilder -c create-type -- -type MyService -supertype Service
	.
	.
	.
Define commands and attributes in this file: /Users/alexh/ctier/ctl/src/modules/MyService/type.xml	
&lt;/syntaxhighlight&gt;

Add the following command definition for &quot;commandA&quot; to the MyService [[type.xml]] file:

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;command name=&quot;commandA&quot; description=&quot;A simple command.&quot; 
         command-type=&quot;AntCommand&quot;&gt;
    &lt;implementation&gt;
           &lt;property name=&quot;args&quot; value=&quot;&quot;/&gt;&lt;!--default it to blank--&gt;
           &lt;propertyselector property=&quot;args&quot; match=&quot;^opts\.(arg[12])$&quot; select=&quot;\1&quot; override=&quot;true&quot;/&gt;
          &lt;echo&gt;inside commandA. options[${args}]&lt;/echo&gt;
	&lt;/implementation&gt;
	&lt;opts&gt;	
	  &lt;opt parameter=&quot;arg1&quot; description=&quot;the first arg&quot; 
	       required=&quot;false&quot; property=&quot;opts.arg1&quot; type=&quot;string&quot;/&gt;
	  &lt;opt parameter=&quot;arg2&quot; description=&quot;the second arg&quot;
	       required=&quot;false&quot; property=&quot;opts.arg2&quot; type=&quot;string&quot;/&gt;          
	&lt;/opts&gt;
&lt;/command&gt;
&lt;/syntaxhighlight&gt;

This trivial command definition simply prints a string to the console as well as declare the two options: arg1 and arg2.

Build and upload the MyService definition using &lt;code&gt;build-type&lt;/code&gt; (again typing return at the prompts):
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -p demo -m ProjectBuilder -c build-type -- -type MyService -upload
.
.
.
Uploading jar: /Users/alexh/ctier/target/modules/MyService-1.jar to server: 'strongbad.local' ...
&lt;/syntaxhighlight&gt;

==Define resources==

Define instances of MySite and MyService and their relationships using [[project.xml]]. This example will define two instances of MyService, receiver1 and receiver2. The instance of MySite associates the MyService instances as resources. The use of [[Project-v10.xml#referrers|referrers tags]] associates the node to which they will be installed.

Create a file called &quot;example.xml&quot; with the following content (remember to substitute your node name for the one mentioned here, strongbad.local):

File listing: example.xml
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;!DOCTYPE project PUBLIC
	        &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; &quot;project.dtd&quot;&gt;
&lt;project&gt;
&lt;deployment type=&quot;MyService&quot; name=&quot;receiver1&quot; description=&quot;An instance of MyService&quot;&gt;
	&lt;referrers replace=&quot;false&quot;&gt;
	   &lt;resource name=&quot;strongbad.local&quot; type=&quot;Node&quot;/&gt;
	&lt;/referrers&gt;
&lt;/deployment&gt;
&lt;deployment type=&quot;MyService&quot; name=&quot;receiver2&quot; description=&quot;An instance of MyService&quot;&gt;
	&lt;referrers replace=&quot;false&quot;&gt;
	   &lt;resource name=&quot;strongbad.local&quot; type=&quot;Node&quot;/&gt;
	&lt;/referrers&gt;
&lt;/deployment&gt;
&lt;deployment type=&quot;MySite&quot; name=&quot;caller&quot; description=&quot;An instance of MySite&quot; &gt;
  &lt;resources&gt;
    &lt;resource name=&quot;receiver1&quot; type=&quot;MyService&quot;/&gt;
    &lt;resource name=&quot;receiver2&quot; type=&quot;MyService&quot;/&gt;
  &lt;/resources&gt;
  &lt;referrers replace=&quot;false&quot;&gt;
    &lt;resource name=&quot;strongbad.local&quot; type=&quot;Node&quot;/&gt;
  &lt;/referrers&gt;
&lt;/deployment&gt;
&lt;/project&gt;
&lt;/syntaxhighlight&gt;

Load the definition using [[ProjectBuilder]]#[http://controltier.sourceforge.net/docs/latest/core/reference/user/ProjectBuilder/commands/load-resources.html load-resources] (this can be run from any node):

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -p demo -m ProjectBuilder -c load-resources -- -filename example.xml
&lt;/syntaxhighlight&gt;

Then install the resources on the node you defined in the XML:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
strongbad$ ctl-project -p demo -a install
&lt;/syntaxhighlight&gt;

With the resources defined in the project, it can be seen in Workbench's &quot;Services manager&quot; view:

[[Image:dispatch-command-options-resources.png]]

The screenshot shows the MySite and MyService instances and the Node they are deployed.

==Run the commands==
With the types and objects defined everything is ready to run the new commands. Following a bottom up approach, first the receiver type's command will be tested. Then the caller will dispatch to the receiver using the DispatchCommand. For either method, the commands will run without and with options.

===Run commandA===
Run the &quot;commandA&quot; command directly for one of the MyService resources:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ ctl -p demo -t MyService -r receiver1 -c commandA
inside commandA. options[]
&lt;/syntaxhighlight&gt;

Run it again using its options:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ ctl -p demo -t MyService -r receiver1 -c commandA -- -arg1 val1 -arg2 val2
inside commandA. options[arg2,arg1]
&lt;/syntaxhighlight&gt;

===Run dispatchCommandA: No options===

Before running the command, it is possible to see how it will run given its resource model. This can be done in Workbench by going to the &quot;Commands&quot; tab and pressing the &quot;process flow view&quot; button. Here is the generated display for the example scenario:

[[Image:dispatch-command-options-pflow.png]]

With a preview of how the command will dispatch to the receivers, try it from the command line.

Dispatch the &quot;commandA&quot; to all receivers but no arguments passed to commandA:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -p demo -t MySite -r caller -c dispatchCommandA
&lt;/syntaxhighlight&gt;

You should see messages similar to that shown below:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
Start: &quot;Dispatch commandA to matching receivers.&quot; command: commandA
Dispatching command 'commandA ' to objects: receiver1[MyService], receiver2[MyService] ...
starting: receiver1[MyService] commandA  ...
starting: receiver2[MyService] commandA  ...
inside commandA. options[]
inside commandA. options[]
[command.timer.demo.MySite.dispatchCommandA: 1.858 sec]
Dispatch completed. execution time: 1.858 sec
&lt;/syntaxhighlight&gt;

===Run dispatchCommandA: Pass an option to commandA===
Call commandA on all receivers but also pass the &quot;arg1&quot; option through:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -p demo -t MySite -r caller -c dispatchCommandA -- -arg1 val1
&lt;/syntaxhighlight&gt;

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
Start: &quot;Dispatch commandA to matching receivers.&quot; command: commandA
Dispatching command 'commandA -arg1 val1' to objects: receiver1[MyService], receiver2[MyService] ...
starting: receiver1[MyService] commandA -arg1 val1 ...
starting: receiver2[MyService] commandA -arg1 val1 ...
inside commandA. options[arg1]
inside commandA. options[arg1]
[command.timer.demo.MySite.dispatchCommandA: 1.553 sec]
Dispatch completed. execution time: 1.553 sec
&lt;/syntaxhighlight&gt;

===Run dispatchCommandA: Pass an option to commandA but select one receiver===

Select just one of the receivers using the &quot;-resourcename&quot; option to dispatchCommandA. Also, specify &quot;-arg1 val1 -arg2 val2&quot; but exclude all passed through options except, arg2:

Next, pass in the options for commandA but only include receiver1:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -p demo -t MySite -r caller -c dispatchCommandA -- -resourcename receiver1 -arg1 val1 -arg2 val2 -options arg2
&lt;/syntaxhighlight&gt;

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
Start: &quot;Dispatch commandA to matching receivers.&quot; command: commandA
Dispatching command 'commandA -arg2 val2' to objects: receiver1[MyService] ...
starting: receiver1[MyService] commandA -arg2 val2 ...
inside commandA. options[arg2]
[command.timer.demo.MySite.dispatchCommandA: 1.154 sec]
Dispatch completed. execution time: 1.154 sec
&lt;/syntaxhighlight&gt;

===Run dispatchCommandA: Specify passed options using -options===

The &lt;code&gt;property-default&lt;/code&gt; tag provided a default set of options to pass through to &quot;commandA&quot; (i.e., &quot;arg1,arg2&quot;). The &quot;-options&quot; parameter to dispatchCommandA provides a command line override to set the list of options to pass through. Here's an example that mimics the defaults:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ ctl -p demo -t MySite -r caller -c dispatchCommandA -- -resourcename receiver1 -arg1 val1 -arg2 val2 -options arg1,arg2
Start: &quot;Dispatch commandA to matching receivers.&quot; command: commandA
Dispatching command 'commandA -arg1 val1 -arg2 val2' to objects: receiver1[MyService] ...
starting: receiver1[MyService] commandA -arg1 val1 -arg2 val2 ...
inside commandA. options[arg2,arg1]
[command.timer.demo.MySite.dispatchCommandA: 1.029 sec]
Dispatch completed. execution time: 1.029 sec
&lt;/syntaxhighlight&gt;

Here's another example showing how to use the -options parameter to attempt to pass through an argument &quot;commandA&quot; does not support.

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ ctl -p demo -t MySite -r caller -c dispatchCommandA -- -resourcename receiver1 -arg1 val1 -arg2 val2 -options resourcename
Start: &quot;Dispatch commandA to matching receivers.&quot; command: commandA
Dispatching command 'commandA -resourcename receiver1' to objects: receiver1[MyService] ...
starting: receiver1[MyService] commandA -resourcename receiver1 ...
Option usage error for command: 'commandA'. 
Error handler caught failed command execution: receiver1[MyService]#commandA. reason: The following error occurred while executing this line:
/Users/alexh/ctier/ctl/projects/demo/modules/MyService/commands/commandA.xml:25: 
usage: [-arg1  &lt;&gt;] [-arg2  &lt;&gt;] 

Command failed: No message
&lt;/syntaxhighlight&gt;

The command failed because &quot;commandA&quot; does not support the option named &quot;-resourcename&quot;.

[[Category:Dispatch commands]]</text>
    </revision>
  </page>
  <page>
    <title>Dispatcher options</title>
    <id>72</id>
    <revision>
      <id>16364</id>
      <timestamp>2012-02-08T15:15:29Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <comment>Undo revision 15650 by [[Special:Contributions/Janwalls|Janwalls]] ([[User talk:Janwalls|talk]]). Reason: SPAM bot</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Command execution&lt;/categorytree&gt;

Both the [[CTL_Command_Reference|ctl]] and [[CTL-EXEC_Command_Reference|ctl-exec]] commands can use the node-dispatch feature to execute commands on remote nodes. The set of nodes that will execute the commands is determined by two things:

* Nodes that match the filter options specified on the command line
* For ctl only: Nodes that have the specified Resource deployed on them

When executing a ctl command, only those nodes that have the correct Module or Resource deployed will be able to execute the specified defined command. The deployment specifications in the [[resources.properties]] file determine which nodes have which deployments, so the &quot;base set&quot; of nodes is the set of matching entries in this document. For ctl-exec this is not necessary, and all nodes specified in [[resources.properties]] are used as the base set.

Finally the base set is filtered based on the filtering options specified on the command line, as described below.

== Filtering Options ==

Both ctl and ctl-exec can use the commandline options &lt;code&gt;-I&lt;/code&gt; (include, aka &lt;code&gt;--nodes&lt;/code&gt;) and &lt;code&gt;-X&lt;/code&gt; (exclude, aka &lt;code&gt;--xnodes&lt;/code&gt;) to specify which nodes to include and exclude from the base set of nodes. You can specify a single value, a list of values, or a regular expression as the argument to these options.

When only inclusion filters (&lt;code&gt;-I&lt;/code&gt;) are specified, then only the nodes from the base set that match those filters are used.

Examples:
&lt;pre&gt;
           ctl -I dev01 -m MyModule -c doSomething
           ctl -I dev01,dev02 -m MyModule -c doSomething
           ctl -I dev.* -m MyModule -c doSomething
&lt;/pre&gt;

This executes the &lt;code&gt;doSomething&lt;/code&gt; command using various selector types. The first matches only the node with hostname &lt;code&gt;dev01&lt;/code&gt;, the second two nodes with hostnames &lt;code&gt;dev01&lt;/code&gt; and &lt;code&gt;dev02&lt;/code&gt;, and the third all nodes with
hostnames that match the regular expression &lt;code&gt;dev.*&lt;/code&gt;.

When only exclusion filters (&lt;code&gt;-X&lt;/code&gt;) are specified, then only the nodes from the base set that &lt;em&gt;do not&lt;/em&gt; match those filters are used.

Examples:
&lt;pre&gt;
           ctl-exec -X web01 -- ps
           ctl-exec -X web01,web02 -- ps
           ctl-exec -X &quot;web.*&quot; -- ps
&lt;/pre&gt;

This executes the 'ps' command by excluding nodes based on hostname selectors, thus it will execute on all nodes that are not matched by the exclusion filters.

By default, the &lt;code&gt;-I&lt;/code&gt; and &lt;code&gt;-X&lt;/code&gt; options are used to filter based on the node &lt;code&gt;hostname&lt;/code&gt; property, as it is specified in the [[nodes.properties]] file.

However, &lt;em&gt;keywords&lt;/em&gt; can be used to specify other properties to filter on besides &lt;code&gt;hostname&lt;/code&gt;:

==Keywords==

Keywords are specifed by using one of the filter options with &quot;key=value&quot; as the argument to the option.

Example:
&lt;pre&gt;
               ctl-exec -I os-name=Linux -- ps
&lt;/pre&gt;

This executes on all nodes with an operating system named &quot;Linux&quot;.

Notice that the argument to &lt;code&gt;-I&lt;/code&gt; specifies &lt;code&gt;os-name=&lt;/code&gt; and then the value &lt;code&gt;Linux&lt;/code&gt;. The keyword used is &lt;code&gt;os-name&lt;/code&gt;, and so the filter will match the &quot;os-name&quot; property in nodes.properties.

The available keywords are:

* hostname - hostname of the node [default keyword]
* name - resource name of the node, which may be different than hostname
* type - type name of the node, typically &quot;Node&quot;
* tags - a set of user defined tags
* os-name - operating system name, e.g. &quot;Linux&quot;, &quot;Macintosh OS X&quot;
* os-family - operating system familiy, e.g. &quot;windows&quot;,&quot;unix&quot;
* os-arch - operating system CPU architecture, e.g. &quot;x86&quot;, &quot;x386&quot;
* os-version - operating system version number

All of the keywords can accept a single value, a comma-separated list, or a regular expression.

==Tags==

In addition, the tags keyword can use the boolean operator + to represent logical AND. The comma used to separate lists serves as logical OR. The following example matches all nodes tagged with both &quot;devel&quot; AND &quot;secure&quot;, OR with &quot;server&quot;:
&lt;pre&gt;
               ctl-exec -I tags=devel+secure,server -- ps
&lt;/pre&gt;

===Combining Options===

All keywords can be combined by specifying the &lt;code&gt;-I&lt;/code&gt; or &lt;code&gt;-X&lt;/code&gt; options multiple times on the command line.

The following example includes all nodes tagged with both &quot;devel&quot; and &quot;secure&quot;, as well as all nodes with hostnames matching &lt;code&gt;web.*&lt;/code&gt;:

&lt;pre&gt;
               ctl-exec -I tags=devel+secure -I web.* -- ps
&lt;/pre&gt;     
The following includes all nodes tagged with both &quot;devel&quot; and &quot;secure&quot;, as well as all nodes with hostnames matching &lt;code&gt;web.*&lt;/code&gt;, and excludes the node with hostname &quot;web01&quot;:
&lt;pre&gt;
               ctl-exec -X web01 -I tags=devel+secure -I web.* -- ps
&lt;/pre&gt;           
Note, however, that you cannot specify the same keyword multiple times for the same type of filter:

''WRONG'':
&lt;pre&gt;
                   ctl-exec -X web01 -X dev01 -I tags=devel+secure -I web.* -- ps
&lt;/pre&gt;
              
This example will not exclude the node &quot;web01&quot;, because there are two &lt;code&gt;-X&lt;/code&gt; options with the same keyword.  Both &lt;code&gt;-X web01&lt;/code&gt; and &lt;code&gt;-X dev01&lt;/code&gt; default to the &quot;hostname&quot; keyword, and the second entry will override the first.  To exclude both of those nodes, you must combine them for the option &lt;code&gt;-X web01,dev01&lt;/code&gt;:

''CORRECT'':
&lt;pre&gt;
                   ctl-exec -X web01,dev01 -I tags=devel+secure -I web.* -- ps
&lt;/pre&gt;

The last example brings up the issue of &lt;em&gt;Precedence&lt;/em&gt;. The command line first specifies &lt;code&gt;-X web01&lt;/code&gt;, then later specifies &lt;code&gt;-I web.*&lt;/code&gt;. However, the hostname &quot;web01&quot; would be matched by the regular expression &quot;web.*&quot;. So is the node with hostname &quot;web01&quot; included in the set of nodes to execute on, or is it excluded?

==Attributes ==

Arbitrary attributes can be used in node filtering as well.  If you add Setting resources or other Resources to the Node object, any [[Attributes]] exported by those resources are available for Node filtering.

Simply specify the attribute name as a filter with one of the &lt;code&gt;-I/-X&lt;/code&gt; arguments:

&lt;pre&gt;
               ctl-exec -I my-attribute=true -- ps
&lt;/pre&gt;

This will execute &lt;code&gt;ps&lt;/code&gt; on any node with an attribute named &lt;code&gt;my-attribute&lt;/code&gt; with a value of &quot;&lt;code&gt;true&lt;/code&gt;&quot;.

See [[Attributes]] for more information about Attributes.

==Precedence==

Precedence is the issue of whether a node should be included in the result set when it matches both an exclusion filter and an inclusion filter.

Take a simplified example:
&lt;pre&gt;
               ctl-exec -X web01 -I web.* -- ps
&lt;/pre&gt;

The intent is to exclude &quot;web01&quot; while including all other nodes matching the regular expression &quot;web.*&quot;. Depending on which filter takes precedence, the exclusion filter or the inclusion filter, the result may be different.

When inclusion has precedence, nodes that match both filters will be included.
When exclusion has precedence, nodes that match both filters will be excluded.
So which filter has precedence?

The first filter specified on a command line takes precedence.

This means that if you specify any &lt;code&gt;-X&lt;/code&gt; option before a &lt;code&gt;-I&lt;/code&gt; option, then exclusion will take precedence, and vice versa.

So in the example above, the &lt;code&gt;-X&lt;/code&gt; takes precedence (it is first), and so the node with hostname &quot;dev01&quot; is excluded from the result set.

If you change the order of the options:
&lt;pre&gt;
               ctl-exec -I web.* -X web01 -- ps
&lt;/pre&gt;
         
Then the node with hostname &quot;web01&quot; will be included in the results.

Note
* When only one filter is used, either &lt;code&gt;-I&lt;/code&gt; or &lt;code&gt;-X&lt;/code&gt;, there is no need to worry about precedence.
In general, a good rule of thumb when trying to determine which precedence you need is to specify the most restrictive filter first.

For an inverse example, suppose you want to dispatch to all non-windows nodes, but you want to include any nodes tagged with &quot;development&quot;. You might try this at first:

''WRONG'':
&lt;pre&gt;
               ctl-exec -X os-family=windows -I tags=development -- ps
&lt;/pre&gt;
           
This will not return the correct result set, because the &lt;code&gt;-X&lt;/code&gt; takes precedence as it is the first filter on the line. So any nodes that have both os-family=windows and tag=development will be excluded.

''CORRECT'':
&lt;pre&gt;
               ctl-exec -I tags=development -X os-family=windows -- ps
&lt;/pre&gt;
         
Here since the &lt;code&gt;-I&lt;/code&gt; is specified first, the inclusion filter has precedence, and any nodes that have both os-family=windows and tag=development will be included in the result.

==Explicit Precedence using --filter-exclude-precedence==

Using the &lt;code&gt;--filter-exclude-precedence&lt;/code&gt; command-line option, the precedence can be set explicitly.  The argument is &quot;true&quot; or &quot;false&quot;.  When the argument is &quot;true&quot; then the exclusion filter takes precedence, regardless of the order of the filter options.  When the argument is &quot;false&quot; then the inclusion filter takes precedence.

&lt;pre&gt;
ctl-exec -I web.* -X web01 --filter-exclude-precedence true -- ps
&lt;/pre&gt;

This command-line correctly excludes the &quot;web01&quot; node because the &lt;code&gt;--filter-exclude-precedence&lt;/code&gt; option is set to &quot;true&quot;.

==Retrying on failed nodes==

When the &lt;code&gt;-K&lt;/code&gt; option is specified to ctl or ctl-exec, then the command will be executed on all matched nodes, even if some nodes fail during the process.  The list of which nodes failed will be printed at the end of the sequence.

 Command failed: Execution failed on the following nodes: [calculon,centos5]

If you simply execute a command with some node filters and the &lt;code&gt;-K&lt;/code&gt; option, then a message is printed echoing the same commandline that you executed, but with the list of failed nodes inserted as the node filters:

&lt;pre&gt;
$ ctl -I tags=something -K -p demo -m netutil -c listening  -- -port 8080
....
Command failed: Execution failed on the following nodes: [calculon,centos5]
Execute this command to retry on the failed nodes:
	ctl -I name=calculon,centos5 -K -p demo -m netutil -c listening  -- -port 8080
&lt;/pre&gt;

You can copy and paste the printed command to retry the same command only on the list of failed nodes.

&lt;strong&gt;Storing the failed node list in a file&lt;/strong&gt;:

Ctl and ctl-exec have an option  that stores the list of nodes where the command failed into a file, which can then be specified again to re-execute the command on only those failed nodes.  

Use the &quot;failednodes&quot; option:

:&lt;code&gt;-F,--failednodes                  Filepath to store failed nodes&lt;/code&gt;

When you specify a set of Node filters, as well as the &lt;code&gt;-K&lt;/code&gt; option, also include the &lt;code&gt;-F&lt;/code&gt; option with the path to a file.  

E.g.:
&lt;pre&gt;
$ ctl-exec -K -F /home/ctier/tempnodes -I tags=mynodes -p demo -- ps
&lt;/pre&gt;

If the execution fails on some nodes, that list is stored in the file, and an additional message is printed:

&lt;pre&gt;
error: Execute this command to retry on the failed nodes:
	ctl-exec -K -F /home/ctier/tempnodes -p demo -- ps
&lt;/pre&gt;

Notice that this command specifies the same filepath as originally specified, but not the Node filtering options.  The list of nodes will be read from the file.

When all the executions succeed on the nodes, any file at the specified path will be deleted.  This means that you can have some looping logic in a shell script to re-try the execution if the specified file exists:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
#!/bin/bash
COMMAND=...
NODEFILE=/home/ctier/tempnodes
ctl-exec -K -F $NODEFILE -I tags=mynodes -p demo -- $COMMAND
if [ -f $NODEFILE ] ; then
   # since the node file exists, some nodes failed, retry.
  ctl-exec -K -F $NODEFILE -p demo -- $COMMAND   
fi

if [ -f $NODEFILE ] ; then
  # if the file still exists, then some nodes failed again
 echo &quot;Some nodes failed after retry, aborting...&quot;
 exit 1
fi
&lt;/syntaxhighlight &gt;

{{Guide/navbox}}

[[Category:Command execution]]</text>
    </revision>
  </page>
  <page>
    <title>Document Type Reference</title>
    <id>176</id>
    <revision>
      <id>13469</id>
      <timestamp>2010-11-10T01:40:57Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;entity.&quot; to &quot;resource.&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Types&lt;/categorytree&gt;
=Description=
      &lt;p&gt;
	The Document data type describes a published document in the DAV store.
      &lt;/p&gt;
   
=Attributes=
      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;file&lt;/td&gt;&lt;td&gt;The file name.&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;dir&lt;/td&gt;&lt;td&gt;Directory name.&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;type&lt;/td&gt;&lt;td&gt;Type of file. Valid types are:
	  &amp;quot;text/plain&amp;quot;, &amp;quot;text/html&amp;quot;, &amp;quot;text/xml&amp;quot;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;
   
=Examples=

     &lt;p&gt;
       Shows the document data type used within a transform-create
       task, specifying the document to save into the DAV share.
      &lt;/p&gt;
      &lt;pre&gt;
	&amp;lt;transform-create serverurl=&quot;${viewdoc.server}&quot; depot=&quot;${resource.depot}&quot;
                resultproperty=&quot;rs&quot;
                comment=&quot;something re this update&quot;&amp;gt;
                &amp;lt;context direction=&quot;internal&quot; proximity=&quot;1&quot; maprefuri=&quot;${resource.mapref-uri}&quot;/&amp;gt;
                &amp;lt;document file=&quot;haha.txt&quot; dir=&quot;/${resource.depot}/publish&quot; type=&quot;text-plain&quot;/&amp;gt;
                &amp;lt;template file=&quot;${templateFile}&quot; dir=&quot;/${resource.depot}/templates&quot; type=&quot;simple&quot;/&amp;gt;
        &amp;lt;/transform-create&amp;gt;

      &lt;/pre&gt;
&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Resource model Ant Types]]
[[Category:Transforms]]</text>
    </revision>
  </page>
  <page>
    <title>Documentation</title>
    <id>452</id>
    <redirect />
    <revision>
      <id>5213</id>
      <timestamp>2009-05-06T22:59:59Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <comment>changing to redirect</comment>
      <text xml:space="preserve">#REDIRECT [[User Guide]]</text>
    </revision>
  </page>
  <page>
    <title>Download</title>
    <id>288</id>
    <revision>
      <id>16363</id>
      <timestamp>2012-02-08T15:15:12Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <comment>Undo revision 15651 by [[Special:Contributions/Janwalls|Janwalls]] ([[User talk:Janwalls|talk]]). Reason: SPAM bot</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Installation&lt;/categorytree&gt;

{{Caution|Before you download the software read about the [[System requirements]].}}

{{:Latest release}}
&lt;noinclude&gt;
{{Installation/navbox}}
[[Category:Installation]]
&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Dukes Bank Build and Provisioning JBoss applications</title>
    <id>365</id>
    <revision>
      <id>16362</id>
      <timestamp>2012-02-08T15:14:52Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <comment>Undo revision 15652 by [[Special:Contributions/Janwalls|Janwalls]] ([[User talk:Janwalls|talk]]). Reason: SPAM bot</comment>
      <text xml:space="preserve">[[Image:java_duke_mascot.jpg|32px]]  This is part of the DukesBank portion of the [[ControlTier Demo]]

==Overview==

In this demo we are going to make a minor source code change to Dukes Bank and then run an end-to-end automated process that begins with source code checkout and continues all the way to the running Dukes Bank site. This example shows several collaborating ControlTier types that work together to unify the build and deploy cycle. 

The examples in this demo will introduce the &quot;Updater&quot; type, one of the ControlTier standard types that coordinates a unified build and deployment process. During the demo we will run workflow commands that support this end-to-end process.

[[Image:Screencast-icon.png]]  [http://open.controltier.com/media/BasicDemo4_BuildAndUpdate.swf Watch a video of this demo (less than 5:00)]

==Prerequisites==
This demo assumes you have completed:
* [[Building Dukes Bank Project]]
* [[Dukes Bank Provisioning JBoss instances]]
* [[Dukes Bank Checkout and Build]]

==Preparation==

Before getting started confirm all the necessary objects are deployed to CTL.

Run the [[ctl-project]] command:
&lt;pre&gt;
$ ctl-project -p demo -a install
&quot;Install&quot; command running for resource: (Site) developmentDukesBank
&quot;Install&quot; command running for resource: (Updater) developmentDukesBank
&quot;Install&quot; command running for resource: (JBossAntBuilder) dukesBank
&quot;Install&quot; command running for resource: (HsqldbRdbExportBuilder) dukesBank
&quot;Install&quot; command running for resource: (JBossServer) developmentDukesBank
&quot;Install&quot; command running for resource: (HsqldbRdb) developmentDukesBank
.
.
.
&lt;/pre&gt;

==Make a change to the Dukes Bank source ==
For illustrative purposes, we are going to make a minor change to welcome message that you see after you login to Dukes Bank. 

[[Image:DukesBank DukeWelcome.png|center|400px]]

Edit the welcome and farewell messages in the WebMessages.properties file of the Dukes Bank source code.

&lt;pre&gt;
$ vi $CTIER_ROOT/demo/elements/build/cruisecontrol-bin-2.7.1/projects/dukesBank/j2eetutorial14/examples/bank/web/WebMessages.properties

.
.
.
Welcome=Welcome to Uncle Sam's Bank.
Farewell=Thank you for banking with Uncle Sam's Bank.
.
.

&lt;/pre&gt;

In a live environment we would be committing this change, but to keep the demo simple we are just making the change on the local machine. The builder used in these Dukes Bank demos is configured to build from the local source directory and the scmCheckout command will not overwrite your changes with files from the remote subversion repository.  

==Review the process flow and current package list==

With the preparation steps out of the way you are now ready to demonstrate the full build and deploy cycle. The &quot;BuildAndUpdate&quot; command is a workflow that carries out each of the steps for the end to end process. Workbench shows this in its graphical &quot;Process Flow&quot; view. You can see can see this visualization for the &quot;developmentDukesBank&quot; Updater below:

[[Image:DukesBank-Updater-BuildAndUpdate-pview.png|700px]]

The process flow view shows that BuildAndUpdate actually is composed of two commands:
* Build: This interfaces all the Builders (in this case just JBossAntBuilder) and invokes their &quot;Build&quot; command.
* Update: This too is a workflow that calls:
** Change-Dependencies: This reconfigures all the Services to use the artifacts from the Build step
** Deploy: This invokes the &quot;Deploy&quot; command across the Site objects

If you look in the Package Manager tool in Workbench, you'll see the two .ear packages from the previous demos (and see that JBossDukesBank-20090114.ear is currently deployed):

[[Image:PackageManager demo 20099114deployed.png|700px]]

You can also look at the dependency tree in the site list to see that the JBossDukesBank-20090114.ear package is the one currently being used: 

[[Image:Dukesbank verify package dependency.png|700px]]

==Run the BuildAndUpdate command==

Now run the BuildAndUpdate command specifying a custom buildstamp (for the purpose of the demo we're arbitrarily calling this build &quot;2009123-demo&quot;)

&lt;pre&gt;
ctl -p demo -t Updater -r developmentDukesBank -c BuildAndUpdate  -- -buildstamp 20090123-demo
&lt;/pre&gt;
You will see output like so:
&lt;pre&gt;
Start: &quot;Run the coordinated end-to-end the build and deployment processes across the configured Builders and Sites.&quot; commands: Build,Update
begin workflow command (1/2) -&gt; &quot;Build -buildstamp 20090123-demo&quot; ...
Dispatching command 'Build' to objects: dukesBank[JBossAntBuilder] ...
starting: dukesBank[JBossAntBuilder]-&gt;Build ...
Start: &quot;Run the build cycle.&quot; commands: scmCheckout,setBuildstamp,runBuildScript,repoImport
begin workflow command (1/4) -&gt; &quot;scmCheckout -buildstamp 20090123-demo&quot; ...
scmCheckout parameters: {basedir=&quot;/home/demo/ctier/demo/elements/build/cruisecontrol-bin-2.7.1/projects/dukesBank&quot;, connection=&quot;https://moduleforge.svn.sourceforge.net/svnroot/moduleforge/elements/branches/3.2.4/demo/DukesBank/src&quot;, module=&quot;&quot;, label=&quot;&quot;, scmcommand=&quot;checkout&quot; }
.
.
.
Checked out revision 1135.
[command.timer.Builder.scmCheckout: 7.574 sec]
end workflow command (1/4) -&gt; &quot;scmCheckout &quot;
begin workflow command (2/4) -&gt; &quot;setBuildstamp &quot; ...
Checking &quot;https://moduleforge.svn.sourceforge.net/svnroot/moduleforge/elements/branches/3.2.4/demo/DukesBank/src&quot; for the last changed revision ...
Deleting: /home/alexh/ctier/ctl/projects/default/resources/JBossAntBuilder/dukesBank/var/null1723088645.out
Using provided buildstamp &quot;20090123-demo&quot;
[command.timer.Builder.setBuildstamp: 3.006 sec]
end workflow command (2/4) -&gt; &quot;setBuildstamp -buildstamp 20090123-demo&quot;
begin workflow command (3/4) -&gt; &quot;runBuildScript -buildstamp 20090123-demo&quot; ...
Buildfile: j2eetutorial14/examples/bank/jboss-build.xml

prepare:

.
.
.
uploading file: /home/alexh/ctier/demo/elements/build/cruisecontrol-bin-2.7.1/projects/dukesBank/j2eetutorial14/examples/bank/jar/JBossDukesBank.ear to:
 http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/default/JBossEar/ears/JBossDukesBank-20090123-demo.ear...
Uploading to: http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/default/JBossEar/ears/JBossDukesBank-20090123-demo.ear
Uploading: JBossDukesBank.ear
Puted 1 file to http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/default/JBossEar/ears/JBossDukesBank-20090123-demo.ear
Creating new property file: /home/alexh/ctier/ctl/projects/default/resources/JBossAntBuilder/dukesBank/tmp/Builder-repoImport-20090114230501/import-list.properties
Package &quot;JBossDukesBank-20090123-demo.ear (JBossEar)&quot; already registered. Updating object info.
Deleting: /home/alexh/ctier/ctl/projects/default/modules/Builder/commands/entity1092114538.properties
Updating property file: /home/alexh/ctier/ctl/projects/default/resources/JBossAntBuilder/dukesBank/tmp/Builder-repoImport-20090114230501/import-count.properties
Current count: 1
Batch request performed successfully.
Current count: 1
[command.timer.Builder.repoImport: 8.281 sec]
end workflow command (4/4) -&gt; &quot;repoImport &quot;
[command.timer: 28.097 sec]
Completed: execution time: 28.097 sec
end workflow command (1/2) -&gt; &quot;Build &quot;
begin workflow command (2/2) -&gt; &quot;Update &quot; ...
Start: &quot;Changes package dependencies and runs the coordinated deployment cycle across the configured Sites.&quot; commands: Change-Dependencies,Deploy
begin workflow command (1/2) -&gt; &quot;Change-Dependencies -resourcename .* -resourcetype [^\.]*&quot; ...
Start: &quot;Query model and switch package dependencies to the specified version or buildstamp..&quot; Changing to package dependencies with buildstamp &quot;20090114&quot; ...
begin workflow command (1/1) -&gt; &quot;runChangeDependencies -dispatch -buildstamp 20090123-demo -version 20090123-demo -resourcename .* -resourcetype [^\.]* &quot; ...
Request succeeded.
end workflow command (1/1) -&gt; &quot;runChangeDependencies -dispatch -buildstamp 20090123-demo -version 20090123-demo -resourcename .* -resourcetype [^\.]* &quot;
[command.timer.default.Mediator.developmentDukesBank.Change-Dependencies: 6.693 sec]
Completed: Dependencies changed. execution time: 6.693 sec
end workflow command (1/2) -&gt; &quot;Change-Dependencies -resourcename .* -resourcetype [^\.]*&quot;
begin workflow command (2/2) -&gt; &quot;Deploy -resourcename .* -resourcetype [^\.]*&quot; ...
Dispatching command 'Deploy' to objects: developmentDukesBank[Site] ...
starting: developmentDukesBank[Site]-&gt;Deploy ...
Dispatching command 'Deploy' to objects: developmentDukesBank[HsqldbRdb], developmentDukesBank[JBossServer] ...
.
.
.
Start: &quot;Install the configured package dependencies for the deployment.&quot; Beginning installation for packages:   hsqldb_1_8_0_10.zip[HsqldbZip],  db1-00000000.0.zip[HsqldbRdbDmp] ...
.
.
.
Start: &quot;Install the configured package dependencies for the deployment.&quot; Beginning installation for packages:   jboss-4.0.3SP1.zip[JBossZip],  JBossDukesBank-20090123-demo.ear[JBossEar] ...
.
.
.
begin workflow command (4/4) -&gt; &quot;Start &quot; ...
begin workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot; ...
Running handler command: startServiceWrapper
Workflow beginning. commands: startService,waitforStartEvent
begin workflow command (1/2) -&gt; &quot;startService &quot; ...
Moving 1 file to /home/alexh/ctier/demo/elements/development/dukesbank/jboss-4.0.3SP1/server/default/log
end workflow command (1/2) -&gt; &quot;startService &quot;
begin workflow command (2/2) -&gt; &quot;waitforStartEvent &quot; ...
end workflow command (2/2) -&gt; &quot;waitforStartEvent &quot;
[command.timer: 28.097 sec]
Workflow completed. execution time: 28.097 sec
end workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot;
end workflow command (4/4) -&gt; &quot;Start &quot;
end workflow command (2/2) -&gt; &quot;Deploy -resourcename .* -resourcetype [^\.]*&quot;
[command.timer.default.Mediator.developmentDukesBank.Update: 1:36.559 sec]
Completed: execution time: 1:36.559 sec
end workflow command (2/2) -&gt; &quot;Update &quot;
[command.timer.default.Updater.developmentDukesBank.BuildAndUpdate: 2:06.825 sec]
&lt;/pre&gt;

Note that in a live development scenario where we were checking our changes into a source repository, you could run this command without specifying a build stamp. This would cause the builder to checkout from the head of the trunk and the buildstamp would be automatically generated using the latest subversion revision info. Since we aren't checking these changes in the subversion info would be meaningless, so we specified a custom buildstamp.

==View the new package and the dependency changes in Workbench==
Once the command has completed executing, you can refresh the package list and you'll see the new package listed (and that it is currently in use):

[[Image:PackageManager demo 20099114-demodeployed.png|700px]]

You can also look at the dependency tree in the site list and see that the new package is the one currently being used:

[[Image:SiteList dukesbank 20090123-demo deployed.png|700px]]

==Go to the Dukes Bank website and view the change==
You can now view the running Dukes Bank website. Go to the instructions on [[Accessing the Dukes Bank Website]] for more information.

[[Image:DukesBank UncleSamWelcome.png|400px]]

(tada!)

== Summary ==

In this Demo we covered:
* Using an Updater to tie together the both the build and deploy cycles into one end-to-end process
* Running the BuildAndUpdate command to both build and deploy a release of Dukes Bank

[[Category:Dukes Bank Demo]]
[[Category:JBoss]]
[[Category:Screencasts]]</text>
    </revision>
  </page>
  <page>
    <title>Dukes Bank Checkout and Build</title>
    <id>348</id>
    <revision>
      <id>16380</id>
      <timestamp>2012-02-20T10:16:14Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <comment>Undo revision 15663 by [[Special:Contributions/Huberlivingston1|Huberlivingston1]] ([[User talk:Huberlivingston1|talk]]) Reverted SPAM bot edits</comment>
      <text xml:space="preserve">[[Image:java_duke_mascot.jpg|32px]]  This is part of the DukesBank portion of the [[ControlTier Demo]]

==Overview==

In this demo we are going to coordinate the build process for the Dukes Bank application. This example shows the JBossAntBuilder type coordinating a build cycle that includes: source code checkout, build tool invocation and finally build artifact repository staging. The output will be a .ear file that is registered in your ControlTier package repository

[[Image:stop-medium.png]] This demo assumes the Subversion client is installed. You can [http://subversion.tigris.org/getting.html#binary-packages download a binary distribution from Collabnet]

[[Image:Screencast-icon.png]]  [http://open.controltier.com/media/BasicDemo2_Build.swf Watch a video of this demo (less than 5:00)]

==Prerequisites==
This demo assumes you have completed:
* [[Building Dukes Bank Project|Setup for the Dukes Bank Project]]
* You have the Subversion client installed

==Prepare the Build Environment Using Deploy Command==

The first step before running the actual build cycle is to run the builder's &quot;Deploy&quot; command which will take care of ensuring all the build processes dependencies are in place.

In this demo, dukesBank (which is a builder instance of type JBossAntBuilder), will ensure it has the correct version of the Ant build tool and JBoss.

Workbench shows this in its graphical &quot;Process Flow&quot; view. You can see this visualization for the Deploy command for the &quot;dukesBank&quot; JBossAntBuilder below:

[[Image:JBossAntBuilder deploy processflow.png]]

Run the following command to have the dukesBank instance of the JBossAntBuilder download and install it's own dependencies:

&lt;pre&gt;
ctl -p demo -t JBossAntBuilder -r dukesBank -c Deploy
&lt;/pre&gt;
You should output similar to that shown below:
&lt;pre&gt;
Start: &quot;Run the deployment cycle, coordinating package installation and configuration.&quot; commands: Packages-Install,Configure
begin workflow command (1/2) -&gt; &quot;Packages-Install &quot; ...
.
.
.
Package is VERIFIED
Completed: Installed packages:   jboss-4.0.3SP1.zip[JBossZip],  apache-ant-1.7.0-bin.zip[AntZip]
end workflow command (1/2) -&gt; &quot;Packages-Install &quot;
begin workflow command (2/2) -&gt; &quot;Configure &quot; ...
begin workflow command (1/1) -&gt; &quot;Docs-Generate &quot; ...
end workflow command (1/1) -&gt; &quot;Docs-Generate &quot;
end workflow command (2/2) -&gt; &quot;Configure &quot;
[command.timer: 11.578 sec]
Completed: execution time: 11.578 sec
&lt;/pre&gt;

You'll notice that the JBoss zip is deployed as well. This is because the builder needs to use some JBoss libraries when building the .ear.

==Verify Checkout==
The next step confirms the source code connection is defined correctly and accessible. Checkout is handled by a standard command called &quot;scmCheckout&quot;. This command interfaces with the SCM client tool and is configured with a number of parameters like connection string, module name, and base directory. In this demo, the source repository is hosted on sourceforge.net.

Run the &lt;code&gt;scmCheckout&lt;/code&gt; command without any arguments:
&lt;pre&gt;
ctl -p demo -t JBossAntBuilder -r dukesBank -c scmCheckout
&lt;/pre&gt;

You will see output similar to below:
&lt;pre&gt;
scmCheckout parameters: {basedir=&quot;/home/alexh/ctier/demo/elements/build/cruisecontrol-bin-2.7.1/projects/dukesBank&quot;, 
connection=&quot;https://moduleforge.svn.sourceforge.net/svnroot/moduleforge/elements/branches/3.2.4/demo/DukesBank/src&quot;,
module=&quot;j2eetutorial14&quot;, label=&quot;&quot;, scmcommand=&quot;checkout&quot; }
A    j2eetutorial14/doc
A    j2eetutorial14/doc/WebApp.html
.
.
.
A    j2eetutorial14/examples/saaj/headers/src/HeaderExample.java
A    j2eetutorial14/examples/saaj/headers/build.xml
Checked out revision 1113.
[command.timer.Builder.scmCheckout: 6.791 sec]
&lt;/pre&gt;

See [[#Troubleshooting]] if you get a SVN server certificate error.

==Build==
===Run the Build Command===
With the preparation and verification steps out of the way you are now ready to demonstrate the full build cycle.
The &lt;code&gt;Build&lt;/code&gt; command is a workflow that carries out the steps of the build cycle.
Workbench shows this in its graphical &quot;Process Flow&quot; view. You can see can see this visualization for the Build command of the &quot;dukesBank&quot; JBossAntBuilder below:

[[Image:DukesBank-JBossAntBuilder-Build-pview.png]]

You can see the Build workflow has four commands:
# scmCheckout: checkout the source code
# setBuildstamp: automatically set a build identifier (in this case using the Subversion revision info)
# runBuildscript: invoke the build tool (Ant in this case)
# repoImport: upload the build artifacts to the repository

Run the &lt;code&gt;Build&lt;/code&gt; command without arguments:

&lt;pre&gt;
ctl -p demo -t JBossAntBuilder -r dukesBank -c Build 
&lt;/pre&gt;

...with output similar to below:
&lt;pre&gt;
Start: &quot;Run the build cycle.&quot; commands: scmCheckout,setBuildstamp,runBuildScript,repoImport
begin workflow command (1/4) -&gt; &quot;scmCheckout &quot; ...
scmCheckout parameters: {basedir=&quot;/home/alexh/ctier/demo/elements/build/cruisecontrol-bin-2.7.1/projects/dukesBank&quot;, 
connection=&quot;https://moduleforge.svn.sourceforge.net/svnroot/moduleforge/elements/branches/3.2.4/demo/DukesBank/src&quot;, 
module=&quot;j2eetutorial14&quot;, label=&quot;&quot;, scmcommand=&quot;checkout&quot; }
Checked out revision 1113.
[command.timer.Builder.scmCheckout: 6.932 sec]
end workflow command (1/4) -&gt; &quot;scmCheckout &quot;
begin workflow command (2/4) -&gt; &quot;setBuildstamp &quot; ...
Checking &quot;https://moduleforge.svn.sourceforge.net/svnroot/moduleforge/elements/branches/3.2.4/demo/DukesBank/src&quot; 
for the last changed revision ...
Deleting: /home/alexh/ctier/ctl/projects/demo/resources/JBossAntBuilder/dukesBank/var/null1948851042.out
Automatically set buildstamp to &quot;trunk.1.2.3.952&quot;
[command.timer.Builder.setBuildstamp: 8.236 sec]
end workflow command (2/4) -&gt; &quot;setBuildstamp &quot;
begin workflow command (3/4) -&gt; &quot;runBuildScript &quot; ...
Buildfile: j2eetutorial14/examples/bank/jboss-build.xml

prepare:
    [mkdir] Created dir: /home/alexh/ctier/demo/elements/build/cruisecontrol-bin-2.7.1/projects/dukesBank/j2eetutorial14/examples/bank/build

compile:
    [javac] Compiling 61 source files to /home/alexh/ctier/demo/elements/build/cruisecontrol-bin-2.7.1/projects/dukesBank/j2eetutorial14/examples/bank/build
    [javac] Note: Some input files use unchecked or unsafe operations.
    [javac] Note: Recompile with -Xlint:unchecked for details.

prepare:

compile:

package-ejb:
    [mkdir] Created dir: /home/alexh/ctier/demo/elements/build/cruisecontrol-bin-2.7.1/projects/dukesBank/j2eetutorial14/examples/bank/jar
      [jar] Building jar: /home/alexh/ctier/demo/elements/build/cruisecontrol-bin-2.7.1/projects/dukesBank/j2eetutorial14/examples/bank/jar/bank-ejb.jar

prepare:

compile:

package-web:
     [copy] Copying 1 file to /home/alexh/ctier/demo/elements/build/cruisecontrol-bin-2.7.1/projects/dukesBank/j2eetutorial14/examples/bank/web
      [war] Building war: /home/alexh/ctier/demo/elements/build/cruisecontrol-bin-2.7.1/projects/dukesBank/j2eetutorial14/examples/bank/jar/web-client.war

prepare:

compile:

package-client:
     [copy] Copying 2 files to /home/alexh/ctier/demo/elements/build/cruisecontrol-bin-2.7.1/projects/dukesBank/j2eetutorial14/examples/bank/build
      [jar] Building jar: /home/alexh/ctier/demo/elements/build/cruisecontrol-bin-2.7.1/projects/dukesBank/j2eetutorial14/examples/bank/jar/app-client.jar

assemble-app:
      [ear] Building ear: /home/alexh/ctier/demo/elements/build/cruisecontrol-bin-2.7.1/projects/dukesBank/j2eetutorial14/examples/bank/jar/JBossDukesBank.ear

BUILD SUCCESSFUL
Total time: 4 seconds
[command.timer.runBuildScript.exec.ant: 5.368 sec]
[command.timer.AntBuilder.runBuildScript: 5.372 sec]
end workflow command (3/4) -&gt; &quot;runBuildScript &quot;
begin workflow command (4/4) -&gt; &quot;repoImport &quot; ...
Created dir: /home/alexh/ctier/ctl/projects/demo/resources/JBossAntBuilder/dukesBank/tmp/Builder-repoImport-20090114174116
Condition: isProcessableWithoutExistingPropfile result: true
opts.propfile set to: autogenerated-builder.properties
Creating new property file: 
/home/alexh/ctier/ctl/projects/demo/resources/JBossAntBuilder/dukesBank/tmp/Builder-repoImport-20090114174116/import-count.properties
processing files in directory: '/home/alexh/ctier/demo/elements/build/cruisecontrol-bin-2.7.1/projects/dukesBank/j2eetutorial14/examples/bank' 
matching: '(JBossDukesBank)(?:-trunk.1.2.3.952)?\.(ear)$' ...
processing matched file: jar/JBossDukesBank.ear
Auto-generated builder properties file created: 
/home/alexh/ctier/demo/elements/build/cruisecontrol-bin-2.7.1/projects/dukesBank/j2eetutorial14/examples/bank/jar/autogenerated-builder.properties...
Copying 1 file to /home/alexh/ctier/demo/elements/build/cruisecontrol-bin-2.7.1/projects/dukesBank/j2eetutorial14/examples/bank/jar
Copying 1 file to /home/alexh/ctier/ctl/projects/demo/modules/Builder/commands
Getting: http://strongbad:8080/jackrabbit/repository/controltier/projects/demo/publish/modules/JBossEar-head.jar
To: /home/alexh/ctier/ctl/var/tmp/downloads/demo/JBossEar-head.jar
Created dir: /home/alexh/ctier/ctl/projects/demo/modules/JBossEar
Expanding: /home/alexh/ctier/ctl/var/tmp/downloads/demo/JBossEar-head.jar into /home/alexh/ctier/ctl/projects/demo/modules/JBossEar
module did not have module.version property: ear
Getting: http://strongbad:8080/jackrabbit/repository/controltier/projects/demo/publish/modules/ear-7.jar
To: /home/alexh/ctier/ctl/var/tmp/downloads/demo/ear-7.jar
module did not have module.version property: ear
Expanding: /home/alexh/ctier/ctl/var/tmp/downloads/demo/ear-7.jar into /home/alexh/ctier/ctl/projects/demo/modules/ear
uploading file: /home/alexh/ctier/demo/elements/build/cruisecontrol-bin-2.7.1/projects/dukesBank/j2eetutorial14/examples/bank/jar/JBossDukesBank.ear to: 
http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/JBossEar/ears/JBossDukesBank-trunk.1.2.3.952.ear...
Uploading to: http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/JBossEar/ears/JBossDukesBank-trunk.1.2.3.952.ear
Uploading: JBossDukesBank.ear
Puted 1 file to http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/JBossEar/ears/JBossDukesBank-trunk.1.2.3.952.ear
Creating new property file: /home/alexh/ctier/ctl/projects/demo/resources/JBossAntBuilder/dukesBank/tmp/Builder-repoImport-20090114174116/import-list.properties
Deleting: /home/alexh/ctier/ctl/projects/demo/modules/Builder/commands/entity820874211.properties
Updating property file: /home/alexh/ctier/ctl/projects/demo/resources/JBossAntBuilder/dukesBank/tmp/Builder-repoImport-20090114174116/import-count.properties
Current count: 1
Batch request performed successfully.
Current count: 1
[command.timer.Builder.repoImport: 8.137 sec]
end workflow command (4/4) -&gt; &quot;repoImport &quot;
[command.timer: 31.288 sec]
Completed: execution time: 31.288 sec
&lt;/pre&gt;

The output shows a file &quot;JBossDukesBank-trunk.1.2.3.952.ear&quot; uploaded to the WebDAV server.

===Query the repository===
Use the &lt;code&gt;repoFind&lt;/code&gt; command to query the repository to see what JBossEar packages exist:

&lt;pre&gt;
ctl -p demo -t JBossAntBuilder -r dukesBank -c repoFind -- -packagetype JBossEar
&lt;/pre&gt;
... with results listed like so:
&lt;pre&gt;
Created dir: /home/alexh/ctier/ctl/projects/demo/resources/JBossAntBuilder/dukesBank/var/sessions
Querying model for matching package objects ...
|
|--(JBossEar) JBossDukesBank-trunk.1.2.3.952.ear
session data saved: /home/alexh/ctier/ctl/projects/demo/resources/JBossAntBuilder/dukesBank/var/sessions/find.session
&lt;/pre&gt;

The output above shows there is currently one JBossEar package. Subsequent builds will result in new versions of the JBossEar package.

You can also check Workbench's &quot;Package Manager&quot; to find the newly uploaded package. Clicking on the object will show its metadata like the screenshot below:

[[Image:DukesBank-JBossEar-object-view.png]]

===Specifying your own Buildstamp===

The first example of &quot;Build&quot; used automatic buildstamp generation. You can also specify the buildstamp via a command line option. The example below uses a date stamp:

&lt;pre&gt;
 ctl -p demo -t JBossAntBuilder -r dukesBank -c Build -- -buildstamp 20090114
&lt;/pre&gt;
Output:
&lt;pre&gt;
Start: &quot;Run the build cycle.&quot; commands: scmCheckout,setBuildstamp,runBuildScript,repoImport
begin workflow command (1/4) -&gt; &quot;scmCheckout -buildstamp 20090114&quot; ...
scmCheckout parameters: {basedir=&quot;/home/alexh/ctier/demo/elements/build/cruisecontrol-bin-2.7.1/projects/dukesBank&quot;, 
connection=&quot;https://moduleforge.svn.sourceforge.net/svnroot/moduleforge/elements/branches/3.2.4/demo/DukesBank/src&quot;, 
module=&quot;j2eetutorial14&quot;, label=&quot;&quot;, scmcommand=&quot;checkout&quot; }
Checked out revision 1113.
[command.timer.Builder.scmCheckout: 37.274 sec]
end workflow command (1/4) -&gt; &quot;scmCheckout -buildstamp 20090114&quot;
begin workflow command (2/4) -&gt; &quot;setBuildstamp -buildstamp 20090114&quot; ...
Using provided buildstamp &quot;20090114&quot;
[command.timer.Builder.setBuildstamp: 2.690 sec]
end workflow command (2/4) -&gt; &quot;setBuildstamp -buildstamp 20090114&quot;
begin workflow command (3/4) -&gt; &quot;runBuildScript -buildstamp 20090114&quot; ...
Buildfile: j2eetutorial14/examples/bank/jboss-build.xml

prepare:
    [mkdir] Created dir: /home/alexh/ctier/demo/elements/build/cruisecontrol-bin-2.7.1/projects/dukesBank/j2eetutorial14/examples/bank/build

.
.
.
JBossEar up to date
uploading file: /home/alexh/ctier/demo/elements/build/cruisecontrol-bin-2.7.1/projects/dukesBank/j2eetutorial14/examples/bank/jar/JBossDukesBank.ear to: 
http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/default/JBossEar/ears/JBossDukesBank-20090114.ear...
Uploading to: http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/default/JBossEar/ears/JBossDukesBank-20090114.ear
Uploading: JBossDukesBank.ear
Puted 1 file to http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/default/JBossEar/ears/JBossDukesBank-20090114.ear
Creating new property file: 
/home/alexh/ctier/ctl/projects/default/resources/JBossAntBuilder/dukesBank/tmp/Builder-repoImport-20090114183226/import-list.properties
Deleting: /home/alexh/ctier/ctl/projects/default/modules/Builder/commands/entity1229686924.properties
Updating property file: 
/home/alexh/ctier/ctl/projects/default/resources/JBossAntBuilder/dukesBank/tmp/Builder-repoImport-20090114183226/import-count.properties
Current count: 1
Batch request performed successfully.
Current count: 1
[command.timer.Builder.repoImport: 8.579 sec]
end workflow command (4/4) -&gt; &quot;repoImport -buildstamp 20090114&quot;
[command.timer: 54.458 sec]
Completed: execution time: 54.458 sec
&lt;/pre&gt;

The output above shows the another JBossEar package uploaded, this time &quot;JBossDukesBank-20090114.ear&quot;.

Of course you can confirm this via &lt;code&gt;repoFind&lt;/code&gt;:

&lt;pre&gt;
ctl -p demo -t JBossAntBuilder -r dukesBank -c repoFind -- -packagetype JBossEar
&lt;/pre&gt;
&lt;pre&gt;
Created dir: /Users/alexh/ctier/ctl/projects/demo/resources/JBossAntBuilder/dukesBank/var/sessions
Querying model for matching package objects ...
|
|--(JBossEar) JBossDukesBank-20090114.ear
|
|--(JBossEar) JBossDukesBank-trunk.1.2.3.952.ear
session data saved: /Users/alexh/ctier/ctl/projects/demo/resources/JBossAntBuilder/dukesBank/var/sessions/find.session
&lt;/pre&gt;

For example's of common maintenance commands for managing the ControlTier package repository see:
* [[Dukes Bank and ControlTier Administration]]

==Summary==
In this demo we covered:
* Using a builder's Deploy command to prepare the build environment
* Verifying the connection to the source repository using the scmCheckout command
* Using the Build command to coordinate a build cycle that includes: source code checkout, build tool invocation and finally build artifact repository staging
* Querying the repository to find your new packages
* Specifying your own build stamp

With the JBoss EAR loaded you can proceed to the next demo: [[Dukes Bank Provisioning JBoss applications]]

==Troubleshooting==

The scmCheckout command could fail if there is an SVN server certificate change. The command fails because scmCheckout is a batch mode command and does not permit interacting with the svn client so it fails:
&lt;pre&gt;
$ ctl -p demo -t JBossAntBuilder -r dukesBank -c scmCheckout
scmCheckout parameters: {basedir=&quot;/home/alexh/ctier/demo/elements/build/cruisecontrol-bin-2.7.1/projects/dukesBank&quot;, 
connection=&quot;https://moduleforge.svn.sourceforge.net/svnroot/moduleforge/elements/branches/3.2.4/demo/DukesBank&quot;, 
module=&quot;src&quot;, label=&quot;&quot;, scmcommand=&quot;checkout&quot; }
Error validating server certificate for 'https://moduleforge.svn.sourceforge.net:443':
 - The certificate is not issued by a trusted authority. Use the
   fingerprint to validate the certificate manually!
Certificate information:
 - Hostname: *.svn.sourceforge.net
 - Valid: from Tue, 11 Nov 2008 20:25:27 GMT until Mon, 11 Jan 2010 20:25:27 GMT
 - Issuer: Equifax Secure Certificate Authority, Equifax, US
 - Fingerprint: 04:b2:70:e9:ba:cf:70:fc:e8:8a:22:86:14:13:51:97:1b:6a:de:38
(R)eject, accept (t)emporarily or accept (p)ermanently? svn: OPTIONS of 
'https://moduleforge.svn.sourceforge.net/svnroot/moduleforge/elements/branches/3.2.4/demo/DukesBank/src': 
Server certificate verification failed: issuer is not trusted (https://moduleforge.svn.sourceforge.net)

Command failed: The following error occurred while executing this line:
/home/alexh/ctier/ctl/projects/default/modules/Builder/lib/scm/svn.xml:83: exec returned: 1
&lt;/pre&gt;

To confirm the certificate just run the &lt;code&gt;svn&lt;/code&gt; client directly and accept the change by typing &quot;p&quot; at the prompt:

&lt;pre&gt;
$ svn co https://moduleforge.svn.sourceforge.net/svnroot/moduleforge/elements/branches/3.2.4/demo/DukesBank/src
Error validating server certificate for 'https://moduleforge.svn.sourceforge.net:443':
 - The certificate is not issued by a trusted authority. Use the
   fingerprint to validate the certificate manually!
Certificate information:
 - Hostname: *.svn.sourceforge.net
 - Valid: from Tue, 11 Nov 2008 20:25:27 GMT until Mon, 11 Jan 2010 20:25:27 GMT
 - Issuer: Equifax Secure Certificate Authority, Equifax, US
 - Fingerprint: 04:b2:70:e9:ba:cf:70:fc:e8:8a:22:86:14:13:51:97:1b:6a:de:38
(R)eject, accept (t)emporarily or accept (p)ermanently? p
.
.
.
&lt;/pre&gt;
You don't have to wait for the whole checkout to complete. The main point is to have the &lt;code&gt;svn&lt;/code&gt; client cache the cert info.

Now you will be able to run &lt;code&gt;scmCheckout&lt;/code&gt;.

[[Category:Dukes Bank Demo]]
[[Category:Screencasts]]</text>
    </revision>
  </page>
  <page>
    <title>Dukes Bank J2EE examples</title>
    <id>91</id>
    <revision>
      <id>16456</id>
      <timestamp>2012-02-22T12:12:34Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Undo revision 15492 by [[Special:Contributions/Detraransdell|Detraransdell]] ([[User talk:Detraransdell|talk]]) Removed SPAM bot edit</comment>
      <text xml:space="preserve">These examples are designed to provide a feel for what you can do with ControlTier and the role it plays in relation to other development or operations tools in the context of an enterprise. 
''For shorter, more focused and simple examples see others in this category [[:Category:Examples]]''.

Some of the features that these examples highlight:
* Deploying packages (EARs and JBoss)
* Importing build artifacts
* Service management (JBoss and Hypersonic RDB server instances)
* Integration with a CI server (CruiseControl)

The examples all use a sample application called Dukes Bank. Dukes Bank runs on JBoss and Hypersonic RDB. The Dukes Banks setup will automatically fetch the packages for Dukes Bank and the example scenarios will automatically deploy, configure, and control the entire Dukes Bank stack.

''Looking for instructor led training? See [[Training]] and [http://cyberqbank.com/ Sample Question Papers].''

==Prerequisites==
[[Image:stop-medium.png]] These examples have been designed for and tested assuming that you have the following dependencies:
===Dependencies===
* JDK 1.5. See [[Dependencies#Java]]
* ControlTier Installer. See: [[Installation]]
* Subversion client. You can [http://subversion.tigris.org/getting.html#binary-packages download a binary distribution from Collabnet]
* [[Dukes Bank system requirements]] (Linux or Mac OS X operating system)

===Setup the Dukes Bank Sample Application===
[[Image:java_duke_mascot.jpg|32px]] The examples use a sample J2EE application called Dukes Bank. 

You will need to [[Building Dukes Bank Project]] before proceeding with the examples.

==Basic Examples==

Once you have [[Building Dukes Bank Project| setup Dukes Bank]] you can try the following examples. These are all single node examples that assume you are deploying Dukes Bank to the same node on which the ControlTier server was installed. If you are new to ControlTier, it's recommended that you try the examples in the order listed.

[[Image:Screencast-icon.png]] '''Short on time? Each example can be watched in less than 5 minutes by following the video links below.'''

===1. Provisioning an application server===
{| border=&quot;1&quot;
! style=&quot;background:silver&quot; | Scenario:
| You're an administrator and you need an automated way to deploy, configure, and start an empty JBoss server 
|-
! style=&quot;background:silver&quot; | Try it: 
| [[Dukes Bank Provisioning JBoss instances|Automated provisioning of JBoss instances]]
|-
! style=&quot;background:silver&quot; | Video: 
| [http://open.controltier.com/media/BasicDemo1_JBossProvision.swf Watch now] 
|}


===2. Coordinating the build process for the application packages===
{| border=&quot;1&quot;
! style=&quot;background:silver&quot; | Scenario:
| You're a developer or a release manager and you need an automated way to checkout the sourcecode, build the Dukes Bank .ear, and stage the package in the release repository (ready for deployment) 
|-
! style=&quot;background:silver&quot; | Try it: 
| [[Dukes Bank Checkout and Build|Automated checkout, build, and staging of application packages]] 
|-
! style=&quot;background:silver&quot; | Video: 
| [http://open.controltier.com/media/BasicDemo2_Build.swf Watch now] 
|}

===3. Deploying a release of the application===
{| border=&quot;1&quot;
! style=&quot;background:silver&quot; | Scenario:
| You're a developer or a release manager and you need an automated way deploy the latest release of the Dukes Bank application (including its dependencies) 
|-
! style=&quot;background:silver&quot; | Try it: 
| [[Dukes Bank Provisioning JBoss applications|Automated updating of applications]] 
|-
! style=&quot;background:silver&quot; | Video: 
| [http://open.controltier.com/media/BasicDemo3_DeployApp.swf Watch now] 
|}


===4. End-to-end build and deployment process===
{| border=&quot;1&quot;
! style=&quot;background:silver&quot; | Scenario:
| You're a developer and after you make a source change you need an automated way run both the build and the deployment process as one coordinated end-to-end process so you can deploy your changes to a development testing server.  
|-
! style=&quot;background:silver&quot; | Try it: 
| [[Dukes Bank Build and Provisioning JBoss applications|Automated end-to-end build and deployment]] 
|-
! style=&quot;background:silver&quot; | Video: 
| [http://open.controltier.com/media/BasicDemo4_BuildAndUpdate.swf Watch now] 
|}


===5. Migrating an application release to a different environment===
{| border=&quot;1&quot;
! style=&quot;background:silver&quot; | Scenario:
| You're an release manager and you need to migrate application changes that have been made and tested in development to a staging environment 
|-
! style=&quot;background:silver&quot; | Try it: 
| [[Dukes Bank Migrating a Release from Development to Staging|Migrating a Release from Development to Staging]] 
|-
! style=&quot;background:silver&quot; | Video: 
| [http://open.controltier.com/media/BasicDemo5_Migrate.swf Watch now] 
|}


===6. Using Jobcenter as a centralized management console ===
{| border=&quot;1&quot;
! style=&quot;background:silver&quot; | Scenario:
| Whether it's to enable self-service (allowing others to safely run deployment and service management processes) or tracking ongoing activity, the Jobcenter webapp is a very useful centralized console for safely running key processes   
|-
! style=&quot;background:silver&quot; | Try it: 
| [[Dukes Bank and Self Service|Using Jobcenter as a management console]] 
|-
! style=&quot;background:silver&quot; | Video: 
| [http://open.controltier.com/media/BasicDemo6_BuildDeployWithJC.swf Watch now] 
|}

==Advanced Examples==

The following are considered advanced examples because they require a multi-node environment, address scenarios that require integration with other tools, or address scenarios found in production use of ControlTier.



===1. Making config changes at deployment time===
{| border=&quot;1&quot;
! style=&quot;background:silver&quot; | Scenario:
| You're an administrator and you need to change the set of ports during the deployment of Dukes Bank
|-
! style=&quot;background:silver&quot; | Try it: 
| [[Making_config_changes_at_deployment_time]] 
|}


===2. Deploying the Dukes Bank application across multiple nodes===
{| border=&quot;1&quot;
! style=&quot;background:silver&quot; | Scenario:
| You're an administrator and you need to migrate and deploy Dukes Bank to a new environment that requires it to be run across multiple nodes
|-
! style=&quot;background:silver&quot; | Try it: 
| [[Dukes Bank on Multiple Nodes|Automated deployment across multiple nodes]] 
|}


===3. Managing the Dukes Bank application in different single and multi-node scenarios===
{| border=&quot;1&quot;
! style=&quot;background:silver&quot; | Scenario:
| You're in operations and you need to start, stop, restart, and check the status of either one of the various parts of the Dukes Bank application or the entire application as a whole
|-
! style=&quot;background:silver&quot; | Try it: 
| [[Dukes Bank and Operations|Managing Dukes Bank in various operations scenarios]] 
|}


===4. Automatic deployment as part of a continuous integration loop===
{| border=&quot;1&quot;
! style=&quot;background:silver&quot; | Scenario:
| You're a build engineer and you need to automatically deploy, configure, and start up the latest release of Dukes Bank in a test environment as soon as a new .ear comes out of CruiseControl 
|-
! style=&quot;background:silver&quot; | Try it: 
| [[Dukes Bank and CruiseControl|Automatic deployment as part of a continuous integration loop]] 
|}



For example's of common maintenance commands for managing the ControlTier package repository see:
* [[Dukes Bank and ControlTier Administration]]

{{Manual/navbox}}

[[Category:Dukes Bank Demo]]</text>
    </revision>
  </page>
  <page>
    <title>Dukes Bank Migrating a Release from Development to Staging</title>
    <id>392</id>
    <revision>
      <id>14133</id>
      <timestamp>2010-11-10T15:56:16Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;ctl-depot&quot; to &quot;ctl-project&quot;</comment>
      <text xml:space="preserve">[[Image:java_duke_mascot.jpg|32px]] This is part of the DukesBank portion of the [[ControlTier Demo]]

==Overview==
In this demo we are simulating a development to staging lifecycle. We are going to make a source code change in development, deploy it to our &quot;development&quot; Dukes Bank instance and verify the change, and then deploy those same changes to our &quot;staging&quot; Dukes Bank instance. In this example we're codeploying both instances of Dukes Bank on the same OS instance as the ControlTier server (localhost), but as we [[Dukes_Bank_on_Multiple_Nodes|show in future demos]], deploying each instance across multiple machines is just as easy with ControlTier.

[[Image:Screencast-icon.png]]  [http://open.controltier.com/media/BasicDemo5_Migrate.swf Watch a video of this demo (less than 5:00)]

==Prerequisites==
This demo assumes you have completed the [[Building Dukes Bank Project|Dukes Bank Setup]].

==Preparation==

===Ensure objects are deployed to CTL client===
Before getting started confirm that all of the necessary objects are deployed to CTL.

Run the [[ctl-project]] command:
&lt;pre&gt;
ctl-project -p demo -a install
&lt;/pre&gt;
Output:
&lt;pre&gt;
&quot;Install&quot; command running for resource: (Site) developmentDukesBank
&quot;Install&quot; command running for resource: (HsqldbRdb) stagingDukesBank
&quot;Install&quot; command running for resource: (JBossServer) developmentDukesBank
&quot;Install&quot; command running for resource: (Updater) developmentDukesBank
&quot;Install&quot; command running for resource: (HsqldbRdb) developmentDukesBank
&quot;Install&quot; command running for resource: (JBossAntBuilder) dukesBank
&quot;Install&quot; command running for resource: (DukesBankProjectBuilder) dukesbank
&quot;Install&quot; command running for resource: (CruiseControl) development
&quot;Install&quot; command running for resource: (JBossServer) stagingDukesBank
&quot;Install&quot; command running for resource: (HsqldbRdbExportBuilder) dukesBank
&quot;Install&quot; command running for resource: (Site) stagingDukesBank
&lt;/pre&gt;

===Deploy staging instance of JBoss===
Deploy the JBoss instance that will be used for the staging instance of the Dukes Bank demo. This command and its output is very similar to what you did for deploying the development instance in the [[Dukes Bank Provisioning JBoss instances|first JBoss provisioning demo]].

&lt;pre&gt;
ctl -p demo -t JBossServer -r stagingDukesBank -c Deploy
&lt;/pre&gt;

Verify that the JBoss instance is functioning by navigating to its management web page:
http://localhost:8280/ (or your server's hostname)

[[Image:DukesBank staging empty jboss.png|400px]]

==Make a code change and deploy it to development==
If you haven't already performed the [[Dukes Bank Build and Provisioning JBoss applications|previous demo]], go ahead and do so now. In that demo you will make a code change to Dukes Bank app and deploy it to the development instance.

At the end of that demo, you'll be able to verify your changes ( http://localhost:8180/bank/main )

[[Image:DukesBank UncleSamWelcome.png|400px]]

==Deploy same package to staging==
In this step you are going to be deploying the same package you created and tested in development to the staging instance of Dukes Bank. 

&lt;pre&gt;
ctl -p demo -t Updater -r stagingDukesBank -c Update -- -buildstamp 20090123-demo
&lt;/pre&gt;

Output:

&lt;pre&gt;
Start: &quot;Changes package dependencies and runs the coordinated deployment cycle across the configured Sites.&quot; commands: Change-Dependencies,Deploy
begin workflow command (1/2) -&gt; &quot;Change-Dependencies -buildstamp 20090123-demo -resourcename .* -resourcetype [^\.]*&quot; ...
Start: &quot;Query model and switch package dependencies to the specified version or buildstamp..&quot; Changing to package dependencies with buildstamp &quot;20090123-demo&quot; ...
begin workflow command (1/1) -&gt; &quot;runChangeDependencies -dispatch -buildstamp 20090123-demo -version 20090123-demo -resourcename .* -resourcetype [^\.]* &quot; ...
Request succeeded.
end workflow command (1/1) -&gt; &quot;runChangeDependencies -dispatch -buildstamp 20090123-demo -version 20090123-demo -resourcename .* -resourcetype [^\.]* &quot;
[command.timer.demo.Mediator.stagingDukesBank.Change-Dependencies: 9.044 sec]
Completed: Dependencies changed. execution time: 9.044 sec
end workflow command (1/2) -&gt; &quot;Change-Dependencies -buildstamp 20090123-demo -resourcename .* -resourcetype [^\.]*&quot;
begin workflow command (2/2) -&gt; &quot;Deploy -buildstamp 20090123-demo -resourcename .* -resourcetype [^\.]*&quot; ...
Dispatching command 'Deploy' to objects: stagingDukesBank[Site] ...
starting: stagingDukesBank[Site]-&gt;Deploy ...
Dispatching command 'Deploy' to objects: stagingDukesBank[HsqldbRdb], stagingDukesBank[JBossServer] ...
.
.
.
.
.
.
.
.
.
end workflow command (1/1) -&gt; &quot;Docs-Generate &quot;
end workflow command (3/4) -&gt; &quot;Configure &quot;
begin workflow command (4/4) -&gt; &quot;Start &quot; ...
begin workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot; ...
JBoss is not UP!
Running handler command: startServiceWrapper
Workflow beginning. commands: startService,waitforStartEvent
begin workflow command (1/2) -&gt; &quot;startService &quot; ...
end workflow command (1/2) -&gt; &quot;startService &quot;
begin workflow command (2/2) -&gt; &quot;waitforStartEvent &quot; ...
end workflow command (2/2) -&gt; &quot;waitforStartEvent &quot;
[command.timer: 1:03.392 sec]
Workflow completed. execution time: 1:03.392 sec
end workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot;
end workflow command (4/4) -&gt; &quot;Start &quot;
end workflow command (2/2) -&gt; &quot;Deploy -buildstamp 20090123-demo -resourcename .* -resourcetype [^\.]*&quot;
[command.timer.demo.Mediator.stagingDukesBank.Update: 4:36.961 sec]
Completed: execution time: 4:36.961 sec
&lt;/pre&gt;

==Verify change in staging==
You can now navigate to the staging instance of Dukes Bank and verify that the same version of the application has been deployed:
http://localhost:8280/bank/main (or your server's hostname)

[[Image:DukesBank UncleSamWelcome staging.png|500px]]

If you go to the site list in Workbench's service manager tool, you'll see that the JBossDukesBank-20090123-demo.ear is now the current package dependency for stagingDukesBank.

[[Image:SiteList Dukesbank StagingAndDev Deployed.png|500px]]

You can also look at the package list in Workbench and see that the same packages are deployed to both development and staging.

[[Image:PackageManager demo deployed staginganddev.png|500px]]

[[Category:Dukes Bank Demo]]
[[Category:Screencasts]]</text>
    </revision>
  </page>
  <page>
    <title>Dukes Bank Provisioning</title>
    <id>1929</id>
    <revision>
      <id>14134</id>
      <timestamp>2010-11-10T15:56:42Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;ctl-depot&quot; to &quot;ctl-project&quot;</comment>
      <text xml:space="preserve">{{Version|3.4.13}}

In this [[Examples|example]], we will demonstrate how to physical (&quot;bare metal&quot;) and virtual system provisioning to a Dukes Bank Application using the Redhat/CentOS system provisioning tool-chain modules included in the [http://controltier.org/wiki/Elements Elements] library.

== Description ==

Duke's Bank is a J2EE demo application where release automation (build to deployment) is automated by ControlTier. This example assumes familiarity with running the [http://controltier.org/wiki/Dukes_Bank_J2EE_examples Dukes Bank Example] and at minimum the ability to [http://controltier.org/wiki/Building_Dukes_Bank_Project Build The Demo] on a CentOS 5 Linux machine with at least ControlTier Server 3.4.13 installed using the RPM installer. This example builds on the standard Duke's Bank demo project to reconfigure the staging environment environment to run on a freshly provisioned node.

In addition to Duke's Bank, this example assumes familiarity with the following technologies:

* [http://en.wikipedia.org/wiki/Trivial_File_Transfer_Protocol TFTP] for [http://en.wikipedia.org/wiki/Preboot_Execution_Environment PXE] booting
* [http://en.wikipedia.org/wiki/Kickstart_(Linux) Kickstart] configuration (ks.cfg)
* Managing the O/S distribution ISO
* FTP for serving O/S distribution
* [http://en.wikipedia.org/wiki/Dynamic_Host_Configuration_Protocol DHCP] for dynamic addressing
* [http://www.isc.org/software/bind Bind/DNS] for managing IP Addresses
* [http://www.redhat.com/docs/en-US/Red_Hat_Enterprise_Linux/5.4/html/Deployment_Guide/c1-yum.html Rhel5 YUM repository]

== Dependencies ==

At least two RedHat Enterprise Linux 5 machines (the server currently or soon to be configured for Dukes Bank) and client(s) with no O/S installed (or at least flagged for reinstallation since all data will be wiped out on the identified clients).   Either node may be native and/or virtual (vm) (see Assumptions below regarding this demo).
* ControlTier Server:
** The ControlTier server will be installed using the rpm distribution, version 3.4.13
*** examples in the demo show version 3.4.12 as this example was configured using a controltier development version
** In addition to the ControlTier Server rpm, the ControlTier client rpm, version 3.4.13, will be downloaded.
** The ControlTier server will have Dukes Bank built supporting the single server configuration (default)
** The ControlTier server will have sufficient disk space to serve the RHEL5 distro in DVD/ISO format.  Take into consideration that numerous distros may exist once in operation.
*** Obtain RHEL ISOs from https://content-web.rhn.redhat.com/rhn/isos/
*** NOTE: only DVD/ISOs are supported since multi cd ISOs cannot be represented as a single distribution
** The ControlTier server will have the following packages installed in addition to packages defined in [http://controltier.org/wiki/Dukes_Bank_system_requirements Dukes Bank System Requirements]:
*** dhcp
*** bind
*** tftp-server
*** syslinux
*** vsftpd
*** createrepo
*** rpm-build
*** subversion
** sudo configuration:  The ControlTier user, ctier, (since the rpm installer will have been used)  will belong to the wheel group with the following sudoers configuration to allow commands to be executed as root via sudoers with no password interaction set...
&lt;pre&gt;
[rhel-54-64-vm1@netserver objects]$ sudo grep ^%wheel /etc/sudoers 
%wheel  ALL=(ALL)       NOPASSWD: ALL
[ctier@netserver objects]$ echo $USER
ctier
[ctier@ netserver objects]$ grep &quot;wheel:.*${USER}&quot; /etc/group
wheel:x:10:root,ctier
&lt;/pre&gt;

* Server and Client will reside on the same subnet

== Assumptions ==

for this demo, the following is assumed:

* VMware Fusion is used for two Nodes (ControlTier server and one ControlTier client)
* [http://controltier.org/wiki/Building_Dukes_Bank_Project Dukes Bank built] for the single rhel-54-64-vm1.local Node
* ControlTier Project Name:  demo (as dictated by the Dukes Bank demo)
* The ControlTier server, rhel-54-64-vm1.local, is running RHEL 5.4 64-bit   
* One client machine will be installed with the same version as the server
* ControlTier Server network info:
** Hostname: rhel-54-64-vm1.local (also registered as controltier node object:  rhel-54-64-vm1.local)
** IP Address: 172.16.98.131
* A single ControlTier Client (when kickstarted)
** hostname: rhel-54-64-vm2.local
** IP Address: 172.16.98.112
** MAC Address:  00:50:56:37:d4:53, which is needed for dhcp address assignment.
*** This  address was pre-configured in VMware for the to-be-installed kickstart client.  Navigate to VMware configuration and note the following diagram for how address is obtained: 
&lt;pre&gt;
Settings -&gt; Network
&lt;/pre&gt;
[[File:VMwareMacAddr.jpg]]
* Both machines exist as VMs within VMware Fusion and on the same subnet
** NOTE:  In order to run DHCP on the NetServer without conflicting with VMware's dhcp service, please refer to [[NetServer VMware Preparation]] 
* Subnet Info
** Network:  172.16.98.0/24 (NOTE:  This is the Host Networking Subnet within VMware fusion also known as VMnet #1)
** DHCP server will run on the ControlTier Server
*** NOTE:  no other dhcp server will be running on this subnet.   (This demo requires the VMware dhcp server to be stopped for this subnet!)
** DHCP Address Range:  172.16.98.100-172.16.98.127
* ISO Distribution
** source URL: https://content-web.rhn.redhat.com/rhn/isos/RHEL-5.4/rhel-x86_64-server-5/rhel-server-5.4-x86_64-dvd.iso
** iso will be downloaded into the following installation root:  /data/ftp/linux-install/rhel-server-5.4-x86_64
* Host machine (since we are running VMware Fusion) is a Mac
** The IP Address for the host machine on VMnet #1 is 172.16.98.1:
&lt;pre&gt;
charles-scotts-macbook-pro-30: chuck$ /sbin/ifconfig vmnet1
vmnet1: flags=8863&lt;UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST&gt; mtu 1500
	inet 172.16.98.1 netmask 0xffffff00 broadcast 172.16.98.255
	ether 00:50:56:c0:00:01 
&lt;/pre&gt;
** IP Forwarding is enabled OR use SMB mount between the mac host machine and the vm client when necessary in order to access the internet.   IP Forwarding is a convenience  where we can isolate DHCP and are still able to access the internet from the vm directly.  The following describes how to configure a host networking client's default route and make use of IP Forwarding on the mac. 
*** On the Mac:
&lt;pre&gt;
System Preferences -&gt; Sharing -&gt; Internet Sharing (Checked)
&lt;/pre&gt; and enabled for Ethernet (or perhaps in your case Airport) Sharing:
[[File:MacInternetSharing.jpg]]
&lt;pre&gt;
charles-scotts-macbook-pro-30: chuck$ sysctl net.inet.ip.forwarding
net.inet.ip.forwarding: 1
&lt;/pre&gt;
*** On the Linux VM:
&lt;pre&gt;
[ctier@rhel-54-64-vm1 netServer]$ sudo route add default gw 172.16.98.1 eth0
[ctier@rhel-54-64-vm1 netServer]$ netstat -rn
Kernel IP routing table
Destination     Gateway         Genmask         Flags   MSS Window  irtt Iface
172.16.98.0     0.0.0.0         255.255.255.0   U         0 0          0 eth0
169.254.0.0     0.0.0.0         255.255.0.0     U         0 0          0 eth0
0.0.0.0         172.16.98.1     0.0.0.0         UG        0 0          0 eth0
[ctier@rhel-54-64-vm1 netServer]$ sudo vi /etc/sysconfig/network
[ctier@rhel-54-64-vm1 netServer]$ grep GATEWAY /etc/sysconfig/network
GATEWAY=172.16.98.1
&lt;/pre&gt;

== Configuring the Dukes Bank demo project with NetServer objects for Bare Metal Provisioning ==
* download or copy/move the rhel 5.4 64-bit linux o/s distribution in dvd iso format into its designated installation root
** NOTE: the rhel url shown here may only work within a redhat network and may requiring registering with  [https://www.redhat.com/wapps/ugc/register.html RedHat]
 sudo mkdir -p /var/ftp/linux-install/rhel-server-5.4-x86_64
 cd /var/ftp/linux-install/rhel-server-5.4-x86_64
 sudo wget https://content-web.rhn.redhat.com/rhn/isos/RHEL-5.4/rhel-x86_64-server-5/rhel-server-5.4-x86_64-dvd.iso
* Copy the demo NetServer objects from the DukesBankProjectBuilder module objects directory:
 cp $CTL_BASE/projects/demo/modules/DukesBankProjectBuilder/objects/default-network-object.xml $HOME/demo
* Register/upload the controltier client rpm into the ControlTier package repository
&lt;pre&gt;
[ctier@rhel-54-64-vm1 demo]$ egrep 'project|package type.*YumRpm.*ctier-client' default-network-object.xml  &gt; ctier-client.rpm.xml
[ctier@rhel-54-64-vm1 demo]$ctl  -p demo  -m YumRpm -c upload -- -xml /opt/ctier/demo/ctier-client.rpm.xml -filename ctier-client-3.4.12-1.noarch.rpm
&lt;/pre&gt;
* Load the network objects into the project:
  ctl -p demo  -t DukesBankProjectBuilder -r dukesbank -c load-resources -- -filename $HOME/demo/default-network-object.xml
* Deploy the resources
 ctl-exec -p demo -a install

== Deploying the NetServer Objects ==
At this point, in addition to the single node Dukes Bank configuration, a demoNet Site configuration should now exist in the demo project to support bare metal provisioning of a new rhel54-64-vm2.local node object,  where Dukes Bank services can be deployed to.  In this demo, this node will be the staging node for a jboss deployment.

Execute the demoNet Site Deploy
 ctl -p demo -t Site -r demoNet -c Deploy 

After executing the Deploy workflow, the following events and configurations occur:

* '''pxelinux.cfg''' - A mac address specfic pxelinux.cfg is generated from the PxeLinuxServer module template
&lt;pre&gt;
[ctier@rhel-54-64-vm1 demo]$ cat /tftpboot/linux-install/pxelinux.cfg/01-00-50-56-37-d4-53 
default rhel-server-5.4-x86_64

timeout 100
ontimeout local
prompt 0
serial 0 9600

label rhel-server-5.4-x86_64
  kernel rhel-server-5.4-x86_64/vmlinuz
  append initrd=rhel-server-5.4-x86_64/initrd.img ip=172.16.98.112 netmask=255.255.255.0 ks=ftp://172.16.98.131/linux-install/kickstart/00-50-56-37-d4-53.cfg ksdevice=eth0 console=tty0 console=ttyS0,9600n8 ramdisk_size=204800 noipv6 dns=172.16.98.131 text

LABEL local
  MENU LABEL Boot local hard drive
  LOCALBOOT 0
&lt;/pre&gt;
** this pxelinux.cfg file is responsible for booting the NetServer client, identified by its Mac Address:  00-50-56-37-d4-53.  This configuration provides all necessary information to statically address the netserver client and allow it to subsequently obtain the kickstart configuration.  
** Additionally, this file is configured for unattended installation where prompting is disabled and refers to a templatized label identified by the O/S release.  The additional local label is not used and only exists for advanced configuration out of scope for this demo.
* '''ks.cfg''' - A mac address specific kickstart configuration file (known as a ks.cfg) is generated from the LinuxNode module template (which is accessible via FTP):
&lt;pre&gt;
[ctier@rhel-54-64-vm1 demo]$ cat /var/ftp/linux-install/kickstart/00-50-56-37-d4-53.cfg 
#############################################################################
# Global Portal Kickstart file.
#############################################################################

# See: http://www.redhat.com/docs/manuals/enterprise/RHEL-5-manual/Installation_Guide-en-US/s1-kickstart2-options.html

# Install a fresh system rather than upgrade an existing system:
install

# Install from an installation tree on a remote server via FTP:
url --url ftp://172.16.98.131/linux-install/rhel-server-5.4-x86_64

# Skip entering a key:
key --skip

# Controls the error logging of anaconda during installation:
logging --host=172.16.98.131 --level=info

# System authorization information:
auth  --useshadow  --enablemd5 

# System bootloader configuration:
bootloader --location=mbr

# Clear the Master Boot Record:
zerombr

# Partition clearing information:
clearpart --all --initlabel 

# Creates a partition on the system:
part swap --recommended
part / --fstype=&quot;ext3&quot; --grow --size=3000

# Perform the kickstart installation in text mode:
text

# Do not configure any iptables rules:
firewall --disabled

# Run the Setup Agent on first boot
firstboot --disable

# Sets system keyboard type:
keyboard us

# Sets the language to use during installation and the default language to use on the installed system:
lang en_US.UTF-8

# Configures network information for the system:
network --device=eth0 --bootproto=static --hostname rhel-54-64-vm2.local --ip=172.16.98.112 --netmask=255.255.255.0 --gateway=172.16.98.131 --nameserver=172.16.98.131 --noipv6

# Reboot after the installation is successfully completed (no arguments):
reboot

#
# Set up the Yum repository:
# NOTE:  this appears to not work, no  /etc/yum.repos.d/demo-all is created.  
# See %post section where we do it manually
#
repo --name=demo-all --baseurl=http://rhel-54-64-vm1.local:8080/RPMS/

# Sets the system's root password (to &quot;password&quot;):
#rootpw --iscrypted $1$GOUVjY5L$SHJbvpmz5vo.SE0BYFPe81
rootpw --iscrypted $1$GOUVjY5L$SHJbvpmz5vo.SE0BYFPe81

# Sets the state of SELinux on the installed system:
selinux --disabled

# If present, X is not configured on the installed system:
skipx

# Sets the system time zone:
timezone  America/Los_Angeles

#############################################################################
# Packages to install and remove
#############################################################################
%packages
#
# for java-1.6.0 and its prereq packages
#
jpackage-utils
libXtst
alsa-lib
giflib
java-1.6.0-openjdk



#############################################################################
# Pre-installation script:
#############################################################################
%pre
exec &lt; /dev/tty3 &gt; /dev/tty3 2&gt;&amp;1
set -x
echo &quot;Running pre-package installation script ...&quot;

#############################################################################
# Post-installation script:
#############################################################################
%post
exec &lt; /dev/tty3 &gt; /dev/tty3 2&gt;&amp;1
set -x
echo &quot;Running post-package installation script ...&quot;

#
# unfortunately, the kickstart repo command above does not seem to work
# so we do it the ugly way
#
cd /etc/yum.repos.d
cat &gt; demo-all.repo &lt;&lt;!
[demo-all]
name=ControlTier Demo $releasever - $basearch
baseurl=http://rhel-54-64-vm1.local:8080/RPMS/
gpgcheck=0
!

yum -y install ctier-client
su - ctier -c &quot;JAVA_HOME=/usr ctl-setup -f -n rhel-54-64-vm2.local -s 172.16.98.131 --framework.node.type=LinuxNode&quot;
su - ctier -c &quot;ctl-project -p demo -a create&quot;
#awful hack until we upgrade core library in hopefully 3.4.13 :(
sed -i 's/depends=&quot;-pre-opts&quot;//'  /opt/ctier/ctl/projects/demo/modules/Managed-Entity/commands/Get-Properties.xml 
su - ctier -c &quot;ctl-project -p demo -a install&quot;
&lt;/pre&gt;
** In addition to a standard RHEL5 kickstart, the following additional configuration is described: 
*** '''key''' - RedHat License Key is assumed not to exist and will skip this part of the O/S installation
*** '''network''' - static network configuration is applied via information obtained from the model
*** '''repo''' - templatized the YUM repo configuration
**** '''NOTE''':  The kickstart repo configuration for this rhel5 does not seem to work and has been redundantly configured via the post install
*** '''rootpw''' - encrypted from literal &quot;password&quot; and templatized in the model via the LinuxNode attribute-default
*** '''%packages''' - additional packages, java related, are added here to satisfy the controltier client rpm installation
*** '''%pre/%post''' - during pre and post installation, the exec call ensures that all stdout/stderr is redirected to virtual serial port #3 (in Mac VMWare Fusion and during the kickstart process, equates to fn-alt F3 key combination)
*** '''%post''' - during post installation, the controltier client is installed and ensures the Node is registered into the demo project.
* '''Loop mounted ISOs''' - O/S distribution ISO is mounted  for each known distribution in the model.  The ISO itself is overlaid by a mounted filesystem and accessible via FTP:
&lt;pre&gt;
[ctier@rhel-54-64-vm1 objects]$ df
Filesystem           1K-blocks      Used Available Use% Mounted on
/dev/sda1             15235040   8419608   6029052  59% /
tmpfs                   513464         0    513464   0% /dev/shm
 /data/ftp/linux-install/rhel-server-5.4-x86_64/rhel-server-5.4-x86_64-dvd.iso
                       3490018   3490018         0 100%  /data/ftp/linux-install/rhel-server-5.4-x86_64
&lt;/pre&gt;
* '''DHCP service''' -  configured on the ControlTier Server
** /etc/dhcpd.conf, the dhcp configuration file, is generated from the DhcpServer module template
&lt;pre&gt;
[[ctier@rhel-54-64-vm1 demo]$ cat /etc/dhcpd.conf
#
# DHCP Server Configuration file.
#   see /usr/share/doc/dhcp*/dhcpd.conf.sample  
#

#########################################
# Static options that should never change
#########################################
not authoritative;
allow bootp;
allow booting;
ddns-update-style               none;

option domain-name &quot;local&quot;;
#########################################
# Dynamic Options
#########################################
subnet 172.16.98.0 netmask 255.255.255.0 {
        authoritative;
        range                           172.16.98.100 172.16.98.127;
        option routers                  172.16.98.131;
        next-server                     172.16.98.131;
        filename                        &quot;linux-install/pxelinux.0&quot;;
        option domain-name-servers      172.16.98.131;
        host rhel-54-64-vm2.local { 
                hardware ethernet 00:50:56:37:d4:53;
                fixed-address 172.16.98.112;
        }
}
&lt;/pre&gt;
** Some of the key dhcpd configuration to note:
*** '''domain-name''' - global domain name
*** '''range''' - for dynamic ip assignments)
*** '''next-server''' - to determine where the tftp server will be, in this case the ControlTier server
*** '''filename''' - indicates the pxelinux image
*** '''subnet''' - vmware specific subnet configuration and specific DHCP reservation(s) within, which shows that rhel-54-64-vm2.local has been reserved based on its configured mac address
** Ensure dhcp is running:
&lt;pre&gt;
[[ctier@rhel-54-64-vm1 demo]$ sudo /etc/rc.d/init.d/dhcpd  status
dhcpd (pid  29101) is running.../rc.d/init.d/dhcpd  start
&lt;/pre&gt;
* '''DNS service''' - configured on the ControlTier Server
** Some of the key DNS configurations to note:
*** '''named.conf''' - dns/bind configuration file including root hints and &quot;local&quot; domain configuration
&lt;pre&gt;
[ctier@rhel-54-64-vm1 demo]$ sudo cat /var/named/chroot/etc/named.conf
options {
 directory &quot;/var/named&quot;;
 };
 
zone &quot;.&quot; IN {
 type hint;
 file &quot;named.root&quot;;
 };
zone &quot;local&quot; IN {
 type master;
 file &quot;local.zone&quot;;
 allow-transfer { none; };
 allow-update { none; };
 };
&lt;/pre&gt;
*** '''local.zone''' - zone data for the &quot;local&quot; domain which includes the current ControlTier server and the future kickstart client node
&lt;pre&gt;
[ctier@rhel-54-64-vm1 demo]$ sudo cat /var/named/chroot/var/named/local.zone
$TTL 3h
 
@ IN SOA rhel-54-64-vm1.local. root.local. (
 2006120702 ; counter/ Serial
 20m ; refresh
 15m ; Retry Interval
 1w ; Expire
 1h ) ; Negative Cache TTL
 IN NS rhel-54-64-vm1.local.
 IN MX 10 rhel-54-64-vm1.local.
rhel-54-64-vm1.local. IN A 172.16.98.131
rhel-54-64-vm2.local. IN A 172.16.98.112
&lt;/pre&gt;
*** '''named.root''' - root hints file for typical name server configuration:
&lt;pre&gt;
[ctier@rhel-54-64-vm1 demo]$ sudo cat /var/named/chroot/var/named/local.zone
$TTL 3h
 
@ IN SOA rhel-54-64-vm1.local. root.local. (
 2006120702 ; counter/ Serial
 20m ; refresh
 15m ; Retry Interval
 1w ; Expire
 1h ) ; Negative Cache TTL
 IN NS rhel-54-64-vm1.local.
 IN MX 10 rhel-54-64-vm1.local.
rhel-54-64-vm1.local. IN A 172.16.98.131
rhel-54-64-vm2.local. IN A 172.16.98.112
[ctier@rhel-54-64-vm1 demo]$ sudo ls /var/named/chroot/var/named/
172.16.98.db  data  ${local.zone}  ${local}.zone  local.zone  named.root  slaves
[ctier@rhel-54-64-vm1 demo]$ sudo cat /var/named/chroot/var/named/named.root
;       This file holds the information on root name servers needed to
;       initialize cache of Internet domain name servers
;       (e.g. reference this file in the &quot;cache  .  &lt;file&gt;&quot;
;       configuration file of BIND domain name servers).
;
;       This file is made available by InterNIC 
;       under anonymous FTP as
;           file                /domain/named.cache
;           on server           FTP.INTERNIC.NET
;       -OR-                    RS.INTERNIC.NET
;
;       last update:    Jun 17, 2010
;       related version of root zone:   2010061700
;
; formerly NS.INTERNIC.NET
;
.                        3600000  IN  NS    A.ROOT-SERVERS.NET.
A.ROOT-SERVERS.NET.      3600000      A     198.41.0.4
A.ROOT-SERVERS.NET.      3600000      AAAA  2001:503:BA3E::2:30
;
; FORMERLY NS1.ISI.EDU
;
.                        3600000      NS    B.ROOT-SERVERS.NET.
B.ROOT-SERVERS.NET.      3600000      A     192.228.79.201
;
; FORMERLY C.PSI.NET
;
.                        3600000      NS    C.ROOT-SERVERS.NET.
C.ROOT-SERVERS.NET.      3600000      A     192.33.4.12
;
; FORMERLY TERP.UMD.EDU
;
.                        3600000      NS    D.ROOT-SERVERS.NET.
D.ROOT-SERVERS.NET.      3600000      A     128.8.10.90
;
; FORMERLY NS.NASA.GOV
;
.                        3600000      NS    E.ROOT-SERVERS.NET.
E.ROOT-SERVERS.NET.      3600000      A     192.203.230.10
;
; FORMERLY NS.ISC.ORG
;
.                        3600000      NS    F.ROOT-SERVERS.NET.
F.ROOT-SERVERS.NET.      3600000      A     192.5.5.241
F.ROOT-SERVERS.NET.      3600000      AAAA  2001:500:2F::F
;
; FORMERLY NS.NIC.DDN.MIL
;
.                        3600000      NS    G.ROOT-SERVERS.NET.
G.ROOT-SERVERS.NET.      3600000      A     192.112.36.4
;
; FORMERLY AOS.ARL.ARMY.MIL
;
.                        3600000      NS    H.ROOT-SERVERS.NET.
H.ROOT-SERVERS.NET.      3600000      A     128.63.2.53
H.ROOT-SERVERS.NET.      3600000      AAAA  2001:500:1::803F:235
;
; FORMERLY NIC.NORDU.NET
;
.                        3600000      NS    I.ROOT-SERVERS.NET.
I.ROOT-SERVERS.NET.      3600000      A     192.36.148.17
I.ROOT-SERVERS.NET.      3600000      AAAA  2001:7FE::53
;
; OPERATED BY VERISIGN, INC.
;
.                        3600000      NS    J.ROOT-SERVERS.NET.
J.ROOT-SERVERS.NET.      3600000      A     192.58.128.30
J.ROOT-SERVERS.NET.      3600000      AAAA  2001:503:C27::2:30
;
; OPERATED BY RIPE NCC
;
.                        3600000      NS    K.ROOT-SERVERS.NET.
K.ROOT-SERVERS.NET.      3600000      A     193.0.14.129
K.ROOT-SERVERS.NET.      3600000      AAAA  2001:7FD::1
;
; OPERATED BY ICANN
;
.                        3600000      NS    L.ROOT-SERVERS.NET.
L.ROOT-SERVERS.NET.      3600000      A     199.7.83.42
L.ROOT-SERVERS.NET.      3600000      AAAA  2001:500:3::42
;
; OPERATED BY WIDE
;
.                        3600000      NS    M.ROOT-SERVERS.NET.
M.ROOT-SERVERS.NET.      3600000      A     202.12.27.33
M.ROOT-SERVERS.NET.      3600000      AAAA  2001:DC3::35
; End of File
&lt;/pre&gt;
*** ensure named is running and verify kickstart server and client are responding to DNS queries:
&lt;pre&gt;
[ctier@rhel-54-64-vm1 demo]$ sudo /etc/rc.d/init.d/dhcpd  status
dhcpd (pid  29101) is running...
[ctier@rhel-54-64-vm1 demo]$ sudo /etc/rc.d/init.d/named  status
number of zones: 1
debug level: 0
xfers running: 0
xfers deferred: 0
soa queries in progress: 0
query logging is OFF
recursive clients: 0/1000
tcp clients: 0/100
server is up and running
named (pid  29395) is running...
[ctier@rhel-54-64-vm1 demo]$ dig @localhost rhel-54-64-vm1.local A +short
172.16.98.131
[ctier@rhel-54-64-vm1 demo]$ dig @localhost rhel-54-64-vm2.local A +short
172.16.98.112
&lt;/pre&gt;
* '''YUM repo''' - configured on the ControlTier Server
** for convenience purposes to avoid configuration a separate web server, the yum repo is installed within the Document Root of the ControlTier Jetty Server:
&lt;pre&gt;
[ctier@rhel-54-64-vm1 demo]$ cat $JETTY_HOME/controltier/RPMS/demo-all.repo 
[demo-all]
 name=Sitewide Packages
 baseurl=http://rhel-54-64-vm1.local:8080/RPMS/
 gpgcheck=0
[ctier@rhel-54-64-vm1 demo]$ [ctier@rhel-54-64-vm1 demo]$ ls $JETTY_HOME/controltier/RPMS/
ctier-client-3.4.12-1.noarch.rpm  demo-all.repo  repodata
&lt;/pre&gt;
** the ctier-client package is currently present within the YUM repo to satisfy the kickstart post installation yum request

== The Object Model ==

The following images describe the top Dukes Bank demo project with respect to the new NetServer objects recently uploaded into the model:

demoNet Site object:

[[File:DukesBankNSSiteHeader.jpg]]

...
...

[[File:DukesBankNSSiteBody.jpg]]

Note the immediate dependencies of the demoNet Site object:
* DhcpServer
* DnsServer
* KickstartServer
* PxeLinuxServer
* YumRepository

== See it in action ==

Given that we are in an isolated VMware Host Networking subnet, we must ensure that the VMware kickstart client is configured to boot off of the network.
The following image via 

&lt;pre&gt;
Settings -&gt; Advanced -&gt; Startup Device
&lt;/pre&gt;
shows that the client will boot via the network:

[[File:VMwareStartupDevice.jpg]]

'''NOTE, Important''':
After the boot sequence has begun, '''reconfigure the Startup Device back to Hard Disk''' to prevent a kickstart infinite loop since the reboot configuration in the kickstart config is enabled.   

The following image shows both VMware instances in action.  The left is a tailing of the ControlTier Server's syslog and the right is the kickstart client booting off of the network:

[[File:VMwareServerAndClientRunning.jpg]]

Eventually, the kickstart file (VM#2) will boot with the expected hostname configured:

[[File:VMwareClientKickstarted.jpg]]</text>
    </revision>
  </page>
  <page>
    <title>Dukes Bank Provisioning JBoss applications</title>
    <id>353</id>
    <revision>
      <id>14135</id>
      <timestamp>2010-11-10T15:56:43Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;ctl-depot&quot; to &quot;ctl-project&quot;</comment>
      <text xml:space="preserve">[[Image:java_duke_mascot.jpg|32px]] This is part of the DukesBank portion of the [[ControlTier Demo]]

==Overview==

In this demo we are going to deploy a release of the full Dukes Bank application. This example deploys both JBoss and Hypersonic RDB as well as their respective application specific packages, configures the integrated application, and starts the services in the appropriate order. Which release is used is specified by the buildstamp provided (if none, then the latest is used).

[[Image:Screencast-icon.png]]  [http://open.controltier.com/media/BasicDemo3_DeployApp.swf Watch a video of this demo (less than 5:00)]

==Prerequisites==
This demo assumes you have completed:
* [[Building Dukes Bank Project]]
* [[Dukes Bank Provisioning JBoss instances]]
* [[Dukes Bank Checkout and Build]]

==Preparation==

Before getting started confirm that all of the necessary objects are deployed to CTL.

Run the [[ctl-project]] command:
&lt;pre&gt;
ctl-project -p demo -a install
&lt;/pre&gt;
Output:
&lt;pre&gt;
&quot;Install&quot; command running for resource: (Site) developmentDukesBank
&quot;Install&quot; command running for resource: (Updater) developmentDukesBank
&quot;Install&quot; command running for resource: (JBossAntBuilder) dukesBank
&quot;Install&quot; command running for resource: (HsqldbRdbExportBuilder) dukesBank
&quot;Install&quot; command running for resource: (JBossServer) developmentDukesBank
&quot;Install&quot; command running for resource: (HsqldbRdb) developmentDukesBank
.
.
.
&lt;/pre&gt;

==Update==

===View the process flow===

The process flow view shows that BuildAndUpdate actually is composed of two commands:
* Change-Dependencies: This reconfigures all the Services to use the artifacts from the Build step
* Deploy: This invokes the &quot;Deploy&quot; command across the Site's objects (updating both JBoss and HSQLDB services)


The process flow view generated by Workbench show off the steps:

[[Image:DukesBank-Updater-Update-pview.png]]

You'll notice the the Dukes Bank .ear package isn't listed in the process flow above. This is because the process flow is dynamically generated and since we haven't yet deployed a Dukes Bank .ear to this JBoss server, the &quot;developmentDukesBank&quot; JBoss server doesn't have its .ear dependency set yet. When the Change Dependencies part of this process flow executes the .ear dependency will be set for the Deploy part of the process flow. 


===Run Update using last buildstamp===
You can run Update without arguments to configure the Services in the Site to use the last buildstamp

&lt;pre&gt;
ctl -p demo -t Updater -r developmentDukesBank -c Update
&lt;/pre&gt;
Output:
&lt;pre&gt;
Start: &quot;Changes package dependencies and runs the coordinated deployment cycle across the configured Sites.&quot; commands: Change-Dependencies,Deploy
.
.
.
Start: &quot;Query model and switch package dependencies to the specified version or buildstamp..&quot; Changing to package dependencies with buildstamp &quot;trunk.1.2.3.952&quot; ...
.
.
.
starting: developmentDukesBank[Site]-&gt;Deploy ...
Dispatching command 'Deploy' to objects: developmentDukesBank[HsqldbRdb], developmentDukesBank[JBossServer] ...
.
.
.
&lt;/pre&gt;

===Run Update specifying a specific buildstamp===
Very typically, you may want to deploy a particular set of build artifacts. Do this by specifying the &quot;&lt;code&gt;-buildstamp&lt;/code&gt;&quot; option.

Substitute the -buildstamp argument with one you used during the [[Dukes Bank Checkout and Build]] demo.

&lt;pre&gt;
ctl -p demo -t Updater -r developmentDukesBank -c Update -- -buildstamp 20090114
&lt;/pre&gt;
Output:
&lt;pre&gt;
Start: &quot;Changes package dependencies and runs the coordinated deployment cycle across the configured Sites.&quot; commands: Change-Dependencies,Deploy
begin workflow command (1/2) -&gt; &quot;Change-Dependencies -buildstamp 20090119 -resourcename .* -resourcetype [^\.]*&quot; ...
Start: &quot;Query model and switch package dependencies to the specified version or buildstamp..&quot; Changing to package dependencies with buildstamp &quot;20090114&quot; ...
&lt;/pre&gt;

===View current .ear dependency in Workbench===
If you view the child dependencies of the &quot;developmentDukesBank&quot; JbossServer in Workbench you can see which .ear package the Deploy command is currently set to use. If you ran the &quot;developmentDukesBank&quot; JbossServer's Deploy command directly this would be the package deployed if necessary.  
[[image:Dukesbank verify package dependency.png|700px]]

===View the Dukes Bank website===
You can now view the running Dukes Bank website. Go to the instructions on [[Accessing the Dukes Bank Website]] for more information.

==Summary==
In this demo we covered:
* The process flow for the Dukes Bank Update command that first preforms an Change-Dependencies and then deploys JBoss, HSQLDB, and their respective application specific packages
* Running the Update command at the Site level (first using the latest buildstamp and then using a specific build stamp)
* Looking at current package dependencies in Workbench
* Viewing the running Dukes Bank website

[[Category:Dukes Bank Demo]]
[[Category:JBoss]]
[[Category:Screencasts]]</text>
    </revision>
  </page>
  <page>
    <title>Dukes Bank Provisioning JBoss instances</title>
    <id>351</id>
    <revision>
      <id>16379</id>
      <timestamp>2012-02-20T10:15:52Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <comment>Undo revision 15662 by [[Special:Contributions/Huberlivingston1|Huberlivingston1]] ([[User talk:Huberlivingston1|talk]]) Reverted SPAM bot edits</comment>
      <text xml:space="preserve">[[Image:java_duke_mascot.jpg|32px]] This is part of the DukesBank portion of the [[ControlTier Demo]]
==Overview==
In this demo we are going to deploy and start an empty instance of JBoss that will later have the Dukes Bank application deployed to it. This example shows the JBossServer type coordinating the deploy cycle that includes: shutdown, package download, configuration and startup.

The JBossServer type is actually a subtype of [[Service]] and therefore inherits deployment and service cycle management commands from the Service type.

See also:
* [[Dukes Bank and Operations]] page for information about managing the service runstate (e.g., startup, shutdown, status).
* [[Dukes Bank and Multiple Nodes]] page for information on deploying JBoss to more than one Node

[[Image:Screencast-icon.png]]  [http://open.controltier.com/media/BasicDemo1_JBossProvision.swf Watch a video of this demo (less than 5:00)]

==Prerequisites==
This demo assumes you have completed:
* [[Building Dukes Bank Project|Setup for the Dukes Bank Project]]

==Preparation==

Before getting started confirm the JBossServer and Site objects are deployed to CTL.

Run the [[ctl-project]] install command for the demo project:

&lt;pre&gt;
$ ctl-project -p demo -a install
&quot;Install&quot; command running for resource: (Site) developmentDukesBank
.
.
.
&quot;Install&quot; command running for resource: (JBossServer) developmentDukesBank
.
.
.
&lt;/pre&gt;

Your output should show the Site and JBossServer (among other objects).

You are now ready to run the demo.

==Running the Example==

You can run any of the Service commands like so: &lt;code&gt;ctl -p demo -t JBossServer -r developmentDukesBank -c &lt;command-name&gt;&lt;/code&gt;

If you run the command without the ''-c &lt;command-name&gt;'' parameter you will see a listing of commands.

===Run Deploy ===

Run the &lt;code&gt;Deploy&lt;/code&gt; command without arguments:

&lt;pre&gt;
ctl -p demo -t JBossServer -r developmentDukesBank -c Deploy
&lt;/pre&gt;

This command tells the CTL client to &quot;run the Deploy command for the developmentDukesBank object (of type JBossServer) in the demo project&quot;.

After the command completes, you should be able to see the management screen of an empty JBoss instance at http://localhost:8180 (or your server's hostname).

[[image:Jboss_welcome.png]]

You can also run a CTL command to check the status of the JBoss instance like so:
&lt;pre&gt;
ctl -p demo -t JBossServer -r developmentDukesBank -c Status
&lt;/pre&gt;
&lt;pre&gt;
begin workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot; ...
JBoss is UP.
end workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot;
&lt;/pre&gt;

====What the Example Shows====

You saw a lot of output from the &lt;code&gt;Deploy&lt;/code&gt; but what did it do? The nitty gritty is explained in the [[#How it Works]] and [[#The Output]] sections but here's what occurred at a high level:

# The resource model describing the developmentDukesBank JBossServer was synchronized to the CTL framework. This resource model drives all the automation commands.
#* This resource model described where the JBoss instance runs, what packages it uses, what listening port it binds to, as well as, the scripts to use to drive various steps of the end-to-end process.
# Deploy calls the Stop command to shutdown the running JBoss instance in case it had already been running. The shutdown procedure used scripts that are configured for this step.
#* One of these scripts used information from the resource model to lookup the JBoss connector port to see if it was listening on that socket. Another command checked the listening port to ensure the service had stopped listening.
# Deploy's next step handled the package installation workflow. This step downloaded, extracted the JBoss server distribution, also part of the resource model.
#* During the installation phase of the Zip, a &quot;finish&quot; script was called to customize the JBoss installation by setting permissions and execute bits.
# After the packages were installed, Deploy ran the Configure command which generates several configuration files
#* Configuration file generation was handled by Docs-Generate, a command that uses a set of templates to generate into the server/default/conf directory: binds.xml, jboss-service.xml and run.conf
# The final step called by Deploy was to run the Start command which handles the JBoss startup.
#* This used two scripts named in the resource model to check if the JBoss was already up and if not to call the JBoss run.sh script. After the run.sh script was called, another command waited until a particular log message was found in the log file.

==How it Works==

The diagram below describes the resource model for this example. The model describes a JBossServer deployed to one Node. The JBossServer is configured to install a JBossZip package. The service uses two  settings to define ports and java options. Lastly, there is an association to a HsqldbRdb resource that represents the JBoss' dependency on the Hypersonic database.

[[Image:dukesbank-jboss-service-model.png|Example's Resource Model]]

From Workbench you can see the developmentDukesBank JBossServer's resource model from the &quot;Service Manager&quot; page:

[[Image:dukesbank-jboss-service-screenshot.png]]

You can see one Package assignement along with one Node, the host where developmentDukesBank is deployed.

The developmentDukesBank JBossServer resource model is defined in a [[project.xml|project XML]] file generated into the &lt;code&gt;$CTIER_ROOT/demo&lt;/code&gt;. directory. The following sections walk through the XML definition files used to define its resource model. Each type of resource has an associated set of metadata. First the metadata describing the package is reviewed and then the metadata about the Service.

===The Package definitions===

One package was defined for this example: jboss-4.0.3SP1.zip. This Zip contains the distribution for JBoss 4.0.3SP1.

Package metadata is defined using the &lt;code&gt;[[Project-v10.xml#package|package]]&lt;/code&gt; tag. This tag uses a set of attributes to define the various bits of information describing each package. 

Below you can see metadata about the jboss-4.0.3SP1.zip file. The metadata includes information like build time, install root directory, version among other properties. This metadata defines a package named &quot;jboss-4.0.3SP1.zip&quot; that is of type, &quot;JBossZip&quot;. The normal naming convention for a package is to use its filename as the resource name. The type name (in this case &quot;JBossZip&quot;) specifies which Package subtype to use. Package subtypes can provide their own install life cycle implementations. For example, the &quot;JBossZip&quot; type defines an &lt;code&gt;[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_zip.html#cmd_extract extract]&lt;/code&gt; command that understands how to extract Zip archives as well as how to perform extra steps like changing permissions and ownerships.

File listing: jboss-4.0.3SP1.zip.xml
&lt;pre&gt;
  &lt;package 
      type=&quot;JBossZip&quot; 
      name=&quot;jboss-4.0.3SP1.zip&quot; 
      version=&quot;4.0.3SP1&quot; 
      release=&quot;&quot; 
      buildtime=&quot;&quot;
      arch=&quot;noarch&quot; 
      filename=&quot;jboss-4.0.3SP1.zip&quot; 
      filetype=&quot;zip&quot; 
      base=&quot;jboss-4.0.3SP1&quot; 
      installroot=&quot;${resource.attribute.jboss_install_root}&quot; 
      repoUrl=&quot;/zip/zips/jboss-4.0.3SP1.zip&quot; 
      releasetag=&quot;&quot; 
      installrank=&quot;30&quot; 
      restart=&quot;false&quot; 
      vendor=&quot;Red Hat Middleware, LLC.&quot; 
      description=&quot;JBoss Enterprise Application Platform package&quot;/&gt;
&lt;/pre&gt;

===The Service definition===
This section describes the definition of the JBossServer resource. The service definition is broken into two parts: one for settings and the other for the Service itself. The section will walk through the XML definition found in the file listing contained in &lt;code&gt;$CTIER_ROOT/demo/default-object.xml&lt;/code&gt;.

====Settings====
Settings can be used to describe any kind of information that is essentially a named key/value pair.

Below is the XML used to define these settings for the developmentDukesBank JBossServer resource model.
The &lt;code&gt;[[Project-v10.xml#setting|setting]]&lt;/code&gt; tag is used to define the each setting type and corresponding setting value. You can see two settings: 

&lt;pre&gt;
	&lt;!-- JBossServer settings: --&gt;
&lt;setting type=&quot;JBossPortConfig&quot; name=&quot;developmentDukesBank&quot; 
	description=&quot;JBoss service bindings port configuration&quot; 
	settingValue=&quot;ports-01&quot;/&gt;
&lt;setting type=&quot;JBossJavaOpts&quot; name=&quot;developmentDukesBank&quot; 
	description=&quot;JBoss Java options&quot; 
	settingValue=&quot;-Djava.naming.provider.url=jnp://localhost:1199&quot;/&gt;
&lt;/pre&gt;

====Service====
This section describes how to tie the Service resource model together. The resource model describing the example Service entails referencing the setting information just described as well as referencing any packages that should be installed during deployment. For the developmentDukesBank service that means referencing the two settings and the one package.

A service is defined using a &lt;code&gt;[[Project-v10.xml#deployment|deployment]]&lt;/code&gt; tag. The &lt;code&gt;deployment&lt;/code&gt; tag uses a set of attributes to name and specify the type of resource (eg &lt;code&gt;name=&quot;developmentDukesBank&quot; type=&quot;JBossServer&quot;&lt;/code&gt;). The &lt;code&gt;installRoot&lt;/code&gt; and &lt;code&gt;basedir&lt;/code&gt; attributes declare the location of the JBoss installation.

The settings and packages are referenced as &lt;code&gt;[[Project-v10.xml#resource|resource]]&lt;/code&gt; elements inside the &lt;code&gt;[[Project-v10.xml#resources|resources]]&lt;/code&gt; element. The node where this JBossServer is to be deployed is referenced in the &lt;code&gt;[[Project-v10.xml#referrers|referrers]]&lt;/code&gt; element.

Here's the XML that ties the service, settings and package information together:
&lt;pre&gt;
&lt;deployment 
	type=&quot;JBossServer&quot; name=&quot;developmentDukesBank&quot; 
	description=&quot;Development environment JBoss server&quot; 
	basedir=&quot;/Users/alexh/ctier/demo/elements/development/dukesbank/jboss-4.0.3SP1/server/default&quot; 
	installRoot=&quot;/Users/alexh/ctier/demo/elements/development/dukesbank/jboss-4.0.3SP1&quot; 
	startuprank=&quot;2&quot;&gt;
   
   &lt;resources replace=&quot;true&quot;&gt;
     &lt;resource type=&quot;JBossZip&quot; name=&quot;jboss-4.0.3SP1.zip&quot;/&gt;
     &lt;resource type=&quot;JBossPortConfig&quot; name=&quot;developmentDukesBank&quot;/&gt;
     &lt;resource type=&quot;JBossJavaOpts&quot; name=&quot;developmentDukesBank&quot;/&gt;
     &lt;resource type=&quot;HsqldbRdb&quot; name=&quot;developmentDukesBank&quot;/&gt;
   &lt;/resources&gt;

   &lt;referrers replace=&quot;false&quot;&gt;
     &lt;resource type=&quot;Node&quot; name=&quot;strongbad&quot;/&gt;
   &lt;/referrers&gt;
 &lt;/deployment&gt;
&lt;/pre&gt;

===The Output===

The &lt;code&gt;Deploy&lt;/code&gt; command is a workflow that calls a sequence of four commands: &lt;code&gt;Stop, Packages-Install, Configure, Start&lt;/code&gt;.

You can preview the actions of the Deploy workflow from Workbench. Navigate to the developmentDukesBank[Service] object from the &quot;Service Manager&quot; and press the &quot;Commands&quot; tab. Locate the &quot;Deploy&quot; workflow and press the yellow button to right.

You will see the Process Flow view display workflow structure across the commands that are dispatched by Deploy.

[[Image:DukesBank-JBossServer-Deploy-pview.png]]

You can see the Deploy workflow has several steps:
# Stop: Shutdown the server (if it is not already stopped)
# Packages-Install: Download, extract and install any package dependencies
# Configure: Perform post package installation configuration steps
# Start: Start up the server.

You can also see that these steps are workflows themselves, each of which has it's own sub structure. Note also that all the commands are running on the Node &quot;centos&quot;.

Since there's quite a lot of output messages from Deploy we'll look at each command in turn and examine output from each.

First let's look at the &lt;code&gt;Stop&lt;/code&gt; command.
&lt;pre&gt;ctl -p demo -t JBossServer -r developmentDukesBank -c Stop&lt;/pre&gt;
Stop calls &lt;code&gt;assertServiceIsDown&lt;/code&gt; command which checks if JBoss is already down.

&lt;pre&gt;
begin workflow command (1/4) -&gt; &quot;Stop &quot; ...
begin workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot; ...
alexh    18933  0.2 20.9 325120 108008 ?     Sl   01:48   2:53 /home/alexh/ctier/pkgs/jdk1.5.0_17/bin/java 
-server -Dprogram.name=run.sh -Djava.endorsed.dirs=/home/alexh/ctier/demo/elements/development/dukesbank/jboss-4.0.3SP1/lib/endorsed 
-classpath /home/alexh/ctier/demo/elements/development/dukesbank/jboss-4.0.3SP1/bin/run.jar:/home/alexh/ctier/pkgs/jdk1.5.0_17/lib/tools.jar org.jboss.Main -c default
Error handler caught failed command execution: developmentDukesBank[JBossServer]-&gt;assertServiceIsDown. reason: 
The following error occurred while executing this line:
/home/alexh/ctier/ctl/projects/default/modules/JBossServer/commands/assertServiceIsDown.xml:33: shellscript returned: 1
Running handler command: stopServiceWrapper
Workflow beginning. commands: stopService,waitforStopEvent
begin workflow command (1/2) -&gt; &quot;stopService &quot; ...
Shutdown message has been posted to the server.
Server shutdown may take a while - check logfiles for completion
end workflow command (1/2) -&gt; &quot;stopService &quot;
begin workflow command (2/2) -&gt; &quot;waitforStopEvent &quot; ...
end workflow command (2/2) -&gt; &quot;waitforStopEvent &quot;
end workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot;
end workflow command (1/4) -&gt; &quot;Stop &quot;
&lt;/pre&gt;

In this example output, the &lt;code&gt;assertServiceIsDown&lt;/code&gt; detected the JBoss instance was was running causing Stop to call &lt;code&gt;stopServiceWrapper&lt;/code&gt;, also a workflow that calls two commands: &lt;code&gt;stopService&lt;/code&gt; to shutdown JBoss and then &lt;code&gt;waitforStopEvent&lt;/code&gt; which checks the JBoss listening port to ensure the service did go down.
If the Stop command was run again, &lt;code&gt;assertServiceIsDown&lt;/code&gt; would detect the JBoss instance down and the Stop workflow would have completed then.
	
Next let's look at the output of the &lt;code&gt;Packages-Install&lt;/code&gt; command.

&lt;pre&gt;ctl -p demo -t JBossServer -r developmentDukesBank -c Packages-Install&lt;/pre&gt;

This command is a workflow that iterates over each of the assigned Package resources and for each calls that packages &lt;code&gt;Install&lt;/code&gt; command. The &lt;code&gt;Install&lt;/code&gt; command is a Package type workflow that kicks off each step in the package installation life cycle.

It's easiest to break up this output and discuss each step.


&lt;pre&gt;
begin workflow command (2/4) -&gt; &quot;Packages-Install &quot; ...
Start: &quot;Install the configured package dependencies for the deployment.&quot; Beginning installation for packages:   jboss-4.0.3SP1.zip[JBossZip] ...
Dispatching command 'assertPackageIsVerified' to objects: jboss-4.0.3SP1.zip[JBossZip] ...
starting: jboss-4.0.3SP1.zip[JBossZip]-&gt;assertPackageIsVerified ...
&lt;/pre&gt;

The first step in the package installation cycle is &lt;code&gt;assertPackageIsVerified&lt;/code&gt; which wraps each of the package installation cycles to ensure a verified result.

&lt;pre&gt;
Getting: http://strongbad:8080/jackrabbit/repository/controltier/projects/demo/publish/modules/JBossZip-head.jar
To: /Users/alexh/ctier/ctl/var/tmp/downloads/demo/JBossZip-head.jar
Created dir: /Users/alexh/ctier/ctl/projects/demo/modules/JBossZip
Expanding: /Users/alexh/ctier/ctl/var/tmp/downloads/demo/JBossZip-head.jar into /Users/alexh/ctier/ctl/projects/demo/modules/JBossZip
Attempting to get PlatformZip-head.jar ...
Getting: http://strongbad:8080/jackrabbit/repository/controltier/projects/demo/publish/modules/PlatformZip-head.jar
To: /Users/alexh/ctier/ctl/var/tmp/downloads/demo/PlatformZip-head.jar
Created dir: /Users/alexh/ctier/ctl/projects/demo/modules/PlatformZip
Expanding: /Users/alexh/ctier/ctl/var/tmp/downloads/demo/PlatformZip-head.jar into /Users/alexh/ctier/ctl/projects/demo/modules/PlatformZip
Attempting to get zip-head.jar ...
Getting: http://strongbad:8080/jackrabbit/repository/controltier/projects/demo/publish/modules/zip-head.jar
To: /Users/alexh/ctier/ctl/var/tmp/downloads/demo/zip-head.jar
Not modified - so not downloaded
zip up to date
Attempting to get Package-head.jar ...
Getting: http://strongbad:8080/jackrabbit/repository/controltier/projects/demo/publish/modules/Package-head.jar
To: /Users/alexh/ctier/ctl/var/tmp/downloads/demo/Package-head.jar
Not modified - so not downloaded
Package up to date
&lt;/pre&gt;

The Package &lt;code&gt;[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Package.html#cmd_Install Install]&lt;/code&gt; command does a couple things:
* downloads the needed command module jar files that contains the Zip specific install cycle commands (eg JBossZip-head.jar). 
* checks if the package was previously installed and then calls &lt;code&gt;[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Package.html#cmd_installPackage installPackage]&lt;/code&gt; which does all the work of getting, extracting and finishing the installation (ie, steps 1-5).

The next bit of output is the workflow run by &lt;code&gt;installPackage&lt;/code&gt; a workflow that calls these commands: &lt;code&gt;installDependencies,preapre,get,extract,finish&lt;/code&gt;

&lt;pre&gt;
begin workflow command (1/1) -&gt; &quot;assertPackageIsInstalled -installroot /Users/alexh/ctier/demo/elements/development/dukesbank/jboss-4.0.3SP1&quot; ...
Running handler command: installPackage
&lt;/pre&gt;
The &lt;code&gt;installDependencies&lt;/code&gt; command checks to see if this Package has package resources assigned to it. The jboss-4.0.3S1.zip package does not but if it had those would have been installed before proceeding to the next step.
&lt;pre&gt;
begin workflow command (1/5) -&gt; &quot;installDependencies -filename jboss-4.0.3SP1.zip -installroot /Users/alexh/ctier/demo/elements/development/dukesbank/jboss-4.0.3SP1 -url http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/jboss-4.0.3SP1.zip&quot; ...
Dispatching command 'Install' to objects:  ...
end workflow command (1/5) -&gt; &quot;installDependencies -filename jboss-4.0.3SP1.zip -installroot /Users/alexh/ctier/demo/elements/development/dukesbank/jboss-4.0.3SP1 -url http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/jboss-4.0.3SP1.zip&quot;
&lt;/pre&gt;
Next, the &lt;code&gt;prepare&lt;/code&gt; command runs. It's job is to perform any pre-install steps. It's a &quot;hook command&quot; and can be configured to call one of your scripts. In this case, nothing special is done.
&lt;pre&gt;
begin workflow command (2/5) -&gt; &quot;prepare -filename jboss-4.0.3SP1.zip -installroot /Users/alexh/ctier/demo/elements/development/dukesbank/jboss-4.0.3SP1 -url http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/jboss-4.0.3SP1.zip&quot; ...
end workflow command (2/5) -&gt; &quot;prepare -filename jboss-4.0.3SP1.zip -installroot /Users/alexh/ctier/demo/elements/development/dukesbank/jboss-4.0.3SP1 -url http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/jboss-4.0.3SP1.zip&quot;
&lt;/pre&gt;
The &lt;code&gt;get&lt;/code&gt; command obtains the package archive file from the repository
&lt;pre&gt;
begin workflow command (3/5) -&gt; &quot;get -filename jboss-4.0.3SP1.zip -installroot /Users/alexh/ctier/demo/elements/development/dukesbank/jboss-4.0.3SP1 -url http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/jboss-4.0.3SP1.zip&quot; ...
Created dir: /Users/alexh/ctier/demo/elements/development/dukesbank/jboss-4.0.3SP1
Getting: http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/jboss-4.0.3SP1.zip
To: /Users/alexh/ctier/demo/elements/development/dukesbank/jboss-4.0.3SP1/jboss-4.0.3SP1.zip
end workflow command (3/5) -&gt; &quot;get -filename jboss-4.0.3SP1.zip -installroot /Users/alexh/ctier/demo/elements/development/dukesbank/jboss-4.0.3SP1 -url http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/jboss-4.0.3SP1.zip&quot;
&lt;/pre&gt;
After the package archive is obtained, it is extracted. Besides unzip'ing the file, this command
also performs some customization: changing permissions and ownerships.
&lt;pre&gt;
begin workflow command (4/5) -&gt; &quot;extract -filename jboss-4.0.3SP1.zip -installroot /Users/alexh/ctier/demo/elements/development/dukesbank/jboss-4.0.3SP1 -url http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/jboss-4.0.3SP1.zip&quot; ...
Expanding: /Users/alexh/ctier/demo/elements/development/dukesbank/jboss-4.0.3SP1/jboss-4.0.3SP1.zip into /Users/alexh/ctier/demo/elements/development/dukesbank
[command.timer.extract: 11.971 sec]
command completed successfully. Execution time: 11.971 sec
end workflow command (4/5) -&gt; &quot;extract -filename jboss-4.0.3SP1.zip -installroot /Users/alexh/ctier/demo/elements/development/dukesbank/jboss-4.0.3SP1 -url http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/jboss-4.0.3SP1.zip&quot;
&lt;/pre&gt;
Finally, the &lt;code&gt;finish&lt;/code&gt; command runs. This like the &lt;code&gt;prepare&lt;/code&gt; command is a hook where you can configure your own post-installation procedure to run.
&lt;pre&gt;
begin workflow command (5/5) -&gt; &quot;finish -filename jboss-4.0.3SP1.zip -installroot /Users/alexh/ctier/demo/elements/development/dukesbank/jboss-4.0.3SP1 -url http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/jboss-4.0.3SP1.zip&quot; ...
Deleting: /Users/alexh/ctier/demo/elements/development/dukesbank/jboss-4.0.3SP1/jboss-4.0.3SP1.zip
[command.timer.demo.PlatformZip.jboss-4.0.3SP1.zip.finish: 0.171 sec]
end workflow command (5/5) -&gt; &quot;finish -filename jboss-4.0.3SP1.zip -installroot /Users/alexh/ctier/demo/elements/development/dukesbank/jboss-4.0.3SP1 -url http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/jboss-4.0.3SP1.zip&quot;
&lt;/pre&gt;

The final messages are from the &lt;code&gt;assertPackageisVerified&lt;/code&gt; command that checks that the steps completed. 

&lt;pre&gt;
end workflow command (1/1) -&gt; &quot;assertPackageIsInstalled -installroot /Users/alexh/ctier/demo/elements/development/dukesbank/jboss-4.0.3SP1&quot;
[command.timer.demo.Package.Install: 34.045 sec]
Workflow completed. execution time: 34.045 sec
Executing script: /Users/alexh/ctier/ctl/projects/demo/modules/Package/bin/is-verified.xml ...
Package is VERIFIED
Completed: Installed packages:   jboss-4.0.3SP1.zip[JBossZip]
end workflow command (2/4) -&gt; &quot;Packages-Install &quot;
&lt;/pre&gt;

The jboss-4.0.3SP1.zip installation completed and was verified.

After the &lt;code&gt;Packages-Install&lt;/code&gt; command, the next command in the Deploy sequence is &lt;code&gt;Configure&lt;/code&gt; 

&lt;pre&gt;ctl -p demo -t JBossServer -r developmentDukesBank -c Configure&lt;/pre&gt;

The Configure workflow calls &lt;code&gt;Docs-Generate&lt;/code&gt; which generates any registered configuration documents from templates. Our developmentDukesBank example produces several of them (bindings.xml, jboss-service.xml, run.conf). 

&lt;pre&gt;
begin workflow command (3/4) -&gt; &quot;Configure &quot; ...
begin workflow command (1/1) -&gt; &quot;Docs-Generate &quot; ...
Copying 3 files to /home/alexh/ctier/demo/elements/development/dukesbank/jboss-4.0.3SP1/server/default
Copying /home/alexh/ctier/ctl/projects/default/modules/JBossServer/templates/jboss-4.0.3SP1/server/default/conf/bindings.xml.template to 
/home/alexh/ctier/demo/elements/development/dukesbank/jboss-4.0.3SP1/server/default/conf/bindings.xml
Copying /home/alexh/ctier/ctl/projects/default/modules/JBossServer/templates/jboss-4.0.3SP1/server/default/conf/jboss-service.xml.template to 
/home/alexh/ctier/demo/elements/development/dukesbank/jboss-4.0.3SP1/server/default/conf/jboss-service.xml
Copying /home/alexh/ctier/ctl/projects/default/modules/JBossServer/templates/jboss-4.0.3SP1/server/default/conf/run.conf.template to 
/home/alexh/ctier/demo/elements/development/dukesbank/jboss-4.0.3SP1/server/default/conf/run.conf
Updating HsqldbRdb module ...
Getting: http://strongbad:8080/jackrabbit/repository/controltier/projects/default/publish/modules/HsqldbRdb-head.jar
To: /home/alexh/ctier/ctl/var/tmp/downloads/default/HsqldbRdb-head.jar
Not modified - so not downloaded
HsqldbRdb up to date
Updating process view file ...
Framework info:
Type module: /home/alexh/ctier/ctl/projects/default/modules/HsqldbRdb
Object directory: /home/alexh/ctier/ctl/projects/default/resources/JBossServer/developmentDukesBank
Object properties file: /home/alexh/ctier/ctl/projects/default/resources/JBossServer/developmentDukesBank/var/resource.properties
Object process view file: /home/alexh/ctier/ctl/projects/default/resources/JBossServer/developmentDukesBank/var/pview.xml
Updating HsqldbRdbSchema module ...
Getting: http://strongbad:8080/jackrabbit/repository/controltier/projects/default/publish/modules/HsqldbRdbSchema-head.jar
To: /home/alexh/ctier/ctl/var/tmp/downloads/default/HsqldbRdbSchema-head.jar
Not modified - so not downloaded
HsqldbRdbSchema up to date
Updating process view file ...
Framework info:
Type module: /home/alexh/ctier/ctl/projects/default/modules/HsqldbRdbSchema
Object directory: /home/alexh/ctier/ctl/projects/default/resources/JBossServer/developmentDukesBank
Object properties file: /home/alexh/ctier/ctl/projects/default/resources/JBossServer/developmentDukesBank/var/resource.properties
Object process view file: /home/alexh/ctier/ctl/projects/default/resources/JBossServer/developmentDukesBank/var/pview.xml
Generating &quot;hsqldb-ds.xml&quot; for (HsqldbRdb) developmentDukesBank (HsqldbRdbSchema) developmentDukesBank ...
Copying 1 file to /home/alexh/ctier/demo/elements/development/dukesbank/jboss-4.0.3SP1/server/default/deploy
end workflow command (1/1) -&gt; &quot;Docs-Generate &quot;
end workflow command (3/4) -&gt; &quot;Configure &quot;
&lt;/pre&gt;

See [[Generating_Configuration_Files]] for information about using &lt;code&gt;Docs-Generate&lt;/code&gt;.

The  last step in the Deploy workflow is the &lt;code&gt;Start&lt;/code&gt; command.
&lt;pre&gt;
ctl -p demo -t JBossServer -r developmentDukesBank -c Start
&lt;/pre&gt;

The Start workflow calls &lt;code&gt;assertServiceIsUp&lt;/code&gt; which checks the process table for a running JBoss instance.
The assertServiceIsUp command detects the JBoss instance is down so &lt;code&gt;Start&lt;/code&gt; calls the &lt;code&gt;startServiceWrapper&lt;/code&gt; command which is in turn, is a workflow that calls: &lt;code&gt;startService,waitforStartEvent&lt;/code&gt;.

&lt;pre&gt;
begin workflow command (4/4) -&gt; &quot;Start &quot; ...
begin workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot; ...
JBoss is not UP!
Running handler command: startServiceWrapper
Workflow beginning. commands: startService,waitforStartEvent
begin workflow command (1/2) -&gt; &quot;startService &quot; ...
Created dir: /Users/alexh/ctier/demo/elements/development/dukesbank/jboss-4.0.3SP1/server/default/log
end workflow command (1/2) -&gt; &quot;startService &quot;
begin workflow command (2/2) -&gt; &quot;waitforStartEvent &quot; ...
end workflow command (2/2) -&gt; &quot;waitforStartEvent &quot;
end workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot;
end workflow command (4/4) -&gt; &quot;Start &quot;
&lt;/pre&gt;
The &lt;code&gt;startService&lt;/code&gt; command defined in the JBossServer type invokes the JBoss &quot;run.sh&quot; script passing to it the Java options specified in the settings. The &lt;code&gt;waitforStartEvent&lt;/code&gt; is called after and checks the JBoss log file until it sees the expected start up string in it.

== Summary ==

In this Demo we covered:
* Viewing the process flow of a workflow command in Workbench
* Using the Deploy command to deploy and start an empty JBoss server

Related demos:
* [[Dukes Bank Checkout and Build]] for information on coordinating the build process for the application packages.
* [[Dukes Bank and Operations]] for information about managing the service cycle of the JBoss server(e.g., startup, shutdown, status).

Related examples:
* [[Service_Package_Deployment_Example]]
* [[Mock_Unix_Service_Example]]

[[Category:Dukes Bank Demo]]
[[Category:JBoss]]
[[Category:Screencasts]]</text>
    </revision>
  </page>
  <page>
    <title>Dukes Bank System Provisioning</title>
    <id>1947</id>
    <revision>
      <id>14008</id>
      <timestamp>2010-11-10T15:30:01Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;ctl-project&quot; to &quot;ctl-depot&quot;</comment>
      <text xml:space="preserve">{{Version|3.6.1}} ''or 3.6.0 patched with the latest 3-6-support branch of the core and elements module libraries''

This [[Examples|example]] demonstrates how to automate physical (&quot;bare metal&quot;) and/or virtual system provisioning as an integrated process with (Duke's Bank) application deployment. System provisioning automation is achieved using the standard Redhat/CentOS tool-chain modules included in the [[Elements]] library.

== Description ==

Duke's Bank is a J2EE demo application where release automation (build to deployment and staging) is automated by ControlTier. This example adds the dimension of provisioning new systems upon which the various Duke's Bank environments are deployed (build, development and staging). 

In addition to familiarity with the [[Dukes_Bank_J2EE_examples|Duke's Bank examples]] themselves, you'll need at least a conceptual understanding of the following technologies:

* [http://en.wikipedia.org/wiki/Trivial_File_Transfer_Protocol TFTP] for [http://en.wikipedia.org/wiki/Preboot_Execution_Environment PXE] booting
* [http://en.wikipedia.org/wiki/Kickstart_(Linux) Kickstart] configuration (ks.cfg)
* Managing the O/S distribution ISO
* FTP for serving O/S distribution
* [http://en.wikipedia.org/wiki/Dynamic_Host_Configuration_Protocol DHCP] for dynamic addressing
* [http://www.isc.org/software/bind Bind/DNS] for managing IP Addresses
* [http://www.redhat.com/docs/en-US/Red_Hat_Enterprise_Linux/5.4/html/Deployment_Guide/c1-yum.html Rhel5 YUM repository]

== Preparation ==



=== System setup ===

The first thing you'll need to do is setup the administration server to bootstrap the demonstration.

This example has been tested using VMware Fusion on a MacBook Pro with 8GB of RAM. It should work with little or no adjustment in any VMware environment (e.g. ESXi), any other virtualization tool (e.g. Linux KVM), or even using separate pieces of hardware for each node.

By definition the example requires one or other version of Redhat/CentOS linux. In particular it has been tested using 64-bit CentOS 5.4.

The demonstration assumes that you can setup an isolated &quot;demo.net&quot; IP sub-network (10.10.10.0/255.255.255.0) with statically assigned MAC addresses for the various network adapter interfaces that make up the network.

{{notice|Working with VMWare Fusion you can assign MAC addresses of the form &quot;00:50:56:0a:0a:xx&quot; where the first three bytes are automatically assigned by VMWare, and the last three bytes are assigned from the hexadecimal values of the least most significant bytes of the assigned IP address (i.e. &quot;10.10.xx&quot;). This is a convention we commonly use when setting up virtual infrastructures like this.}}

{{notice|The demonstration is driven from the &quot;DukesBankProjectBuilder/objects/demo.net.xml&quot; project XML file. You can adjust the network numbers and hostnames, etc in this file if you wish to customize the example to fit in your network}}

* Create &quot;admin.demo.net&quot; as a new system in your network:

{{notice|Typically, this might be a virtual instance with the basic 64-bit CentOS 5.4 server installed (with firewall security and SELinux disabled). A VMware VM with 2GB memory and 16GB disk has been successfully tested for this purpose}}
{{notice|Make sure you enable the Linux GUI desktop and install a browser on admin.demo.net since it'll be the only way to access the Duke's Bank application when it is deployed to the (non-routable) isolated demo.net subnet}}

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[root@admin ~]# uname -a 
Linux admin.demo.net 2.6.18-164.el5 #1 SMP Thu Sep 3 03:28:30 EDT 2009 x86_64 x86_64 x86_64 GNU/Linux
[root@admin ~]# cat /etc/redhat-release 
CentOS release 5.4 (Final)
&lt;/syntaxhighlight&gt;

* Add &quot;admin.demo.net&quot; as an alias for localhost:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[root@admin ~]# cat /etc/hosts
# Do not remove the following line, or various programs
# that require network functionality will fail.
127.0.0.1               localhost.localdomain localhost admin.demo.net
::1             localhost6.localdomain6 localhost6
&lt;/syntaxhighlight&gt;

* Statically define a second network interface to setup the &quot;demo.net&quot; network:

{{caution|The demonstration uses an isolated sub-network like this in order to avoid collisions with other DHCP servers that might be active in your network. Note that this will ''always'' be the case if you're using virtualization software like VMware.}}

{{notice|Working with VMware Fusion you can add the new network adapter as follows:[[File:demo.net.network.png]]}}

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[root@admin ~]# cat /etc/sysconfig/network-scripts/ifcfg-eth1 
# Intel Corporation 82545EM Gigabit Ethernet Controller (Copper)
# DEVICE=eth1
# BOOTPROTO=dhcp
# ONBOOT=yes
# HWADDR=00:50:56:0a:0a:01
DEVICE=eth1
IPADDR=10.10.10.1 
NETMASK=255.255.255.0 
BOOTPROTO=static 
ONBOOT=yes 
HWADDR=00:50:56:0a:0a:01
[root@admin ~]# ifconfig eth1
eth1      Link encap:Ethernet  HWaddr 00:50:56:0A:0A:01  
          inet addr:10.10.10.1  Bcast:10.10.10.255  Mask:255.255.255.0
          inet6 addr: fe80::250:56ff:fe0a:a01/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:78 errors:0 dropped:0 overruns:0 frame:0
          TX packets:47 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:13890 (13.5 KiB)  TX bytes:8230 (8.0 KiB)
          Base address:0x2080 Memory:d8960000-d8980000 
&lt;/syntaxhighlight&gt;

* The demonstration assumes that the system you choose to be admin.demo.net has access to the standard CentOS Yum repositories in the Internet in order to be able to install RPMs beyond those included in the basic server installation. If that is not the case, go ahead and install the following packages (and their dependencies) from the distribution:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[root@admin ~]# rpm -q rpm-build
rpm-build-4.4.2.3-18.el5
[root@admin ~]# rpm -q bind-chroot
bind-chroot-9.3.6-4.P1.el5_4.2
[root@admin ~]# rpm -q dhcp
dhcp-3.0.5-23.el5_5.2
[root@admin ~]# rpm -q tftp-server
tftp-server-0.49-2.el5.centos
[root@admin ~]# rpm -q vsftpd
vsftpd-2.0.5-16.el5_5.1
[root@admin ~]# rpm -q createrepo
createrepo-0.4.11-3.el5
&lt;/syntaxhighlight&gt;

=== ControlTier installation ===

* Follow the standard [[RPM installer]] instructions to install the ControlTier server.

* Give password-less sudo root privilege to the &quot;ctier&quot; user since many of the system provisioning tasks need to be executed as super-user. This can be achieved by adding ctier to the &quot;wheel&quot; group and enabling sudo access as follows:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[root@admin tmp]# fgrep wheel /etc/group
wheel:x:10:root,ctier
[root@admin tmp]# grep ^%wheel  /etc/sudoers 
%wheel  ALL=(ALL)       NOPASSWD: ALL

[ctier@admin ~]$ id
uid=101(ctier) gid=103(ctier) groups=10(wheel),103(ctier)
[ctier@admin ~]$ sudo id
uid=0(root) gid=0(root) groups=0(root),1(bin),2(daemon),3(sys),4(adm),6(disk),10(wheel)
&lt;/syntaxhighlight&gt;

* Generate a set of SSH keys for the ctier user:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[ctier@admin ~]$ ssh-keygen -t dsa
Generating public/private dsa key pair.
Enter file in which to save the key (/opt/ctier/.ssh/id_dsa): 
Enter passphrase (empty for no passphrase): 
Enter same passphrase again: 
Your identification has been saved in /opt/ctier/.ssh/id_dsa.
Your public key has been saved in /opt/ctier/.ssh/id_dsa.pub.
The key fingerprint is:
fe:c0:44:76:2a:ed:ba:82:ee:1f:7a:13:2e:b9:50:1e ctier@admin.demo.net
&lt;/syntaxhighlight&gt;

* Add the generated public key (and any other you might want) to the ctier user's authorized_keys file since this will be used later for each of the newly installed systems:

{{caution|As you probably know, it is critical to get the permissions right on the authorized_keys file (read/write for owner only). Also, use the key you just generated, ''not'' the following example!}}

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[ctier@admin ~]$ cat .ssh/id_dsa.pub &gt;&gt; .ssh/authorized_keys
[ctier@admin ~]$ chmod 600 .ssh/authorized_keys 
[ctier@admin ~]$ ls -la .ssh/authorized_keys 
-rw------- 1 ctier ctier 1753 Sep 21 16:25 .ssh/authorized_keys
[ctier@admin ~]$ cat .ssh/authorized_keys 
sAAAAB3NzaC1kc3MAAACBAId9KXscrRm5HnIYNIBQARQwWjpTuyXUCJ2hxHmsgEz7YhHZS3c0dml0Xm6xgnZpBz7fGjlONnD3E
mjrL4zvbjltIyRz+VlaKcRlAk6/Bq6/FDvKdoXokksFPp9faOi1jLkSuq2dAAhqq4XfuZt6jZJmkECJd26HaQJUZ+vL5me5AAAAFQCpQT
xd9WWKNCwjjfLDSkzIjgK9nwAAAIBWag3REITwQsCWT+wksGnK30d9OiicsOSJjFnOgnBVgXmpmua2VZ8NsZwl4XQp9knjfG3XCN
/FKpBqnxNSEYFLnoGBadb4+XHQYcui94u1+bjZWuJlk/7Jcb8R+GXZyCWKXr8eztiSvDnSkzggy6LdGVvBPEa9ejduFG91AX17HwAA
AIBJAmqhR+RUHlcTt2tQ5/RmxAQGM1OIZGduMwYUa8i7f79IPkzRiLYKbFrJOUfT+wA/7P1EPswAbf73vBHLpNq4m/ULHqxycsHsJ
SXukczcI4MsBSfo/hYw1DAbUKg8vpxThNDiFZwRfR/3UFbdpJghp3FhmJxe8VeuXLEIVkJrsQ== ctier@admin.demo.net
&lt;/syntaxhighlight&gt;

* If you're using ControlTier 3.6.0 go ahead and reset the framework's SSH timeout to infinity (i.e. &quot;0&quot;) so that the Duke's Bank jobs and commands will not fail on time-out:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[ctier@admin DukesBankProjectBuilder]$ diff  ~/ctl/etc/framework.properties ~/ctl/etc/framework.properties.orig
269c269
&lt; framework.ssh.timeout = 0
---
&gt; framework.ssh.timeout = 30000
&lt;/syntaxhighlight&gt;

=== Demonstration project creation ===

* Create a project called demo:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[ctier@admin ~]$ ctl-depot -p demo -a create
Project structure created: /opt/ctier/ctl/projects/demo
Invoking external setup script: /opt/ctier/pkgs/ctl-3.6.0/bin/commander-ctl-depot.xml
Beginning client setup ...
Running CTL project setup: /opt/ctier/pkgs/ctl-3.6.0/lib/ant/controllers/ctl/projectsetupCmd.xml ...
Trying to override old definition of task document-property
CTL project setup procedure completed.
Creating Workbench project 'demo'. This may take several minutes ...
Workbench project created.
Beginning node registration ...
Workbench client host &quot;admin.demo.net[Node]&quot; already registered, updating...
Completed client side project setup. Node admin.demo.net registered in project: &quot;demo&quot;.
&lt;/syntaxhighlight&gt;

* Load the Elements library modules to the new project (since has not been included by default since 3.6.0):

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[ctier@admin ~]$ ctl -p demo -m ProjectBuilder -c load-library -- -jar $CTL_HOME/lib/extensions/commander/jars/elements-seed-3.6.0.jar
Imported types defined in library: /opt/ctier/pkgs/ctl-3.6.0/lib/extensions/commander/jars/elements-seed-3.6.0.jar
&lt;/syntaxhighlight&gt;

{{caution|If you're using ControlTier 3.6.0 this is the moment to patch the project with the latest version of the core and elements modules from Sourceforge. Any version after 3.6.0 will be fine}}

* Delete the Node-type version of the admin.demo.net resource that was automatically created with the project:

{{notice|The demonstration's resource model is based on the set of system provisioning modules whose allowed constraints dictate that the &quot;LinuxNode&quot; sub-type is used for all nodes. A future ControlTier release will resolve this bootstrapping issue by merging constraints into the core (Node) module.}}

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[ctier@admin ~]$ ctl -p demo -m ProjectBuilder -c find-resources -- -type Node -name admin.demo.net -purge 
Deleting: /opt/ctier/ctl/var/sessions/find-resources/find.session
|
|--(Node) admin.demo.net
session data saved: /opt/ctier/ctl/var/sessions/find-resources/find.session
Purging found resources ...
number of resources found in session &quot;find.session&quot;: 1
marked for removal: admin.demo.net[Node]
Number of resources found to purge: 1
Added admin.demo.net[Node] to delete batch operation
Number of delete operations in batch request: 1
&lt;/syntaxhighlight&gt;

* Manually switch the framework's node type to LinuxNode:

&lt;syntaxhighlight lang=&quot;diff&quot;&gt;
[ctier@admin ~]$ diff $CTL_BASE/etc/framework.properties $CTL_BASE/etc/framework.properties.orig
117c117
&lt; framework.node.type = LinuxNode
---
&gt; framework.node.type = Node
&lt;/syntaxhighlight&gt;

* Re-create the project using the new framework node type:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[ctier@admin ~]$ ctl-depot -p demo -a create
Project structure created: /opt/ctier/ctl/projects/demo
Invoking external setup script: /opt/ctier/pkgs/ctl-3.6.0/bin/commander-ctl-depot.xml
Beginning client setup ...
Running CTL project setup: /opt/ctier/pkgs/ctl-3.6.0/lib/ant/controllers/ctl/projectsetupCmd.xml ...
Trying to override old definition of task document-property
CTL project setup procedure completed.
Beginning node registration ...
Registering admin.demo.net[LinuxNode] with ctl.base: /opt/ctier/ctl, ctl.home: /opt/ctier/pkgs/ctl-3.6.0 ...
Registered admin.demo.net[LinuxNode] node to the resource model at http://admin.demo.net:8080/itnav
Completed client side project setup. Node admin.demo.net registered in project: &quot;demo&quot;.
&lt;/syntaxhighlight&gt;

== Administration server setup ==

=== Resource model ===

All the resource model data necessary to setup the demonstration is included in the DukesBankProjectBuilder module as a single project XML file.

* Bootstrap a Duke's Bank project builder as follows:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[ctier@admin ~]$  ctl -p demo -m ProjectBuilder -c Register -- -name demo.net -type DukesBankProjectBuilder -install
Checking for existing resource, demo.net[DukesBankProjectBuilder], in project, 'demo'...
Registered new resource.
The resource can be viewed in the server via URL: http://admin.demo.net:8080/itnav/instances/View.do?maprefUri=http://www.opendepo.org/ct/demo/Objects#obj_5&amp;project=demo
Registering parent dependency to admin.demo.net[Node]
Getting: http://admin.demo.net:8080/jackrabbit/repository/controltier/projects/demo/artifacts/modules/DukesBankProjectBuilder-head.jar
To: /opt/ctier/ctl/projects/demo/artifacts/modules/DukesBankProjectBuilder-head.jar
Deleting directory /opt/ctier/ctl/projects/demo/modules/DukesBankProjectBuilder
Created dir: /opt/ctier/ctl/projects/demo/modules/DukesBankProjectBuilder
Expanding: /opt/ctier/ctl/projects/demo/artifacts/modules/DukesBankProjectBuilder-head.jar into /opt/ctier/ctl/projects/demo/modules/DukesBankProjectBuilder
Getting: http://admin.demo.net:8080/jackrabbit/repository/controltier/projects/demo/artifacts/modules/ProjectBuilder-head.jar
To: /opt/ctier/ctl/projects/demo/artifacts/modules/ProjectBuilder-head.jar
Not modified - so not downloaded
ProjectBuilder up to date
Getting: http://admin.demo.net:8080/jackrabbit/repository/controltier/projects/demo/artifacts/modules/Builder-head.jar
To: /opt/ctier/ctl/projects/demo/artifacts/modules/Builder-head.jar
Not modified - so not downloaded
Builder up to date
Getting: http://admin.demo.net:8080/jackrabbit/repository/controltier/projects/demo/artifacts/modules/Deployment-head.jar
To: /opt/ctier/ctl/projects/demo/artifacts/modules/Deployment-head.jar
Not modified - so not downloaded
Deployment up to date
Created dir: /opt/ctier/ctl/projects/demo/resources/DukesBankProjectBuilder/demo.net/bin
Created dir: /opt/ctier/ctl/projects/demo/resources/DukesBankProjectBuilder/demo.net/logs
Created dir: /opt/ctier/ctl/projects/demo/resources/DukesBankProjectBuilder/demo.net/var
Created dir: /opt/ctier/ctl/projects/demo/resources/DukesBankProjectBuilder/demo.net/var/transforms
For more information about this resource run: ctl -p demo -t DukesBankProjectBuilder -r demo.net -c Properties
&lt;/syntaxhighlight&gt;

* Use the new DukesBankProjectBuilder resource to load the demonstration's resource model:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[ctier@admin ~]$ ctl -p demo -t DukesBankProjectBuilder -r demo.net -c load-resources -- -filename $CTL_BASE/projects/demo/modules/DukesBankProjectBuilder/objects/demo.net.xml
Loading &quot;/opt/ctier/ctl/projects/demo/modules/DukesBankProjectBuilder/objects/demo.net.xml&quot; ...
1 file(s) have been successfully validated.
Processing /opt/ctier/ctl/projects/demo/modules/DukesBankProjectBuilder/objects/demo.net.xml to /opt/ctier/ctl/var/tmp/projectxml-738221043.xml
Loading stylesheet /opt/ctier/ctl/projects/demo/modules/ProjectBuilder/lib/load-resources/projectxml/project.xsl
Mapping XML to properties ...
[timer: 0.826 sec]
Batching new object creation requests ...
[timer: 2.222 sec]
Executing batched new object creation for 54 objects ...
[timer: 5.409 sec]
Batching object attribute update requests ...
Expanding repoUrl to: http://admin.demo.net:8080/jackrabbit/repository/controltier/pkgs/demo/YumRpm/rpms/ctier-client-3.6.0-1.noarch.rpm
[timer: 9.140 sec]
Batching resource and referrer updates ...
[timer: 9.674 sec]
Executing 124 batched object updates ...
[timer: 14.433 sec]
Adding document transforms to deployments ...
[timer: 14.846 sec]
&lt;/syntaxhighlight&gt;

You can review the resource model by either taking a look at the project XML file ($CTL_BASE/projects/demo/modules/DukesBankProjectBuilder/objects/demo.net.xml) or via Workbench. Take a close look at the following aspects of the model:

* The demonstration network is built around the &quot;demo.net&quot; DhcpSubNetwork resource (which specifies the network's DNS server, it's PXE boot file name, the DHCP server's network number, mask and lower and upper IP address range, and the address of the default router). 
* A NetworkInterface resource for the appropriate adapter of each Node on the network is specified as a resource of the demo.net sub-network.
* Each LinuxNode resource establishes key attributes that support the Kickstart process (OS distribution, root password, Yum repository identifier and URI).
* The DHCP, PXE Linux, Kickstart and Yum services are referrers of the demo.net sub-network and each uses the network model to generate their configuration.
* Both these services and the DNS service are deployed to admin.demo.net to establish its capabilities as a &quot;boot server&quot;.
* The boot services are gathered up into the demo.net Site (also deployed to admin.demo.net) to simplify network management (generating the configuration is achieved via a single Site-level Deploy command).

Here's an view the admin.demo.net's resources after the model has been loaded:

[[File:Demo.net.resources.png]]

* Intall the new deployment resources on admin.demo.net:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[ctier@admin ~]$ ctl-depot -p demo -a install 
&quot;resource-install&quot; command running for resource: demo.net[DhcpServer]
&quot;resource-install&quot; command running for resource: demo.net[YumRepository]
&quot;resource-install&quot; command running for resource: demo.net[DukesBankProjectBuilder]
&quot;resource-install&quot; command running for resource: demo.net[DnsServer]
&quot;resource-install&quot; command running for resource: demo.net[KickstartServer]
&quot;resource-install&quot; command running for resource: demo.net[Site]
&quot;resource-install&quot; command running for resource: demo.net[PxeLinuxServer]
&lt;/syntaxhighlight&gt;

=== Packages ===

Creating the demonstration's resource model added a couple of package resources that need to be package files to be supplied:

* Upload the ControlTier client RPM to the WebDAV via Workbench:

[[File:Demo.net.ctier-client-package.png]]

* Setup the directory and copy in the Linux DVD ISO distribution that will be used by PXE boot and Kickstart:

{{caution|By copying the (very large) ISO directly to its installation directory we use a trick to avoid the demonstration squandering disk space. An operational environment might avoid this by uploading the ISO to the ControlTier WebDAV for standard installation}}.
{{notice|The system provisioning modules use Linux &quot;loop-back&quot; devices to mount the ISO files over the installation directory. This saves space in the system by avoiding copying the contents of the ISO to local disk.}}

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[root@admin ~]# ls -l  /var/ftp/linux-install/CentOS-5.4-x86_64
total 4515596
-rw-r--r-- 1 root root 4619442176 Jul 16 15:28 CentOS-5.4-x86_64-bin-DVD.iso
&lt;/syntaxhighlight&gt;

* Deploy the DukesBankProjectBuilder to ensure that the RPM build program (and its dependencies are installed) to that the node-specific RPMs can be built:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[ctier@admin ~]$ ctl -p demo -t DukesBankProjectBuilder -r demo.net -c Deploy
Start: &quot;Run the deployment cycle, coordinating package installation and configuration.&quot; commands: Packages-Install,Configure
begin workflow command (1/2) -&gt; &quot;Packages-Install &quot; ...
.
.
.

Dependencies Resolved

================================================================================
 Package             Arch         Version                   Repository     Size
================================================================================
Installing:
 rpm-build           x86_64       4.4.2.3-20.el5_5.1        updates       301 k
Installing for dependencies:
 elfutils            x86_64       0.137-3.el5               base          215 k
 elfutils-libs       x86_64       0.137-3.el5               base          183 k
Updating for dependencies:
 popt                x86_64       1.10.2.3-20.el5_5.1       updates        77 k
 rpm                 x86_64       4.4.2.3-20.el5_5.1        updates       1.2 M
 rpm-libs            x86_64       4.4.2.3-20.el5_5.1        updates       923 k
 rpm-python          x86_64       4.4.2.3-20.el5_5.1        updates        63 k

Transaction Summary
================================================================================
Install      3 Package(s)         
Update       4 Package(s)         
Remove       0 Package(s)         

Total download size: 2.9 M
Downloading Packages:
--------------------------------------------------------------------------------
Total                                           315 kB/s | 2.9 MB     00:09     
Running rpm_check_debug
Running Transaction Test
Finished Transaction Test
Transaction Test Succeeded
Running Transaction

  Updating       : popt                                                    1/11 
  Installing     : elfutils-libs                                           2/11 
  Installing     : elfutils                                                3/11 
  Updating       : rpm-libs                                                4/11 
  Updating       : rpm                                                     5/11 
  Updating       : rpm-python                                              6/11 
  Installing     : rpm-build                                               7/11 
  Cleanup        : rpm-python                                              8/11 
  Cleanup        : rpm                                                     9/11 
  Cleanup        : popt                                                   10/11 
  Cleanup        : rpm-libs                                               11/11 
Installed:
  rpm-build.x86_64 0:4.4.2.3-20.el5_5.1                                         

Dependency Installed:
  elfutils.x86_64 0:0.137-3.el5        elfutils-libs.x86_64 0:0.137-3.el5       

Dependency Updated:
  popt.x86_64 0:1.10.2.3-20.el5_5.1     rpm.x86_64 0:4.4.2.3-20.el5_5.1        
  rpm-libs.x86_64 0:4.4.2.3-20.el5_5.1  rpm-python.x86_64 0:4.4.2.3-20.el5_5.1 

Complete!
end workflow command (4/5) -&gt; &quot;extract -filename rpm-build-4.4.2.3-18.el5.x86_64.rpm -installroot / -url http://admin.demo.net:8080/jackrabbit/repository/controltier/pkgs/demo/YumRpm/rpms/rpm-build-4.4.2.3-18.el5.x86_64.rpm&quot;
begin workflow command (5/5) -&gt; &quot;finish -filename rpm-build-4.4.2.3-18.el5.x86_64.rpm -installroot / -url http://admin.demo.net:8080/jackrabbit/repository/controltier/pkgs/demo/YumRpm/rpms/rpm-build-4.4.2.3-18.el5.x86_64.rpm&quot; ...
end workflow command (5/5) -&gt; &quot;finish -filename rpm-build-4.4.2.3-18.el5.x86_64.rpm -installroot / -url http://admin.demo.net:8080/jackrabbit/repository/controltier/pkgs/demo/YumRpm/rpms/rpm-build-4.4.2.3-18.el5.x86_64.rpm&quot;
end workflow command (1/1) -&gt; &quot;assertPackageIsInstalled -installroot /&quot;
[command.timer.demo.rpm.Install: 28.040 sec]
Workflow completed. execution time: 28.040 sec
Package is VERIFIED
Completed: Installed packages:   rpm-build-4.4.2.3-18.el5.x86_64.rpm[YumRpm]
end workflow command (1/2) -&gt; &quot;Packages-Install &quot;
begin workflow command (2/2) -&gt; &quot;Configure &quot; ...
begin workflow command (1/1) -&gt; &quot;Docs-Generate &quot; ...
end workflow command (1/1) -&gt; &quot;Docs-Generate &quot;
end workflow command (2/2) -&gt; &quot;Configure &quot;
[command.timer: 33.829 sec]
Completed: execution time: 33.829 sec
&lt;/syntaxhighlight&gt;


* Build the demonstration's node-specific RPMs and add them to the project using the DukesBankProjectBuilder resource:

{{notice|These RPMs will be added to the Yum repository and are an example of how node-specific RPMs containing system configuration files and other site-specific platform files and directories can be integrate with the system provisioning process. The default Kickstart template automatically installs the ctier-''shortname'' RPM for the system}}

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[ctier@admin ~]$ ctl -p demo -t DukesBankProjectBuilder -r demo.net -c Build
Start: &quot;Run the build cycle.&quot; commands: runBuildScript,repoImport
begin workflow command (1/2) -&gt; &quot;runBuildScript &quot; ...
runBuildScript parameters: {basedir=&quot;/opt/ctier/ctl/projects/demo/modules/DukesBankProjectBuilder/rpm&quot;, targetdir=&quot;/opt/ctier/ctl/projects/demo/modules/DukesBankProjectBuilder/rpm/RPMS&quot;, buildstamp=&quot;1.0-1.noarch&quot;, buildfile=&quot;/opt/ctier/ctl/projects/demo/modules/DukesBankProjectBuilder/rpm/build.xml&quot;, target=&quot;all&quot; }
Building the RPM based on the ctier-bld01.spec file
Building target platforms: noarch
Building for target noarch
Processing files: ctier-bld01-1.0-1
Provides: config(ctier-bld01) = 1.0-1
Requires(rpmlib): rpmlib(PayloadFilesHavePrefix) &lt;= 4.0-1 rpmlib(CompressedFileNames) &lt;= 3.0.4-1
Requires: ctier-client
Wrote: /opt/ctier/ctl/projects/demo/modules/DukesBankProjectBuilder/rpm/RPMS/noarch/ctier-bld01-1.0-1.noarch.rpm
Building the RPM based on the ctier-dev01.spec file
Building target platforms: noarch
Building for target noarch
Processing files: ctier-dev01-1.0-1
Provides: config(ctier-dev01) = 1.0-1
Requires(rpmlib): rpmlib(PayloadFilesHavePrefix) &lt;= 4.0-1 rpmlib(CompressedFileNames) &lt;= 3.0.4-1
Requires: ctier-client
Wrote: /opt/ctier/ctl/projects/demo/modules/DukesBankProjectBuilder/rpm/RPMS/noarch/ctier-dev01-1.0-1.noarch.rpm
Building the RPM based on the ctier-stg01.spec file
Building target platforms: noarch
Building for target noarch
Processing files: ctier-stg01-1.0-1
Provides: config(ctier-stg01) = 1.0-1
Requires(rpmlib): rpmlib(PayloadFilesHavePrefix) &lt;= 4.0-1 rpmlib(CompressedFileNames) &lt;= 3.0.4-1
Requires: ctier-client
Wrote: /opt/ctier/ctl/projects/demo/modules/DukesBankProjectBuilder/rpm/RPMS/noarch/ctier-stg01-1.0-1.noarch.rpm
end workflow command (1/2) -&gt; &quot;runBuildScript &quot;
begin workflow command (2/2) -&gt; &quot;repoImport &quot; ...
.
.
.
end workflow command (2/2) -&gt; &quot;repoImport &quot;
[command.timer.demo.DukesBankProjectBuilder.Build: 13.082 sec]
Workflow completed. execution time: 13.082 sec
&lt;/syntaxhighlight&gt;

* For the sake of this example, the node-specific RPM delivers the SSH authorized_keys file to each client (in practice, it can deliver any number of files and trigger a whole host of dependencies with the view to establishing the &quot;platform&quot; on top of the system before the application is installed):

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[ctier@admin elements]$ rpm -qi -p  /opt/ctier/ctl/projects/demo/modules/DukesBankProjectBuilder/rpm/RPMS/noarch/ctier-bld01-1.0-1.noarch.rpm
Name        : ctier-bld01                  Relocations: (not relocatable)
Version     : 1.0                               Vendor: ControlTier Project
Release     : 1                             Build Date: Sun 26 Sep 2010 05:42:04 PM PDT
Install Date: (not installed)               Build Host: localhost.localdomain
Group       : ControlTier                   Source RPM: ctier-bld01-1.0-1.src.rpm
Size        : 610                              License: Apache
Signature   : (none)
Packager    : ControlTier &lt;info@controltier.com&gt;
URL         : http://controltier.org/wiki/Dukes_Bank_System_Provisioning
Summary     : ControlTier Duke's Bank example node-specific package
Description :
This package provides the environment setup necessary to integrate the Duke's Bank system provisioning example's bld01.demo.net host with the ControlTier server.
[ctier@admin elements]$ rpm -qlv -p   /opt/ctier/ctl/projects/demo/modules/DukesBankProjectBuilder/rpm/RPMS/noarch/ctier-bld01-1.0-1.noarch.rpm
drwx------    2 ctier   ctier               0 Sep 26 04:45 /opt/ctier/.ssh
-rw-------    1 ctier   ctier             610 Sep 26 04:45 /opt/ctier/.ssh/authorized_keys
&lt;/syntaxhighlight&gt;

=== Services ===

With the resource model setup and the packages in place we can move on to configure and deploy each of the services in the system provisioning tool-chain:

==== DNS ====

* If you'd like to make sure that the demonstration network DNS does not introduce name lookup timeout delays for names outside of the &quot;demo.net&quot; zone, you'll need to create and add a DnsForwarders setting resource to the demo.net DnsServer whose value specifies the (semi-colon) separated list of IP addresses of &quot;upstream&quot; DNS servers to which to forward requests (usually the &quot;nameservers&quot; from /etc/resolv.conf). This can be done quickly enough using Workbench to create and assign the resource on the fly. e.g.:

[[File:Demo.net.forwarders.png]]

* Deploy the domain name server:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[ctier@admin ~]$ ctl -p demo -t DnsServer -r demo.net -c Deploy 
Start: &quot;Run the deployment cycle, coordinating package installation and configuration.&quot; commands: Configure,Restart
begin workflow command (1/2) -&gt; &quot;Configure &quot; ...
Start: &quot;Run the configuration cycle for the deployment.&quot; commands: generateBindConfig
begin workflow command (1/1) -&gt; &quot;generateBindConfig &quot; ...
generating zone demo.net
Processing record: admin.demo.net
Processing record: bld01.demo.net
Processing record: dev01.demo.net
Processing record: stg01.demo.net
Processing record: demo.net
end workflow command (1/1) -&gt; &quot;generateBindConfig &quot;
[command.timer.demo.DnsServer.Configure: 2.594 sec]
Workflow completed. execution time: 2.594 sec
end workflow command (1/2) -&gt; &quot;Configure &quot;
begin workflow command (2/2) -&gt; &quot;Restart &quot; ...
begin workflow command (1/2) -&gt; &quot;Stop &quot; ...
Start: &quot;Conditionally stops the system service&quot; commands: assertServiceIsDown
begin workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot; ...
number of zones: 1
debug level: 0
xfers running: 0
xfers deferred: 0
soa queries in progress: 0
query logging is OFF
recursive clients: 0/1000
tcp clients: 0/100
server is up and running
named (pid  1754) is running...
Running handler command -&gt; &quot;stopServiceWrapper &quot;
Start: &quot;Wraps the system service stop procedure and waits for stop event&quot; commands: stopService,waitforStopEvent
begin workflow command (1/2) -&gt; &quot;stopService &quot; ...
Stopping named: 
[  OK  ]
end workflow command (1/2) -&gt; &quot;stopService &quot;
begin workflow command (2/2) -&gt; &quot;waitforStopEvent &quot; ...
/var/run/named.pid does not exist, named service is not running.
end workflow command (2/2) -&gt; &quot;waitforStopEvent &quot;
[command.timer.demo.SystemService.stopServiceWrapper: 1.197 sec]
Workflow completed. execution time: 1.197 sec
end workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot;
[command.timer.demo.SystemService.Stop: 3.363 sec]
Workflow completed. execution time: 3.363 sec
end workflow command (1/2) -&gt; &quot;Stop &quot;
begin workflow command (2/2) -&gt; &quot;Start &quot; ...
Start: &quot;Conditionally starts the system service&quot; commands: assertServiceIsUp
begin workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot; ...
named is stopped
rndc: connect failed: 127.0.0.1#953: connection refused
Result: 3
Running handler command -&gt; &quot;startServiceWrapper &quot;
Start: &quot;Wraps the system service start procedure and waits for start event&quot; commands: startService,waitforStartEvent
begin workflow command (1/2) -&gt; &quot;startService &quot; ...
Starting named: [  OK  ]
end workflow command (1/2) -&gt; &quot;startService &quot;
begin workflow command (2/2) -&gt; &quot;waitforStartEvent &quot; ...
Service named is running as process .
end workflow command (2/2) -&gt; &quot;waitforStartEvent &quot;
[command.timer.demo.SystemService.startServiceWrapper: 4.806 sec]
Workflow completed. execution time: 4.806 sec
end workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot;
[command.timer.demo.SystemService.Start: 6.124 sec]
Workflow completed. execution time: 6.124 sec
end workflow command (2/2) -&gt; &quot;Start &quot;
end workflow command (2/2) -&gt; &quot;Restart &quot;
[command.timer.demo.DnsServer.Deploy: 13.725 sec]
Workflow completed. execution time: 13.725 sec
&lt;/syntaxhighlight&gt;

* At this point you'll have made sure bind is installed, generated the name server configuration for the demo.net zone, and have the named running:

 &lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[root@admin ~]$ rpm -q bind-chroot
bind-chroot-9.3.6-4.P1.el5_4.2
[root@admin ~]# cat /var/named/chroot/etc/named.conf 
options {
 directory &quot;/var/named&quot;;
 forward first;
 forwarders {10.0.1.1;};
 }; 
zone &quot;.&quot; IN {
 type hint;
 file &quot;named.root&quot;;
 };
zone &quot;demo.net&quot; IN {
 type master;
 file &quot;demo.net.zone&quot;;
 allow-transfer { none; };
 allow-update { none; };
 };
[root@admin ~]# cat /var/named/chroot/var/named/demo.net.zone 
$TTL 3h
 
@ IN SOA demo.net. root.demo.net. (
 2006120702 ; counter/ Serial
 20m ; refresh
 15m ; Retry Interval
 1w ; Expire
 1h ) ; Negative Cache TTL
 IN NS demo.net.
 IN MX 10 demo.net.
admin.demo.net. IN A 10.10.10.1
bld01.demo.net. IN A 10.10.10.2
dev01.demo.net. IN A 10.10.10.3
stg01.demo.net. IN A 10.10.10.4
[root@admin ~]# service named status
number of zones: 1
debug level: 0
xfers running: 0
xfers deferred: 0
soa queries in progress: 0
query logging is OFF
recursive clients: 0/1000
tcp clients: 0/100
server is up and running
named (pid  13490) is running...
&lt;/syntaxhighlight&gt;

* Manually add the name server to admin.demo.net's resolver file and check that it can resolve the demo.net hostnames. e.g.:

{{notice|With the DNS server's &quot;forwarders&quot; list setup to include all the original nameservers, you can actually replace /etc/resolv.conf with the demo.net name server, if you wish (as opposed to just adding it to the file). Taking this approach would allow /etc/resolv.conf to be automatically managed by the DnsServer module (something it currently stops short of since this might bring the module into conflict with the system's management of that file)}}

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[root@admin ~]# diff /etc/resolv.conf /etc/resolv.conf.orig 
2,3c2
&lt; search dnbgp.dnb.com demo.net
&lt; nameserver 10.10.10.1
---
&gt; search dnbgp.dnb.com
[root@admin ~]# ping -c 1 bld01
PING bld01.demo.net (10.10.10.2) 56(84) bytes of data.
From 10.10.10.1 icmp_seq=1 Destination Host Unreachable

--- bld01.demo.net ping statistics ---
1 packets transmitted, 0 received, +1 errors, 100% packet loss, time 0ms

[root@admin ~]# ping -c 1 netserver
PING netserver.dnbgp.dnb.com (10.190.1.39) 56(84) bytes of data.
64 bytes from 10.190.1.39: icmp_seq=1 ttl=64 time=1.95 ms

--- netserver.dnbgp.dnb.com ping statistics ---
1 packets transmitted, 1 received, 0% packet loss, time 0ms
rtt min/avg/max/mdev = 1.958/1.958/1.958/0.000 ms
[root@admin ~]# ping -c 1 www.google.com
PING www.l.google.com (173.194.35.104) 56(84) bytes of data.

--- www.l.google.com ping statistics ---
1 packets transmitted, 0 received, 100% packet loss, time 0ms

&lt;/syntaxhighlight&gt;

==== DHCP ====

* Deploy the DHCP server:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[ctier@admin ~]$ ctl -p demo -t DhcpServer -r demo.net -c Deploy 
Start: &quot;Run the deployment cycle, coordinating package installation and configuration.&quot; commands: Configure,Restart
begin workflow command (1/2) -&gt; &quot;Configure &quot; ...
Start: &quot;Run the configuration cycle for the deployment.&quot; commands: generateDhcpdConfig
begin workflow command (1/1) -&gt; &quot;generateDhcpdConfig &quot; ...
Copying 1 file to /opt/ctier/ctl/projects/demo/resources/DhcpServer/demo.net/var
Generating &quot;demo.net&quot; subnet ...
Generating &quot;admin.demo.net&quot; host interface ...
Generating &quot;bld01.demo.net&quot; host interface ...
Generating &quot;dev01.demo.net&quot; host interface ...
Generating &quot;stg01.demo.net&quot; host interface ...
Updated &quot;/etc/dhcpd.conf&quot;
end workflow command (1/1) -&gt; &quot;generateDhcpdConfig &quot;
[command.timer.demo.DhcpServer.Configure: 1.389 sec]
Workflow completed. execution time: 1.389 sec
end workflow command (1/2) -&gt; &quot;Configure &quot;
begin workflow command (2/2) -&gt; &quot;Restart &quot; ...
begin workflow command (1/2) -&gt; &quot;Stop &quot; ...
Start: &quot;Conditionally stops the system service&quot; commands: assertServiceIsDown
begin workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot; ...
dhcpd is stopped
Result: 3
Service status returned non-zero
end workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot;
[command.timer.demo.SystemService.Stop: 1.226 sec]
Workflow completed. execution time: 1.226 sec
end workflow command (1/2) -&gt; &quot;Stop &quot;
begin workflow command (2/2) -&gt; &quot;Start &quot; ...
Start: &quot;Conditionally starts the system service&quot; commands: assertServiceIsUp
begin workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot; ...
dhcpd is stopped
Result: 3
Running handler command -&gt; &quot;startServiceWrapper &quot;
Start: &quot;Wraps the system service start procedure and waits for start event&quot; commands: startService,waitforStartEvent
begin workflow command (1/2) -&gt; &quot;startService &quot; ...
Starting dhcpd: 
[  OK  ]
end workflow command (1/2) -&gt; &quot;startService &quot;
begin workflow command (2/2) -&gt; &quot;waitforStartEvent &quot; ...
Service dhcpd is running as process 18000.
end workflow command (2/2) -&gt; &quot;waitforStartEvent &quot;
[command.timer.demo.SystemService.startServiceWrapper: 1.556 sec]
Workflow completed. execution time: 1.556 sec
end workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot;
[command.timer.demo.SystemService.Start: 2.588 sec]
Workflow completed. execution time: 2.588 sec
end workflow command (2/2) -&gt; &quot;Start &quot;
end workflow command (2/2) -&gt; &quot;Restart &quot;
[command.timer.demo.DhcpServer.Deploy: 7.236 sec]
Workflow completed. execution time: 7.236 sec
&lt;/syntaxhighlight&gt;

* At this point the DHCP package is installed, and the daemon is running on the following configuration:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[ctier@admin ~]$ rpm -q dhcp
dhcp-3.0.5-23.el5_5.2
[ctier@admin ~]$ /sbin/service dhcpd status
dhcpd (pid  14981) is running...
[ctier@admin ~]$ cat /etc/dhcpd.conf 
#
# DHCP Server Configuration file.
#   see /usr/share/doc/dhcp*/dhcpd.conf.sample  
#

#########################################
# Static options that should never change
#########################################
not authoritative;
allow bootp;
allow booting;
ddns-update-style               none;

option domain-name &quot;demo.net&quot;;
#########################################
# Dynamic Options
#########################################
subnet 10.10.10.0 netmask 255.255.255.0 {
        authoritative;
        range                           10.10.10.128 10.10.10.192;
        option routers                  10.10.10.1;
        next-server                     10.10.10.1;
        filename                        &quot;linux-install/pxelinux.0&quot;;
        option domain-name-servers      10.10.10.1;
        host admin.demo.net { 
                hardware ethernet 00:50:56:0a:0a:01;
                fixed-address 10.10.10.1;
        }
        host bld01.demo.net { 
                hardware ethernet 00:50:56:0a:0a:02;
                fixed-address 10.10.10.2;
        }
        host dev01.demo.net { 
                hardware ethernet 00:50:56:0a:0a:03;
                fixed-address 10.10.10.3;
        }
        host stg01.demo.net { 
                hardware ethernet 00:50:56:0a:0a:04;
                fixed-address 10.10.10.4;
        }
}
&lt;/syntaxhighlight&gt;

==== PXE Linux ====

* Deploy the PXE Linux configuration:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[ctier@admin ~]$ ctl -p demo -t PxeLinuxServer -r demo.net -c Deploy
Start: &quot;Run the deployment cycle, coordinating package installation and configuration.&quot; commands: Packages-Install,Configure,Start
begin workflow command (1/3) -&gt; &quot;Packages-Install &quot; ...
Start: &quot;Install the configured package dependencies for the deployment.&quot; Beginning installation for packages:   tftp-server-0.49-2.el5.centos.x86_64.rpm[YumRpm],  CentOS-5.4-x86_64-bin-DVD.iso[LinuxIso] ...
Dispatching command 'assertPackageIsVerified ' to: CentOS-5.4-x86_64-bin-DVD.iso[LinuxIso], tftp-server-0.49-2.el5.centos.x86_64.rpm[YumRpm] ...
Getting: http://admin.demo.net:8080/jackrabbit/repository/controltier/projects/demo/artifacts/modules/LinuxIso-head.jar
To: /opt/ctier/ctl/projects/demo/artifacts/modules/LinuxIso-head.jar
Created dir: /opt/ctier/ctl/projects/demo/modules/LinuxIso
Expanding: /opt/ctier/ctl/projects/demo/artifacts/modules/LinuxIso-head.jar into /opt/ctier/ctl/projects/demo/modules/LinuxIso
Getting: http://admin.demo.net:8080/jackrabbit/repository/controltier/projects/demo/artifacts/modules/Package-head.jar
To: /opt/ctier/ctl/projects/demo/artifacts/modules/Package-head.jar
Not modified - so not downloaded
Package up to date
Packages-Install invoking: CentOS-5.4-x86_64-bin-DVD.iso[LinuxIso]#Install -installroot /var/ftp/linux-install/CentOS-5.4-x86_64
Start: &quot;Install object and run the package installation cycle.&quot; commands: assertPackageIsInstalled
begin workflow command (1/1) -&gt; &quot;assertPackageIsInstalled -installroot /var/ftp/linux-install/CentOS-5.4-x86_64&quot; ...
Running handler command -&gt; &quot;installPackage -installroot /var/ftp/linux-install/CentOS-5.4-x86_64&quot;
begin workflow command (1/5) -&gt; &quot;installDependencies -filename CentOS-5.4-x86_64-bin-DVD.iso -installroot /var/ftp/linux-install/CentOS-5.4-x86_64 -url LinuxIso/isos/CentOS-5.4-x86_64-bin-DVD.iso&quot; ...
Dispatching command 'Install -installroot /var/ftp/linux-install/CentOS-5.4-x86_64' to:  ...
end workflow command (1/5) -&gt; &quot;installDependencies -filename CentOS-5.4-x86_64-bin-DVD.iso -installroot /var/ftp/linux-install/CentOS-5.4-x86_64 -url LinuxIso/isos/CentOS-5.4-x86_64-bin-DVD.iso&quot;
begin workflow command (2/5) -&gt; &quot;prepare -filename CentOS-5.4-x86_64-bin-DVD.iso -installroot /var/ftp/linux-install/CentOS-5.4-x86_64 -url LinuxIso/isos/CentOS-5.4-x86_64-bin-DVD.iso&quot; ...
end workflow command (2/5) -&gt; &quot;prepare -filename CentOS-5.4-x86_64-bin-DVD.iso -installroot /var/ftp/linux-install/CentOS-5.4-x86_64 -url LinuxIso/isos/CentOS-5.4-x86_64-bin-DVD.iso&quot;
begin workflow command (3/5) -&gt; &quot;get -filename CentOS-5.4-x86_64-bin-DVD.iso -installroot /var/ftp/linux-install/CentOS-5.4-x86_64 -url LinuxIso/isos/CentOS-5.4-x86_64-bin-DVD.iso&quot; ...
WARNING: iso image, &quot;/var/ftp/linux-install/CentOS-5.4-x86_64/CentOS-5.4-x86_64-bin-DVD.iso&quot;, already exists; skipping download ...
end workflow command (3/5) -&gt; &quot;get -filename CentOS-5.4-x86_64-bin-DVD.iso -installroot /var/ftp/linux-install/CentOS-5.4-x86_64 -url LinuxIso/isos/CentOS-5.4-x86_64-bin-DVD.iso&quot;
begin workflow command (4/5) -&gt; &quot;extract -filename CentOS-5.4-x86_64-bin-DVD.iso -installroot /var/ftp/linux-install/CentOS-5.4-x86_64 -url LinuxIso/isos/CentOS-5.4-x86_64-bin-DVD.iso&quot; ...
end workflow command (4/5) -&gt; &quot;extract -filename CentOS-5.4-x86_64-bin-DVD.iso -installroot /var/ftp/linux-install/CentOS-5.4-x86_64 -url LinuxIso/isos/CentOS-5.4-x86_64-bin-DVD.iso&quot;
begin workflow command (5/5) -&gt; &quot;finish -filename CentOS-5.4-x86_64-bin-DVD.iso -installroot /var/ftp/linux-install/CentOS-5.4-x86_64 -url LinuxIso/isos/CentOS-5.4-x86_64-bin-DVD.iso&quot; ...
end workflow command (5/5) -&gt; &quot;finish -filename CentOS-5.4-x86_64-bin-DVD.iso -installroot /var/ftp/linux-install/CentOS-5.4-x86_64 -url LinuxIso/isos/CentOS-5.4-x86_64-bin-DVD.iso&quot;
end workflow command (1/1) -&gt; &quot;assertPackageIsInstalled -installroot /var/ftp/linux-install/CentOS-5.4-x86_64&quot;
[command.timer.demo.Package.Install: 6.260 sec]
Workflow completed. execution time: 6.260 sec
Package is VERIFIED
Getting: http://admin.demo.net:8080/jackrabbit/repository/controltier/projects/demo/artifacts/modules/YumRpm-head.jar
To: /opt/ctier/ctl/projects/demo/artifacts/modules/YumRpm-head.jar
Not modified - so not downloaded
YumRpm up to date
Getting: http://admin.demo.net:8080/jackrabbit/repository/controltier/projects/demo/artifacts/modules/rpm-head.jar
To: /opt/ctier/ctl/projects/demo/artifacts/modules/rpm-head.jar
Not modified - so not downloaded
rpm up to date
Getting: http://admin.demo.net:8080/jackrabbit/repository/controltier/projects/demo/artifacts/modules/Package-head.jar
To: /opt/ctier/ctl/projects/demo/artifacts/modules/Package-head.jar
Not modified - so not downloaded
Package up to date
Packages-Install invoking: tftp-server-0.49-2.el5.centos.x86_64.rpm[YumRpm]#Install -installroot /
saved session key: session.rpm.workingDir, value: /opt/ctier/ctl/var/tmp/downloads saved session key: session.rpm.packageFile, value: /opt/ctier/ctl/var/tmp/downloads/null1194898926.rpm
Start: &quot;Install object and run the package installation cycle.&quot; commands: assertPackageIsInstalled
begin workflow command (1/1) -&gt; &quot;assertPackageIsInstalled -installroot /&quot; ...
package tftp-server-0.49 is not installed
Running handler command -&gt; &quot;installPackage -installroot /&quot;
begin workflow command (1/5) -&gt; &quot;installDependencies -filename tftp-server-0.49-2.el5.centos.x86_64.rpm -installroot / -url http://admin.demo.net:8080/jackrabbit/repository/controltier/pkgs/demo/YumRpm/rpms/tftp-server-0.49-2.el5.centos.x86_64.rpm&quot; ...
Dispatching command 'Install -installroot /' to:  ...
end workflow command (1/5) -&gt; &quot;installDependencies -filename tftp-server-0.49-2.el5.centos.x86_64.rpm -installroot / -url http://admin.demo.net:8080/jackrabbit/repository/controltier/pkgs/demo/YumRpm/rpms/tftp-server-0.49-2.el5.centos.x86_64.rpm&quot;
begin workflow command (2/5) -&gt; &quot;prepare -filename tftp-server-0.49-2.el5.centos.x86_64.rpm -installroot / -url http://admin.demo.net:8080/jackrabbit/repository/controltier/pkgs/demo/YumRpm/rpms/tftp-server-0.49-2.el5.centos.x86_64.rpm&quot; ...
end workflow command (2/5) -&gt; &quot;prepare -filename tftp-server-0.49-2.el5.centos.x86_64.rpm -installroot / -url http://admin.demo.net:8080/jackrabbit/repository/controltier/pkgs/demo/YumRpm/rpms/tftp-server-0.49-2.el5.centos.x86_64.rpm&quot;
begin workflow command (3/5) -&gt; &quot;get -filename tftp-server-0.49-2.el5.centos.x86_64.rpm -installroot / -url http://admin.demo.net:8080/jackrabbit/repository/controltier/pkgs/demo/YumRpm/rpms/tftp-server-0.49-2.el5.centos.x86_64.rpm&quot; ...
end workflow command (3/5) -&gt; &quot;get -filename tftp-server-0.49-2.el5.centos.x86_64.rpm -installroot / -url http://admin.demo.net:8080/jackrabbit/repository/controltier/pkgs/demo/YumRpm/rpms/tftp-server-0.49-2.el5.centos.x86_64.rpm&quot;
begin workflow command (4/5) -&gt; &quot;extract -filename tftp-server-0.49-2.el5.centos.x86_64.rpm -installroot / -url http://admin.demo.net:8080/jackrabbit/repository/controltier/pkgs/demo/YumRpm/rpms/tftp-server-0.49-2.el5.centos.x86_64.rpm&quot; ...
Result: 1
Loaded plugins: fastestmirror
Loading mirror speeds from cached hostfile
 * addons: mirrors.kernel.org
 * base: mirror.stanford.edu
 * extras: centos.mirror.facebook.net
 * updates: mirror.nwresd.org
Setting up Install Process
Resolving Dependencies
--&gt; Running transaction check
---&gt; Package tftp-server.x86_64 0:0.49-2.el5.centos set to be updated
--&gt; Processing Dependency: xinetd for package: tftp-server
--&gt; Running transaction check
---&gt; Package xinetd.x86_64 2:2.3.14-10.el5 set to be updated
--&gt; Finished Dependency Resolution

Dependencies Resolved

================================================================================
 Package            Arch          Version                     Repository   Size
================================================================================
Installing:
 tftp-server        x86_64        0.49-2.el5.centos           base         32 k
Installing for dependencies:
 xinetd             x86_64        2:2.3.14-10.el5             base        125 k

Transaction Summary
================================================================================
Install      2 Package(s)         
Update       0 Package(s)         
Remove       0 Package(s)         

Total download size: 156 k
Downloading Packages:
--------------------------------------------------------------------------------
Total                                           197 kB/s | 156 kB     00:00     
Running rpm_check_debug
Running Transaction Test
Finished Transaction Test
Transaction Test Succeeded
Running Transaction

  Installing     : xinetd                                                   1/2 
  Installing     : tftp-server                                              2/2 
Installed:
  tftp-server.x86_64 0:0.49-2.el5.centos                                        

Dependency Installed:
  xinetd.x86_64 2:2.3.14-10.el5                                                 

Complete!
end workflow command (4/5) -&gt; &quot;extract -filename tftp-server-0.49-2.el5.centos.x86_64.rpm -installroot / -url http://admin.demo.net:8080/jackrabbit/repository/controltier/pkgs/demo/YumRpm/rpms/tftp-server-0.49-2.el5.centos.x86_64.rpm&quot;
begin workflow command (5/5) -&gt; &quot;finish -filename tftp-server-0.49-2.el5.centos.x86_64.rpm -installroot / -url http://admin.demo.net:8080/jackrabbit/repository/controltier/pkgs/demo/YumRpm/rpms/tftp-server-0.49-2.el5.centos.x86_64.rpm&quot; ...
end workflow command (5/5) -&gt; &quot;finish -filename tftp-server-0.49-2.el5.centos.x86_64.rpm -installroot / -url http://admin.demo.net:8080/jackrabbit/repository/controltier/pkgs/demo/YumRpm/rpms/tftp-server-0.49-2.el5.centos.x86_64.rpm&quot;
end workflow command (1/1) -&gt; &quot;assertPackageIsInstalled -installroot /&quot;
[command.timer.demo.rpm.Install: 7.737 sec]
Workflow completed. execution time: 7.737 sec
Package is VERIFIED
Completed: Installed packages:   tftp-server-0.49-2.el5.centos.x86_64.rpm[YumRpm],  CentOS-5.4-x86_64-bin-DVD.iso[LinuxIso]
end workflow command (1/3) -&gt; &quot;Packages-Install &quot;
begin workflow command (2/3) -&gt; &quot;Configure &quot; ...
Start: &quot;Run the configuration cycle for the deployment.&quot; commands: setupDirectories,setupDistributions,setupClients
begin workflow command (1/3) -&gt; &quot;setupDirectories &quot; ...
Created dir: /tftpboot/linux-install/pxelinux.cfg
Copying 1 file to /tftpboot/linux-install
end workflow command (1/3) -&gt; &quot;setupDirectories &quot;
begin workflow command (2/3) -&gt; &quot;setupDistributions &quot; ...
Setting up the &quot;CentOS-5.4-x86_64-bin-DVD.iso&quot; Linux distribution ...
Created dir: /tftpboot/linux-install/CentOS-5.4-x86_64
Copying 1 file to /tftpboot/linux-install/CentOS-5.4-x86_64
Copying 1 file to /tftpboot/linux-install/CentOS-5.4-x86_64
end workflow command (2/3) -&gt; &quot;setupDistributions &quot;
begin workflow command (3/3) -&gt; &quot;setupClients &quot; ...
Setting up &quot;demo.net&quot; subnet ...
Setting up &quot;admin.demo.net&quot; interface ...
Setting up &quot;admin.demo.net&quot; node ...
Getting: http://admin.demo.net:8080/jackrabbit/repository/controltier/projects/demo/artifacts/modules/LinuxNode-head.jar
To: /opt/ctier/ctl/projects/demo/artifacts/modules/LinuxNode-head.jar
Deleting directory /opt/ctier/ctl/projects/demo/modules/LinuxNode
Created dir: /opt/ctier/ctl/projects/demo/modules/LinuxNode
Expanding: /opt/ctier/ctl/projects/demo/artifacts/modules/LinuxNode-head.jar into /opt/ctier/ctl/projects/demo/modules/LinuxNode
Getting: http://admin.demo.net:8080/jackrabbit/repository/controltier/projects/demo/artifacts/modules/Node-head.jar
To: /opt/ctier/ctl/projects/demo/artifacts/modules/Node-head.jar
Deleting directory /opt/ctier/ctl/projects/demo/modules/Node
Created dir: /opt/ctier/ctl/projects/demo/modules/Node
Expanding: /opt/ctier/ctl/projects/demo/artifacts/modules/Node-head.jar into /opt/ctier/ctl/projects/demo/modules/Node
Setting up &quot;/tftpboot/linux-install/pxelinux.cfg/01-00-50-56-0a-0a-01&quot; ...
Copying 1 file to /tftpboot/linux-install/pxelinux.cfg
Setting up &quot;bld01.demo.net&quot; interface ...
Setting up &quot;bld01.demo.net&quot; node ...
Getting: http://admin.demo.net:8080/jackrabbit/repository/controltier/projects/demo/artifacts/modules/LinuxNode-head.jar
To: /opt/ctier/ctl/projects/demo/artifacts/modules/LinuxNode-head.jar
Not modified - so not downloaded
LinuxNode up to date
Getting: http://admin.demo.net:8080/jackrabbit/repository/controltier/projects/demo/artifacts/modules/Node-head.jar
To: /opt/ctier/ctl/projects/demo/artifacts/modules/Node-head.jar
Not modified - so not downloaded
Node up to date
Setting up &quot;/tftpboot/linux-install/pxelinux.cfg/01-00-50-56-0a-0a-02&quot; ...
Copying 1 file to /tftpboot/linux-install/pxelinux.cfg
Setting up &quot;dev01.demo.net&quot; interface ...
Setting up &quot;dev01.demo.net&quot; node ...
Getting: http://admin.demo.net:8080/jackrabbit/repository/controltier/projects/demo/artifacts/modules/LinuxNode-head.jar
To: /opt/ctier/ctl/projects/demo/artifacts/modules/LinuxNode-head.jar
Not modified - so not downloaded
LinuxNode up to date
Getting: http://admin.demo.net:8080/jackrabbit/repository/controltier/projects/demo/artifacts/modules/Node-head.jar
To: /opt/ctier/ctl/projects/demo/artifacts/modules/Node-head.jar
Not modified - so not downloaded
Node up to date
Setting up &quot;/tftpboot/linux-install/pxelinux.cfg/01-00-50-56-0a-0a-03&quot; ...
Copying 1 file to /tftpboot/linux-install/pxelinux.cfg
Setting up &quot;stg01.demo.net&quot; interface ...
Setting up &quot;stg01.demo.net&quot; node ...
Getting: http://admin.demo.net:8080/jackrabbit/repository/controltier/projects/demo/artifacts/modules/LinuxNode-head.jar
To: /opt/ctier/ctl/projects/demo/artifacts/modules/LinuxNode-head.jar
Not modified - so not downloaded
LinuxNode up to date
Getting: http://admin.demo.net:8080/jackrabbit/repository/controltier/projects/demo/artifacts/modules/Node-head.jar
To: /opt/ctier/ctl/projects/demo/artifacts/modules/Node-head.jar
Not modified - so not downloaded
Node up to date
Setting up &quot;/tftpboot/linux-install/pxelinux.cfg/01-00-50-56-0a-0a-04&quot; ...
Copying 1 file to /tftpboot/linux-install/pxelinux.cfg
end workflow command (3/3) -&gt; &quot;setupClients &quot;
[command.timer.demo.PxeLinuxServer.Configure: 4.628 sec]
Workflow completed. execution time: 4.628 sec
end workflow command (2/3) -&gt; &quot;Configure &quot;
begin workflow command (3/3) -&gt; &quot;Start &quot; ...
begin workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot; ...
tftp            off
Running handler command -&gt; &quot;startService &quot;
tftp            on
end workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot;
end workflow command (3/3) -&gt; &quot;Start &quot;
[command.timer.demo.PxeLinuxServer.Deploy: 25.889 sec]
Workflow completed. execution time: 25.889 sec
&lt;/syntaxhighlight&gt;

* At this point the tftp xinetd service will be installed and running, and the PXE Linux directories have been setup to server the distribution's boot images and provide configuration for each host on the demo.net :

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[ctier@admin ~]$ rpm -q tftp-server
tftp-server-0.49-2.el5.centos
[[ctier@admin ~]$ ls /tftpboot/linux-install
CentOS-5.4-x86_64  pxelinux.0  pxelinux.cfg
[ctier@admin ~]$ ls /tftpboot/linux-install/CentOS-5.4-x86_64
initrd.img  vmlinuz
[ctier@admin ~]$ ls /tftpboot/linux-install/pxelinux.cfg/
01-00-50-56-0a-0a-01  01-00-50-56-0a-0a-02  01-00-50-56-0a-0a-03  01-00-50-56-0a-0a-04
[ctier@admin ~]$ cat /tftpboot/linux-install/pxelinux.cfg/01-00-50-56-0a-0a-04
default CentOS-5.4-x86_64

timeout 100
ontimeout local
prompt 0
serial 0 9600

label CentOS-5.4-x86_64
  kernel CentOS-5.4-x86_64/vmlinuz
  append initrd=CentOS-5.4-x86_64/initrd.img ip=10.10.10.4 netmask=255.255.255.0 ks=ftp://10.10.10.1/linux-install/kickstart/00-50-56-0a-0a-04.cfg ksdevice=eth0 console=tty0 console=ttyS0,9600n8 ramdisk_size=204800 noipv6 dns=10.10.10.1 text

LABEL local
  MENU LABEL Boot local hard drive
  LOCALBOOT 0
&lt;/syntaxhighlight&gt;

* Note also that the CentOS distribution has been loop-back mounted:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[ctier@admin ~]$ df -h /var/ftp/linux-install/CentOS-5.4-x86_64
Filesystem            Size  Used Avail Use% Mounted on
/var/ftp/linux-install/CentOS-5.4-x86_64/CentOS-5.4-x86_64-bin-DVD.iso
                      4.4G  4.4G     0 100% /var/ftp/linux-install/CentOS-5.4-x86_64

&lt;/syntaxhighlight&gt;

==== Kickstart ====

* Deploy the Kickstart configuration:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[ctier@admin ~]$ ctl -p demo -t KickstartServer -r demo.net -c Deploy 
Start: &quot;Run the deployment cycle, coordinating package installation and configuration.&quot; commands: Packages-Install,Configure
begin workflow command (1/2) -&gt; &quot;Packages-Install &quot; ...
Start: &quot;Install the configured package dependencies for the deployment.&quot; Beginning installation for packages:   CentOS-5.4-x86_64-bin-DVD.iso[LinuxIso] ...
Dispatching command 'assertPackageIsVerified ' to: CentOS-5.4-x86_64-bin-DVD.iso[LinuxIso] ...
Getting: http://admin.demo.net:8080/jackrabbit/repository/controltier/projects/demo/artifacts/modules/LinuxIso-head.jar
To: /opt/ctier/ctl/projects/demo/artifacts/modules/LinuxIso-head.jar
Not modified - so not downloaded
LinuxIso up to date
Getting: http://admin.demo.net:8080/jackrabbit/repository/controltier/projects/demo/artifacts/modules/Package-head.jar
To: /opt/ctier/ctl/projects/demo/artifacts/modules/Package-head.jar
Not modified - so not downloaded
Package up to date
Packages-Install invoking: CentOS-5.4-x86_64-bin-DVD.iso[LinuxIso]#Install -installroot /var/ftp/linux-install/CentOS-5.4-x86_64
Start: &quot;Install object and run the package installation cycle.&quot; commands: assertPackageIsInstalled
begin workflow command (1/1) -&gt; &quot;assertPackageIsInstalled -installroot /var/ftp/linux-install/CentOS-5.4-x86_64&quot; ...
end workflow command (1/1) -&gt; &quot;assertPackageIsInstalled -installroot /var/ftp/linux-install/CentOS-5.4-x86_64&quot;
[command.timer.demo.Package.Install: 0.428 sec]
Workflow completed. execution time: 0.428 sec
Package is VERIFIED
Completed: Installed packages:   CentOS-5.4-x86_64-bin-DVD.iso[LinuxIso]
end workflow command (1/2) -&gt; &quot;Packages-Install &quot;
begin workflow command (2/2) -&gt; &quot;Configure &quot; ...
Start: &quot;Run the configuration cycle for the deployment.&quot; commands: setupDirectories,setupClients
begin workflow command (1/2) -&gt; &quot;setupDirectories &quot; ...
end workflow command (1/2) -&gt; &quot;setupDirectories &quot;
begin workflow command (2/2) -&gt; &quot;setupClients &quot; ...
Setting up &quot;demo.net&quot; subnet ...
Setting up &quot;admin.demo.net&quot; interface ...
Setting up &quot;admin.demo.net&quot; node ...
Getting: http://admin.demo.net:8080/jackrabbit/repository/controltier/projects/demo/artifacts/modules/LinuxNode-head.jar
To: /opt/ctier/ctl/projects/demo/artifacts/modules/LinuxNode-head.jar
Not modified - so not downloaded
LinuxNode up to date
Getting: http://admin.demo.net:8080/jackrabbit/repository/controltier/projects/demo/artifacts/modules/Node-head.jar
To: /opt/ctier/ctl/projects/demo/artifacts/modules/Node-head.jar
Not modified - so not downloaded
Node up to date
Setting up &quot;/var/ftp/linux-install/kickstart/00-50-56-0a-0a-01.cfg&quot; ...
Copying 1 file to /var/ftp/linux-install/kickstart
Setting up &quot;bld01.demo.net&quot; interface ...
Setting up &quot;bld01.demo.net&quot; node ...
Getting: http://admin.demo.net:8080/jackrabbit/repository/controltier/projects/demo/artifacts/modules/LinuxNode-head.jar
To: /opt/ctier/ctl/projects/demo/artifacts/modules/LinuxNode-head.jar
Not modified - so not downloaded
LinuxNode up to date
Getting: http://admin.demo.net:8080/jackrabbit/repository/controltier/projects/demo/artifacts/modules/Node-head.jar
To: /opt/ctier/ctl/projects/demo/artifacts/modules/Node-head.jar
Not modified - so not downloaded
Node up to date
Setting up &quot;/var/ftp/linux-install/kickstart/00-50-56-0a-0a-02.cfg&quot; ...
Copying 1 file to /var/ftp/linux-install/kickstart
Setting up &quot;dev01.demo.net&quot; interface ...
Setting up &quot;dev01.demo.net&quot; node ...
Getting: http://admin.demo.net:8080/jackrabbit/repository/controltier/projects/demo/artifacts/modules/LinuxNode-head.jar
To: /opt/ctier/ctl/projects/demo/artifacts/modules/LinuxNode-head.jar
Not modified - so not downloaded
LinuxNode up to date
Getting: http://admin.demo.net:8080/jackrabbit/repository/controltier/projects/demo/artifacts/modules/Node-head.jar
To: /opt/ctier/ctl/projects/demo/artifacts/modules/Node-head.jar
Not modified - so not downloaded
Node up to date
Setting up &quot;/var/ftp/linux-install/kickstart/00-50-56-0a-0a-03.cfg&quot; ...
Copying 1 file to /var/ftp/linux-install/kickstart
Setting up &quot;stg01.demo.net&quot; interface ...
Setting up &quot;stg01.demo.net&quot; node ...
Getting: http://admin.demo.net:8080/jackrabbit/repository/controltier/projects/demo/artifacts/modules/LinuxNode-head.jar
To: /opt/ctier/ctl/projects/demo/artifacts/modules/LinuxNode-head.jar
Not modified - so not downloaded
LinuxNode up to date
Getting: http://admin.demo.net:8080/jackrabbit/repository/controltier/projects/demo/artifacts/modules/Node-head.jar
To: /opt/ctier/ctl/projects/demo/artifacts/modules/Node-head.jar
Not modified - so not downloaded
Node up to date
Setting up &quot;/var/ftp/linux-install/kickstart/00-50-56-0a-0a-04.cfg&quot; ...
Copying 1 file to /var/ftp/linux-install/kickstart
end workflow command (2/2) -&gt; &quot;setupClients &quot;
[command.timer.demo.KickstartServer.Configure: 4.207 sec]
Workflow completed. execution time: 4.207 sec
end workflow command (2/2) -&gt; &quot;Configure &quot;
[command.timer.demo.KickstartServer.Deploy: 9.173 sec]
Workflow completed. execution time: 9.173 sec
&lt;/syntaxhighlight&gt;

* A this point the &quot;very secure&quot; FTP server (which provides the Kickstart profiles and the system image) is installed and running and Kickstart profiles have been generated from the LinuxNode's template for each of the demo.net hosts (identified by MAC address):

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[ctier@admin ~]$ rpm -q vsftpd
vsftpd-2.0.5-16.el5_5.1
[ctier@admin ~]$ ls /var/ftp/linux-install/kickstart
00-50-56-0a-0a-01.cfg  00-50-56-0a-0a-02.cfg  00-50-56-0a-0a-03.cfg  00-50-56-0a-0a-04.cfg
[ctier@admin ~]$ cat /var/ftp/linux-install/kickstart/00-50-56-0a-0a-02.cfg 
#############################################################################
# Global Portal Kickstart file.
#############################################################################

# See: http://www.redhat.com/docs/manuals/enterprise/RHEL-5-manual/Installation_Guide-en-US/s1-kickstart2-options.html

# Install a fresh system rather than upgrade an existing system:
install

# Install from an installation tree on a remote server via FTP:
url --url ftp://10.10.10.1/linux-install/CentOS-5.4-x86_64

# Skip entering a key:
key --skip

# Controls the error logging of anaconda during installation:
logging --host=10.10.10.1 --level=info

# System authorization information:
auth  --useshadow  --enablemd5 

# System bootloader configuration:
bootloader --location=mbr

# Clear the Master Boot Record:
zerombr

# Partition clearing information:
clearpart --all --initlabel 

# Creates a partition on the system:
part swap --recommended
part / --fstype=&quot;ext3&quot; --grow --size=3000

# Perform the kickstart installation in text mode:
text

# Do not configure any iptables rules:
firewall --disabled

# Run the Setup Agent on first boot
firstboot --disable

# Sets system keyboard type:
keyboard us

# Sets the language to use during installation and the default language to use on the installed system:
lang en_US.UTF-8

# Configures network information for the system:
network --device=eth0 --bootproto=static --hostname bld01.demo.net --ip=10.10.10.2 --netmask=255.255.255.0 --gateway=10.10.10.1 --nameserver=10.10.10.1 --noipv6

# Reboot after the installation is successfully completed (no arguments):
reboot

#
# Set up the Yum repository:
# NOTE:  this appears to not work, no  /etc/yum.repos.d/ctier is created.  
# See %post section where we do it manually
#
repo --name=ctier --baseurl=@BASEURL@

# Sets the system's root password (to &quot;password&quot;):
#rootpw --iscrypted $1$GOUVjY5L$SHJbvpmz5vo.SE0BYFPe81
rootpw --iscrypted $1$GOUVjY5L$SHJbvpmz5vo.SE0BYFPe81

# Sets the state of SELinux on the installed system:
selinux --disabled

# If present, X is not configured on the installed system:
skipx

# Sets the system time zone:
timezone  America/Los_Angeles

#############################################################################
# Packages to install and remove
#############################################################################
%packages
#
# For the full OpenJDK 1.6:
#
jpackage-utils
libXtst
alsa-lib
giflib
java-1.6.0-openjdk
java-1.6.0-openjdk-devel

#############################################################################
# Pre-installation script:
#############################################################################
%pre
exec &lt; /dev/tty3 &gt; /dev/tty3 2&gt;&amp;1
set -x
echo &quot;Running pre-package installation script ...&quot;

#############################################################################
# Post-installation script:
#############################################################################
%post
exec &lt; /dev/tty3 &gt; /dev/tty3 2&gt;&amp;1
set -x
echo &quot;Running post-package installation script ...&quot;

#
# 1) Setup the ControlTier managed RPMs repository:
#
if ! mv /etc/yum.repos.d /etc/yum.repos.d.orig
then 
  echo &quot;Failed move off /etc/yum.repos.d&quot; 1&gt;&amp;2
  exit 1
fi

if ! mkdir /etc/yum.repos.d
then 
  echo &quot;Failed make /etc/yum.repos.d&quot; 1&gt;&amp;2
  exit 1
fi

cd /etc/yum.repos.d

if ! /usr/bin/wget -q http://admin.demo.net:8080/RPMS/ctier-extras.repo
then
  echo &quot;Failed get the distribution's repository file&quot; 1&gt;&amp;2
  exit 1
fi

#
# 2) Clean-up Yum repository caches:
#
if ! /usr/bin/yum clean all
then
  echo &quot;Failed to clean Yum's caches&quot; 1&gt;&amp;2
  exit 1
fi

#
# 3) Install the ControlTier client:
#
if ! /usr/bin/yum -y install ctier-client
then
  echo &quot;Failed to install the ControlTier client RPM&quot; 1&gt;&amp;2
  exit 1
fi

#
# 4) Setup the ControlTier client:
#
if ! /bin/su - ctier -c &quot;export JAVA_HOME=/usr/lib/jvm/java-1.6.0-openjdk.x86_64; ctl-setup -f -n bld01.demo.net -s admin.demo.net --framework.node.type=LinuxNode&quot;
then
  echo &quot;Failed to setup the ControlTier client&quot; demo&gt;&amp;2
  exit 1
fi

#
# 5) Setup the ControlTier client:
#
if ! /bin/su - ctier -c &quot;ctl-depot -p demo -a create&quot;
then
  echo &quot;Failed to create the ControlTier client&quot; 1&gt;&amp;2
  exit 1
fi

#
# 6) Install the assigned resources:
#
if ! /bin/su - ctier -c &quot;ctl-depot -p demo -a install&quot;
then
  echo &quot;Failed to install the ControlTier resources&quot; 1&gt;&amp;2
  exit 1
fi

#
# 7) Install the node-specific RPM:
#
if ! /usr/bin/yum -y install ctier-bld01
then
  echo &quot;Failed to install the node-specific RPM&quot; 1&gt;&amp;2
  exit 1
fi
&lt;/syntaxhighlight&gt;

==== Yum ====

* Deploy the Yum repository as follows:

{{notice|Using the &quot;Update&quot; workflow here (as opposed to &quot;Deploy&quot;) will trigger the automatic assignment of all YumRpm package resources in the project making them available from this &quot;ctier-extras&quot; Yum repository. i.e. You can add extra RPMs to the repository by creating YumRpm packages and re-running the Update command. The choice of packages is controlled by the standard defaultPackageType and defaultPackageName attributes.}}

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[ctier@admin ~]$  ctl -p demo -t YumRepository -r demo.net -c Deploy
Start: &quot;Run the deployment cycle, coordinating package installation and configuration.&quot; commands: setupDirectories,Packages-Install,createRepo
begin workflow command (1/3) -&gt; &quot;setupDirectories &quot; ...
end workflow command (1/3) -&gt; &quot;setupDirectories &quot;
begin workflow command (2/3) -&gt; &quot;Packages-Install &quot; ...
Start: &quot;Install the configured package dependencies for the deployment.&quot; Beginning installation for packages:   ctier-stg01-1.0-1.noarch.rpm[YumRpm],  ctier-bld01-1.0-1.noarch.rpm[YumRpm],  ctier-dev01-1.0-1.noarch.rpm[YumRpm],  ctier-client-3.6.0-1.noarch.rpm[YumRpm],  createrepo-0.4.11-3.el5.noarch.rpm[YumRpm] ...
Dispatching command 'assertPackageIsVerified ' to: ctier-bld01-1.0-1.noarch.rpm[YumRpm], ctier-dev01-1.0-1.noarch.rpm[YumRpm], ctier-stg01-1.0-1.noarch.rpm[YumRpm], createrepo-0.4.11-3.el5.noarch.rpm[YumRpm], ctier-client-3.6.0-1.noarch.rpm[YumRpm] ...
.
.
.
Completed: Installed packages:   ctier-stg01-1.0-1.noarch.rpm[YumRpm],  ctier-bld01-1.0-1.noarch.rpm[YumRpm],  ctier-dev01-1.0-1.noarch.rpm[YumRpm],  ctier-client-3.6.0-1.noarch.rpm[YumRpm],  createrepo-0.4.11-3.el5.noarch.rpm[YumRpm]
end workflow command (2/3) -&gt; &quot;Packages-Install &quot;
begin workflow command (3/3) -&gt; &quot;createRepo &quot; ...
Previous repo file missing: /opt/ctier/pkgs/jetty-6.1.21/controltier/RPMS/repodata/primary.xml.gz
end workflow command (3/3) -&gt; &quot;createRepo &quot;
[command.timer.demo.YumRepository.Deploy: 29.681 sec]
Workflow completed. execution time: 29.681 sec
&lt;/syntaxhighlight&gt;

* Check the Yum repository:

{{notice|For the purposes of this demonstration, the Yum repository is setup in the document root of the ControlTier server's Jetty instance in order to avoid configuring a dedicated web server}}

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[ctier@admin rpm]$ ls /opt/ctier/pkgs/jetty-6.1.21/controltier/RPMS/
ctier-bld01-1.0-1.noarch.rpm  ctier-client-3.6.0-1.noarch.rpm  ctier-dev01-1.0-1.noarch.rpm  ctier-extras.repo  ctier-stg01-1.0-1.noarch.rpm  repodata
[ctier@admin ~]$ cat /opt/ctier/pkgs/jetty-6.1.21/controltier/RPMS/demo-all.repo 
[demo-all]
name=Sitewide Packages
baseurl=http://admin.demo.net:8080/RPMS/
gpgcheck=0
&lt;/syntaxhighlight&gt;

* Navigate to [http://admin.demo.net:8080/RPMS http://admin.demo.net:8080/RPMS] to check accessibility of the repository from the web.

=== Site ===

Rather than deploy each boot service individually it is possible to manage them all via the demo.net Site resource:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[ctier@admin ~]$ ctl -p demo -t Site -r demo.net -c Deploy 
Dispatching command 'Deploy ' to: demo.net[KickstartServer], demo.net[PxeLinuxServer], demo.net[DhcpServer], demo.net[DnsServer], demo.net[YumRepository] ...
Start: &quot;Run the deployment cycle, coordinating package installation and configuration.&quot; commands: Packages-Install,Configure
begin workflow command (1/2) -&gt; &quot;Packages-Install &quot; ...
.
.
.
end workflow command (2/3) -&gt; &quot;Packages-Install &quot;
begin workflow command (3/3) -&gt; &quot;createRepo &quot; ...
end workflow command (3/3) -&gt; &quot;createRepo &quot;
[command.timer.demo.YumRepository.Deploy: 6.707 sec]
Workflow completed. execution time: 6.707 sec
&lt;/syntaxhighlight&gt;

This is handy when a resource model change (e.g adding a new node) affects the configuration of more than one service.

== System Provisioning ==

With the administration server's boot services deployed the various demo.net systems can now be provisioned.

For each system:

* Create the target virtual machine. 500MB memory and 4GB disk is sufficient for the demonstration's purposes.

{{notice|Here is an example of setting up bld01.demo.net under VMWare Fusion: [[File:Bld01.demo.net.settings.png]]}}
{{notice|Note the use of the host-only network and statically assigned MAC address: [[File:Bld01.demo.net.network.png]]}}

* Network boot the virtual machine.

{{caution|Don't forget to switch the virtual machine back to boot from its hard disk otherwise you'll end up in an infinite boot loop!}}

* You should see similar messages to the following on the system console that indicate that the DHCP server on admin.demo.net has successfully passed off the boot to the PXE boot server on admin.demo.net:

[[File:Bld01.demo.net.pxeboot.png]]

* Soon after the boot has started you should be able to hit &quot;alt-F3&quot; and follow the Kickstart's progress on tty3:

[[File:Bld01.demo.net.kickstart.png]]

* The longest part of the Kickstart is the package installation section. You can follow that by monitoring the transfer log on admin.demo.net:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[root@admin CentOS]# tail -f /var/log/xferlog 
Tue Sep 21 21:59:57 2010 1 10.10.10.2 137224 /linux-install/CentOS-5.4-x86_64/CentOS/pm-utils-0.99.3-10.el5.centos.x86_64.rpm b _ o a anonymous@ ftp 0 * c
Tue Sep 21 21:59:58 2010 1 10.10.10.2 397675 /linux-install/CentOS-5.4-x86_64/CentOS/hal-0.5.8.1-52.el5.i386.rpm b _ o a anonymous@ ftp 0 * c
Tue Sep 21 21:59:59 2010 1 10.10.10.2 222331 /linux-install/CentOS-5.4-x86_64/CentOS/kudzu-1.2.57.1.21-1.el5.centos.x86_64.rpm b _ o a anonymous@ ftp 0 * c
Tue Sep 21 21:59:59 2010 1 10.10.10.2 384451 /linux-install/CentOS-5.4-x86_64/CentOS/hal-0.5.8.1-52.el5.x86_64.rpm b _ o a anonymous@ ftp 0 * c
Tue Sep 21 22:00:00 2010 1 10.10.10.2 1915520 /linux-install/CentOS-5.4-x86_64/CentOS/system-config-network-tui-1.3.99.18-1.el5.noarch.rpm b _ o a anonymous@ ftp 0 * c
Tue Sep 21 22:00:00 2010 1 10.10.10.2 195941 /linux-install/CentOS-5.4-x86_64/CentOS/firstboot-tui-1.4.27.7-1.el5.centos.x86_64.rpm b _ o a anonymous@ ftp 0 * c
Tue Sep 21 22:00:01 2010 1 10.10.10.2 84763 /linux-install/CentOS-5.4-x86_64/CentOS/NetworkManager-glib-0.7.0-9.el5.x86_64.rpm b _ o a anonymous@ ftp 0 * c
Tue Sep 21 22:00:01 2010 1 10.10.10.2 1098199 /linux-install/CentOS-5.4-x86_64/CentOS/NetworkManager-0.7.0-9.el5.i386.rpm b _ o a anonymous@ ftp 0 * c
Tue Sep 21 22:00:01 2010 1 10.10.10.2 1099937 /linux-install/CentOS-5.4-x86_64/CentOS/NetworkManager-0.7.0-9.el5.x86_64.rpm b _ o a anonymous@ ftp 0 * c
Tue Sep 21 22:00:02 2010 1 10.10.10.2 83448 /linux-install/CentOS-5.4-x86_64/CentOS/NetworkManager-glib-0.7.0-9.el5.i386.rpm b _ o a anonymous@ ftp 0 * c
&lt;/syntaxhighlight&gt;

* Once the Kickstart is complete, the system will automatically reboot and you'll be able to logon to the console as root (the password is &quot;password&quot;) or over ssh from admin.demo.net:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[ctier@admin ~]$ ssh root@bld01.demo.net
The authenticity of host 'bld01.demo.net (10.10.10.2)' can't be established.
RSA key fingerprint is 62:7b:1a:a4:17:52:a5:8c:19:9a:79:9d:2d:75:6c:a8.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added 'bld01.demo.net,10.10.10.2' (RSA) to the list of known hosts.
root@bld01.demo.net's password: 
[root@bld01 ~]# 
&lt;/syntaxhighlight&gt;

* Since the Kickstart automatically installed and configured the ControlTier client the system is ready for application deployment:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[root@bld01 ~]# su - ctier
[ctier@bld01 ~]$ id
uid=101(ctier) gid=103(ctier) groups=103(ctier)
[ctier@bld01 ~]$ ls -C
ctl  etc  pkgs
[ctier@bld01 ~]$ echo $CTL_HOME
/opt/ctier/pkgs/ctl-3.6.0
[ctier@bld01 ~]$ java -version
java version &quot;1.6.0&quot;
OpenJDK  Runtime Environment (build 1.6.0-b09)
OpenJDK 64-Bit Server VM (build 1.6.0-b09, mixed mode)
&lt;/syntaxhighlight&gt;

* Once you've &quot;kicked&quot; all three systems you'll and have the demonstration network's hosts up and running you're ready to proceed to application provisioning. If you're using VMware Fusion or some similar virtualization software you'll be running something like this:

[[File:Demo.net.vmware.png]]

== Application Provisioning ==

{{notice|This section really needs to be re-written as part of consolidating the application and systems provisioning parts of the example along with showing the use of the ProjectBuilder &quot;generate-environment&quot; command}}

With all four demonstration network systems up and running you have the core of an infrastructure for deploying applications. 

* Since the system provisioning process culminated in installing the ControlTier client software and configuring and registering the client with the demo project, all the nodes are automatically available for command dispatching from ctier@admin.demo.net:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[ctier@admin ~]$ ctl-exec -I '.*'  -- uname -a
[ctier@admin.demo.net ctl-exec][INFO] Linux admin.demo.net 2.6.18-164.el5 #1 SMP Thu Sep 3 03:28:30 EDT 2009 x86_64 x86_64 x86_64 GNU/Linux
[ctier@bld01.demo.net ctl-exec][INFO] Linux bld01.demo.net 2.6.18-164.el5 #1 SMP Thu Sep 3 03:28:30 EDT 2009 x86_64 x86_64 x86_64 GNU/Linux
[ctier@dev01.demo.net ctl-exec][INFO] Linux dev01.demo.net 2.6.18-164.el5 #1 SMP Thu Sep 3 03:28:30 EDT 2009 x86_64 x86_64 x86_64 GNU/Linux
[ctier@stg01.demo.net ctl-exec][INFO] Linux stg01.demo.net 2.6.18-164.el5 #1 SMP Thu Sep 3 03:28:30 EDT 2009 x86_64 x86_64 x86_64 GNU/Linux
&lt;/syntaxhighlight&gt;

* Follow the [[Building_Dukes_Bank_Project|Building Dukes Bank Project]] instructions to create a second DukesBankProjectBuilder and bootstrap the example application resource model into the demo project.

* The prepare command will ultimately fail as follows (looking for a Node-type admin.demo.net resource):

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
.
.
Batching object attribute update requests ...
[timer: 29:24.913 sec]
Batching resource and referrer updates ...
Error handler caught BuildException: The following error occurred while executing this line:
/opt/ctier/ctl/projects/demo/modules/ProjectBuilder/lib/load-resources/projectxml/antlib.xml:815: The following error occurred while executing this line:
/opt/ctier/ctl/projects/demo/modules/ProjectBuilder/lib/load-resources/projectxml/antlib.xml:83: Error performing server request: no object exists by that name and type: type: Node, name: admin.demo.net
Error: The following error occurred while executing this line:
/opt/ctier/ctl/projects/demo/modules/DukesBankProjectBuilder/commands/Prepare.xml:134: The following error occurred while executing this line:
/opt/ctier/ctl/projects/demo/modules/ProjectBuilder/commands/generate-resources.xml:29: The following error occurred while executing this line:
/opt/ctier/ctl/projects/demo/modules/ProjectBuilder/commands/generate-resources.xml:81: The following error occurred while executing this line:
/opt/ctier/ctl/projects/demo/modules/ProjectBuilder/commands/load-resources.xml:20: The following error occurred while executing this line:
/opt/ctier/ctl/projects/demo/modules/ProjectBuilder/lib/load-resources/projectxml/antlib.xml:1112: No message
&lt;/syntaxhighlight&gt;

* To sort this out, edit the generated project XML file and replace references to the admin.demo.net Node resource to the appropriate LinuxNode demo.net nodes: 

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[ctier@admin ~]$ ls -l $CTIER_ROOT/demo/default-object.xml
-rw-rw-r-- 1 ctier ctier 11747 Sep 25 15:42 /opt/ctier/demo/default-object.xml
[ctier@admin ~]$ diff $CTIER_ROOT/demo/default-object.xml $CTIER_ROOT/demo/default-object.xml.orig
41c41
&lt;       &lt;setting type=&quot;RdbConnection&quot; name=&quot;developmentDukesBank&quot; description=&quot;JDBC connection string&quot; settingValue=&quot;jdbc:hsqldb:hsql://dev01.demo.net:1701&quot;/&gt;
---
&gt;       &lt;setting type=&quot;RdbConnection&quot; name=&quot;developmentDukesBank&quot; description=&quot;JDBC connection string&quot; settingValue=&quot;jdbc:hsqldb:hsql://admin.demo.net:1701&quot;/&gt;
43c43
&lt;       &lt;setting type=&quot;RdbConnection&quot; name=&quot;stagingDukesBank&quot; description=&quot;JDBC connection string&quot; settingValue=&quot;jdbc:hsqldb:hsql://stg01.demo.net:1702&quot;/&gt;
---
&gt;       &lt;setting type=&quot;RdbConnection&quot; name=&quot;stagingDukesBank&quot; description=&quot;JDBC connection string&quot; settingValue=&quot;jdbc:hsqldb:hsql://admin.demo.net:1702&quot;/&gt;
55c55
&lt;                       &lt;resource type=&quot;LinuxNode&quot; name=&quot;bld01.demo.net&quot;/&gt;
---
&gt;                       &lt;resource type=&quot;Node&quot; name=&quot;admin.demo.net&quot;/&gt;
79c79
&lt;                       &lt;resource type=&quot;LinuxNode&quot; name=&quot;bld01.demo.net&quot;/&gt;
---
&gt;                       &lt;resource type=&quot;Node&quot; name=&quot;admin.demo.net&quot;/&gt;
89c89
&lt;                       &lt;resource type=&quot;LinuxNode&quot; name=&quot;bld01.demo.net&quot;/&gt;
---
&gt;                       &lt;resource type=&quot;Node&quot; name=&quot;admin.demo.net&quot;/&gt;
102c102
&lt;                       &lt;resource type=&quot;LinuxNode&quot; name=&quot;admin.demo.net&quot;/&gt;
---
&gt;                       &lt;resource type=&quot;Node&quot; name=&quot;admin.demo.net&quot;/&gt;
113c113
&lt;                       &lt;resource type=&quot;LinuxNode&quot; name=&quot;admin.demo.net&quot;/&gt;
---
&gt;                       &lt;resource type=&quot;Node&quot; name=&quot;admin.demo.net&quot;/&gt;
125c125
&lt;                       &lt;resource type=&quot;LinuxNode&quot; name=&quot;dev01.demo.net&quot;/&gt;
---
&gt;                       &lt;resource type=&quot;Node&quot; name=&quot;admin.demo.net&quot;/&gt;
138c138
&lt;                       &lt;resource type=&quot;LinuxNode&quot; name=&quot;dev01.demo.net&quot;/&gt;
---
&gt;                       &lt;resource type=&quot;Node&quot; name=&quot;admin.demo.net&quot;/&gt;
153c153
&lt;                       &lt;resource type=&quot;LinuxNode&quot; name=&quot;admin.demo.net&quot;/&gt;
---
&gt;                       &lt;resource type=&quot;Node&quot; name=&quot;admin.demo.net&quot;/&gt;
164c164
&lt;                       &lt;resource type=&quot;LinuxNode&quot; name=&quot;admin.demo.net&quot;/&gt;
---
&gt;                       &lt;resource type=&quot;Node&quot; name=&quot;admin.demo.net&quot;/&gt;
176c176
&lt;                       &lt;resource type=&quot;LinuxNode&quot; name=&quot;stg01.demo.net&quot;/&gt;
---
&gt;                       &lt;resource type=&quot;Node&quot; name=&quot;admin.demo.net&quot;/&gt;
189c189
&lt;                       &lt;resource type=&quot;LinuxNode&quot; name=&quot;stg01.demo.net&quot;/&gt;
---
&gt;                       &lt;resource type=&quot;Node&quot; name=&quot;admin.demo.net&quot;/&gt;
&lt;/syntaxhighlight&gt;

* Reload the project XML:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[ctier@admin ~]$ ctl -p demo -m ProjectBuilder -c load-resources -- -filename $CTIER_ROOT/demo/default-object.xml 
Loading &quot;/opt/ctier/demo/default-object.xml&quot; ...
1 file(s) have been successfully validated.
Processing /opt/ctier/demo/default-object.xml to /opt/ctier/ctl/var/tmp/projectxml-1403856548.xml
Loading stylesheet /opt/ctier/ctl/projects/demo/modules/ProjectBuilder/lib/load-resources/projectxml/project.xsl
Mapping XML to properties ...
[timer: 0.961 sec]
Batching new object creation requests ...
[timer: 3.410 sec]
No new objects to be created ...
[timer: 3.411 sec]
Batching object attribute update requests ...
[timer: 5.977 sec]
Batching resource and referrer updates ...
[timer: 6.570 sec]
Executing 99 batched object updates ...
[timer: 13.639 sec]
Adding document transforms to deployments ...
[timer: 14.044 sec]
&lt;/syntaxhighlight&gt;

* Install the resources across the entire infrastructure:

{{notice|You should see the Updater and Site resources being installed to admin.demo.net, the builders and CruiseControl to bld01.demo.net and the development and staging deployments to dev01.demo.net and stg01.demo.net respectively}}

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[ctier@admin ~]$ ctl-depot -I '.*' -p demo -a install
[ctier@admin.demo.net ctl-exec][INFO] [ctier@admin.demo.net ctl-exec][INFO] &quot;resource-install&quot; command running for resource: developmentDukesBank[Updater]
[ctier@admin.demo.net ctl-exec][INFO] [ctier@admin.demo.net ctl-exec][INFO] &quot;resource-install&quot; command running for resource: demo.net[YumRepository]
[ctier@admin.demo.net ctl-exec][INFO] [ctier@admin.demo.net ctl-exec][INFO] &quot;resource-install&quot; command running for resource: demo.net[DukesBankProjectBuilder]
[ctier@admin.demo.net ctl-exec][INFO] [ctier@admin.demo.net ctl-exec][INFO] &quot;resource-install&quot; command running for resource: demo.net[KickstartServer]
[ctier@admin.demo.net ctl-exec][INFO] [ctier@admin.demo.net ctl-exec][INFO] &quot;resource-install&quot; command running for resource: developmentDukesBank[Site]
[ctier@admin.demo.net ctl-exec][INFO] [ctier@admin.demo.net ctl-exec][INFO] &quot;resource-install&quot; command running for resource: demo.net[Site]
[ctier@admin.demo.net ctl-exec][INFO] [ctier@admin.demo.net ctl-exec][INFO] &quot;resource-install&quot; command running for resource: demo.net[PxeLinuxServer]
[ctier@admin.demo.net ctl-exec][INFO] [ctier@admin.demo.net ctl-exec][INFO] &quot;resource-install&quot; command running for resource: demo.net[DhcpServer]
[ctier@admin.demo.net ctl-exec][INFO] [ctier@admin.demo.net ctl-exec][INFO] &quot;resource-install&quot; command running for resource: stagingDukesBank[Updater]
[ctier@admin.demo.net ctl-exec][INFO] [ctier@admin.demo.net ctl-exec][INFO] &quot;resource-install&quot; command running for resource: dukesbank[DukesBankProjectBuilder]
[ctier@admin.demo.net ctl-exec][INFO] [ctier@admin.demo.net ctl-exec][INFO] &quot;resource-install&quot; command running for resource: demo.net[DnsServer]
[ctier@admin.demo.net ctl-exec][INFO] [ctier@admin.demo.net ctl-exec][INFO] &quot;resource-install&quot; command running for resource: stagingDukesBank[Site]
[ctier@bld01.demo.net ctl-exec][INFO] &quot;resource-install&quot; command running for resource: dukesBank[HsqldbRdbExportBuilder]
[ctier@bld01.demo.net ctl-exec][INFO] &quot;resource-install&quot; command running for resource: dukesBank[JBossAntBuilder]
[ctier@bld01.demo.net ctl-exec][INFO] &quot;resource-install&quot; command running for resource: development[CruiseControl]
[ctier@dev01.demo.net ctl-exec][INFO] &quot;resource-install&quot; command running for resource: developmentDukesBank[HsqldbRdb]
[ctier@dev01.demo.net ctl-exec][INFO] &quot;resource-install&quot; command running for resource: developmentDukesBank[JBossServer]
[ctier@stg01.demo.net ctl-exec][INFO] &quot;resource-install&quot; command running for resource: stagingDukesBank[HsqldbRdb]
[ctier@stg01.demo.net ctl-exec][INFO] &quot;resource-install&quot; command running for resource: stagingDukesBank[JBossServer]
&lt;/syntaxhighlight&gt;

* Generate the sample jobs:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[ctier@admin DukesBankProjectBuilder]$ ctl -p demo -t DukesBankProjectBuilder -r dukesbank -c generate-jobs 
Using defaults file: /opt/ctier/ctl/projects/demo/modules/DukesBankProjectBuilder/templates/defaults.Linux.xml ...
Copying 1 file to /opt/ctier/demo
Generated job.xml file: /opt/ctier/demo/default-job.xml
Deleting: /opt/ctier/ctl/var/tmp/expanded.defaults-2106479420.tmp
&lt;/syntaxhighlight&gt;

* Load the jobs into CtlCenter:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[ctier@admin DukesBankProjectBuilder]$ ctl-jobs load --file /opt/ctier/demo/default-job.xml
Total Jobs Uploaded: 9 jobs
Succeeded creating/updating 9  Jobs:
        - Build [1] &lt;http://admin.demo.net:8080/ctlcenter/job/show/1&gt;
        - Purge [2] &lt;http://admin.demo.net:8080/ctlcenter/job/show/2&gt;
        - BuildAndUpdate [3] &lt;http://admin.demo.net:8080/ctlcenter/job/show/3&gt;
        - Update [4] &lt;http://admin.demo.net:8080/ctlcenter/job/show/4&gt;
        - Status [5] &lt;http://admin.demo.net:8080/ctlcenter/job/show/5&gt;
        - Restart [6] &lt;http://admin.demo.net:8080/ctlcenter/job/show/6&gt;
        - Update [7] &lt;http://admin.demo.net:8080/ctlcenter/job/show/7&gt;
        - Restart [8] &lt;http://admin.demo.net:8080/ctlcenter/job/show/8&gt;
        - Status [9] &lt;http://admin.demo.net:8080/ctlcenter/job/show/9&gt;
&lt;/syntaxhighlight&gt;</text>
    </revision>
  </page>
  <page>
    <title>Dukes Bank and ControlTier Administration</title>
    <id>371</id>
    <revision>
      <id>14078</id>
      <timestamp>2010-11-10T15:34:01Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;/deployments&quot; to &quot;/resources&quot;</comment>
      <text xml:space="preserve">[[Image:underconstruction-medium.png]] These docs are untested and under development.

Note: This is part of the DukesBank portion of the [[ControlTier Demo]]

==Overview==

This page describes how to demonstrate the Controltier administration necessary to support Dukes Banks. This example shows how to maintain the repository size.

See also:
* [[ControlTier Administration]]

==Preparation==

* Be sure you have tried the [[Dukes Bank Checkout and Build]] demo

==Maintaining Repository Size==

The Build process produces build artifacts and stages them as packages to the repository. Many of these build artifacts are never used or used for a short time and then never used again. Over time, the repository can grow in size due to this accumulation of unneeded packages. There are two ways the repository grows:
* WebDAV content: Build artifacts are stored in the WebDAV. Over time the DAV repository will grow in size.
* Project data: All build artifacts are registered as objects in the project. Optimal performance is obtained by keeping the data set size and a reasonable level.

To handle the growth of the repository, an ongoing purge process should be maintained. This will ensure that all unneeded packages are purged from the repository to reclaim space.

The remainder of this page describes how to find and purge unneeded packages.

===Purging unneeded packages===
JBossAntBuilder like any Builder includes a command called &quot;Purge&quot;. Purge is a workflow that looks up and then deletes unnecessary packages.

You can run Purge without any command options for the default lookup scheme.
&lt;pre&gt;
ctl -p demo -t JBossAntBuilder -r dukesBank -c Purge
&lt;/pre&gt;

You can also run the same command via JobCenter:
* Login to JobCenter and find the Build/DukesBank/Purge job. Press the &quot;execute&quot; button.

===Querying the repository===

You can list the registered packages in the repository using the &quot;repoFind&quot; command. The command takes a number of options to limit the list.
To list all the artifacts in the repository that are of type &quot;JBossEar&quot; use the &quot;&lt;code&gt;-packagetype&lt;/code&gt;&quot; option:

&lt;pre&gt;
$ ctl -p demo -t JBossAntBuilder -r dukesBank -c repoFind -- -packagetype JBossEar
Cleaning up old session data ...
Deleting: /home/alexh/ctier/ctl/projects/demo/resources/JBossAntBuilder/dukesBank/var/sessions/find.session
Querying model for matching package objects ...
|
|--(JBossEar) JBossDukesBank-20080114.ear
|
|--(JBossEar) JBossDukesBank-trunk.1.2.3.952.ear
|
|--(JBossEar) JBossDukesBank-20090114.ear
session data saved: /home/alexh/ctier/ctl/projects/demo/resources/JBossAntBuilder/dukesBank/var/sessions/find.session
[command.timer.Builder.repoFind: 1.313 sec]
&lt;/pre&gt;

To limit the list even further you can specify the &lt;code&gt;-packagename&lt;/code&gt; option:

&lt;pre&gt;
$ ctl -p demo -t JBossAntBuilder -r dukesBank -c repoFind -- -packagetype JBossEar -packagename '.*0114.ear'
Cleaning up old session data ...
Deleting: /home/alexh/ctier/ctl/projects/demo/resources/JBossAntBuilder/dukesBank/var/sessions/find.session
Querying model for matching package objects ...
|
|--(JBossEar) JBossDukesBank-20080114.ear
|
|--(JBossEar) JBossDukesBank-20090114.ear
session data saved: /home/alexh/ctier/ctl/projects/demo/resources/JBossAntBuilder/dukesBank/var/sessions/find.session
[command.timer.Builder.repoFind: 1.313 sec]
&lt;/pre&gt;

===Custom Purging===

You can purge all the matched packages from the results of a repoFind. Simply add the &quot;&lt;code&gt;-purge&lt;/code&gt;&quot; option.

&lt;pre&gt;
$ ctl -p demo -t JBossAntBuilder -r dukesBank -c repoFind -- -packagetype JBossEar -packagename '.*0114.ear' -purge
Cleaning up old session data ...
Deleting: /home/alexh/ctier/ctl/projects/demo/resources/JBossAntBuilder/dukesBank/var/sessions/find.session
Querying model for matching package objects ...
.
.
.
&lt;/pre&gt;

[[Category:Dukes Bank Demo]]</text>
    </revision>
  </page>
  <page>
    <title>Dukes Bank and CruiseControl</title>
    <id>357</id>
    <revision>
      <id>14138</id>
      <timestamp>2010-11-10T15:57:17Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;ctl-depot&quot; to &quot;ctl-project&quot;</comment>
      <text xml:space="preserve">[[Image:java_duke_mascot.jpg|32px]]  This is part of the DukesBank portion of the [[ControlTier Demo]]

==Overview==

This page describes how to demonstrate continuous deployment via CruiseControl for the Dukes Bank JBoss application. This example shows the CruiseControl type coordinating the deploy cycle via JBossServer.
The JBossServer type is actually a subtype of Service and therefore inherits the deploy and service cycle management commands (that includes: shutdown, package download, configuration and startup).

==Preparation==

This page describes how to provision CruiseControl instances both locally and via distributed commands. Before getting started confirm the CruiseControl object is installed to CTL.

Run the ctl-project command:

&lt;pre&gt;
$ ctl-project -p demo -a install
.
.
.
&quot;Install&quot; command running for resource: (CruiseControl) elements
.
.
.
&lt;/pre&gt;
Your output should show the CruiseControl  (among other objects).

==Deploy==

CruiseControl like any Service is deployed using the &quot;Deploy&quot; command. Like other examples of Deploy, this is a workflow that will stop, install package dependencies, generate configuration and then start the CruiseControl instance.

Run &quot;Deploy&quot; without arguments:

&lt;pre&gt;
ctl -p demo -t CruiseControl -r development -c Deploy
&lt;/pre&gt;
... which should produce output similar to below:
&lt;pre&gt;
begin workflow command (1/4) -&gt; &quot;Stop &quot; ...
begin workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot; ...
CruiseControl is down.
.
.
.
Start: &quot;Install the configured package dependencies for the deployment.&quot; 
Beginning installation for packages:   cruisecontrol-bin-2.7.1.zip[CruiseControlZip] ...
.
.
.
Running handler command: startService
CruiseControl started.
end workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot;
end workflow command (4/4) -&gt; &quot;Start &quot;

&lt;/pre&gt;

The CruiseControl instance should be available from build box at http://localhost:8081 or similar (depending on your node setup). In addition you'll find a &quot;boot.log&quot; and &quot;cruisecontrol.log&quot; in the CruiseControl installation directory.

[[Image:DukesBank-CruiseControl-homepage.png]]


As soon as CruiseControl comes up for the first time it will kick-off an initial build and put the resultant package into the ControlTier server's package repository.

As a general rule, you can find an object's configuration properties (for example, in this case, the Cruisecontrol installation directory - ccDir) as follows:

&lt;pre&gt;
$ ctl -p demo -t CruiseControl -r development -c Properties
[MULTI_LINE]
# elements [CruiseControl] #

Elements module library continuous integration server

## Attributes ##

*  basedir: &quot;/home/alexh/ctier/demo/elements/build/cruisecontrol-bin-2.7.1/projects/dukesBank&quot;
*  ccDir: &quot;/home/alexh/ctier/demo/elements/build/cruisecontrol-bin-2.7.1&quot;
*  cruiseControlInterval: &quot;300&quot;
*  cruiseControlJavaHome: &quot;${env.JAVA_HOME}&quot;
*  cruiseControlJmxPort: &quot;8001&quot;
*  cruiseControlMailHost: &quot;localhost&quot;
*  cruiseControlPackageBase: &quot;cruisecontrol-bin-2.7.1&quot;
*  cruiseControlPath: &quot;/bin:/usr/bin&quot;
*  cruiseControlRmiPort: &quot;1100&quot;
*  cruiseControlThreads: &quot;1&quot;
*  cruiseControlWebPort: &quot;8081&quot;
*  defaultAllowMultiplePackageMatches: &quot;false&quot;
*  defaultDeploymentType: &quot;CruiseControl&quot;
*  defaultFailIfPackageNotReplaced: &quot;true&quot;
*  defaultPackageName: &quot;.*&quot;
*  defaultPackageProximity: &quot;1&quot;
*  defaultPackageType: &quot;[^\.]*&quot;
*  errorNotificationRecipient: &quot;${framework.admin.tolist}&quot;
*  service-isdown-executable: &quot;&quot;
*  service-isdown-script: &quot;&quot;
*  service-isup-executable: &quot;&quot;
*  service-isup-script: &quot;&quot;
*  service-start-executable: &quot;&quot;
*  service-start-script: &quot;&quot;
*  service-stop-executable: &quot;&quot;
*  service-stop-script: &quot;&quot;
*  successNotificationRecipient: &quot;${framework.admin.tolist}&quot;
*  targetdir: &quot;/home/alexh/ctier/demo/elements/build/cruisecontrol-bin-2.7.1/projects/dukesBank/j2eetutorial14/examples/bank&quot;

## Dependencies ##

### Parent Dependencies ###
1.   centos2 [Node]

### Child Dependencies ###

1.   dukesBank [JBossAntBuilder]
    *  basedir: &quot;/home/alexh/ctier/demo/elements/build/cruisecontrol-bin-2.7.1/projects/dukesBank&quot;
    *  deployment-basedir: &quot;/home/alexh/ctier/demo/elements/build/cruisecontrol-bin-2.7.1/projects/dukesBank &quot;
    *  deployment-install-root: &quot;/home/alexh/ctier/demo/elements/build/cruisecontrol-bin-2.7.1/projects/dukesBank/j2eetutorial14/examples/bank                                                         &quot;
    *  deployment-startup-rank: &quot;1                                                          &quot;
    *  doc: &quot;Duke's bank JBoss application Ant builder&quot;
    *  install-root: &quot;/home/alexh/ctier/demo/elements/build/cruisecontrol-bin-2.7.1/projects/dukesBank/j2eetutorial14/examples/bank&quot;
    *  name: &quot;dukesBank&quot;
    *  order: &quot;Deployment&quot;
    *  runlevel: &quot;1&quot;
    *  startup-rank: &quot;1&quot;
    *  type: &quot;&quot;
2.   cruisecontrol-bin-2.7.1.zip [CruiseControlZip]
    *  doc: &quot;CruiseControl continuous integration server package&quot;
    *  name: &quot;cruisecontrol-bin-2.7.1.zip&quot;
    *  order: &quot;Package&quot;
    *  package-arch: &quot;noarch&quot;
    *  package-base: &quot;cruisecontrol-bin-2.7.1&quot;
    *  package-buildtime: &quot;&quot;
    *  package-filename: &quot;cruisecontrol-bin-2.7.1.zip&quot;
    *  package-filetype: &quot;zip&quot;
    *  package-install-rank: &quot;30&quot;
    *  package-install-root: &quot;/home/alexh/ctier/demo/elements/build/cruisecontrol-bin-2.7.1&quot;
    *  package-release: &quot;&quot;
    *  package-release-tag: &quot;&quot;
    *  package-repo-url: &quot;http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/default/zip/zips/cruisecontrol-bin-2.7.1.zip&quot;
    *  package-restart: &quot;false&quot;
    *  package-vendor: &quot;ThoughtWorks, Inc.&quot;
    *  package-version: &quot;2.7.1&quot;
    *  type: &quot;CruiseControlZip&quot;
- - -
[/MULTI_LINE]

&lt;/pre&gt;

==Triggering a build==

You can demonstrate how CruiseControl can kick off the JBossAntBuilder's &quot;Build&quot; workflow upon source code commit events. In this scenario a developer commits a change to the source code repository which is detected by the CruiseControl CI loop. It then invokes the build process which includes staging the build artifact to the repository.

You can trigger a build without a code commit via either the home page or dashboard urls. Simply find the &quot;dukesBank&quot; project and then push the Build button:

[[Image:DukesBank-CruiseControl-trigger-build.png]]

The status will change to &quot;building&quot;.

You can view the output of the CruiseControl build by looking at the log output. Locate the build event and then view the log file.
You should see output similar to that shown below.

[[Image:DukesBank-CruiseControl-buildlog.png]]

Notice the scmCheckout, runBuildscript steps were successful and the Build workflow running &quot;repoImport&quot;. The repoImport command found the artifact is about to upload it to the repository.

===Lookup artifact in the repository===

You can use the JBossAntBuilder's &quot;repoFind&quot; command to list the JBossEar packages in the repository.

&lt;pre&gt;
$ ctl -p demo -t JBossAntBuilder -r dukesBank -c repoFind -- -packagetype JBossEar
Cleaning up old session data ...
Deleting: /home/alexh/ctier/ctl/projects/demo/resources/JBossAntBuilder/dukesBank/var/sessions/find.session
Querying model for matching package objects ...
|
|--(JBossEar) JBossDukesBank-trunk.1.2.3.952.ear
.
.
.
&lt;/pre&gt;

Alternatively, you can list the JBossEar packages in Workbench via the &quot;Package Manager&quot; tool.
Clicking on the package will show its metadata:

[[Image:DukesBank-JBossEar-object-view.png]]

==Connecting to Deploy==

With the JBossEar package built and uploaded to the repository, it is available for future deployments.

See the [[Dukes Bank Provisioning JBoss applications]] page 

==Future Steps==

One thing this demo does not do but you could choose to do would be to have CruiseControl invoke Updater's &quot;BuildAndUpdate&quot; workflow.
So instead of simply kicking off JBossAntBuilder's Build workflow you instead execute Updater BuildAndUpdate. 
Doing this will ensure that not only the build occurs but that is also deployed.

[[Category:Dukes Bank Demo]]
[[Category:CruiseControl]]
[[Category:Continuous integration]]</text>
    </revision>
  </page>
  <page>
    <title>Dukes Bank and Multiple Nodes</title>
    <id>369</id>
    <redirect />
    <revision>
      <id>1951</id>
      <timestamp>2009-01-16T22:57:09Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>[[Dukes Bank and Multiple Nodes]] moved to [[Dukes Bank on Multiple Nodes]]</comment>
      <text xml:space="preserve">#REDIRECT [[Dukes Bank on Multiple Nodes]]</text>
    </revision>
  </page>
  <page>
    <title>Dukes Bank and Operations</title>
    <id>363</id>
    <revision>
      <id>14139</id>
      <timestamp>2010-11-10T15:57:17Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;ctl-depot&quot; to &quot;ctl-project&quot;</comment>
      <text xml:space="preserve">
[[Image:java_duke_mascot.jpg|32px]]  This is part of the DukesBank portion of the [[ControlTier Demo]]

([[Accessing the Dukes Bank Website]])

==Overview==

This page describes a demonstration on how to manage Dukes Bank in operations.

This demo focusses on managing the runtime state of the service. This is done via startup and shutdown procedures. Startup and shutdown procedures are managed via a standard set of ControlTier commands:

* Status: Check if the instance is running
* Stop: shtudown down the instance
* Start: startup the instance
* Restart: Stop and then start the instance

This allows you to manage the runtime state of application services both locally on a single machine, or managing sets of services across the distributed environment. 

You can manage the Dukes Bank instances  in one of three ways:
# Local Service: Manage a single service locally on a chosen node. Using this approach you first log in to a target machine where one of the Dukes Bank services is running (e.g., JBossServer) and run one of its control commands (e.g., Restart). This action only affects this single instance. 
# Distributed Service: In this mode, instead of controlling just one Service on one node, you can invoke a command across all the nodes where a particular instance of service is deployed. This uses CTL's node dispatch capability to invoke commands to Services deployed across the network. Using this approach you can for example tell all &quot;developmentDukesBank&quot; JBossServer instances to &quot;Stop&quot;.
# Site: You can control the entire Dukes Bank application as a logical whole, which provides a single management interface to control Services that only belong to the Site. This uses the standard Site type to perform mediated actions across all the Services that comprise the integrated application (e.g., JBossServer and HsqlRdb instances).

==Preparation==

Before getting started confirm the JBossServer, HsqldbRdb and Site objects are deployed to CTL.

Run the [[ctl-project]] command:

&lt;pre&gt;
$ ctl-project -p demo -a install
&quot;Install&quot; command running for resource: (Site) developmentDukesBank
.
.
.
&quot;Install&quot; command running for resource: (JBossServer) developmentDukesBank
.
.
.
&lt;/pre&gt;

Your output should include messages for the Site, HsqldbRdb and JBossServer (among other objects).


These commands are defined in the [[Service]] and [[Site]] types. JBossServer and HsqldRdb both extend Service and include their own startup and shutdown procedures.

The following sections include examples for these commands.


==By Service==
This section describes how to manage the instances of Dukes Bank from the Service level. This lets you control a particular application tier in Dukes Bank.

===Status===


====Local Service====
The &quot;Status&quot; command checks if the JBoss instance is running:

&lt;pre&gt;
ctl -p demo -t JBossServer -r developmentDukesBank -c Status
&lt;/pre&gt;
&lt;pre&gt;
begin workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot; ...
alexh    20179  1.4 20.8 324584 107548 pts/2 Sl   18:43   0:22 /home/alexh/ctier/pkgs/jdk1.5.0_17/bin/java -server 
-Dprogram.name=run.sh -Djava.endorsed.dirs=/home/alexh/ctier/demo/elements/development/dukesbank/jboss-4.0.3SP1/lib/endorsed 
-classpath /home/alexh/ctier/demo/elements/development/dukesbank/jboss-4.0.3SP1/bin/run.jar:/home/alexh/ctier/pkgs/jdk1.5.0_17/lib/tools.jar org.jboss.Main -c default
end workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot;
&lt;/pre&gt;

====Distributed Service====
Use the node set filtering option &quot;-I&quot;, to all hosts where the JBossServer instance is deployed:

&lt;pre&gt;
$ ctl -I '.*' -p demo -t JBossServer -r developmentDukesBank -c Status
begin workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot; ...
alexh    20179  1.4 20.8 324584 107548 pts/2 Sl   18:43   0:22 /home/alexh/ctier/pkgs/jdk1.5.0_17/bin/java -server 
-Dprogram.name=run.sh -Djava.endorsed.dirs=/home/alexh/ctier/demo/elements/development/dukesbank/jboss-4.0.3SP1/lib/endorsed 
-classpath /home/alexh/ctier/demo/elements/development/dukesbank/jboss-4.0.3SP1/bin/run.jar:/home/alexh/ctier/pkgs/jdk1.5.0_17/lib/tools.jar org.jboss.Main -c default
end workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot;
&lt;/pre&gt;


===Stop===

====Local Service====

The &quot;Stop&quot; command shuts down the JBoss instance:

&lt;pre&gt;
$ ctl -p demo -t JBossServer -r developmentDukesBank -c Stop
begin workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot; ...
alexh    22080  0.3 23.4 333896 120768 pts/2 Sl   Jan14   4:48 /home/alexh/ctier/pkgs/jdk1.5.0_17/bin/java -server 
-Dprogram.name=run.sh -Djava.endorsed.dirs=/home/alexh/ctier/demo/elements/development/dukesbank/jboss-4.0.3SP1/lib/endorsed 
-classpath /home/alexh/ctier/demo/elements/development/dukesbank/jboss-4.0.3SP1/bin/run.jar:/home/alexh/ctier/pkgs/jdk1.5.0_17/lib/tools.jar org.jboss.Main -c default
Error handler caught failed command execution: developmentDukesBank[JBossServer]-&gt;assertServiceIsDown. reason: The following error occurred while executing this line:
/home/alexh/ctier/ctl/projects/default/modules/JBossServer/commands/assertServiceIsDown.xml:33: shellscript returned: 1
Running handler command: stopServiceWrapper
Workflow beginning. commands: stopService,waitforStopEvent
begin workflow command (1/2) -&gt; &quot;stopService &quot; ...
Shutdown message has been posted to the server.
Server shutdown may take a while - check logfiles for completion
end workflow command (1/2) -&gt; &quot;stopService &quot;
begin workflow command (2/2) -&gt; &quot;waitforStopEvent &quot; ...
end workflow command (2/2) -&gt; &quot;waitforStopEvent &quot;
[command.timer: 4.637 sec]
Workflow completed. execution time: 4.637 sec
end workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot;
&lt;/pre&gt;

====Distributed Service====

&lt;pre&gt;
$ ctl -I '.*' -p demo -t JBossServer -r developmentDukesBank -c Stop
begin workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot; ...
.
.
.
&lt;/pre&gt;

===Start===

====Local Service====

The &quot;Start&quot; command starts the JBoss instance:
&lt;pre&gt;
$ ctl -p demo -t JBossServer -r developmentDukesBank -c Start
begin workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot; ...
Running handler command: startServiceWrapper
Workflow beginning. commands: startService,waitforStartEvent
begin workflow command (1/2) -&gt; &quot;startService &quot; ...
Moving 1 file to /home/alexh/ctier/demo/elements/development/dukesbank/jboss-4.0.3SP1/server/default/log
end workflow command (1/2) -&gt; &quot;startService &quot;
begin workflow command (2/2) -&gt; &quot;waitforStartEvent &quot; ...
end workflow command (2/2) -&gt; &quot;waitforStartEvent &quot;
[command.timer: 24.735 sec]
Workflow completed. execution time: 24.735 sec
end workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot;
&lt;/pre&gt;


===Restart===

====Local Service====

The &quot;Restart&quot; command is a workflow that calls &quot;Stop&quot; and then &quot;Start&quot;:

&lt;pre&gt;
$ ctl -p demo -t JBossServer -r developmentDukesBank -c Restart
begin workflow command (1/2) -&gt; &quot;Stop &quot; ...
begin workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot; ...
alexh    20179  1.3 20.8 324584 107548 pts/2 Sl   18:43   0:22 /home/alexh/ctier/pkgs/jdk1.5.0_17/bin/java -server
-Dprogram.name=run.sh -Djava.endorsed.dirs=/home/alexh/ctier/demo/elements/development/dukesbank/jboss-4.0.3SP1/lib/endorsed 
-classpath /home/alexh/ctier/demo/elements/development/dukesbank/jboss-4.0.3SP1/bin/run.jar:/home/alexh/ctier/pkgs/jdk1.5.0_17/lib/tools.jar org.jboss.Main 
-c default
Error handler caught failed command execution: developmentDukesBank[JBossServer]-&gt;assertServiceIsDown. reason: 
The following error occurred while executing this line:
/home/alexh/ctier/ctl/projects/default/modules/JBossServer/commands/assertServiceIsDown.xml:33: shellscript returned: 1
Running handler command: stopServiceWrapper
Workflow beginning. commands: stopService,waitforStopEvent
begin workflow command (1/2) -&gt; &quot;stopService &quot; ...
Shutdown message has been posted to the server.
Server shutdown may take a while - check logfiles for completion
end workflow command (1/2) -&gt; &quot;stopService &quot;
begin workflow command (2/2) -&gt; &quot;waitforStopEvent &quot; ...
end workflow command (2/2) -&gt; &quot;waitforStopEvent &quot;
[command.timer: 3.665 sec]
Workflow completed. execution time: 3.665 sec
end workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot;
end workflow command (1/2) -&gt; &quot;Stop &quot;
begin workflow command (2/2) -&gt; &quot;Start &quot; ...
begin workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot; ...
Running handler command: startServiceWrapper
Workflow beginning. commands: startService,waitforStartEvent
begin workflow command (1/2) -&gt; &quot;startService &quot; ...
Moving 1 file to /home/alexh/ctier/demo/elements/development/dukesbank/jboss-4.0.3SP1/server/default/log
end workflow command (1/2) -&gt; &quot;startService &quot;
begin workflow command (2/2) -&gt; &quot;waitforStartEvent &quot; ...
end workflow command (2/2) -&gt; &quot;waitforStartEvent &quot;
[command.timer: 3.665 sec]
Workflow completed. execution time: 3.665 sec
end workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot;
end workflow command (2/2) -&gt; &quot;Start &quot;
&lt;/pre&gt;

====Distributed Service====

This example uses [[Use node filtering options|Node filtering options]] to look up JBossServer instances and then run the &quot;Restart&quot; command. You can of course specify any of JBossServer's commands.

&lt;pre&gt;
$ ctl -I '.*' -p demo -t JBossServer -r developmentDukesBank -c Restart
begin workflow command (1/2) -&gt; &quot;Stop &quot; ...
begin workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot; ...
.
.
.
&lt;/pre&gt;

==By Site==
This section describes how to manage the instances of Dukes Bank from the Site level. This lets you control all tiers in Dukes Bank from a single control point.

===Status===

You can invoke the &lt;code&gt;Status&lt;/code&gt; command across all JBossServers via the &quot;developmentDukesBank&quot; Site. 
The Site will dispatch the &quot;Status&quot; command to all services by default. 

&lt;pre&gt;
$ ctl -p demo -t Site  -r developmentDukesBank -c Status
Dispatching command 'Status' to objects: developmentDukesBank[HsqldbRdb], developmentDukesBank[JBossServer] ...
starting: developmentDukesBank[HsqldbRdb]-&gt;Status ...
starting: developmentDukesBank[JBossServer]-&gt;Status ...
begin workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot; ...
.
.
.
&lt;/pre&gt;

To limit the dispatch to just the JBossServers use the &quot;&lt;code&gt;-resourcetype&lt;/code&gt;&quot; option.
&lt;pre&gt;
$ ctl -p demo -t Site  -r developmentDukesBank -c Status -- -resourcetype JBossServer
Dispatching command 'Status' to objects: developmentDukesBank[JBossServer] ...
.
.
.
&lt;/pre&gt;
This limits &quot;Status&quot; to just JBossServer instances and excludes everything else (e.g., HsqRdb instances)

===Stop===

The Site &quot;Stop&quot; command shuts down all of the instances:

&lt;pre&gt;
$ ctl -p demo -t Site  -r developmentDukesBank -c Stop
Dispatching command 'Stop' to objects: developmentDukesBank[JBossServer], developmentDukesBank[HsqldbRdb] ...
starting: developmentDukesBank[JBossServer]-&gt;Stop ...
starting: developmentDukesBank[HsqldbRdb]-&gt;Stop ...
begin workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot; ...
alexh    20894  1.4 21.3 326948 109988 pts/2 Sl   19:16   0:22 /home/alexh/ctier/pkgs/jdk1.5.0_17/bin/java -server 
-Dprogram.name=run.sh -Djava.endorsed.dirs=/home/alexh/ctier/demo/elements/development/dukesbank/jboss-4.0.3SP1/lib/endorsed 
-classpath /home/alexh/ctier/demo/elements/development/dukesbank/jboss-4.0.3SP1/bin/run.jar:/home/alexh/ctier/pkgs/jdk1.5.0_17/lib/tools.jar org.jboss.Main -c default
Error handler caught failed command execution: developmentDukesBank[JBossServer]-&gt;assertServiceIsDown. reason: The following error occurred while executing this line:
/home/alexh/ctier/ctl/projects/default/modules/JBossServer/commands/assertServiceIsDown.xml:33: shellscript returned: 1
Running handler command: stopServiceWrapper
Workflow beginning. commands: stopService,waitforStopEvent
begin workflow command (1/2) -&gt; &quot;stopService &quot; ...
Shutdown message has been posted to the server.
Server shutdown may take a while - check logfiles for completion
end workflow command (1/2) -&gt; &quot;stopService &quot;
begin workflow command (2/2) -&gt; &quot;waitforStopEvent &quot; ...
end workflow command (2/2) -&gt; &quot;waitforStopEvent &quot;
[command.timer: 3.361 sec]
Workflow completed. execution time: 3.361 sec
end workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot;
begin workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot; ...
Running handler command: stopService
end workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot;
&lt;/pre&gt;

Run the command again but this time use &quot;&lt;code&gt;-resourcetype&lt;/code&gt;&quot; to match just the JBossServer instances:

&lt;pre&gt;
$ ctl -p demo -t Site  -r developmentDukesBank -c Stop -- -resourcetype JBossServer
Dispatching command 'Stop' to objects: developmentDukesBank[JBossServer] ...
starting: developmentDukesBank[JBossServer]-&gt;Stop ...
begin workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot; ...
end workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot;
&lt;/pre&gt;


===Start===

The Site &quot;Start&quot; command brings up all of the instances:

&lt;pre&gt;
$ ctl -p demo -t Site  -r developmentDukesBank -c Start
Dispatching command 'Start' to objects: developmentDukesBank[HsqldbRdb], developmentDukesBank[JBossServer] ...
starting: developmentDukesBank[HsqldbRdb]-&gt;Start ...
starting: developmentDukesBank[JBossServer]-&gt;Start ...
begin workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot; ...
.
.
.
end workflow command (1/2) -&gt; &quot;startService &quot;
begin workflow command (2/2) -&gt; &quot;waitforStartEvent &quot; ...
end workflow command (2/2) -&gt; &quot;waitforStartEvent &quot;
&lt;/pre&gt;

Run the command again but this time just limit the command to HsqldbRdb instances:
&lt;pre&gt;
$ ctl -p demo -t Site  -r developmentDukesBank -c Start -- -resourcetype HsqldbRdb
Dispatching command 'Start' to objects: developmentDukesBank[HsqldbRdb] ...
starting: developmentDukesBank[HsqldbRdb]-&gt;Start ...
begin workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot; ...
assertion succeeded since the HSQLDB instance is up.
end workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot;
&lt;/pre&gt;
Notice, the Start command did not call startService since the service was already running.

===Restart===
The Site &quot;Restart&quot; command shuts down and then starts up all the associated Services:

&lt;pre&gt;
$ ctl -p demo -t Site  -r developmentDukesBank -c Restart
Dispatching command 'Restart' to objects: developmentDukesBank[JBossServer], developmentDukesBank[HsqldbRdb] ...
starting: developmentDukesBank[JBossServer]-&gt;Restart ...
starting: developmentDukesBank[HsqldbRdb]-&gt;Restart ...
begin workflow command (1/2) -&gt; &quot;Stop &quot; ...
begin workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot; ...
.
.
.
end workflow command (1/2) -&gt; &quot;Stop &quot;
begin workflow command (2/2) -&gt; &quot;Start &quot; ...
.
.
.
end workflow command (2/2) -&gt; &quot;Start &quot;
&lt;/pre&gt;

Restart just the JBoss instances:

&lt;pre&gt;
$ ctl -p demo -t Site  -r developmentDukesBank -c Restart -- -resourcetype JBossServer
Dispatching command 'Restart' to objects: developmentDukesBank[JBossServer] ...
starting: developmentDukesBank[JBossServer]-&gt;Restart ...
.
.
.
end workflow command (2/2) -&gt; &quot;waitforStartEvent &quot;
Workflow completed. execution time: 3.867 sec
end workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot;
end workflow command (2/2) -&gt; &quot;Start &quot;
&lt;/pre&gt;

[[Category:Dukes Bank Demo]]</text>
    </revision>
  </page>
  <page>
    <title>Dukes Bank and Self Service</title>
    <id>377</id>
    <revision>
      <id>14140</id>
      <timestamp>2010-11-10T15:58:05Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;ctl-depot&quot; to &quot;ctl-project&quot;</comment>
      <text xml:space="preserve">[[Image:java_duke_mascot.jpg|32px]]  This is part of the DukesBank portion of the [[ControlTier Demo]]

==Overview==
This page describes how to demonstrate the build and deployment processes for Dukes Bank JBoss application using a self service web interface, rather than the command line like we did in previous demos. 

The examples in this demo will introduce you to the Jobcenter tool, one of the ControlTier standard server tools that provides a web interface for running CTL commands.

The example will show use of Jobcenter as users with two different roles: Build and Deploy.

[[Image:Screencast-icon.png]]  [http://open.controltier.com/media/BasicDemo6_BuildDeployWithJC.swf Watch a video of this demo (less than 5:00)]

==Prerequisites==
This demo assumes you have completed:
* [[Building Dukes Bank Project]]
* [[Dukes Bank Provisioning JBoss instances]]
* [[Dukes Bank Checkout and Build]]

==Preparation==

Before getting started confirm all the necessary objects are deployed to CTL.

Run the [[ctl-project]] command:
&lt;pre&gt;
$ ctl-project -p demo -a install
&quot;Install&quot; command running for resource: (Site) developmentDukesBank
&quot;Install&quot; command running for resource: (Updater) developmentDukesBank
&quot;Install&quot; command running for resource: (JBossAntBuilder) dukesBank
&quot;Install&quot; command running for resource: (HsqldbRdbExportBuilder) dukesBank
&quot;Install&quot; command running for resource: (JBossServer) developmentDukesBank
&quot;Install&quot; command running for resource: (HsqldbRdb) developmentDukesBank
.
.
.
&lt;/pre&gt;


==Access Jobcenter==

The Jobcenter web application can be accessed on your ControlTier web server.  Go to the main application list page, and click on Jobcenter:

* Example, if your server host is &quot;ctier.mycompany.com&quot;: http://ctier.mycompany.com:8080/

Jobcenter is linked to from their, or you can just add the &quot;/jobcenter&quot; path to the URL: http://ctier.mycompany.com:8080/jobcenter

==Login as Build==

Enter the default build username and password, both &quot;build&quot;:

[[Image:jobcenter_login_build.png]]

You will see the listing of Jobs that are available for the Build user to run.  Some Jobs are not shown because the &quot;build&quot; role only shows Jobs which apply to Builder types.

[[Image:jobcenter_jobs_build.png]]

If you have performed the previous two Tutorial steps you should see a message like &quot;28 unauthorized jobs are not shown&quot;.  This is to indicate that some jobs in Jobcenter are not available to the build user.

== Scenario 1: Build the DukesBank application ==

As the Build user, you can perform the same Build command used to build the Dukes Bank sample application in the step [[Dukes Bank Checkout and Build#Run the Build Command]].

First, create the Job.

# Click the &quot;Create a new Job&amp;hellip;&quot; button. [[Image:Jobcenter_create_new_job_button.png]]
# Select the &quot;demo&quot; project if it is not already selected
# Make sure that Defined Job is selected under &quot;Type of Job&quot;
# Select the appropriate Context from the scrolling list of available contexts:  JBossAntBuilder/dukesbank
# Select the &quot;Build&quot; command from the list of commands that appears. [[Image:Jobcenter_create_dukesbank_build_job.png]]
# Under &quot;Save this Job?&quot; click the &quot;Yes&quot; button.
# Name the job &quot;Build DukesBank&quot;, and enter a description
# Under the &quot;Group&quot; section, enter &quot;Build&quot;. 

[[Image:Jobcenter_create_dukesbank_build_job_2.png]]

Now click the &quot;Create&quot; button at the bottom of the form.

The Job will be created and you will be taken to the Job View: 

[[Image:Jobcenter_dukesbank_build_job_created.png]]

=== Run The Job ===

Click the &quot;Run Job Now&quot; button to immediately run the Build job.

You will be taken to the &quot;Now Running&quot; page that displays the list of currently running jobs.

[[Image:Jobcenter_dukesbank_now_running.png]]

The status of the job will be updated as long as this page is open.  If you wish to view the progress of the Job, you can click the &quot;output&amp;raquo;&quot; link next to the running Job.

[[Category:Dukes Bank Demo]]
[[Category:Screencasts]]</text>
    </revision>
  </page>
  <page>
    <title>Dukes Bank demo</title>
    <id>1302</id>
    <redirect />
    <revision>
      <id>7807</id>
      <timestamp>2009-08-05T22:12:36Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <comment>add redirect</comment>
      <text xml:space="preserve">#REDIRECT [[Dukes Bank J2EE examples]]</text>
    </revision>
  </page>
  <page>
    <title>Dukes Bank on Multiple Nodes</title>
    <id>366</id>
    <revision>
      <id>15542</id>
      <timestamp>2011-09-30T21:09:11Z</timestamp>
      <contributor>
        <username>Krohr</username>
        <id>272</id>
      </contributor>
      <minor/>
      <text xml:space="preserve">[[Image:java_duke_mascot.jpg|32px]]  This is part of the DukesBank portion of the [[ControlTier Demo]]

==Overview==

This page describes how to demonstrate the Dukes Bank build and deployment on multiple nodes. This example shows a more realistic configuration scenario one might see in a dev or QA environment.
The examples in this demo will show the management of the Dukes Bank when its components are deployed on separate nodes.

The diagram shows six machines divided into three groups. The &quot;admin&quot; group contains the ControlTier server where all centralized commands are performed. The &quot;development&quot; group has the build server and two tests host. Finally, the &quot;staging&quot; group contains just two hosts where the QA app and database servers run.

[[Image:DukesBank-Multiple-Nodes.png]]

===Expanded operation===

====Site view====

====Process flow view====

==Prerequisites==
Ensure you have already completed the following:
* Install the client on each of the target machines. See [[ZIP installer#Client-only]]
* You can run any of the Dukes Bank demo after setting it up. See [[Building Dukes Bank Project]]

==Update project definition==

Dukes Bank project is defined in two parts:
# default-object.xml: This is a template file that contains the configuration model describing how the Dukes Bank components are deployed and tied together. This file stays unchanged. Node locations are maintained in the defaults file below.
# defaults-&lt;os.name&gt;.xml: This file defines the default locations of the Dukes Bank deployments, a single node configuration. You can edit this file to specify other nodes.

===Edit defaults file===

* Make a copy of the original so you can manage your own defaults.

&lt;pre&gt;
cp $CTL_BASE/modules/DukesBankProjectBuilder/templates/defaults.Linux.xml $CTL_BASE/src
&lt;/pre&gt;

* Open the  file in an editor and notice that all the &quot;&lt;code&gt;&lt;node&gt;&lt;/code&gt;&quot; tags specify &quot;${defaults.default.node}&quot;:

Eg: 
&lt;code&gt;vi $CTL_BASE/src/defaults.Linux.xml&lt;/code&gt;

* Replace the &quot;${defaults.default.node}&quot; value with a different node name, one for each component.  In this example, there are 5 hypothetical nodes (dev-build, dev-app1, dev-db1, stg-app1, stg-db1):

File listing: defaults.Linux.xml

&lt;pre&gt;
&lt;?xml version=&quot;1.0&quot;?&gt;

&lt;!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --&gt;
&lt;!-- Defaults data for DukesBankProjectBuilder generate-resources project XML document.      --&gt;
&lt;!--                                                                                       --&gt;
&lt;!-- Defines a set of objects that implements the Duke's Bank and Hello World sample       --&gt;
&lt;!-- application development and staging environments deployed to one or more systems.     --&gt;
&lt;!--                                                                                       --&gt;
&lt;!-- The target platform is JBoss 4.0 and HSQLDB database and Tomcat 6.                    --&gt;
&lt;!--                                                                                       --&gt;
&lt;!-- Defines deployment and setting type objects as they are first used, and subsequently  --&gt;
&lt;!-- refers to objects by type and name whenever they are needed again.                    --&gt;
&lt;!--                                                                                       --&gt;
&lt;!-- This file can be supplied to the ProjectBuilder &quot;generate-resources&quot; command to load    --&gt;
&lt;!-- sample objects into a project that contains the &quot;content&quot; library's type model.       --&gt;
&lt;!--                                                                                       --&gt;
&lt;!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --&gt;

&lt;defaults&gt;
  &lt;default&gt;
    &lt;!-- The default node is the framework node of the Ctl client invoking the --&gt;
    &lt;!-- generate-resources command. (For the default installation this will be  --&gt;
    &lt;!-- &quot;localhost&quot;).                                                         --&gt;
    &lt;node&gt;${framework.node}&lt;/node&gt;
  &lt;/default&gt;

  &lt;!-- The default location of the installation directory for the Duke's Bank    --&gt;
  &lt;!-- and Hello World sample application source files and packages:             --&gt;
  &lt;installroot&gt;${env.CTIER_ROOT}/demo/elements&lt;/installroot&gt;

  &lt;!-- The out-of-the box sample applications can be configured to run on        --&gt;
  &lt;!-- from one to six systems. One system must be designated the ControlTier    --&gt;
  &lt;!-- server. This is the system where Workbench and Jobcenter run. Another     --&gt;
  &lt;!-- system is designated as the build box where CruiseControl and the Ant     --&gt;
  &lt;!-- based build are run.                                                      --&gt;
  &lt;!--                                                                           --&gt;
  &lt;!-- One or two boxes are assigned to the development environment. Builds are  --&gt;
  &lt;!-- run here, and the development JBoss instance and &quot;source&quot; HSQLDB database --&gt;
  &lt;!-- instance are deployed here. A fifth and possibly sixth system host the    --&gt;
  &lt;!-- staging environment which includes both JBoss and HSQLDB instances.       --&gt;
  &lt;!--                                                                           --&gt;
  &lt;!-- Note that all these systems can be the same box in which case separate    --&gt;
  &lt;!-- JBoss and HSQLDB server instances are started on separate ports.          --&gt;

  &lt;server&gt;
    &lt;node&gt;${defaults.default.node}&lt;/node&gt;
  &lt;/server&gt;
  &lt;development&gt;
    &lt;buildserver&gt;
      &lt;scmconnection&gt;
	&lt;dukesbank&gt;https://moduleforge.svn.sourceforge.net/svnroot/moduleforge/elements/branches/3.2.4/demo/DukesBank/src&lt;/dukesbank&gt;
      &lt;/scmconnection&gt;
      &lt;node&gt;dev-build&lt;/node&gt;
    &lt;/buildserver&gt;
    &lt;applicationserver&gt;
      &lt;node&gt;dev-app1&lt;/node&gt;
    &lt;/applicationserver&gt;
    &lt;databaseserver&gt;
      &lt;node&gt;dev-db1&lt;/node&gt;
    &lt;/databaseserver&gt;
  &lt;/development&gt;
  &lt;staging&gt;
    &lt;applicationserver&gt;
      &lt;node&gt;stg-app1&lt;/node&gt;
    &lt;/applicationserver&gt;
    &lt;databaseserver&gt;
      &lt;node&gt;stg-db1&lt;/node&gt;
    &lt;/databaseserver&gt;
  &lt;/staging&gt;
&lt;/defaults&gt;
&lt;/pre&gt;

===Generate project data===

Use the &quot;generate-resources&quot; command to read the new defaults and regenerate the Dukes Bank project data:
&lt;pre&gt;
ctl -p demo -t DukesBankProjectBuilder -r dukesbank -c generate-resources -- \
  -defaults $CTL_BASE/src/defaults.Linux.xml -upload
&lt;/pre&gt;

The &quot;&lt;code&gt;-upload&lt;/code&gt;&quot; option will load it to the ControlTier server.

===Generate job definitions===

Use the &quot;generate-jobs&quot; command to read the new defaults and regenerate the Dukes Bank jobs data:

&lt;pre&gt;
ctl -p demo -t DukesBankProjectBuilder -r dukesbank -c generate-jobs -- \
  -defaults $CTL_BASE/src/defaults.Linux.xml -upload
&lt;/pre&gt;

===Update CTL===

Run the &quot;create&quot; and &quot;install&quot; actions:
&lt;pre&gt;
ctl-exec -- ctl-project -p demo -a create
.
.
.
ctl-exec -- ctl-project -p demo -a install
.
.
.
&lt;/pre&gt;


==Run Commands==

Run a build with a new buildstamp.

Run it from the ControlTier server. Use the &quot;-I&quot; flag to turn on network dispatching
&lt;pre&gt;
ctl -I &quot;.*&quot; ...
&lt;/pre&gt;

===Run Status===

Check status in the staging environment.

Run this command on the ControlTier server : 
&lt;pre&gt;
ctl -p demo -t Site  -r stagingDukesBank -c Status 
.
.
.
&lt;/pre&gt;

[[Category:Dukes Bank Demo]]</text>
    </revision>
  </page>
  <page>
    <title>Dukes Bank system requirements</title>
    <id>1299</id>
    <redirect />
    <revision>
      <id>7803</id>
      <timestamp>2009-08-05T21:40:51Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <comment>moved [[Dukes Bank system requirements]] to [[System requirements]]:&amp;#32;generalize requirements</comment>
      <text xml:space="preserve">#REDIRECT [[System requirements]]</text>
    </revision>
  </page>
  <page>
    <title>Ear</title>
    <id>1656</id>
    <revision>
      <id>11188</id>
      <timestamp>2009-12-14T16:16:06Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Created page with '&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Package&lt;/categorytree&gt; [[File:Icon-Packa…'</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Package&lt;/categorytree&gt;
[[File:Icon-PackageObject.png]]
The [[ear]] type represents a J2EE application archive


==Reference==

{{Package/reference|ear}}

==Definition==
[[File:Core-type-model.png|thumb|Core type model]]

===Metadata===

The table below gives a brief description for each of the attributes of the package type. The ones with an asterisk are required during the deployment cycle.
{{Package/type/properties}}

===Project XML===
{{Package/projectxml |example|123|ear}}

===Querying===

{{Package/querying|example|123|ear}}

{{Manual/navbox}}
[[Category:Package]]</text>
    </revision>
  </page>
  <page>
    <title>Elements</title>
    <id>881</id>
    <redirect />
    <revision>
      <id>4801</id>
      <timestamp>2009-05-02T03:10:40Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <comment>Redirecting to [[Elements Type Library]]</comment>
      <text xml:space="preserve">#REDIRECT [[Elements Type Library]]</text>
    </revision>
  </page>
  <page>
    <title>Elements Type Guide</title>
    <id>739</id>
    <redirect />
    <revision>
      <id>4798</id>
      <timestamp>2009-05-02T02:55:50Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <comment>redirect to Category:Elements</comment>
      <text xml:space="preserve">#REDIRECT [[:Category:Elements]]</text>
    </revision>
  </page>
  <page>
    <title>Elements Type Library</title>
    <id>880</id>
    <revision>
      <id>16408</id>
      <timestamp>2012-02-20T13:21:10Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Reverted SPAM bot edits</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Libraries&lt;/categorytree&gt;

The '''Elements Type Library''' is a collection of [[modules]] that integrates common software with the ControlTier framework. The list of software with integration elements includes [[Tomcat]], [[Apache]], [[JBoss]], [[BitTorrent]], [[CruiseControl]], [[Ant]], [[Maven]], [[Squid]], [[Solidcore]], [[Hudson]], and others.

The following is a table of elements types and their associated documentation and reference pages.

{| class=&quot;wikitable&quot;
|-
! Type name
! Wiki topic(s)
! Type reference
|-
| ActiveMQ
| [[ActiveMQ]]
| {{Elements Type Reference|ActiveMQ}}
|-
| ActiveMQZip
| [[ActiveMQZip]]
| {{Elements Type Reference|ActiveMQZip}}
|-
| AntBuilder
| [[AntBuilder]]
| {{Elements Type Reference|AntBuilder}}
|-
| AntZip
| [[AntZip]]
| {{Elements Type Reference|AntZip}}
|-
| Apache
| [[Apache]]
| {{Elements Type Reference|Apache}}
|-
| Apache Site
| [[ApacheSite]]
| {{Elements Type Reference|ApacheSite}}
|-
| ApacheSystemService
| [[ApacheSystemService]]
| {{Elements Type Reference|ApacheSystemService}}
|-
| BatBuilder
| [[BatBuilder]]
| {{Elements Type Reference|BatBuilder}}
|-
| BitTorrentBuilder
| [[BitTorrentBuilder]]
| {{Elements Type Reference|BitTorrentBuilder}}
|-
| BitTorrentClient
| [[BitTorrentClient]]
| {{Elements Type Reference|BitTorrentClient}}
|-
| BitTorrentFile
| [[BitTorrentFile]]
| {{Elements Type Reference|BitTorrentFile}}
|-
| BitTorrentTracker
| [[BitTorrentTracker]]
| {{Elements Type Reference|BitTorrentTracker}}
|-
| ConfigZip
| [[ConfigZip]]
| {{Elements Type Reference|ConfigZip}}
|-
| ContentZip
| [[ContentZip]]
| {{Elements Type Reference|ContentZip}}
|-
| ContinuousIntegration
| [[ContinuousIntegration]]
| {{Elements Type Reference|ContinuousIntegration}}
|-
| CruiseControl
| [[CruiseControl]]
| {{Elements Type Reference|CruiseControl}}
|-
| CruiseControlService
| [[CruiseControlService]]
| {{Elements Type Reference|CruiseControlService}}
|-
| CruiseControlZip
| [[CruiseControlZip]]
| {{Elements Type Reference|CruiseControlZip}}
|-
| DukesBankProjectBuilder
| [[DukesBankProjectBuilder]]
| {{Elements Type Reference|DukesBankProjectBuilder}}
|-
| ElementsProjectBuilder
| [[ElementsProjectBuilder]]
| {{Elements Type Reference|ElementsProjectBuilder}}
|-
| FireDaemonService
| [[FireDaemonService]]
| {{Elements Type Reference|FireDaemonService}}
|-
| HsqldbRdb
| [[HsqldbRdb]]
| {{Elements Type Reference|HsqldbRdb}}
|-
| HsqldbRdbDmp
| [[HsqldbRdbDmp]]
| {{Elements Type Reference|HsqldbRdbDmp}}
|-
| HsqldbRdbExportBuilder
| [[HsqldbRdbExportBuilder]]
| {{Elements Type Reference|HsqldbRdbExportBuilder}}
|-
| HsqldbRdbSchema
| [[HsqldbRdbSchema]]
| {{Elements Type Reference|HsqldbRdbSchema}}
|-
| HsqldbZip
| [[HsqldbZip]]
| {{Elements Type Reference|HsqldbZip}}
|-
| Hudson
| [[Hudson]]
| {{Elements Type Reference|Hudson}}
|-
| HudsonWar
| [[HudsonWar]]
| {{Elements Type Reference|HudsonWar}}
|-
| ImageMagickTgz
| [[ImageMagickTgz]]
| {{Elements Type Reference|ImageMagickTgz}}
|-
| JBossAntBuilder
| [[JBossAntBuilder]]
| {{Elements Type Reference|JBossAntBuilder}}
|-
| JBossEar
| [[JBossEar]]
| {{Elements Type Reference|JBossEar}}
|-
| JBossServer
| [[JBossServer]]
| {{Elements Type Reference|JBossServer}}
|-
| JBossZip
| [[JBossZip]]
| {{Elements Type Reference|JBossZip}}
|-
| JavaBin
| [[JavaBin]]
| {{Elements Type Reference|JavaBin}}
|-
| JavaServiceWrapper
| [[JavaServiceWrapper]]
| {{Elements Type Reference|JavaServiceWrapper}}
|-
| JavaServiceWrapperZip
| [[JavaServiceWrapperZip]]
| {{Elements Type Reference|JavaServiceWrapperZip}}
|-
| JtdsJar
| [[JtdsJar]]
| {{Elements Type Reference|JtdsJar}}
|-
| MakeBuilder
| [[MakeBuilder]]
| {{Elements Type Reference|MakeBuilder}}
|-
| MavenBuilder
| [[MavenBuilder]]
| {{Elements Type Reference|MavenBuilder}}
|-
| MavenZip
| [[MavenZip]]
| {{Elements Type Reference|MavenZip}}
|-
| Mule
| [[Mule]]
| {{Elements Type Reference|Mule}}
|-
| MuleUserJar
| [[MuleUserJar]]
| {{Elements Type Reference|MuleUserJar}}
|-
| MuleZip
| [[MuleZip]]
| {{Elements Type Reference|MuleZip}}
|-
| MysqlRdb
| [[MysqlRdb]]
| {{Elements Type Reference|MysqlRdb}}
|-
| MysqlSchema
| [[MysqlSchema]]
| {{Elements Type Reference|MysqlSchema}}
|-
| OpenLDAP
| [[OpenLDAP]]
| {{Elements Type Reference|OpenLDAP}}
|-
| PackedWar
| [[PackedWar]]
| {{Elements Type Reference|PackedWar}}
|-
| PlatformJar
| [[PlatformJar]]
| {{Elements Type Reference|PlatformJar}}
|-
| PlatformZip
| [[PlatformZip]]
| {{Elements Type Reference|PlatformZip}}
|-
| PostgresRdb
| [[PostgresRdb]]
| {{Elements Type Reference|PostgresRdb}}
|-
| PostgresRdbSchema
| [[PostgresRdbSchema]]
| {{Elements Type Reference|PostgresRdbSchema}}
|-
| PuppetClient
| [[PuppetClient]]
| {{Elements Type Reference|PuppetClient}}
|-
| PuppetMaster
| [[PuppetMaster]]
| {{Elements Type Reference|PuppetMaster}}
|-
| Rdb
| [[Rdb]]
| {{Elements Type Reference|Rdb}}
|-
| RdbSchema
| [[RdbSchema]]
| {{Elements Type Reference|RdbSchema}}
|-
| RpmBuilder
| [[RpmBuilder]]
| {{Elements Type Reference|RpmBuilder}}
|-
| SolidcoreController
| [[SolidcoreController]]
| {{Elements Type Reference|SolidcoreController}}
|-
| SolidcoreHost
| [[SolidcoreHost]]
| {{Elements Type Reference|SolidcoreHost}}
|-
| Squid
| [[Squid]]
| {{Elements Type Reference|Squid}}
|-
| SystemService
| [[SystemService]]
| {{Elements Type Reference|SystemService}}
|-
| Tomcat
| [[Tomcat]]
| {{Elements Type Reference|Tomcat}}
|-
| TomcatAntBuilder
| [[TomcatAntBuilder]]
| {{Elements Type Reference|TomcatAntBuilder}}
|-
| TomcatContext
| [[TomcatContext]]
| {{Elements Type Reference|TomcatContext}}
|-
| TomcatServer
| [[TomcatServer]]
| {{Elements Type Reference|TomcatServer}}
|-
| TomcatSite
| [[TomcatSite]]
| {{Elements Type Reference|TomcatSite}}
|-
| TomcatZip
| [[TomcatZip]]
| {{Elements Type Reference|TomcatZip}}
|-
| WarUpdater
| [[WarUpdater]]
| {{Elements Type Reference|WarUpdater}}
|-
| WindowsService
| [[WindowsService]]
| {{Elements Type Reference|WindowsService}}
|-
| YumRpm
| [[YumRpm]]
| {{Elements Type Reference|YumRpm}}
|-
| ZipBuilder
| [[ZipBuilder]]
| {{Elements Type Reference|ZipBuilder}}
|}

[[Category:Elements]]</text>
    </revision>
  </page>
  <page>
    <title>Engineering meeting notes</title>
    <id>1666</id>
    <redirect />
    <revision>
      <id>11233</id>
      <timestamp>2009-12-14T18:51:09Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>moved [[Engineering meeting notes]] to [[Weekly development meeting notes]]</comment>
      <text xml:space="preserve">#REDIRECT [[Weekly development meeting notes]]</text>
    </revision>
  </page>
  <page>
    <title>Entity.properties</title>
    <id>1969</id>
    <redirect />
    <revision>
      <id>14100</id>
      <timestamp>2010-11-10T15:35:36Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>moved [[Entity.properties]] to [[Resource.properties]]</comment>
      <text xml:space="preserve">#REDIRECT [[Resource.properties]]</text>
    </revision>
  </page>
  <page>
    <title>EntityQuery Type Reference</title>
    <id>1307</id>
    <revision>
      <id>12548</id>
      <timestamp>2010-04-16T17:23:11Z</timestamp>
      <contributor>
        <username>Gschueler</username>
        <id>8</id>
      </contributor>
      <comment>/* Use with apply-macro */</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Tasks&lt;/categorytree&gt;

The &lt;code&gt;entityquery&lt;/code&gt; type is for use with the [[ApplyMacro Task Reference|apply-macro]] task.

It allows you to query the [[resource model]] and retrieve information about resources aka &quot;Entities&quot; that match certain restrictions. The results can be fed to an Ant Macrodef.

For another mechanism for retrieving and operating on query results, see the [[GetQuery Task Reference|get-query]] task.

Benefits of &quot;entityquery&quot; over &quot;get-query&quot; are:

* entityquery can operate on all entities within a matched relationship
* entityquery can sort results by property names
* entityquery is designed to be easy to use results within Ant

==Description ==

Querying consists of specifying a set of *restrictions*.  Restrictions can either apply to a property of an Entity, e.g. its Name, Type or other property, or they can apply to *Relations*.  Relations are the  Child Resources or Parent Referrers connected to the targeted Entity, and so you can specify a set of Restrictions that match a certain pattern of relationships.

The query makes a request to the ControlTier Server to evaluate it.

==Attributes==

The &lt;code&gt;entityquery&lt;/code&gt; type extends the &lt;code&gt;query&lt;/code&gt; element described below, and has the same allowable attributes and sub-elements.

The &lt;code&gt;entityquery&lt;/code&gt; type element has a few additional attributes.

{| style=&quot;border: 1px solid #aaa; border-collapse:collapse;&quot; cellpadding=&quot;2&quot; cellspacing=&quot;1&quot; border=&quot;1&quot; 
!Attribute !! Description
|-
| select
| A comma-separated list of result properties to pass to the Macro.  These properties are taken from each result set from the query.  Each result property is in the form &quot;&lt;em&gt;KEY&lt;/em&gt;.&lt;em&gt;PROPERTY&lt;/em&gt;&quot;, where &lt;em&gt;KEY&lt;/em&gt; defaults to &quot;default&quot; at the top-level.  When you use the &lt;code&gt;matchKey&lt;/code&gt; attribute on [[#relationrestriction]] elements, then the &lt;code&gt;matchKey&lt;/code&gt; value specifies another &lt;em&gt;KEY&lt;/em&gt; you can select.  See [[#result properties]] for result property names.
|-
| depot
| specify the depot name to use, typically the value of ${context.depot}.
|}

The &lt;code&gt;entityquery&lt;/code&gt; type also allows the &lt;code&gt;sortby&lt;/code&gt; subelement.

==Use with apply-macro==

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;apply-macro&gt;
    &lt;entityquery 
          select=&quot;default.name,default.type,mykey.name,mykey.type&quot;
          depot=&quot;${context.depot}&quot; &gt;
        &lt;sortby&gt;
            &lt;select name=&quot;pkgtype&quot; by=&quot;name&quot; order=&quot;ascending&quot;/&gt;
        &lt;/sortby&gt;
        &lt;!----------------------------&gt;
        &lt;!-- include query restrictions here --&gt;
        &lt;!----------------------------&gt;
    &lt;/entityquery&gt;

    &lt;sequential&gt;
       &lt;echo&gt;info: @{default.name} has type @{default.type}&lt;/echo&gt;
        &lt;echo&gt;mykey: @{mykey.name} has type @{mykey.type}&lt;/echo&gt;
     &lt;/sequential&gt;

&lt;/apply-macro&gt;
&lt;/syntaxhighlight&gt;

==Result properties==

The &lt;code&gt;select&lt;/code&gt; attribute lets you pick which properties of the matching resources to pass to the macro.  You select them by &quot;key.property&quot;, where &lt;code&gt;key&lt;/code&gt; defaults to &quot;default&quot; for each top-level matched resource, but can be set for lower-level matched resources with the &lt;code&gt;matchKey&lt;/code&gt; attribute.

These are the available properties based on the resulting resource's base type:

===Common properties===
These properties are available for all base types:

{|
!property!!description
|-
|maprefUri||URI of the resource
|-
|name||Name of the resource
|-
|type||type name of the resource
|-
|description||description of the resource
|-
|}

===Deployment properties===

{|
!property!!description
|-
|basedir||Deployment basedir
|-
|installRoot|| Deployment install-root
|-
|startupRank||Deployment startup-rank
|-
|}

===Node properties===

{|
!property!!description
|-
|osFamily||OS Family
|-
|osName||OS Name
|-
|osArch||OS Architecture
|-
|osVersion||OS Version
|-
|hostname||Hostname
|-
|ctlBase||CTL Base path
|-
|ctlHome||CTL Home path
|-
|ctlUsername||CTL username
|-
|ctlPassword||CTL password
|-
|}

===Package properties===
{|
!property!!description
|-
|packageFilename||Package Filename
|-
|packageBase||Package base
|-
|packageVersion||Package version
|-
|packageRelease||Package release
|-
|packageArch||Package Architecture
|-
|packageBuildtime||Package buildtime
|-
|packageVendor||Package vendor
|-
|packageRestart||Package restart
|-
|packageFiletype||Package filetype
|-
|packageInstallRoot||Package install-root
|-
|packageRepoURL||Package Repository URL
|-
|packageReleaseTag||Package Release Tag
|-
|packageInstallRank||Package Install Rank
|-
|}

===Setting properties ===
{|
!property!!description
|-
|settingType||Setting type
|-
|settingValue||Setting value
|-
|settingValueEncrypted|| Is setting value encrypted? (true/false)
|-
|}

==Nested Elements==

{{Query Type Reference}}

&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>EntityReference Type Reference</title>
    <id>184</id>
    <revision>
      <id>13471</id>
      <timestamp>2010-11-10T01:41:00Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;entity.&quot; to &quot;resource.&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Types&lt;/categorytree&gt;
=Description=
      &lt;p&gt;
	EntityReferences refer to an object in Workbench.
      &lt;/p&gt;
    
=Attributes=

      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;maprefuri&lt;/td&gt;&lt;td&gt;The maprefUri specifying the object
	  in the map.&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;
    
=Examples=

     &lt;p&gt;
       Get the transform definition by the specified entityreference.
      &lt;/p&gt;
      &lt;pre&gt;
        &amp;lt;transform-get serverUrl=&quot;${viewdoc.server}&quot;
                       depot=&quot;${resource.depot}&quot;
                       resultproperty=&quot;rs&quot;
                       comment=&quot;none&quot;&amp;gt;
          &amp;lt;entityreference maprefuri=&quot;${resource.mapref-uri}&quot;/&amp;gt;
          &amp;lt;document file=&quot;something.conf&quot; dir=&quot;/${resource.depot}/publish&quot; type=&quot;text-plain&quot;/&amp;gt;
        &amp;lt;/transform-get&amp;gt;
      &lt;/pre&gt;

&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Resource model Ant Types]]</text>
    </revision>
  </page>
  <page>
    <title>Entityquery</title>
    <id>1868</id>
    <redirect />
    <revision>
      <id>12459</id>
      <timestamp>2010-04-01T14:41:51Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[EntityQuery Type Reference]]</comment>
      <text xml:space="preserve">#REDIRECT [[EntityQuery_Type_Reference]]</text>
    </revision>
  </page>
  <page>
    <title>ErrorHandler Type Reference</title>
    <id>140</id>
    <revision>
      <id>13513</id>
      <timestamp>2010-11-10T01:45:17Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;depot.&quot; to &quot;project.&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Types&lt;/categorytree&gt;

=Description=
      &lt;p&gt;
	The Errorhandler data type represents the set of actions that
	should be executed if a Workflow command fails. See also [[Type.xml#error-handler]].
      &lt;/p&gt;

=Attributes=

      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;quiet&lt;/td&gt;&lt;td&gt;Specifies if errorhandler should operate quietly. If this is set true, then messages regarding caught  build exceptions will not be logged.
	  &lt;/td&gt;&lt;td&gt;No. Defaults to false.&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;errorproperty&lt;/td&gt;&lt;td&gt;Property name to save error message
	  &lt;/td&gt;&lt;td&gt;No. Defaults to workflow.exception.message.&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;

=Parameters specified as nested elements=

      &lt;p&gt;&lt;strong&gt;command&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
	A [[Command Type Reference|command]] describes
	what command name to run. Only the command&amp;apos;s name is a
	required attribute. The other attributes are ignored.
      &lt;/p&gt;
      &lt;p&gt;The example below shows how to specify to run a command named Recover&lt;/p&gt;
      &lt;code&gt;&amp;lt;command name=&quot;Recover&quot;/&amp;gt; &lt;/code&gt;
      
Note: This tag is essentially a short hand for using the controller task, the specified command assumed to be in the same module

      &lt;p&gt;&lt;strong&gt;arg&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
	An arg tag describes
	the argument string to pass to the invoked command.
      &lt;/p&gt;
      &lt;p&gt;The example below shows how the errorhandler will emulate the following command
      invocation if an error occurs: 
      &lt;code&gt;ctl -m moduleX -c commandA -- -opt1 arg1 -opt2 arg2&lt;/code&gt; &lt;/p&gt;
      &lt;pre&gt;
      &amp;lt;errorhandler&amp;gt; 
        &amp;lt;command name=&quot;commandA&quot; module=&quot;moduleX/&amp;gt; 
        &amp;lt;arg line=&quot;-opt1 arg1 opt2 arg2&quot;/&amp;gt; 
      &amp;lt;/errorhandler&amp;gt; 
      &lt;/pre&gt;
      
      &lt;p&gt;&lt;strong&gt;email&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
	An email element describes
	what command name to run. Only the command&amp;apos;s name is a
	required attribute. The other attributes are ignored.
      &lt;/p&gt;
      &lt;p&gt;The example below shows how to specify to email a message to admin&lt;/p&gt;
      &lt;pre&gt;&amp;lt;email to=&amp;quot;admin@domain.com&amp;quot; from=&amp;quot;user@domain.com&amp;quot;
      subject=&amp;quot;workflow encountered an error&amp;quot;/&amp;gt; &lt;/pre&gt;

     &lt;p&gt;&lt;strong&gt;prompt&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
	A prompt element describes
	that the command should take input from the user before
	proceeding.
	The message&amp;apos;s string is a
	required attribute. 
      &lt;/p&gt;
      &lt;p&gt;The example below shows how to prompt a user with a message&lt;/p&gt;
      &lt;pre&gt;&amp;lt;prompt message=&amp;quot;Continue? &amp;quot;/&amp;gt; &lt;/pre&gt;

    &lt;p&gt;&lt;strong&gt;task&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
	The errorhandler is also a TaskContainer and therefore, any task
	(or sequence) can be called.
      &lt;/p&gt;
      &lt;p&gt;The example below shows how to prompt a user with a message&lt;/p&gt;
      &lt;pre&gt;&amp;lt;echo message=&amp;quot;invoking defibrillator &amp;quot;/&amp;gt; &lt;/pre&gt;

=Examples=
     &lt;p&gt;
       Shows errorhandler data type used in the &lt;link href=&quot;workflow.html&quot;&gt;workflow&lt;/link&gt; element.       &lt;/p&gt;
      &lt;pre&gt;        
    &amp;lt;workflow name=&quot;Restart&quot;&amp;gt;
          &amp;lt;errorhandler&amp;gt;
            &amp;lt;email to=&amp;quot;admin@domain.com&amp;quot; from=&amp;quot;user@domain.com&amp;quot;
	           message=&amp;quot;Restart failed&amp;quot;/&amp;gt;
           &amp;lt;prompt message=&amp;quot;Continue with Recover command?&amp;quot;/&amp;gt;
	   &amp;lt;command name=&quot;Recover&quot;/&amp;gt;
          &amp;lt;/errorhandler&amp;gt;
          &amp;lt;tasksequence&amp;gt;
            &amp;lt;echo&amp;gt;running Stop command&amp;lt;/echo&amp;gt;
            &amp;lt;controller updateproperties=&quot;false&quot;&amp;gt;
              &amp;lt;execute&amp;gt;
                &amp;lt;context depot=&quot;${project.name}&quot;
			 resourceType=&quot;${context.type}&quot;
			 resourceName=&quot;${context.name}&quot;/&amp;gt;
                &amp;lt;command name=&quot;Stop&quot;/&amp;gt;
              &amp;lt;/execute&amp;gt;
            &amp;lt;/controller&amp;gt;
            &amp;lt;echo&amp;gt;running Start command&amp;lt;/echo&amp;gt;
            &amp;lt;controller updateproperties=&quot;false&quot;&amp;gt;
              &amp;lt;execute&amp;gt;
                &amp;lt;context depot=&quot;${project.name}&quot;
			 resourceType=&quot;${context.type}&quot;
			 resourceName=&quot;${context.name}&quot;/&amp;gt;
                &amp;lt;command name=&quot;Start&quot;/&amp;gt;
              &amp;lt;/execute&amp;gt;
            &amp;lt;/controller&amp;gt;
          &amp;lt;/tasksequence&amp;gt;
        &amp;lt;/workflow&amp;gt;
      &lt;/pre&gt;
      &lt;p&gt;This example shows a workflow called Start, that first checks to see if
      the service is already running and if the check fails, to call the startService command.
      &lt;/p&gt;
     &lt;pre&gt;&amp;lt;workflow name=&quot;Start&quot;&amp;gt;
          &amp;lt;errorhandler quiet=&amp;quot;true&amp;quot;&amp;gt;
	   &amp;lt;command name=&quot;startService&quot;/&amp;gt;
          &amp;lt;/errorhandler&amp;gt;
          &amp;lt;tasksequence&amp;gt;
            &amp;lt;echo&amp;gt;running upService command&amp;lt;/echo&amp;gt;
            &amp;lt;controller updateproperties=&quot;false&quot;&amp;gt;
              &amp;lt;execute&amp;gt;
                &amp;lt;context depot=&quot;${project.name}&quot;
			 resourceType=&quot;${context.type}&quot;
			 resourceName=&quot;${context.name}&quot;/&amp;gt;
                &amp;lt;command name=&quot;upService&quot;/&amp;gt;
              &amp;lt;/execute&amp;gt;
            &amp;lt;/controller&amp;gt;
          &amp;lt;/tasksequence&amp;gt;
        &amp;lt;/workflow&amp;gt;
      &lt;/pre&gt;

     &lt;p&gt;This example shows a use of errorhandler in the 
     &lt;link href=&quot;../tasks/apply-macro.html&quot;&gt;apply-macro&lt;/link&gt; task.
      &lt;/p&gt;
     &lt;pre&gt;
     &amp;lt;apply-macro name=&quot;doAction&quot;&amp;gt;
      &amp;lt;errorhandler quiet=&amp;quot;true&amp;quot;&amp;gt;
       &amp;lt;fail/&amp;gt;
      &amp;lt;/errorhandler&amp;gt;
         &amp;lt;queryresults refid=&amp;quot;deployments.query&amp;quot;/&amp;gt;
    &amp;lt;/apply-macro&amp;gt;
      &lt;/pre&gt;
&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Command Dispatcher Ant Types]]</text>
    </revision>
  </page>
  <page>
    <title>Examples</title>
    <id>769</id>
    <revision>
      <id>15683</id>
      <timestamp>2011-11-15T11:29:44Z</timestamp>
      <contributor>
        <username>Rob.percival</username>
        <id>377</id>
      </contributor>
      <minor/>
      <comment>rvv</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Examples&lt;/categorytree&gt;

New to ControlTier? See ''[[ControlTier|What is ControlTer]]''.

The [[Screencasts]] page shows a set of captured examples.

Each example is designed to be self-contained, and uses the source-based development method to organize and store the necesary model definitions and templates. The examples roughly correspond to the structure described in the [[How to use ControlTier]].

If you have problems running one of the examples, try one one of the solutions in [[Troubleshooting the Examples]].

Otherwise, please feel free to [[Community|Contact Us]] via [[IRC Channel|IRC]], or email to the [http://groups.google.com/group/controltier Mailing List].

{{Guide/navbox}}
{{Manual/navbox}}
{{Installation/navbox}}
{{Reference/navbox}}

[[Category:Examples]]</text>
    </revision>
  </page>
  <page>
    <title>ExecuteAction Type Reference</title>
    <id>137</id>
    <revision>
      <id>13614</id>
      <timestamp>2010-11-10T15:00:18Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;deployments.properties&quot; to &quot;resources.properties&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Types&lt;/categorytree&gt;
=Description=

      &lt;p&gt;
	When the ExecuteAction type is specified to the 
	[[Controller Task Reference|controller task]] the described
	command handler is executed within the specified context.
      &lt;/p&gt;
    
=Parameters=

      &lt;table border=&quot;1&quot; class=&quot;wikitable&quot;&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;strategy&lt;/td&gt;&lt;td&gt;The execution
	  strategy specifies which internal dispatcher to use to
	  execute the command. The strategy
	  can be one of the following values: 
	    &lt;table border=&quot;1&quot; class=&quot;wikitable&quot;&gt;
	      &lt;tr&gt;&lt;td&gt;localdispatch&lt;/td&gt;&lt;td&gt;Run the command using using local dispatching. (Default)&lt;/td&gt;&lt;/tr&gt;	     
	      &lt;tr&gt;&lt;td&gt;nodedispatch&lt;/td&gt;&lt;td&gt;Run the command but first lookup
	      the context in the [[resources.properties]] file. If the context
	      matches one on the local host, the command is executed
	      using the &lt;em&gt;localdispatch&lt;/em&gt; strategy. If the context is found
	      to be on another node, then the command is dispatched over ssh.
	      &lt;/td&gt;&lt;/tr&gt;
	      &lt;tr&gt;&lt;td&gt;localfetch&lt;/td&gt;&lt;td&gt;Run the command `using localdispatch
	      strategy but also return the specified properties from
	      the invoked command.&lt;/td&gt;&lt;/tr&gt;
	    &lt;/table&gt;
	  &lt;/td&gt;&lt;td&gt;No. Defaults to &amp;quot;localdispatch&amp;quot;.&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;failonerror&lt;/td&gt;&lt;td&gt;Set false to not cause the command
	  to fail if there is an error.
	  &lt;/td&gt;&lt;td&gt;No.&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;return&lt;/td&gt;&lt;td&gt;Property to set with
	  return values&lt;/td&gt;&lt;td&gt;No. Useful only with localfetch strategy.&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;

=Parameters specified as nested elements=

      &lt;p&gt;&lt;strong&gt;command&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
	A [[Command_Type_Reference|command]] describes
	what command name to run. Only the command&amp;apos;s name is a
	required attribute. The other attributes are ignored by ExecuteAction.
      &lt;/p&gt;
      &lt;p&gt;The example below shows how to specify to run a command named Status&lt;/p&gt;
      &lt;code&gt;&amp;lt;command name=&quot;Status&quot;/&amp;gt; &lt;/code&gt;

     &lt;p&gt;&lt;strong&gt;arg&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
	Passes command option string to the command being invoked.
      &lt;/p&gt;
      &lt;p&gt;
	Example
      &lt;/p&gt;
      &lt;code&gt;&amp;lt;arg line=&quot;-foo fooarg&quot; /&amp;gt; &lt;/code&gt;

      &lt;p&gt;&lt;strong&gt;context&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
	A [[Context_Type_Reference|context]] describes in
	what context the command handler should run. There are three
	primary components of the context relevant to executed
	actions: depot, resourceType and resourceName. The depot
	attribute describes which project to find the object or type
	in. The resourceType attribute describes what type (and
	indirectly which module) to run in. The resourceType attribute
	specifies a particular object&amp;apos;s environment to run in. 
      &lt;/p&gt;
      &lt;p&gt;The example below shows how to specify a fully qualified
      object context. &lt;/p&gt;
      &lt;code&gt;&amp;lt;context depot=&quot;ContentApp&quot; resourceType=&quot;Apache&quot; resourceName=&quot;apache&quot;/&amp;gt; &lt;/code&gt;
      
      &lt;p&gt;
	If it is desirable to invoke a command handler but not
	execute the handler within the context of a specific object, a type-level
	context can be specified. The example below suggests there is
	a type named Utility used to run various
	administrative procedures. Note the resourceName attribute is omitted.
      &lt;/p&gt;
      &lt;code&gt;&amp;lt;context depot=&quot;ContentApp&quot; resourceType=&quot;Utility&quot;/&amp;gt; &lt;/code&gt;

     &lt;p&gt;&lt;strong&gt;nodeset&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;Applicable if &lt;code&gt;nodedispatch&lt;/code&gt; execution strategy has been specified.
      See [[NodeSet Type Reference|NodeSet]] page for information about its usage.
      &lt;/p&gt;

      &lt;p&gt;&lt;strong&gt;property&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
	Additional properties can be passed into the context of the
	called command by using the property element. 
      &lt;/p&gt;
      &lt;p&gt;
	The example below
	shows how one would define the property named foo with the
	value bar. 
      &lt;/p&gt;
      &lt;code&gt;&amp;lt;property name=&quot;foo&quot; value=&quot;bar&quot;/&amp;gt; &lt;/code&gt;

      &lt;p&gt;&lt;strong&gt;workflow&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
	A [[Workflow Type Reference|workflow]] describes a
	task sequence.
      &lt;/p&gt;

=Examples=
      &lt;p&gt;
	Given the choice of ExecuteAction strategies and related
	attributes, there are a variety of methods to execute a
	command. Several examples are shown below:
      &lt;/p&gt;
      &lt;p&gt;Example: localdispatch&lt;/p&gt;
      &lt;p&gt;Call the netutil listening command for the specifed port
      using localdispatch.&lt;/p&gt;
 &lt;pre&gt;
    &amp;lt;controller&amp;gt;
      &amp;lt;execute strategy=&quot;localdispatch&quot;&amp;gt;
        &amp;lt;context depot=&quot;${context.depot}&quot;/&amp;gt;
        &amp;lt;command name=&quot;listening&quot; module=&quot;netutil&quot;/&amp;gt;
        &amp;lt;arg line=&quot;-port 80&quot;/&amp;gt;
      &amp;lt;/execute&amp;gt;
    &amp;lt;/controller&amp;gt;
&lt;/pre&gt;
     &lt;p&gt;Note, &lt;code&gt;localdispatch&lt;/code&gt; is the default execution
     strategy so you don't have to explicitly set it.
     &lt;/p&gt;
      &lt;p&gt;Example: nodedispatch&lt;/p&gt;

      &lt;p&gt;Invoke the netutil listening command across all hosts
      that start with the name &quot;web&quot; via nodedispatch strategy.
      &lt;/p&gt;
 &lt;pre&gt;
    &amp;lt;controller&amp;gt;
      &amp;lt;execute strategy=&quot;nodedispatch&quot;&amp;gt;
        &amp;lt;context depot=&quot;${context.depot}&quot;/&amp;gt;
        &amp;lt;command name=&quot;listening&quot; module=&quot;netutil&quot;/&amp;gt;
        &amp;lt;arg line=&quot;-port 80&quot;/&amp;gt;
        &amp;lt;nodeset&amp;gt;
          &amp;lt;include name=&quot;web.*&quot;/&amp;gt;
        &amp;lt;/nodeset&amp;gt;
      &amp;lt;/execute&amp;gt;
    &amp;lt;/controller&amp;gt;
&lt;/pre&gt;
      &lt;p&gt;Example: localfetch&lt;/p&gt;


      &lt;p&gt;Call the Apache Status command using the localfetch strategy and
      return the result passed back as the &amp;quot;isUp&amp;quot; property.
      &lt;/p&gt;
 &lt;pre&gt;
    &amp;lt;controller&amp;gt;
      &amp;lt;execute strategy=&quot;localfetch&quot; return=&quot;isUp&quot;&amp;gt;
        &amp;lt;context depot=&quot;ContentApp&quot;
                 resourceType=&quot;Apache&quot;
                 resourceName=&quot;apache&quot;/&amp;gt;
        &amp;lt;command name=&quot;Status&quot;/&amp;gt;
      &amp;lt;/execute&amp;gt;
    &amp;lt;/controller&amp;gt;
    &amp;lt;echo message=&quot;apache up?: ${isUp}&quot;/&amp;gt;
&lt;/pre&gt;
    &lt;p&gt;Assumes the Status command sets a property named &quot;isUp&lt;/p&gt;


      &lt;p&gt;Example: in line properties&lt;/p&gt;


      &lt;p&gt;Pass property definitions in line to the called command:
      &lt;/p&gt;
 &lt;pre&gt;
    &amp;lt;controller&amp;gt;
      &amp;lt;execute&amp;gt;
        &amp;lt;context depot=&quot;ContentApp&quot;
                 resourceType=&quot;Apache&quot;
                 resourceName=&quot;isListening&quot;/&amp;gt;
        &amp;lt;command name=&quot;Status&quot;/&amp;gt;
        &amp;lt;property name=&quot;opts.port&quot; value=&quot;81&quot;/&amp;gt;
        &amp;lt;property name=&quot;opts.server&quot; value=&quot;web1.local&quot;/&amp;gt;
      &amp;lt;/execute&amp;gt;
    &amp;lt;/controller&amp;gt;
&lt;/pre&gt;
    &lt;p&gt;Assumes the Status command sets a property named &quot;isUp&lt;/p&gt;
&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Command Dispatcher Ant Types]]</text>
    </revision>
  </page>
  <page>
    <title>ExportPar Task Reference</title>
    <id>1847</id>
    <revision>
      <id>12274</id>
      <timestamp>2009-12-31T18:37:19Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Tasks&lt;/categorytree&gt;

      &lt;p&gt;
	Exports the project to a &quot;project archive&quot; (PAR).
      &lt;/p&gt;
    
==Parameters==
      &lt;table class=&quot;wikitable&quot;&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;depot&lt;/td&gt;&lt;td&gt;The project to update&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;resultproperty&lt;/td&gt;&lt;td&gt;Property to set with
	  success/fail value&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;comment&lt;/td&gt;&lt;td&gt;Text describing purpose of export&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;passfile&lt;/td&gt;&lt;td&gt;File containing authentication info to
	  server. If passfile is not specified, information from the
	    [[framework.properties]]
	  file is used instead.&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;
&lt;tr&gt;
	  &lt;td&gt;outputFile&lt;/td&gt;&lt;td&gt;File path to write archive&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;

      &lt;/table&gt;
    
==Examples==
      &lt;p&gt;
	Export project demo
      &lt;/p&gt;
      &lt;syntaxhighlight&gt;
&lt;taskdef name=&quot;export-par&quot; classname=&quot;com.controltier.commander.tasks.utils.ExportPar&quot;/&gt;

&lt;export-par  
         depot=&quot;demo&quot; 
         outputFile=&quot;${user.dir}/demo.par&quot;
         resultproperty=&quot;result&quot;
         comment=&quot;export demo to a PAR&quot;/&gt;
      &lt;/syntaxhighlight&gt;

&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Resource model Ant Tasks]]
[[Category:Projects]]</text>
    </revision>
  </page>
  <page>
    <title>ControlTier:About</title>
    <id>1830</id>
    <redirect />
    <revision>
      <id>11969</id>
      <timestamp>2009-12-18T23:52:36Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <comment>moved [[ControlTier:About]] to [[About]] over redirect: Move back... need some other systematic way to deal with this</comment>
      <text xml:space="preserve">#REDIRECT [[About]]</text>
    </revision>
  </page>
  <page>
    <title>Extension</title>
    <id>1841</id>
    <revision>
      <id>14143</id>
      <timestamp>2010-11-10T15:59:07Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;ctl-depot&quot; to &quot;ctl-project&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Artifacts&lt;/categorytree&gt;

This document describes the format and internals of a CTL extension.    

Since CTL 1.0

==Packaging==
While it is possible to create an extension archive by
hand using the reference information found here, the preferred
approach is to use the &lt;code&gt;build-library&lt;/code&gt; command in
[[ProjectBuilder]].

See [[Create an extension library]] for instructions on extension packaging.

==Archive organization==
Extension archives use JAR format with an archive structure and manifest. The
archive is divided into roughly four areas of content

* bins: contains shell commands that will be copied to $CTL_HOME/bin. These should be commands useful to the whole framework. If the extension will be used on Windows platforms be sure to include &lt;code&gt;.bat&lt;/code&gt; wrappers.
* jars: contains Ant typedefs/taskdefs and any other jar file dependencies needed by your Ant code. Be sure to set the taskdef and typedef properties in the antproject.properties file mentioned below.
* modules: contains CTL command modules that should be made available to all new projects. The ctl-extension command copies these to $CTL_HOME/modules. New projects created via &lt;code&gt;ctl-project&lt;/code&gt; copy from this directory.
* properties: Contains several property files to describe setup and extension configuration.

===Jar structure===

&lt;pre&gt;
''extension-name''
  |
  +-bins             // shell commands
  |
  +-jars             // java class libraries 
  |  |
  |  +-''extension-name''.jar
  +-modules          // ctl command modules
  |  |
  |  +-m1.jar        
  +-META-INF         // extension metadata
  |  |
  |  +-MANIFEST.MF
  +-properties       // extension config properties
     |
     +-extension.properties
     +-extension.properties.template // optional
     |
     +-defaults.properties // preference input
     |
     +-antproject.properties  // contains task and type defs
&lt;/pre&gt;

===Manifest Content===
The [[ctl-extension]] command reads the MANIFEST.MF file inside the extension archive
to access metadata about the extension. If a MANIFEST.MF file is not found
or does not use the recognized format, the &lt;code&gt;ctl-extension&lt;/code&gt; will fail with an error.
Below is the format:

&lt;pre&gt;
Manifest-Version: 1.0
X-ANTDEPO-Extension-Author: ''user''
X-ANTDEPO-Extension-Name: ''name''
X-ANTDEPO-Extension-Version: ''vers''
X-ANTDEPO-Includes-Modules: ''boolean''
X-ANTDEPO-Includes-Jars: ''boolean''
X-ANTDEPO-Includes-Bins: ''boolean''
X-ANTDEPO-Archive-Date: ''yyyy-MM-dd G, H:m:s z''
X-ANTDEPO-Archive-Version: 1.0
&lt;/pre&gt;

Several attribtues (e.g., X-ANTDEPO-Includes-.*) use boolean values
to denote if the ctl-extension command should process that part of the extension.
If set true, ctl-extension will copy the content to the appropriate area in the framework,
otherwise these directories are ignored.

==CTL class loader==
To support loading of Ant types and tasks from extensions, CTL uses its
own class loader that looks for installed extensions and reads a file
called &lt;code&gt;antproject.properties&lt;/code&gt;.

The antproject.properties can contain two properties: taskdefs and typedefs.
The format of each properties file is based on the Ant
[http://ant.apache.org/manual/CoreTasks/typedef.html typedef] format.
An example of an antproject.properties file is shown below:

&lt;pre&gt;
taskdefs = /resource/path/to/taskdef.properties
typedefs = /resource/path/to/typedef.properties 
&lt;/pre&gt;

==Examples==
This section describes two examples of an extension archive.

The first example, is for an extension called &lt;em&gt;console&lt;/em&gt;.
It includes one executable &lt;code&gt;console&lt;/code&gt; that will be copied
to the $CTL_HOME/bin directory. Inside &lt;code&gt;jars/&lt;/code&gt; is a
jar file containing the underlying implementation. The &lt;code&gt;extension.properties&lt;/code&gt;
file includes console specific configuration data.

&lt;pre&gt;
console
  |
  +-bins
  |  |
  +  +-console
  +-jars             // java class libraries 
  |  |
  |  +-console.jar
  |  
  +-META-INF         // extension metadata
  |  |
  |  +-MANIFEST.MF
  +-properties       // extension config properties
     |
     +-extension.properties
&lt;/pre&gt;

The second example shows an extension called &lt;em&gt;commander&lt;/em&gt; providing 
a number of ant tasks and CTL modules.

&lt;pre&gt;
commander
  |
  +-jars             // java classes implementing various tasks and types 
  |  |
  |  +-commander.jar
  +-modules          // ctl command modules
  |  |
  |  +-Deployment.jar        
  |  +-Node.jar        
  +-META-INF         // extension metadata
  |  |
  |  +-MANIFEST.MF
  +-properties       // extension config properties
     |
     +-extension.properties // commander specific configuration properties
     +-antproject.properties // registers types and tasks
&lt;/pre&gt;

The content of the commander antproject.properties contains the following:

&lt;pre&gt;
taskdefs = /com/controltier/commander/tasks/taskdef.properties
typedefs = /com/controltier/commander/types/typedef.properties
&lt;/pre&gt;

The ctl-extension command extracts the commander.jar under &lt;code&gt;$CTL_HOME/lib/extensions&lt;/code&gt;
like so:

&lt;pre&gt;
ctl-home
  |
  +-bin                
  |
  +-classes            
  | 
  +-projects             
  |  
  +-lib 
  |  |
  |  +-extensions
  |     |
  |     +-commander
  |     |  |
  |     |  +-bins
  |     |  +-jars 
  |     |  +-modules        
  |     |  +-META-INF
  |     |  +-properties 
  |     +-console
  |  
  +-pkgs               
&lt;/pre&gt;

{{Manual/navbox|state=uncollapsed}}
{{Reference/navbox}}
[[Category:ProjectBuilder]]
[[Category:Extensions]]</text>
    </revision>
  </page>
  <page>
    <title>External Start script</title>
    <id>66</id>
    <revision>
      <id>14144</id>
      <timestamp>2010-11-10T15:59:07Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;ctl-depot&quot; to &quot;ctl-project&quot;</comment>
      <text xml:space="preserve">&lt;noinclude&gt;&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Service&lt;/categorytree&gt;&lt;/noinclude&gt;
The [[Service]] type provides three commands to manage Service start up:

* Start: A workflow that checks if a service is up and if not invokes &lt;code&gt;startService&lt;/code&gt;
* assertServiceIsUp: check if the service is running and fail if it is down
* startService: runs the start up procedure

The second two commands are &quot;hook&quot; commands and can be configured to run external scripts. 

==Exit codes==
{{Scripting/exit code}}

==Setup==

You can bind scripts to these Service commands via Settings. Service defines two types of Settings for the purpose at hand:

* ServiceIsUpScript: Used by assertServiceIsUp, names path to external &quot;is up&quot; script
* ServiceStartScript: Used by startService, names path to external &quot;start up&quot; script

Here's a trivial implementation that checks if the process is running by checking its listening port. You can see that it does a Unix command pipeline checking for the port 18080 in listening mode. If the grep command matches &quot;LISTEN&quot; then the service is assumed running so exit 1 is returned. The assertServiceIsUp command calls this script:

File listing: /home/demo/bin/tomcat-isup.sh
&lt;pre&gt;
#!/bin/sh
netstat -an | grep 18080 | grep -q LISTEN &amp;&amp; { echo UP ; exit 0 ; } || { echo DOWN; exit 1 ; }
&lt;/pre&gt;

The startService command will invoke the service's startup procedure. Here's a trivial implementation that would startup tomcat for this example:

File listing: /home/demo/bin/tomcat-startup.sh
&lt;pre&gt;
#!/bin/bash
export CATALINA_HOME=/home/demo/apache-tomcat-5.5.26
$CATALINA_HOME/bin/startup.sh
&lt;/pre&gt;

The XML file below describes a Service named &quot;tomcat1&quot; and two scripts (hypothetically) residing in /home/demo/bin.

File listing: tomcat1.xml

&lt;pre&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE project PUBLIC &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; 
    &quot;project.dtd&quot;&gt;
&lt;project&gt;
  &lt;!--
      **
      ** Defines Settings describing the scripts
      **
  --&gt;
  &lt;setting type=&quot;ServiceIsUpScript&quot; name=&quot;tomcat1&quot; 
           description=&quot;The script used by assertServicesIsUp&quot; 
           settingValue=&quot;/home/demo/bin/tomcat-isup.sh&quot; settingType=&quot;script&quot;/&gt;
  &lt;setting type=&quot;ServiceStartScript&quot; name=&quot;tomcat1&quot; 
           description=&quot;The script used by startService&quot; 
           settingValue=&quot;/home/demo/bin/tomcat-start.sh&quot; settingType=&quot;script&quot;/&gt;
  &lt;!--
      **
      ** Defines the Service metadata
      **
  --&gt;
  &lt;deployment 
      type=&quot;Service&quot;
      name=&quot;tomcat1&quot; 
      description=&quot;The Tomcat deployment.&quot; 
      installRoot=&quot;/home/demo/apache-tomcat-5.5.26&quot; 
      basedir=&quot;/home/demo/apache-tomcat-5.5.26&quot;&gt;

      &lt;!-- 
        **
        ** References the external scripts 
        **
        --&gt;
     &lt;resources&gt;
      &lt;resource name=&quot;tomcat1&quot; type=&quot;ServiceStartScript&quot; /&gt;
      &lt;resource name=&quot;tomcat1&quot; type=&quot;ServiceIsUpScript&quot; /&gt;
     &lt;/resources&gt;
     &lt;!-- 
        **
        ** References the host where this Tomcat resides 
        **
        --&gt;
     &lt;referrers&gt;
      &lt;resource name=&quot;localhost&quot; type=&quot;Node&quot; /&gt;
     &lt;/referrers&gt;
  &lt;/deployment&gt;

&lt;/project&gt;
&lt;/pre&gt;

To load this XML data use the load-resources command:
&lt;pre&gt;
ctl -m ProjectBuilder -c load-resources -- -filename tomcat1.xml
&lt;/pre&gt;

After the Service resource is defined, install it as a CTL resource using ctl-project.
&lt;pre&gt;
ctl-project -p demo -a install --name tomcat1
&lt;/pre&gt;


Note:
* Be sure these external scripts reside in their specified location
* Ensure they are executable scripts

==Command usage==
With the Service resource bound to Settings referring to these external scripts, you are ready to run the hook commands.

See if the service is up:

&lt;pre&gt;
ctl -p demo -t Service -r tomcat1 -c assertServiceIsUp
&lt;/pre&gt;

Run the &lt;code&gt;startService&lt;/code&gt; command:

&lt;pre&gt;
ctl -p demo -t Service -r tomcat1 -c startService
&lt;/pre&gt;

Run the Start workflow command:

&lt;pre&gt;
ctl -p demo -t Service -r tomcat1 -c Start
&lt;/pre&gt;

==See also==
* [[External Stop script]]
* [[External Status script]]
* [[Mock Unix Service Example]] &amp;mdash; Provides detail discussion about the Start and Stop workflows.

{{Manual/navbox}}

[[Category:Service Examples]]</text>
    </revision>
  </page>
  <page>
    <title>External Status script</title>
    <id>65</id>
    <revision>
      <id>14145</id>
      <timestamp>2010-11-10T15:59:08Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;ctl-depot&quot; to &quot;ctl-project&quot;</comment>
      <text xml:space="preserve">&lt;noinclude&gt;&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Service&lt;/categorytree&gt;&lt;/noinclude&gt;
The [[Service]] type provides two commands to check status:

* assertServiceIsUp: check if the service is running and fail if not
* assertServiceIsDown: check if the service is down and fail if it is running

Each of these commands are &quot;hook&quot; commands and can be configured to run external scripts.

==Exit codes==
{{Scripting/exit code}}

==Setup==

You can bind scripts to these Service commands via Settings. Service defines two types of Settings for the purpose at hand:

* ServiceIsUpScript: Used by assertServiceIsUp, names path to external &quot;is up&quot; script
* ServiceIsDownScript: Used by assertServiceIsDown, names path to external &quot;is down&quot; script

The XML file below describes a Service named &quot;tomcat1&quot; and two status scripts (hypothetically) residing in /home/demo/bin.

File listing: tomcat1.xml

&lt;pre&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE project PUBLIC &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; 
    &quot;project.dtd&quot;&gt;
&lt;project&gt;
  &lt;!--
      **
      ** Defines Settings describing the scripts
      **
  --&gt;
  &lt;setting type=&quot;ServiceIsUpScript&quot; name=&quot;tomcat1&quot; 
           description=&quot;The script used by assertServicesIsUp&quot; 
           settingValue=&quot;/home/demo/bin/tomcat-isup.sh&quot; settingType=&quot;script&quot;/&gt;
  &lt;setting type=&quot;ServiceIsDownScript&quot; name=&quot;tomcat1&quot; 
           description=&quot;The script used by assertServicesIsDown&quot; 
           settingValue=&quot;/home/demo/bin/tomcat-isdown.sh&quot; settingType=&quot;script&quot;/&gt;
  &lt;!--
      **
      ** Defines the Service metadata
      **
  --&gt;
  &lt;deployment 
      type=&quot;Service&quot;
      name=&quot;tomcat1&quot; 
      description=&quot;The Tomcat deployment.&quot; 
      installRoot=&quot;/home/demo/apache-tomcat-5.5.26&quot; 
      basedir=&quot;/home/demo/apache-tomcat-5.5.26&quot;&gt;

      &lt;!-- 
        **
        ** References the status scripts 
        **
        --&gt;
     &lt;resources&gt;
      &lt;resource name=&quot;tomcat1&quot; type=&quot;ServiceIsDownScript&quot; /&gt;
      &lt;resource name=&quot;tomcat1&quot; type=&quot;ServiceIsUpScript&quot; /&gt;
     &lt;/resources&gt;
     &lt;!-- 
        **
        ** References the host where this Tomcat resides 
        **
        --&gt;
     &lt;referrers&gt;
      &lt;resource name=&quot;localhost&quot; type=&quot;Node&quot; /&gt;
     &lt;/referrers&gt;
  &lt;/deployment&gt;

&lt;/project&gt;
&lt;/pre&gt;

To load this XML data use the load-resources command:
&lt;pre&gt;
ctl -m ProjectBuilder -c load-resources -- -filename tomcat1.xml
&lt;/pre&gt;

After the Service resource is defined, install it as a CTL resource using ctl-project.
&lt;pre&gt;
ctl-project -p demo -a install 
&lt;/pre&gt;


Note:
* Be sure these external scripts reside in their specified location
* Ensure they are executable scripts

==Command usage==
With the Service resource bound to Settings referring to these external scripts, you are ready to run the hook commands.

See if the service is up:

&lt;pre&gt;
ctl -p demo -t Service -r tomcat1 -c assertServiceIsUp
&lt;/pre&gt;

See if the service is down:

&lt;pre&gt;
ctl -p demo -t Service -r tomcat1 -c assertServiceIsDown
&lt;/pre&gt;


==See also==

* [[External Start script]]
* [[External Stop script]]
* [[Mock Unix Service Example]] &amp;mdash; Provides detail discussion about the Start and Stop workflows.

{{Manual/navbox}}

[[Category:Service Examples]]</text>
    </revision>
  </page>
  <page>
    <title>External Stop script</title>
    <id>67</id>
    <revision>
      <id>14146</id>
      <timestamp>2010-11-10T15:59:18Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;ctl-depot&quot; to &quot;ctl-project&quot;</comment>
      <text xml:space="preserve">&lt;noinclude&gt;&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Service&lt;/categorytree&gt;&lt;/noinclude&gt;
The [[Service]] type provides three commands to manage the shut down of a long running process:

* Stop: A workflow that checks if a service is down and if not invokes stopService
* assertServiceIsDown: check if the service is down and fail if it is up
* stopService: runs the shut down procedure

The second two commands are &quot;hook&quot; commands and can be configured to run external scripts. 

==Exit codes==

{{scripting/exit code}}

==Setup==

You can bind scripts to these Service commands via Settings. Service defines two types of Settings for the purpose at hand:

* ServiceIsDownScript: Used by assertServiceIsDown, names path to external &quot;is down&quot; script
* ServiceStopScript: Used by stopService, names path to external &quot;shut down&quot; script

Here's a trivial implementation that checks if the process is running by checking its listening port. You can see that it does  a Unix command pipeline checking for the port 18080 in listening mode. If the grep command matches &quot;LISTEN&quot; then the service is assumed running so &lt;code&gt;exit 1&lt;/code&gt; is returned. The assertServiceIsDown command calls this script:

File listing: /home/demo/bin/tomcat-isdown.sh
&lt;pre&gt;
#!/bin/sh
netstat -an | grep 18080 | grep -q LISTEN &amp;&amp; { echo UP ; exit 1 ; } || { echo DOWN; exit 0 ; }
&lt;/pre&gt;

The stopService command will invoke the service's shutdown procedure. Here's a trivial implementation that would shutdown tomcat for this example:

File listing: /home/demo/bin/tomcat-shutdown.sh
&lt;pre&gt;
#!/bin/bash
export CATALINA_HOME=/home/demo/apache-tomcat-5.5.26
$CATALINA_HOME/bin/shutdown.sh
&lt;/pre&gt;

The XML file below describes a Service named &quot;tomcat1&quot; and two settings referencing the scripts (hypothetically) residing in /home/demo/bin.

File listing: tomcat1.xml
&lt;pre&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE project PUBLIC &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; 
    &quot;project.dtd&quot;&gt;
&lt;project&gt;
  &lt;!--
      **
      ** Defines Settings describing the scripts
      **
  --&gt;
  &lt;setting type=&quot;ServiceIsDownScript&quot; name=&quot;tomcat1&quot; 
           description=&quot;The script used by assertServiceIsDown&quot; 
           settingValue=&quot;/home/demo/bin/tomcat-isdown.sh&quot; settingType=&quot;script&quot;/&gt;
  &lt;setting type=&quot;ServiceStopScript&quot; name=&quot;tomcat1&quot; 
           description=&quot;The script used by stopService&quot; 
           settingValue=&quot;/home/demo/bin/tomcat-shutdown.sh&quot; settingType=&quot;script&quot;/&gt;
  &lt;!--
      **
      ** Defines the Service metadata
      **
  --&gt;
  &lt;deployment 
      type=&quot;Service&quot;
      name=&quot;tomcat1&quot; 
      description=&quot;The Tomcat deployment.&quot; 
      installRoot=&quot;/home/demo/apache-tomcat-5.5.26&quot; 
      basedir=&quot;/home/demo/apache-tomcat-5.5.26&quot;&gt;

      &lt;!-- 
        **
        ** References the external scripts 
        **
        --&gt;
     &lt;resources&gt;
      &lt;resource name=&quot;tomcat1&quot; type=&quot;ServiceStartScript&quot; /&gt;
      &lt;resource name=&quot;tomcat1&quot; type=&quot;ServiceIsUpScript&quot; /&gt;
     &lt;/resources&gt;
     &lt;!-- 
        **
        ** References the host where this Tomcat resides 
        **
        --&gt;
     &lt;referrers&gt;
      &lt;resource name=&quot;localhost&quot; type=&quot;Node&quot; /&gt;
     &lt;/referrers&gt;
  &lt;/deployment&gt;

&lt;/project&gt;
&lt;/pre&gt;

To load this XML data use the load-resources command:
&lt;pre&gt;
ctl -m ProjectBuilder -c load-resources -- -filename tomcat1.xml
&lt;/pre&gt;

After the Service resource is defined, install it as a CTL resource using ctl-project.
&lt;pre&gt;
ctl-project -p demo -a install --name tomcat1
&lt;/pre&gt;


Note:
* Be sure these external scripts reside in their specified location
* Ensure they are executable scripts

==Command usage==
With the Service resource bound to Settings referring to these external scripts, you are ready to run the hook commands.

See if the service is down:

&lt;pre&gt;
ctl -p demo -t Service -r tomcat1 -c assertServiceIsDown
&lt;/pre&gt;


Run the stopService command:

&lt;pre&gt;
ctl -p demo -t Service -r tomcat1 -c stopService
&lt;/pre&gt;

Run the Stop workflow command:

&lt;pre&gt;
ctl -p demo -t Service -r tomcat1 -c Stop
&lt;/pre&gt;

==See also==
* [[External Status script]]
* [[External Start script]]
* [[Mock Unix Service Example]] &amp;mdash; Provides detail discussion about the Start and Stop workflows.

{{Manual/navbox}}
[[Category:Service Examples]]</text>
    </revision>
  </page>
  <page>
    <title>External status script</title>
    <id>290</id>
    <redirect />
    <revision>
      <id>1301</id>
      <timestamp>2008-12-31T21:26:28Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>[[External status script]] moved to [[External Status script]]</comment>
      <text xml:space="preserve">#REDIRECT [[External Status script]]</text>
    </revision>
  </page>
  <page>
    <title>FAQ</title>
    <id>34</id>
    <revision>
      <id>16785</id>
      <timestamp>2012-07-09T19:16:58Z</timestamp>
      <contributor>
        <username>Seren</username>
        <id>2115</id>
      </contributor>
      <minor/>
      <comment>Revert back to Bogdan.iosif good version due to spam</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Help&lt;/categorytree&gt;

=General=

==What is ControlTier?==

ControlTier is a software system used to orchestrate service management activities across multiple nodes and application tiers (code, data, configuration, and content). The project is fully open source and many of the project contributions come from [http://dtosolutions.com DTO Solutions'] ongoing consulting work for large scale e-commerce, software-as-a-service, and financial services operations. Project development as ControlTier began in 2003.

== Licensing and Pricing==

ControlTier software is free and completely open source. See the [[License Information]] here. There are no hidden &quot;gotchas&quot; or some other &quot;enterprise&quot; version that you must pay for, '''everything we do is free open source software'''. [[Download]] it. Try it. Use it. If you find value in it and would like to actively participate in the project, introduce yourself on the [http://groups.google.com/group/controltier mailing list].

==Where do I download ControlTier builds?==

Information for getting binaries and source code is available in the [[download]] documentation.

==What can I do with ControlTier?==

Think about all of the activity that has to happen to get from source code to a running business service in your production environment. ControlTier is the automation framework, tools, and best practices to make that happen as reliably and efficiently as possible.

Common ControlTier uses include:

* Coordinated deployment of code, data, content, and configuration into any  multi-node development, QA, or production environment. Targets can include physical nodes, virtual machines, or cloud infrastructure.


* Deployment and configuration of application infrastructure such as app servers, databases, web servers, and middleware. This includes configuring them to be aware of each other and be ready to function as an integrated application service.

 
* Coordinated and intelligent  starting and stopping of specific application tiers or of an entire business service.


* Building self-service control panels (using the JobCenter tool) that enable the safe delegation of deployment and service management tasks to  other teams (based on permissions). This is useful for extending control of Development, QA, and Production environments to lesser skilled staff and freeing up your senior resources from the daily operations grind.


* Rolling back an application service to a previously known state with a few simple commands. If trouble strikes, this gets you back as quickly as possible to where you know your service will function properly.


* Coordinating the various build processes that assemble your build artifacts. This is an optional step that gives you a prebuilt way for your build or continuous integration tools to register application packages and other deployment artifacts with the ControlTier system. If you are following a continuous integration methodology, you can make ControlTier part of your CI loop and have fully automated deployments to smoke test environments (with push button promotion of those builds to other QA or Production environments). 


* Automatically maintaining a system of record for applications deployed within your various environments. Your team will have a centralized place to go for information on what versions of what artifacts are deployed where, how they are configured, and what deployment or service management actions got them into that state. This is a critical resource for both avoiding mistakes and recovering from outages. 


* Centralized logging and reporting. For either management, troubleshooting, or auditing reasons, know exactly who did what and when they did it.


For more specific examples of what you can do with ControlTier, see the [[Examples]]

==What does ControlTier do out of the box?==

At its core, ControlTier is a framework that gives you a leg up in designing and implementing your own service management automation (not unlike how an application framework gives you a head start in building applications). But ControlTier is also more than just a framework, ControlTier also provides you with extensive built-in best practices and pre-built automation modules (contained within the ControlTier automation library). If you are using common technologies and want to follow common service management processes, a lot of the work is already done for you.

ControlTier framework:
* Command dispatching with built in features like node abstraction, logical naming, and parallelization (dispatches ad-hoc or pre-defined commands)
* Security
* Logging of distributed actions (uses log4j)
* Management and organization of configuration data and environment details
* Object oriented design makes it easy to maintain and extend your automation
* Command line interface with interactive capabilities 

Pre-built automation:
* Pre-built automation for managing the lifecycle of specific technologies
* Pre-built process automation that has best practices for common deployment and service management procedures
* Object oriented design so you can inherit or override/extend only where you need to 

ControlTier tools:
* JobCenter provides web-based command execution, job scheduling via the built in scheduler, and allow a group to follow the progress of complex automation as it executes. 
* Workbench provides a deployment repository for staging both deployment artifacts and automation modules as well as a web-based design tool for defining and reviewing automation commands and configuration data. All data in Workbench is versioned.
* Report Center is a web-based reporting tool for viewing or querying activity that tool place within the ControlTier system.


To see examples of how you combine these components into actual service management solutions, check out the current [[Solution Matrix]]

==How does ControlTier compare to Tivoli, Clearcase, SVN, Puppet, Remedy, Nagios, etc?==

Because ControlTier is a service management solution that has broad applicability, the most common introductory questions are always around how does it compares to other well-known development and operations management tools.

The best way to do this is to point out what ControlTier is not:

* ControlTier is not a version control system. It is not meant to replace your favorite SCM tool (e.g., CVS, SVN, P4, etc.). ControlTier versions model data and helps you maintain a repository of versioned release artifacts but ControlTier is not a place where you would want to maintain your source code. You can also use a file-based approach to managing your ControlTier data and store those files in your organization's SCM tool alongside your application code.
* ControlTier is not a bare metal provisioning tool (e.g., Kickstart, Jumpstart, etc.). Bare metal provisioning tools typically support net booting, manage OS profiles and are good for &quot;stamping&quot; out server operating system configurations. ControlTier can be used to manage the configuration or kick off the execution of a bare metal provisioning tool but is not meant to take its place. After a provisioning tools has installed a base OS it might also install the ControlTier agent so the new machine can receive release changes.
* ControlTier is not an approval or business process workflow tool (e.g., rt, kintana, remedy, bugzilla, etc.). ControlTier is not meant to replace an approval-based change control system that manages people's actions and business processes they work within. The role of these &quot;people management&quot; tools are still central to coordinating the release activity. ControlTier would come into play to actually execute the change once an approval decision has been made in these other tools. 
* ControlTier is not made to replace software build tools. (e.g., ant, maven, cruisecontrol, buildforge, etc.). ControlTier is often used to interface build tools so that they can be coordinated by ControlTier to drive an end-to-end build and deployment process. It is also very common to integrate ControlTier with a continuous integration tool like CruiseControl so ControlTier based deployment can be a part of the CI loop.
* ControlTier is not an enterprise management system (e.g., Tivoli, HP OpenView, Opsware, BMC, etc.). These tools are large frameworks for managing many aspects operations groups are concerned with including monitoring, user administration, event correlation, patching, hardware diagnostics, software distribution, etc. ControlTier does overlap with an EMS when it comes to service deployment and management. Our experience has shown the best way to coordinate the two systems is to use an EMS to manage the system infrastructure and distribute base software infrastructure that change more or less independently from the normal release activity in the application tier. Where the exact boundary is drawn depends entirely on your organization. It's also good to point out that ControlTier is entirely open source and very flexible in its integration points, which is rarely the case with an EMS.
* ControlTier is not Puppet, nor does it conflict with Puppet. In fact, many ControlTier users also use Puppet. Puppet is an excellent system configuration management tool that configures a server instance according to a defined profile and Puppet acts as a compliance tool to keep the box adhering to that profile. Read more about [[Puppet and ControlTier]]
* ControlTier is not a monitoring tool. You can use ControlTier commands to run status and diagnostic tasks at a regular intervals, but this should only be done in addition to using a regular monitoring tool.

== How does ControlTier speed up and improve the quality of an app lifecycle that spans DEV, QA, PROD, etc?==

Moving change from development through QA and on into production is generally a time consuming, error-prone, and all around painful experience. All kinds of new artifacts and related knowledge must be passed for both major and minor releases including:

* versioning and dependencies across multiple packages
* data and database schema updates 
* node names, file locations, and permissions (often different in each environment)
* configuration files and settings
* control scripts and command line syntax
* sequencing of startup across components  
 
It's difficult enough to get these details right if you are the primary developer of the service, but it's almost impossible to get all of this knowledge handed off to QA and Production staff in a way that is both efficient and reliable.
 
To further compound the problem, it's not uncommon for each team to have their own tools and processes to accomplish the changes in their respective environments. When you add up all of the miscommunication, manual errors, &quot;wheel reinvention&quot;, and process inconsistencies, you get a bad situation where your key senior staff's time gets eaten up by what should be routine deployment and service management activity. This is both costly to a company and a real drag on quality of life for your team. 

The ControlTier solution is for all groups to share a common release platform, a common release repository, and a common set of automation modules. (Note: for security reasons you can have different instances of the same system for production and non-production environments). You are then assured of 3 things:

* what is built in development is the exact same thing that is being tested in QA and deployed into production
* the exact same procedures are use to deploy and manage your services across all environments (removing any process variability)
* you have one system of record through which handoffs, troubleshooting, and other collaboration will take place

Using ControlTier the development group typically bootstraps this process, creating an application model of the integrated system as well as developing and testing the automation in their first integration environment. Once new builds come out of the build process, the QA group will use the same automation created by the development to setup their QA environments and deploy the desired release. Once the QA group has signed off on a release, that same automation is used to deploy the same approved packages to the Production environments. Across all of your environments, the high-level commands to deploy or manage a service stay the same even if the implementation varies from release to release. Working in this way you've cut out all of the variability and inefficiency that plagues a normal release cycle. Aside from getting releases from development to production quicker and cutting down on mistakes, you can now safely assign lesser skilled staff to these tasks and free up your senior staff to do more value-adding work.

==Can ControlTier provision whole environments?==

We fully support the notion of a fully automated environment, but you have to use the right mix of tools to properly achieve that goal. ControlTier is really designed to deploy and manage business services that span multiple nodes. In the wild, you'll often find ControlTier working in conjunction with an OS provisioning solution (as explained in separate faq entry). For example, you might use a combination of tools like Kickstart and Puppet to build and configure your OS image. ControlTier would then install, configure, and startup the application tier across the OS images. Whether you go for deeper integration of just run the tools side-by-side, what you get in the end is a fully automated environment.

==How do I get started using ControlTier?==

The subject of &quot;getting started&quot; is taken up in the HOWTOs and demos found on this wiki. But, the general methodology is to pick a single process within the app lifecycle, start small and incrementally, develop the configuration and control models. Beginning users often believe they need to account for every resource, configuration setting, dependency and procedure on the outset because they see value in documenting these things. While this is a great long term goal, we have found that taking a pragmatic stance that concentrates on useful automation goals is the most efficient method.

If you are new to ControlTier it is highly recommended that read the [[Getting Started]] page.

==Can ControlTier be used for managing disaster recovery?==

Yes. Disaster recovery is an excellent use case for ControlTier. As long as you have your source code, data, and any other necessary artifacts, ControlTier can reprovision your services or replicate them at a disaster recovery site.

==I live and breathe this problem, so why don't I just solve it myself?==
{{main|Why not build my own solution?}}
In short, you are solving it yourself. But if the ControlTier community has done a good job, you can focus your expertise on the things that make your organization and business unique.

What the ControlTier project provides you with is a framework, a set of tools, and common best-practices that have come from organizations across the ControlTier community. Rather than going it alone, ControlTier aims to take away the grunt work and needless reinventing of the wheel that takes place across so many IT groups, including yours.

It's not unlike a choice a developer makes when starting to write a new application. Choosing to start from scratch and not use one of the available application frameworks would seem crazy to most modern developers. We feel is should be the same way for service management automation development. 

By joining the ControlTier community, everyone benefits from each others expertise and all of our lives get better.

==Where are the old manuals?==

All of the documentation for ControlTier 3.4 and later can be found on this wiki.

Pre-3.4 manuals are archived:
* [http://open.controltier.org/manuals/3.2/ 3.2]
* [http://open.controltier.org/manuals/3.1/ 3.1]
* [http://open.controltier.org/manuals/3.0/ 3.0]
* 2.2.3: [http://open.controltier.org/manuals/2.2.3/commander-manual/index.html Commander] and [http://open.controltier.org/manuals/2.2.3/workbench-manual/index.html Workbench]

==What powers ControlTier?==
ControlTier software was not written all from scratch. It leverages a great deal of other well known open source projects. Here are just some of the projects that underly the ControlTier components: Jetty, Grails, Jackrabbit, Ant, ant-contrib, BSF, Groovy, JSCH, Quartz, HSQL, commons, castor, lucene, Jena, Log4j, dom4j, IzPack.

=Interoperability=
==Is ControlTier cross-platform?==

Yes. The ControlTier server and agent components are both Java based and hence cross platform in that regard. ControlTier uses CTL as the core of the agent, the generated code is Ant-based, which also provides cross platform scripting.

ControlTier server is essentially a set of Java-based servlets that use a REST style architecture for external integration. The server has been developed and tested on Tomcat but other servlet containers should also work.

ControlTier agent is a standalone java application that bundles Ant. Theoretically, wherever Ant can run, the ControlTier agent can run. 

The most common platforms that ControlTier is run on are Linux, Windows, Solaris, and Mac OS X (in that order).

==What operating systems does ControlTier run on?==

ControlTier server and agent have been tested on Red Hat AS3, EL4, EL5, and the equivalent CentOS versions; Solaris 8, 9, and 10; Mac OS X 10.4 and 10.5; Windows 2000, XP, 2003. No issues have been reported about running ControlTier in cloud or virtualized hosts (AWS, VMWare, Xen, etc.). ControlTier can be reasonably expected to work on most Linux and UNIX systems with a Java 1.5 VM, usually with just minor tweaking. Windows support is solid as well but we don't do as much testing of the demo's and HOWTO's on Windows. Post any questions you may have about compatibility to the mailing list.

==Can you integrate with my favorite version control system?==

The primary interface to integrating with version control systems is currently via Ant tasks. These include: Clearcase, Continuus/Synergy, CVS, SVN, PVCS, Perforce, StarTeam, and MS SourceSafe.

==Can you integrate with JMX?==

Depending on your needs, JMX4Ant might meet your requirements.

=Security=
==How is ControlTier secure?==

ControlTier security is managed at various levels. 

* Authentication: ControlTier server users must authenticate to access information managed in the server. The server tools use a form-based login mechanism that has session expiration control. User information is stored in an LDAP database or flat file. 
* Authorization: Authorization is managed via security roles defined in LDAP. A security role is a privilege granted to a group of users allowing a particular Workbench action. Workbench requires users to have a login ID to authenticate to the server, and to determine the user's role, which provides authorization to access different functionality. See the Security Roles section in the Workbench documentation for more info. Whenever a user executes a command via the client, the request passes through an authorization stage, where the user request is matched up against the access control list. Part of the authorization process includes a user role lookup from an LDAP repository. The client uses an authorization configuration file that can grant access based on deployment context, user group, module and command, as well as time of day.
* Auditing: All commands, software failures, application actions and errors are logged centrally by the Reportcenter application and written to a file local to the server. The server and client applications use Log4j API for all logging.
* Communication: Communication between the ControlTier server and clients is done via HTTP. The server can be configured to use SSL. Communication between ControlTier clients is done over SSH.
* Integrity: Workbench can be configured to generate modules that are digitally signed. Each file within the module are digitally signed and users can configure to have these modules verified before installation. Project and pattern archives are also digitally signed and verified before installation.

==Can I use SSL?==

Yes, ControlTier server and agent can be configured to use SSL. Consult the Security section in the respective manuals.

==Can I encrypt sensitive data in the model?==

Typically, this question is asked in regards to passwords used to access services, databases, etc. Workbench supports the ability encrypt Setting values. Users that created the object or have ctlmin level access can edit and view the data in clear text. The data is stored as an encrypted string in the RDBMS. When the data is distributed as a view to a ControlTier agent it remains encrypted. An included Ant task must be used to decrypt the data on the target machine.

=Technical=
==What is ControlTier's architecture? How is it deployed?==

ControlTier uses a client-server architecture. The ControlTier server is based on several components, a webapp that runs in a servlet container (e.g. Jetty), a RDBMS (e.g. Mysql) or flat file datastore, an LDAP server (optional). ControlTier (passive) agent is installed on each target machine to which releases and deployments are made. Read more in the [[Architecture]] page of this wiki.

Go to the [[Installation]] page for details on how to use the ControlTier installer.

==Does the ControlTier Agent take up resources when not in use? ==

No, the agent is passive and is invoked only when necessary.  The server will connect via SSH and invoke it. Effectively sshd is the long-running daemon process.  The agent is the [[ctl]] command.

If you are using the [[Script-driven approach]] you do not even need the Client agent installed on the remote node.  The [[ctl-exec]] command is used for this mode of operation.

==What is the process for designing and deploying a classic 3-tier app?==

The best way to get a feel for this process is to follow the demos and the HOWTO's, starting with the [[ControlTier Demo]].

== Can ControlTier handle co-deployment? (multiple application instances or versions on one OS instance)==

Firstly, what do we mean by co-deployment? When we say co-deployment we are referring to the scenario where an administrator would like to install several applications of the same kind on one OS instance.	 Co-deployment makes sense when many applications must be run but there is limited hardware to run them. Problems often occur due to collisions of software packages, configuration settings, file paths, etc.

ControlTier enables and supports the co-deployment of applications. By automatic convention, each software deployment is provided its own workspace where instance specific files and directories can be maintained (e.g., logs, bins, var, etc.). Secondly, because ControlTier provides a configuration database developers and administrators can prescribe ahead of time what resources and settings each instance or class of deployment should use. In other words, co-deployment is possible as a by product of ControlTier's ability to achieve environment abstraction for applications.

==What if somebody changes/installs something outside of ControlTier?==

For example, ControlTier was used to deploy an instance of Apache and unbeknownst to the team at large, a rogue hand edited the httpd.conf file to change the listening port. We often refer to this scenario as an &quot;uncoordinated change&quot;. Changes like these are often the most difficult to diagnose and fix since mis-configurations often don't stop something from running but instead cause it to run differently. If ControlTier was used to manage the deployment of the configuration file, then you can use a provided command to verify it has not been modified.

The	Managed-Entity module contains commands called Doc-Generate and Doc-Validate that work with checksums to verify generated files.

ControlTier does not provide a Tripwire IDS feature that baselines a server's filesystem state. You can write ControlTier commands that verify the state of specific files and make those preconditions in a command workflow.

==Does ControlTier support undeploy/rollback?==

The simple answer is that you want to &quot;roll forward&quot; to a previously known good release. In actual practice it is not always so simple. There are two strategies for managing undeploy or rollback using ControlTier: model-driven vs. module-driven.

* Model-driven reversion is based on completely model-driven commands and ControlTier's versioned model. By rolling the model back to a previous state, and re-running the deployment, you effectively bring the deployment back to the previous configuration state. The model-driven strategy is the favored approach as it assumes the state of the configuration model has the primary affect over the behavior of commands. In essence, this just means ControlTier encourages a data-driven programming style.

* Module-driven reversion relies on rollback logic that is contained in the control module and may or may not be driven from the centrally managed model state. Module-driven reversion is typically only used for custom applications or databases who's internal state must be specially treated. The module-driven rollback strategy typically involves creating versioned directories in the deployments workspace directory, and storing snapshots of the application internal state. The rollback semantics of the module then understand how to roll back to previous snapshots.

==How do you input the dependencies? Can I bulk load data into the model?==

Once you have installed the ControlTier stack the very first step is to start defining objects in the model. This can be done via the [[Workbench]] web GUI, using [[ProjectBuilder]] and XML source files, or programmatically via the included Ant tasks (see Object-Create/Object-Update).

==How do I manage the LDAP users for ControlTier?==

ControlTier authentication and authorization layers both use LDAP to lookup users and roles. Depending on your preference you may wish to manage the LDAP database through graphical tools or manage it as a text file which is versioned and uploaded to the LDAP server as needed.

If you prefer the graphical approach, we have reported success using JXplorer for administering OpenLdap. Binding to an ActiveDirectory server has also been successfully reported.

If you prefer the text file approach, we suggest managing an LDIF file and there are a number of script-based utilities to help with that.

==Can ControlTier prompt during a command?==

ControlTier has built in support for prompting from inside commands. If a user is prompted while using the shell interface, a message is written to stdout and the response read from stdin. If a user is running the graphical console, a dialog is raised.

ControlTier has a unique network-savvy prompting task that should be used by commands that are executing commands in remote modules. In this mode, any command that calls the prompt Ant task, will pass the prompt request to a network service that relays the request to the user. This is tunnelled back through the SSH connection with which the remote command was invoked

Prompting can be placed within commands that you develop. Prompts can also be raised during a command workflow failure.

==Database schema change detection?==

ControlTier does not have any special support for checking if a database's schema has changed. This kind of check can be added as a command that might call a sql script and then added to a workflow command sequence as a precondition.

==Can ControlTier scan for exception messages in my app server log?==

Application servers (i.e., servlet containers, J2EE servers) are notorious for creating the scenario where the server itself starts up fine but the webapp or EJBs that they load and run begin to spew exception messages during their startup. These exception messages might be caused by ports that are not listening, database misconfigurations, etc.

ControlTier provides an Ant task called FileMonitor which should be used in a Start workflow sequence that scans the log file for success and failure criteria. This FileMonitor runs in its own thread and reads the log file for pre-configured regular expressions. When a success or failure point is reached, the configured action is then dispatched. We often also use the WaitFor task in this process.

==Can you define package/jar dependencies?==

ControlTier provides a base class called Package which supports dependency relationships. Its subtypes, jar, war, rpm, etc., therefore inherit this capability.

Using ControlTier's correlation query service, you can get back a set of packages all related by their composition hierarchy (i.e., the transitive closure).

==Can I validate/diff config files ?==

Generation and validation of files is supported by the framework. There are two base commands in the Managed-Entity module, Doc-Generate and Doc-Verify that generate and verify a declared document.

==Can commands be run in parallel?==

Command workflows can be configured to execute their task list in parallel. The Workflow tag has attributes that control the threading and batching. Since commands will execute more or less asynchronously result data must be specially managed. Refer to the PropertyResults and PropertiesQueryTask for information about how to access and respond to result data.

==Can I insure the right versions are deployed to the right boxes?==

Assuming you use ControlTier to deploy the applications and packages to the boxes, then you can use and/or develop verification commands to determine if the state of the box corresponds to the state of the model. We consider this a natural byproduct of using ControlTier.

==How deeply can things be monitored/checked?==

The short answer here is, &quot;as deep as you need&quot;. Of course, this is a bit misleading since it relies on the tests that you developed and plugged in as commands (usually as part of workflows). Normally, the kinds of tests that you would use or develop include checking if the application services are running (e.g., by checking the process table, accessing a network port, submitting a transaction, etc.).

A best practice that should be followed is to provide a &quot;Status&quot; command for any module that controls a service. Then a top-level module used for centralized logical management can recursively call the Status command effectively checking each object down the hierarchy.

==What is the format of the ControlTier model?==

ControlTier uses a semantic web approach to managing information about the configuration and control of application environments. Internally, all data is represented in RDF and stored in a relational database. ControlTier uses the excellent Jena API to access and manipulate the model data. ControlTier uses RDFS along with a handful of its own vocabulary to build ontologies that reflect your environment. Day to day use of ControlTier does NOT require you to understand any of these technologies!

Workbench does provide data export and import of the model data in a number of RDF formats (n-triple, RDF/XML, N3). This makes it possible to use other RDF tools to edit and visualize model data. Of course, care must be used when editing model data outside of Workbench. Only advanced users should consider doing this!

==Is Java 6 Supported?==

See: [[Java 6 support notes]]

=ControlTier Administration=

==Server==

===Server logs===

See [[ControlTier server logs]]

====Workbench Logging level====

For example to set the log level to debug in workbench, modify log4j.properties and change the top level to DEBUG
&lt;pre&gt;
log4j.rootCategory=DEBUG, stdout, R
&lt;/pre&gt;

In 3.4.2, you would edit: $CTIER_ROOT/pkgs/jetty-6.1.14/webapps/itnav/WEB-INF/classes/log4j.properties

===Too many open files===

In the $CTIER_ROOT/pkgs/jetty-6.1.14/logs/''YYYY_MM_DD''.stderrout.log you notice a message like:

&lt;pre&gt;Caused by: java.io.IOException: Too many open files&lt;/pre&gt;

====Linux====
Here's a resolution to raise the limits on Linux.

Run the ulimit command and check the &quot;open files&quot; entry to see the current limit. It might be the default (1024):

&lt;pre&gt;
[deploy@nantahala ~]$ ulimit -a
core file size          (blocks, -c) 0
data seg size           (kbytes, -d) unlimited
scheduling priority             (-e) 0
file size               (blocks, -f) unlimited
pending signals                 (-i) 102400
max locked memory       (kbytes, -l) 32
max memory size         (kbytes, -m) unlimited
open files                      (-n) 1024
pipe size            (512 bytes, -p) 8
POSIX message queues     (bytes, -q) 819200
real-time priority              (-r) 0
stack size              (kbytes, -s) 10240
cpu time               (seconds, -t) unlimited
max user processes              (-u) 102400
virtual memory          (kbytes, -v) unlimited
file locks                      (-x) unlimited
&lt;/pre&gt;


To raise the limit:

1) Edit /etc/security/limits.conf and add the lines:

 * soft nofile 1024
 * hard nofile 65535

NOTE:  the asterisk (*) specifies all users, alternatively a specific user can be specified which would be the user the ctier server (jetty) runs as

2) Edit /etc/pam.d/login, adding the line:

&lt;pre&gt;session required /lib/security/pam_limits.so&lt;/pre&gt;

3) The system file descriptor limit is set in /proc/sys/fs/file-max. The following command will increase the limit to 65535:

&lt;pre&gt;echo 65535 &gt; /proc/sys/fs/file-max&lt;/pre&gt;

4) You should then be able to increase the file descriptor limits using:

&lt;pre&gt;ulimit -n unlimited&lt;/pre&gt;

The above command will set the limits to the hard limit specified in /etc/security/limits.conf.

5) Modified $HOME/.bash_profile as follows:

 ulimit -Sn unlimited

6) source $HOME/.bash_profile

 . $HOME/.bash_profile

7) restart jetty
 jetty.sh stop
 jetty.sh start

===Address already in use:  connect===
This error occurs when deploying the ControlTier server to Windows XP (and other variants), and turns out that to be caused by exhaustion of the pool of &quot;ephemeral&quot; ports available for making new socket connections.

The means of increasing the pool of such ports is documented on the Microsoft support site: http://support.microsoft.com/kb/196271.

Raising the upper port number limit from 5000 to 65534 eliminates the issue.

=== Jobcenter threadCount and concurrency ===
The maximum number of threads used by Jobcenter for concurrent jobs is set in the &quot;quartz.properties&quot; file located at 
$CTIER_ROOT/pkgs/jetty-6.1.14/webapps/jobcenter/WEB-INF/classes/quartz.properties 

To change the maximum threadCount modify this file and alter the line: 

 org.quartz.threadPool.threadCount = 20

Set the threadCount value to the max number of threads you want to run concurrently. 

* See: http://wiki.opensymphony.com/display/QRTZ1/ConfigThreadPool 

Jobcenter uses the Quartz library for job scheduling, and it seems the &quot;SimpleThreadPool&quot; implementation that is used by default is pretty basic, and does not grow on demand. Quartz does not apparently ship 
with a flexible threadpool implementation, so the best solution is to change 
that number to something slightly higher than you anticipate needing. 

(Mailing list link: http://groups.google.com/group/controltier/browse_thread/thread/29bad0313022923a )

===Out of memory===

You may see errors in the ControlTier server's Jetty log file indicating that Java heap has been exhausted. Depending on how you're starting ControlTier there are a number of places to set Java options:

* If you're using jetty.sh on Unix/Linux from a Zip install you should change the Java memory options in $HOME/.ctierrc and restart ControlTier:

&lt;pre&gt;
$ fgrep JAVA_OPTIONS ~/.ctierrc 
export JAVA_OPTIONS=&quot;-XX:MaxPermSize=256m -Xmx1024m -Xms256m $CONFIG_PROPS&quot;
&lt;/pre&gt;

* If you're using ControlTier on Redhat/CentOS Linux using the RPM installer, then there's a default configuration file for the init script to update:

&lt;pre&gt;
[anthony@centos55 ~]$ fgrep JAVA_OPTIONS /etc/default/ctier 
export JAVA_OPTIONS=&quot;-XX:MaxPermSize=256m -Xmx1024m -Xms256m $CONFIG_PROPS&quot;
&lt;/pre&gt;

* If you're using the start.bat script on Windows then you'll need to fix up %HOMEPATH%\ctier.bat:

&lt;pre&gt;
C:\Documents and Settings\Anthony Shortland&gt;cd %HOMEPATH%

C:\Documents and Settings\Anthony Shortland&gt;findstr JAVA_OPTIONS ctier.bat
set JAVA_OPTIONS=-XX:MaxPermSize=128m -Xmx768m -Xms256m %CONFIG_PROPS%
&lt;/pre&gt;

* If you're using ControlTier as a Windows service then you can update the Java and additional options in the Java wrapper service configuration file: 

&lt;pre&gt;
$ egrep 'memory|additional' jetty-ctier-service.conf
wrapper.java.additional.1=-Djetty.home=../
wrapper.java.additional.2=-Djetty.logs=../logs
wrapper.java.additional.3=-Dctlcenter.config.location=%CTIER_ROOT%/ctlcenter/ctlcenter-config.properties
wrapper.java.additional.4=-XX:MaxPermSize=128m
wrapper.java.initmemory=256
wrapper.java.maxmemory=1024
&lt;/pre&gt;

==Client==

===Out of memory===

You may see errors in the ControlTier client's output and/or Ctl log files indicating that Java heap has been exhausted. Unfortunately (as of ControlTier 3.6.0) the Java options to allocate more memory to the client JVM (e.g. &quot;-Xms64m -Xmx128m&quot;) are hard-coded in $CTL_HOME/bin/ctl and %CTL_HOME%\bin\ctl.bat and so those scripts will need to be &quot;hacked&quot; to remediate the problem. 

==SSH==

===SSH error: com.jcraft.jsch.JSchException: Auth fail ===

====Password inadvertently set to white space====

''Credit: Eric Black (2009 Jan 14)''

I was having a problem contacting my remote server through ssh, but 
the problem ended up being trivial. 
The test client (remote server) was working for quite awhile and then 
all the sudden it stopped working. I kept thinking it was something to 
do with the firewall since the OPs team had been messing with the 
server and firewall recently. I was able to ssh to the system with a 
command on the command line and could also use a test ant sshexec 
command without a problem. I then added the same node to a different 
project and it worked ok. Going back to the project in workbench and 
looking at the node, I somehow had added a password. By editing it 
back to a blank password it worked ok. 
This was the exception: 

&lt;pre&gt;
# ctl-exec -v -p demo -- whoami 
number of nodes to dispatch to: 2, (threadcount=1) 
preparing for sequential execution... 
preparing for remote execution ... 
dispatching to proxy on node: ctierremote 
Connecting to ctierremote:22 
com.jcraft.jsch.JSchException: Auth fail 
        at org.apache.tools.ant.taskdefs.optional.ssh.SSHExec.execute 
(SSHExec.java:188) 
        at com.controltier.ctl.cli.CtlExec$CommandAction.doAction 
(CtlExec.java:871) 
        at com.controltier.ctl.cli.CtlExec.run(CtlExec.java:261) 
        at com.controltier.ctl.cli.CtlExec.main(CtlExec.java:357) 
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 
        at sun.reflect.NativeMethodAccessorImpl.invoke 
(NativeMethodAccessorImpl.java:39) 
        at sun.reflect.DelegatingMethodAccessorImpl.invoke 
(DelegatingMethodAccessorImpl.java:25) 
        at java.lang.reflect.Method.invoke(Method.java:585) 
        at launcher.CtlExecLauncher.main(CtlExecLauncher.java:31) 
Caused by: com.jcraft.jsch.JSchException: Auth fail 
        at com.jcraft.jsch.Session.connect(Session.java:454) 
        at com.jcraft.jsch.Session.connect(Session.java:142) 
        at org.apache.tools.ant.taskdefs.optional.ssh.SSHBase.openSession 
(SSHBase.java:212) 
        at org.apache.tools.ant.taskdefs.optional.ssh.SSHExec.execute 
(SSHExec.java:158) 
        ... 8 more 
--- Nested Exception --- 
com.jcraft.jsch.JSchException: Auth fail 
        at com.jcraft.jsch.Session.connect(Session.java:454) 
        at com.jcraft.jsch.Session.connect(Session.java:142) 
        at org.apache.tools.ant.taskdefs.optional.ssh.SSHBase.openSession 
(SSHBase.java:212) 
        at org.apache.tools.ant.taskdefs.optional.ssh.SSHExec.execute 
(SSHExec.java:158) 
        at com.controltier.ctl.cli.CtlExec$CommandAction.doAction 
(CtlExec.java:871) 
        at com.controltier.ctl.cli.CtlExec.run(CtlExec.java:261) 
        at com.controltier.ctl.cli.CtlExec.main(CtlExec.java:357) 
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 
        at sun.reflect.NativeMethodAccessorImpl.invoke 
(NativeMethodAccessorImpl.java:39) 
        at sun.reflect.DelegatingMethodAccessorImpl.invoke 
(DelegatingMethodAccessorImpl.java:25) 
        at java.lang.reflect.Method.invoke(Method.java:585) 
        at launcher.CtlExecLauncher.main(CtlExecLauncher.java:31) 
&lt;/pre&gt;

====Mismatched SSH keys====
''Credit: Chuck Scott (2009 Jan 20)''

getting a com.jcraft.jsch.JSchException: Auth cancel from dispatchCmd 

I had a source user:  ctier on controltier server 

A remote user:  deploy 

in object model the remote hostname has: 
*        CTL Username:    deploy 
*        Hostname:        smc-dev01.(domain excluded)     
ssh works: 
&lt;pre&gt;
[deploy@ctier objects]$   ssh deploy@smc-dev01.(domain excluded)  id 
uid=517(deploy) gid=517(deploy) groups=517(deploy) 
&lt;/pre&gt;

... dispatchCmd doesn't:
&lt;pre&gt;
[deploy@ctier objects]$  ctl   -p SmartyCard -t TomcatSite -r dev -c   dispatchCmd -- -command Deploy 
dispatching command: &quot;Deploy &quot; to: [(TomcatContext) devBackoffice, 
(TomcatServer) dev ]... 
dispatching to resource: devBackoffice [TomcatContext] -&gt; &quot;Deploy &quot; 
Connecting to smc-dev01.smartycard.com:22 
dispatching to resource: dev [TomcatServer] -&gt; &quot;Deploy &quot; 
Connecting to smc-dev01.smartycard.com:22 
Command failed: The following error occurred while executing this line: 
/home/deploy/ctier/ctl/projects/SmartyCard/modules/Mediator/commands/ 
dispatchCmd.xml:161: 
The following error occurred while executing this line: 
/home/deploy/ctier/ctl/projects/SmartyCard/modules/Mediator/commands/ 
dispatchCmd.xml:181: The following error occurred while executing this   
line: 
/home/deploy/ctier/ctl/projects/SmartyCard/modules/Mediator/commands/ 
dispatchCmd.xml:61: com.jcraft.jsch.JSchException: Auth cancel 
&lt;/pre&gt;

it turned out to be the wrong key (rsa -vs dsa) where ssh was working   
with rsa but ctl was configured for dsa key.... 
i added dsa to authorized_keys , problem resolved...

==ProjectBuilder==

===My project xml fails to validate. What could be wrong?===

The project XML DTD specifies that the elements must be in a particular order. In other words, all nodes must come first, then settings, in this order:

&lt;pre&gt;
&lt;!DOCTYPE project PUBLIC
        &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; &quot;project.dtd&quot;&gt;
&lt;project&gt;
  &lt;node .../&gt;
  &lt;setting ...  /&gt;
  &lt;package ... /&gt;
  &lt;deployment ...  /&gt;
&lt;/project&gt;
&lt;/pre&gt;

Another common cause of failed validation is the presence of tags that are not closed properly, such as missing slashes at the end of settings or other non-container tags.

==High Availability==

===Can ControlTier server be configured for Redundancy?===

It is possible to configure a ControlTier server for active/warm standby configuration.  Since all data and configuration are filesystem friendly, the use of rsync and additional system configuration is [[CTRedudancy|described]] 

{{Reference/navbox}}

[[Category:Reference]]</text>
    </revision>
  </page>
  <page>
    <title>File</title>
    <id>1662</id>
    <revision>
      <id>11194</id>
      <timestamp>2009-12-14T16:21:03Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Created page with '&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Package&lt;/categorytree&gt; [[File:Icon-Packa…'</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Package&lt;/categorytree&gt;
[[File:Icon-PackageObject.png]]
The [[file]] type represents a plain file in the repository


==Reference==

{{Package/reference|file}}

==Definition==
[[File:Core-type-model.png|thumb|Core type model]]

===Metadata===

The table below gives a brief description for each of the attributes of the package type. The ones with an asterisk are required during the deployment cycle.
{{Package/type/properties}}

===Project XML===
{{Package/projectxml |example|123|file}}

===Querying===

{{Package/querying|example|123|file}}

{{Manual/navbox}}
[[Category:Package]]</text>
    </revision>
  </page>
  <page>
    <title>FileMonitor Task Reference</title>
    <id>1453</id>
    <revision>
      <id>16480</id>
      <timestamp>2012-02-23T14:34:11Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Undo revision 15666 by [[Special:Contributions/Anjanasanford1|Anjanasanford1]] ([[User talk:Anjanasanford1|talk]]) Removed SPAM bot edit</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Tasks&lt;/categorytree&gt;

FileMonitor task performs an Ant equivalent of &quot;tail -f | egrep &lt;pattern&gt;&quot;, but also allows multiple actions to be defined that occur for multiple possible matches against the input.

==Description==

The file specified by the &quot;file&quot; attribute of Filemonitor is opened, and the input is positioned at the end of the file. As more data is written to the file, each line is processed by filemonitor. Each [[#watch|watch]] element is tested in turn against the input, and if any one matches, its action declaration is used to execute one of the [[#handleractions|handleractions]]. If no [[#watch|watch]] element matches by the time the timeout period is up, then the action named in the &quot;timeoutaction&quot; attribute is used, if any. If no timeoutaction is defined, then the filemonitor finishes executing without further action.

==Parameters==

      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;

	&lt;tr&gt;
	  &lt;td&gt;file&lt;/td&gt;&lt;td&gt;The file to monitor&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;timeout&lt;/td&gt;&lt;td&gt;Number of milliseconds to wait&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;timeoutaction&lt;/td&gt;&lt;td&gt;Action to run at timeout&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;

==Parameters specified as nested elements==

===handleractions===
The &quot;handleractions&quot; elements can contain multiple [[#action|action]] elements.  When a match occurs on the input, the action with the appropriate name is executed.

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;handleractions&gt;
   &lt;action name=&quot;action 1&quot;&gt;
               ... tasks ...
   &lt;/action&gt;
   &lt;action name=&quot;action 2&quot;&gt;
               ... tasks ...
   &lt;/action&gt;
    
           . . .

   &lt;action name=&quot;action N&quot;&gt;
               ... tasks ...
   &lt;/action&gt;
&lt;/handleractions&gt;
&lt;/syntaxhighlight&gt;

===action===
An &quot;action&quot; is a sub-element to [[#handleractions|handleractions]]. Each action has a name and contains one or more ant tasks.
An &lt;code&gt;action&lt;/code&gt; element is a named TaskContainer that lets you execute any number of tasks.
 
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;action name=&quot;action name&quot;&gt;

   ... tasks go here ...
&lt;/action&gt;
&lt;/syntaxhighlight&gt;

There is one &quot;special&quot; action called ''timeout'' that can be configured to execute tasks when the file monitor has reached the &lt;code&gt;timeout&lt;/code&gt; value.
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;action name=&quot;timeout&quot;&gt;

   ... tasks go here ...
&lt;/action&gt;
&lt;/syntaxhighlight&gt;
The &quot;timeout&quot; action does not require a [[#watch|watch]] element defined for it.

===watch===
The filemonitor also contains one or more &quot;watch&quot; elements. Each watch element defines what action is going to occurr if it matches, via the [[#action|action]] attribute, as well as what causes it to match, via a [http://ant.apache.org/manual/CoreTypes/filterchain.html filterchain] element.

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;watch action=&quot;action name&quot;&gt;
   &lt;filterchain&gt;
               ...
   &lt;/filterchain&gt;
&lt;/watch&gt;
&lt;/syntaxhighlight&gt;

==Examples==

Here's an example that monitors a file called &quot;server.log&quot; for 4000 milliseconds. It defines three actions: &quot;timeout&quot;, &quot;success&quot; and &quot;failure&quot;.
These actions correspond to &lt;code&gt;watch&lt;/code&gt; elements that configure a filterchain to look for lines that contain particular strings. 
When one of those strings are matched the corresponding action tasks will be executed. For this example, the &quot;echo&quot; task will be called.
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
   &lt;filemonitor file=&quot;server.log&quot; timeout=&quot;4000&quot; timeoutaction=&quot;timeout&quot;&gt;
       &lt;handleractions&gt;
           &lt;action name=&quot;timeout&quot;&gt;
               &lt;!-- the action tag is a taskcontainer --&gt;
               &lt;echo level=&quot;info&quot;&gt;timeout occurred&lt;/echo&gt;
           &lt;/action&gt;
           &lt;action name=&quot;success&quot;&gt;
               &lt;echo level=&quot;info&quot;&gt;success occurred&lt;/echo&gt;
           &lt;/action&gt;
           &lt;action name=&quot;failure&quot;&gt;
               &lt;echo level=&quot;info&quot;&gt;failure occurred&lt;/echo&gt;
           &lt;/action&gt;
       &lt;/handleractions&gt;

       &lt;watch action=&quot;success&quot;&gt;
           &lt;!--
                 watch can contain a single filterchain 
            --&gt;
           &lt;filterchain&gt;
               &lt;linecontains&gt;
                  &lt;contains value=&quot;Server Started up&quot;/&gt;
               &lt;/linecontains&gt;
           &lt;/filterchain&gt;
       &lt;/watch&gt;
       &lt;watch action=&quot;failure&quot;&gt;
           &lt;filterchain&gt;
               &lt;linecontains&gt;
                  &lt;contains value=&quot;Exception occurred&quot;/&gt;
               &lt;/linecontains&gt;
           &lt;/filterchain&gt;
       &lt;/watch&gt;
   &lt;/filemonitor&gt;
&lt;/syntaxhighlight&gt;
{{stub}}

&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Utility Ant Tasks]]</text>
    </revision>
  </page>
  <page>
    <title>File share</title>
    <id>1808</id>
    <redirect />
    <revision>
      <id>11893</id>
      <timestamp>2009-12-18T00:24:30Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[Category:File share]]</comment>
      <text xml:space="preserve">#REDIRECT [[:Category:File share]]</text>
    </revision>
  </page>
  <page>
    <title>FilenameTokenizer Type Reference</title>
    <id>1690</id>
    <revision>
      <id>11431</id>
      <timestamp>2009-12-14T23:33:32Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Created page with '{{stub}}  &lt;syntaxhighlight lang=&quot;xml&quot;&gt; &lt;filenametokenizer&gt;              &lt;!-- the files to find --&gt;               &lt;fileset dir=&quot;${opts.targetdir}&quot; includes=&quot;**/*&quot;/&gt;               …'</comment>
      <text xml:space="preserve">{{stub}}

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;filenametokenizer&gt; 
            &lt;!-- the files to find --&gt;  
            &lt;fileset dir=&quot;${opts.targetdir}&quot; includes=&quot;**/*&quot;/&gt;  
            &lt;!-- tokenize files matching pattern of a regex filebase followed by an optional buildstamp with the specified extension: --&gt;  
            &lt;regex pattern=&quot;${filePattern}&quot;&gt; 
              &lt;token name=&quot;pFilename&quot; matchgroup=&quot;0&quot;/&gt;  
              &lt;token name=&quot;pBase&quot; matchgroup=&quot;1&quot;/&gt;  
              &lt;token name=&quot;pExtension&quot; matchgroup=&quot;2&quot;/&gt; 
            &lt;/regex&gt; 
&lt;/filenametokenizer&gt; 
&lt;/syntaxhighlight&gt;

[[Category:ApplyMacro Ant Type]]</text>
    </revision>
  </page>
  <page>
    <title>Fileutil</title>
    <id>1019</id>
    <revision>
      <id>14349</id>
      <timestamp>2010-11-11T00:46:22Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Types&lt;/categorytree&gt;
[[File:Icon-AssemblyObject.png]]
[[fileutil]] is a utility defining a set of commands useful for manipulating files using cross-platform methods. Commands exist to check various aspects of files (read/write/execute status), link, touch, truncate, copy and move, compare files by date (older/newer), and manage directories.

==Reference==
* [http://controltier.sourceforge.net/docs/latest/core/reference/user/fileutil/index.html fileutil reference].

{{Manual/navbox}}

[[Category:Utility types]]</text>
    </revision>
  </page>
  <page>
    <title>First CTL module</title>
    <id>915</id>
    <redirect />
    <revision>
      <id>4984</id>
      <timestamp>2009-05-03T17:17:48Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>[[First CTL module]] moved to [[First type module]]</comment>
      <text xml:space="preserve">#REDIRECT [[First type module]]</text>
    </revision>
  </page>
  <page>
    <title>First simple project</title>
    <id>1021</id>
    <revision>
      <id>13965</id>
      <timestamp>2010-11-10T15:26:22Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;-objects&quot; to &quot;-resources&quot;</comment>
      <text xml:space="preserve">: ''This is in-progress documentation and may be incomplete.''

Now that you have installed ControlTier and created an empty project, we can now begin to add objects to this project. The tool we will use is called ProjectBuilder. ProjectBuilder is a ControlTier module that allows us to take modules and objects defined in ControlTier's XML-based definition language and load them into the Workbench database.

After the instructions on this page, you will have deployed two tomcat instances with a simple application.  We will simulate two application servers by using separate UNIX users.

== Preparations ==

*create two new UNIX users
*install ControlTier client into two UNIX users
**nodes are defined principally by combination of username and hostname (and various attributes)
*download Apache Tomcat 6

Setting up a project builder

*create Project builder source directory (provide zip file here of example code)
*define project builder object

Using object XML

*upload tomcat ZIP file
**introduce basic operation of Package type
*define two tomcat servers in XML and use load objects to create the resources (include setting ports)
**introduce basic operation and lifecycle of Service type
*using find-resources
*using workbench for visualization

Deployment

*execute deploy command
*verify deployment
*service lifecycle

Job center

*using job center interface
*using job XML (define job and load using load-jobs command)

Reporting

*report center

Grouping services using a site

*create site object (depend on service objects)
*use site to execute lifecycle commands

Other thoughts

*how to model services that depend on other services using startup rank
*provide links and pointers to other useful examples
*point to using objects/sample.XML modules as example code
*addressing multiple environments (development, QA, production)

Next document

*Builder, continuous integration, and Change-Dependencies/Update</text>
    </revision>
  </page>
  <page>
    <title>First type module</title>
    <id>43</id>
    <revision>
      <id>16378</id>
      <timestamp>2012-02-20T10:14:42Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <comment>Reverted SPAM bot edits</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Modules&lt;/categorytree&gt;
[[Image:Crystal_Clear_app_tutorials.png|left|75]]

: ''See a short screencast: [http://open.controltier.com/media/tutorial-Create-CTL-Module-1.swf Part 1], [http://open.controltier.com/media/tutorial-Create-CTL-Module-2.swf Part 2]''

This document describes how to create defined commands in a [[Core Type Guide|ControlTier type]] using XML and [[ProjectBuilder]]. For a graphical alternative see the [[Graphical type editor]].
ProjectBuilder contains a set of commands that let you create, build and stage these. 
Types are defined in an XML file referred to as a [[type.xml]] file. The type.xml file supports a set of XML tags that declare object attributes, defaults, constraints and commands. 

Defining new [[modules]] with ProjectBuilder is a simple process and follows a typical edit, build, run cycle.

==Run create-type==

ProjectBuilder includes a command called {{Core Type Command Reference|ProjectBuilder|create-type}} that generates a set of boiler plate files that bootstrap the type and type development process. Without arguments, the create-type command runs interactively. Run the create-type command accepting the defaults:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ ctl -p aProject -m ProjectBuilder -c create-type
Base directory where module source files reside [/tmp/ctier/ctl/src]

Target directory where build files are generated [/tmp/ctier/target]

Choose a supertype:  ([Managed-Entity], Package, Builder, Deployment, Service)
Deployment
Name of type: 
poly
Description of type: 
Says hi in different languages
Creating module definition files in directory: /tmp/ctier/ctl/src ...
Initializing type module from template dir: /tmp/ctier/ctl/projects/default/modules/ProjectBuilder/templates/boilerplate ...
Created dir: /tmp/ctier/ctl/src/modules/poly
Copying 1 file to /tmp/ctier/ctl/src/modules/poly
Creating directory structure...
Created dir: /tmp/ctier/ctl/src/modules/poly/bin
Created dir: /tmp/ctier/ctl/src/modules/poly/commands
Created dir: /tmp/ctier/ctl/src/modules/poly/objects
Created dir: /tmp/ctier/ctl/src/modules/poly/templates
Copying /tmp/ctier/ctl/projects/default/modules/ProjectBuilder/templates/types/Deployment to /tmp/ctier/ctl/src/modules/poly ...
Initializing type module from template dir: /tmp/ctier/ctl/projects/default/modules/ProjectBuilder/templates/types/Deployment ...
Copying 2 files to /tmp/ctier/ctl/src/modules/poly
Define commands and attributes in this file: /tmp/ctier/ctl/src/modules/poly/type.xml
&lt;/syntaxhighlight&gt;

You might be wondering about the supertype chosen in this example. [[Deployment]]  is one of the [[Core Type Guide|ControlTier core types]].

The build-type command generates a set of files that comprise a module. [[Modules]] are a piece of software that can be distributed to CTL installations. Once installed the commands in the module are accessible to the command dispatcher. 

Modules have the following directory layout:

&lt;pre&gt;
module_name
  |
  |--- commands.properties // file containing command metadata (auto-generated)
  |--- module.properties   // file containing module metadata (auto-generated)
  |--- type.properties     // file containing type metadata (auto-generated)
  |--- type.xml            // file containing command definitions (user created/modified)
  |
  +--- bin                 // optional binaries, shell scripts, etc.
  |
  +--- commands            // contains generated commands
  |
  +--- lib                 // optional resource files 
&lt;/pre&gt;


As mentioned earlier, the type.xml file is used to define all aspects of the type, including its commands. See the [[Type-v10.xml|type.xml reference]] document for information about all its tags. In this continuing example, the type.xml file for the &quot;poly&quot; module is $CTL_BASE/src/modules/poly/type.xml.

Define a command named &quot;slither&quot;:

&lt;syntaxhighlight  lang=&quot;xml&quot;&gt;
      &lt;command name=&quot;slither&quot; description=&quot;Say something with python.&quot; 
               command-type=&quot;BsfCommand&quot; is-static=&quot;true&quot;&gt;       
	&lt;script language=&quot;jython&quot;&gt;print &quot;python says: %s&quot; % project.getProperty('opts.message')&lt;/script&gt;
	&lt;opts&gt;
	  &lt;opt parameter=&quot;message&quot; description=&quot;message to print&quot; required=&quot;false&quot; 
	       property=&quot;opts.message&quot; type=&quot;string&quot; default=&quot;ssss&quot;/&gt;
	&lt;/opts&gt;
      &lt;/command&gt;
&lt;/syntaxhighlight&gt;      

This example command was defined as a &lt;code&gt;BsfCommand&lt;/code&gt; command-type. Other command-types are shown later in this document.

==Run build-type==

ProjectBuilder's {{Core Type Command Reference|ProjectBuilder|build-type}} command processes the type.xml and other module sources and generates a working module. 
Run the build-type command to generate the module files for your new command (accept the defaults again):

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ ctl -m ProjectBuilder -c build-type -- -type poly -upload -deploy

Base directory where module source files reside [/tmp/ctier/ctl/src]

Target directory where build files are generated [/tmp/ctier/target]

Building type using the buildmodule.xml via classloader
converting type.xml for module: poly
generating handlers...
packaging module: poly
Copying 1 file to /tmp/ctier/ctl/src/modules/poly
Moving 1 file to /tmp/ctier/ctl/src/modules/poly
Building jar: /tmp/ctier/target/modules/poly-1.jar
deploying new build of poly module to local installation ...
Extracting /tmp/ctier/target/modules/poly-1.jar to: /tmp/ctier/ctl/projects/default/modules/poly
Expanding: /tmp/ctier/target/modules/poly-1.jar into /tmp/ctier/ctl/projects/default/modules/poly
&lt;/syntaxhighlight&gt;

The &quot;-upload&quot; flag tells build-type to upload the module to the [[ControlTier server]] while the &quot;-deploy&quot; option causes the module to be installed in the local CTL project. 

The module was built and deployed and is ready for use.

If you run the &lt;code&gt;ctl&lt;/code&gt; shell command without arguments you should see the new module in the listing output:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl
poly: Says hi in different languages
commands: [slither]
-- snip --
&lt;/syntaxhighlight&gt;

To see more detail about the commands defined in the new type add &quot;-m poly&quot; as arguments:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ ctl -m poly
poly: Says hi in different languages
commands: [slither]
&lt;/syntaxhighlight&gt;
The commands defined in the type will be listed.

==Run your command==
The general usage for the new module will be: &lt;code&gt;ctl -m poly -c &lt;command&gt; -- [-message &lt;&gt;]&lt;/code&gt;. 
So far the &quot;slither&quot; command has been defined so it supports two ways of being called.
# &lt;syntaxhighlight lang=&quot;bash&quot;&gt;ctl -m poly -c slither&lt;/syntaxhighlight&gt;
#: Call it without arguments letting the default message apply
# &lt;syntaxhighlight lang=&quot;bash&quot;&gt;ctl -m poly -c slither -- -message message&lt;/syntaxhighlight&gt;
#: Call it with the the -message option

First run it without the -message option to show the default being used.

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ ctl -m poly -c slither
python says: ssss
&lt;/syntaxhighlight&gt;

Next, run the command with with the option specified specified:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ ctl -m poly -c slither -- -message &quot;'some nice mice?'&quot;
python says: some nice mice?
&lt;/syntaxhighlight&gt; 

Note
* Some Unix users see this error: &quot;can't create package cache dir, '/cachedir/packages'&quot;. See [http://wiki.python.org/jython/JythonFaq/InstallingJython#WhydoIgettheerror.2C.22can.27tcreatepackagecachedir.2C.27.2BAC8-cachedir.2BAC8-packages.27.22 python wiki] for information about permissions. In most cases, this error won't interefere with this demo example.

You may be curious about the double hyphen (eg, --) in the example. The double hyphen is used to separate the [[Running ctl|ctl]] command line arguments from the command-specific ones (in this case &quot;-message&quot;). See [[CTL Command Reference#Command_Options]]

The next section describes how to define other command types.

===System shell script command===

System shellscripts are simple to define and are made up of an &quot;executable&quot; and an &quot;argument string&quot;. An easy one to define is an &quot;echo&quot; command. 

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
      &lt;command name=&quot;echo&quot; description=&quot;second command.&quot; 
               command-type=&quot;Command&quot; is-static=&quot;true&quot;&gt;
        &lt;execution-string&gt;bash&lt;/execution-string&gt;
        &lt;argument-string&gt;echo bash says ${opts.message}&lt;/argument-string&gt;
        &lt;opts&gt;
          &lt;opt parameter=&quot;message&quot; description=&quot;option name&quot; required=&quot;false&quot;
	       property=&quot;opts.message&quot; type=&quot;string&quot; default=&quot;hi there!&quot;/&gt;
        &lt;/opts&gt;
      &lt;/command&gt;
&lt;/syntaxhighlight&gt;

See more at [[Shell command]].

===Ant command===

Ant commands are defined using Ant tasks. CTL includes ant-contrib and its own CTL-specific tasks, too. This example uses the &quot;echo&quot; task to print the message.

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
      &lt;command name=&quot;emit&quot; description=&quot;say something with Ant.&quot; 
               command-type=&quot;AntCommand&quot; is-static=&quot;true&quot;&gt;
        &lt;implementation&gt;
	  &lt;echo message=&quot;ant says ${opts.message}&quot;/&gt;
        &lt;/implementation&gt;
        &lt;opts&gt;
          &lt;opt parameter=&quot;message&quot; description=&quot;option name&quot; required=&quot;false&quot;
	       property=&quot;opts.message&quot; type=&quot;string&quot; default=&quot;creepers&quot;/&gt;
        &lt;/opts&gt;
      &lt;/command&gt;
&lt;/syntaxhighlight&gt;      

See more at [[Ant command]].

===Bean Scripting Framework command===

The first example shown here was a BsfCommand type. These commands use the Apache Bean Scripting Framework (BSF) to execute script code of various langauges. Here's another example showing ruby...

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;    
      &lt;command name=&quot;shine&quot; description=&quot;ruby BSF command.&quot; 
              command-type=&quot;BsfCommand&quot; is-static=&quot;true&quot;&gt;
        &lt;script language=&quot;ruby&quot;&gt;&lt;![CDATA[
           print 'ruby says ', $project.getProperty('opts.message'), &quot;\n&quot;
	]]&gt;&lt;/script&gt;
        &lt;opts&gt;
          &lt;opt parameter=&quot;message&quot; description=&quot;option name&quot; required=&quot;false&quot;
	       property=&quot;opts.message&quot; type=&quot;string&quot; default=&quot;dazzle&quot;/&gt;
        &lt;/opts&gt;
      &lt;/command&gt;
&lt;/syntaxhighlight&gt;

... and yet another this time in groovy:

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
      &lt;command name=&quot;groovy&quot; description=&quot;groovy BSF command.&quot; 
              command-type=&quot;BsfCommand&quot; is-static=&quot;true&quot;&gt;
        &lt;script language=&quot;groovy&quot;&gt;&lt;![CDATA[
           println &quot;groovy says ${project.properties['opts.message']} \n&quot;
	]]&gt;&lt;/script&gt;
        &lt;opts&gt;
          &lt;opt parameter=&quot;message&quot; description=&quot;option name&quot; required=&quot;false&quot;
	       property=&quot;opts.message&quot; type=&quot;string&quot; default=&quot;peace&quot;/&gt;
        &lt;/opts&gt;
      &lt;/command&gt;
&lt;/syntaxhighlight&gt;


Properties referenced in the command definitions of the type.xml will be replaced before the BSF script is evaluated. In this example, the property opts.message will be replaced by its value.

Note
* You might notice in the examples above that the BSF scripting code was contained in a CDATA section. This is not required but does allow you to use unencoded XML characters.

See more at [[BSF command]].

==Programmatic Access to the CTL API==

The [[APIs|CTL Java API]] provides an interface to accessing framework resources via Java. This Java object is accessible to BsfCommands.

A named reference is defined that allows you to look it up as shown below:

&lt;syntaxhighlight lang=&quot;java&quot;&gt;
com.controltier.ctl.common.Framework framework = 
	    project.getReference(&quot;com.controltier.ctl.common.Framework.instance&quot;)
&lt;/syntaxhighlight&gt;

The Framework provides programmatic access to looking up resources in the framework like project projects, modules, commands, and their properties.

&lt;syntaxhighlight lang=&quot;java&quot;&gt;
com.controltier.ctl.common.Framework framework = 
	    project.getReference(&quot;com.controltier.ctl.common.Framework.instance&quot;)
List projects = framework.getDepotResourceMgr().listDepots()
&lt;/syntaxhighlight&gt;

Here's an example using groovy:

&lt;syntaxhighlight lang=&quot;java&quot;&gt;
      &lt;command name=&quot;list-projects&quot; description=&quot;List all the project projects.&quot; 
              command-type=&quot;BsfCommand&quot; is-static=&quot;true&quot;&gt;
        &lt;script language=&quot;groovy&quot;&gt;&lt;![CDATA[
       def framework =  project.getReference(&quot;com.controltier.ctl.common.Framework.instance&quot;)
       def projects = framework.getDepotResourceMgr().listDepots()
       projects.each { d -&gt;
           println &quot;${d.name} \n&quot;;
       }
	]]&gt;&lt;/script&gt;
      &lt;/command&gt;
&lt;/syntaxhighlight&gt;

==Workflow command==
{{Main|Workflow command}}

You can model a sequence of commands in a command-type called a WorkflowCommand. Here the previously defined commands are called in the order shown below:
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
    &lt;command name=&quot;stammer&quot; description=&quot;first workflow command&quot;		
		command-type=&quot;WorkflowCommand&quot; is-static=&quot;true&quot;
		error-handler-type=&quot;FAIL&quot;
		&gt;
	 &lt;workflow threadcount=&quot;1&quot;&gt;
	   &lt;command name=&quot;slither&quot;/&gt;
	   &lt;command name=&quot;echo&quot;/&gt;
	   &lt;command name=&quot;emit&quot;/&gt;
	   &lt;command name=&quot;shine&quot;/&gt;
	   &lt;command name=&quot;groovy&quot;/&gt;
	 &lt;/workflow&gt;
         &lt;opts&gt;
          &lt;opt parameter=&quot;message&quot; description=&quot;option name&quot; required=&quot;false&quot;
	       property=&quot;opts.message&quot; type=&quot;string&quot; default=&quot;duh...?&quot;/&gt;
        &lt;/opts&gt;
    &lt;/command&gt;
&lt;/syntaxhighlight&gt;

Run build-type again to regenerate the module:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m ProjectBuilder -c build-type -- -type poly -upload -deploy
&lt;/syntaxhighlight&gt;

Run the new workflow command:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m poly -c stammer -- -message cheers
Start: &quot;first workflow command&quot; commands: slither,echo,emit,shine,groovy
begin workflow command (1/5) -&gt; &quot;slither -message cheers&quot; ...
python says: cheers
end workflow command (1/5) -&gt; &quot;slither -message cheers&quot;
begin workflow command (2/5) -&gt; &quot;echo -message cheers&quot; ...
bash says cheers
end workflow command (2/5) -&gt; &quot;echo -message cheers&quot;
begin workflow command (3/5) -&gt; &quot;emit -message cheers&quot; ...
ant says cheers
end workflow command (3/5) -&gt; &quot;emit -message cheers&quot;
begin workflow command (4/5) -&gt; &quot;shine -message cheers&quot; ...
ruby says cheers
end workflow command (4/5) -&gt; &quot;shine -message cheers&quot;
begin workflow command (5/5) -&gt; &quot;groovy -message cheers&quot; ...
groovy says cheers 
end workflow command (5/5) -&gt; &quot;groovy -message cheers&quot;
[command.timer.default.poly.stammer: 16.130 sec]
Workflow completed. execution time: 16.130 sec
&lt;/syntaxhighlight&gt;


{{Manual/navbox}}

[[Category:Modules]]
[[Category:Screencasts]]</text>
    </revision>
  </page>
  <page>
    <title>ForAll Type Reference</title>
    <id>156</id>
    <revision>
      <id>11435</id>
      <timestamp>2009-12-14T23:36:02Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Types&lt;/categorytree&gt;

==Description==
      &lt;p&gt;
	The forall type iterates over the results of a FunctionMapperInputGenerator.
      &lt;/p&gt;


==Parameters specified as nested elements==

      &lt;p&gt;&lt;strong&gt;input generator&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
        Any [[:Category:ApplyMacro Ant Type]]
      &lt;/p&gt;

==Examples==
Iterate over two result sets form propertiesquery:
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
                 &lt;forall&gt;
                    &lt;propertiesquery
                        select=&quot;dType,dObject&quot;
                        from=&quot;service\.([^\.]*)\.(.*)\.startup-rank&quot;&gt;
                        &lt;sortby&gt;
                            &lt;select by=&quot;value&quot; order=&quot;ascending&quot;/&gt;
                        &lt;/sortby&gt;
                    &lt;/propertiesquery&gt;
                    &lt;forall&gt;
                        &lt;propertiesquery
                            select=&quot;pType,pObject&quot;
                            from=&quot;package\.([^\.]*)\.(.*)\.package-version&quot;&gt;
                            &lt;sortby&gt;
                                &lt;select by=&quot;value&quot; order=&quot;ascending&quot;/&gt;
                            &lt;/sortby&gt;
                        &lt;/propertiesquery&gt;
                    &lt;/forall&gt;
&lt;/syntaxhighlight&gt;
&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Command Dispatcher Ant Types]]
[[Category:ApplyMacro Ant Type]]</text>
    </revision>
  </page>
  <page>
    <title>Framework.properties</title>
    <id>130</id>
    <revision>
      <id>10204</id>
      <timestamp>2009-12-11T18:08:28Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">The &lt;code&gt;framework.properties&lt;/code&gt; is a [[ControlTier client]] configuration file.

The file is produced during the [[installation]] process and reflects the set of default and user specified settings.

==Use==
The framework.properties is used throughout the CTL framework during runtime 
* The internal command dispatcher 
** reads it to locate key directories,
** included in the data binding for any defined command
* All CTL shell tools read it to lookup key installation details

==Location==
This configuration file is located within the &quot;etc&quot; directory of the CTL_BASE directory:

&lt;code&gt;$CTL_BASE/etc/framework.properties&lt;/code&gt;

''Example''

&lt;pre&gt;/Users/alexh/ctier/ctl/etc/framework.properties&lt;/pre&gt;

==Format==

This configuration file uses Java [http://en.wikipedia.org/wiki/.properties properties] format of key/value pairs. Keys are based on a dotted notation that identify the kind of entry.

The framework.properties file contains many settings, each of which are documented by comments in the file. Refer to the file for more detail about each setting.

[[Category:CTL properties]]</text>
    </revision>
  </page>
  <page>
    <title>Generating Configuration Files</title>
    <id>692</id>
    <revision>
      <id>13887</id>
      <timestamp>2010-11-10T15:21:41Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot; -o &quot; to &quot; -r &quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Transforms&lt;/categorytree&gt;
This page describes strategies for generating configuration files for a [[Deployment]] resource.

==Configuration Life-cycle==
An aspect of the deployment life cycle is generating configuration. Often this resolves down to producing customized configuration files based on an input of environment information.

Software configuration is supported by a standard set of [[Deployment]] commands:

* Configure: Runs the configuration cycle for the deployment. {{Core Type Command Reference|Deployment|Configure}}
* Docs-Generate: Generate the configured template-based documents. (called by Configure) {{Core Type Command Reference|Deployment|Docs-Generate}}
* Docs-Verify: Verify the documents generated by Docs-Generate. {{Core Type Command Reference|Deployment|Docs-Verify}}

The &lt;code&gt;Configure&lt;/code&gt; command is called by the &lt;code&gt;Deploy&lt;/code&gt; workflow and follows after the {{Core Type Command Reference|Deployment|Packages-Install}} command.

==Generation Strategies==
The following sections describe various strategies for generating configuration files.

==Registered Document Transforms==

{{Workbench/Document Transforms}}

==Overridden Configure Workflow==
The default &quot;Docs-Generate&quot; command is sufficient for many use cases. Where completely custom logic is needed, it is best to override the Configure workflow, usually overriding the &quot;Docs-Generate&quot; command directly.

The kind of custom logic required will be based on your particular use case but often there are two reasons:
# The data needed as input to a template must be programatically obtained. The data may be derived from object properties or obtained from an external source.
# The file being generated is not from a simple token substitution template but is programatically written.

The following sections provide tips for how you might go about implementing either kind of logic. Be aware that these are only suggestions that illustrate rough strategies as your needs will be very specific.

===Override Docs-Generate===

The first step is to override the &lt;code&gt;Docs-Generate&lt;/code&gt; to replace its implementation with your own. The general instructions for overriding an inherited command are found here: [[Override an inherited command]].
You might also create an entirely separate command (naming it whatever you want) and override the Configure workflow to include it.

The examples below override Docs-Generate. Keep in mind it is important to preserve existing options when overriding an inherited command.

Be sure that you define these options when overriding Docs-Generate:
&lt;pre&gt;Docs-Generate [-archivedir &lt;${resource.instance.dir}/var&gt;] [-buildstamp &lt;&gt;]&lt;/pre&gt;

===Programmatic data access===
This section describes scenarios where the data required is not only from the object's properties. 
The examples use [[Ant command]] implementations but you can implement Docs-Generate using the approach you prefer (e.g, [[Shell command|shell]], [[BSF command|BSF]]).
Ant command implementations are useful because tasks exist for simple filter-based token substitution.

====Derived data====
Derived data is any kind that is computed from the data in the object's context. For example, you might need to calculate a number representing a counter index, a date or time, or a string of concatenated values.

Below is an example &quot;Docs-Generate&quot; that defines two values and passes them in as named tokens via the Ant copy task.
&lt;pre&gt;
&lt;command name=&quot;Docs-Generate&quot; description=&quot;Docs-Generate example showing derived data.&quot; 
       command-type=&quot;AntCommand&quot; &gt;
&lt;implementation&gt;
  &lt;!--
      make a calculation 
  --&gt;
  &lt;math result=&quot;buildstampPlus3&quot; operand1=&quot;3&quot; operation=&quot;+&quot; operand2=&quot;${opts.buildstamp}&quot; datatype=&quot;int&quot;/&gt;
  &lt;!-- 
       generate a date/time stamp
  --&gt;
  &lt;tstamp&gt;
    &lt;format property=&quot;dstamp&quot; pattern=&quot;d-MMMM-yyyy&quot; locale=&quot;en,UK&quot;/&gt;
  &lt;/tstamp&gt;

  &lt;!-- 
       Copy a set of files to a directory, replacing @BUILD_OFFSET@ and @TODAY@ in all files.
  --&gt;
  &lt;copy todir=&quot;${resource.instance.dir}/var&quot;&gt;
    &lt;fileset dir=&quot;${module.dir}/templates&quot;/&gt;
    &lt;filterset filtersfile=&quot;${resource.properties.file}&quot;&gt;
      &lt;filter token=&quot;BUILD_OFFSET&quot; value=&quot;${buildstampPlus3}&quot;/&gt;
      &lt;filter token=&quot;TODAY&quot; value=&quot;${dstamp}&quot;/&gt;
    &lt;/filterset&gt;
  &lt;/copy&gt;
&lt;/implementation&gt;
&lt;opts&gt;
  &lt;opt parameter=&quot;archivedir&quot; description=&quot;dir to preserve current output docs&quot; 
       required=&quot;false&quot; property=&quot;opts.archivedir&quot; type=&quot;string&quot;
       default=&quot;${resource.instance.dir}/var/archived&quot;/&gt;
  &lt;opt parameter=&quot;buildstamp&quot; description=&quot;build identifer. currently ignored&quot;
       required=&quot;false&quot; property=&quot;opts.buildstamp&quot; type=&quot;string&quot;
       default=&quot;0&quot;/&gt;
&lt;/opts&gt;
&lt;/command&gt;
&lt;/pre&gt;

The first value, buildstampPlus3, defines a hypothetical offset referenced as &quot;BUILD_OFFSET&quot; in the template files.
The second value, dstamp, defines a datestamp referenced as &quot;TODAY&quot;.
Also note, that the object's properties are also included via the &lt;code&gt;filtersfile&lt;/code&gt; attribute. This allows you to use any of those property key names as tokens inside the template files, too.

====Data from other objects====

The data needed as input to your generated document may exist in another object. This object may be associated by parent or child relationship or may be arbitrarily specified.

The simplest method to get data about another object is via the [[GetProperties_Task_Reference|get-properties]] Ant task.

The example below obtains the properties for the Node object registered for the local CTL instance:
&lt;pre&gt;
&lt;command name=&quot;Docs-Generate&quot; description=&quot;Docs-Generate example showing data retrieved from another object.&quot; 
       command-type=&quot;AntCommand&quot; &gt;
&lt;implementation&gt;
  &lt;!--
  Get the properties for the local CTL Node
  --&gt;
   &lt;get-properties serverUrl=&quot;${framework.server.url}&quot;
                   depot=&quot;${context.depot}&quot;
                   resultproperty=&quot;rs&quot;
                   comment=&quot;none&quot;
	       destdir=&quot;${resource.instance.dir}/var&quot;
	       destfile=&quot;node-info.properties&quot;
	       &gt;
     &lt;context direction=&quot;internal&quot; proximity=&quot;1&quot;
	      resourceName=&quot;${framework.node.name}&quot; resourceType=&quot;${framework.node.type}&quot;/&gt;
    &lt;/get-properties&gt;
&lt;!--
    Read the node property file prefixing each property name with the &quot;node.&quot;
--&gt;
&lt;property file=&quot;${resource.instance.dir}/var/node-info.properties&quot; prefix=&quot;node&quot;/&gt;
&lt;!-- You can use the echoproperties task to print all the obtained properties:
&lt;echoproperties prefix=&quot;node&quot;/&gt;

eg,

node.resource.hostname=strongbad
node.resource.os-arch=i386
node.resource.os-family=unix
node.resource.os-name=Mac OS X
node.resource.os-version=10.5.6
--&gt;
  &lt;!-- 
       Copy a set of files to a directory, replacing @HOSTNAME@, @ARCH@, @OSFAMILY@, @OSNAME@ and @OSVERSION@ in all files.
  --&gt;
  &lt;copy todir=&quot;${resource.instance.dir}/var&quot;&gt;
    &lt;fileset dir=&quot;${module.dir}/templates&quot;/&gt;
    &lt;filterset&gt;
      &lt;filter token=&quot;HOSTNAME&quot; value=&quot;${node.resource.hostname}&quot;/&gt;
      &lt;filter token=&quot;ARCH&quot; value=&quot;${node.resource.os-arch}&quot;/&gt;
      &lt;filter token=&quot;OSFAMILY&quot; value=&quot;${node.resource.os-family}&quot;/&gt;
      &lt;filter token=&quot;OSNAME&quot; value=&quot;${node.resource.os-name}&quot;/&gt;
      &lt;filter token=&quot;OSVERSION&quot; value=&quot;${node.resource.os-version}&quot;/&gt;
    &lt;/filterset&gt;
  &lt;/copy&gt;
&lt;/implementation&gt;
&lt;opts&gt;
  &lt;opt parameter=&quot;archivedir&quot; description=&quot;dir to preserve current output docs&quot; 
       required=&quot;false&quot; property=&quot;opts.archivedir&quot; type=&quot;string&quot;
       default=&quot;${resource.instance.dir}/var/archived&quot;/&gt;
  &lt;opt parameter=&quot;buildstamp&quot; description=&quot;build identifer. currently ignored&quot;
       required=&quot;false&quot; property=&quot;opts.buildstamp&quot; type=&quot;string&quot;
       default=&quot;0&quot;/&gt;
&lt;/opts&gt;
&lt;/command&gt;
&lt;/pre&gt;

This example defines several tokens (HOSTNAME, ARCH, OSFAMILY, OSNAME, OSVERSION) each associated with a value from the Node's properties.

====Data from an external source====

The generated documents may require data input from an external tool. In this case, the goal is
to make the external call and save the output into a format that is convenient for your template and template processor.

The example below calls out to the Subversion client via shell command and saves the output into XML.
The Ant task, [http://ant.apache.org/manual/CoreTasks/xmlproperty.html xmlproperty], is used to read the
XML content and generate Ant properties. Once in property form, several named tokens are defined for processing by the Ant copy task and filterset type.

&lt;pre&gt;
&lt;command name=&quot;Docs-Generate&quot; description=&quot;Docs-Generate example showing data retrieved from external source.&quot; 
	       command-type=&quot;AntCommand&quot;&gt;
	&lt;implementation&gt;
	  &lt;!--
	  Get the data from an external source: Subversion change revision info
	  --&gt;
	  &lt;var name=&quot;vinfo.output&quot; unset=&quot;true&quot;/&gt;
          &lt;tempfile property=&quot;vinfo.output&quot; destdir=&quot;${resource.instance.dir}/var&quot; suffix=&quot;.out&quot;/&gt;

          &lt;echo&gt;Checking &amp;quot;${opts.connection}&amp;quot; for the last changed revision ...&lt;/echo&gt;

	  &lt;exec executable=&quot;svn&quot; output=&quot;${vinfo.output}&quot;&gt;
	    &lt;arg line=&quot;info --xml --non-interactive ${opts.connection}&quot;/&gt;
	  &lt;/exec&gt;

	  &lt;!--
	      Read the generated xml file prefixing each property name with the &quot;svn.&quot;
	  --&gt;
	  &lt;xmlproperty file=&quot;${vinfo.output}&quot; prefix=&quot;svn&quot; collapseAttributes=&quot;true&quot;/&gt;
	&lt;!-- You can use the echoproperties task to print all the obtained properties:
	&lt;echoproperties prefix=&quot;svn&quot;/&gt;

	eg,

#Ant properties
#Wed Mar 25 11:10:30 PDT 2009
svn.info.entry.commit.author=gschueler
svn.info.entry.commit.date=2009-03-24T19\:35\:00.124507Z
svn.info.entry.commit.revision=9107
svn.info.entry.kind=dir
svn.info.entry.path=branches
svn.info.entry.repository.root=http\://controltier.svn.sourceforge.net/svnroot/controltier
svn.info.entry.repository.uuid=07ebc575-2234-0410-9739-bcfe40894a14
svn.info.entry.revision=9107
svn.info.entry.url=http\://controltier.svn.sourceforge.net/svnroot/controltier/branches
	--&gt;
	  &lt;!-- 
	       Copy a set of files to a directory, replacing @AUTHOR@, @REVISION@, @DATE@ in all files.
	  --&gt;
	  &lt;copy todir=&quot;${resource.instance.dir}/var&quot;&gt;
	    &lt;fileset dir=&quot;${module.dir}/templates&quot;/&gt;
	    &lt;filterset&gt;
	      &lt;filter token=&quot;AUTHOR&quot; value=&quot;${svn.info.entry.commit.author}&quot;/&gt;
	      &lt;filter token=&quot;REVISION&quot; value=&quot;${svn.info.entry.revision}&quot;/&gt;
	      &lt;filter token=&quot;DATE&quot; value=&quot;${svn.info.entry.commit.date}&quot;/&gt;
	    &lt;/filterset&gt;
	  &lt;/copy&gt;
	&lt;/implementation&gt;
	&lt;opts&gt;
	  &lt;opt parameter=&quot;connection&quot; description=&quot;The SCM connection string&quot; 
	       required=&quot;true&quot; property=&quot;opts.connection&quot; type=&quot;string&quot;/&gt;
	  &lt;opt parameter=&quot;archivedir&quot; description=&quot;dir to preserve current output docs&quot; 
	       required=&quot;false&quot; property=&quot;opts.archivedir&quot; type=&quot;string&quot;
	       default=&quot;${resource.instance.dir}/var/archived&quot;/&gt;
	  &lt;opt parameter=&quot;buildstamp&quot; description=&quot;build identifer. currently ignored&quot;
	       required=&quot;false&quot; property=&quot;opts.buildstamp&quot; type=&quot;string&quot;
	       default=&quot;0&quot;/&gt;
	&lt;/opts&gt;
&lt;/command&gt;
&lt;/pre&gt;

===Program generated output===
There are cases when simple token substitution template files are insufficient to generate the needed configuration files.
This is a difference between content and structure:
* content differences are a matter of different values used in the same places in a template
* structure differences are a matter of the file size and arrangement being different
There are basically two approaches used for these cases: XSLT transforms and ad-hoc.

=====XSLT Transforms=====
XSLT transforms are based on an XML input and an [http://www.w3.org/TR/xslt XSL] style sheet used as a template.
XSLT transform documents are supported by the [[ControlTier server]] allowing you to maintain the style sheet on the server and have the server generate it for you. The results are saved locally.

The example below calls the &lt;code&gt;transform&lt;/code&gt; task to have the server process an XSL template using the specified object's model as input. Internally, the server provides the model data as XML and then executes the transformation using the specified template.

&lt;pre&gt;
&lt;command name=&quot;Docs-Generate&quot; description=&quot;Docs-Generate example showing server side XSLT transform.&quot; 
       command-type=&quot;AntCommand&quot; &gt;
&lt;implementation&gt;
  &lt;transform depot=&quot;${context.depot}&quot;
	     resultproperty=&quot;transform.result&quot; 
	     comment=&quot;the JBoss @{file} configuration&quot;
	     destdir=&quot;${resource.instance.dir}&quot;
	     destfile=&quot;document.out&quot;
	     &gt;
    &lt;context   direction=&quot;internal&quot; proximity=&quot;1&quot; 
	       maprefUri=&quot;${resource.mapref-uri}&quot;  /&gt;
    &lt;template  type=&quot;xsl&quot;
	       file=&quot;ctl-entity-properties.xsl&quot; 
	       dir=&quot;/templates&quot; /&gt;
  &lt;/transform&gt;
&lt;/implementation&gt;
&lt;opts&gt;	 
  &lt;opt parameter=&quot;archivedir&quot; description=&quot;dir to preserve current output docs&quot; 
       required=&quot;false&quot; property=&quot;opts.archivedir&quot; type=&quot;string&quot;
       default=&quot;${resource.instance.dir}/var/archived&quot;/&gt;
  &lt;opt parameter=&quot;buildstamp&quot; description=&quot;build identifer. currently ignored&quot;
       required=&quot;false&quot; property=&quot;opts.buildstamp&quot; type=&quot;string&quot;
       default=&quot;0&quot;/&gt;
&lt;/opts&gt;
&lt;/command&gt;
&lt;/pre&gt;

Alternatively, you can use an XSLT processor that is local to the client (such as the Ant [http://ant.apache.org/manual/CoreTasks/style.html XSLT task]).

=====Ad-hoc Generation=====
Ad-hoc generation of configuration files basically means, anything goes.
The use case here is the file that will be generated must be done via a program.
Your requirements dictate the logic of the program but may include 
* conditionals based on environment
* iterating over a set of values
* including or excluding stanzas of content
* may utilize one or more template file fragments

The following example implements &quot;Docs-Generate&quot; as a [[BSF_command]] type using the Groovy scripting language.
The example produces a hypothetical configuration file called &quot;foo.ini&quot; using a simple key/value pair format.

&lt;pre&gt;
&lt;command name=&quot;Docs-Generate&quot; description=&quot;Docs-Generate example showing ad-hoc generation.&quot; 
       command-type=&quot;BsfCommand&quot;&gt;
    &lt;script language=&quot;groovy&quot;&gt;&lt;![CDATA[

      // define some data. this data could be from any source mentioned in earlier sections
      def fields = [&quot;a&quot;:&quot;1&quot;, &quot;b&quot;:&quot;2&quot;, &quot;c&quot;:&quot;3&quot;]

      // open the destination file for write action
      new File(project.properties['resource.instance.dir'], &quot;foo.ini&quot;).withWriter { out -&gt;

      // add a comment
      out.writeLine(&quot;# Do not edit! This file was program generated.&quot;)

      // add the boilerplate config stuff

      out.writeLine(&quot;foo=bar&quot;)
      out.writeLine(&quot;bar=baz&quot;)

      // now iterate through the data set
      fields.each() { key, value -&gt;

          // implement some conditional logic
          if (true) {

	         // write a new line to the destination file:
	         out.writeLine(&quot;${key}=${value}&quot;)
	      }
      }
  }
  println &quot;wrote: ${project.properties['resource.instance.dir']}/foo.ini&quot;
]]&gt;&lt;/script&gt;
&lt;opts&gt;	 
  &lt;opt parameter=&quot;archivedir&quot; description=&quot;dir to preserve current output docs&quot; 
       required=&quot;false&quot; property=&quot;opts.archivedir&quot; type=&quot;string&quot;
       default=&quot;${resource.instance.dir}/var/archived&quot;/&gt;
  &lt;opt parameter=&quot;buildstamp&quot; description=&quot;build identifer. currently ignored&quot;
       required=&quot;false&quot; property=&quot;opts.buildstamp&quot; type=&quot;string&quot;
       default=&quot;0&quot;/&gt;
&lt;/opts&gt;
&lt;/command&gt;
&lt;/pre&gt;

The result of this Docs-Generate is a file with the following content:
&lt;pre&gt;
# Do not edit! This file was program generated.
foo=bar
bar=baz
a=1
b=2
c=3
&lt;/pre&gt;

==Running Docs-Generate==

The usage for Docs-Generate is as follows: ctl -p ''project'' -t ''type'' -r ''object'' -c Docs-Generate


==Appendix==
===Example type.xml===

Here is a complete file listing of a type.xml containing the examples mentioned in this page.
You can build this type by first creating the module source tree via ProjectBuilder's &lt;code&gt;create-type&lt;/code&gt; command:
&lt;pre&gt;
	ctl -p demo -m ProjectBuilder -c create-type -- -type ConfigGeneration -supertype Deployment 
&lt;/pre&gt;
Then replace the generated type.xml from create-type with the content shown below.

&lt;pre&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;

&lt;!--
This document is used to define one or more Types.
For reference, see: http://apps.sourceforge.net/mediawiki/controltier/index.php?title=Type-v10.xml
--&gt;
&lt;types
    xmlns:module=&quot;http://open.controltier.com/base/Modules#&quot;
    xmlns:type=&quot;http://open.controltier.com/base/Types#&quot;
    xmlns:cmd=&quot;http://open.controltier.com/base/Modules/Commands#&quot;&gt;

  &lt;!-- The type element defines a Type and command module. --&gt;
  &lt;type
      name=&quot;ConfigGeneration&quot;
      role=&quot;concrete&quot;
      uniqueInstances=&quot;true&quot;&gt;

    &lt;!-- description of the Type --&gt;
    &lt;description&gt;examples for config file generation&lt;/description&gt;

    &lt;supertype&gt;
      &lt;!-- supertype/typereference: defines the supertype of the Type --&gt;
      &lt;typereference name=&quot;Deployment&quot;/&gt;
    &lt;/supertype&gt;

    &lt;command-settings&gt;
      &lt;!-- command-settings: properties of the command module --&gt;
      &lt;!-- See Wiki: --&gt;
      &lt;!-- http://apps.sourceforge.net/mediawiki/controltier/index.php?title=Type-v10.xml#command-settings --&gt;
      &lt;notification notify=&quot;false&quot;/&gt;
      &lt;template-directory&gt;&lt;/template-directory&gt;
      &lt;dependency-view parents=&quot;false&quot; children=&quot;true&quot; proximity=&quot;1&quot;/&gt;
      &lt;logger name=&quot;ConfigGeneration&quot;/&gt;
    &lt;/command-settings&gt;


    &lt;attributes&gt;
      &lt;!-- Define attributes of the Type here --&gt;
      &lt;!-- See Wiki: --&gt;
      &lt;!-- http://apps.sourceforge.net/mediawiki/controltier/index.php?title=Type-v10.xml#attributes --&gt;

    &lt;/attributes&gt;

    &lt;constraints&gt;
      &lt;!-- Define constraints of the Type here --&gt;
      &lt;!-- See Wiki:  --&gt;
      &lt;!-- http://apps.sourceforge.net/mediawiki/controltier/index.php?title=Type-v10.xml#constraints --&gt;

    &lt;/constraints&gt;

    &lt;commands&gt;
      &lt;!-- Define commands here --&gt;
      &lt;!-- See the Documentation on the ControlTier Wiki: --&gt;
      &lt;!-- http://apps.sourceforge.net/mediawiki/controltier/index.php?title=Type-v10.xml#commands --&gt;


      &lt;command name=&quot;Docs-Generate-1&quot; description=&quot;Docs-Generate example showing derived data.&quot; 
	       command-type=&quot;AntCommand&quot; &gt;
	&lt;implementation&gt;
	  &lt;!--
	      make a calculation 
	  --&gt;
	  &lt;math result=&quot;buildstampPlus3&quot; operand1=&quot;3&quot; operation=&quot;+&quot; operand2=&quot;${opts.buildstamp}&quot; datatype=&quot;int&quot;/&gt;
	  &lt;!-- 
	       generate a datetime stamp
	  --&gt;
	  &lt;tstamp&gt;
	    &lt;format property=&quot;TODAY_UK&quot; pattern=&quot;d-MMMM-yyyy&quot; locale=&quot;en,UK&quot;/&gt;
	  &lt;/tstamp&gt;

	  &lt;!-- 
	       Copy a set of files to a directory, replacing @BUILD_OFFSET@ and @TODAY@ in all files.
	  --&gt;
	  &lt;copy todir=&quot;${resource.instance.dir}/var&quot;&gt;
	    &lt;fileset dir=&quot;${module.dir}/templates&quot;/&gt;
	    &lt;filterset filtersfile=&quot;${resource.properties.file}&quot;&gt;
	      &lt;filter token=&quot;BUILD_OFFSET&quot; value=&quot;${buildstampPlus3}&quot;/&gt;
	      &lt;filter token=&quot;TODAY&quot; value=&quot;${TODAY_UK}&quot;/&gt;
	    &lt;/filterset&gt;
	  &lt;/copy&gt;
	&lt;/implementation&gt;
	&lt;opts&gt;
	  &lt;opt parameter=&quot;archivedir&quot; description=&quot;dir to preserve current output docs&quot; 
	       required=&quot;false&quot; property=&quot;opts.archivedir&quot; type=&quot;string&quot;
	       default=&quot;${resource.instance.dir}/var/archived&quot;/&gt;
	  &lt;opt parameter=&quot;buildstamp&quot; description=&quot;build identifer. currently ignored&quot;
	       required=&quot;false&quot; property=&quot;opts.buildstamp&quot; type=&quot;string&quot;
	       default=&quot;0&quot;/&gt;
	&lt;/opts&gt;
      &lt;/command&gt;

      &lt;command name=&quot;Docs-Generate-2&quot; description=&quot;Docs-Generate example showing data retrieved from another object.&quot; 
	       command-type=&quot;AntCommand&quot; &gt;
	&lt;implementation&gt;
	  &lt;!--
	      Get the properties for the local CTL Node
	  --&gt;
	  &lt;get-properties serverUrl=&quot;${framework.server.url}&quot;
			  depot=&quot;${context.depot}&quot;
			  resultproperty=&quot;rs&quot;
			  comment=&quot;none&quot;
			  destdir=&quot;${resource.instance.dir}/var&quot;
			  destfile=&quot;node-info.properties&quot;
			  &gt;
	    &lt;context direction=&quot;internal&quot; proximity=&quot;1&quot;
		     resourceName=&quot;${framework.node.name}&quot; resourceType=&quot;${framework.node.type}&quot;/&gt;
	  &lt;/get-properties&gt;
	  &lt;!--
	      Read the node property file prefixing each property name with the &quot;node.&quot;
	  --&gt;
	  &lt;property file=&quot;${resource.instance.dir}/var/node-info.properties&quot; prefix=&quot;node&quot;/&gt;
	  &lt;!-- You can use the echoproperties task to print all the obtained properties:
	       &lt;echoproperties prefix=&quot;node&quot;/&gt;

eg,

node.resource.hostname=strongbad
node.resource.os-arch=i386
node.resource.os-family=unix
node.resource.os-name=Mac OS X
node.resource.os-version=10.5.6
	  --&gt;
	  &lt;!-- 
	       Copy a set of files to a directory, replacing @BUILD_OFFSET@ and @TODAY@ in all files.
	  --&gt;
	  &lt;copy todir=&quot;${resource.instance.dir}/var&quot;&gt;
	    &lt;fileset dir=&quot;${module.dir}/templates&quot;/&gt;
	    &lt;filterset&gt;
	      &lt;filter token=&quot;HOSTNAME&quot; value=&quot;${node.resource.hostname}&quot;/&gt;
	      &lt;filter token=&quot;ARCH&quot; value=&quot;${node.resource.os-arch}&quot;/&gt;
	      &lt;filter token=&quot;OSFAMILY&quot; value=&quot;${node.resource.os-family}&quot;/&gt;
	      &lt;filter token=&quot;OSNAME&quot; value=&quot;${node.resource.os-name}&quot;/&gt;
	      &lt;filter token=&quot;OSVERSION&quot; value=&quot;${node.resource.os-version}&quot;/&gt;
	    &lt;/filterset&gt;
	  &lt;/copy&gt;
	&lt;/implementation&gt;
	&lt;opts&gt;
	  &lt;opt parameter=&quot;archivedir&quot; description=&quot;dir to preserve current output docs&quot; 
	       required=&quot;false&quot; property=&quot;opts.archivedir&quot; type=&quot;string&quot;
	       default=&quot;${resource.instance.dir}/var/archived&quot;/&gt;
	  &lt;opt parameter=&quot;buildstamp&quot; description=&quot;build identifer. currently ignored&quot;
	       required=&quot;false&quot; property=&quot;opts.buildstamp&quot; type=&quot;string&quot;
	       default=&quot;0&quot;/&gt;
	&lt;/opts&gt;
      &lt;/command&gt;

      &lt;command name=&quot;Docs-Generate-3&quot; description=&quot;Docs-Generate example showing data retrieved from external source.&quot; 
	       command-type=&quot;AntCommand&quot; &gt;
	&lt;implementation&gt;
	  &lt;!--
	      Get the data from an external source: Subversion change revision info
	  --&gt;
	  &lt;var name=&quot;vinfo.output&quot; unset=&quot;true&quot;/&gt;
	  &lt;tempfile property=&quot;vinfo.output&quot; destdir=&quot;${resource.instance.dir}/var&quot; suffix=&quot;.out&quot;/&gt;

	  &lt;echo&gt;Checking &amp;quot;${opts.connection}&amp;quot; for the last changed revision ...&lt;/echo&gt;

	  &lt;exec executable=&quot;svn&quot; output=&quot;${vinfo.output}&quot;&gt;
	    &lt;arg line=&quot;info --xml --non-interactive ${opts.connection}&quot;/&gt;
	  &lt;/exec&gt;

	  &lt;!--
	      Read the generated xml file prefixing each property name with the &quot;svn.&quot;
	  --&gt;
	  &lt;xmlproperty file=&quot;${vinfo.output}&quot; prefix=&quot;svn&quot; collapseAttributes=&quot;true&quot;/&gt;
	  &lt;!-- You can use the echoproperties task to print all the obtained properties:
	       &lt;echoproperties prefix=&quot;svn&quot;/&gt;

eg,

#Ant properties
#Wed Mar 25 11:10:30 PDT 2009
svn.info.entry.commit.author=gschueler
svn.info.entry.commit.date=2009-03-24T19\:35\:00.124507Z
svn.info.entry.commit.revision=9107
svn.info.entry.kind=dir
svn.info.entry.path=branches
svn.info.entry.repository.root=http\://controltier.svn.sourceforge.net/svnroot/controltier
svn.info.entry.repository.uuid=07ebc575-2234-0410-9739-bcfe40894a14
svn.info.entry.revision=9107
svn.info.entry.url=http\://controltier.svn.sourceforge.net/svnroot/controltier/branches
	  --&gt;
	  &lt;!-- 
	       Copy a set of files to a directory, replacing @AUTHOR@, @REVISION@, @DATE@ in all files.
	  --&gt;
	  &lt;copy todir=&quot;${resource.instance.dir}/var&quot;&gt;
	    &lt;fileset dir=&quot;${module.dir}/templates&quot;/&gt;
	    &lt;filterset&gt;
	      &lt;filter token=&quot;AUTHOR&quot; value=&quot;${svn.info.entry.commit.author}&quot;/&gt;
	      &lt;filter token=&quot;REVISION&quot; value=&quot;${svn.info.entry.revision}&quot;/&gt;
	      &lt;filter token=&quot;DATE&quot; value=&quot;${svn.info.entry.commit.date}&quot;/&gt;
	    &lt;/filterset&gt;
	  &lt;/copy&gt;
	&lt;/implementation&gt;
	&lt;opts&gt;
	  &lt;opt parameter=&quot;connection&quot; description=&quot;The SCM connection string&quot; 
	       required=&quot;true&quot; property=&quot;opts.connection&quot; type=&quot;string&quot;/&gt;
	  &lt;opt parameter=&quot;archivedir&quot; description=&quot;dir to preserve current output docs&quot; 
	       required=&quot;false&quot; property=&quot;opts.archivedir&quot; type=&quot;string&quot;
	       default=&quot;${resource.instance.dir}/var/archived&quot;/&gt;
	  &lt;opt parameter=&quot;buildstamp&quot; description=&quot;build identifer. currently ignored&quot;
	       required=&quot;false&quot; property=&quot;opts.buildstamp&quot; type=&quot;string&quot;
	       default=&quot;0&quot;/&gt;
	&lt;/opts&gt;
      &lt;/command&gt;

      &lt;command name=&quot;Docs-Generate-4&quot; description=&quot;Docs-Generate example showing server side XSLT transform.&quot; 
	       command-type=&quot;AntCommand&quot; &gt;
	&lt;implementation&gt;
	  &lt;transform depot=&quot;${context.depot}&quot;
		     resultproperty=&quot;transform.result&quot; 
		     comment=&quot;the JBoss @{file} configuration&quot;
		     destdir=&quot;${resource.instance.dir}&quot;
		     destfile=&quot;document.out&quot;
		     &gt;
	    &lt;context   direction=&quot;internal&quot; proximity=&quot;1&quot; 
		       maprefUri=&quot;${resource.mapref-uri}&quot;  /&gt;
	    &lt;template  type=&quot;xsl&quot;
		       file=&quot;ctl-entity-properties.xsl&quot; 
		       dir=&quot;/templates&quot; /&gt;
	  &lt;/transform&gt;
	&lt;/implementation&gt;
	&lt;opts&gt;	 
	  &lt;opt parameter=&quot;archivedir&quot; description=&quot;dir to preserve current output docs&quot; 
	       required=&quot;false&quot; property=&quot;opts.archivedir&quot; type=&quot;string&quot;
	       default=&quot;${resource.instance.dir}/var/archived&quot;/&gt;
	  &lt;opt parameter=&quot;buildstamp&quot; description=&quot;build identifer. currently ignored&quot;
	       required=&quot;false&quot; property=&quot;opts.buildstamp&quot; type=&quot;string&quot;
	       default=&quot;0&quot;/&gt;
	&lt;/opts&gt;
      &lt;/command&gt;


      &lt;command name=&quot;Docs-Generate-5&quot; description=&quot;Docs-Generate example showing ad-hoc generation.&quot; 
	       command-type=&quot;BsfCommand&quot; &gt;
	&lt;script language=&quot;groovy&quot;&gt;&lt;![CDATA[
	  // define some data. this data could be from any source mentioned in earlier sections
          def fields = [&quot;a&quot;:&quot;1&quot;, &quot;b&quot;:&quot;2&quot;, &quot;c&quot;:&quot;3&quot;]
	  // open the destination file for write action
	  new File(project.properties['resource.instance.dir'], &quot;foo.ini&quot;).withWriter { out -&gt;
	      // add a comment
	      out.writeLine(&quot;# Do not edit! This file was program generated.&quot;)

	      // add the boilerplate config stuff

	      out.writeLine(&quot;foo=bar&quot;)
	      out.writeLine(&quot;bar=baz&quot;)

	      // now iterate through the data set
	      fields.each() { key, value -&gt;

	          // implement some conditional logic
	          if (true) {
 
		      // write a new line to the destination file:
		      out.writeLine(&quot;${key}=${value}&quot;)
		  }
	      }
	  }
	  println &quot;wrote: ${project.properties['resource.instance.dir']}/foo.ini &quot;
	]]&gt;&lt;/script&gt;
	&lt;opts&gt;	 
	  &lt;opt parameter=&quot;archivedir&quot; description=&quot;dir to preserve current output docs&quot; 
	       required=&quot;false&quot; property=&quot;opts.archivedir&quot; type=&quot;string&quot;
	       default=&quot;${resource.instance.dir}/var/archived&quot;/&gt;
	  &lt;opt parameter=&quot;buildstamp&quot; description=&quot;build identifer. currently ignored&quot;
	       required=&quot;false&quot; property=&quot;opts.buildstamp&quot; type=&quot;string&quot;
	       default=&quot;0&quot;/&gt;
	&lt;/opts&gt;
      &lt;/command&gt;
    &lt;/commands&gt;

  &lt;/type&gt;

  &lt;!--
      Multiple &lt;type&gt; elements are allowed.
  --&gt;
&lt;/types&gt;
&lt;/pre&gt;

{{Manual/navbox}}

[[Category:Transforms]]
[[Category:Configure]]</text>
    </revision>
  </page>
  <page>
    <title>Generating Forrest Sites</title>
    <id>107</id>
    <revision>
      <id>13888</id>
      <timestamp>2010-11-10T15:21:41Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot; -o &quot; to &quot; -r &quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Artifacts&lt;/categorytree&gt;

Part of making your modules ops ready is providing user documentation. CTL was developed to help that handoff and provides a &quot;runbook&quot; document that becomes your reference manual for your module's users.

==Generating a web site==
The [[ProjectBuilder]] module used to develop and build your module also contains support to generate a web site based on those module defintions. The generated web pages reads the type.xml file and generates a document suitable as a reference manual for your module, its attributes, commands, their options and anything else that makes up the definition of your module.

[[Image:generated-docs.png]]

As the figure above illustrates, the tags in the type.xml files for your modules defined in in the modules source directory, are processed and along with some standard templates, an [http://forrest.apache.org/ Apache Forrest] document is generated.

Information is organized into a standard structure, divided up into sections, navigable via a top level table of contents.

* Displays information about your module library in HTML or PDF. Runbook can be deployed to any webserver.
* Gives an overview of your module's content.
* Describes all the attributes in your module along with their defaults.
* Describes all the commands in your module. This includes usage summary, command option description.
* You can embed your own information and graphics via Apache Forrest doc tags.
* Install Apache Forrest

The Runbook generation depends on Apache Forrest 0.8.

Follow these steps:

# [http://forrest.apache.org/mirrors.cgi Download] and install Forrest v.0.8
# Confirm the &lt;code&gt;FORREST_HOME&lt;/code&gt; environment variable is defined. (e.g., &lt;code&gt;echo $FORREST_HOME&lt;/code&gt;).

==Generate the docs==

The ProjectBuilder module includes the &lt;code&gt;[http://controltier.sourceforge.net/docs/latest/core/reference/user/ProjectBuilder/commands/generate-forrest-docs.html generate-forrest-docs]&lt;/code&gt; command to generate the Forrest site. 

Outside an object context run the &lt;code&gt;generate-forrest-docs&lt;/code&gt; command accepting the defaults:
&lt;pre&gt;
ctl -m ProjectBuilder -c generate-forrest-docs
Base directory where module source files reside [/tmp/ctier/ctl/src]

Target directory where build files are generated [/tmp/ctier/ctl/target]

Library name?  [default]

--snip--
&lt;/pre&gt;

Or in an object context:
&lt;pre&gt;
ctl -t ProjectBuilder -r training -c generate-forrest-docs
--snip--
&lt;/pre&gt;

The first time you run the command, a Forrest site will be created  in a new directory called &quot;docs&quot; under your base directory (and parallel to your modules directory). 

You can run the &lt;code&gt;generate-forrest-docs&lt;/code&gt; command any time. Subsequent calls to the command will essentially re-run &quot;forrest site&quot;.

Besides building a Forrest site, the &lt;code&gt;generate-forrest-docs&lt;/code&gt; command also copies a PDF formatted copy of each type's reference into its doc directory: ''type''/doc/type.pdf. This reference is accessible after your module has been deployed and may be useful to end-users of your module.

==Use &quot;doc&quot; tags!==

While the &lt;code&gt;generated-forrest-docs&lt;/code&gt; command does not rely on anything besides the content of your type.xml tags to generate the Forrest site, additional information can be quite useful to end users.

You can insert your own information into the documentation by using Forrest &lt;code&gt;&lt;doc&gt; ... &lt;/doc&gt;&lt;/code&gt; tags. The &lt;code&gt;generated-forrest-docs&lt;/code&gt; command and templates attempt to keep the text inside your &lt;code&gt;doc&lt;/code&gt; tags close to the related element of your type.xml document.

Because you are free to use any Forrest &lt;code&gt;doc&lt;/code&gt; tags you can create some proffesional looking reference pages (including, tables, images, notes, warnings, etc.). See the [http://forrest.apache.org/docs_0_80/index.html Forrest 0.8 Documentation] and note the  [http://forrest.apache.org/dtdx/dtd-docs.html DTD example docs], particularly [http://forrest.apache.org/dtdx/document-v20.dtdx.html document-v20.dtdx.html].

This page [http://forrest.apache.org/dtdx/document-v20.html document-v20.html] is a sample Forrest document with all the &lt;code&gt;doc&lt;/code&gt; tags.

==View the site==

After running the &lt;code&gt;generate-forrest-docs&lt;/code&gt; command you can view the produced output.

* Open the generated &lt;code&gt;doc/build/site/index.html&lt;/code&gt;
* Use &lt;code&gt;forrest run&lt;/code&gt; to view the site via a running Jetty instance. (eg, browsing http://localhost:8888)
* Deploy the generated site.zip to a web server and extract the archive into a visible docroot directory.

=Personalizing the Forrest site=
Besides using Forrest &lt;code&gt;&lt;doc&gt;...&lt;/doc&gt;&lt;/code&gt; tags, you can personalize the Forrest site through a number of settings.

The following ProjectBuilderSettings export attributes referened in the Forrest site template files used by &lt;code&gt;[http://controltier.sourceforge.net/docs/latest/core/reference/user/ProjectBuilder/commands/generate-forrest-docs.html generate-forrest-docs]&lt;/code&gt;:
* [http://controltier.sourceforge.net/docs/latest/core/reference/developer/type_ProjectBuilder.html#type_ProjectBuilderForrestHome ProjectBuilderForrestHome]
* [http://controltier.sourceforge.net/docs/latest/core/reference/developer/type_ProjectBuilder.html#type_ProjectBuilderProjectName ProjectBuilderProjectName]
* [http://controltier.sourceforge.net/docs/latest/core/reference/developer/type_ProjectBuilder.html#type_ProjectBuilderProjectDescription ProjectBuilderProjectDescription]
* [http://controltier.sourceforge.net/docs/latest/core/reference/developer/type_ProjectBuilder.html#type_ProjectBuilderOrganizationName ProjectBuilderOrganizationName]
* [http://controltier.sourceforge.net/docs/latest/core/reference/developer/type_ProjectBuilder.html#type_ProjectBuilderOrganizationDescription ProjectBuilderOrganizationDescription ]
* [http://controltier.sourceforge.net/docs/latest/core/reference/developer/type_ProjectBuilder.html#type_ProjectBuilderOrganizationURL ProjectBuilderOrganizationURL ]
* [http://controltier.sourceforge.net/docs/latest/core/reference/developer/type_ProjectBuilder.html#type_ProjectBuilderProjectURL ProjectBuilderProjectURL]

You can create instances of these Settings and associate those objects as resources to your ProjectBuilder object.

[[Category:ProjectBuilder]]
[[Category:Forrest]]
[[Category:Modules]]</text>
    </revision>
  </page>
  <page>
    <title>Get-opts Task Reference</title>
    <id>143</id>
    <revision>
      <id>13802</id>
      <timestamp>2010-11-10T15:12:15Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;object name&quot; to &quot;resource name&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Tasks&lt;/categorytree&gt;

=Description=

      &lt;p&gt;
	GetOpts task parses the module's commandline options in the tradition of getopt(s) 
      &lt;/p&gt;

=Parameters=
      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;optsValue&lt;/td&gt;&lt;td&gt;The commandline options input (&lt;strong&gt;NOTE&lt;/strong&gt;: optsProperty is deprecated)&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;failonerror&lt;/td&gt;&lt;td&gt;boolean flag for module to fail when get-opts error occurs.&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;errorProperty&lt;/td&gt;&lt;td&gt;property containing error (if any)&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;usageProperty&lt;/td&gt;&lt;td&gt;property to representing module usage (dynamically generated)&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;stopAtNonOption&lt;/td&gt;&lt;td&gt;Optional, if set to true, will modify the behavior of get-opts to stop at the 1st unrecognized property and set property identified by remainingArgsProperty to contain the rest of the command line.  Must be used with remainingArgsProperty attribute.&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;remainingArgsProperty&lt;/td&gt;&lt;td&gt;Optional, when stopAtNonOption is set to true, property name to contain the rest of command line when unrecognized option is encountered.&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;
    
=Parameters specified as nested elements=

      &lt;p&gt;&lt;strong&gt;opts&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
        Exactly one &lt;code&gt;opts&lt;/code&gt; element.
      &lt;/p&gt; 
      &lt;p&gt;
        &lt;strong&gt;NOTE:&lt;/strong&gt; the property ${cmd.line} will contain the options after the -- commandline separator
        and can be used as the input value to the get-opts optsValue attribute.
      &lt;/p&gt;

=Examples=

     &lt;p&gt;
       process module command line arguments 
      &lt;/p&gt;
      &lt;pre&gt;
        &amp;lt;get-opts optsValue=&quot;-object myObject -restart&quot;
                     failonerror=&quot;true&quot;
                     errorProperty=&quot;mymodule.error&quot;
                     usageProperty=&quot;mymodule.usage&quot;&amp;gt;
           &amp;lt;opts&amp;gt;
              &amp;lt;opt parameter=&quot;object&quot;
                      type=&quot;string&quot;
                      property=&quot;object.value&quot;
                      required=&quot;true&quot;
                      description=&quot;resource name&quot;/&amp;gt;

              &amp;lt;opt parameter=&quot;type&quot;
                      type=&quot;string&quot;
                      property=&quot;type.value&quot;
                      required=&quot;false&quot;
                      default=&quot;MyType&quot;
                      description=&quot;optional type&quot;/&amp;gt;

              &amp;lt;opt parameter=&quot;restart&quot;
                      type=&quot;boolean&quot;
                      property=&quot;restart.value&quot;
                      required=&quot;true&quot;
                      description=&quot;restart flag&quot;/&amp;gt;

           &amp;lt;/opts&amp;gt;
        &amp;lt;/get-opts&amp;gt;
      &lt;/pre&gt;

&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Command Dispatcher Ant Tasks]]
[[Category:Command Options]]</text>
    </revision>
  </page>
  <page>
    <title>Get-properties Task Reference</title>
    <id>164</id>
    <revision>
      <id>13396</id>
      <timestamp>2010-11-10T01:31:44Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;entityClass&quot; to &quot;resourceType&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Tasks&lt;/categorytree&gt;

=Description=
      &lt;p&gt;
	The Get-Properties task requests the property view for a specified [[Resource]].	
      &lt;/p&gt;
    
=Parameters specified as attributes=
      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;depot&lt;/td&gt;&lt;td&gt;The project to update&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;resultproperty&lt;/td&gt;&lt;td&gt;Property to set with
	  success/fail value&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;destdir&lt;/td&gt;&lt;td&gt;Path to the destination directory
	  &lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;destfile&lt;/td&gt;&lt;td&gt;File name
	  &lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;comment&lt;/td&gt;&lt;td&gt;Text describing purpose of update&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;serverUrl&lt;/td&gt;&lt;td&gt;URL to Workbench URL&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;passfile&lt;/td&gt;&lt;td&gt;File containing authentication info to server. If passfile is not specified, information from the  [[framework.properties]]
	  file is used instead.&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;

      &lt;/table&gt;

=Parameters specified as nested elements=
      &lt;p&gt;&lt;strong&gt;context&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
	A [[Context Type Reference|context]].
      &lt;/p&gt;

    
=Examples=

     &lt;p&gt;
       Get the object property view:
      &lt;/p&gt;
      &lt;pre&gt;
        &amp;lt;get-properties serverUrl=&quot;${framework.server.url}&quot;
                       depot=&quot;${context.depot}&quot;
                       resultproperty=&quot;rs&quot;
                       comment=&quot;none&quot;&amp;gt;
          &amp;lt;context direction=&quot;internal&quot; proximity=&quot;1&quot;
                     resourceName=&quot;objectName&quot; resourceType=&quot;typeName&quot;/&amp;gt;
        &amp;lt;/get-properties&amp;gt;
      &lt;/pre&gt;

&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Resource model Ant Tasks]]
[[Category:Resource]]</text>
    </revision>
  </page>
  <page>
    <title>Get-query</title>
    <id>1867</id>
    <redirect />
    <revision>
      <id>12458</id>
      <timestamp>2010-04-01T14:41:12Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[GetQuery Task Reference]]</comment>
      <text xml:space="preserve">#REDIRECT [[GetQuery_Task_Reference]]</text>
    </revision>
  </page>
  <page>
    <title>GetOpts Task Reference</title>
    <id>970</id>
    <redirect />
    <revision>
      <id>5305</id>
      <timestamp>2009-05-22T19:52:46Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>[[GetOpts Task Reference]] moved to [[Get-opts Task Reference]]: Renamed to match task name</comment>
      <text xml:space="preserve">#REDIRECT [[Get-opts Task Reference]]</text>
    </revision>
  </page>
  <page>
    <title>GetProperties Task Reference</title>
    <id>1962</id>
    <redirect />
    <revision>
      <id>13351</id>
      <timestamp>2010-10-16T21:53:17Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <comment>moved [[GetProperties Task Reference]] to [[Get-properties Task Reference]]:&amp;#32;use ant name</comment>
      <text xml:space="preserve">#REDIRECT [[Get-properties Task Reference]]</text>
    </revision>
  </page>
  <page>
    <title>GetQuery Task Reference</title>
    <id>1204</id>
    <revision>
      <id>12484</id>
      <timestamp>2010-04-02T17:23:08Z</timestamp>
      <contributor>
        <username>Gschueler</username>
        <id>8</id>
      </contributor>
      <comment>/* Attributes */</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Tasks&lt;/categorytree&gt;

The &lt;code&gt;get-query&lt;/code&gt; task allows you to query the [[resource model]] and retrieve information about resources aka &quot;Entities&quot; that match certain restrictions. The response can be received in several formats, such as &quot;xml&quot; or Ant Properties data.

For another mechanism for retrieving and operating on query results, see the [[EntityQuery Type Reference|entity-query]].

Benefits of &quot;entity-query&quot; over &quot;get-query&quot; are:

* entity-query can operate on all entities within a matched relationship
* entity-query can sort results by property names
* entity-query is designed to be easy to use results within Ant

==Description ==

Querying consists of specifying a set of *restrictions*.  Restrictions can either apply to a property of an Entity, e.g. its Name, Type or other property, or they can apply to *Relations*.  Relations are the  Child Resources or Parent Referrers connected to the targeted Entity, and so you can specify a set of Restrictions that match a certain pattern of relationships.

The query is built based on the embedded &lt;code&gt;query&lt;/code&gt; element or from the &lt;code&gt;queryString&lt;/code&gt; attribute, and makes a request to the ControlTier Server to evaluate it.

==Attributes==

The &lt;code&gt;get-query&lt;/code&gt; task element only has a few attributes.

{| style=&quot;border: 1px solid #aaa; border-collapse:collapse;&quot; cellpadding=&quot;2&quot; cellspacing=&quot;1&quot; border=&quot;1&quot; 
!Attribute !! Description
|-
| resultproperty
| Specify the name of a property which will be set with the result data.
|- 
| format
| The result data will be set in the [[#resultproperty]] property with this format. Values:

* &quot;plain&quot; returns a basic description of the results, without any details. (default). A comma-separated list of matching Resource URIs.
* &quot;xml&quot; returns a project.xml formatted XML document for all matching Resources.
* &quot;viewdoc&quot; returns a Viewdoc formatted XML document for all matching Resources.
* &quot;properties&quot; returns the property view (java properties) of all matching Resources.
* &quot;query&quot; returns an EntityList object for a Colony API response. (primarily for internal use)
|-
| queryString
| Specify a query in the ControlTier [[#Query Language|Query Language]].
 |}

==Nested Elements==

The &lt;code&gt;get-query&lt;/code&gt; task element contains a single &lt;code&gt;query&lt;/code&gt; element.

{{Query Type Reference}}

&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <!--
  <page>
    <title>Getting Started</title>
    <id>1831</id>
    <redirect />
    <revision>
      <id>11975</id>
      <timestamp>2009-12-19T00:05:03Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <comment>moved [[Getting Started]] to [[Getting started]]</comment>
      <text xml:space="preserve">#REDIRECT [[Getting started]]</text>
    </revision>
  </page>
  -->
  <page>
    <title>Getting started</title>
    <id>425</id>
    <revision>
      <id>16733</id>
      <timestamp>2012-05-16T03:43:59Z</timestamp>
      <contributor>
        <username>Ella19</username>
        <id>1789</id>
      </contributor>
      <minor/>
      <comment>sasadsa</comment>
      <text xml:space="preserve">&lt;noinclude&gt;&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Introduction&lt;/categorytree&gt;&lt;/noinclude&gt;
After reading this Getting Started page, you should have the general pattern to using [[ControlTier]] to define and manage your automation. It begins with the installation of the ControlTier server and client across your hosts. Then you create a project where you will manage your work. Each step of automation is specified in a new or existing script. Each script can then be exposed as a defined command in a type. Automation steps are combined into a workflow. Any script or type-defined command can be executed across the network via the command dispatcher via the GUI or CLI. Dispatching flags control how the commands are executed across the network.

==Download and Install==
{{main|Installation}}
* [[Download]] the desired package type (e.g., [[ZIP installer]] or [[RPM installer]])
* Set the CTIER_ROOT environment variable
* [[Installation|Install]] the ControlTier Server package to the chosen [[ControlTier server]].
* Install the Client package on each additional [[ControlTier client|client]] host. (optional)
** Be sure to run [[CTL-SETUP_Command_Reference|ctl-setup]] for each client host, to configure the server's hostname.
* Once the server is running access the [[server landing page]] and login.
* Set your [[ControlTier Environment Variables]]
If ControlTier is working correctly you should now be able to type &lt;code&gt;ctl --version&lt;/code&gt; in the terminal window and see output below:
&lt;pre&gt;
ctl --version	
	.
	.
	.
[CTL version 3.6.0 (20100913)]	
&lt;/pre&gt;

==Create a project==
{{main|Creating a project}}

A ControlTier &quot;[[Project]]&quot; provides a space to manage related automation activities. The &lt;code&gt;[[ctl-project]]&lt;/code&gt; shell command is used to create the workspace for each project from command line. There is a GUI frontend, but we will stick to the command line here.

On the ControlTier server, run the [[CTL-PROJECT_Command_Reference|ctl-project]] command and specify a project name, here we use &quot;demo&quot;:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl-project -a create -p demo
&lt;/syntaxhighlight&gt;

This will create the Project in the server, and registering the server host as a Node in the &quot;demo&quot; project's Resource Model.

===Node resources===

{{Main|Node}}

During project setup, the &quot;ctl-project -a create&quot; command generated a bit of [[Node#Metadata|metadata]] about the ControlTier server host in the form of a Node resource in the project's resource model. The resource model is stored in a database and accessed during command execution.

You can list information about Nodes in the resource model via the shell using the &lt;code&gt;ctl-exec -v&lt;/code&gt; command. Specify the &lt;code&gt;-p&lt;/code&gt; option and the Project name.
Here the &lt;code&gt;ctl-exec&lt;/code&gt; command lists the registered Nodes for the &quot;demo&quot; project after the server install:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
  $ ctl-exec -p demo -v	
  strongbad:
     hostname: strongbad
     os-arch: x86_64
     os-family: unix
     os-name: Mac OS X
     os-version: 10.6.2
     tags: []
     ---- Attributes ---- 
&lt;/syntaxhighlight&gt;

Node resources have standard properties that can be extended via attributes but one of the more useful properties is the &quot;tags&quot; property. A tag is a text label that you give to the Node, perhaps denoting a classification, a role the node plays in the environment, or group membership. The output above shows the &quot;strongbad&quot; node currently has an empty tags property: &lt;code&gt;tags: []&lt;/code&gt;

It is useful to start thinking about node tagging for your own nodes because you will use it later when specifying [[#Command_dispatcher_options]] to drive distributed command execution.

Node resource data can be maintained with the [[Node#Workbench_Node_Manager|graphical interface]], with an [[Node#Project_XML|XML]] definition or via the [[Node#Registering_via_command|command line]]. 

Here we use a command line tool to add two tags to the server Node, &quot;strongbad&quot;. This is done using a utility command called &lt;code&gt;tag-add&lt;/code&gt; in the [[modelutil]] module:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -p demo -m modelutil -c tag-add -- -type Node -name strongbad -tags admin,simple
&lt;/syntaxhighlight&gt;

Running &lt;code&gt;ctl-exec -v&lt;/code&gt; again shows the tags property now contains &quot;admin, simple&quot;:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
  $ ctl-exec -p demo -v	
  strongbad:
     hostname: strongbad
     os-arch: x86_64
     os-family: unix
     os-name: Mac OS X
     os-version: 10.6.2
     tags: [admin, simple]
     ---- Attributes ---- 
&lt;/syntaxhighlight&gt;

The modelutil &lt;code&gt;tag-remove&lt;/code&gt; command can remove a tag. Here the &quot;simple&quot; tag is removed from strongbad:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -p demo -m modelutil -c tag-remove -- -type Node -name strongbad -tags simple
&lt;/syntaxhighlight&gt;

Now the node has only one tag, &quot;admin&quot;:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
  $ ctl-exec -p demo -v	
  strongbad:
     hostname: strongbad
     os-arch: x86_64
     os-family: unix
     os-name: Mac OS X
     os-version: 10.6.2
     tags: [admin]
     ---- Attributes ----
&lt;/syntaxhighlight&gt;

====Add client Nodes====

With the ControlTier server Node configured and defined, install the ControlTier client on the hosts you wish to manage. Run the project creation procedure you ran on the server.
Once that is done, those client hosts will be registered as Node resources in the project. 

For the sake of this Getting Started document, imagine two hosts had the ctier-client RPMs installed: centos54 and ubuntu. 
The following bash script would run the needed &lt;code&gt;ctl-project&lt;/code&gt; command to setup project, &quot;demo&quot;:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
for host in centos54 ubuntu
do
  ssh $host su - ctier -c &quot;ctl-project -p demo -a create&quot;
done
&lt;/syntaxhighlight&gt;

Use the &lt;code&gt;tag-add&lt;/code&gt; modelutil command to define tags for ubuntu and centos54. We'll give both hosts a common &quot;dev&quot; tag while each get their own tag signifying a functional role (ie, &quot;web&quot; vs &quot;cache&quot;).

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -p demo -m modelutil -c tag-add -- -type Node -name ubuntu -tags dev,web
ctl -p demo -m modelutil -c tag-add -- -type Node -name centos54 -tags dev,cache
&lt;/syntaxhighlight&gt;

Running the &lt;code&gt;ctl-exec -v&lt;/code&gt; command now displays three Node resources:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl-exec -p demo -v
centos54:
   hostname: 192.168.1.106
   os-arch: i386
   os-family: unix
   os-name: Linux
   os-version: 2.6.18-164.el5
   tags: [cache, dev]
strongbad:
   hostname: strongbad
   os-arch: x86_64
   os-family: unix
   os-name: Mac OS X
   os-version: 10.6.5
   tags: [admin]
ubuntu:
   hostname: 172.16.167.211
   os-arch: i386
   os-family: unix
   os-name: Linux
   os-version: 2.6.27-7-generic
   tags: [dev, web]
&lt;/syntaxhighlight&gt;

...and this is how the ControlTier GUI will show the nodes:

[[Image:getting-started-resources-screenshot.png|border|Resources view]]

==Command execution==
{{main|Command execution}}

The ControlTier [[Command dispatcher]] enables distributed command execution of scripts or commands across the registered Nodes. Execution can be managed either through command line tools or a graphical interface. Dispatcher options control how the command or scripts will execute and lets you coordinate actions across hosts. The [[Scripters cookbook]] page offers several examples on how to take advantage of various features and useful utilities that cover common scripting use cases.

===Ad hoc commands===

{{main|Running ad hoc commands}}

An &quot;ad hoc&quot; command is a shell script or system executable that you might run at an interactive terminal. Ad hoc commands can be executed via the [[CTL-EXEC_Command_Reference|ctl-exec]] shell command. Use &lt;code&gt;ctl-exec&lt;/code&gt; to execute individual commands or shell script files. 

Here &lt;code&gt;ctl-exec&lt;/code&gt; is used to run the  Unix &lt;code&gt;uptime&lt;/code&gt; command to print system status:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ ctl-exec -I os-family=unix -- uptime
[ctier@centos54 ctl-exec][INFO]  10:34:54 up 46 min,  2 users,  load average: 0.00, 0.00, 0.00
[alexh@strongbad ctl-exec][INFO] 10:34  up 2 days, 18:51, 2 users, load averages: 0.55 0.80 0.75
[demo@ubuntu ctl-exec][INFO]  10:35:01 up 2 days, 18:40,  2 users,  load average: 0.00, 0.01, 0.00
&lt;/syntaxhighlight&gt;

Notice, the &lt;code&gt;ctl-exec&lt;/code&gt; command prepends the message output with a header that helps understand from where the output originates. The header format includes the login and node where the &lt;code&gt;ctl-exec&lt;/code&gt; execution occurred.

Execute the Unix &lt;code&gt;whomi&lt;/code&gt; command to see what user ID is used by that Node to run dispatched commands:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ ctl-exec -I os-family=unix -- whoami
[ctier@centos54 ctl-exec][INFO] ctier
[alexh@strongbad ctl-exec][INFO] alexh
[demo@ubuntu ctl-exec][INFO] demo
&lt;/syntaxhighlight&gt;

You can see that each Node is defined to use a different login to execute &lt;code&gt;ctl-exec&lt;/code&gt; commands. That feature can be handy when Nodes serve different roles and therefore, use different logins to manage processes.

The &lt;code&gt;ctl-exec&lt;/code&gt; command can also execute shell scripts. Here's a trivial script that generates a bit of system info:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
#!/bin/sh
# Example script: info.sh
echo &quot;info script&quot;
echo uptime=`uptime`
echo whoami=`whoami`
echo uname=`uname -a`
&lt;/syntaxhighlight&gt;

Use the &lt;code&gt;-s&lt;/code&gt; option to specify the &quot;info.sh&quot; script file:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ ctl-exec -I os-family=unix -s info.sh
&lt;/syntaxhighlight&gt;

The &lt;code&gt;ctl-exec&lt;/code&gt; command copies the &quot;info.sh&quot; script located on the server to each host and then executes it.

===Dispatcher options===
{{main|Dispatcher options}}

The command dispatcher supports a number of flags that can control how commands are executed across nodes. The command line tools, &lt;code&gt;ctl&lt;/code&gt;, &lt;code&gt;ctl-exec&lt;/code&gt; as well as job definitions support the notion of command dispatching flags.

====Include/exclude flags====
Include and exclude flags filter the set of nodes the command will execute. The node inclusion and exclusion is controlled via &quot;-I&quot; and &quot;-X&quot; flags.

To execute a command across all Nodes use a wildcard to the &quot;-I&quot; include flag:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl-exec -I '.*' -- uname -a
&lt;/syntaxhighlight&gt;

Below, the &quot;-I os-name=Linux&quot; option specifies to include all nodes that have the operating system name &quot;Linux&quot;. The &quot;-X centos54&quot; excludes the node named &quot;centos54&quot;:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl-exec -I os-name=Linux -X centos54 -- uname -a
&lt;/syntaxhighlight&gt;

Here's an example that runs the &lt;code&gt;who am i&lt;/code&gt; unix command on all hosts that tagged &quot;simple&quot;:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl-exec -I tags=simple -- who am i
&lt;/syntaxhighlight&gt;

====Parallel execution====
Parallel execution is managed using thread count  via &quot;-C&quot; option. The &quot;-C&quot; option specifies to the number of execution threads. Here's an example that runs the  &lt;code&gt;uptime&lt;/code&gt; command across the Linux hosts with two threads:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl-exec -I os-name=Linux -C 2 -- uptime
&lt;/syntaxhighlight&gt;

====Keepgoing flag====
The keepgoing and retry flags control when to exit incase an error occurs. Use &quot;-K/-R&quot; flags.
Here's an example script that checks if the host has port 8080 in the listening state. If it does not, it will exit with code 1. 

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
#!/bin/sh
netstat -an | grep 8080 | grep -q LISTEN
if [ &quot;$?&quot; != 0 ]; then
echo &quot;not listening on 8080&quot;
exit 1;
fi
echo  listening port=8080, host=`hostname`;
&lt;/syntaxhighlight&gt;

Commands or scripts that exit with a non-zero exit code will cause the dispatch to fail ''unless'' the keepgoing flag is set.

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ ctl-exec -I os-family=unix -s /tmp/listening.sh
&lt;/syntaxhighlight&gt;
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[alexh@strongbad ctl-exec][INFO] Connecting to centos54:22
[alexh@strongbad ctl-exec][INFO] done.
[ctier@centos54 ctl-exec][INFO] not listening on 8080
error: Remote command failed with exit status 1
&lt;/syntaxhighlight&gt;

The script failed on centos54 and caused &lt;code&gt;ctl-exec&lt;/code&gt; to error out immediately.

Running the command again, but this time with the &quot;-K&quot; keepgoing flag will cause &lt;code&gt;ctl-exec&lt;/code&gt; to continue and print on which nodes the script failed:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ ctl-exec -K -I tags=web -s /tmp/listening.sh
&lt;/syntaxhighlight&gt;

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[alexh@strongbad ctl-exec][INFO] Connecting to centos54:22
[alexh@strongbad ctl-exec][INFO] done.
[ctier@centos54 ctl-exec][INFO] not listening on 8080
[ctier@centos54 ctl-exec][ERROR] Failed execution for node: centos54: Remote command failed with exit status 1
[alexh@strongbad ctl-exec][INFO] listening port=8080, host=strongbad
[alexh@strongbad ctl-exec][INFO] Connecting to 172.16.167.211:22
[alexh@strongbad ctl-exec][INFO] done.
[demo@ubuntu ctl-exec][INFO] not listening on 8080
[demo@ubuntu ctl-exec][ERROR] Failed execution for node: ubuntu: Remote command failed with exit status 1
error: Execution failed on the following 2 nodes: [centos54, ubuntu]
error: Execute this command to retry on the failed nodes:
	ctl-exec -K -s /tmp/listening.sh -p demo -I name=centos54,ubuntu
&lt;/syntaxhighlight&gt;

===Ad hoc Jobs===

For the most part, an ad hoc job is is like an ad hoc command except the command is executed and tracked using the Ctlcenter webapp.

To begin, login to the Ctlcenter webapp, and press the &quot;Jobs&quot; tab.

1. Locate the &quot;New Job&quot; button in the right hand corner and press it to display the &quot;Create New Job&quot; form.

2. A job is defined in terms of one or more workflow items. In the Workflows area, click the &quot;Add an item&quot; link 

3. Workflow items can be one of several types. Click the &quot;Script&quot; workflow item type

4. A script type can be any script that can be executed on the target hosts. Type in the &quot;info&quot; shell script we executed earlier using ctl-exec.

[[Image:getting-started-adhoc-job1-create.png|border|400px|Job create]]

5. At the bottom of the form, run the &quot;Run and Forget&quot; button to begin execution

6. Execution output can be followed on the subsequent page. 

[[Image:getting-started-adhoc-job1-run.png|border|400px|Job run]]

====Job dispatch options====
The &quot;info&quot; script example above was fairly simple and unlikely to generate script related errors. Also, just as we saw earlier with ctl-exec, Jobs default to executing on just the ControlTier server. The Job create form includes dispatch option controls to filter target machines and control when to keep going if an error occurs, equivalent to the &lt;code&gt;ctl-exec&lt;/code&gt; &quot;-I/-X&quot; and &quot;-K&quot; flags. 

Imagine a script that checks for a condition and if the condition was unmet, exits with a non zero code.  The following script follows that pattern.

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
#!/bin/sh
netstat -an | grep 8080 | grep LISTEN
if [ $? ! = 0 ]; then
  echo NOT LISTENING ; exit 1 ;
else
  echo LISTENING
fi	
&lt;/syntaxhighlight&gt;	

Remember, commands that exit with non zero will cause the dispatcher to exit unless &lt;code&gt;keepgoing&lt;/code&gt; is set true. 

The Job create form can be expanded to &quot;Dispatch to Nodes&quot; and &quot;Keep going on error&quot; as the screenshot below illustrates:

[[Image:getting-started-adhoc-job2a-create.png|border|400px|Job create - step 1]]

The &quot;Node Include Filters&quot; is equivalent to the &lt;code&gt;-I os-name=unix&quot;&lt;/code&gt; option. Setting the &quot;Yes&quot; button for the &quot;Keep going on error?&quot; is the same as specifying &quot;-K&quot; option.

[[Image:getting-started-adhoc-job2b-create.png|border|400px|Job create - dispatch options]]

After you are satisified with the dispatch options, press the &quot;Run and Forget&quot; button to execute the script to the selected Nodes:

[[Image:getting-started-adhoc-job2-run.png|border|400px|Job run]]

====Queuing commands to Ctlcenter====
Commands or scripts executed on the command line by &lt;code&gt;ctl-exec&lt;/code&gt; can also be queued as jobs in CtlCenter by using the &quot;-Q&quot; option. The &lt;code&gt;ctl-exec -Q&lt;/code&gt; usage is equivalent to a &quot;Run and Forget&quot; action in Ctlcenter.

The script below is a long running check that will run periodically waiting a set time between each pass. It can be run with or without arguments as the parameters are defaulted inside the script:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ cat ~/bin/checkagain.sh 
#!/bin/bash
iterations=$1 secs=$2 port=$3
echo &quot;port ${port:=8080} will be checked ${iterations:=30} times waiting ${secs:=5}s between each iteration&quot;

i=0
while [ $i -lt ${iterations} ]; do
  echo &quot;iteration: #${i}&quot;
  netstat -an | grep $port | grep LISTEN &amp;&amp; exit 0
  echo ----
  sleep ${secs}
  i=$(($i+1))
done
echo &quot;Not listening on $port after $i checks&quot; ; exit 1
&lt;/syntaxhighlight&gt;

Running &lt;code&gt;ctl-exec&lt;/code&gt; with the &lt;code&gt;-Q&lt;/code&gt; option causes the dispatch to queue in Ctlcenter and controlled as an ad-hoc job. The &lt;code&gt;-I centos54&lt;/code&gt; limits execution to just the &quot;centos54&quot; node:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ ctl-exec -Q -I centos54 -s ~/bin/checkagain.sh 
Succeeded queueing workflow: Workflow:(threadcount:1){ [command( scriptfile: /Users/alexh/bin/checkagain.sh)] }
Queued job ID: 5 &lt;http://strongbad:8080/ctlcenter/execution/follow/4&gt;
&lt;/syntaxhighlight&gt;


==Saved Jobs==

Ad hoc commands are a typical part of day to day administrative duties. Occasionally, ad hoc commands become routine procedures and if reusable, would become more valuable as they could be handed off or called by other Jobs. Ctlcenter provides an interface to declare and save jobs, both graphically or declared with an XML file.

As many jobs will accumulate over time, it is useful to organize Jobs into groups. A group is a logical set of jobs, and one job group can exist inside another. Ctlcenter displays job lists as a set of folders corresponding to the group structure your jobs define.

Beyond organizing jobs, groups assist in defining access control policy, as we'll cover later.

===Simple info job example===

For the first saved Job example, create a Job that calls the info script. Like in the earlier example, begin by pressing the &quot;New Job&quot; button to reveal the new job form. This time, select &quot;Yes&quot; for the &quot;Save this job?&quot; prompt. Pressing Yes reveals a form to define a name, group and description for the job. 
For &quot;Job Name&quot;, enter &quot;info&quot; and for the &quot;Group&quot;, enter &quot;adm/resources&quot;. Providing a description will be come helpful to other users to understand the intent and purpose for the Job.

Check the box for &quot;Dispatch to Nodes&quot; and this time choose the &quot;Node Exclude Filters&quot; and enter the name of your Ctlcenter server. This will cause the job to run on just the target Nodes (eg., centos54 and ubuntu).

Type in the info script that we used earlier. Once saved to the Workflow, press the &quot;Create&quot; button.

[[Image:getting-started-saved-jobs-info-create.png|border|400px|Info create]]

Once the the job is created, the browser will be directed to the main Jobs page. The folder structure reflecting the group naming will show one Job. 

[[Image:getting-started-saved-jobs-info-list.png|border|Info list]]

Pressing through the folders and then to the job itself, will reveal a button bar with controls for editing and running the job. Press the green arrow icon to run the Job.

[[Image:getting-started-saved-jobs-info-list-view.png|border|400px|Info list view]]

Press the &quot;Run Job Now&quot; button to begin execution.

[[Image:getting-started-saved-jobs-info-run.png|border|400px|Info run]]

Output from the script execution from the target Nodes will be displayed on the subsequent page.

===Multi-Job example===

Saved jobs are a convenient method to draw from a library of routine procedures. By its nature, a saved Job encapsulates a process into a logically named interface. Jobs can begin as a single item workflow that calls a small or large shell script but evolve into a multi-item workflow. The next step in evolution, is to build Jobs on top of other Jobs. Using this approach one can view each Job as a reusable building block upon which more complex automation can be built.

Let's imagine our three nodes support a web-based application for acme.com, a fictitious anvil reseller. Because anvil sales are seasonal, a virtual IP address (VIP) is used to distribute traffic across a variable sized pool of web servers. Also, the anvil sales application isn't perfect and periodically requires restarting. Scripts were created to manage the startup and shutdown procedures to coordinate with the load balancer to add or remove the stopped servers from the VIP.

The goal here is to expose these restart scripts as Jobs, in order to provide a central point of control. Because the VIPs are different between QA and production, the Jobs should also support passing the desired VIP address to the scripts. For both QA and production hosts, the web restart scripts are located in a standard path: &lt;code&gt;/apps/web/bin&lt;/code&gt;.

Real scripts to manage startup and shutdown, along with interacting with the load balancer would be somewhat involved. For this example, we show scripts that merely echo their intent and the arguments passed to the them.

The table below shows the four scripts - lb-add.sh, lb-remove.sh, start.sh and stop.sh - located on the Nodes tagged &quot;web&quot;:

{| border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;3&quot; style=&quot;border: 1px solid #aaa; border-collapse:collapse&quot; width=&quot;100%&quot;
! lb-add.sh  !!  lb-remove.sh  !!  start.sh  !!  stop.sh	
|-
| &lt;syntaxhighlight lang=&quot;bash&quot;&gt;
#!/bin/sh
# Usage: lb-add.sh [vip]
echo added `hostname` to vip: $1
&lt;/syntaxhighlight&gt;
| &lt;syntaxhighlight lang=&quot;bash&quot;&gt;
#!/bin/sh
# Usage: lb-remove.sh [vip]
echo removed `hostname` from vip: $1
&lt;/syntaxhighlight&gt;
| &lt;syntaxhighlight lang=&quot;bash&quot;&gt;
#!/bin/sh
# Usage: start.sh
echo web started.               
&lt;/syntaxhighlight&gt;
| &lt;syntaxhighlight lang=&quot;bash&quot;&gt;
#!/bin/sh
# Usage: stop.sh
echo web stopped.                 
&lt;/syntaxhighlight&gt;
|}

Though not a requirement, it is helpful to have a convention for Job group naming. A good naming convention assists others with navigation scheme that helps them remember and find the desired procedure.

For this example, the Jobs will correspond to the name space of the scripts directories.

With an idea of the Acme management scripts in mind, the next step is to define three jobs to encapsulate the procedures. The overall goal is to provide a restart procedure but for the sake of reusability, it might be preferred to break the restart procedure into separate &quot;stop&quot; and &quot;start&quot; procedures. 

[[Image:getting-started-multi-jobs-structure.png|border|Job structure]]

The &quot;stop&quot; job can be defined as a script that calls the &quot;lb-remove.sh&quot; script to remove the server from the specified VIP argument. Afterwards, the stop.sh script is called. The &quot;start&quot; job is similar except the server is first started via the &quot;start.sh&quot; before the server is added back to the specified VIP by the &quot;lb-add.sh&quot; script.

===Job options===

Any command or script can be wrapped as a Job. Creating a Job for every use case would proliferate a large number of Jobs differing only by how the Job provides data to the scripts they call. These differences are often environment or application version related and would be better treated as a menu choice made by the person running the Job. Once chosen, the value selected by the menu could then be passed to the script.

====Allowed values====

Sometimes it is important to control ''or'' produce values presented to a given Job option. 
For example, the Acme Anvil sales site is accessible from two VIP addresses one for production and one for testing - https://www.acme.com and https://qa.acme.com, respectively. The shutdown and startup management scripts require the appropriate VIP name to interact correctly with the load balancer. Therefore, the start and stop Jobs need to present a user with VIP value choices, but only those choices.

The screenshot below contains the Option edit form for an option named &quot;vip&quot;. The form includes elements to define description and default value, as well as, Allowed Values and Restrictions. 

[[Image:getting-started-option-vip-definition.png|border|400px|Job option]]

Values can be specified as a comma separated list as seen above but can also be requested from an external source using a &quot;remote URL&quot;.

Option choices can be controlled using the &quot;Enforced from values&quot; restriction. When set &quot;true&quot;, the Ctlcenter UI will only present a popup menu. If set &quot;false&quot;, a text field will also be presented. Use the &quot;Match Regular Expression&quot; form to validate the input option.

Here's a screenshot of how Ctlcenter displays the two VIP choices as a menu:

[[Image:getting-started-option-vip-menu.png|border|Job option menu]]


====Script usage====
Option values can be passed to scripts as an argument or referenced inside the script via a named token.
For example, the value for the &quot;vip&quot; option selection can be accessed in one of several ways:

* Value passed as an environment variable.
*: 	Bash: &lt;code&gt;$CT_OPTION_VIP&lt;/code&gt;
* Value passed in the argument vector to the executed script or command
*: 	Commandline Arguments: &lt;code&gt;${option.vip}&lt;/code&gt;
* Value referenced as a named token inside the script and replaced before execution
*: Script Content: &lt;code&gt;@option.vip@&lt;/code&gt;

===Job composition===

With an understanding of the scripts and the VIP option needed to control the restart operation, the final step is to compose three Job definitions. All three jobs will share these features:
* Dispatch include flag: &quot;tags=web&quot;
*: Only dispatch to the Nodes tagged &quot;web&quot;
* Option: set &quot;vip&quot; option to use enforced values
*: select from the list: &quot;https://qa.acme.com,https://www.acme.com&quot;

While each job can be defined graphically in Ctlcenter, each can succinctly be defined via a [[job.xml]] file instead. This job.xml document contains a set of tags corresponding to the choices seen in the Ctlcenter GUI form. 

Below are the XML definitions for the three jobs: stop, start and restart. One or more jobs can be defined inside a single XML file but your convention dictate how to organize the definitions. The files can be named any way you want and do not have to correspond to the Job name or its group. 

{| border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;3&quot; style=&quot;border: 1px solid #aaa; border-collapse:collapse&quot; 
|-	
! stop.xml
|-
| &lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;joblist&gt;	
&lt;job&gt; 
  &lt;name&gt;stop&lt;/name&gt;  
  &lt;description&gt;the web stop procedure&lt;/description&gt;  
  &lt;additional/&gt;  
  &lt;loglevel&gt;INFO&lt;/loglevel&gt;  
  &lt;group&gt;apps/web&lt;/group&gt;  
  &lt;context&gt; 
    &lt;project&gt;demo&lt;/project&gt;  
    &lt;options&gt; 
      &lt;option name=&quot;vip&quot; enforcedvalues=&quot;true&quot; required=&quot;true&quot; 
	values=&quot;https://qa.acme.com,https://www.acme.com&quot;/&gt; 
    &lt;/options&gt; 
  &lt;/context&gt;  
  &lt;sequence threadcount=&quot;1&quot; keepgoing=&quot;false&quot; strategy=&quot;node-first&quot;&gt; 
    &lt;command&gt; 
      &lt;script&gt;&lt;![CDATA[#!/bin/sh
/apps/web/bin/lb-remove.sh $1
/apps/web/bin/stop.sh]]&gt;&lt;/script&gt;  
      &lt;scriptargs&gt;${option.vip}&lt;/scriptargs&gt; 
    &lt;/command&gt; 
  &lt;/sequence&gt;  
  &lt;nodefilters excludeprecedence=&quot;true&quot;&gt; 
    &lt;include&gt; 
      &lt;tags&gt;web&lt;/tags&gt; 
    &lt;/include&gt; 
  &lt;/nodefilters&gt;  
  &lt;dispatch&gt; 
    &lt;threadcount&gt;1&lt;/threadcount&gt;  
    &lt;keepgoing&gt;false&lt;/keepgoing&gt; 
  &lt;/dispatch&gt; 
&lt;/job&gt;
&lt;/joblist&gt;
&lt;/syntaxhighlight&gt; 
| Defines Job, /apps/web/stop, that executes a two line shell script to Nodes tagged &quot;web&quot;. The shell script is passed a single argument, &lt;code&gt;${option.vip}&lt;/code&gt;, containing the value chosen in the Job run form.
|}


{| border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;3&quot; style=&quot;border: 1px solid #aaa; border-collapse:collapse&quot; 
|-
! start.xml
|-
|&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;joblist&gt;	
&lt;job&gt; 
  &lt;name&gt;start&lt;/name&gt;  
  &lt;description&gt;the web start procedure,the vip name&lt;/description&gt;  
  &lt;additional/&gt;  
  &lt;loglevel&gt;INFO&lt;/loglevel&gt;  
  &lt;group&gt;apps/web&lt;/group&gt;  
  &lt;context&gt; 
    &lt;project&gt;demo&lt;/project&gt;  
    &lt;options&gt; 
      &lt;option name=&quot;vip&quot; enforcedvalues=&quot;true&quot; required=&quot;true&quot; 
	values=&quot;https://qa.acme.com,https://www.acme.com&quot; /&gt; 
    &lt;/options&gt; 
  &lt;/context&gt;  
  &lt;sequence threadcount=&quot;1&quot; keepgoing=&quot;false&quot; strategy=&quot;node-first&quot;&gt; 
    &lt;command&gt; 
      &lt;script&gt;&lt;![CDATA[#!/bin/sh
/apps/web/bin/start.sh
/apps/web/bin/lb-add.sh $1]]&gt;&lt;/script&gt;  
      &lt;scriptargs&gt;${option.vip}&lt;/scriptargs&gt; 
    &lt;/command&gt; 
  &lt;/sequence&gt;  
  &lt;nodefilters excludeprecedence=&quot;true&quot;&gt; 
    &lt;include&gt; 
      &lt;tags&gt;web&lt;/tags&gt; 
    &lt;/include&gt; 
  &lt;/nodefilters&gt;  
  &lt;dispatch&gt; 
    &lt;threadcount&gt;1&lt;/threadcount&gt;  
    &lt;keepgoing&gt;false&lt;/keepgoing&gt; 
  &lt;/dispatch&gt; 
&lt;/job&gt;
&lt;/joblist&gt;
&lt;/syntaxhighlight&gt;	
| Defines Job, /apps/web/start, that executes a two line shell script to Nodes tagged &quot;web&quot;. The shell script is passed a single argument, &lt;code&gt;${option.vip}&lt;/code&gt;, containing the value chosen in the Job run form.
|}


{| border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;3&quot; style=&quot;border: 1px solid #aaa; border-collapse:collapse&quot; 
|-
! restart.xml
|-
|&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;joblist&gt;	
&lt;job&gt; 
  &lt;name&gt;restart&lt;/name&gt;  
  &lt;description&gt;restart the web server&lt;/description&gt;  
  &lt;additional/&gt;  
  &lt;loglevel&gt;INFO&lt;/loglevel&gt;  
  &lt;group&gt;apps/web&lt;/group&gt;  
  &lt;context&gt; 
    &lt;project&gt;demo&lt;/project&gt;  
    &lt;options&gt; 
      &lt;option name=&quot;vip&quot; enforcedvalues=&quot;true&quot; required=&quot;false&quot; 
	values=&quot;https://qa.acme.com,https://www.acme.com&quot; /&gt; 
    &lt;/options&gt; 
  &lt;/context&gt;  
  &lt;sequence threadcount=&quot;1&quot; keepgoing=&quot;false&quot; strategy=&quot;node-first&quot;&gt; 
    &lt;command&gt; 
      &lt;jobref name=&quot;stop&quot; group=&quot;apps/web&quot;&gt; 
        &lt;arg line=&quot;-vip ${option.vip}&quot;/&gt; 
      &lt;/jobref&gt; 
    &lt;/command&gt;  
    &lt;command&gt; 
      &lt;jobref name=&quot;start&quot; group=&quot;apps/web&quot;&gt; 
        &lt;arg line=&quot;-vip ${option.vip}&quot;/&gt; 
      &lt;/jobref&gt; 
    &lt;/command&gt; 
  &lt;/sequence&gt;  
  &lt;nodefilters excludeprecedence=&quot;true&quot;&gt; 
    &lt;include&gt; 
      &lt;tags&gt;web&lt;/tags&gt; 
    &lt;/include&gt; 
  &lt;/nodefilters&gt;  
  &lt;dispatch&gt; 
    &lt;threadcount&gt;1&lt;/threadcount&gt;  
    &lt;keepgoing&gt;true&lt;/keepgoing&gt; 
  &lt;/dispatch&gt; 
&lt;/job&gt;	
&lt;/joblist&gt;
&lt;/syntaxhighlight&gt;	
| Defines Job, /apps/web/restart, that executes a sequence of Job calls, first &quot;stop&quot; and second &quot;start&quot; across Nodes tagged &quot;web&quot;.
|}

Saving those XML definitions as files located on the Ctlcenter server, you can load them using the [[ctl-jobs]] command. 

Run the &lt;code&gt;ctl-jobs load&lt;/code&gt; command for each job definition file:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl-jobs load -f start.xml
ctl-jobs load -f stop.xml
ctl-jobs load -f restart.xml
&lt;/syntaxhighlight&gt;

The &lt;code&gt;ctl-jobs list&lt;/code&gt; command queries Ctlcenter and prints out a list of defined jobs:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ ctl-jobs list
Found 4 jobs:
	- info [7] &lt;http://strongbad:8080/ctlcenter/scheduledExecution/show/7&gt;
	- restart [9] &lt;http://strongbad:8080/ctlcenter/scheduledExecution/show/9&gt;
	- start [10] &lt;http://strongbad:8080/ctlcenter/scheduledExecution/show/10&gt;
	- stop [11] &lt;http://strongbad:8080/ctlcenter/scheduledExecution/show/11&gt;
&lt;/syntaxhighlight&gt;

Of course, the jobs can be viewed inside Ctlcenter's UI by going to the Jobs page:

[[Image:getting-started-multi-jobs-list.png|border|Job list]]

The composition of the &quot;restart&quot; job can be seen as a workflow that calls the two other jobs: stop and start. The &quot;restart&quot; job passes the &quot;vip&quot; option value to the lower level stop and start Jobs.

===Command line Job control===

Shell utilities exist to provide command line Job control.

The [[ctl-run]] command is used to start the execution of a Job defined in Ctlcenter. 

Here's an example that runs the &quot;restart&quot; job defined in the section above:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ ctl-run -j apps/web/restart -- -vip https://qa.acme.com
Job execution started:
[51] restart &lt;http://strongbad:8080/ctlcenter/execution/follow/51&gt;
&lt;/syntaxhighlight&gt;


Jobs as well as commands executed with the -Q option can be listed with the [[ctl-queue]] command. The &lt;code&gt;ctl-queue&lt;/code&gt; command lists jobs currently running in Ctlcenter execution queue:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ ctl-queue
Queue: 1 items
[5] workflow: Workflow:(threadcount:1){ [command( scriptfile: /Users/alexh/bin/checkagain.sh)] } &lt;http://strongbad:8080/ctlcenter/execution/follow/5&gt;
&lt;/syntaxhighlight&gt;

Running jobs can also be killed via the &lt;code&gt;ctl-queue&lt;/code&gt; &quot;kill&quot; command. The &lt;code&gt;ctl-queue&lt;/code&gt; command includes the execution ID for each running job. Specify execution ID using the &quot;-e&quot; option:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ ctl-queue kill -e 5
ctl-queue kill: success. [5] Job status: killed
&lt;/syntaxhighlight&gt;

===Access control policy===
{{main|aclpolicy}}

Access to running or modifying Jobs is managed in an access control policy defined using the [[aclpolicy]] XML format.
This file contains a number of policy elements that describe what user group is allowed to perform which actions. 

Policies can be organized into more than one file to help organize access by group or pattern of use. The normal ControlTier install will have generated a policy for the &quot;admin&quot; group. Not all users will need to be given &quot;admin&quot; access level to control and modify all Jobs. More typically, a group of users will be given access to just a subset of Jobs.

For an example, lets create a policy that allows users in the &quot;deploy&quot; group to run commands just in the &quot;apps&quot; and &quot;apps/web&quot; Job groups. We can reference the &quot;deploy&quot; user and group as it was also included in the normal install. 

* Create the aclpolicy file for the &quot;deploy&quot; group
*: &lt;code&gt;cp $CTL_BASE/etc/admin.aclpolicy $CTL_BASE/etc/deploy.aclpolicy&lt;/code&gt;
* Modify the &lt;code&gt;&lt;command&gt;&lt;/code&gt; and &lt;code&gt;&lt;group&gt;&lt;/code&gt; elements as shown in the example below. Notice that just &lt;code&gt;workflow_read,workflow_run&lt;/code&gt; actions are allowed. 
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
$ cat $CTL_BASE/etc/deploy.aclpolicy
&lt;policies&gt;
  &lt;policy description=&quot;Deploy group that has access policy.&quot;&gt;
    &lt;context project=&quot;*&quot;&gt;
      &lt;command group=&quot;apps&quot; job=&quot;*&quot; actions=&quot;workflow_read,workflow_run&quot;/&gt;
      &lt;command group=&quot;apps/web&quot; job=&quot;*&quot; actions=&quot;workflow_read,workflow_run&quot;/&gt;
    &lt;/context&gt;
    &lt;by&gt;
      &lt;group name=&quot;deploy&quot;/&gt;
    &lt;/by&gt;
  &lt;/policy&gt;
&lt;/policies&gt;	
&lt;/syntaxhighlight&gt;	
* Restart jetty so Ctlcenter loads the new policy file.
*: &lt;code&gt;jetty.sh restart&lt;/code&gt;

Once the Ctlcenter webapp has started, login as the &quot;deploy&quot; user (the password is probably &quot;deploy&quot;). Just the Jobs in the &quot;apps&quot; group are displayed in the Jobs page.  The &quot;1 authorized jobs are not shown&quot; message indicates that &quot;deploy&quot; user does is not allowed to access [http://www.cavite-housing.com/ house and lot for sale in cavite] jobs outside of &quot;/appsi group (i.e., nothing in the &quot;/adm&quot; job group).

Notice the absence of the &quot;New Job&quot; button displayed earlier when logged in as &quot;admin&quot;. Job creation is an action not granted to &quot;deploy&quot;. Notice also, that the button bar for the listed Jobs does not include icons for editing or deleting the Job. Only workflow_read and workflow_actions were allowed.


[[Image:getting-started-aclpolicy-jobs-list.png|border|400px|Deploy's Job listing]]


==Where to go from here==

* [[Use your existing scripts with ControlTier]]
* [[Replace your SSH loop script]]
* [[Automate deployment with Jobs]]

{{Guide/navbox|state=uncollapsed}}
[[Category:Introduction]]
''Italic text''</text>
    </revision>
  </page>
  <page>
    <title>Graphical installer</title>
    <id>26</id>
    <revision>
      <id>13711</id>
      <timestamp>2010-11-10T15:07:35Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Installation&lt;/categorytree&gt;

The ControlTier server and client software together can be installed via graphical installer. See [[ZIP installer (client-only)]] if you want to install the client separately.

The GUI installer is built on the Java-based [http://izpack.org IzPack] installer and should run on any platform supported by that tool.

==Download==
[[Download]] the latest version 3.x ControlTier Installer executable Jar file into $CTIER_ROOT/pkgs

On Unix save it to $CTIER_ROOT/pkgs

Or, on Windows into %CTIER_ROOT%\pkgs

==Launch installer==

===Unix===
Set the JAVA_HOME and then invoke the installer:

&lt;pre&gt;
export JAVA_HOME=$CTIER_ROOT/pkgs/j2sdk1.5.0_15
$JAVA_HOME/bin/java -jar ControlTier-Installer-3.2.jar
&lt;/pre&gt;

Notes:

* It may be possible to run the Jar by directly clicking on it if you're using a Linux/Unix GUI workstation.
* On Linux/Unix the installer is an X Windows client. On a &quot;headless&quot; system it is necessary to set the DISPLAY environment variable appropriately.
* Some unix variants will launch the installer by double clicking the Jar in the file browser (e.g., Mac OSX).

===Windows===
On Windows, double-click the installer Jar file:

[[Image:windowsguiinstaller.png]]

==Configure and start installation==

Select your language preference for install instructions:

[[Image:installer-language.png]]

After reviewing the introduction screens and accepting the terms of our license agreement select the installation path:

[[Image:installer-targetpath.png]]

The installation path is the value you chose for CTIER_ROOT. After selecting the default installation package, review and modify the key installation properties as required

[[Image:installer-properties.png]]

* If you are planning a multi-node installation change the &quot;HTTP Server&quot; value to a fully-qualified domain name or a well know host name.
* Change port value if necessary to resolve conflicts on your system making sure you select a non-privileged port value (i.e 1024 and beyond).
* If you want to start the application server immediately after installation, check the box labelled &quot;Start Services&quot;.  On Windows this will launch the Jetty6 server as a  WinNT service, and on unix/mac os x it will start the server using the normal start script.

The remaining dialogs report on installation progress. The standard command-line installer is automatically executed as an external process to complete installation:

[[Image:installer-external.png]]

==Uninstaller==

An uninstaller program is deposited in $CTIER_ROOT for later use if needed:
&lt;pre&gt;
$ ls $CTIER_ROOT/Uninstaller
uninstaller.jar
$ export JAVA_HOME=$CTIER_ROOT/pkgs/j2sdk1.5.0_15
$ $JAVA_HOME/bin/java -jar $CTIER_ROOT/Uninstaller/uninstall.jar
&lt;/pre&gt;

Notes
* Forcing deletion will remove the entire contents of CTIER_ROOT from your system including any subsequent project work you may have undertaken.

==Environment variables==

{{:ControlTier_Environment_Variables}}

==Server startup and shutdown==
{{main| Server startup and shutdown}}
If you didn't select the &quot;start services&quot; box in the installer you follow the instructions above. 

==Login==

After you have started the ControlTier server you can try logging in to Workbench (default URL could be http://localhost:8080/itnav unless you changed the setting in the installer).

The initial landing page will provide a set of links to the server applications.
Below this list you will see information about login IDs. The installation will have created a number of default accounts. 
Begin by logging into Workbench with the default ID (set by the installer to user: &quot;default&quot; and password: &quot;default&quot; unless you changed that setting).</text>
    </revision>
  </page>
  <page>
    <title>Graphical resource editor</title>
    <id>1747</id>
    <revision>
      <id>13966</id>
      <timestamp>2010-11-10T15:26:23Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;-objects&quot; to &quot;-resources&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Resource model&lt;/categorytree&gt;
The [[ControlTier server]] hosts a graphical tool to manage the ControlTier [[Resource model]] letting you define resources of any type declared in your [[project]]. Interfaces are provided to search and browse existing resources and specialized views organizes resources by several of the core [[types]].

Workbench's resource model editing [[Graphical resource editor features|features]] are the graphical counterpart to the [[ProjectBuilder]] command line utility and [[project.xml]].

==Login==
From the [[server landing page]] click the link to &quot;Workbench&quot;. Enter the user name and password provided by the administrator that maintains the [[ControlTier server]].

[[Image:Workbench login.png]]

==Project==

If this is a new ControlTier installation, create a project using these instructions: [[Creating a project]].

==Home page==
After logging in and choosing a project you will be redirected to the main entry page. From the home page, you can click one of the four large icons to browse resources of that general category. Pressing the &quot;Search&quot; button will take you to the [[#Search form]]. The &quot;Admin&quot; button will take you to the [[#Admin page]]. 

[[Image:Type-editor-home-page.png]]

You can return to this page from anywhere in the application by pressing the &quot;Workbench&quot; icon in the top left of the page.

===Top navigation bar===
The top navigation bar provides links to change projects, switch to another application and logout.

To change projects, press the blue text displaying the current project (e.g., &quot;demo&quot;). A popup menu will be displayed prompting you to &quot;Choose a Project&quot;. Selecting another project will reload the page to that project home page. To cancel the menu, press the &quot;X&quot; icon.

[[Image:Workbench-project-menu.png]]

The user name you logged in as is displayed on the right of the [[Image:icon-small-user-admin.png]] icon.
To logout, press the text labeled &quot;logout&quot;. 

[[Image:Workbench-user-logout.png]]

This will exit the login session and return you to the Login page.
===Search form===
You can access the search form from the [[#Home page]]. In the top right, you will see the &quot;Search&quot; button. Pressing that reveals the search form with text fields and the &quot;Browse Types&quot; button. Pressing the &quot;Browse Types&quot; button takes you to the [[#Type browser]].

[[Image:type-editor-home-page.png]]

====Type search====
The Type search form lets you find resource types by name. Input the name of the type you are looking for into the text field and hit return. Search strings are not case sensitive. You can also use regular expressions.

[[Image:type-editor-search-results.png]]

Matching types are listed in a results page. The results page also contains the type search form, so you can re-enter a search string there.

====Object search====
The Search Objects form allows a user to type in a string and search by type of keyword.

[[Image:Workbench-object-search.png]]

The popup menu allows you to search for resources using different keyword types:
* By Name: Search for objects that match the given string
* By Type: Search for objects that are of the type specified in the text field
* By Author: Search for objects created by the specified user
* Any field: Search for objects that have the specified string in any of its properties
Pressing the [[Image:icon-small-find.png]] icon will start the search and display the results page.

[[Image:Workbench-object-search-results-tabs.png]]

The results page provides a count of matching resources and has a number of buttons to display the search form again.

====Type browser====
{{Workbench/typebrowser}}

===Admin page===
The Admin page contains an array of buttons to manage ControlTier [[project]]s:
* Version History: View model history (disabled by default)
* Users: Manage user roles (only if [[Jetty_LDAP_integration|JNDI authorization]])
* Create Project: Create a new project
* Unarchive: Upload a &quot;project archive&quot; (PAR)
* Remove project: This will archive (generating a PAR) and delete the project
* Import Seed: Upload a module library archive (aka [[Create_a_seed_library|seed]]).
* Create Archive: Create a project archive (PAR)
* Regenerate resources.properties file: Generates a [[resources.properties]] file and stores it on the [[File share]]
* Module import: Import a module archive

[[Image:Workbench-admin-page.png]]

==Navigation views==
Resources are organized into several navigation views based on several of the core [[types]]. [[Node]]s registered in the project are contained in the &quot;Node Manager&quot;. [[Package]]s stored in the [[File share]] are found in &quot;Package Manager&quot;, as are [[Builder]]s that can be configured to import them. Application [[Service]]s and their logical groupings, called [[Site]]s, are found in the &quot;Service Manager&quot;. Finally, [[Updater]]s used to coordinate [[continuous deployment]] are found in the &quot;Process Manager&quot;.

The primary purpose of these resource views is to help organize the resource model into broad categories. By traversing resource relationships, it is often possible to move from one navigation view to another.  When viewing any particular resource, similar detailed views and editing controls are shown. 

===Menus===
[[Image:Workbench-Resource-view-menu3.png|thumb|Navigation Menu]]
Two menus provide a quick method to change to one of the four navigation views.

The menu on the left side of the page is broken into a main menu and submenu.
The main menu allows you to change to one of the main four  views:

[[Image:Workbench-Resource-view-menu1.png]]

Once a navigation view has been selected, the submenu can be used to go to the List or Summary page for that view.

[[Image:Workbench-Resource-view-menu2.png]]

Alternatively, press &quot;Switch to a different tool...&quot; and a navigation Menu listing all the different resource views is shown in one long list.

===Node Manager===
The ''Node Manager'' displays all registered [[Node]] resources in the resource model for the [[project]]. 
====Node list====
The &quot;Node List&quot; menu item can be selected to list Node resources. Each node is displayed on its own row, organized into several columns. 
* A [[Image:icon-tiny-disclosure.png|disclosure]] icon to the far left, will display more detail for the Node
* The node name (eg &quot;strongbad&quot; )is a link that will let you view just that Node in detail. This column also displays the Node's description and any tags.
* Deployments represent child resources related to that Node. 
* Packages represent child resources, both direct and indirect, related to that Node.

[[Image:Workbench-NodeManager-list.png]]
====Node view====
Clicking the link for a node in the Node List, will display detail about that node. Like the [[#Resource View]] page for any resource, beneath the Node's name, description and type, is a button toolbar and tabs. To the right are disclosure icons that reveal child [[Deployment]]s and [[Package]]s. You can access this information from the &quot;Child Resources&quot; area, too.

Below the tabs, the Node's [[Node#Metadata|metadata]] and attributes are listed (e.g., &quot;OS Family&quot;, &quot;OS Name&quot;, etc.). 
[[Image:Workbench-NodeManager-view.png]]

===Package Manager===
The ''Package Manager'' contains [[Package]]s and [[Builder]]s. 

[[Image:Workbench-PackageManager.png|thumb|Package Manager]]
====Package list====

Pressing the '''Package List''' icon displays all [[Package]] resources stored in the [[File share]].
Each Package is displayed on its own row, organized into several columns.
* A [[Image:icon-tiny-disclosure.png|disclosure]] icon to the far left, will display more detail for the Package
* The Package name (eg, &quot;apache-tomcat-5.5.28.zip&quot;) is a link that will let you view just that Package in detail. This column also displays the Package's description and any tags.
* Deployments represent parent resources related to that Package. 
* Nodes represent parent resources, both direct and indirect, related to that Package.

[[Image:Workbench-PackageManager-Package-list.png]]

====Package view====
[[Image:Workbench-PackageManager-Package-view.png|thumb|Package view]]

Clicking the link for a package in the Package List, will display detail about that package. Like the [[#Resource View]] page for any resource, beneath the Package's name, description and type, is a button toolbar and tabs. To the right are disclosure icons that reveal parent [[Deployment]]s and [[Package]]s. You can access this information from the &quot;Parent Resources&quot; area, too.

Below the tabs, the Package's [[Package#Metadata|metadata]] and attributes are listed (e.g., &quot;Filename&quot;, &quot;Filetype&quot;, etc.).

====Builder list====
Pressing the '''Builder List''' icon displays all [[Builder]] resources registered to the project resource model.
Each Builder is displayed on its own row, organized into several columns.
* A [[Image:icon-tiny-disclosure.png|disclosure]] icon to the far left, will display more detail for the Builder
* The Builder name (e.g., &quot;simple-builder&quot;) is a link that will let you view just that Builder in detail. This column also displays the Builder's description and any tags.
* Nodes represent parent resources related to that Builder.

[[Image:Workbench-PackageManager-Builder-list.png]]
====Builder view====
[[Image:Workbench-PackageManager-Builder-view.png|thumb|Builder view]]

Clicking the link for a builder in the Builder List, will display detail about that Builder. Like the [[#Resource View]] page for any resource, beneath the Builder's name, description and type, is a button toolbar and tabs. To the right are disclosure icons that reveal related [[Node]]s. You can access this information from the &quot;Child Resources&quot; or &quot;Parent Resources&quot; areas, too.

Below the tabs, the Builder's [[Builder#Metadata|metadata]] and attributes are listed (e.g., &quot;Base Directory&quot;, &quot;buildFile&quot;, etc.).

===Service Manager===
The ''Service Manager'' contains [[Service]]s and [[Site]]s. 

[[Image:Workbench-ServiceManager.png|thumb|Service Manager]]
====Service list====
Pressing the '''Service List''' icon displays all [[Service]] resources registered in the project resource model.
Each Service is displayed on its own row, organized into several columns.
* A [[Image:icon-tiny-disclosure.png|disclosure]] icon to the far left, will display more detail for the Service
* The Service name (e.g., &quot;simpleTomcat&quot;) is a link that will let you view just that Service in detail. This column also displays the Service's description and any tags.
* Package represent child resources related to that Service. 
* Nodes represent parent resources related to that Service.

[[Image:Workbench-ServiceManager-Service-list.png]]

====Service view====
[[Image:Workbench-ServiceManager-Service-view.png|thumb|Service view]]

Clicking the link for a service in the Service List, will display detail about that Service. Like the [[#Resource View]] page for any resource, beneath the Service's name, description and type, is a button toolbar and tabs. To the right are disclosure icons that reveal related [[Package]]s and [[Node]]s. You can access this information from the &quot;Child Resources&quot; or &quot;Parent Resources&quot; areas, too.

Below the tabs, the Service's [[Service#Metadata|metadata]] and attributes are listed (e.g., &quot;Base Directory&quot;, &quot;service-isdown-script&quot;).

====Site list====
Pressing the '''Site List''' icon displays all [[Site]] resources registered in the project resource model.

[[Image:Workbench-ServiceManager-Site-list.png]]

Each Site is displayed on its own row, organized into several columns.
* A [[Image:icon-tiny-disclosure.png|disclosure]] icon to the far left, will display more detail for the Site
* The Site name (e.g., &quot;simple&quot;) is a link that will let you view just that Site in detail. This column also displays the Site's description and any tags.
* Package represent child resources related to that Site. 
* Nodes represent parent resources related to that Site.

====Site view====
[[Image:Workbench-ServiceManager-Site-view.png|thumb|Site view]]

Clicking the link for a site in the Site List, will display detail about that Site. Like the [[#Resource View]] page for any resource, beneath the Site's name, description and type, is a button toolbar and tabs. To the right are disclosure icons that reveal related [[Package]]s and [[Node]]s. You can access this information from the &quot;Child Resources&quot; or &quot;Parent Resources&quot; areas, too.

Below the tabs, the Site's [[Site#Metadata|metadata]] and attributes are listed.

===Process Manager===
====Updater list====
Pressing the '''Updater List''' icon displays all [[Updater]] resources registered in the project resource model.
Each Updater is displayed on its own row, organized into several columns.
* A [[Image:icon-tiny-disclosure.png|disclosure]] icon to the far left, will display more detail for the Updater
* The Updater name (e.g., &quot;simple&quot;) is a link that will let you view just that Updater in detail. This column also displays the Updater's description and any tags.
* Nodes represent parent resources related to that Updater.

[[Image:Workbench-ProcessManager-Updater-list.png]]
====Updater view====
Clicking the link for a node in the Updater List, will display detail about that Updater. Like the [[#Resource View]] page for any resource, beneath the Updater's name, description and type, is a button toolbar and tabs. To the right are disclosure icons that reveal related [[Node]]s. You can access this information from the &quot;Child Resources&quot; or &quot;Parent Resources&quot; areas, too.

Below the tabs, the Updater's [[Updater#Metadata|metadata]] and attributes are listed.

==Resource View==
When an individual resource is selected from a List view, the resource is displayed in its own view page. To return to the list view, click the link that says to &quot;&amp;larr; Return to XXX List&quot;.

The resource view page is the same for any kind of resource, and is organized in a standard layout. The graphic below provides a legend to the main areas of the resource view.

[[Image:Workbench-Resource-view-legend.png|Resource view legend]]

The function and use of each area of the view page is described in the following sections.

===Search Browse===
[[Image:Workbench-Search-resources.png|thumb|Search/Browse]]
The Search Browse tool provides methods to search or navigate to other resources in the model.

The [[#Search objects]]  form (described earlier) allows a user to search for resources by entering a search string and choosing the type of keyword.

The &quot;Browse Objects by Type&quot; provides a dynamic browser that lets you navigate objects via the type hierarchy.
Navigation works similar to the [[Graphical_type_editor#Type_browser|Type Browser]] in the [[Graphical type editor]].
* A green [[Image:icon-tiny-add.png|add]] button can be pressed to create an instance of the chosen Type.
* Pressing the [[Image:icon-tiny-ResourceObject.png|resource object]] icon will list instances of that type.
* The [[Image:icon-tiny-disclosure.png|disclosure]] icon will show subtypes for that Type.

===Toolbar===
The toolbar provides buttons to access a number of operations.

[[Image:Workbench-Resource-view-toolbar.png]]

# Edit: Edit the resource definition. Go to the [[#Edit form]]
# Copy: Create a copy of this resource. Go to the [[#Copy form]]
# Graph: Display a graph showing the resource relationships. Go to the [[#Graph form]]
# XML: Generate an XML view of this resource's definition. Go to the [[#XML view]]
# Remove: Remove the resource from the project resource model. Go to the [[#Remove form]]
# Lock: Lock the resource to prevent further modification. Go to the [[#Lock form]]

====Edit form====
[[Image:Workbench-Resource-edit-bottom.png|thumb|Edit form buttons]]

Pressing the [[Image:icon-small-edit.png]] toolbar icon directs the browser to the Edit form.
The edit form displays a set of text fields to modify the resource's property values. After making any modifications, pressing the &quot;Save&quot; button will store the values in the resource model. Pressing the &quot;Cancel&quot; button directs the browser back to the view page for that resource.

The edit form may display popup menus next to the text fields, if the Type has declared a [[Constraints#String_Constraints|string constraint]] for that property value. The constraint can be set set to enforced or unenforced. If the constraint is enforced, the the text field will not be editable and only values from the popup menu can be used.

[[Image:Workbench-Resource-edit-top.png]]

{{Caution|The Edit, Copy, Remove forms all have a text area to type in a comment for the version history model. To minimize model storage version history, your installation's configuration may have disabled storing version history.}}

====Copy form====
The Copy form allows you to create a new resource based on the property values of another. &lt;br/&gt;
Pressing the [[Image:icon-small-copy.png]] toolbar icon directs the browser to the Edit form with the text fields already populated. 

If the resource has child or parent dependencies, the browser is directed to an intermediate form where you can choose to duplicate the child and parent resource relationships. 

[[Image:Workbench-Resource-copy-form.png]]

After making the selections, pressing the &quot;Continue...&quot; button directs the browser to the resource edit form where you can customize any other property field. Press &quot;Save&quot; when you are done.

====Graph form====
[[Image:Workbench-Resource-graph-form.png|thumb|Graph form]]
Resource relationships can be graphed using the Graph form. &lt;br/&gt;
Press the [[Image:icon-small-graph.png]] toolbar icon to be directed to the graph page.
The shape displayed with green fill, is the resource &quot;in focus&quot;. Clicking the green shape, will reorient the form to show that resource's  parent resources. Clicking the green shape again orients the graph to show the resource's child resources.

The graph view contains a &quot;Graphs Controls&quot; popup window that lets you control what information is included in the graph.

Clicking on any shape in the graph will set the focus of the graph to that resource thus you can traverse the entire resource model by navigating through resource relationships.

To return to the resource view page, click the link in the top left of the graph.

====XML view====
[[Image:Workbench-Resource-xml-view.png|thumb|XML view]]
It is often desirable to manage the resource model definition as an XML file (i.e., rather than relying on this graphical editor). Resource definitions can be written in XML with a text editor and later uploaded to the [[ControlTier server]]. The XML definition must adhere to the [[project.xml]] schema.

Pressing the [[Image:icon-small-file-xml.png]] toolbar icon will generate the XML definition for the resource. 

Depending on your browser, it might be necessary to &quot;View Source&quot; to see the generated XML.

====Remove form====
Press the [[Image:icon-small-removex.png]] toolbar icon to remove the resource. This will direct the browser to the remove form.
If the resource has parent resources, they will be displayed in the form.

[[Image:Workbench-Resource-graph-remove.png]]

Press the &quot;Yes&quot; button to remove the resource from the model. Pressing the &quot;No&quot; button returns the browser to the view page.

====Lock form====
Press the [[Image:icon-small-lock.png]] toolbar icon to lock the resource from further modification. This will direct the browser to the Lock form. Press the &quot;Lock&quot; button to lock the object.
After the object is locked the toolbar will be reconfigured. Notice the &quot;Edit&quot; button is no longer displayed and the lock icon has changed.

[[Image:Workbench-Resource-view-toolbar-locked.png]]

Press the [[Image:icon-small-unlock.png]] toolbar icon to unlock the resource and reenable the toolbar for resource modification.
Once the resource is unlocked, the toolbar will return to its normal configuration.

{{Caution|The locking feature only controls modification within the Graphical resource editor. [[ProjectBuilder]] users can still upload [[project.xml]] to the resource model. }}

===Tabbed views===
The Resource view contains a tab bar allowing you to toggle between several sub views.

[[Image:Workbench-Resource-view-tabs.png]]

Pressing a tab button will change to that view.

====Details tab====
The Details tab provides the primary view to the resource. The Details tab contains information about the property values for the resource. If the resource has associated [[Attributes]] they will be displayed as well.

=====Child Resources=====
Child resource relationships can be viewed and modified in this area of the Details tab. 
The number of relationships is reflected in the link name. For example, if there are twelve child resources the link will read, &quot;Child Resources (12)&quot;.
======Viewing ======
[[Image:Workbench-Resource-view-children-list.png|thumb|Child Resources: list view]]

Press the Child Resources link to reveal the resource dependencies. If no child resource relationships exist, there will be a button labeled &quot;+ add&quot; otherwise it will be labeled &quot;change...&quot;. Pressing the button will direct the browser to the Change/Add form.

There are two display styles, &quot;tree&quot; and &quot;list&quot;. The tree display lists each resource along with [[Image:icon-tiny-disclosure.png|disclosure]] disclosure icon. Pressing the disclosure icon allows you to navigate to that resource's child resources. 

[[Image:Workbench-Resource-view-children-tree.png]]

The &quot;list&quot; display organizes the child resources by their type.

======Change/Add form======
Pressing either the add or change button from the Child Resources link, directs the browser to a form that allows one to select or deselect child resource relationships. The form highlights existing child resources in yellow.

The behavior of this form is controlled by resource type's [[Constraints]]. Only resources that are of [[Constraints#Add_an_Allowed_Type_Constraint|allowed types]] are included in the form. If  [[Constraints#Add_a_Singleton_Allowed_Type_Constraint|only single instance allowed]] constraint is defined for a resource type, then the form will use a series of radio buttons to choose among those instances of that type.

[[Image:Workbench-Resource-add-children.png]]
=====Parent Referrers=====
Parent resource relationships can be viewed and modified in this area of the Details tab. 
The number of relationships is reflected in the link name. For example, if there are two parent resource relationships the link will read, &quot;Parent Referrers (2)&quot;.
======Viewing ======
Press the Parent Referrers link to reveal the parent resources. If no parent resource relationships exist, there will be a button labeled &quot;+ add&quot; otherwise it will be labeled &quot;change...&quot;. Pressing the button will direct the browser to the Change/Add form.

[[Image:Workbench-Resource-view-parents-list.png]]
======Change/Add form======
Pressing either the add or change button from the Parent Referrers link, directs the browser to a form that allows one to select or deselect parent resource relationships. The form highlights existing parent resources in yellow.

The behavior of this form is controlled by resource type's [[Constraints]]. Only resources that are of [[Constraints#Add_an_Allowed_Type_Constraint|allowed types]] are included in the form. If a [[Constraints#Add_a_Singleton_Allowed_Type_Constraint|singleton constraint]] is defined for a resource type, then the form will use a series of radio buttons.

[[Image:Workbench-Resource-add-parents.png]]
=====Documents=====
Resources can define [[transform]] documents which are used to generate text files from template files. The transformation process provides several choices of template types and data input formats.

The number of documents is reflected in the link name. For example, if there is one document defined, then the link will read, &quot;Documents (1)&quot;.
======Viewing ======
Pressing the Documents link will reveal the defined documents. A button labeled &quot;+ add document&quot; can be pressed to define a new document transform.

[[Image:Workbench-Resource-view-documents.png]]

The parameters of each defined document is described with text and icons. A button bar to the right of it allows you to edit, view or remove the definition.

======Detail view======
Clicking a document name in the Documents list, brings you to the &quot;Transform detail&quot; page. On this page, one can view the transform definition, preview the document transformation, or view the input data representations.
The detail view page is split into three tabs: Overview, Data View and Property View. The Overview tab displays a button bar where one can:
* [[Image:icon-small-edit.png]]: edit the definition
* [[Image:icon-docTxt.png]]: execute the transform. The image for this button changes based on the output file content type
* [[Image:icon-data.png]]: view the XML model representation

[[Image:Workbench-Resource-view-documents-view-overview.png]]

[[Image:Workbench-Resource-view-documents-property-data.png|thumb|Property View]]

The &quot;Data View&quot; tab displays the resource model data in a graphical form that generates XPath expressions useful for those using the &quot;simple&quot; template type. Moving the mouse over the blue text, will produce a mouse tip with an XPath expression for that piece of data.

[[Image:Workbench-Resource-view-documents-view-data.png]]

The &quot;Property View&quot; tab displays the resource model data as key/value pairs and useful for those writing Ant filter templates.

======Add form======
Pressing the &quot;+ add document&quot;  button directs the browser to the Define New Transform form.
Defining a new transform is done in two steps. 
The first step, has you choose parameters that control how much of the resource model is included as data context to the template.
The &quot;degree(s) away&quot; popup menu specifies how many levels of relationships should be included. The set of radio buttons below, determine if child resources, parent resources or both should be included.
[[Image:Workbench-Resource-view-documents-add1.png]]

After pressing the &quot;Continue...&quot; button, the browser will be directed to step two of the definition. This form provides text fields where you specify information about the output file and template.
[[Image:Workbench-Resource-view-documents-add3.png|thumb|Choose a template]]

[[Image:Workbench-Resource-view-documents-add2.png]]

The form contains these fields:
* Output file Name: Name of the file to write transform results
* Output directory: Directory where output file should be written
*Content type: Output file content type
*: Plain text: Unformatted text
*: HTML: An HTML document
*: XML: An XML document
* Description: Description of the role or purpose of the document
* Template: Template file to use. The template specified can be a path relative to the WebDAV or a file relative to the client. Click the [[Image:icon-small-find.png]] icon to choose a template using a simple WebDAV browser.
* Template type: Specifies what transformation process to use
*: Simple (xpath): A plain text template file that contains XPath expressions. Input is given as an XML file
*: XSLT: An XSL template. Input is given as an XML file
*: Ant filter: A plain text file processed by Ant filter expansion. Tokens are demarcated with &quot;@&quot; characters.

======Edit form======
Existing document definitions can be modified using the Document Edit form.

[[Image:Workbench-Resource-view-documents-edit.png]]

Make the desired changes and then press the &quot;Save Changes&quot; button.

====Commands tab====
The commands tab displays the [[Type_modeling#Commands|commands]] defined by this resource's type. (See the [[Graphical type editor]] for an interface to define your own types and commands). 
The commands tab will also list the Nodes this command can run (specified as Node parent referrers).
Each command is shown with its general usage, description and a set of icons. These icons link to other actions described below.

[[Image:Workbench-Resource-view-commands.png]]

=====Command usage=====
Press the [[Image:icon-small-flag-on.png]] icon to display the command line usage for this command.

[[Image:Workbench-Resource-view-commands-usage.png]]

Press the &quot;&amp;laquo; Commands List&quot; button to return to the list of all commands.

=====Run in Jobcenter=====
Press the [[Image:icon-small-rarrow-blue.png]] icon to run the command in Jobcenter.

=====Process flow=====
Press the [[Image:icon-small-Command.png]] icon to display the process flow for this command.

[[Image:Workbench-Resource-view-commands-pview.png]]

Press the &quot;&amp;laquo; Commands List&quot; button to return to the list of all commands.

====Properties tab====
The Properties tab displays the model for the resource in simple key/value form.
Properties provide a flattened view about an resource's own information, as well as, information about related resources. Each resource within the view is transformed to a set of name/value pairs and provide data context to commands defined for this resource type. 

[[Image:Workbench-Resource-view-properties.png]]

The Properties tab includes a &quot;Filter&quot; text field that lets you filter the displayed properties through simple regular expression matching.
The &quot;Dependencies&quot; and &quot;Degrees away&quot; parameters are [[Graphical_type_editor#Command_module_settings|command module settings]] defined in the resource's Type. 

==See also==
* [[Graphical type editor]]
* [[Command execution]]

{{Manual/navbox}}
[[Category:Resource model]]
[[Category:Workbench]]</text>
    </revision>
  </page>
  <page>
    <title>Graphical resource editor features</title>
    <id>242</id>
    <revision>
      <id>11808</id>
      <timestamp>2009-12-17T03:49:05Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">      &lt;p&gt;Workbench implements a [[Graphical resource editor]] that lets you maintain a resource model
      describing physical and application resources. Beyond a simple catalog
      of configuration items, the resource model repository also lets you
      define relationships between resources. Relationships are used to describe package
      dependencies (between packages and related deployments), application infrastructure
      component integration (such as app server to databases), and the physical resources (like hosts).
      These capabilities make Workbench a ready [http://en.wikipedia.org/wiki/CMDB CMDB]
      solution for those adopting [http://en.wikipedia.org/wiki/ITIL ITIL] best practices.
      &lt;/p&gt;     

[[Image:workbench-cmrepository-cursory.png]]

      &lt;p&gt;The diagram shown above depicts the main components of the resource model repository.
      The model store is a persistent datasource of model schema and instance data. A
      transform engine lets you define templates that bind to views of instance data in the datasource
      to generate output in various formats. The query service lets you lookup data in the repository
      to access information about resources or their relationships.
      &lt;/p&gt;

      &lt;p&gt;The resource model schema is based on [[:Category:Types|ControlTier Types]] and contains concepts 
      such as [[Resource]], [[Assembly]], [[Node]], [[Package]], [[Deployment]], [[Service]], [[Setting]], [[Site]]
      and relationship constraints that let you control how items can be related.
      Either through the [[Graphical type editor]] or [[type.xml]] one can extend the basic model allowing
      the introduction of new resource types and constraints.
      &lt;/p&gt;

==Uses==

      &lt;p&gt;You can use Workbench to maintain all kinds of configuration data.
      This section shows off some examples.
      &lt;/p&gt;
      
      &lt;p&gt;&lt;strong&gt;Node Inventory&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;[[Node|Nodes]] are an example of one of the basic resource types that is built into 
      the Workbench UI. This view is accessible via the Node Manager which lets you
      list and lookup host machines.
      &lt;/p&gt;
      &lt;p&gt;The basic Node resource type provides a  number of generic attribtutes 
      (like operating system and hostname). Of course, you can define your own
      attributes that let you record other kinds of host information.
      &lt;/p&gt;
      
[[Image:workbench-screenshot-nodes.png]]

      &lt;p&gt;&lt;strong&gt;Configuration Settings&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;[[Setting|Settings]] are a basic resource type that lets you define individual configuration details.
      Often settings are used to describe application configuration (such as ports, timeouts, 
      file paths, etc).
      &lt;/p&gt;
      &lt;p&gt;It's often useful to create your own setting types that represent your
      specific kinds of configuration data.
      &lt;/p&gt;
            
[[Image:workbench-screenshot-settings.png]]

      &lt;p&gt;&lt;strong&gt;Relationships&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;A key feature in the resource model, is the ability to
      define relationships between resources. For example, you might want to
      group a set of configuration settings based on the application component they describe.
      &lt;/p&gt;
      &lt;p&gt;Relationships can also be used to define configuration beyond settings to include
      packages dependencies, and even relationships to other services. 
      The graphic below shows  those kinds of relationships:
      &lt;/p&gt;
      
[[Image:Workbench-relationships.png]]

      &lt;p&gt;Workbench provides a graphical interface into viewing and editing these relationships
      as depicted by the following screenshot:
      &lt;/p&gt;

[[Image:workbench-screenshot-relationships.png]]

      &lt;p&gt;&lt;strong&gt;Integrated Business Services&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;[[Site|Sites]] build on the idea of relationships. You can use Sites to define how your integrated software
      system is connected to comprise a business service. Typically, a business service is
      composed of several interacting software [[Service|services]]. 
      &lt;/p&gt;

      &lt;p&gt;The graphic below describes two example business services,
      a retail store and an online brokerage service.
      Each business service is based on a similar set of resources -
      apache, jboss and mysql - each of which has its own configuration.
      &lt;/p&gt;

[[Image:Workbench-service-relationships.png]]

      &lt;p&gt;Workbench exposes these relationships graphically, allowing you to visualize
      how your business services are arranged. It also gives you convenient roll up
      views on where the service's components are deployed (to show what hosts they are deployed) and
      what sofware packages they currently use (to show what versions they're using).
      &lt;/p&gt;

[[Image:workbench-screenshot-site.png]]

      &lt;p&gt;Maintaining a map of your business service is crucial to understanding impacts due to 
      failures, change outages and migrations. Having a view into your integrated software system
      will
      &lt;/p&gt;
      &lt;ul&gt;
	&lt;li&gt;help you understand upstream and downstream impacts, 
	&lt;/li&gt;
	&lt;li&gt;have visibility into where your application components are deployed,
	&lt;/li&gt;
	&lt;li&gt;let you correlate dependencies between application components
	&lt;/li&gt;
      &lt;/ul&gt;

==Repository Interfaces==

      &lt;p&gt;Workbench provides several repository interfaces to add, maintain
      and access configuration data. This section describes the Workbench
      data interfaces supporting data input and output.
      &lt;/p&gt;
      &lt;p&gt;&lt;strong&gt;Input&lt;/strong&gt;&lt;/p&gt;

      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	  &lt;th&gt;Form-based GUI
	  &lt;/th&gt;
	  &lt;td&gt;Workbench includes both a graphical resource editor.	
	  The resource editor lets you create and modify instances of your data types
	  and link them together to define relationships.w&lt;/td&gt;
	  &lt;td&gt;
	    [[Image:workbench-screenshot-forms.png]]
	  &lt;/td&gt;
	&lt;/tr&gt;
	
	&lt;tr&gt;
	  &lt;th&gt;XML&lt;/th&gt;
	  &lt;td&gt;XML specifications can be used used to define new resources or modify existing ones stored
	  the repository. See [[ProjectBuilder]] and [[project.xml]]&lt;/td&gt;
	  &lt;td&gt;
	    [[Image:workbench-xml-input.png]]
	  &lt;/td&gt;
	&lt;/tr&gt;
	
	&lt;tr&gt;
	  &lt;th&gt;Scripted&lt;/th&gt;
	  &lt;td&gt;You probably maintain data in various places and formats.
	  You can use Workbench scripting interfaces to read existing data
	  and register new resources in the configration database. See [[modelutil]]&lt;/td&gt;
	  &lt;td&gt;
	    [[Image:workench-scripted-input.png]]
	  &lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;


      &lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	  &lt;th&gt;Query&lt;/th&gt;
	  &lt;td&gt;Use queries to lookup configuration items and their attributes,
	  coorelation between configuration items based on their relationships.
	  Simple lookups return data in Java properties format (key value pairs),
	  or XML documents.
	  &lt;/td&gt;
	  &lt;td&gt;
	    &lt;!--figure src=&quot;images/intro/workbench-entity-query.png&quot; alt=&quot;Workbench: Query&quot;/--&gt;
	  &lt;/td&gt;
	&lt;/tr&gt;
	
	&lt;tr&gt;
	  &lt;th&gt;Transforms
	  &lt;/th&gt;
	  &lt;td&gt;A transform is a template-based document that is bound to a
	  particular data view of a configuration object. The template engine
	  replaces references to data elements with their values stored in
	  the repository and writes the processed document to the designated location.
	  Use transforms to generate working application configuration files,
	  custom documentation, or inputs to other tools&lt;/td&gt;
	  &lt;td&gt;
	    &lt;!--figure src=&quot;images/intro/workbench-generated-config.png&quot; alt=&quot;Workbench: Generated config&quot;/--&gt;
	  &lt;/td&gt;
	&lt;/tr&gt;

      &lt;/table&gt;

{{Manual/navbox}}
[[Category:Workbench]]</text>
    </revision>
  </page>
  <page>
    <title>Graphical type editor</title>
    <id>1130</id>
    <revision>
      <id>14423</id>
      <timestamp>2010-11-11T18:03:36Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Resource model&lt;/categorytree&gt;
[[Image:Crystal_Clear_app_tutorials.png|left|75]]

The [[ControlTier server]] hosts a graphical [[Type modeling]] tool that lets you design every aspect of your custom types and commands.  Interfaces are provided to search and browse existing types. New types are defined through the process of sub-typing an existing type, choosing from one of the [[Core Type Guide|core types]] or from one of your own types. For existing types, you can define new commands, [[Constraints|constraints]], [[Attributes|attributes]] and objects. Workbench generates modules for all types that declare commands.

Workbench's design features are the graphical counterpart to the [[ProjectBuilder]] command line based utility and [[type.xml]].

==Type navigation==
The Workbench interface provides several places to navigate the types defined in your project. Your project will have been initialized with all the [[Core Type Guide|core types]] but may also contain other subtypes.

===Search form===

After login, you are directed to the Workbench home page. In the top right, you will see the &quot;Advanced Search&quot; button. Pressing that reveals a search text field and type browser button.

[[Image:type-editor-home-page.png]]

You can always return to the home page to access the Type Search form.

===Type search===
Type in the name of the type you are looking for into the text field and hit return. Matching types are listed in a results page.

[[Image:type-editor-search-results.png]]

Search strings are not case sensitive. You can use regular expressions.

===Type browser===
{{Workbench/typebrowser}}

==View type==

Once you have selected the type (either from the search results or via the type browser) you will be directed to the &quot;Type View&quot; page. 

Types are are displayed in a standard way. The type's name and description are displayed near the top. Below the description is a toolbar of buttons each containing a link to a type editing action. 

Below the toolbar is a row of buttons controlling tabbed views. Pressing a button in the tab button bar will select that view. 

To the right is the type browser, automatically opened to the selected type (eg, &quot;Service&quot;) and its super and subtypes. 

[[Image:type-editor-view-service.png]]

===Tabbed views===
Information about each type is divided up into several views organized into a set of tabbed windows. 

[[Image:type-editor-tabbar.png]]

Pressing the label in the tab bar will change the view to display that window tab.

* Details: Describes object creation settings and command module settings.
* Commands: Lists all commands declared for that type
* Files: A file browser listing all files generated or uploaded for this type
* Constraints: Controls [[Constraints]] and [[Attributes]]
* Objects: Lists all instances created for this type.

====Details tab====
Inside the &quot;Details&quot; view you can see a number of configuration values:

[[Image:Typemodel-type-configuration.png]]

===Type toolbar===

[[Image:type-editor-toolbar.png]]

# Edit: Edit the type definition
# Copy: Create a new type definition using the selected type as the initial specification
# Graph: Graph the commands defined in the type
# Delete: Delete the type definition from the project
# Lock: Lock the type definition so it cannot be edited. 

====Edit form====

Pressing the &quot;Edit&quot; icon in the toolbar will direct the browser to the &quot;Edit Type&quot; page. The form will include several form elements:
* Parent Type: This lets you change the super type
* Description: Change the description of the type
* Advanced Options: This is hidden but can be revealed by pressing the triangle icon to reveal the form element
** Role: Can be 'concrete' or 'abstract'
** Unique Object Name: Can be 'true' or 'false'
* Version History Log Entry: A comment that will be recorded in the history log.

[[Image:type-editor-edit-form.png|300px]]

Once the fill has been formed out to suit requirements the &quot;Save Type&quot; button is pressed to store the changes to the project.

=====Change supertype=====

[[Image:type-editor-change-supertype.png|thumb|200px|right|Change Supertype Form]]

The &quot;Parent Type&quot; form element described in the preceding section is actually a form itself. 

Pressing the Edit button next to the supertype name will direct the browser to a new page. This page will list all the supertype choices appropriate for this type.

Choice is specified by pressing one of the radio buttons and pressing the &quot;Change Supertype&quot; button.

====Copy form====
New type definitions can be created by copying the specification from another type. Press the &quot;Copy&quot; button in the toolbar.
This will direct the browser to the &quot;Copy Type&quot; form. The form includes elements:
* New Type Name: This is the name of the new type
* Description: Description of the new type

[[Image:type-editor-copy-form.png|300px|Copy form]]

====Graph form====
Commands defined in the type can be graphed. This is useful when the type defines a set of workflows.
Press the &quot;Graph&quot; button in the toolbar to bring up the graph tool.
By default the graph tool will display all commands.

[[Image:type-editor-graph-form.png|300px|Graph form]]

Inside the tool there is a &quot;Graph Controls&quot; link that will generate a pop-up window with several controls to configure the graph.

====Remove form====
A type definition can be removed from the project through the remove action. 
Press the &quot;Remove&quot; icon in the toolbar to remove the type.

[[Image:type-editor-remove-form.png|300px|Remove form]]

If any instances of the type had been created, the remove action will list them and require you to delete them first.

====Lock form====
Workbench supports a locking feature to prevent future modifications to the type definition.
To lock the type from being modified press the &quot;Lock&quot; icon in the toolbar.

Press the &quot;Lock Type&quot; button to store the change.

[[Image:type-editor-lock-form.png|300px|Lock form]]

After the type has been locked the toolbar buttons are reconfigured to show only two buttons

[[Image:type-editor-toolbar-locked.png]]

# Graph: Graphing the type
# Unlock: Unlock the type so it can be modified.

===Command module settings===
Each Type has two Object Creation Settings:
* Creation role: either &quot;concrete&quot;, or &quot;abstract&quot;. If &quot;abstract&quot;, then the Type is not allowed to have Objects created for it.
* Unique Object Names: true/false. If True, then all Objects of this Type must have a unique name.
To change the Object Creation Settings, choose the &quot;Edit Type&quot; link (Pencil icon) on the Type View page. Under the Advanced Options you can see options to change these values:

[[Image:Typemodel-type-object-settings.png]]

The Types also have a set of Command Module Settings:
* Logger Name: a string, unused.
* Transforms Directory: A path, used by the Documents feature. (optional)
* Failure Notifications: true/false. If True, then command failure notifications are sent to the Notification Email.
* Notification Email: An email address where failure notifications are sent.
* Dependencies View: Either Children, Parents, or both.
* View Degrees away: An integer from 1-4
To change the Command Module Settings, click the Pencil icon next to the list of Command Module Settings in the Type View.

[[Image:Typemodel-edit-module-settings.png]]

You will see this form:

[[Image:Typemodel-type-module-settings.png]]

==Create a type==

===Pick a supertype===

The first question you should ask is &quot;What Supertype should I use?&quot;

ControlTier's [[Core Type Guide|Core Types]], and all of the other pre-installed types offer a variety of solutions and features. You should examine them to determine what best suits your needs.

In the examples below we have decided to use Service as the Supertype. This is a good point to start from if you are implementing a Type to control some custom software service that does not already have a Type to control it.

===Create subtype===
To create a Type, first navigate to the Type you want as the Supertype.
Click the &quot;Create Subtype&quot; button the right side of the page:

[[Image:Typemodel-gui-create-subtype.png]]

Fill in the Name, Description, and optionally change the Object Creation Settings under the Advanced Settings section, then Click the &quot;Save Type&quot; button:

[[Image:type-editor-create-subtype.png]]

After pressing &quot;Save Type&quot;, you will be directed to the Type View page for your new type. Notice in the right hand of the screenshot how the &quot;Package Commands&quot; button has a warning icon. This means the type has been created but not packaged as a module archive. 

You will also notice how the type browser has focused on the new type and shows its supertypes above. This is a new type and therefore has no subtypes of its own.

Next to the &quot;Details&quot; tab you will notice the &quot;Commands&quot; tab. This tab shows the new type has 28 commands. These commands are inherited from the super type.

[[Image:type-editor-view-subtype.png]]

To the right of each inherited command is the type that declared it. For example the &quot;Deploy&quot; command is declared by the supertype, [[Service]].

==Create first command==

Commands can be created inside the Commands tab. To create a new command, press the &quot;+&quot; button. 

[[Image:type-editor-create-newcommand.png]]

===Choose command type===
The next screen shows a list of command types. 
* [[Shell command]]: Implement the command as a shell command
* [[Ant command]]: Implement using Ant tasks
* [[BSF command]]: Implement using a Bean Scripting Framework langauge
* [[Workflow command]]: Define a command as a sequence of commands defined in this type
* [[Dispatch command]]: Dispatch a command across a set of objects.

[[Image:type-editor-newcommand-form.png]]

The shell command type form contains these elements:
* Name: Command name (no spaces allowed)
* Description: Brief description
* Execution: Executable to invoke
* Arguments: Arguments to pass to executable
* Private: Checkbox specifying the command is private
* Static: If checked the command can be run outside of an object context. See [[CTL_Command_Reference#Context]]
* Daemon: The executable specified above will be spawned to the background

For this example we have chosen to define a Shell Command. Press the &quot;Shell Command&quot; link to bring up the command editing form. Fill in the name and description. Call the command &quot;hello&quot;. 
The &quot;Static&quot; checkbox is checked.
The &quot;Execution&quot; field specifies what shell command to call. This example uses the Unix &lt;code&gt;bash&lt;/code&gt; command. The &quot;Arguments&quot; field contains the content passed to the executable. Here specify &lt;code&gt;echo hello&lt;/code&gt;:

Press the &quot;Add Command&quot; button to save the command definition.

[[Image:type-editor-newcommand-shell-form.png]]

Once the command has been saved you will see your new command displayed at the top of the commands list. Your command has a yellow icon to the left of the command name. That yellow icon means that the command is defined in this type. The inherited commands have a gray icon to their left.

[[Image:type-editor-newcommand-shell-saved.png]]

===Command edit buttons===

To the right of the type name you will see a button bar. This contains buttons to various command editing functions. 

[[Image:type-editor-command-toolbar.png]]

# Edit command options (flags)
# Edit command defintion
# View generated command handler file on the WebDAV
# Copy this command definition
# Delete the command definition from this type

==Command option==

You can define parameters to your command as command line options. Press the flag icon in the commands toolbar to edit its command options. A gray flag signifies no options have been defined for it yet.

[[Image:type-editor-new-option.png]]

===Option form===
The command option form lists existing options (still none) and an &quot;Add Option&quot; form where you can define a new option.

[[Image:type-editor-add-option-form.png]]

In the Add Option form you will notice the following fields:
* Name: Name of the command option
* Description: Brief explanation of its purpose
* Required: If checked, the command will fail if this option is not set
* Arguments: If checked, the option expects an argument. Otherwise, the option is a boolean type.
* Default property: You can default options that take arguments to a named property.
* Default value: You can default the option to a literal string.

In this example, the form is filled out to define an option named &quot;message&quot; that takes an argument defaulted to the string &quot;world&quot;.

[[Image:type-editor-add-option.png]]

Pressing the &quot;Add&quot; link in the Add Option form will save the option definition to the list. The screen below shows the option &quot;-message&quot; has been defined. You can edit the option using the edit button or remove it using the delete button.

[[Image:type-editor-view-option.png]]

===Option usage summary===
After the options have been defined press the &quot;Update Command Options&quot; button. This will redirect the browser to the Commands tab. 

The command will now show the new command options next to the command name: &quot;hello [ -message &lt; world &gt; ]&quot;. Options that take arguments are shown with &quot; &lt; &gt; &quot; braces. If a default value is defined for the argument is is shown inside the braces (eg, &quot;&lt; world &gt;&quot;).

[[Image:type-editor-view-command-option.png]]

===Referencing command option data===
The option has been defined for the command but nothing references its value. Command option data can be referenced from command implementations as property references. Each command option is accessible via an &quot;opts.''parameter''&quot; property name. 

The command definition can be edited to get the value of the &quot;-message&quot; option. The command implemention can access it as &lt;code&gt;${opts.message}&lt;/code&gt;. Below the command edit form shows the Arguments field with the option data referenced. 

[[Image:type-editor-edit-command-option.png]]

The command option is defaulted to the string &quot;world&quot; which means that without arguments the hello command will echo &quot;hello world&quot; to the console.

==Package commands==

=== Modules ===

The definition of a Type exists in the ControlTier server's data model, yet in order to make the Commands of the Type usable, they must all be stored into an archive file and distributed to the various ControlTier Clients that need to use it.

A Module is a Java Jar Archive that is created to contain the Type definition and its related file resources, including the Command handler files, any included scripts or templates, and various metadata files which describe the Type itself.

To create the Type Module, navigate to the Type, and click the &quot;Package Commands&quot; button on the right side of the page:

[[Image:Typemodel-package-commands-1.png|Package Commands Button]]

The icon used on this button differs depending on whether the Type has been recently modified or not.  When there are changes that have been made to the Type that have not yet been stored in a Module, then the button has an exclamation mark to indicate that the Module is out of date:

[[Image:Typemodel-package-commands-2.png|Package Commands Button]]

When you click this button, the ControlTier server creates the Module file and names it ''Type''-head.jar.  This file is then stored in the [[WebDAV]] repository under the path &lt;code&gt;/''PROJECT''/publish/modules&lt;/code&gt;, where &quot;PROJECT&quot; is the name of your Project.  This is the location that ControlTier Clients will use to find the latest version of the Module when they need to download it.

[[Image:type-editor-package-commands.png]]

==Files tab==

After the &quot;Package Commands&quot; button is pushed, and Workbench has generated a module you can view them via the &quot;Files&quot; tab.

===File listings===
Pressing the Files tab will show the contents of the module directory. There are a number of standard subdirectories represented by folder icons and a set of files, each of which show their size, last modified time stamp and buttons.

[[Image:type-editor-files-tab.png]]

You can navigate into any subdirectory by pressing the link name. For this example, a new command was created and its command handler file can be listed. Click the &quot;commands&quot; link and its files are listed:

[[Image:type-editor-files-commands.png]]

===File view===

Clicking on a file name link will show the content of that file.

[[Image:type-editor-files-command.png]]

Pressing the edit button allows one to modify its content. Keep in mind that Workbench will re-write the command handler any time the &quot;Package Commands&quot; file is pressed. 

===File upload===

You can upload files to the module directory by pressing the upload icon. Pressing that button will reveal an upload form. The form includes two buttons. A file chooser button which will bring up a dialog where you select the file to upload. An &quot;Upload&quot; button that will take the chosen file and upload it to the module directory on the WebDAV repository.

The example below shows the upload form has been revealed and a file called &quot;date.sh&quot; has been chosen.

[[Image:type-editor-files-bin.png]]

After the file has been uploaded it, the Files tab will show the listing of the directory again this time with the new file.

In this example the &quot;date.sh&quot; file is now listed in the &quot;bin/&quot; directory. Two controls are provided. One button to edit the content of the uploaded file. The second button lets you delete the file from the directory.

[[Image:type-editor-files-bin-list.png]]

===File editor===

Pressing the edit button brings up a simple HTML text box displaying the content. You can change the content and then press the &quot;Save&quot; button to store the changed contents back to the WebDAV.

[[Image:type-editor-files-bin-edit.png]]

==Create second command==

In the previous section a shell script was uploaded to the types &quot;bin/&quot; directory.  The &quot;bin/&quot; directory is often used to store scripts called by commands. This approach lets you define an interface for a named procedure but maintain the implementation as an external shell script. Keeping the script inside the module lets you avoid worrying about distributing it separately to the CTL nodes. 

===Define command===

As in the first command example, go to the &quot;Commands&quot; tab and press the &quot;New Command&quot; button. Again, choose &quot;Shell command&quot; type and set it &quot;Static&quot;.

In command editing form the name, description, and execution strings are defined. In the Arguments string, the call to the script is expressed as &quot;&lt;code&gt;sh ${module.dir}/bin/date.sh&lt;/code&gt;&quot;. 

[[Image:type-editor-newcommand2-shell-form.png]]

The &quot;${module.dir}&quot; string is a dynamic property defined by the CTL command dispatcher that will reference the path to the installed module. 

Save the command by pressing the &quot;Add command&quot; button. After the command has been added, Workbench will return back the the commands listing.

[[Image:type-editor-commands-list2.png]]

The type now has two commands defined. 

As described in the previous section, it is necessary to package the commands again.  Press the &quot;Package Commands&quot; button

[[Image:Typemodel-package-commands-1.png|Package Commands Button]]

With two commands defined, and packaged as a module it is now possible to install it on a CTL node and run them.

==Use the module==
Pressing the &quot;Package Commands&quot; button ensured the generated module files for the type were stored in the WebDAV for distribution. These modules must also be installed to the CTL nodes so their commands can be executed.  Once the module has been installed to the desired nodes the commands are available to the command dispatcher and can be run via the [[Running ctl|ctl]] shell command or from [[Jobcenter]].

===Install the module===
On any CTL node (the server host is fine), run the [[Managed-Entity]]#&lt;code&gt;Install-Module&lt;/code&gt; command. This command will download the module from the WebDAV and extract it into the CTL project.

''execute''
&lt;pre&gt;
ctl -p demo -m Managed-Entity -c Install-Module -- -module NewServiceSubType
&lt;/pre&gt;

''output''
&lt;pre&gt;
Created dir: /Users/alexh/ctier/ctl/var/tmp/downloads/demo
Getting: http://strongbad:8080/jackrabbit/repository/controltier/projects/demo/publish/modules/NewServiceSubType-head.jar
To: /Users/alexh/ctier/ctl/var/tmp/downloads/demo/NewServiceSubType-head.jar
Created dir: /Users/alexh/ctier/ctl/projects/demo/modules/NewServiceSubType
Expanding: /Users/alexh/ctier/ctl/var/tmp/downloads/demo/NewServiceSubType-head.jar into /Users/alexh/ctier/ctl/projects/demo/modules/NewServiceSubType
Attempting to get Service-head.jar ...
Getting: http://strongbad:8080/jackrabbit/repository/controltier/projects/demo/publish/modules/Service-head.jar
To: /Users/alexh/ctier/ctl/var/tmp/downloads/demo/Service-head.jar
Service up to date
Attempting to get Deployment-head.jar ...
Getting: http://strongbad:8080/jackrabbit/repository/controltier/projects/demo/publish/modules/Deployment-head.jar
To: /Users/alexh/ctier/ctl/var/tmp/downloads/demo/Deployment-head.jar
Deployment up to date
&lt;/pre&gt;

You can install the module everywhere using [[Use_node_filtering_options|node dispatch options]]. The example below uses the &quot;-I .*&quot; option to signify run that command across all hosts in the depot:

''execute''
&lt;pre&gt;
ctl -I '.*' -p demo -m Managed-Entity -c Install-Module -- -module NewServiceSubType
&lt;/pre&gt;

You can see the installed module files in the CTL &quot;modules&quot; directory. Here's an example showing the Unix &lt;code&gt;ls&lt;/code&gt; command listing the modules directory for the &quot;demo&quot; project name: 

&lt;pre&gt;
ls $CTL_BASE/projects/demo/modules
&lt;/pre&gt;

===List the commands===

After the module has been installed to the ControlTier clients the &lt;code&gt;[[CTL_Command_Reference|ctl]]&lt;/code&gt; shell tool can list its commands. See [[CTL_Command_Reference#Listing_Mode]].

Ctl will list commands defined in a module by typing the module name but leaving out the command parameter.

The example below lists the commands for the new type. 

''execute''
&lt;pre&gt;
ctl -p demo -m NewServiceSubType
&lt;/pre&gt;

''output'' (appreviated)

&lt;pre&gt;
.
.
date: print the date
.
.
.
hello: a hello example
  [options]
  [-message &lt;world&gt;]: message to echo
.
.
.
&lt;/pre&gt;

===Run the commands===

With the type's generated module downloaded and installed to the client nodes where CTL is installed one can now execute the defined commands.

Here's the general usage to execute a module's command: &lt;code&gt;ctl -p ''project'' -m ''type'' -c ''command''&lt;/code&gt;. 

Below are examples using the two commands defined in this document.

Running the &lt;code&gt;hello&lt;/code&gt; command without options prints the default message string (&quot;world&quot;):

''execute''
&lt;pre&gt;
ctl -p demo -m NewServiceSubType -c hello
&lt;/pre&gt;

''output''
&lt;pre&gt;
hello world
&lt;/pre&gt;

Specify a different message to print using the &quot;-message &lt;&gt;&quot; option:

''execute''
&lt;pre&gt;
ctl -p demo -m NewServiceSubType -c hello -- -message dolly
&lt;/pre&gt;

''output''
&lt;pre&gt;
hello dolly
&lt;/pre&gt;

The second command defined was won called &lt;code&gt;date&lt;/code&gt;. This command calls an external shell script implementation that resides inside the module.

''execute''
&lt;pre&gt;
$ ctl -p demo -m NewServiceSubType -c date
&lt;/pre&gt;

''output''
&lt;pre&gt;
Tue Jul  7 10:45:23 PDT 2009
&lt;/pre&gt;

You can view the &quot;date.sh&quot; script that is called on the CTL host by looking in the local project. 

This example type was defined in the &quot;demo&quot; project. Doing a file listing in the bin directory shows the &quot;date.sh&quot; script.

&lt;pre&gt;
$ ls $CTL_BASE/projects/demo/modules/NewServiceSubType/bin
date.sh
&lt;/pre&gt;

==See also==
* [[Core Type Guide]]
* [[Workbench Designer]]
* [[ProjectBuilder]]

{{Manual/navbox}}

[[Category:Workbench]]
[[Category:Resource model]]
[[Category:Modules]]</text>
    </revision>
  </page>
  <page>
    <title>HOWTO - Generic Builder Setup</title>
    <id>727</id>
    <redirect />
    <revision>
      <id>3723</id>
      <timestamp>2009-03-28T00:09:19Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>[[HOWTO - Generic Builder Setup]] moved to [[Use Builder]]</comment>
      <text xml:space="preserve">#REDIRECT [[Use Builder]]</text>
    </revision>
  </page>
  <page>
    <title>Half Day Training</title>
    <id>993</id>
    <revision>
      <id>13689</id>
      <timestamp>2010-11-10T15:05:30Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;Service object&quot; to &quot;Service resource&quot;</comment>
      <text xml:space="preserve">Send an email to [mailto:training@dtosolutions.com?Subject=Half%20Day%20Training training@dtosolutions.com] or go to the [http://www.dtosolutions.com/controltier/ ControlTier Training and Support] page to schedule the Half Day Training.''

==Overview==
===What you will learn===
This training program describes the overall ControlTier concept. This includes the components that define a Control Tier, and the roles that people must adopt to build, manage, control, support and maintain a complex multi-tier application for a live Business Service environment.
====Learn To====
* Understand the core concepts that drive ControlTier
* Use the GUI and command line interfaces
* Encapsulate your procedures so they can be executed via the command dispatcher
* Introduce you to command sequencing using workflows

===Audience===
* System Administrators
* Software Engineers
* Build Engineers
* System Engineers

===Prerequisites===
==== Required Prerequisites ====
This training course contains a number of laboratory exercises that have the same system requirements as the [[Demo_system_requirements|ControlTier demonstration]].

==Schedule==
===Getting Started===
*[[What_is_ControlTier|What is ControlTier?]] - Introduces the ControlTier framework, discusses the problems that it solves, and how it differs from and complements other provisioning tools.
*[[Architecture]] - Describes the technical components of the ControlTier system
*[[ZIP_installer|Lab 1: Installing ControlTier from the command-line]]
*[[Concepts]] - Introduces the  fundamental concepts and approaches for using the ControlTier system.
* [[Getting Started]] - Introduces [[Command execution]] and controller types and workflows.
** [[Getting_started#Run_shell_scripts|Running ad hoc commands and scripts]]
** Lab 2: [[Replace your SSH loop script]]
** [[Getting_started#Run_defined_commands|Running defined commands]] &amp;mdash; Running type defined commands
** [[Utility Type Guide]] &amp;mdash; Introduce the utility types (aka coreutils). Compare ctl-exec and shellutil#exec
** Lab 3: [[Getting_started#Create_a_controller_type|Create a controller type]]

* Reported events &amp;mdash; Introduce [[Reportcenter]]
* [[Scripters cookbook]] &amp;mdash; Tips for script-driven solutions

* Lab 3: [[Scripted_appserver_war_deployment_example|scripted appserver war deployment]] example

&lt;!--
===Service Management===
* [[Resource Model]] &amp;mdash; Represents your real-world systems and workflows to operate on them.
*[[Course_-_Service_Life_cycle_Management#The_Service_Type|Service type and its life cycle]] - Introduce the Service type.
*[[Service_Package_Deployment_Example|Lab : Service Package Deployment Example]] - Shows the basics of using an object of the Service type to manage the deploy life cycle of a long running application Service.

Optional and time permitting:
*[[Course_-_Service_Life_cycle_Management#The_Site_Type|Site type and its life cycle]] - Introduce  the Site type.
*[[Mock_Site_Example|Lab : Mock Site Example]] - Shows the basics of using an object of the Site type, which allows you to dispatch commands to all Service resources organized within the Site.
*(Optional) [[Site_Coordination_Models|Site Coordination Models]] - Describes several ways you can organize the services in your environment to help cope with large scale and coordinated control across homogeneous and heterogeneous sets of services.

1.50 hours.
--&gt;



[[Category:Training Programs]]</text>
    </revision>
  </page>
  <page>
    <title>Help</title>
    <id>997</id>
    <revision>
      <id>16732</id>
      <timestamp>2012-05-16T03:43:18Z</timestamp>
      <contributor>
        <username>Ella19</username>
        <id>1789</id>
      </contributor>
      <minor/>
      <comment>adssdas</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Help&lt;/categorytree&gt;
'''Looking for help?'''

You can find help from a member of the [[Community]] via one of these channels:
* [mailto:controltier@googlegroups.com User list], the main ControlTier [[Mailing lists|mailing list]].
* [irc://irc.freenode.net #controltier] - the [[IRC]] channel.
* Find an issue or have a feature request see [[Bugs]] 
* Check the [[FAQ]]

'''Training'''

If you want structured instructor led [http://www.cavite-housing.com/ house and lot for sale in cavite] training, check out the '''[[Training]]''' page and sign up for a course led by a project committer.

'''Services'''

If you are interested in the help of an expert, send an email to [mailto:info@dtosolutions.com?Subject=Services info@dtosolutions.com] and schedule an appointment.

[http://www.dtosolutions.com/controltier/ DTO Solutions] is the primary provider of ControlTier Training and Support services.

'''Contextual navigation'''

Documentation has been organized into several guides, each with their own navigation box placed at the bottom of each page. Many pages also use a &quot;category tree&quot; in the top right of the page which contains a hierarchical navigation to other related pages.

{{Installation/navbox}}
{{Guide/navbox|state=uncollapsed}}
{{Manual/navbox}}
{{Reference/navbox}}
{{CtDevelopment/navbox}}
[[Category:Help]]</text>
    </revision>
  </page>
  <page>
    <title>High availability and large scale configuration</title>
    <id>335</id>
    <revision>
      <id>13967</id>
      <timestamp>2010-11-10T15:26:28Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;-objects&quot; to &quot;-resources&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Configuration&lt;/categorytree&gt;

As of 3.2, the default ControlTier installation uses a client-server configuration wherein the clients stay synchronized with the server via a pull based mechanism. 
During the execution of a workflow command, the necessary resource model data, module code and package artifacts are downloaded from the centralized ControlTier server via HTTP/GET.

This arrangement works well in development and QA environments because in that stage, it's preferable to stay in sync with the latest changes pushed to the server. This also facilitates the development iteration cycle.

On the other hand, for large scale and isolated production environments the default configuration poses these potential drawbacks:
* Performance bottleneck: Server must respond to a mixture of requests: file downloads, object data lookups, data transactions. This mixture of workload may interfere with optimal management operations. 
* Single point of failure: If the server is down, some commands on the client nodes may stop working or have unexpected behavior.
* Uncontrolled change: Changes to the object data, module code or package artifacts may be uploaded and released immediately, outside of change control windows.

This document describes a configuration and update model where:
* all necessary data and artifacts are produced in a build process that results in packaged artifacts
* the centralized server bottleneck is avoided by disconnecting the clients from live data synchronization and using packaged data instead
* updates to object data, modules and deployments are done during approved change windows.

== Resource model data==

CTL commands are data driven. This data is provided as a data representation of a CTL resource, normally in a file called [[resource.properties]]. During the course of a command execution, a step exists to synchronize the data representation with the state on the server (i.e., via [[Get-Properties]]). 

When a completely off-line mode is desirable, object data can be archived and delivered out-of-band to avoid the server request. Two facilities exist in the framework to support this notion:
# ProjectBuilder's &lt;code&gt;archive-resources&lt;/code&gt; command: This command queries the server and produces an archive of object data that can be delivered to the client machines in packaged form.
# CTL's [[CTL-ARCHIVE Command Reference|ctl-archive]] command: This command extracts the archives produced by &lt;code&gt;archive-resources&lt;/code&gt;

===Process===

This approach uses a traditional software life cycle wherein, 
* the object data is maintained as a set of text files in a source code repository (i.e., in [[project.xml]]),
* a build process reads the files, loads them into workbench and then generates a releasable artifact
* the artifact is released at a change control governed time
* the archive is extracted to the appropriate Nodes

===Delivery===

The diagram below describes the overall flow.

[[Image:archive-delivery.png]]

The diagram shows a process flow in roughly 6 steps
# A ProjectBuilder query specifies a set of objects it wants to archive data for and,
# then retrieves a representation for each one in the query result
# An archive of the object data is produced.
# A distribution tool (which could be ctl-exec or a package facility like RPM) copies it to each needed CTL node 
# and the relevant object data is extracted from the archive. 
# A framework configuration disables the Get-Properties step from connecting to the server.

Here's a diagram that shows a subset of the process but using RPM and Yum as the distribution tool:

[[Image:archive-delivery-rpm.png]]

It shows Yum is the distribution mechanism and the postinstall step in the RPM invokes the ctl-archive command.

== Module code ==

A module is a software artifact produced from a type.xml and a set of module source files during the ProjectBuilder build process. This build process includes archiving the generated artifacts into a JAR file which is loaded into the ControlTier server where the type definitions are merged into the project model. CTL has a built in mechanism to download new versions of these modules automatically or on demand so the clients stay synchronized with the latest versions on the server.

When a completely off-line mode is desirable, modules can be archived and delivered out-of-band to avoid these server requests. Two facilities exist in the framework to support this notion:
# ProjectBuilder's &lt;code&gt;build-library&lt;/code&gt; command: This command reads module sources and produces a library that can be delivered to the client machines in packaged form. This form is called a CTL &quot;extension&quot;.
# CTL's [[CTL-EXTENSION Command Reference|ctl-extension]] command: This command extracts the archives produced by build-library and installs them to the client.

===Process===

This approach uses a traditional software life cycle wherein, 
* the type data and module sources are maintained as a set of text files in a source code repository (i.e., in [[type.xml]]),
* the build-library process reads the files, generates a releasable artifact and loads them into the server. 
* the extension artifact is released at a change control governed time
* the extension archive is extracted to the appropriate Nodes

===Delivery===

The diagram below describes the overall flow.

[[Image:extension-delivery.png]]

The diagram shows a process flow in roughly 4 steps
# A ProjectBuilder reads a set of module source directories and generates an extension JAR file which can be uploaded to the server,
# An extension jar can be staged as a releasable artifact .
# A distribution tool (which could be ctl-exec or a package facility like RPM) copies it to each needed CTL node 
# and the relevant module data is extracted from the extension archive.

== Package artifacts ==
Package artifacts are delivered via &quot;Deploy&quot;, a foundational workflow that includes a step to install package dependencies for a given software deployment. This particular step is handled by [[Packages-Install]], a command which reads the object's package dependencies and for each one carries out its package install cycle. This cycle is also a workflow and the step named &quot;get&quot;, downloads the package from the server's WebDAV component.

For a large scale, high availability configuration, serving all file download requests from a centralized server may be impeded by various bottlenecks (network, disk, cpu).  A centralized server will also open itself to various availability risks (system, subnet).

An alternative configuration would be to use traditional web scaling techniques: caching proxies and VIPs.
* caching servers can be read only copies of the authoritative copies maintained on the WebDAV. Caching servers can be deployed in a fanned out arrangement, to best match up with subnet routing and bandwidth constraints.
* Redundant proxies can be advertised as VIP addresses. ControlTier client machines can be configured to use this VIP addresses to avoid availability outages.

===Process===
The process to support this model is roughly the same as the default configuration. Depending on the proxy server software employed, there may be additional cache synchronization procedures.

===Delivery===

The diagram below describes a possible deployment configuration:

[[Image:proxy-delivery.png]]

[[Category:Configuration]]</text>
    </revision>
  </page>
  <page>
    <title>How to use ControlTier</title>
    <id>1489</id>
    <redirect />
    <revision>
      <id>9291</id>
      <timestamp>2009-11-25T18:26:29Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <comment>moved [[How to use ControlTier]] to [[Using ControlTier]]</comment>
      <text xml:space="preserve">#REDIRECT [[Using ControlTier]]</text>
    </revision>
  </page>
  <page>
    <title>Hudson</title>
    <id>814</id>
    <revision>
      <id>14148</id>
      <timestamp>2010-11-10T15:59:28Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;ctl-depot&quot; to &quot;ctl-project&quot;</comment>
      <text xml:space="preserve">The '''Hudson''' module provides an interface to the [https://hudson.dev.java.net/ Hudson Continuous Integration Server]. The objective is to allow integration between [[Builder]] objects in ControlTier and the CI server. Specifically, the integration accomplishes the following:

* Allows build tool parameters, such as build targets, options, and arguments to be stored in ControlTier and written directly to a Hudson job definition config.xml.
* Defines the job to include steps that integrate with ControlTier, including setting the [[Builder]] object's buildstamp ([[setBuildstamp]]) and importing the build artifact into the ControlTier repository ([[repoImport]]).
* Allows use of a custom JDK and a custom build tool location for each Builder.

{{Version Required|3.4.4}}

== Limitations ==

This is currently an incomplete implementation with the following limitations. These will be addressed in a future release.
* Only AntBuilder and MavenBuilder are currently supported.
* Only [[Subversion]] and [[Git]] are currently supported.
* The service scripts do not currently check the logs to see if the Hudson/Winstone container startup was successful.
* This module has only been tested on UNIX and may need further changes to work in Windows.

These are known issues which are not planned to be fixed in a future release:
* You may not have builders of different types with the same name.

== Example ==

This example uses the dukesBank builder from the [[ControlTier Demo]]. It assumes the JBossAntBuilder named dukesBank is already defined and loaded.

Two new objects need to be defined.
* The first is a package of type [[HudsonWar]], to which we will associate the hudson.war downloaded from the Hudson website. The latest release can be [https://hudson.dev.java.net/servlets/ProjectDocumentList?folderID=2761&amp;expandFolder=2761&amp;folderID=0 downloaded from the Hudson project].
* The second is a deployment of type Hudson, which will have child dependencies on the HudsonWar package and the builder(s).

=== Example ProjectBuilder object xml ===

This file can also be found in the resources directory of the Hudson module.

&lt;pre&gt;
&lt;?xml version=&quot;1.0&quot;?&gt;

&lt;!DOCTYPE project PUBLIC &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; &quot;project.dtd&quot;&gt;

&lt;project&gt;
	&lt;!-- settings --&gt;

	&lt;!-- packages --&gt;

	&lt;package type=&quot;HudsonWar&quot; name=&quot;hudson-1.299.war&quot; version=&quot;1.299&quot; filename=&quot;hudson.war&quot;
	installroot=&quot;${resource.attribute.hudsonHome}&quot; repoUrl=&quot;/war/wars/hudson-1.299.war&quot; base=&quot;hudson&quot;/&gt;
        &lt;!-- Add the following for git support --&gt;
        &lt;package type=&quot;HudsonPlugin&quot; name=&quot;git.hpi&quot; version=&quot;20090106&quot; filename=&quot;git.hpi&quot;
        installroot=&quot;${resource.attribute.hudsonHome}/plugins&quot; repoUrl=&quot;/HudsonPlugin/hpis/git.hpi&quot;/&gt;


	&lt;!-- resources --&gt;

	&lt;deployment type=&quot;Hudson&quot; name=&quot;test&quot; description=&quot;test hudson service&quot; basedir=&quot;${env.CTIER_ROOT}/demo/elements/build/hudson&quot;&gt;
		&lt;resources replace=&quot;true&quot;&gt;
			&lt;resource type=&quot;HudsonWar&quot; name=&quot;hudson-1.299.war&quot;/&gt;
			&lt;resource type=&quot;JBossAntBuilder&quot; name=&quot;dukesBank&quot;/&gt;
                        &lt;!-- add the following for git support --&gt;
                        &lt;resource type=&quot;HudsonPlugin&quot; name=&quot;git.hpi&quot;/&gt;
		&lt;/resources&gt;
		&lt;referrers replace=&quot;false&quot;&gt;
			&lt;resource type=&quot;Node&quot; name=&quot;ctvm1.local&quot;/&gt;
		&lt;/referrers&gt;
	&lt;/deployment&gt;

&lt;/project&gt;
&lt;/pre&gt;

Copy and paste this into a file named &lt;code&gt;hudson.xml&lt;/code&gt;. I recommend that you place the file in &lt;code&gt;$CTIER_ROOT/demo&lt;/code&gt;.

Edit the version of Hudson to match the one that you have downloaded, and edit the Node resource to show your Hudson server's node name. The basedir attribute of the Hudson deployment tag represents the location of HUDSON_HOME, where the Hudson configuration and build information will be stored.

=== Step 1: Load objects ===

Run the following command to load the resources.

 ctl -p demo -t DukesBankProjectBuilder -r dukesbank -c load-resources -- -filename hudson.xml

Output should look similar to this:

&lt;pre&gt;
[mlei@ctvm1 demo]$ ctl -p demo -t DukesBankProjectBuilder -r dukesbank -c load-resources -- -filename hudson.xml
Loading &quot;/home/mlei/ctier/demo/hudson.xml&quot; ...
1 file(s) have been successfully validated.
Processing /home/mlei/ctier/demo/hudson.xml to /home/mlei/ctier/ctl/var/tmp/projectxml-538127680.xml
Loading stylesheet /home/mlei/ctier/ctl/projects/demo/modules/ProjectBuilder/lib/load-resources/projectxml/project.xsl
Mapping XML to properties ...
Collecting object attributes ...
Batching object attribute updates ...
Batching resource and referrer updates ...
Executing batch update ...
&lt;/pre&gt;

=== Step 2: Upload Hudson war file ===

Place the hudson.war file that you downloaded from the Hudson website into $CTIER_ROOT/workbench/incoming. Then from the Workbench project home page, browse through to Package Manager -&gt; Package List -&gt; hudson-1.xxx.war. Click the triangle next to &quot;Upload File&quot;. The relevant file should already be selected. Click Upload to proceed.

=== Step 3: Deploy objects to local depot ===

Install the resources into the local project name:

 ctl-project -p demo -a install

The output should include this:
&lt;pre&gt;
&quot;Install&quot; command running for resource: (JBossAntBuilder) dukesBank
&quot;Install&quot; command running for resource: (Hudson) test
&lt;/pre&gt;

=== Step 4: Deploy Builder(s) ===

Deploy the Builders associated with Hudson. In this case:

 ctl-project -p demo -t JBossAntBuilder -r dukesBank -c Deploy

Browse the output to make sure that all packages were installed successfully. Notably, the Hudson build will fail if Ant is not installed properly.

=== Step 5: Deploy Hudson ===

Then run the following command to deploy Hudson.

 ctl -p demo -t Hudson -r test -c Deploy

This will download the hudson.war file from the repository and place it in HUDSON_HOME. It will then generate the appropriate configuration files based on Hudson's child Builder objects and then start the Hudson service.

The tail end of the output will look like this.
&lt;pre&gt;
begin workflow command (4/4) -&gt; &quot;Start &quot; ...
begin workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot; ...
Hudson is down.
Running handler command: startService
Starting Hudson: ...done.
end workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot;
end workflow command (4/4) -&gt; &quot;Start &quot;
&lt;/pre&gt;

You can watch the log of Hudson's built-in Winstone servlet container at this location: &lt;code&gt;$HUDSON_HOME/winstone.log&lt;/code&gt;

=== Step 4: Kick off first build ===

Browse to your Hudson dashboard at http://''servername'':8081/

Click on the dukesBank job to go to the project page. At the left, click Build Now to start a build. The build number and progress bar will appear shortly below the menu in the Build History box. Click on the progress bar to see the live build log.

== Settings ==

The settings that can be assigned to Hudson, and their defaults, are as follows.
* HudsonAdminAddress: Email address of Hudson administrator. Default is ''build@localhost''
* HudsonAjpPort: The port to use for an AJP13 connection. Default is ''1100''. To disable, use ''-1''.
* HudsonDefaultMailSuffix: What to append to unqualified addresses; e.g. a suffix of ''@company.com'' would make ''mlei'' -&gt; ''mlei@company.com''. Does not change qualified addresses such as ''myname@domain.com''. Defaults to blank.
* HudsonHttpPort: The port to use for the Hudson web interface. Default is ''8081''. To disable, use ''-1''.
* HudsonHttpsPort: The port to use for the Hudson secure web interface. Default is ''-1'' (disabled). To enable, set a port number such as 8444.
* HudsonJavaHome: The JAVA_HOME to use to run Hudson. Default is ''the ControlTier server's $JAVA_HOME''.
* HudsonSmtpHost: Hostname of SMTP server to use for notification emails. Defaults to blank. Hudson uses ''localhost'' if this value is not specified.

For example, to use https on port 8444:

&lt;pre&gt;
&lt;?xml version=&quot;1.0&quot;?&gt;

&lt;!DOCTYPE project PUBLIC &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; &quot;project.dtd&quot;&gt;

&lt;project&gt;
	&lt;!-- settings --&gt;

	&lt;setting type=&quot;HudsonHttpsPort&quot; name=&quot;test&quot; description=&quot;Hudson web port&quot; settingValue=&quot;8444&quot;/&gt;

	&lt;!-- packages --&gt;

	&lt;package type=&quot;HudsonWar&quot; name=&quot;hudson-1.299.war&quot; version=&quot;1.299&quot; filename=&quot;hudson.war&quot;
	installroot=&quot;${resource.attribute.hudsonHome}&quot; repoUrl=&quot;/war/wars/hudson-1.299.war&quot; base=&quot;hudson&quot;/&gt;

	&lt;!-- resources --&gt;

	&lt;deployment type=&quot;Hudson&quot; name=&quot;test&quot; description=&quot;test hudson service&quot; basedir=&quot;${env.CTIER_ROOT}/demo/elements/build/hudson&quot;&gt;
		&lt;resources replace=&quot;true&quot;&gt;
			&lt;resource type=&quot;HudsonHttpsPort&quot; name=&quot;test&quot;/&gt;
			&lt;resource type=&quot;HudsonWar&quot; name=&quot;hudson-1.299.war&quot;/&gt;
			&lt;resource type=&quot;JBossAntBuilder&quot; name=&quot;dukesBank&quot;/&gt;
		&lt;/resources&gt;
		&lt;referrers replace=&quot;false&quot;&gt;
			&lt;resource type=&quot;Node&quot; name=&quot;ctvm1.local&quot;/&gt;
		&lt;/referrers&gt;
	&lt;/deployment&gt;

&lt;/project&gt;
&lt;/pre&gt;

== Git support ==
[[Git]] support for Hudson in ControlTier requires the [http://github.com/stephenh/hudson-git2/tree/master hudson-git2 plugin]. Add a HudsonPlugin object as shown in the example and attach it to the Hudson object as a dependency.

== Further notes ==

* The Hudson module does not use the basedir or installroot of the Builder object. Rather, it uses &lt;code&gt;$HUDSON_HOME/jobs/''projectName''/workspace&lt;/code&gt; as is the default in Hudson. If you wish to use the Builder object's Build command on the same code base as Hudson uses, set your basedir to &lt;code&gt;$HUDSON_HOME/jobs/''projectName''/workspace&lt;/code&gt;.
* There is no need to check out the code once before running the build. Hudson detects the lack of a workspace and will perform the initial checkout automatically.
* To add email notification to a project, add the [[BuilderNotificationList]] setting to your Builder and optionally set the HudsonSmtpHost, HudsonAdminAddress, and HudsonDefaultMailSuffix settings (or use the defaults).

[[Category:Elements]]
[[Category:Hudson]]
[[Category:Continuous integration]]</text>
    </revision>
  </page>
  <page>
    <title>HudsonPlugin</title>
    <id>966</id>
    <revision>
      <id>5296</id>
      <timestamp>2009-05-22T00:56:51Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <comment>ft '''HudsonPlugin''' is a trivial subtype of [[file]] that models a plugin for the Hudson continuous integration server; the usual extension is .hpi.  See [[Hudson]] for an example.</comment>
      <text xml:space="preserve">'''HudsonPlugin''' is a trivial subtype of [[file]] that models a plugin for the Hudson continuous integration server; the usual extension is .hpi.

See [[Hudson]] for an example.</text>
    </revision>
  </page>
  <page>
    <title>Hudson Usage</title>
    <id>815</id>
    <redirect />
    <revision>
      <id>4322</id>
      <timestamp>2009-04-27T19:05:14Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <comment>[[Hudson Usage]] moved to [[Hudson]]: better searchability</comment>
      <text xml:space="preserve">#REDIRECT [[Hudson]]</text>
    </revision>
  </page>
  <page>
    <title>INSTALL Command Reference</title>
    <id>106</id>
    <revision>
      <id>13780</id>
      <timestamp>2010-11-10T15:10:53Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;project depot&quot; to &quot;project name&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Command-line utilities&lt;/categorytree&gt;
= Synopsis =
&lt;pre&gt;
usage: install [options]
options:
 -D &lt;property=value&gt;   property=value pair used during software setup
 -c,--client           install just the client
 -d,--dir              ctier_root installation directory
 -f,--defaults         default.properties file
 -h,--help             print this message
 -p,--project          default project name name
 -v,--verbose          verbose mode
&lt;/pre&gt;

= Overview =

The install command is used after extracting the ControlTier software distribution to install and configure the ControlTier client or server deployments.

= Options =

&lt;table border=&quot;1&quot;&gt;
&lt;tr&gt;
&lt;th&gt;Option&lt;/th&gt;&lt;th&gt;alternate&lt;/th&gt;&lt;th&gt;argument&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-D&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;key=val&lt;/td&gt;&lt;td&gt;Specifies a key/value pair that overrides a property in the installer's defaults.properties file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-c&lt;/td&gt;&lt;td&gt;--client&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;Specifies only the client software be installed.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-d&lt;/td&gt;&lt;td&gt;--dir&lt;/td&gt;&lt;td&gt;directory&lt;/td&gt;&lt;td&gt;Specifies installation root directory. Defaults to $CTIER_ROOT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-f&lt;/td&gt;&lt;td&gt;--defaults&lt;/td&gt;&lt;td&gt; file&lt;/td&gt;&lt;td&gt;Specifies a key/value pair that overrides a property in the installer's defaults.properties file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-h&lt;/td&gt;&lt;td&gt;--help&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;Prints command usage info to the console&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-p&lt;/td&gt;&lt;td&gt;--project&lt;/td&gt;&lt;td&gt;name&lt;/td&gt;&lt;td&gt;The name of the project name to create after installation.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-v&lt;/td&gt;&lt;td&gt;--verbose&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;Verbose mode provides more output from the installer&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

= Default properties file =

The installer installs the ControlTier software using configuration data located in the &quot;default.properties&quot; file at the root of the package extraction directory.
The default.properties file contains several dozen configuration settings governing everything such as: install directories, network ports, smtp, hostname, user names, and project settings.

You can edit this file and customize any of the settings. When you run the installer, it loads the settings and then begins the installation process.

For users automating the installer, see [[#Overriding defaults]]

= Running =

== Default install ==

You can run the installer without any arguments to install the 
ControlTier software according to the defaults.

===Unix===

&lt;pre&gt;
sh ./install.sh
&lt;/pre&gt;

===Windows===

&lt;pre&gt;
install.bat
&lt;/pre&gt;

== Client install ==

You can instruct the installer to only install the client software via the &quot;-c&quot; flag.

===Unix===

&lt;pre&gt;
sh ./install.sh -c
&lt;/pre&gt;

===Windows===

&lt;pre&gt;
install.bat -c
&lt;/pre&gt;

== Overriding defaults ==
Any property defined in defaults.properties can be overridden from the command line using the &quot;-Dkey=val&quot; option. 
Multiple pairs of key=val option can be specified at one time.

The example below shows how to install just the client but override two defaults:
&lt;pre&gt;
sh ./install.sh --client\
  -Dserver.hostname=adminhost.domain \
  -Dclient.hostname=`hostname`
&lt;/pre&gt;

&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Installers]]
[[Category:Command-line utilities]]</text>
    </revision>
  </page>
  <page>
    <title>IRC</title>
    <id>331</id>
    <revision>
      <id>16738</id>
      <timestamp>2012-05-16T03:47:49Z</timestamp>
      <contributor>
        <username>Ella19</username>
        <id>1789</id>
      </contributor>
      <minor/>
      <comment>dsfdsf</comment>
      <text xml:space="preserve">__NOTOC__
&lt;noinclude&gt;&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Community&lt;/categorytree&gt;&lt;/noinclude&gt;
Our [[wikipedia:Internet Relay Chat|Internet Relay Chat]] channel is on [http://freenode.net/ Freenode].

* Server: '''irc.freenode.net'''
* Channel: '''#controltier'''
* irclog: http://controltier.org/irclog/controltier/

A few [http://www.cavite-housing.com/ cavite house and lot] members of the team are generally online and can answer questions.

== List of IRC clients ==

=== Linux/UNIX/X ===
* [http://pidgin.im Pidgin]
* [http://konversation.kde.org Konversation]
* [http://xchat.org XChat]
* Any number of curses IRC clients (ircii, bitchx, finch)

=== Mac OS X ===
* [http://colloquy.info Colloquy] for Mac OS X
* [http://adium.im Adium] 1.4 beta for Mac OS X

=== Windows ===
* [http://www.silverex.org/news/ X-Chat for Windows]
* [http://pidgin.im Pidgin]

=== Web clients ===
* [http://webchat.freenode.net/ Freenode webchat]
* [http://mibbit.com/chat Mibbit]

[[Category:Community]]</text>
    </revision>
  </page>
  <page>
    <title>IRC Channel</title>
    <id>869</id>
    <redirect />
    <revision>
      <id>4673</id>
      <timestamp>2009-05-01T01:56:31Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <comment>[[IRC Channel]] moved to [[IRC]]: simplification</comment>
      <text xml:space="preserve">#REDIRECT [[IRC]]</text>
    </revision>
  </page>
  <page>
    <title>InstallDirectories Type Reference</title>
    <id>186</id>
    <revision>
      <id>13473</id>
      <timestamp>2010-11-10T01:41:16Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;entity.&quot; to &quot;resource.&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Types&lt;/categorytree&gt;
=Description=

      &lt;p&gt;
	The InstallDirectories action instructs the 
	[[HandlerController Task Reference|handler-controller]]
	to ensure the directory structure specified by its attributes
	are created if they do not exist.
      &lt;/p&gt;

=Parameters=
      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;basedir&lt;/td&gt;&lt;td&gt;Specifies the base directory.
	  &lt;/td&gt;&lt;td&gt;Yes.&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;dirlist&lt;/td&gt;&lt;td&gt;Takes a comma separated set of names
	    to create as subdirectories to basedir.
	  &lt;/td&gt;&lt;td&gt;Yes.&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;
    
=Examples=

      &lt;p&gt;
	Creates a var and logs subdirectory beneath the
	base directory, ${resource.instance.dir}.
      &lt;/p&gt;
      &lt;pre&gt;
      &amp;lt;installdirectories
         basedir=&quot;${resource.instance.dir}&quot;
         dirlist=&quot;var,logs&quot;/&amp;gt;
    &lt;/pre&gt;
&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Command dispatcher Ant Types]]</text>
    </revision>
  </page>
  <page>
    <title>InstallProperties Type Reference</title>
    <id>187</id>
    <revision>
      <id>13629</id>
      <timestamp>2010-11-10T15:01:13Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;entity &quot; to &quot;resource &quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Types&lt;/categorytree&gt;
=Description=
      &lt;p&gt;
	The InstallProperties action instructs the 
	[[InstallProperties Type Reference|installproperties]]
	  HandlerController 
        to ensure the specified [[resource.properties]] file is installed.
      &lt;/p&gt;
 
=Parameters=

      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;if&lt;/td&gt;&lt;td&gt;Takes a property name and if it is set true,
	  will update the resource.properties file. If the
	  resource.properties does not exist, they will be installed in
	  any case.
	  &lt;/td&gt;&lt;td&gt;No.&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;basedir&lt;/td&gt;&lt;td&gt;Specifies the directory where the 
	  updated resource properties will be stored. If basedir
	  directory does not exist the action will fail.
	  &lt;/td&gt;&lt;td&gt;Yes.&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;
  
=Parameters specified as nested elements=
      &lt;p&gt;&lt;strong&gt;Context&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
	A [[Context Type Reference|context]]
	element specifies which object to get the resource.properties
	for. If the object does not exist in workbench, the request
	will fail.
      &lt;/p&gt; 
    
=Examples=
      &lt;p&gt;
	The example below shows a typical use of the
	installProperties action for a command handler. It specifies
	to install an updated resource.properties file, if the property
	framework.metadata.autoupdate property is set true and to
	install the updated properties in the object&amp;apos;s own
	directory, ${resource.instance.dir}/var. It uses the
	information in the current context (e.g., context.depot,
	context.type, context.name) to specify the object.
      &lt;/p&gt;
      &lt;pre&gt;
      &amp;lt;installProperties&amp;gt;
        &amp;lt;context
           depot=&quot;${context.depot}&quot;
           resourceType=&quot;${context.type}&quot;
           resourceName=&quot;${context.name}&quot;
           proximity=&quot;1&quot;
           direction=&quot;internal&quot;/&amp;gt;
      &amp;lt;/installProperties&amp;gt;
    &lt;/pre&gt;
&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Command Dispatcher Ant Types]]</text>
    </revision>
  </page>
  <page>
    <title>Install command</title>
    <id>1607</id>
    <redirect />
    <revision>
      <id>10656</id>
      <timestamp>2009-12-12T19:53:24Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>moved [[Install command]] to [[INSTALL Command Reference]]</comment>
      <text xml:space="preserve">#REDIRECT [[INSTALL Command Reference]]</text>
    </revision>
  </page>
  <page>
    <title>Installation</title>
    <id>12</id>
    <revision>
      <id>16731</id>
      <timestamp>2012-05-16T03:42:36Z</timestamp>
      <contributor>
        <username>Ella19</username>
        <id>1789</id>
      </contributor>
      <minor/>
      <comment>adfasf</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Installation&lt;/categorytree&gt;

This document describes how to install ControlTier server and client using either the [[ZIP installer]] script, or [[RPM installers]].

All installation [http://www.cavite-housing.com/ house and lot for sale in cavite] methods will setup both the server and the client components on the local machine. An optional client-only invocation of the install script can be used in distributed environments.

==Getting ControlTier==

{{:Latest release}}

== Upgrading existing installations ==

{{main|Upgrading}}

==Types of installation==
There are two kinds of ControlTier installation:

* '''Server''': The server install includes the full stack of ControlTier software: server tools (web apps such as [[Jobcenter]]) and the ControlTier client. The role of the server is to act as a central administrative point and provide a repository of data and release artifacts. A machine that has the ControlTier Server software installed is typically the designated &quot;admin host&quot; that has network access to all the machines where the ControlTier client is also installed.
 
* '''Client''': The ControlTier Client includes the CTL command dispatching tool and framework used for managing the application service(s) or automated process. Pre-installed as a library are a set of [[Core Type Guide|standard modules]]. A machine that has the ControlTier Client software installed include: web servers, application server, database, mail, portal, custom/proprietary apps, cluster components, etc.

;Note: The '''Server''' installation package also contains a full installation of the '''Client''' package. For a single-Node setup, you only need to install the '''Server'''.

== System requirements ==
{{main|System requirements}}
ControlTier runs on Linux, Windows, Solaris, and Mac OS X. Java 5 or 6 is required. Any recent system should work; however, please review the detailed [[system requirements]] before proceeding.

== SSH configuration ==

{{SSH/setup/intro}}

== Running the installer ==

Both the graphical and command line installers will install and configure the ControlTier Server. The command line installer provides an option to install just the client. It is also useful for automated installs. 

Prior to running the installer:
* Ensure the [[dependencies|Third party dependencies]] (e.g., Java and Graphviz) are available
* Review the [[Self-contained Directory Convention]]

Then run the preferred installer:
* Command line: [[ZIP installer|Instructions for using the command line installer (Zip)]]
* Redhat Package Manager: [[RPM_installers|Instructions for using the RPM installers]]

==Supported Browsers==
{{:Supported Browsers}}

==After installation==
If you are a new user, see [[Getting Started]].
{{Installation/navbox|state=uncollapsed}}
{{Guide/navbox}}
{{Manual/navbox}}
{{Reference/navbox}}

[[Category:Installation]]</text>
    </revision>
  </page>
  <page>
    <title>Installer</title>
    <id>1274</id>
    <redirect />
    <revision>
      <id>7419</id>
      <timestamp>2009-07-23T20:38:49Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <comment>Redirected page to [[Installation]]</comment>
      <text xml:space="preserve">#REDIRECT [[Installation]]</text>
    </revision>
  </page>
  <page>
    <title>Integrated build instructions</title>
    <id>526</id>
    <redirect />
    <revision>
      <id>9003</id>
      <timestamp>2009-11-18T00:29:50Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <comment>repointing to 3.4 version</comment>
      <text xml:space="preserve">#REDIRECT [[Integrated build instructions 3.4]]</text>
    </revision>
  </page>
  <page>
    <title>Integrated build instructions 3.2</title>
    <id>1889</id>
    <redirect />
    <revision>
      <id>12716</id>
      <timestamp>2010-05-16T23:17:09Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <comment>moved [[Integrated build instructions 3.2]] to [[Build instructions 3.2]]</comment>
      <text xml:space="preserve">#REDIRECT [[Build instructions 3.2]]</text>
    </revision>
  </page>
  <page>
    <title>Integrated module type source hierarchy</title>
    <id>295</id>
    <revision>
      <id>10700</id>
      <timestamp>2009-12-12T20:47:35Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;noinclude&gt;&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;ControlTier Improvement Process&lt;/categorytree&gt;&lt;/noinclude&gt;
This document is in reference to the [[2009 project goals]]

==Overview==

This page describes the new integrated module type source hierarchy. As of 3.2.x, there are three source bases where module type code is maintained: controltier, moduleforge, ctl-dispatch. For 3.3.x and going forward, it is agreed that these modules should be integrated into a common library, &quot;ctier-common&quot;. Doing so will:
* simplify the user experience with a standard set of functional modules (ie, not just generic base types)
* facilitate new type development (types in Elements sometimes require new functionality in base types)
* concentrate efforts resulting in a more cohesive set of types

==Source Structure==
This section suggests alternatives to maintaining module type sources. In either case, module sources will be located in one source code repository (e.g., moduleforge). 

===Option: Flattened===

Under this option, module sources are merged to ctier-common/src/modules leaving a single directory of module type sources.

EG, above this is truck/branches/
&lt;pre&gt;
CHECKOUT_DIR
|
|-ActiveMQ
|-AntBuilder
...
|-Builder
|-Deployment
...
|-Service
|-Tomcat
|-WarUpdater
...
`-zip
&lt;/pre&gt;

===Option: Grouped===

This option leaves module sources organized into subdirectories but the ctier-common build creates one library from them.

&lt;pre&gt;
CHECKOUT_DIR
|
|-base
|   |
|   |-Builder
|   |-Deployment
...
|   |-Service
... |
|    `-zip
|
|-coreutils
|   |
|   |-fileutil
|   |-textutil
|...
|
|-ctl
|   |
|   `-Managed-Entity
|   
|-elements
|   |
|   |-ActiveMQ
|   |-AntBuilder
...
|   |-Tomcat
... |
    `-WarUpdater
&lt;/pre&gt;
The above structure preserves the current boundaries.

Another slant on the grouped approach is to have essentially two subdirectories one for &quot;core&quot; types and a second for &quot;optional&quot;:

&lt;pre&gt;
CHECKOUT_DIR
|
|-core
|   |
|   |-Builder
|   |-Deployment
...
|   |-Managed-Entity
... 
|   |-Service
|   |
|   |-fileutil
|   |-textutil
|   |
|   `-zip
|   
|-elements
|   |
|   |-ActiveMQ
|   |-AntBuilder
...
|   |-Tomcat
... |
    `-WarUpdater
&lt;/pre&gt;

Note:
* There has already been discussion on moving Managed-Entity to the &quot;base&quot; source tree. Likewise one can make a case to move the coreutils into elements as a case of &quot;optionals&quot;.

[[Category:ControlTier_Improvement_Process]]</text>
    </revision>
  </page>
  <page>
    <title>Introducing ProjectBuilder</title>
    <id>68</id>
    <redirect />
    <revision>
      <id>339</id>
      <timestamp>2008-12-21T21:03:50Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>[[Introducing ProjectBuilder]] moved to [[Use ProjectBuilder]]</comment>
      <text xml:space="preserve">#REDIRECT [[Use ProjectBuilder]]</text>
    </revision>
  </page>
  <page>
    <title>JBoss</title>
    <id>973</id>
    <revision>
      <id>14149</id>
      <timestamp>2010-11-10T15:59:29Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;ctl-depot&quot; to &quot;ctl-project&quot;</comment>
      <text xml:space="preserve">{{Version Required|3.4.4}}

Manage a JBoss server, with multiple instances and ear deployments.  Organize a set of JBoss servers into a Site to manage as a group.

''Before delving into ControlTier usage, be sure to read the [[How to use ControlTier]].''

Also see the [[Using Libraries]] document for some getting-started instructions.

= Overview =

The JBoss Library provides Types for the following purposes:

* Manage a JBoss server instance
* Manage multiple JBoss server instances on a single JBoss server install
* Build ear packages to deploy to the server
* Build software with Ant that depends on JBoss
* Deploy EAR packages to a JBoss server

These Types are designed with the following object composition model:

[[Image:JBoss-composition.png|JBoss Library Composition Model]]

A single [[#JBossServer|JBossServer]] object represents an instance of the running JBoss server. A JBossServer object depends on a [[#JBossZip|JBossZip]] package object to hold the JBoss server software for automatic deployment.  JBossServer can also use many [[#JBossEar|ear]] objects to deploy a enterprise application to the server.

When managing a set of multiple JBossServer objects, you should use a [[#Site|Site]] object.

=Dependencies=
Works with JBoss 4.0.3SP1  and 4.0.5.GA.  The particular version should be specified in the JBossZip object's &quot;version&quot; property.

=Limitations=

==Development Process==

The following sections will guide you in developing your JBoss management model by use of the Types defined in this library.

Use one or more [[project.xml]] files to manage the model definitions, and use a ProjectBuilder object to load and operate on the model. 

* Refer to the [[Using Libraries]] instructions to begin.

=Usage=

The JBoss Library provides several Types that can be used for managing a JBoss server and its related enterprise-applications and configurations in various ways.  The parts of this section will guide you to the appropriate Types to use for each particular purpose.

These sections are ordered in a way that should let you start simply and move on to more advanced usages.  If you have already created some management components you will probably skip to the section you are interested in.

==Manage a JBoss server instance==

[[#JBossServer|Define a JBossServer object to manage a JBoss server]].  The JBossServer type manages a single JBoss server instance.

==Deploy EAR packages to a JBoss server==

After defining and uploading an [[#JBossEar|ear]] object (see [[#Upload an ear|below]]), add the ear as a child-dependency of the [[#JBossServer|JBossServer]] object.  The JBossServer type allows zero or more ear dependencies so that any amount of ears can be managed by a single jboss server instance.

==Upload Packages==

===Upload the JBossZip===

First you should [[#JBossZip|define a JBossZip Object, and upload the package definition]].  The JBossZip package object holds the JBoss server software in a zip file, and is used by [[#JBossZip | JBossZip]].

* NOTE:  Various jboss distributions are  inherently supported in the 3.4 distribution, see:
[http://moduleforge.svn.sourceforge.net/viewvc/moduleforge/controltier/branches/controltier-3-4-support/elements/modules/JBossServer/templates/ module JBoss Distribution support].  If the version listed is not one of the desired jboss versions, see [[#Package_Distribution_Integration | Package Distribution Integration]]

===Upload an ear===

Next you should [[#JBossEar |define an ear for use by JBossServer]]. 

If you want to build a ear package using a Builder, continue to the [[#Build_ear_packages_to_deploy_to_the_server|next]] section.

==Build ear packages to deploy to the server==

Any Builder can be used to produce an [[#JBossEar|ear]] package object.  See the [[Use Builder]] Document for the generic instructions for doing software Builds using the Builder type.  

Specifically if your build process produces an ear file, you should configure your Builder with the following [[Use_Builder#Define_the_import_info|Import Attributes]]:

* BuilderPackageType: ''{{Elements Type Reference|JBossEar|JBossEar}}''
** NOTE: Since {{Elements Type Reference|JBossEar|ear}} is a subtype of {{Core Type Reference|ear|ear}}, this module adds additional support for optional exploding of the archive at deployment time.
* BuilderPackageExtension: ''ear''
* BuilderPackageInstallroot: ''${resource.attribute.jboss_basedir}/deploy''
** NOTE:  this &amp;quot;jboss_basedir&amp;quot; ant property  is a special ant property, known as an [[Attributes|attribute]], to reference the base directory of the jboss server instance and is expanded at deployment time to ensure the package gets deployed to the right location. 

More information about Builder Settings are here: [[Builder Settings and Attributes]].

===Build software with Ant that depends on JBoss===

[[#JBossAntBuilder|Use a JBossAntBuilder to use Ant to build an ear]].  This will allow your Ant-based build script to use the JBoss dependency to produce a [[#JBossEar|ear]].

==Manage multiple JBoss servers==

[[#Site|Define a Site to manage JBoss servers as a group]].  This Site also dispatches management commands to its children.  You will configure the Site to have every JBoss server instance as a child.



==Generate Configuration==

===Integrate Databases===

JBoss supports [http://www.jboss.org/community/wiki/ConfigDataSources datasource] xml configuration within the server instance deploy (''${resource.attribute.jboss_basedir}/deploy'') directory.  This xml configuration can be auto  generated as part of the standard Configure command.  This configuration is supported by additional database dependencies modeled as child resource(s) of the jboss server instance.  The [[#Overview|Overview]] section refers to a diagram describing optional Rdb and RdbSchema database dependencies.

[[#Datasources|Define JBossServer database dependencies to configure datasources]].

==Deployment==

Test the deployment: ctl -p MyProject -t JBossServer -r test -c Deploy

=Types=

The Types below from the JBoss Library (and some from the [[Core Types Guide|Core Library]]) are designed to compose in the fashion described in the [[#Overview]].  When using these types, it is useful to reference the [[#Usage|Usage]] section.

==JBossServer==

;Description: A jboss deployment.

* {{Elements Type Reference|JBossServer}}

===Sample Definition===

From [http://moduleforge.svn.sourceforge.net/viewvc/moduleforge/controltier/branches/controltier-3-4-support/elements/modules/JBossServer/objects/sample.xml?revision=HEAD&amp;content-type=text%2Fplain JBossServer/objects/sample.xml], we have used the first example values for the ''installRoot'' and ''basedir'' properties, and we have defined some settings to configure the ports that JBoss will run on along with some java related options.  Additionally this is deployed to a Node named &quot;centos45.local&quot;.



After saving this file, load this model: 

''Execute:''

 ctl -p MyProject -m ProjectBuilder -c load-resources -- -filename JBossServer/objects/sample.xml

:'''Note''': To deploy a pre-defined &quot;ear&quot; archive, you should add a &lt;code&gt;&amp;lt;resource&amp;gt;&lt;/code&gt; entry to specify it, inside the &lt;code&gt;&amp;lt;resources&amp;gt;&lt;/code&gt; section:

	&lt;resource type=&quot;JBossEar&quot; name=&quot;my-app-1.0.ear&quot;/&gt;

:'''Note''': This JBoss server instance is targeted to be deployed to a Node called &amp;quot;centos45.local&amp;quot; which will most likely differ and result in an error indicating a non existent object.  Change the reference to this Node resource name to one that equates with your project:

         &lt;resource type=&quot;Node&quot; name=&quot;centos45.local&quot;/&gt;


Continue to the next step:

===Properties===

You need also to decide on the &quot;Install Root&quot; of the JBoss Server install and the &quot;Base Directory&quot; of the server instance.  These are the paths where the JBoss zip will be installed and server instance will reside respectively.
Examples:

* Underneath the user's home directory
** ''installRoot'': ${user.home}/jboss-4.0.5.GA
** ''basedir'': ${user.home}/jboss-4.0.5.GA/server/test

* Underneath the /opt directory
** ''installRoot'': /opt/jboss-4.0.5.GA
** ''basedir'': /opt/jboss-4.0.5.GA/server/test

===Settings===

To define the JBossServer object, we must first make note of some configuration that we may want to apply to the server definition.

This is the list of Setting types associated with the JBossServer type.  We can create an object for each type, and the value of that setting object will be used as described below.  The ''Default'' column shows the value that is used when no explicit Setting is configured.

===Packages===

* [[#JBossZip| JBossZip]] is added as a child dependency to automatically deploy the JBoss software.
* [[#JBossEar |JBossEar]] for enterprise application deployment.
* {{Elements Type Reference|JavaBin}} can be added to allow automatic deployment of a unix self extracting Sun Java installer.
* {{Elements Type Reference|PlatformJar}} allows deployment of external Jar dependencies to the server. Set the ''installroot'' of the PlatformJar

==JBossZip==

;Description:Zip archive of the JBoss [http://sourceforge.net/project/showfiles.php?group_id=22866&amp;package_id=16942 distribution]

* {{Elements Type Reference|JBossZip}}

Since the JBossServer implementation supports multiple releases, it is important to be precise about which JBoss version is in use. The JBossZip package type represents the zip package containing the JBoss software, and we must define a package for the appropriate JBoss version that we want to use.

Here is a  list of a few supported [http://sourceforge.net/projects/jboss/ sourceForge] versions (for comprehensive ControlTier version 3.4 list, see: [http://moduleforge.svn.sourceforge.net/viewvc/moduleforge/controltier/branches/controltier-3-4-support/elements/modules/JBossServer/templates/ module JBoss Distribution support] ):

* ''4.0.3SP1''
** Example zip file: jboss-4.0.3SP1.zip
* ''4.0.5.GA''
** Example zip file: jboss-4.0.5.GA.zip


When creating your definition below, make note of the specific ''version'' (e.g. &quot;4.0.5.GA&quot;).

Define the project.xml for the jboss package.  It is the convention to name the project file exactly as the package file, with an added &quot;.xml&quot; extension. For the &quot;jboss-4.0.5.GA.zip&quot; file, this project file would be named &quot;jboss-4.0.5.GA.zip.xml&quot;.  

A sample is provided in the JBossZip module: [http://moduleforge.svn.sourceforge.net/viewvc/moduleforge/controltier/branches/controltier-3-4-support/elements/modules/JBossZip/objects/sample.xml?revision=HEAD&amp;content-type=text%2Fplain JBossZip/objects/sample.xml]'

{{caution| The &quot;base&quot; property must match the base name of the &quot;installroot&quot; property.  I.e. if the package base is &quot;jboss-4.0.5.GA&quot;, then the installroot should be something like: &quot;/path/to/jboss-4.0.5.GA&quot;.  By convention, the installroot is set to the ''jboss_install_root'' attribute, which is the ''installRoot'' property of a JBossServer object.  Just note that this installation root must be named according to the ''base'' property of the JBossZip.}}

After downloading, upload your jboss-4.0.5.GA.zip file using this command: 

''execute:''


 ctl -p MyProject -m JBossZip -c upload -- -filename jboss-4.0.5.GA.zip -xml JBossZip/objects/sample.xml

This uploads the jboss-4.0.5.GA.zip file to the package repository (WebDAV), and defines the package object in the server.

==JBossEar==

;Description:An ear package targeted for a JBoss Server

* {{Elements Type Reference|JBossEar}}

If your ear deployment is not produced by the Builder, you should define it via another project.xml file such as this [http://moduleforge.svn.sourceforge.net/viewvc/moduleforge/controltier/branches/controltier-3-4-support/elements/modules/JBossEar/objects/sample.xml?revision=HEAD&amp;content-type=text%2Fplain example]

* Which can be loaded like so: 

''Execute:''

ctl -p MyProject -m JBossEar -c upload -- -filename HelloWorld-1.2.3.1.ear -xml JBossEar/objects/sample.xml

==Site==

;Description:Centralized management for a set of JBoss server instances.

* {{Core Type Reference|Site}}

Define the Site object that ties the JBossServer objects into a single manageable component, ensuring all objects are deployed to the same node (or set of nodes). 

* Download the: [http://moduleforge.svn.sourceforge.net/viewvc/moduleforge/controltier/branches/controltier-3-4-support/elements/modules/JBossServer/objects/sample-site.xml?revision=HEAD&amp;content-type=text%2Fplain JBossServer/objects/sample-site.xml]


* Load this model: 

''Execute:''

 ctl -p MyProject -m ProjectBuilder -c load-resources -- -filename JBossServer/objects/sample-site.xml

* Install the newly defined objects:

&lt;pre&gt;
[anthony@centos52 ~]$ ctl-project -p MyProject -a install
.
.
.
&lt;/pre&gt;

* Deploy the configuration using the Site object:

 ctl -p MyProject -t Site -r test -c Deploy

==Datasources==

Both Rdb and RdbSchema configuration are needed in order to support automated datasource configuration.   Rdb object(s) represent the dependent database server itself, while RdbSchema object(s) represent a schema associated with a specific database server.   Together, this hierarchical set of objects is sufficient for the JBoss server instance to generate datasource configuration within its deploy directory.

===Rdb===

''Description'': abstract respresentation of a database server

* {{Elements Type Reference|Rdb}}

===RdbSchema===

''Description'': abstract respresentation of a database schema

* {{Elements Type Reference|RdbSchema}}


===Sample Definition===

To define the JBossServer database dependencies, rdb and rdbschema objects are configured.

This sample shows a simple Rdb (which the JBossServer object depends on) and RdbSchema  object.  In this case the JBossServer depends on the Rdb object and the Rdb object depends on the RdbSchema object.  Therefore the JBossServer directly depends on Rdb object(s) and indirectly depends on RdbSchema object(s).

* [http://moduleforge.svn.sourceforge.net/viewvc/moduleforge/controltier/branches/controltier-3-4-support/elements/modules/Rdb/objects/sample.xml?content-type=text%2Fplain Rdb/objects/sample.xml]


===Add Rdb Dependency to JBossServer===

The intent is to modify your previous JBossServer object recently uploaded into the model so that it can refer to these new rdb based dependencies.
The following is a partial diff highlighting a small change of your original  [http://moduleforge.svn.sourceforge.net/viewvc/moduleforge/controltier/branches/controltier-3-4-support/elements/modules/JBossServer/objects/sample.xml?revision=HEAD&amp;content-type=text%2Fplain JBossServer/objects/sample.xml] previously loaded showing the newly introduced Rdb object referenced by the JBossServer object:

&lt;pre&gt;
charles-scotts-macbook-pro-15:objects demo$ diff -u sample.xml sample-withRdb.xml 
--- sample.xml	2009-05-26 13:10:33.000000000 -0700
+++ sample-withRdb.xml	2009-05-26 13:12:17.000000000 -0700
@@ -38,6 +38,9 @@
          &lt;!-- override the default behavior of selecting the &quot;ports-default&quot; svc binding configuration --&gt;
          &lt;resource type=&quot;JBossPortConfig&quot; name=&quot;test&quot;/&gt;
 
+         &lt;!-- generic database dependency for automated datasource configuration --&gt;
+         &lt;resource type=&quot;Rdb&quot; name=&quot;test&quot;/&gt;
+
       &lt;/resources&gt;
       &lt;referrers replace=&quot;false&quot;&gt;
          &lt;resource type=&quot;Node&quot; name=&quot;centos45.local&quot;/&gt;
&lt;/pre&gt;

===Reload with Datasource Configuration===


Load the database dependencies into the model: 

''Execute:''

 ctl -p MyProject -m ProjectBuilder -c load-resources -- -filename Rdb/objects/sample.xml

''Re-load JBoss sample.xml with rdb change''

 ctl -p MyProject -m ProjectBuilder -c load-resources -- -filename JBossServer/objects/sample.xml

===JBossAntBuilder===
;Description:JBoss application Ant builder

* {{Elements Type Reference|JBossAntBuilder}}



====Sample Definition====

* [http://moduleforge.svn.sourceforge.net/viewvc/moduleforge/controltier/branches/controltier-3-4-support/elements/modules/JBossAntBuilder/objects/sample.xml?revision=HEAD&amp;content-type=text%2Fplain JBossAntBuilder/objects/sample.xml]

Configure a JBossAntBuilder using this command: 

''execute:''

ctl -p MyProject -m ProjectBuilder -c load-resources -- -filename JBossAntBuilder/objects/sample.xml

=Package Distribution Integration=

==Summary==

The [[JBossLibrary | JBoss Library]] supports various versions of the JBoss server.  The requirement for a new JBoss distribution is to integrate templates to support the following:
 
   * run.conf
   * jboss_service.xml
   * bindings.xml (service bindings for port management)
   * datasource configuration (optional)

These templates are tied to the JBoss Server distribution available from [https://sourceforge.net/projects/jboss/ SourceForge]

The procedure for adding JBoss distribution support to the JBossServer module will involve:

* Checking out the elements library from [https://sourceforge.net/projects/moduleforge ModuleForge]
* Modifying, Building, and Testing the {{Elements Type Reference|JBossServer}}
* Checking in or Submitting changes to ControlTier for approval (former is only possible with commit rights to the ModuleForge project)

==Assumptions==

In order to demonstrate the process of integrating support for a new jboss distribution, the following assumptions are made (adjust accordingly where indicated):
* ControlTier 3.4 or later is [[Installation | installed]]
* A ControlTier project for testing jboss will be available, in this example, we will refer to the project named &amp;quot;demo&amp;quot; (adjust accordingly if project name differs)
* CTL client (which is part of the 3.4 installation) is configured for current login and is registered into the project as a Node object
** for this example, we will assume the node is named:  &amp;quot;centos-52.local&amp;quot; (adjust accordingly)
* CTL client resides on a unix based system with subversion client package installed
** e.g:  
&lt;pre&gt;-bash-3.00$ which svn
/usr/bin/svn
&lt;/pre&gt;
* A [http://java.sun.com/javase/downloads/index_jdk5.jsp JDK 1.5]  version is installed
** for this example, the following is assumed and recommended:    ''$HOME/test/jdk.1.5.0_15''
&lt;pre&gt;
$HOME/test/jdk.1.5.0_15/bin/java -version
java version &quot;1.5.0_12&quot;
Java(TM) 2 Runtime Environment, Standard Edition (build 1.5.0_15-b04)
Java HotSpot(TM) Client VM (build 1.5.0_15-b04, mixed mode, sharing)
&lt;/pre&gt;
* Adding support for JBoss 4.2.2.GA will be demonstrated (adjust accordingly)
* A jboss instance called &amp;quot;test&amp;quot; will be provisioned as follows:
** JBoss Server Installation Root:  ''$HOME/jboss-4.2.2.GA''
** JBoss Server test instance:  ''$HOME/jboss-4.0.5.GA/server/test''
** test HTTP Listen port:  ''8180''
* We are assuming the user does not have commit rights to the elements project  and therefore we will provide a patch process for submitting changes

== Create the ProjectBuilder elements instance ==

Checkout the elements source from moduleforge's 3.4 support branch

&lt;pre&gt;
mkdir -p $CTIER_ROOT/src
cd $CTIER_ROOT/src
svn checkout https://moduleforge.svn.sourceforge.net/svnroot/moduleforge/controltier/branches/controltier-3-4-support/elements
&lt;/pre&gt;

Register the elements ProjectBuilder instance

&lt;pre&gt;
ctl -p demo -t ProjectBuilder -r elements -c Register -- -installroot '${env.CTIER_ROOT}/target/elements' -basedir '${env.CTIER_ROOT}/src/elements' -install
&lt;/pre&gt;

== Import the JBoss zip distribution package ==

Download the distribution from [https://sourceforge.net/projects/jboss/ sourceforge] into the elements objects directory
&lt;pre&gt;
cd $CTIER_ROOT/src/elements/objects
wget http://superb-west.dl.sourceforge.net/sourceforge/jboss/jboss-4.2.2.GA.zip
&lt;/pre&gt;
* NOTE:  browser or other web utility may be used to download the jboss package, ensure it is copied into the $CTIER_ROOT/src/elements/objects directory

Copy the JBossZip  [http://moduleforge.svn.sourceforge.net/viewvc/moduleforge/controltier/branches/controltier-3-4-support/elements/modules/JBossServer/objects/sample.xml?revision=HEAD&amp;content-type=text%2Fplain sample.xml]
&lt;pre&gt;
cp  $CTIER_ROOT/src/elements/modules/JBossZip/objects/sample.xml jboss-4.2.2.GA.zip.xml
&lt;/pre&gt;

Adjust this xml file for the new version by changing references to 4.0.5.GA to the new one (e.g. 4.2.2.GA).  The following diff describes the necessary changes:

&lt;pre&gt;
[centos-52.local:objects chuck$] diff -u  $CTIER_ROOT/src/elements/modules/JBossZip/objects/sample.xml jboss-4.2.2.GA.zip.xml
--- $CTIER_ROOT/src/elements/modules/JBossZip/objects/sample.xml	2009-06-09 07:32:46.000000000 -0700
+++ jboss-4.2.2.GA.zip.xml	2009-06-22 11:33:44.000000000 -0700
@@ -6,16 +6,16 @@
 
    &lt;!-- JBoss platform distribution package --&gt;
    &lt;package type=&quot;JBossZip&quot;
-         name=&quot;jboss-4.0.5.GA.zip&quot;
-         version=&quot;4.0.5.GA&quot;
-         release=&quot;4.0.5.GA&quot;
+         name=&quot;jboss-4.2.2.GA.zip&quot;
+         version=&quot;4.2.2.GA&quot;
+         release=&quot;4.2.2.GA&quot;
          buildtime=&quot;&quot;
          arch=&quot;noarch&quot;
-         filename=&quot;jboss-4.0.5.GA.zip&quot;
+         filename=&quot;jboss-4.2.2.GA.zip&quot;
          filetype=&quot;zip&quot;
-         base=&quot;jboss-4.0.5.GA&quot;
+         base=&quot;jboss-4.2.2.GA&quot;
          installroot=&quot;${resource.attribute.jboss_install_root}&quot;
-         repoUrl=&quot;/JBossZip/zips/jboss-4.0.5.GA.zip&quot;
+         repoUrl=&quot;/JBossZip/zips/jboss-4.2.2.GA.zip&quot;
          releasetag=&quot;&quot;
          installrank=&quot;30&quot;
          restart=&quot;false&quot;
&lt;/pre&gt;

Upload the jboss zip into the project

&lt;pre&gt;
ctl -p demo -m zip -c upload -- -xml jboss-4.2.2.GA.zip.xml -filename jboss-4.2.2.GA.zip
&lt;/pre&gt;

== Add support to the JBossServer module ==

Within the JBossServer module, create the versioned template directories
&lt;pre&gt;
cd $CTIER_ROOT/src/elements/modules/JBossServer/templates
mkdir -p jboss-4.2.2.GA/ds
mkdir -p jboss-4.2.2.GA/server/default/conf
&lt;/pre&gt;

===Configure the jboss-service and bindings templates===
Extract the sample-bindings and jboss-service xml files from the distribution
&lt;pre&gt;
unzip $CTIER_ROOT/src/elements/objects/jboss-4.2.2.GA.zip  jboss-4.2.2.GA/docs/examples/binding-manager/sample-bindings.xml
unzip  $CTIER_ROOT/src/elements/objects/jboss-4.2.2.GA.zip  jboss-4.2.2.GA/server/default/conf/jboss-service.xml
&lt;/pre&gt;

Rename these files as templates
&lt;pre&gt;
mv jboss-4.2.2.GA/docs/examples/binding-manager/sample-bindings.xml jboss-4.2.2.GA/server/default/conf/bindings.xml.template
mv jboss-4.2.2.GA/server/default/conf/jboss-service.xml jboss-4.2.2.GA/server/default/conf/jboss-service.xml.template
rm -rf jboss-4.2.2.GA/docs
&lt;/pre&gt;


Enable service binding configuration in the jboss-service.xml template by uncommenting the ServiceBindingManager mbean  block
&lt;pre&gt;
   &lt;mbean code=&quot;org.jboss.services.binding.ServiceBindingManager&quot;
     name=&quot;jboss.system:service=ServiceBindingManager&quot;&gt;
     &lt;attribute name=&quot;ServerName&quot;&gt;ports-01&lt;/attribute&gt;
     &lt;attribute name=&quot;StoreURL&quot;&gt;${jboss.home.url}/docs/examples/binding-manager/sample-bindings.xml&lt;/attribute&gt;
     &lt;attribute name=&quot;StoreFactoryClassName&quot;&gt;
       org.jboss.services.binding.XMLServicesStoreFactory
     &lt;/attribute&gt;
   &lt;/mbean&gt;
&lt;/pre&gt;

templatatize the ServerName and StoreURL parameters
&lt;pre&gt;
     &lt;attribute name=&quot;ServerName&quot;&gt;@PortConfig@&lt;/attribute&gt;
     &lt;attribute name=&quot;StoreURL&quot;&gt;${jboss.home.url}/server/@BaseDirName@/conf/bindings.xml&lt;/attribute&gt;
&lt;/pre&gt;

The following is a diff of the original jboss-service.xml and the new jboss-service.xml.template summarizing these changes:

&lt;pre&gt;
[centos-52.local:objects chuck$] diff -u jboss-4.2.2.GA/server/default/conf/jboss-service.xml jboss-4.2.2.GA/server/default/conf/jboss-service.xml.template 
--- jboss-4.2.2.GA/server/default/conf/jboss-service.xml        2007-10-22 11:43:32.000000000 -0700
+++ jboss-4.2.2.GA/server/default/conf/jboss-service.xml.template       2009-06-18 16:08:50.000000000 -0700
@@ -187,16 +187,16 @@
       | during initialization that specifies how to connect to the bindings store.
       | StoreFactory: The org.jboss.services.binding.ServicesStoreFactory interface
       | implementation to create to obtain the ServicesStore instance.
+   --&gt;
 
    &lt;mbean code=&quot;org.jboss.services.binding.ServiceBindingManager&quot;
      name=&quot;jboss.system:service=ServiceBindingManager&quot;&gt;
-     &lt;attribute name=&quot;ServerName&quot;&gt;ports-01&lt;/attribute&gt;
-     &lt;attribute name=&quot;StoreURL&quot;&gt;${jboss.home.url}/docs/examples/binding-manager/sample-bindings.xml&lt;/attribute&gt;
+     &lt;attribute name=&quot;ServerName&quot;&gt;@PortConfig@&lt;/attribute&gt;
+     &lt;attribute name=&quot;StoreURL&quot;&gt;${jboss.home.url}/server/@BaseDirName@/conf/bindings.xml&lt;/attribute&gt;
      &lt;attribute name=&quot;StoreFactoryClassName&quot;&gt;
        org.jboss.services.binding.XMLServicesStoreFactory
      &lt;/attribute&gt;
    &lt;/mbean&gt;
-   --&gt;
&lt;/pre&gt;

===Configure the run.conf template===

&lt;pre&gt;
cat &gt; jboss-4.2.2.GA/server/default/conf/run.conf.template &lt;&lt;!
if [ &quot;x$JAVA_OPTS&quot; = &quot;x&quot; ]; then
   JAVA_OPTS=&quot;@JAVA_OPTS@&quot;
fi
JBOSS_HOME=&quot;@JBOSS_HOME@&quot;
JAVA_HOME=&quot;@JAVA_HOME@&quot;
JAVA_OPTS=&quot;$JAVA_OPTS -Duser.timezone=@TIMEZONE@&quot;
!
&lt;/pre&gt;

===Configure datasource templates===

Datasource templates are based on the [http://www.jboss.org/community/wiki/SetUpASolidDatasource JBoss Solid DB datasource reference]


Hypersonic datasource template

&lt;pre&gt;
cat &gt; jboss-4.2.2.GA/ds/hsqldb-ds.xml.template &lt;&lt;!
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;

&lt;datasources&gt;
   &lt;local-tx-datasource&gt;

      &lt;!-- The jndi name of the DataSource, it is prefixed with java:/ --&gt;
      &lt;!-- Datasources are not available outside the virtual machine --&gt;
      &lt;jndi-name&gt;@rdbDataSourceName@&lt;/jndi-name&gt;

      &lt;connection-url&gt;@rdbConnection@&lt;/connection-url&gt;

      &lt;!-- The driver class --&gt;
      &lt;driver-class&gt;@rdbDriver@&lt;/driver-class&gt;

      &lt;!-- The login and password --&gt;
      &lt;user-name&gt;@rdbSchemaUserName@&lt;/user-name&gt;
      &lt;password&gt;@rdbSchemaPassword@&lt;/password&gt;

      &lt;!-- The minimum connections in a pool/sub-pool. Pools are lazily constructed on first use --&gt;
      &lt;min-pool-size&gt;@rdbMinPoolSize@&lt;/min-pool-size&gt;

      &lt;!-- The maximum connections in a pool/sub-pool --&gt;
      &lt;max-pool-size&gt;@rdbMaxPoolSize@&lt;/max-pool-size&gt;

      &lt;!-- The time before an unused connection is destroyed --&gt;
      &lt;idle-timeout-minutes&gt;0&lt;/idle-timeout-minutes&gt;

     &lt;!-- HSQL DB benefits from prepared statement caching --&gt;
      &lt;prepared-statement-cache-size&gt;32&lt;/prepared-statement-cache-size&gt;

      &lt;!-- corresponding type-mapping in the standardjbosscmp-jdbc.xml (optional) --&gt;
      &lt;metadata&gt;
         &lt;type-mapping&gt;Hypersonic SQL&lt;/type-mapping&gt;
      &lt;/metadata&gt;

   &lt;/local-tx-datasource&gt;

   &lt;!-- This mbean can be used when using in process persistent db --&gt;
   &lt;mbean code=&quot;org.jboss.jdbc.HypersonicDatabase&quot; 
     name=&quot;jboss:service=Hypersonic,database=localDB&quot;&gt;
     &lt;attribute name=&quot;Database&quot;&gt;localDB&lt;/attribute&gt;
     &lt;attribute name=&quot;InProcessMode&quot;&gt;true&lt;/attribute&gt;
   &lt;/mbean&gt;
&lt;/datasources&gt;
!
&lt;/pre&gt;

Solid datasource template

&lt;pre&gt;
cat &gt; jboss-4.2.2.GA/ds/soliddb-ds.xml.template &lt;&lt;!
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;

&lt;datasources&gt;
   &lt;local-tx-datasource&gt;

      &lt;!-- The jndi name of the DataSource, it is prefixed with java:/ --&gt;
      &lt;!-- Datasources are not available outside the virtual machine --&gt;
      &lt;jndi-name&gt;@rdbDataSourceName@&lt;/jndi-name&gt;

      &lt;connection-url&gt;@rdbConnection@&lt;/connection-url&gt;

      &lt;!-- The driver class --&gt;
      &lt;driver-class&gt;@rdbDriver@&lt;/driver-class&gt;

      &lt;!-- The login and password --&gt;
      &lt;user-name&gt;@rdbSchemaUserName@&lt;/user-name&gt;
      &lt;password&gt;@rdbSchemaPassword@&lt;/password&gt;

      &lt;!-- The minimum connections in a pool/sub-pool. Pools are lazily constructed on first use --&gt;
      &lt;min-pool-size&gt;@rdbMinPoolSize@&lt;/min-pool-size&gt;

      &lt;!-- The maximum connections in a pool/sub-pool --&gt;
      &lt;max-pool-size&gt;@rdbMaxPoolSize@&lt;/max-pool-size&gt;

      &lt;!-- The time before an unused connection is destroyed --&gt;
      &lt;idle-timeout-minutes&gt;0&lt;/idle-timeout-minutes&gt;

      &lt;!-- corresponding type-mapping in the standardjbosscmp-jdbc.xml (optional) --&gt;
      &lt;metadata&gt;
         &lt;type-mapping&gt;SOLID&lt;/type-mapping&gt;
      &lt;/metadata&gt;

   &lt;/local-tx-datasource&gt;

&lt;/datasources&gt;
!
&lt;/pre&gt;

== Update the project with type and object changes ==

===Build, Upload, and Install the new JBossServer module===

Use ProjectBuilder to rebuild the JBossServer module

&lt;pre&gt;
ctl -p demo -t ProjectBuilder -r elements -c build-type -- -type JBossServer -upload
&lt;/pre&gt;

===Create  and Load the JBossServer ProjectXML file===

Copy the JBossServer  [http://moduleforge.svn.sourceforge.net/viewvc/moduleforge/controltier/branches/controltier-3-4-support/elements/modules/JBossServer/objects/sample.xml?revision=HEAD&amp;content-type=text%2Fplain sample.xml]

&lt;pre&gt;
cp  $CTIER_ROOT/src/elements/modules/JBossServer/objects/sample.xml $CTIER_ROOT/src/elements/objects/jbossServer.xml
&lt;/pre&gt;

Adjust this xml file for version 4.2.2.GA by changing package references from 4.0.5.GA to 4.2.2.GA and the local Node name that this service will be deployed to, the following diff highlights necessary changes

&lt;pre&gt;
[centos52.local objects chuck]$ diff -u  $CTIER_ROOT/src/elements/modules/JBossServer/objects/sample.xml $CTIER_ROOT/src/elements/objects/jbossServer.xml
charles-scotts-power-mac-g5:objects chuck$ diff -u /Users/chuck/ctier/src/elements/modules/JBossServer/objects/sample.xml jbossServer.xml 
--- /Users/chuck/ctier/src/elements/modules/JBossServer/objects/sample.xml	2009-06-09 07:32:43.000000000 -0700
+++ /Users/chuck/ctier/src/elements/objects/jbossServer.xml	2009-06-22 17:44:25.000000000 -0700
@@ -18,13 +18,13 @@
    &lt;!-- configure the jboss test instance to be installed relative to the effective user's home directory
      --&gt;
    &lt;deployment type=&quot;JBossServer&quot; name=&quot;test&quot; 
-               basedir=&quot;${user.home}/jboss-4.0.5.GA/server/test&quot; 
-               installRoot=&quot;${user.home}/jboss-4.0.5.GA&quot; 
+               basedir=&quot;${user.home}/jboss-4.2.2.GA/server/test&quot; 
+               installRoot=&quot;${user.home}/jboss-4.2.2.GA&quot; 
                description=&quot;test jboss service instance&quot; startuprank=&quot;1&quot;&gt;
       &lt;resources replace=&quot;true&quot;&gt;
 
          &lt;!-- ensure the JBoss platform distribution has been installed --&gt;
-         &lt;resource type=&quot;JBossZip&quot; name=&quot;jboss-4.0.5.GA.zip&quot;/&gt;
+         &lt;resource type=&quot;JBossZip&quot; name=&quot;jboss-4.2.2.GA.zip&quot;/&gt;
 
          &lt;!-- path to JAVA_HOME --&gt;
          &lt;resource type=&quot;JBossJavaHome&quot; name=&quot;test&quot;/&gt;
@@ -40,7 +40,7 @@
 
       &lt;/resources&gt;
       &lt;referrers replace=&quot;false&quot;&gt;
-         &lt;resource type=&quot;Node&quot; name=&quot;centos45.local&quot;/&gt;
+         &lt;resource type=&quot;Node&quot; name=&quot;centos52.local&quot;/&gt;
       &lt;/referrers&gt;
    &lt;/deployment&gt;
&lt;/pre&gt;

Load the jbossServer ProjectXML file and sync back to the local system

&lt;pre&gt;
ctl -p demo -t ProjectBuilder -r elements -c load-resources -- -filename $CTIER_ROOT/src/elements/objects/jbossServer.xml  
ctl-project -p demo -a install
&lt;/pre&gt;

== Deploy and Verify the test jboss service ==

Deploy the JBoss test service instance

&lt;pre&gt;
ctl -p demo -t JBossServer -r test -c Deploy
&lt;/pre&gt;

Verify test service is listening to port 8180

&lt;pre&gt;
[centos-52.local:objects chuck$]netstat -an |grep 8180
tcp        0      0 127.0.0.1:8180              0.0.0.0:*                   LISTEN      
&lt;/pre&gt;

== Submit the JBoss Library changes ==

Generate the compressed unified diff file using ''svn diff''

&lt;pre&gt;
cd $CTIER_ROOT/src/elements/modules/JBossServer/templates
svn diff -x -u  &gt; jboss-4.2.2.GA.diff
gzip jboss-4.2.2.GA.diff
&lt;/pre&gt;

Upload the compressed diff 

* Add a new support request within the  [http://sourceforge.net/projects/moduleforge  moduleforge] site
** Choose ''Public'' -&amp;gt; ''Support Requests'' -&amp;gt; ''Add New''
* Select the ''ModuleSupport'' category
* Upload the compressed diff, e.g. ''jboss-4.2.2.GA.diff.gz'' as a file attachment


[[Category:Libraries]]
[[Category:JBoss]]



== Setting up an JBoss Cluster ==
[[Steps to configure a JBoss cluster]]</text>
    </revision>
  </page>
  <page>
    <title>JBoss Library</title>
    <id>1853</id>
    <redirect />
    <revision>
      <id>12333</id>
      <timestamp>2010-01-22T15:04:54Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <comment>moved [[JBoss Library]] to [[JBoss]]:&amp;#32;&quot;Library&quot; is redundant</comment>
      <text xml:space="preserve">#REDIRECT [[JBoss]]</text>
    </revision>
  </page>
  <page>
    <title>JNDI Client integration</title>
    <id>691</id>
    <revision>
      <id>15154</id>
      <timestamp>2011-02-24T17:41:52Z</timestamp>
      <contributor>
        <username>Noahcampbell</username>
        <id>73</id>
      </contributor>
      <minor/>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Configuration&lt;/categorytree&gt;

For versions 3.2 - 3.5, command execution authorization has been improved to support fine grained control based on custom roles.  These custom roles may manage access to an environment as a whole, or perhaps access to an application across environments.  In order to support Fine Grained Command Execution Control, access to the LDAP directory may be necessary in order to configure users into appropriate roles as needed.  Addtionally, employing regular expressions against a strictly named object model are needed to enforce access control. 

Assumptions:
* Fine Grained Command Execution Control will be enforced primarily at the Jobcenter level and therefore will only be configured on the CTL instance residing on the ControlTier server (master CTL server instance).  Since other CTL instances are accessed over SSH from the master, all authorization will be controlled via this configuration.
* The shell user, when executing CTL commands from the master, will also belong to the appropriate LDAP role(s). 
** NOTE:  When logged into Jobcenter, the logged in user over this webui is the effective user.  When logged into the CTL master via the operating system shell (BASH, CMD, etc), the shell user is the effective user and therfore requires the shell user to belong to, most likely, an administrative ldap role.
* Access Control examples will be based on traditional environments:  development, qa, staging, and production environments where the object model will reflect a strict naming convention reflecting these environments.

'''Enable JndiAuthorization'''
* Configure the framework.authorization.class in ${CTL_BASE}/etc/framework.properties entry from the default:
&lt;pre&gt;
	framework.authorization.class = com.controltier.ctl.authorization.NoAuthorization
&lt;/pre&gt;
to:
&lt;pre&gt;
	framework.authorization.class = com.controltier.ctl.authorization.JndiAuthorization
&lt;/pre&gt;
* Create a ${CTL_BASE}/etc/jndi.properties file (see {CTL_BASE}/etc/jndi.properties.sample).  The following sample jndi.properties file describes connectivity to an OpenLDAP server:
&lt;pre&gt;
jndi.roleNameRDN=cn
jndi.userNameRDN=cn
jndi.roleBase=ou\=roles,dc\=controltier,dc\=com
jndi.connectionUrl=ldap\://ad.controltier.com\:389/
jndi.connectionName=cn\=controltier,ou\=users,dc\=controltier,dc\=com
jndi.connectionPassword=myPassword
jndi.userBase=ou\=users,dc\=controltier,dc\=com
jndi.roleMemberRDN=uniqueMember
&lt;/pre&gt;

* Inspect the ${CTL_BASE}/etc/acls.xml file, which by default supports the following roles:
** admin:  access to all projects and objects
** deploy:  access to any non builder object
** build:  access to any builder object
** custom roles in addition to the admin role are encouraged.  The deploy and build roles exist as an example.
** NOTE:  The following entry, which exists at the bottom of the acls.xml file allows anyone to execute anything at any time and should be deleted or commented out once desired access control is in place:
&lt;pre&gt;
  &lt;acl description=&quot;All roles, access to any Managed-Entity command at anytime&quot;&gt;
    &lt;accessto&gt;
      &lt;command module=&quot;^Managed-Entity$&quot; name=&quot;*&quot;/&gt;
      &lt;script allowed=&quot;true&quot;/&gt;
    &lt;/accessto&gt;
    &lt;by&gt;
      &lt;role name=&quot;*&quot;/&gt;
    &lt;/by&gt;
    &lt;using&gt;
      &lt;context depot=&quot;*&quot; type=&quot;*&quot; name=&quot;*&quot;/&gt;
    &lt;/using&gt;
    &lt;when&gt;
      &lt;timeandday day=&quot;*&quot; hour=&quot;*&quot; minute=&quot;*&quot;/&gt;
    &lt;/when&gt;
  &lt;/acl&gt;
&lt;/acls&gt;
&lt;/pre&gt;

The following ProjectXML each describe a simple site with respect to its operating environment:

* development:
&lt;pre&gt;
  &lt;deployment type=&quot;Site&quot; name=&quot;development&quot; basedir=&quot;&quot; installRoot=&quot;&quot; description=&quot;Acme Development site&quot; startuprank=&quot;40&quot;&gt;
      &lt;resources replace=&quot;true&quot;&gt;
         &lt;resource type=&quot;JBossServer&quot; name=&quot;development&quot;/&gt;
      &lt;/resources&gt;
      &lt;referrers replace=&quot;false&quot;&gt;
         &lt;resource type=&quot;Node&quot; name=&quot;ctier.controltier.com&quot;/&gt;
      &lt;/referrers&gt;
   &lt;/deployment&gt;
&lt;/pre&gt;
* qa
&lt;pre&gt;
  &lt;deployment type=&quot;Site&quot; name=&quot;qa&quot; basedir=&quot;&quot; installRoot=&quot;&quot; description=&quot;Acme QA site&quot; startuprank=&quot;40&quot;&gt;
      &lt;resources replace=&quot;true&quot;&gt;
         &lt;resource type=&quot;JBossServer&quot; name=&quot;qa-01&quot;/&gt;
         &lt;resource type=&quot;JBossServer&quot; name=&quot;qa-02&quot;/&gt;
      &lt;/resources&gt;
      &lt;referrers replace=&quot;false&quot;&gt;
         &lt;resource type=&quot;Node&quot; name=&quot;ctier.controltier.com&quot;/&gt;
      &lt;/referrers&gt;
   &lt;/deployment&gt;
&lt;/pre&gt;
* staging
&lt;pre&gt;
  &lt;deployment type=&quot;Site&quot; name=&quot;staging&quot; basedir=&quot;&quot; installRoot=&quot;&quot; description=&quot;Acme Staging site&quot; startuprank=&quot;40&quot;&gt;
      &lt;resources replace=&quot;true&quot;&gt;
         &lt;resource type=&quot;JBossServer&quot; name=&quot;staging-01&quot;/&gt;
         &lt;resource type=&quot;JBossServer&quot; name=&quot;staging-02&quot;/&gt;
         &lt;resource type=&quot;JBossServer&quot; name=&quot;staging-03&quot;/&gt;
         &lt;resource type=&quot;JBossServer&quot; name=&quot;staging-04&quot;/&gt;
      &lt;/resources&gt;
      &lt;referrers replace=&quot;false&quot;&gt;
         &lt;resource type=&quot;Node&quot; name=&quot;ctier.controltier.com&quot;/&gt;
      &lt;/referrers&gt;
   &lt;/deployment&gt;
&lt;/pre&gt;
* production
&lt;pre&gt;
  &lt;deployment type=&quot;Site&quot; name=&quot;production&quot; basedir=&quot;&quot; installRoot=&quot;&quot; description=&quot;Acme Production site&quot; startuprank=&quot;40&quot;&gt;
      &lt;resources replace=&quot;true&quot;&gt;
         &lt;resource type=&quot;JBossServer&quot; name=&quot;production-01&quot;/&gt;
         &lt;resource type=&quot;JBossServer&quot; name=&quot;production-02&quot;/&gt;
         &lt;resource type=&quot;JBossServer&quot; name=&quot;production-03&quot;/&gt;
         &lt;resource type=&quot;JBossServer&quot; name=&quot;production-04&quot;/&gt;
      &lt;/resources&gt;
      &lt;referrers replace=&quot;false&quot;&gt;
         &lt;resource type=&quot;Node&quot; name=&quot;ctier.controltier.com&quot;/&gt;
      &lt;/referrers&gt;
   &lt;/deployment&gt;
&lt;/pre&gt;

The Following roles have been configured in the ldap server, in this case an Active Directory server.

* user role users, which all users who use jobcenter and workbench must be a member of, are:
** controltier - shell account
** Chuck Scott  - jobcenter user
** Anthony Shortland - jobcenter user 
** Art Vandalay - jobcenter user 
** Donna Chang - jobcenter user 
** Judy Hensler - jobcenter user 
** Penny Woods - jobcenter user 
** Harvey Klinger - jobcenter user
** George Glass- jobcenter user 
&lt;pre&gt;
ldapsearch -x -w myPassword -DCN=controltier,OU=users,DC=controltier,DC=com -H ldap://ad.controltier.com:389 -b OU=users,DC=controltier,DC=com memberOf=cn=user,OU=roles,DC=controltier,DC=com cn |grep ^dn:

dn: CN=controltier,OU=users,DC=controltier,DC=com
dn: CN=Chuck Scott,OU=users,DC=controltier,DC=com
dn: CN=Anthony Shortland,OU=users,DC=controltier,DC=com
dn: CN=Art Vandalay,OU=users,DC=controltier,DC=com
dn: CN=Donna Chang,OU=users,DC=controltier,DC=com
dn: CN=Judy Hensler,OU=users,DC=controltier,DC=com
dn: CN=Penny Woods,OU=users,DC=controltier,DC=com
dn: CN=Harvey Klinger,OU=users,DC=controltier,DC=com
dn: CN=George Glass,OU=users,DC=controltier,DC=com
&lt;/pre&gt;



* admin role users, which should be limited to those users who have unlimited access to all projects, environments, etc, are:
** controltier - shell account
**  Chuck Scott  - jobcenter user
** Anthony Shortland - jobcenter user 
&lt;pre&gt;
ldapsearch -x -w myPassword -DCN=controltier,OU=users,DC=controltier,DC=com -H ldap://ad.controltier.com:389 -b OU=users,DC=controltier,DC=com memberOf=cn=admin,OU=roles,DC=controltier,DC=com cn |grep ^dn:

dn: CN=controltier,OU=users,DC=controltier,DC=com
dn: CN=Chuck Scott,OU=users,DC=controltier,DC=com
dn: CN=Anthony Shortland,OU=users,DC=controltier,DC=com
&lt;/pre&gt;

* development rights go to Art and Donna:
** Art Vandalay - jobcenter user 
** Donna Chang - jobcenter user

&lt;pre&gt;
ldapsearch -x -w myPassword -DCN=controltier,OU=users,DC=controltier,DC=com -H ldap://ad.controltier.com:389 -b OU=users,DC=controltier,DC=com memberOf=cn= development,OU=roles,DC=controltier,DC=com cn |grep ^dn:

dn: CN=Art Vandalay,OU=users,DC=controltier,DC=com
dn: CN=Donna Chang,OU=users,DC=controltier,DC=com
&lt;/pre&gt;

* QA rights go to Judy and Penny:
** Judy Hensler - jobcenter user 
** Penny Woods - jobcenter user

&lt;pre&gt;
ldapsearch -x -w myPassword -DCN=controltier,OU=users,DC=controltier,DC=com -H ldap://ad.controltier.com:389 -b OU=users,DC=controltier,DC=com memberOf=cn=qa,OU=roles,DC=controltier,DC=com cn |grep ^dn:

dn: CN=Judy Hensler,OU=users,DC=controltier,DC=com
dn: CN=Penny Woods,OU=users,DC=controltier,DC=com
&lt;/pre&gt;

Staging and Production rights to to Harvey and George:

** Harvey Klinger - jobcenter user
** George Glass- jobcenter user
&lt;pre&gt;
ldapsearch -x -w myPassword -DCN=controltier,OU=users,DC=controltier,DC=com -H ldap://ad.controltier.com:389 -b OU=users,DC=controltier,DC=com memberOf=cn=staging,OU=roles,DC=controltier,DC=com cn |grep ^dn:

dn: CN=Harvey Klinger,OU=users,DC=controltier,DC=com
dn: CN=George Glass,OU=users,DC=controltier,DC=com

ldapsearch -x -w myPassword -DCN=controltier,OU=users,DC=controltier,DC=com -H ldap://ad.controltier.com:389 -b OU=users,DC=controltier,DC=com memberOf=cn=production,OU=roles,DC=controltier,DC=com cn |grep ^dn:

dn: CN=Harvey Klinger,OU=users,DC=controltier,DC=com
dn: CN=George Glass,OU=users,DC=controltier,DC=com
&lt;/pre&gt;


The following $CTL_BASE/etc/acls.xml entries describe access to various combinations of these sites:

* development environment
&lt;pre&gt;
  &lt;acl description=&quot;Acme development environment role, access to any command using any development context at anytime&quot;&gt;
    &lt;accessto&gt;
      &lt;command module=&quot;*&quot; name=&quot;*&quot;/&gt;
      &lt;script allowed=&quot;true&quot;/&gt;
    &lt;/accessto&gt;
    &lt;by&gt;
      &lt;role name=&quot;development&quot;/&gt;
    &lt;/by&gt;
    &lt;using&gt;
      &lt;context depot=&quot;Acme&quot; type=&quot;*&quot; name=&quot;^development.*$&quot;/&gt;
    &lt;/using&gt;
    &lt;when&gt;
      &lt;timeandday day=&quot;*&quot; hour=&quot;*&quot; minute=&quot;*&quot;/&gt;
    &lt;/when&gt;
  &lt;/acl&gt;
&lt;/pre&gt;
* qa environment
&lt;pre&gt;
  &lt;acl description=&quot;Acme qa environment role, access to any command using any qa context at anytime&quot;&gt;
    &lt;accessto&gt;
      &lt;command module=&quot;*&quot; name=&quot;*&quot;/&gt;
      &lt;script allowed=&quot;true&quot;/&gt;
    &lt;/accessto&gt;
    &lt;by&gt;
      &lt;role name=&quot;qa&quot;/&gt;
    &lt;/by&gt;
    &lt;using&gt;
      &lt;context depot=&quot;Acme&quot; type=&quot;*&quot; name=&quot;^qa.*$&quot;/&gt;
    &lt;/using&gt;
    &lt;when&gt;
      &lt;timeandday day=&quot;*&quot; hour=&quot;*&quot; minute=&quot;*&quot;/&gt;
    &lt;/when&gt;
  &lt;/acl&gt;
&lt;/pre&gt;
* staging and production environments 
&lt;pre&gt;
  &lt;acl description=&quot;Acme staging and production environment role, access to any command using any staging or production context at anytime&quot;&gt;
    &lt;accessto&gt;
      &lt;command module=&quot;*&quot; name=&quot;*&quot;/&gt;
      &lt;script allowed=&quot;true&quot;/&gt;
    &lt;/accessto&gt;
    &lt;by&gt;
      &lt;role name=&quot;production&quot;/&gt;
    &lt;/by&gt;
    &lt;using&gt;
      &lt;context depot=&quot;Acme&quot; type=&quot;*&quot; name=&quot;(?:^staging.*$|^production.*$)&quot;/&gt;
    &lt;/using&gt;
    &lt;when&gt;
      &lt;timeandday day=&quot;*&quot; hour=&quot;*&quot; minute=&quot;*&quot;/&gt;
    &lt;/when&gt;
  &lt;/acl&gt;
&lt;/pre&gt;
* all environments
&lt;pre&gt;
  &lt;acl description=&quot;admin, access to any project/command using any context at anytime&quot;&gt;
    &lt;accessto&gt;
      &lt;command module=&quot;*&quot; name=&quot;*&quot;/&gt;
      &lt;script allowed=&quot;true&quot;/&gt;
    &lt;/accessto&gt;
    &lt;by&gt;
      &lt;role name=&quot;admin&quot;/&gt;
    &lt;/by&gt;
    &lt;using&gt;
      &lt;context depot=&quot;*&quot; type=&quot;*&quot; name=&quot;*&quot;/&gt;
    &lt;/using&gt;
    &lt;when&gt;
      &lt;timeandday day=&quot;*&quot; hour=&quot;*&quot; minute=&quot;*&quot;/&gt;
    &lt;/when&gt;
  &lt;/acl&gt;
&lt;/pre&gt;

&lt;noinclude&gt;{{Installation/navbox}}&lt;/noinclude&gt;


[[Category:JNDI]]</text>
    </revision>
  </page>
  <page>
    <title>Jar</title>
    <id>1657</id>
    <revision>
      <id>11189</id>
      <timestamp>2009-12-14T16:17:00Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Created page with '&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Package&lt;/categorytree&gt; [[File:Icon-Packa…'</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Package&lt;/categorytree&gt;
[[File:Icon-PackageObject.png]]
The [[jar]] type represents a Java archive

==Reference==

{{Package/reference|jar}}

==Definition==
[[File:Core-type-model.png|thumb|Core type model]]

===Metadata===

The table below gives a brief description for each of the attributes of the package type. The ones with an asterisk are required during the deployment cycle.
{{Package/type/properties}}

===Project XML===
{{Package/projectxml |example|123|jar}}

===Querying===

{{Package/querying|example|123|jar}}

{{Manual/navbox}}
[[Category:Package]]</text>
    </revision>
  </page>
  <page>
    <title>Java 6 support notes</title>
    <id>986</id>
    <revision>
      <id>13997</id>
      <timestamp>2010-11-10T15:29:03Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>/* Current Status */</comment>
      <text xml:space="preserve">&lt;noinclude&gt;&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Installation&lt;/categorytree&gt;&lt;/noinclude&gt;
Problem: Running the ControlTier server 3.4.x and earlier with Java 6 produces errors in the Jobcenter web application.

Java 5 is end-of-lifed (EOL) in October, 2009.

see: {{Feature Request|2804376}}

Work on making the necessary changes to work with Java 6 is ongoing:

== Current Status ==

Full Java 6 support for ControlTier server/client exists for all 3.6 releases.

==Support Work==

Upgrade path for Jobcenter to support Java 6:

* Upgrade grails to 1.1+
* Upgrade Quartz plugin
* Fix issues caused by upgrading.

These changes allow Jobcenter to work with Java6

Other issues found with Java 6:

Frequent occurrence of the error:

 java.lang.OutOfMemoryError: PermGen space

Increasing the MaxPermSize to 256m in JAVA_OPTS for Jetty seems to quell this error for the most part:  -XX:PermSize=64m -XX:MaxPermSize=256m

* Add this change to Installer code when generating .ctierrc/ctier.bat files

==Notes==
===CTL===

After extracting the installer zip, modify etc/xml/install.xml to comment out the fail task (or change the logic to look for 1.6). Here's a change that supports non 1.5 for client installs:

&lt;syntaxhighlight lang=&quot;diff&quot;&gt;
demo@ubuntu:~/ControlTier-3.4.7$ diff etc/xml/install.xml.orig etc/xml/install.xml 
@@ -136,12 +136,17 @@
 
     &lt;target name=&quot;-check-prereqs&quot;&gt;
         &lt;if&gt;
+	  &lt;and&gt;
             &lt;not&gt;
                 &lt;!--
                 ant.java.version    the JVM version Ant detected
                 --&gt;
-                &lt;equals arg1=&quot;1.5&quot; arg2=&quot;${ant.java.version}&quot;/&gt;
+		  &lt;equals arg1=&quot;1.5&quot; arg2=&quot;${ant.java.version}&quot;/&gt;
             &lt;/not&gt;
+	    &lt;not&gt;
+	      &lt;equals arg1=&quot;${is.client.install}&quot; arg2=&quot;true&quot;/&gt;
+	    &lt;/not&gt;
+	  &lt;/and&gt;
             &lt;then&gt;
                 &lt;fail&gt;Unable to install: Java version 1.5 is required. (ant.java.version = &quot;${ant.java.version}&quot;)&lt;/fail&gt;
             &lt;/then&gt;

&lt;/syntaxhighlight&gt;

Set the JAVA_HOME environment variable to your 1.6 JDK:

* &lt;syntaxhighlight lang=&quot;bash&quot;&gt;export JAVA_HOME=/home/demo/jdk1.6.0_16&lt;/syntaxhighlight&gt;

Then run the installer as normal
* &lt;syntaxhighlight lang=&quot;bash&quot;&gt;sh ./install.sh -- -client &lt;/syntaxhighlight&gt;

===Grails===
Graeme Rocher mentions that grails 1.2 will include gsp precompilation, which cuts out permgen issues: http://twitter.com/graemerocher/status/2104939645

* Upgrade to grails 1.2 at that time.

* Further test Reportcenter to find any similar issues with it with grails 1.0.x

===Jetty===
It's unclear if Jetty 6.x supports Java 1.6. This page [http://communitymapbuilder.org/display/JETTY/what+JVMs+are+supported] suggests 1.6 is supported but this page [http://docs.codehaus.org/display/JETTY/JDK1.6+Problems] contradicts that. It may be necessary to consider an alternative container (eg, apache-tomcat 6.x).

&lt;noinclude&gt;
{{Installation/navbox}}
[[Category:Installation]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Jetty LDAP integration</title>
    <id>626</id>
    <revision>
      <id>15038</id>
      <timestamp>2010-12-06T19:48:49Z</timestamp>
      <contributor>
        <username>Juddmaltin</username>
        <id>63</id>
      </contributor>
      <minor/>
      <comment>3.6 update</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;LDAP&lt;/categorytree&gt;

Since ControlTier 3.2 all server web applications are distributed with Jetty 6. This Jetty release includes a port of the Apache Geronimo LDAP JAAS login module called [http://www.mortbay.org/apidocs/org/mortbay/jetty/plus/jaas/spi/LdapLoginModule.html LdapLoginModule].

As of ControlTier 3.6, the LDAP Login module is now called &quot;com.controltier.ctl.webad.jaas.JettyCachingLdapLoginModule&quot;.  You should substitute that value for the &quot;org.mortbay.jetty.plus.jaas.spi.LdapLoginModule&quot; in the first configuration file below.

With this in mind, follow these steps in order to connect the ControlTier Jetty container to your LDAP server:

* Setup the LDAP login module configuration file under the ControlTier server's JETTY_HOME (carefully matching the directory setup):

&lt;pre&gt;
[anthony@centos52 etc]$ cd $JETTY_HOME/etc
[anthony@centos52 etc]$ cat ldap-loginModule.conf 
ldaploginmodule {
    org.mortbay.jetty.plus.jaas.spi.LdapLoginModule required
    debug=&quot;true&quot;
    contextFactory=&quot;com.sun.jndi.ldap.LdapCtxFactory&quot;
    hostname=&quot;localhost&quot;
    port=&quot;389&quot;
    bindDn=&quot;cn=Manager,dc=controltier,dc=com&quot;
    bindPassword=&quot;secret&quot;
    authenticationMethod=&quot;simple&quot;
    forceBindingLogin=&quot;false&quot;
    userBaseDn=&quot;ou=users,dc=controltier,dc=com&quot;
    userRdnAttribute=&quot;cn&quot;
    userIdAttribute=&quot;cn&quot;
    userPasswordAttribute=&quot;userPassword&quot;
    userObjectClass=&quot;person&quot;
    roleBaseDn=&quot;ou=roles,dc=controltier,dc=com&quot;
    roleNameAttribute=&quot;cn&quot;
    roleMemberAttribute=&quot;uniqueMember&quot;
    roleObjectClass=&quot;groupOfUniqueNames&quot;;
    };
&lt;/pre&gt;

* Update $JETTY_HOME/etc/jetty.xml replacing the default UserRealms array with:

{{caution|This example applies to pre-3.4.10 versions of ControlTier:}}

&lt;syntaxhighlight&gt;
    &lt;Set name=&quot;UserRealms&quot;&gt;
      &lt;Array type=&quot;org.mortbay.jetty.security.UserRealm&quot;&gt;
        &lt;Item&gt;
          &lt;New class=&quot;org.mortbay.jetty.plus.jaas.JAASUserRealm&quot;&gt;
            &lt;Set name=&quot;name&quot;&gt;jackrabbit&lt;/Set&gt;
            &lt;Set name=&quot;LoginModuleName&quot;&gt;ldaploginmodule&lt;/Set&gt;
          &lt;/New&gt;
        &lt;/Item&gt;
       &lt;Item&gt;
          &lt;New class=&quot;org.mortbay.jetty.plus.jaas.JAASUserRealm&quot;&gt;
            &lt;Set name=&quot;name&quot;&gt;jobcenterrealm&lt;/Set&gt;
            &lt;Set name=&quot;LoginModuleName&quot;&gt;ldaploginmodule&lt;/Set&gt;
          &lt;/New&gt;
        &lt;/Item&gt;
       &lt;Item&gt;
          &lt;New class=&quot;org.mortbay.jetty.plus.jaas.JAASUserRealm&quot;&gt;
            &lt;Set name=&quot;name&quot;&gt;Workbench&lt;/Set&gt;
            &lt;Set name=&quot;LoginModuleName&quot;&gt;ldaploginmodule&lt;/Set&gt;
          &lt;/New&gt;
        &lt;/Item&gt;
      &lt;/Array&gt;
    &lt;/Set&gt;
&lt;/syntaxhighlight&gt;

{{caution|This example applies to 3.4.10 and later (since the introduction of SSO):}}

&lt;syntaxhighlight&gt;
    &lt;New id=&quot;sso&quot; class=&quot;org.mortbay.jetty.plus.jaas.SSOJAASUserRealm&quot;&gt; &lt;/New&gt;
    &lt;Set name=&quot;UserRealms&quot;&gt;
      &lt;Array type=&quot;org.mortbay.jetty.security.UserRealm&quot;&gt;
        &lt;Item&gt;
          &lt;New class=&quot;org.mortbay.jetty.plus.jaas.SSOJAASUserRealm&quot;&gt;
            &lt;Set name=&quot;name&quot;&gt;ctrealm&lt;/Set&gt;
            &lt;Set name=&quot;LoginModuleName&quot;&gt;ldaploginmodule&lt;/Set&gt;
            &lt;Set name=&quot;sSORealm&quot;&gt;&lt;Ref id=&quot;sso&quot;/&gt;&lt;/Set&gt;
          &lt;/New&gt;
        &lt;/Item&gt;
      &lt;/Array&gt;
    &lt;/Set&gt;
&lt;/syntaxhighlight&gt;


* Update the CONFIG_PROPS in the ControlTier server's ~/.ctierrc to include setting the java.security.auth.login.config property:

&lt;pre&gt;
[anthony@centos52 etc]$ diff ~/.ctierrc ~/.ctierrc.orig
14c14
&amp;lt; CONFIG_PROPS=&quot;-Djobcenter.config.location=/home/anthony/ctier/jobcenter/jobcenter-config.properties -Dreportcenter.config.location=/home/anthony/ctier/reportcenter/reportcenter-config.properties -Djava.security.auth.login.config=${JETTY_HOME}/etc/ldap-loginModule.conf&quot;
---
&amp;gt; CONFIG_PROPS=&quot;-Djobcenter.config.location=/home/anthony/ctier/jobcenter/jobcenter-config.properties -Dreportcenter.config.location=/home/anthony/ctier/reportcenter/reportcenter-config.properties&quot;
29c29
&amp;lt;                 
---
&amp;gt; 
&lt;/pre&gt;

* Finally, if you're using the RPM version of the ControlTier server, you'll also need to update /etc/default/ctier:

&lt;pre&gt;
# this file was generated by ControlTier installer.

export CTIER_ROOT=/opt/ctier

export CTL_HOME=/opt/ctier/pkgs/ctl-1.4.11

if [ -z &quot;$CTL_BASE&quot; ] ; then
  export CTL_BASE=/opt/ctier/ctl
fi


# Server settings

export JETTY_HOME=/opt/ctier/pkgs/jetty-6.1.14
export JETTY_LOGS=/opt/ctier/pkgs/jetty-6.1.14/logs
export JETTY_RUN=$JETTY_LOGS
export JAVA_HOME=/usr/lib/jvm/java-1.6.0-openjdk-1.6.0.0.x86_64
CONFIG_PROPS=&quot;-Djobcenter.config.location=/opt/ctier/jobcenter/jobcenter-config.properties -Dreportcenter.config.location=/opt/ctier/reportcenter/reportcenter-config.properties -Djava.security.auth.login.config=${JETTY_HOME}/etc/ldap-loginModule.conf&quot;
export JAVA_OPTIONS=&quot;-XX:MaxPermSize=256m -Xmx1024m -Xms256m $CONFIG_PROPS&quot;


export PATH=$CTL_HOME/bin:$JETTY_HOME/bin:$PATH

if [ -n &quot;$BASH&quot; -a -n &quot;$CTL_BASE&quot; ] ; then
    . $CTL_HOME/etc/bash_completion.sh ;
    if [ -t 0 -a -z &quot;$CTL_CLI_TERSE&quot; ]
    then
      CTL_CLI_TERSE=true
      export CTL_CLI_TERSE
    fi
fi
                umask 002
export JETTY_USER=ctier
&lt;/pre&gt;


After making these changes, resourcing your environment and restarting Jetty, the ControlTier applications will use the designated LDAP server for authentication and role membership.

&lt;noinclude&gt;{{Installation/navbox}}&lt;/noinclude&gt;
[[Category:OpenLDAP]]</text>
    </revision>
  </page>
  <page>
    <title>Job</title>
    <id>1832</id>
    <redirect />
    <revision>
      <id>12002</id>
      <timestamp>2009-12-19T23:45:35Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[Category:Jobs]]</comment>
      <text xml:space="preserve">#REDIRECT [[:Category:Jobs]]</text>
    </revision>
  </page>
  <page>
    <title>Job-v20.xml</title>
    <id>1928</id>
    <revision>
      <id>14215</id>
      <timestamp>2010-11-10T17:33:09Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;XML&lt;/categorytree&gt;

{{Version|3.6.0}}

The 'job' XML file declares job entries for CTL Center in ControlTier 3.6.

This is a demonstration document using all possible elements in the current CTL Center &quot;jobs&quot; XML.
'''Loading and unloading'''
This file can be batch loaded via [[ctl-jobs]] load command:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;ctl-jobs load --file /path/to/jobs.xml&lt;/syntaxhighlight&gt;

CTL Center job definitions can be dumped and saved to a file via [[ctl-jobs]] list command:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;ctl-jobs list --file /tmp/jobs.xml&lt;/syntaxhighlight&gt;

==joblist==

     
The root (aka &quot;top-level&quot;) element of the jobs XML file. 

&lt;table border=&quot;1&quot; class=&quot;wikitable&quot;&gt;
&lt;caption&gt;nested elements&lt;/caption&gt;
&lt;tr&gt;&lt;th&gt;element&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;[[#job]]*&lt;/td&gt;&lt;td&gt;declares a single job&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;
'''Example'''
     &lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;joblist&gt;
  &lt;job&gt;
   ...
  &lt;/job&gt;
  &lt;job&gt;
   ...
  &lt;/job&gt;
&lt;/joblist&gt;
&lt;/syntaxhighlight&gt;

==job==

The job element is a sub-element of [[#joblist]] and defines a job executable in CTL Center.
The following elements are used to describe the job. Only one of each element is allowed.
&lt;table border=&quot;1&quot; class=&quot;wikitable&quot;&gt;
       &lt;caption&gt;nested elements&lt;/caption&gt;
       &lt;tr&gt;&lt;th&gt;element&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;[[#id]]&lt;/td&gt;&lt;td&gt;job identifier&lt;/td&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;[[#name]]&lt;/td&gt;&lt;td&gt;job name&lt;/td&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;[[#description]]&lt;/td&gt;&lt;td&gt;job description&lt;/td&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;[[#additional]]&lt;/td&gt;&lt;td&gt;additional information&lt;/td&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;[[#group]]&lt;/td&gt;&lt;td&gt;group identifier&lt;/td&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;[[#context]]&lt;/td&gt;&lt;td&gt;command context&lt;/td&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;[[#dispatch]]&lt;/td&gt;&lt;td&gt;dispatch parameters&lt;/td&gt;&lt;/tr&gt;
     &lt;tr&gt;&lt;td&gt;[[#sequence]]&lt;/td&gt;&lt;td&gt;workflow sequence&lt;/td&gt;&lt;/tr&gt;
      &lt;tr&gt;&lt;td&gt;[[#notification]]&lt;/td&gt;&lt;td&gt;email notifications&lt;/td&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;[[#nodefilters]]&lt;/td&gt;&lt;td&gt;node filtering expressions&lt;/td&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;[[#loglevel]]&lt;/td&gt;&lt;td&gt;the logging level&lt;/td&gt;&lt;/tr&gt;
     &lt;/table&gt;
'''Job command modes'''
     
Jobs execute a sequence of commands. Commands come in several styles:
&lt;ul&gt;
       &lt;li&gt;System command.
       &lt;/li&gt;
      &lt;li&gt;A script&lt;/li&gt;
      &lt;li&gt;A script file&lt;/li&gt;
       &lt;li&gt;A command defined in a CTL module.
       &lt;/li&gt;
       &lt;li&gt;Another defined job
       &lt;/li&gt;
     &lt;/ul&gt;
'''Examples'''
'''System Example: '''
Execute the Unix 'who' command
     &lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;joblist&gt;
  &lt;job&gt;
    &lt;name&gt;who's logged in?&lt;/name&gt;
    &lt;description&gt;Runs the unix who command&lt;/description&gt;
    &lt;additional/&gt;
    &lt;group&gt;sysadm/users&lt;/group&gt;
    &lt;context&gt;
      &lt;project&gt;default&lt;/project&gt;
    &lt;/context&gt;
    &lt;sequence&gt;
      &lt;command&gt;
        &lt;!-- the Unix 'who' command --&gt;
        &lt;exec&gt;who&lt;/exec&gt;
      &lt;/command&gt;
     &lt;/sequence&gt;
    &lt;nodefilters excludeprecedence=&quot;true&quot;&gt;
      &lt;include&gt;
        &lt;os-family&gt;unix&lt;/os-family&gt;
      &lt;/include&gt;
    &lt;/nodefilters&gt;
    &lt;dispatch&gt;
      &lt;threadcount&gt;1&lt;/threadcount&gt;
      &lt;keepgoing&gt;true&lt;/keepgoing&gt;
    &lt;/dispatch&gt;
  &lt;/job&gt;
&lt;/joblist&gt;
&lt;/syntaxhighlight&gt;

'''Script Example: '''
Execute the Bash script
     &lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;joblist&gt;
  &lt;job&gt;
    &lt;name&gt;a simple script&lt;/name&gt;
    &lt;description&gt;Runs a trivial bash script&lt;/description&gt;
    &lt;additional/&gt;
    &lt;group&gt;sysadm/users&lt;/group&gt;
    &lt;context&gt;
      &lt;project&gt;default&lt;/project&gt;
    &lt;/context&gt;
    &lt;sequence&gt;
      &lt;command&gt;
        &lt;script&gt;&lt;![CDATA[#!/bin/bash
echo this is an example job running on $(hostname)
echo whatever
exit 0 ]]&gt;&lt;/script&gt;
      &lt;/command&gt;
     &lt;/sequence&gt;
    &lt;dispatch&gt;
      &lt;threadcount&gt;1&lt;/threadcount&gt;
      &lt;keepgoing&gt;true&lt;/keepgoing&gt;
    &lt;/dispatch&gt;
  &lt;/job&gt;
&lt;/joblist&gt;
&lt;/syntaxhighlight&gt;

'''Defined command Example:'''
Execute the 'testAll' command defined in module, coretests
     &lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;joblist&gt;
  &lt;job&gt;
    &lt;name&gt;test coreutils&lt;/name&gt;
    &lt;description/&gt;
    &lt;additional/&gt;
    &lt;context&gt;
      &lt;project&gt;default&lt;/project&gt;
    &lt;/context&gt;
    &lt;sequence&gt;
        &lt;!-- the coretests 'testAll' command --&gt;
        &lt;command name=&quot;testAll&quot; module=&quot;coretests&quot;&gt;
            &lt;arg line=&quot;&quot;/&gt;
        &lt;/command&gt;
    &lt;/sequence&gt;
    &lt;dispatch&gt;
      &lt;threadcount&gt;1&lt;/threadcount&gt;
      &lt;keepgoing&gt;false&lt;/keepgoing&gt;
    &lt;/dispatch&gt;
  &lt;/job&gt;
&lt;/joblist&gt;
&lt;/syntaxhighlight&gt;
'''Multiple commands Example:'''
Execute a sequence of other commands, scripts and jobs:
     &lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;joblist&gt;
  &lt;job&gt;
    &lt;name&gt;test coreutils&lt;/name&gt;
    &lt;description/&gt;
    &lt;additional/&gt;
    &lt;context&gt;
      &lt;project&gt;default&lt;/project&gt;
    &lt;/context&gt;
    &lt;sequence&gt;
      &lt;!-- the coretests 'testAll' command --&gt;
     &lt;command module=&quot;coretests&quot; name=&quot;testAll&quot;&gt;
     &lt;/command&gt;
     &lt;!-- the Unix 'who' command --&gt;
     &lt;command&gt;
        &lt;exec&gt;who&lt;/exec&gt;
     &lt;/command&gt;
     &lt;!-- a Job named test/other tests --&gt;
     &lt;command&gt;
        &lt;jobref group=&quot;test&quot; name=&quot;other tests&quot;/&gt;
     &lt;/command&gt;
    &lt;/sequence&gt;
    &lt;dispatch&gt;
      &lt;threadcount&gt;1&lt;/threadcount&gt;
      &lt;keepgoing&gt;false&lt;/keepgoing&gt;
    &lt;/dispatch&gt;
  &lt;/job&gt;
&lt;/joblist&gt;
&lt;/syntaxhighlight&gt;

==id==

The job identifier is a sub-element of [[#job]]. This is normally defined by CTL Center upon
job creation. If it is specified,  job will be created with this id.
If a job was already defined with this id, it will be updated with the
included job definition.
     

==name==
The job name is a sub-element of [[#job]]. The combination of  'name' and 
[[#group]] must be unique if the [[#id]]
identifier is not included.
     

==description==

The job description is a sub-element of [[#job]] and allows a short description of the job.
     

==additional==

The additional element is a sub-element of [[#job]] and provides a place to declare additional user information. 

[http://daringfireball.net/projects/markdown/syntax Markdown syntax] can be used inside this element.
&lt;syntaxhighlight&gt;
&lt;additional&gt;
Here's a link to [Additional tag reference](http://controltier.org/wiki/Job-v20.xml#additional &quot;Wiki&quot;). 
&lt;/additional&gt;
&lt;/syntaxhighlight&gt;

==group==

The group is a sub-element of [[#job]] and defines the  job's group identifier. This is a &quot;/&quot; (slash) separated
string that mimics a directory structure. 
'''Example'''
     &lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;job&gt;
    &lt;name&gt;who&lt;/name&gt;
    &lt;description&gt;who is logged in?&lt;/description&gt;
    &lt;additional/&gt;
    &lt;group&gt;/sysadm/users&lt;/group&gt;
&lt;/job&gt;
&lt;/syntaxhighlight&gt;

[[File:jobcenter-groups.png]]

==schedule==

     
&lt;code&gt;schedule&lt;/code&gt; is a sub-element of [[#job]] and specifies periodic job execution using the stated schedule.  The schedule can be specified using embedded elements as shown below, or using a single [[#crontab]] attribute to set a full crontab expression.

     &lt;table border=&quot;1&quot; class=&quot;wikitable&quot;&gt;
       &lt;caption&gt;nested elements&lt;/caption&gt;
       &lt;tr&gt;&lt;th&gt;element&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;[[#time]]&lt;/td&gt;&lt;td&gt;the hour and minute and seconds&lt;/td&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;[[#weekday]]&lt;/td&gt;&lt;td&gt;day(s) of week&lt;/td&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;[[#month]]&lt;/td&gt;&lt;td&gt;month(s)&lt;/td&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;[[#year]]&lt;/td&gt;&lt;td&gt;year&lt;/td&gt;&lt;/tr&gt;
     &lt;/table&gt;

     &lt;table border=&quot;1&quot; class=&quot;wikitable&quot;&gt;
       &lt;caption&gt;optional attribute&lt;/caption&gt;
       &lt;tr&gt;&lt;th&gt;attribute&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;[[#crontab]]&lt;/td&gt;&lt;td&gt;A full crontab expression&lt;/td&gt;&lt;/tr&gt;
     &lt;/table&gt;

     
'''Example'''

Run the job every morning at 6AM, 7AM and 8AM.

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;schedule&gt;
	 &lt;time hour=&quot;06,07,08&quot; minute=&quot;00&quot;/&gt;
	 &lt;weekday day=&quot;*&quot;/&gt;
	 &lt;month month=&quot;*&quot;/&gt;
&lt;/schedule&gt;
&lt;/syntaxhighlight&gt;


Run the job every morning at 6:00:02AM, 7:00:02AM and 8:00:02AM only in the year 2010:

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;schedule&gt;
	 &lt;time hour=&quot;06,07,08&quot; minute=&quot;00&quot; seconds=&quot;02&quot;/&gt;
	 &lt;weekday day=&quot;*&quot;/&gt;
	 &lt;month month=&quot;*&quot;/&gt;
	 &lt;year year=&quot;2010&quot;/&gt;
&lt;/schedule&gt;
&lt;/syntaxhighlight&gt;

Run the job every morning at 6:00:02AM, 7:00:02AM and 8:00:02AM only in the year 2010, using a single crontab attribute to express it:

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;schedule crontab=&quot;02 00 06,07,08 ? * * 2010&quot;/&gt;
&lt;/syntaxhighlight&gt;

For more information, see [http://www.quartz-scheduler.org/docs/tutorials/crontrigger.html http://www.quartz-scheduler.org/docs/tutorials/crontrigger.html] or [http://www.stonebranch.com Stonebranch]

===crontab===

Attribute of the [[#schedule]], sets the schedule with a full crontab string. For more information, see [http://www.quartz-scheduler.org/docs/tutorials/crontrigger.html]. 

If specified, then the embedded schedule elements are not used.

===time===

The [[#schedule]] time to run the job

     &lt;table border=&quot;1&quot; class=&quot;wikitable&quot;&gt;
       &lt;caption&gt;attributes&lt;/caption&gt;
       &lt;tr&gt;&lt;th&gt;attribute&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;hour&lt;/td&gt;&lt;td&gt;values: 00-23&lt;/td&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;minute&lt;/td&gt;&lt;td&gt;values: 00-59&lt;/td&gt;&lt;/tr&gt;
     &lt;/table&gt;

===weekday===
     
The [[#schedule]] weekday to run the job

&lt;table border=&quot;1&quot; class=&quot;wikitable&quot;&gt;
       &lt;caption&gt;attributes&lt;/caption&gt;
       &lt;tr&gt;&lt;th&gt;attribute&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;day&lt;/td&gt;&lt;td&gt;values: * - all 1-5 - days mon-fri 1,2,3-5 - days mon,tue,wed-fri, etc.&lt;/td&gt;&lt;/tr&gt;
     &lt;/table&gt;

===month===
     
The [[#schedule]] month to run the job

&lt;table border=&quot;1&quot; class=&quot;wikitable&quot;&gt;
       &lt;caption&gt;attributes&lt;/caption&gt;
       &lt;tr&gt;&lt;th&gt;attribute&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;month&lt;/td&gt;&lt;td&gt;values:  * - all 1-10 - month jan-oct 1,2,3-5 - months jan,feb,mar-may, etc.&lt;/td&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;day&lt;/td&gt;&lt;td&gt;day of the month:  * - all;  1-31 specific days&lt;/td&gt;&lt;/tr&gt;
     &lt;/table&gt;

==context==
     
The [[#job]] context.

&lt;table border=&quot;1&quot; class=&quot;wikitable&quot;&gt;
       &lt;caption&gt;nested elements&lt;/caption&gt;
       &lt;tr&gt;&lt;th&gt;element&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;th&gt;&lt;/th&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;[[#project]]&lt;/td&gt;&lt;td&gt;the project name&lt;/td&gt;&lt;td&gt;'''required'''&lt;/td&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;[[#options]]&lt;/td&gt;&lt;td&gt;command options&lt;/td&gt;&lt;td&gt;specifies one or more option elements&lt;/td&gt;&lt;/tr&gt;
     &lt;/table&gt;

===project===
The [[#context]] project name.

===options===
     
The [[#context]]  options that correspond to the called [[#command]].
&lt;table border=&quot;1&quot; class=&quot;wikitable&quot;&gt;
       &lt;caption&gt;nested elements&lt;/caption&gt;
       &lt;tr&gt;&lt;th&gt;element&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;[[#option]]+&lt;/td&gt;&lt;td&gt;a command option&lt;/td&gt;&lt;/tr&gt;
     &lt;/table&gt;
     
'''Example'''

 &lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;options&gt;
        &lt;option name=&quot;detail&quot; value=&quot;true&quot;/&gt;
&lt;/options&gt;
&lt;/syntaxhighlight&gt;

Valid for Defined Command jobs and Workflow jobs (since [[ControlTier 3.5.3|3.5.3]]).

====option====

Defines one option within the [[#options]].
&lt;table border=&quot;1&quot; class=&quot;wikitable&quot;&gt;
       &lt;caption&gt;attributes&lt;/caption&gt;
       &lt;tr&gt;&lt;th&gt;attributes&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;th&gt;&lt;/th&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;name&lt;/td&gt;&lt;td&gt;the option name&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;value&lt;/td&gt;&lt;td&gt;the option value&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;values&lt;/td&gt;&lt;td&gt;comma separated list of values&lt;/td&gt;&lt;td&gt;Since [[ControlTier 3.5.1|3.5.1]]&lt;/td&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;valuesUrl&lt;/td&gt;&lt;td&gt;URL to a list of [[#valuesUrl JSON|JSON values]]&lt;/td&gt;&lt;td&gt;Since [[ControlTier 3.5.1|3.5.1]]&lt;/td&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;enforcedvalues&lt;/td&gt;&lt;td&gt;Boolean specifying that must pick from one of values&lt;/td&gt;&lt;td&gt;Since [[ControlTier 3.5.1|3.5.1]]&lt;/td&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;regex&lt;/td&gt;&lt;td&gt;Regex pattern of acceptable value&lt;/td&gt;&lt;td&gt;Since [[ControlTier 3.5.1|3.5.1]]&lt;/td&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;description&lt;/td&gt;&lt;td&gt;Description of the option&lt;/td&gt;&lt;td&gt;Since [[ControlTier 3.5.3|3.5.3]]&lt;/td&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;required&lt;/td&gt;&lt;td&gt;Boolean specifying that the option is required&lt;/td&gt;&lt;td&gt;Since [[ControlTier 3.5.3|3.5.3]]&lt;/td&gt;&lt;/tr&gt;
     &lt;/table&gt;

'''Example'''

Define defaults for the &quot;port&quot; option. 
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;option name=&quot;port&quot; value=&quot;80&quot; values=&quot;80,8080,8888&quot; enforcedvalues=&quot;true&quot; regex=&quot;\d+&quot;/&gt;
&lt;/syntaxhighlight&gt;

====valuesUrl JSON====
The data returned from the valuesUrl can be formatted as a map:
&lt;syntaxhighlight lang=&quot;javascript&quot;&gt;{&quot;x label&quot;:&quot;X value&quot;,&quot;y label&quot;:&quot;Y value&quot;, &quot;z label&quot;:&quot;Z value&quot;}&lt;/syntaxhighlight&gt;

or as array:
&lt;syntaxhighlight lang=&quot;javascript&quot;&gt;[&quot;x value&quot;,&quot;y value&quot;, &quot;z value&quot;]&lt;/syntaxhighlight&gt;

==dispatch==

     
The [[#job]] dispatch options.
See the [[Dispatcher options]]
for general information.

&lt;table border=&quot;1&quot; class=&quot;wikitable&quot;&gt;
       &lt;caption&gt;nested elements&lt;/caption&gt;
       &lt;tr&gt;&lt;th&gt;element&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;[[#threadcount]]&lt;/td&gt;&lt;td&gt;dispatch up to threadcount&lt;/td&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;[[#keepgoing]]&lt;/td&gt;&lt;td&gt;keepgoing flag&lt;/td&gt;&lt;/tr&gt;
     &lt;/table&gt;
'''Example'''
     &lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;dispatch&gt;
      &lt;threadcount&gt;1&lt;/threadcount&gt;
      &lt;keepgoing&gt;false&lt;/keepgoing&gt;
&lt;/dispatch&gt;
&lt;/syntaxhighlight&gt;

===threadcount===
Defines the number of threads to execute within [[#dispatch]]. Must be a positive integer.

===keepgoing===

Boolean describing if the [[#dispatch]] should continue of an error occurs (true/false). If true, continue if an error occurs.
     
==loglevel==

The [[#job]] logging level. The lower the more profuse the messages.
&lt;ol&gt;
       &lt;li&gt;DEBUG&lt;/li&gt;
       &lt;li&gt;VERBOSE&lt;/li&gt;
       &lt;li&gt;INFO&lt;/li&gt;
       &lt;li&gt;WARN&lt;/li&gt;
       &lt;li&gt;ERR&lt;/li&gt;
     &lt;/ol&gt;
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
  &lt;job&gt;
    &lt;name&gt;Build&lt;/name&gt;
    &lt;description&gt;Build the Duke's Bank application using the specified release version.&lt;/description&gt;
    &lt;additional&gt;Edit the job's definition and change the buildstamp option to the required release version.&lt;/additional&gt;
    
    &lt;loglevel&gt;WARN&lt;/loglevel&gt;

    &lt;group&gt;Build/DukesBank&lt;/group&gt;
    &lt;context&gt;
      &lt;project&gt;demo&lt;/project&gt;
      &lt;type&gt;JBossAntBuilder&lt;/type&gt;
      &lt;object&gt;dukesBank&lt;/object&gt;
      &lt;command&gt;Build&lt;/command&gt;
    &lt;/context&gt;
   .
   .
   .
&lt;/syntaxhighlight&gt;

==nodefilters==
     
The [[#job]] nodefilters options. See 
[[Dispatcher options]]
for a general description.

     &lt;table border=&quot;1&quot; class=&quot;wikitable&quot;&gt;
       &lt;caption&gt;attributes&lt;/caption&gt;
       &lt;tr&gt;&lt;th&gt;attribute&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;excludeprecedence&lt;/td&gt;&lt;td&gt;true/false. &lt;/td&gt;&lt;/tr&gt;
     &lt;/table&gt;
     &lt;table border=&quot;1&quot; class=&quot;wikitable&quot;&gt;
       &lt;caption&gt;nested elements&lt;/caption&gt;
       &lt;tr&gt;&lt;th&gt;element&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;include&lt;/td&gt;&lt;td&gt;include filter. See [[#Include%2Fexclude+patterns]]&lt;/td&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;exclude&lt;/td&gt;&lt;td&gt;exclude filter. See [[#Include%2Fexclude+patterns]]&lt;/td&gt;&lt;/tr&gt;
     &lt;/table&gt;
'''Example'''
     &lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;nodefilters excludeprecedence=&quot;true&quot;&gt;
      &lt;include&gt;
        &lt;hostname/&gt;
        &lt;type/&gt;
        &lt;tags&gt;tomcats&lt;/tags&gt;
        &lt;os-name/&gt;
        &lt;os-family/&gt;
        &lt;os-arch/&gt;
        &lt;os-version/&gt;
        &lt;name/&gt;
      &lt;/include&gt;
&lt;/nodefilters&gt;
&lt;/syntaxhighlight&gt;

===include===
See [[#Include/exclude patterns]]
===exclude===
See [[#Include/exclude patterns]]

===Include/exclude patterns===
The [[#nodefilters]] include and exclude patterns.

     &lt;table border=&quot;1&quot; class=&quot;wikitable&quot;&gt;
       &lt;caption&gt;nested elements&lt;/caption&gt;
       &lt;tr&gt;&lt;th&gt;element&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;hostname&lt;/td&gt;&lt;td&gt;node hostname&lt;/td&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;name&lt;/td&gt;&lt;td&gt;node resource name (e.g., hostname)&lt;/td&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;type&lt;/td&gt;&lt;td&gt;node type&lt;/td&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;tags&lt;/td&gt;&lt;td&gt;node tags&lt;/td&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;os-name&lt;/td&gt;&lt;td&gt;node operating system name&lt;/td&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;os-family&lt;/td&gt;&lt;td&gt;node operating system family (i.e., unix, windows)&lt;/td&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;os-arch&lt;/td&gt;&lt;td&gt;node operating system architecture (e.g., i386, sparc)&lt;/td&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;os-version&lt;/td&gt;&lt;td&gt;node operating system version&lt;/td&gt;&lt;/tr&gt;
     &lt;/table&gt;

== sequence ==

The [[#job]] workflow sequence.  

{| class=&quot;wikitable&quot;
 |+ Attributes
 ! name !! description
 |-
 | keepgoing || true/false.  (default false). If true, the workflow sequence will continue even if there is a failure
 |-
 | strategy || &quot;node-first&quot;/&quot;step-first&quot;.  (default &quot;node-first&quot;). The strategy to use for executing the workflow across nodes. See below (Since 3.5.4)
 |}

The strategy attribute determines the way that the workflow is executed. &quot;node-first&quot; means execute the full workflow on each node prior to the next.  &quot;step-first&quot; means execute each step across all nodes prior to the next step.
 
{| class=&quot;wikitable&quot;
|+nested elements
|-
!element!!description
|-
|[[#command_2|command]]+||a sequence item command definition
|}

=== command ===

Defines an item for a workflow [[#sequence]].

The different types of sequence items are defined in different ways.


See:

* [[#Defined command item]]
* [[#Script sequence item]]
* [[#Job sequence item]]

==== Defined command item ====

Use a [[#command_2|command]] element in the following way:

{| class=&quot;wikitable&quot;
 |+ Attributes
 ! name !! description
 |-
 | name || name of defined command to execute
 |-
 | module || module/type of the defined command
 |-
 | resource || name of the resource (resource context)
 |}

Optional &quot;arg&quot; element can be embedded:

{| class=&quot;wikitable&quot;
 |+ Nested Elements
 ! name !! description
 |-
 | [[#arg]] || option arguments to the Defined command item
 |}

Example Module context:

&lt;syntaxhighlight&gt;
&lt;command name=&quot;listening&quot; module=&quot;netutil&quot;&gt;
    &lt;arg line=&quot;-port 8080&quot; /&gt;
&lt;/command&gt;
&lt;/syntaxhighlight&gt;

Example Resource context:

&lt;syntaxhighlight&gt;
&lt;command name=&quot;Build&quot; module=&quot;AntBuilder&quot; resource=&quot;application1&quot;&gt;
    &lt;arg line=&quot;-buildstamp 123&quot; /&gt;
&lt;/command&gt;
&lt;/syntaxhighlight&gt;

===== arg =====

For a [[#Defined command item]]

{| class=&quot;wikitable&quot;
 |+ Attributes
 ! name !! description
 |-
 | line || full argument line to pass to the defined command sequence item.
 |}
 
==== Script sequence item ====

Script items can be defined in three ways within a [[#command_2|command]] element:

* Simple shell command using &lt;code&gt;exec&lt;/code&gt; element.
* Embedded script using &lt;code&gt;script&lt;/code&gt; element.
* Script file using &lt;code&gt;scriptfile&lt;/code&gt; and &lt;code&gt;scriptargs&lt;/code&gt; elements.

Example exec item:

&lt;syntaxhighlight&gt;
&lt;command&gt;
 &lt;exec&gt;echo this is a shell command&lt;/exec&gt;
&lt;/command&gt;
&lt;/syntaxhighlight&gt;


Inline script.  Note that using CDATA section will preserve linebreaks in the script.  Simply put the script within a &lt;code&gt;script&lt;/code&gt; element:
&lt;syntaxhighlight&gt;
&lt;command&gt;
    &lt;script&gt;&lt;![CDATA[#!/bin/bash
echo this is a test
echo whatever
exit 2 ]]&gt;&lt;/script&gt;
&lt;/command&gt;
&lt;/syntaxhighlight&gt;

Script File:
&lt;syntaxhighlight&gt;
&lt;command &gt;
    &lt;scriptfile&gt;/path/to/a/script&lt;/scriptfile&gt;
    &lt;scriptargs&gt;-whatever something&lt;/scriptargs&gt;
&lt;/command&gt;      
&lt;/syntaxhighlight&gt;

==== Job sequence item ====

Define a [[#jobref]] element within the [[#command_2|command]] element

===== jobref=====

{| class=&quot;wikitable&quot;
 |+ Attributes
 ! name !! description
 |-
 | name || name of the job
 |-
 | group || group of the job
 |}

Optional &quot;arg&quot; element can be embedded:

{| class=&quot;wikitable&quot;
 |+ Nested Elements
 ! name !! description
 |-
 | [[#arg]] || option arguments to the Defined command item ({{version|3.5.5}})
 |}

 
Example:
&lt;syntaxhighlight&gt;
&lt;command &gt;
    &lt;jobref group=&quot;My group&quot; name=&quot;My Job&quot;/&gt;
&lt;/command&gt;      
&lt;/syntaxhighlight&gt;

Example passing arguments to the job:
&lt;syntaxhighlight&gt;
&lt;command &gt;
    &lt;jobref group=&quot;My group&quot; name=&quot;My Job&quot;&gt;
         &lt;arg line=&quot;-option value -option2 value2&quot;/&gt;
    &lt;/jobref&gt;
&lt;/command&gt;      
&lt;/syntaxhighlight&gt;

== notification ==

Defines email notifications for Job success and failure, with in a [[#job]] definition.

{| class=&quot;wikitable&quot;
 |+ Nested Elements
 ! name !! description
 |-
 | [[#onsuccess]] || define notifications for success result
 |-
 | [[#onfailure]] || define notifications for failure/kill result
 |}

Example:
&lt;syntaxhighlight&gt;
&lt;notification&gt;
    &lt;onfailure&gt;
        &lt;email recipients=&quot;test@example.com,foo@example.com&quot; /&gt;
    &lt;/onfailure&gt;
    &lt;onsuccess&gt;
        &lt;email recipients=&quot;test@example.com&quot; /&gt;
    &lt;/onsuccess&gt;
&lt;/notification&gt;      
&lt;/syntaxhighlight&gt;
 
=== onsuccess ===

Embed a [[#email]] to send email on success, within [[#notification]].

=== onfailure ===

Embed a [[#email]] to send email on failure or kill, within [[#notification]].

=== email ===

Define email recipients for Job execution result, within [[#onsuccess]] or [[#onfailure]].

{| class=&quot;wikitable&quot;
 |+ Attributes
 ! name !! description
 |-
 | recipients || comma-separated list of email addresses
 |}
 
 
&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Jobs]]
[[Category:XML]]</text>
    </revision>
  </page>
  <page>
    <title>Job.xml</title>
    <id>314</id>
    <redirect />
    <revision>
      <id>14213</id>
      <timestamp>2010-11-10T17:31:12Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[Job-v20.xml]]</comment>
      <text xml:space="preserve">#REDIRECT [[Job-v20.xml]]</text>
    </revision>
  </page>
  <page>
    <title>Job appserver war deployment example</title>
    <id>2127</id>
    <redirect />
    <revision>
      <id>15054</id>
      <timestamp>2010-12-13T02:11:28Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[Automate deployment with Jobs]]</comment>
      <text xml:space="preserve">#REDIRECT [[Automate deployment with Jobs]]</text>
    </revision>
  </page>
  <page>
    <title>Jobcenter</title>
    <id>1982</id>
    <redirect />
    <revision>
      <id>15636</id>
      <timestamp>2011-10-27T17:17:02Z</timestamp>
      <contributor>
        <username>Gschueler</username>
        <id>8</id>
      </contributor>
      <minor/>
      <comment>Reverted edits by [[Special:Contributions/Jeraldinesewell|Jeraldinesewell]] ([[User talk:Jeraldinesewell|talk]]) to last revision by [[User:Ahonor|Ahonor]]</comment>
      <text xml:space="preserve">#REDIRECT [[Ctlcenter]]</text>
    </revision>
  </page>
  <page>
    <title>Join Type Reference</title>
    <id>1866</id>
    <revision>
      <id>12466</id>
      <timestamp>2010-04-01T15:10:26Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>/* Examples */</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Types&lt;/categorytree&gt;

==Description==
      &lt;p&gt;
	The Join type combines multiple sets of FunctionMapperInputGenerator results. 
      &lt;/p&gt;

==Parameters specified as nested elements==

      &lt;p&gt;&lt;strong&gt;input generator&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
        Any [[:Category:ApplyMacro Ant Type]]
      &lt;/p&gt;

      &lt;p&gt;&lt;strong&gt;keyedparamvalues&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
        A fixed set of name value pairs.
      &lt;/p&gt;
&lt;pre&gt;
&lt;keyedparamvalues&gt;
 &lt;paramvaluepair param=&quot;dName&quot; value=&quot;dave&quot;/&gt;
 &lt;paramvaluepair param=&quot;dType&quot; value=&quot;Deployment&quot;/&gt;
&lt;/keyedparamvalues&gt;
&lt;/pre&gt;

==Examples==
Iterate over keyedparamvalues and [[stringlist]]:
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
    &lt;apply-macro&gt;

           &lt;join&gt;
               &lt;keyedparamvalues&gt;
                   &lt;paramvaluepair param=&quot;dName&quot; value=&quot;dave&quot;/&gt;
                   &lt;paramvaluepair param=&quot;dType&quot; value=&quot;Deployment&quot;/&gt;
               &lt;/keyedparamvalues&gt;
               &lt;stringlist param=&quot;item&quot; delimiter=&quot;,&quot; value=&quot;one,two,three&quot;/&gt;
           &lt;/join&gt;

           &lt;sequential&gt;
               &lt;property
                   name=&quot;test7.@{item}.@{dType}.@{dName}&quot;
                   value=&quot;1&quot;/&gt;
           &lt;/sequential&gt;

       &lt;/apply-macro&gt;
       &lt;condition property=&quot;test7.success&quot;&gt;
           &lt;and&gt;
               &lt;isset property=&quot;test7.one.Deployment.dave&quot;/&gt;
               &lt;isset property=&quot;test7.two.Deployment.dave&quot;/&gt;
               &lt;isset property=&quot;test7.three.Deployment.dave&quot;/&gt;
           &lt;/and&gt;
       &lt;/condition&gt;
       &lt;fail unless=&quot;test7.success&quot;&gt;FAIL&lt;/fail&gt;
       &lt;echo level=&quot;info&quot;&gt;SUCCESS&lt;/echo&gt;

&lt;/syntaxhighlight&gt;
&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Command Dispatcher Ant Types]]
[[Category:ApplyMacro Ant Type]]</text>
    </revision>
  </page>
  <page>
    <title>Latest release</title>
    <id>1864</id>
    <revision>
      <id>15523</id>
      <timestamp>2011-09-25T05:35:56Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <comment>update to 3.6.1</comment>
      <text xml:space="preserve">{{:ControlTier 3.6.1}}</text>
    </revision>
  </page>
  <page>
    <title>Learning Course Template</title>
    <id>421</id>
    <revision>
      <id>10326</id>
      <timestamp>2009-12-11T22:04:49Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>/* Suggested Next Courses */</comment>
      <text xml:space="preserve">: '''Note''': The contents of this page are meant to be used as a template for writing a full Course.  Components that are ''Italicized'' are examples that should be replaced.

'''Title'''

==Overview==
=== What you will learn ===
''Summary of course goal''

==== Learn To ====
* ''Item A''
* ''Item B''

=== Audience ===

* ''DB Admins''
* ''Java Developers''
* ''...''

=== Prerequisites ===
==== Required Prerequisites ====

* ''Understand XML''
* ''Reading''
* ''...''

==== Suggested Preqrequisites ====

* ''Previous course A''
* ''Previous course B''
* ''...''

=== Course Objectives ===
''List the things that will be accomplished during the course here...''

* ''Document automation procedures''
* ''Create builder implementation''
* ''Import packages''
* ''...''

== Course Topics==
''List details of each topic and the points it will cover here ...''

== ''Topic A'' ==

* ''Installing A''
* ''Configuring A''
* ''...''

== ''Topic B'' ==

* ''Dispatching B to C''
* ''Something else''
* ''...''

== Suggested Next Courses ==

* ''Some course C''
* ''Some course D''
* ''...''

[[Category:Training]]</text>
    </revision>
  </page>
  <page>
    <title>Learning Topics</title>
    <id>451</id>
    <redirect />
    <revision>
      <id>2759</id>
      <timestamp>2009-02-17T17:46:32Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>[[Learning Topics]] moved to [[Training Topics]] over redirect</comment>
      <text xml:space="preserve">#REDIRECT [[Training Topics]]</text>
    </revision>
  </page>
  <page>
    <title>Libraries</title>
    <id>1639</id>
    <redirect />
    <revision>
      <id>11128</id>
      <timestamp>2009-12-14T02:06:41Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[Category:Libraries]]</comment>
      <text xml:space="preserve">#REDIRECT [[:Category:Libraries]]</text>
    </revision>
  </page>
  <page>
    <title>License</title>
    <id>334</id>
    <revision>
      <id>11971</id>
      <timestamp>2009-12-19T00:01:46Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <minor/>
      <comment>change &quot;Apache Software License&quot; to &quot;Apache License&quot;</comment>
      <text xml:space="preserve">All ControlTier components are licensed under the [http://www.apache.org/licenses/LICENSE-2.0.html Apache License, version 2].

&lt;noinclude&gt;[[Category:Releases]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>License Information</title>
    <id>996</id>
    <redirect />
    <revision>
      <id>5670</id>
      <timestamp>2009-06-16T20:28:02Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>[[License Information]] moved to [[License]]</comment>
      <text xml:space="preserve">#REDIRECT [[License]]</text>
    </revision>
  </page>
  <page>
    <title>LineTokenizer Type Reference</title>
    <id>1691</id>
    <revision>
      <id>11436</id>
      <timestamp>2009-12-14T23:38:50Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Created page with '{{stub}} &lt;syntaxhighlight lang=&quot;xml&quot;&gt; &lt;linetokenizer file=&quot;${temp.file}&quot;&gt;        &lt;regex                pattern=&quot;(.*)-(.*)-(.*)&quot;&gt;            &lt;token name=&quot;line&quot; matchgroup=&quot;0&quot;/&gt;   …'</comment>
      <text xml:space="preserve">{{stub}}
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;linetokenizer file=&quot;${temp.file}&quot;&gt;
       &lt;regex
               pattern=&quot;(.*)-(.*)-(.*)&quot;&gt;
           &lt;token name=&quot;line&quot; matchgroup=&quot;0&quot;/&gt;
           &lt;token name=&quot;column1&quot; matchgroup=&quot;1&quot;/&gt;
           &lt;token name=&quot;column2&quot; matchgroup=&quot;2&quot;/&gt;
           &lt;token name=&quot;column3&quot; matchgroup=&quot;3&quot;/&gt;
       &lt;/regex&gt;
&lt;/linetokenizer&gt;
&lt;/syntaxhighlight&gt;

[[Category:ApplyMacro Ant Type]]</text>
    </revision>
  </page>
  <page>
    <title>Local dispatch mechanism</title>
    <id>75</id>
    <revision>
      <id>14364</id>
      <timestamp>2010-11-11T16:40:10Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;noinclude&gt;&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Architecture&lt;/categorytree&gt;&lt;/noinclude&gt;
The diagram below describes the command dispatching mechanism for a local command execution. 
When a user issues a command it is invoked via the Framework component. Internally, the Framework looks up the needed execution strategy based on the commands parameters. Local commands are executed by resolving the command to a module and command handler. The execution strategy loads the handler and creates a data binding context based on user input, command parameters, and model context data. The Framework then invokes the strategy to execute the command.

[[Image:framework-overview.png|Local command dispatch]]

A module is a self contained component in the CTL system, responsible for its own data, its own activities, and the integrity of its actions.
Module data is in the form of properties, key/value pairs, while its operations are defined in terms of commands. 

The command dispatcher supports an object oriented programming paradigm. Modules are defined in terms of the ControlTier type model.
Modules inherit commands from their &quot;supertype&quot;, and can override inherited commands or define entirely new commands.

[[Image:module-concept.png]]

Users can define instances of types, called objects and call commands in the scope of their instance data. It is the framework's dispatcher that does the lookup for the named command specified by the user, resolve it to a command implementation and object, prepare a data context, and execute the implementation code.

For an internal view of the command dispatching mechanism see: [[Model-driven command dispatching]]</text>
    </revision>
  </page>
  <page>
    <title>Logicutil</title>
    <id>1292</id>
    <revision>
      <id>10222</id>
      <timestamp>2009-12-11T18:24:52Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Types&lt;/categorytree&gt;
[[File:Icon-AssemblyObject.png]]
[[logicutil]] is a utility containing several commands useful for scripting logic
  
==Reference==

* [http://controltier.sourceforge.net/docs/snapshot/core/reference/user/logicutil/index.html logicutil reference]

{{Manual/navbox}}

[[Category:coreutils]]
[[Category:Managed-Entity]]</text>
    </revision>
  </page>
  <page>
    <title>Look for date discrepancies</title>
    <id>285</id>
    <revision>
      <id>14305</id>
      <timestamp>2010-11-10T22:47:19Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;noinclude&gt;&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Examples&lt;/categorytree&gt;&lt;/noinclude&gt;
=Scenario=
You are looking for date discrepancies across hosts.

Note:
This scenario is a specific case of [[Replace your SSH loop script]]


Here's an example that shows how to use [[CTL-EXEC_Command_Reference|ctl-exec]] to run the Unix &quot;date&quot; command against all the Linux hosts:

&lt;pre&gt;
$ ctl-exec -p default -I os-name=Linux -- date
number of nodes to dispatch to: 2, (threadcount=1)
Connecting to centos:22
cmd : date
Wed Dec 31 10:23:54 PST 2008
Connecting to development:22
cmd : date
Tue Sep 16 00:22:13 PDT 2008
&lt;/pre&gt;

{{Guide/navbox}}
[[Category:Scripting_Examples]]</text>
    </revision>
  </page>
  <page>
    <title>Low Cost Suggestions For The Newborn Nursery</title>
    <id>3020</id>
    <revision>
      <id>16831</id>
      <timestamp>2012-09-13T05:02:07Z</timestamp>
      <contributor>
        <username>Mengelke15</username>
        <id>2257</id>
      </contributor>
      <comment>If you are hoping for the most up-to-date fads in baby nursery room style then you've come to the best place. This valuable article serves up quite a number of ideas, tips and techniques in order to make the newest new born's place memorable and allu</comment>
      <text xml:space="preserve">The right moment for one's baby to be born still is a little ways off, yet the huge question persists. Did the baby's room get finished? What exactly is left to pick up? What is still to be accomplished prior to the baby comes into the world? Anything that can be accomplished beforehand should be carried out given that time will be in limited supply after the newborn comes home.&lt;br/&gt;&lt;br/&gt;Here are some great ideas for that baby nursery which will make life easier and brings about some quick and easy (and cheap) alternatives for any new parents to get them started on the best path.&lt;br/&gt;&lt;br/&gt;1. The easiest way to personalize a baby's room is usually to do a little paintings. Just about anything can make the room stand out if it centers on sports, cartoon characters, or anything unique and special. Do not worry if artistic skills are nonexistent. It is possible to obtain a child's coloring book as well as a simple projector at many hobby and craft shops for hardly any cash. Select a coloring book containing appealing characters in it and along with the aid of a projector, copy the character on the wall in the nursery. Painting the wall drawings is forthcoming. Using this one easy tip, [http://webarticleblog.com/index.php?page=article&amp;article_id=133175 the nursery]’s walls will come to life.&lt;br/&gt;&lt;br/&gt;2. Don't forget that the various stuffed critters will have the room crowded before too long. Locate a small cargo net at the toy store or hobby store to help thin the herd. Stringing up the hammock in the corner can hold plenty of animals. Keeping the stuffed toys off the floor makes for even more room on the floor for various other pieces which might be more important.&lt;br/&gt;&lt;br/&gt;3. Parents should be prepared for the falls, bumps, and bruises that are going to happen, especially if the nursery doesn’t have carpet. To help prevent or lessen bumps and bruises try decorating with padded flooring or area rugs. A lot of stores carry foam mats that interlock with each other, plus every single one might be in a separate color. Don’t forget that any padded floor will soften the inevitable falls when the baby learns to walk. The other great reason for the foam pad can be to save mom and dad’s knees. Playing with kids is definitely fun so it shouldn’t involve creaking knees as moms and dads get off the floor afterwards.&lt;br/&gt;&lt;br/&gt;4. Toys apparently come out of the woodwork as soon as the kids become mobile. Consider utilizing Rubbermaid totes instead of a standard toy box. Mid-sized totes may only hold a limited amount of stuff rendering it less likely to grow too much to move. Just as the child actually starts to play more interactively with the toys, a sturdy plastic tote will surely come in handy. Not only will the toddler move smaller plastic containers, but trying to keep the toys in smaller sized to medium totes ensures moms and dads won’t have to lift a lot of when tidying up at the conclusion of that day.&lt;br/&gt;&lt;br/&gt;5. One great way to keep the baby’s room clutter as small as possible is often to donate outgrown toys and clothing on to the groups of service men and women. Any size donation to military personnel is greatly appreciated by all. Babies outgrow clothing so quickly that a lot of military families appreciate not having to pay out a lot of money on clothing ever three to six months. Any support these families can get from the other parts of the country is certain to be greatly appreciated.&lt;br/&gt;&lt;br/&gt;It's in no way a definitive set of nursery ideas. At some stage in the life of one's young family, a lot of the ideas mentioned will likely be tried and perfected. In terms of the children, parents coming from all parts of society appear to have similar ideas as to what is fun and entertaining for the kids.</text>
    </revision>
  </page>
  <page>
    <title>Mailing lists</title>
    <id>1036</id>
    <revision>
      <id>16739</id>
      <timestamp>2012-05-16T03:48:32Z</timestamp>
      <contributor>
        <username>Ella19</username>
        <id>1789</id>
      </contributor>
      <minor/>
      <comment>asdasd</comment>
      <text xml:space="preserve">&lt;noinclude&gt;&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Community&lt;/categorytree&gt;&lt;/noinclude&gt;
[[Image:Google_groups_logo.png]]

Our mailing lists are hosted [http://www.cavite-housing.com/ cavite house and lot] by Google Groups
* [http://groups.google.com/group/controltier ControlTier User]: General user discussion, question/answers, announcements
* [http://groups.google.com/group/controltier-codecommit ControlTier Development]: Code commit, bug and feature requests and development discussion

&lt;noinclude&gt;[[Category:Community]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Main Page</title>
    <id>1</id>
    <revision>
      <id>15524</id>
      <timestamp>2011-09-25T05:36:58Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <comment>add 3.6.1</comment>
      <text xml:space="preserve">&lt;div style=&quot;background: #f9f9f9; padding: 0px; border: 1px solid #aaaaaa; margin: 0.2em 10px 10px;&quot;&gt;
&lt;div style=&quot;padding: 10px;color: #111111; font-size: 200% !important;&quot;&gt;'''Welcome to the &lt;span style=&quot;color:#005288;&quot;&gt;ControlTier 3.6 Wiki&lt;/span&gt;'''&lt;/div&gt;
&lt;div style=&quot;background: #ffffff;padding:0.2em 0.4em;&quot;&gt;{{Main page/intro}}&lt;/div&gt;
&lt;div style=&quot;padding: 0.2em; text-align: center;background-color: white;&quot;&gt;
'''[[Community|About]]''' &amp;nbsp; | &amp;nbsp; 
'''[[Download]]''' &amp;nbsp; | &amp;nbsp;
'''[[Help]]'''
&lt;/div&gt;
&lt;table cellspacing=&quot;10&quot; width=&quot;100%&quot; border=&quot;0&quot; style=&quot;margin0;&quot;&gt;
	&lt;tr&gt;
		&lt;td width=&quot;33%&quot; valign=&quot;top&quot; style=&quot;style=&quot;padding: 0;border: 1px solid #aaaaaa;&quot;&quot;&gt;
			&lt;div style=&quot;background: #eeeeee;padding:0.2em 0.4em; border: 1px;&quot;&gt;'''User Guide'''&lt;/div&gt;
			&lt;table cellpadding=&quot;3&quot; style=&quot;border: 0; margin: 0;&quot;&gt;
				&lt;tr&gt;
					&lt;td valign=&quot;top&quot;&gt;[[Image:Crystal Clear app display.png|80x80px|link=User Guide]]&lt;/td&gt;
					&lt;td valign=&quot;top&quot;&gt;
						&lt;ul&gt;
						&lt;li&gt;[[ControlTier|What is ControlTier?]]&lt;/li&gt;
						&lt;li&gt;[[Getting started]]&lt;/li&gt;
						&lt;li&gt;''[[User Guide|more...]]''&lt;/li&gt;
						&lt;/ul&gt;
					&lt;/td&gt;
				&lt;/tr&gt;
			&lt;/table&gt;
		&lt;/td&gt;
		&lt;td width=&quot;33%&quot; valign=&quot;top&quot; style=&quot;style=&quot;padding: 0;border: 1px solid #aaaaaa;&quot;&quot;&gt;
			&lt;div style=&quot;background: #eeeeee;padding:0.2em 0.4em;&quot;&gt;'''Installation'''&lt;/div&gt;
			&lt;table cellpadding=&quot;3&quot; style=&quot;border: 0; margin: 0;&quot;&gt;
				&lt;tr&gt;
					&lt;td valign=&quot;top&quot;&gt;[[Image:Crystal Clear app terminal.png|80x80px|link={{Installation}}]]&lt;/td&gt;
					&lt;td valign=&quot;top&quot;&gt;
						&lt;ul&gt;
						&lt;li&gt;[[Download]]&lt;/li&gt;
						&lt;li&gt;[[Server_startup_and_shutdown|Running the server]]&lt;/li&gt;
						&lt;li&gt; ''[[Installation|more ...]]''&lt;/li&gt;
						&lt;/ul&gt;
					&lt;/td&gt;
				&lt;/tr&gt;
			&lt;/table&gt;
		&lt;/td&gt;
		&lt;td width=&quot;33%&quot; valign=&quot;top&quot; style=&quot;style=&quot;padding: 0;border: 1px solid #aaaaaa;&quot;&quot;&gt;
			&lt;div style=&quot;background: #eeeeee;padding:0.2em 0.4em;&quot;&gt;'''Screencasts &amp; Examples'''&lt;/div&gt;
			&lt;table cellpadding=&quot;3&quot; style=&quot;border: 0; margin: 0;&quot;&gt;
				&lt;tr&gt;
					&lt;td valign=&quot;top&quot;&gt;[[Image:Crystal Clear app tutorials.png|80x80px|link={{Screencasts}}]]&lt;/td&gt;
					&lt;td valign=&quot;top&quot;&gt;
						&lt;ul&gt;
						&lt;li&gt;[[Screencasts|Watch Screencasts]]&lt;/li&gt;
						&lt;li&gt;[[:Category:Scripting_Examples|Scripting Examples]] &lt;/li&gt;
						&lt;li&gt;''[[:Category:Examples|more ...]]''&lt;/li&gt;
						&lt;/ul&gt;
					&lt;/td&gt;
				&lt;/tr&gt;
			&lt;/table&gt;
		&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td colspan=&quot;3&quot; valign=&quot;top&quot;&gt;
			&lt;table border=&quot;0&quot; width=&quot;100%&quot;&gt;
				&lt;tr&gt;
					&lt;td width=&quot;30%&quot; valign=&quot;top&quot; style=&quot;style=&quot;padding: 0;border: 1px solid #aaaaaa;&quot;&quot;&gt;
						&lt;div style=&quot;background: #eeeeee;padding:0.2em 0.4em;&quot;&gt;'''Software Releases'''&lt;/div&gt;
						&lt;ul&gt;
							&lt;li&gt;'''[[ControlTier 3.6.1|3.6.1]]''' &amp;mdash; 2011-09-24&lt;/li&gt;
							&lt;li&gt;'''[[ControlTier 3.6.0|3.6.0]]''' &amp;mdash; 2010-09-15&lt;/li&gt;
						&lt;/ul&gt;
						&lt;table border=&quot;0&quot; cellpadding=&quot;5&quot; width=&quot;50%&quot; style=&quot;background:#dddddd; margin:10px auto 0;&quot;&gt;
							&lt;tr&gt;
								&lt;td&gt;[[Image:Nuvola apps download manager.png|40px]]&lt;/td&gt;
								&lt;td style=&quot;padding-left:0; font-size:130%; font-weight:bold;&quot;&gt;
									[[Download|Download&lt;br/&gt;3.6.1]]	
								&lt;/td&gt;
							&lt;/tr&gt;
						&lt;/table&gt;
						&lt;div style=&quot;margin:0 auto; text-align:center; width:90%; font-size:90%;&quot;&gt;
						''[http://sourceforge.net/projects/controltier/files/ Download other releases]''
						&lt;/div&gt;
					&lt;/td&gt;
					&lt;td width=&quot;70%&quot; valign=&quot;top&quot; style=&quot;style=&quot;padding: 0;border: 1px solid #aaaaaa;&quot;&quot;&gt;
						&lt;div style=&quot;background: #eeeeee;padding:0.2em 0.4em;&quot;&gt;'''Announcements'''&lt;/div&gt;
						&lt;table cellpadding=&quot;3&quot; style=&quot;border: 0; margin: 0;&quot;&gt;
							&lt;tr&gt;
								&lt;td valign=&quot;top&quot;&gt;{{:Announcements}}&lt;/td&gt;
							&lt;/tr&gt;
						&lt;/table&gt;
					&lt;/td&gt;
				&lt;/tr&gt;
			&lt;/table&gt;
		&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;</text>
    </revision>
  </page>
  <page>
    <title>MakeBuilder</title>
    <id>1402</id>
    <revision>
      <id>14150</id>
      <timestamp>2010-11-10T16:00:02Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;ctl-depot&quot; to &quot;ctl-project&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Builder&lt;/categorytree&gt;

The MakeBuilder module models the use of make(8) as the build tool used by the runBuildScript command.

The module includes the means to specify what directory to run the make in,  which make file to use, and what target(s) to invoke. The implementation also establishes the convention of setting the BUILDSTAMP environment variable for use within the make file.

== Limitations ==

{{Caution|On Linux systems make(8) is often not installed by default, and as a result (for Redhat-style distributions, at least) the make RPM package may have to be installed before the runBuildScript command will work.}}

== Examples ==

=== Simple example ===

The MakeBuilder module includes a trivial example:

* Assuming this is the first MakeBuilder you'll setup for your project, boot-strap the module into your project's depot:

&lt;pre&gt;
[anthony@centos52 src]$ ctl -p development -m Managed-Entity -c Install -- -type MakeBuilder -noproperties -nodir
Getting: http://centos52:8080/jackrabbit/repository/controltier/projects/development/publish/modules/MakeBuilder-head.jar
To: /home/anthony/ctier/ctl/var/tmp/downloads/development/MakeBuilder-head.jar
Created dir: /home/anthony/ctier/ctl/projects/development/modules/MakeBuilder
Expanding: /home/anthony/ctier/ctl/var/tmp/downloads/development/MakeBuilder-head.jar into /home/anthony/ctier/ctl/projects/development/modules/MakeBuilder
Attempting to get Builder-head.jar ...
Getting: http://centos52:8080/jackrabbit/repository/controltier/projects/development/publish/modules/Builder-head.jar
To: /home/anthony/ctier/ctl/var/tmp/downloads/development/Builder-head.jar
Created dir: /home/anthony/ctier/ctl/projects/development/modules/Builder
Expanding: /home/anthony/ctier/ctl/var/tmp/downloads/development/Builder-head.jar into /home/anthony/ctier/ctl/projects/development/modules/Builder
Attempting to get Deployment-head.jar ...
Getting: http://centos52:8080/jackrabbit/repository/controltier/projects/development/publish/modules/Deployment-head.jar
To: /home/anthony/ctier/ctl/var/tmp/downloads/development/Deployment-head.jar
Created dir: /home/anthony/ctier/ctl/projects/development/modules/Deployment
Expanding: /home/anthony/ctier/ctl/var/tmp/downloads/development/Deployment-head.jar into /home/anthony/ctier/ctl/projects/development/modules/Deployment
&lt;/pre&gt;

* Use a ProjectBuilder object to load the sample MakeBuilder object:

&lt;pre&gt;
[anthony@centos52 src]$ ctl -p development -t ProjectBuilder -r development -c load-resources -- -filename \${modules.dir}/MakeBuilder/objects/sample.xmlLoading &quot;/home/anthony/ctier/ctl/projects/development/modules/MakeBuilder/objects/sample.xml&quot; ...
1 file(s) have been successfully validated.
Processing /home/anthony/ctier/ctl/projects/development/modules/MakeBuilder/objects/sample.xml to /home/anthony/ctier/ctl/var/tmp/projectxml-1895851418.xml
Loading stylesheet /home/anthony/ctier/ctl/projects/development/modules/ProjectBuilder/lib/load-resources/projectxml/project.xsl
Mapping XML to properties ...
Collecting object attributes ...
Batching object attribute updates ...
Batching resource and referrer updates ...
Executing batch update ...
&lt;/pre&gt;

* Review the sampleMakeBuilder's configuration in Workbench
* Use Workbench to assign the sampleMakeBuilder object as a Deployment of your Node.
* Make sure the object is installed:

&lt;pre&gt;
[anthony@centos52 src]$ ctl-project -p development -a install 
&quot;Install&quot; command running for resource: sampleMakeBuilder[MakeBuilder]
.
.
.
&lt;/pre&gt;

* Run the sample Build command:

&lt;pre&gt;
[anthony@centos52 src]$ ctl -p development -t MakeBuilder -r sampleMakeBuilder -c Build -- -buildstamp 1.2.3
Start: &quot;Run the build cycle.&quot; commands: scmCheckout,setBuildstamp,runBuildScript,repoImport
begin workflow command (1/4) -&gt; &quot;scmCheckout -buildstamp 1.2.3&quot; ...
scmCheckout parameters: {basedir=&quot;/home/anthony/ctier/ctl/projects/development/modules/MakeBuilder/src&quot;, connection=&quot;&quot;, module=&quot;&quot;, label=&quot;&quot;, scmcommand=&quot;checkout&quot; }
[command.timer.Builder.scmCheckout: 0.003 sec]
end workflow command (1/4) -&gt; &quot;scmCheckout -buildstamp 1.2.3&quot;
begin workflow command (2/4) -&gt; &quot;setBuildstamp -buildstamp 1.2.3&quot; ...
Using provided buildstamp &quot;1.2.3&quot;
[command.timer.Builder.setBuildstamp: 0.004 sec]
end workflow command (2/4) -&gt; &quot;setBuildstamp -buildstamp 1.2.3&quot;
begin workflow command (3/4) -&gt; &quot;runBuildScript -buildstamp 1.2.3&quot; ...
runBuildScript parameters: {basedir=&quot;/home/anthony/ctier/ctl/projects/development/modules/MakeBuilder/src&quot;, targetdir=&quot;/home/anthony/ctier/ctl/projects/development/modules/MakeBuilder/src&quot;, buildstamp=&quot;1.2.3&quot;, buildfile=&quot;Makefile&quot;, target=&quot;all&quot; }
rm -f hello hello.o hello-*.tgz
cc -c hello.c
cc -r hello hello.o
tar czvf hello-1.2.3.tgz hello
hello
end workflow command (3/4) -&gt; &quot;runBuildScript -buildstamp 1.2.3&quot;
begin workflow command (4/4) -&gt; &quot;repoImport -buildstamp 1.2.3&quot; ...
Created dir: /home/anthony/ctier/ctl/projects/development/resources/MakeBuilder/sampleMakeBuilder/tmp/Builder-repoImport-20091002105009
Condition: isProcessableWithoutExistingPropfile result: true
opts.propfile set to: autogenerated-builder.properties
Creating new property file: /home/anthony/ctier/ctl/projects/development/resources/MakeBuilder/sampleMakeBuilder/tmp/Builder-repoImport-20091002105009/import-count.properties
processing files in directory: '/home/anthony/ctier/ctl/projects/development/modules/MakeBuilder/src' matching: '(hello)(?:-1.2.3)?\.(tgz)$' ...
processing matched file: hello-1.2.3.tgz
Auto-generated builder properties file created: /home/anthony/ctier/ctl/projects/development/modules/MakeBuilder/src/autogenerated-builder.properties...
Copying 1 file to /home/anthony/ctier/ctl/projects/development/modules/MakeBuilder/src
Updating property file: /home/anthony/ctier/ctl/projects/development/resources/MakeBuilder/sampleMakeBuilder/tmp/Builder-repoImport-20091002105009/import-count.properties
Copying 1 file to /home/anthony/ctier/ctl/projects/development/modules/Builder/commands
Getting: http://centos52:8080/jackrabbit/repository/controltier/projects/development/publish/modules/tgz-head.jar
To: /home/anthony/ctier/ctl/var/tmp/downloads/development/tgz-head.jar
Created dir: /home/anthony/ctier/ctl/projects/development/modules/tgz
Expanding: /home/anthony/ctier/ctl/var/tmp/downloads/development/tgz-head.jar into /home/anthony/ctier/ctl/projects/development/modules/tgz
Attempting to get Package-head.jar ...
Getting: http://centos52:8080/jackrabbit/repository/controltier/projects/development/publish/modules/Package-head.jar
To: /home/anthony/ctier/ctl/var/tmp/downloads/development/Package-head.jar
Created dir: /home/anthony/ctier/ctl/projects/development/modules/Package
Expanding: /home/anthony/ctier/ctl/var/tmp/downloads/development/Package-head.jar into /home/anthony/ctier/ctl/projects/development/modules/Package
uploading file: /home/anthony/ctier/ctl/projects/development/modules/MakeBuilder/src/hello-1.2.3.tgz to: http://centos52:8080/jackrabbit/repository/controltier/projects/pkgs/development/tgz/tgzs/hello-1.2.3.tgz...
Puted 1 file to http://centos52:8080/jackrabbit/repository/controltier/projects/pkgs/development/tgz/tgzs/hello-1.2.3.tgz
Creating new property file: /home/anthony/ctier/ctl/projects/development/resources/MakeBuilder/sampleMakeBuilder/tmp/Builder-repoImport-20091002105009/import-list.properties
Package &quot;hello-1.2.3.tgz (tgz)&quot; already registered. Updating object info.
Deleting: /home/anthony/ctier/ctl/projects/development/modules/Builder/commands/entity1284918046.properties
Current count: 1
Batch request performed successfully.
Current count: 1
[command.timer.Builder.repoImport: 5.021 sec]
end workflow command (4/4) -&gt; &quot;repoImport -buildstamp 1.2.3&quot;
[command.timer: 7.603 sec]
Completed: execution time: 7.603 sec
&lt;/pre&gt;

* You'll find hello-1.2.3.tgz in your package list in Workbench:

&lt;pre&gt;
[anthony@centos52 src]$ ctl -p development -t ProjectBuilder -r development -c find-resources -- -type tgz -name hello-1.2.3.tgz
Created dir: /home/anthony/ctier/ctl/projects/development/resources/ProjectBuilder/development/var/sessions/find-resources
|
|--(tgz) hello-1.2.3.tgz
session data saved: /home/anthony/ctier/ctl/projects/development/resources/ProjectBuilder/development/var/sessions/find-resources/find.session
&lt;/pre&gt;

QED.

{{Manual/navbox}}

[[Category:Builder]]
[[Category:Elements]]</text>
    </revision>
  </page>
  <page>
    <title>Making config changes at deployment time</title>
    <id>412</id>
    <revision>
      <id>14151</id>
      <timestamp>2010-11-10T16:00:03Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;ctl-depot&quot; to &quot;ctl-project&quot;</comment>
      <text xml:space="preserve">[[Image:java_duke_mascot.jpg|32px]] This is part of the DukesBank portion of the [[ControlTier Demo]]

==Overview==
In this demo we are going to deploy and start JBoss and then change a configuration setting to have it run on a different set of ports. 
This kind of configuration change is made possible by two features:
# configuration template files
# configuration setting data

This example also shows the JBossServer type coordinating the configuration cycle that includes the generation of configuration files from templates.

See also:
* [[Dukes Bank Provisioning JBoss instances]] page for information about provisioning an empty JBoss  instance.

==Prerequisites==
This demo assumes you have completed:
* [[Building Dukes Bank Project|Setup for the Dukes Bank Project]]
* [[Dukes Bank Provisioning JBoss instances]] 

==Preparation==

Before getting started confirm the JBossServer and Site objects are deployed to CTL.

Run the [[ctl-project]] install command for the demo project:

&lt;pre&gt;
$ ctl-project -p demo -a install
&quot;Install&quot; command running for resource: (Site) developmentDukesBank
.
.
.
&quot;Install&quot; command running for resource: (JBossServer) developmentDukesBank
.
.
.
&lt;/pre&gt;

Your output should show the Site and JBossServer (among other objects).

Once you have completed the preparation steps, you are now ready to demonstrate the full deploy cycle. 

==Start JBoss==

JBoss should already be running. It's always safe to run the Start command:

&lt;pre&gt;
ctl -p demo -t JBossServer -r developmentDukesBank -c Start
&lt;/pre&gt;
&lt;pre&gt;
begin workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot; ...
JBoss is UP.
end workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot;
&lt;/pre&gt;

==Access JBoss instance==
You should be able to see the management screen of an empty JBoss instance at http://localhost:8180/ (or your server's hostname).

[[image:Jboss_welcome.png]]

==JBoss configuration==

As you noticed in the URL above, you access the JBoss instance via 8180. 

Part of the JBoss configuration is kept in $CTIER_ROOT/demo/elements/development/dukesbank/jboss-4.0.3SP1/server/default/conf

In this directory this port is defined in a JBoss configuration file called &quot;bindings.xml&quot;. Here's a snippet of the bindings.xml file generated for Dukes Bank from a bindings.xml template file.

This snippet shows the &quot;ports-01&quot; server configuration that declares &quot;8180&quot; as the port:

&lt;pre&gt;
&lt;service-bindings&gt;
.
.
.
   &lt;server name=&quot;ports-01&quot;&gt;
.
.
.
        &lt;binding port=&quot;8180&quot;/&gt;
      &lt;/service-config&gt;
.
.
.
   &lt;/server&gt;

&lt;/service-bindings&gt;
&lt;/pre&gt;

This bindings.xml file defines the port ranges but your instance can then choose one of these configurations via the &quot;jboss-service.xml&quot; file.
Here's a snippet of the jboss-service.xml file referring to the &quot;ports-01&quot; server configuration:

&lt;pre&gt;
&lt;server&gt;
.
.
.
   &lt;mbean code=&quot;org.jboss.services.binding.ServiceBindingManager&quot;
     name=&quot;jboss.system:service=ServiceBindingManager&quot;&gt;
     &lt;attribute name=&quot;ServerName&quot;&gt;ports-01&lt;/attribute&gt;
.
.
.
&lt;/server
&lt;/pre&gt;

Both the bindings.xml and jboss-service.xml files are generated from templates. JBossServer has a command called &quot;Configure&quot; that is responsible for the configuration cycle. It is during the configuration cycle that template files are used to generate working files based on input configuration data.

The template that generates the jboss-service.xml uses tokens instead of hard coded values for several parameters. Note the tokens ServerName and StoreURL. The snippet below shows two example uses of these tokens:

&lt;pre&gt;
.
.
.
   &lt;mbean code=&quot;org.jboss.services.binding.ServiceBindingManager&quot;
     name=&quot;jboss.system:service=ServiceBindingManager&quot;&gt;
     &lt;attribute name=&quot;ServerName&quot;&gt;@PortConfig@&lt;/attribute&gt;
     &lt;attribute name=&quot;StoreURL&quot;&gt;${jboss.home.url}/server/@BaseDirName@/conf/bindings.xml&lt;/attribute&gt;
     &lt;attribute name=&quot;StoreFactoryClassName&quot;&gt;
       org.jboss.services.binding.XMLServicesStoreFactory
     &lt;/attribute&gt;
   &lt;/mbean&gt;
.
.
.
&lt;/pre&gt;

During the Configure workflow, these tokens are replaced by the configuration setting data.

==View the settings==

You can examine the JBoss instance's configuration data using the &lt;code&gt;Properties&lt;/code&gt; command:

&lt;pre&gt;
ctl -p demo -t JBossServer -r developmentDukesBank -c Properties
&lt;/pre&gt;
Some of the output is not shown but you can note the JBossPortConfig setting value for the developmentDukesBank instance of JBoss:
&lt;pre&gt;
[MULTI_LINE]
# developmentDukesBank [JBossServer] #

Development environment JBoss server
.
.
.
5.   developmentDukesBank [JBossPortConfig]
    *  doc: &quot;JBoss service bindings port configuration&quot;
    *  encrypted: &quot;false&quot;
    *  name: &quot;developmentDukesBank&quot;
    *  order: &quot;Setting&quot;
    *  settingType: &quot;&quot;
    *  type: &quot;JBossPortConfig&quot;
    *  value: &quot;ports-01&quot;
- - -
[/MULTI_LINE]
&lt;/pre&gt;

==Stop JBoss==
Before making the configuration setting change shutdown the Jboss instance:

&lt;pre&gt;
ctl -p demo -t JBossServer -r developmentDukesBank -c Stop
&lt;/pre&gt;
&lt;pre&gt;
begin workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot; ...
JBoss is not DOWN!
Error handler caught failed command execution: developmentDukesBank[JBossServer]-&gt;assertServiceIsDown. reason: The following error occurred while executing this line:
/Users/alexh/ctier/ctl/projects/demo/modules/JBossServer/commands/assertServiceIsDown.xml:35: shellscript returned: 1
Running handler command: stopServiceWrapper
Workflow beginning. commands: stopService,waitforStopEvent
begin workflow command (1/2) -&gt; &quot;stopService &quot; ...
end workflow command (1/2) -&gt; &quot;stopService &quot;
begin workflow command (2/2) -&gt; &quot;waitforStopEvent &quot; ...
end workflow command (2/2) -&gt; &quot;waitforStopEvent &quot;
[command.timer: 6.923 sec]
Workflow completed. execution time: 6.923 sec
end workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot;
&lt;/pre&gt;

You should no longer be able to see the management screen of the JBoss instance at http://localhost:8180/ (or your server's hostname).

==Modify setting==

As the &lt;code&gt;Properties&lt;/code&gt; command showed, the port binding configuration is maintained as a setting. Go to the JBossServer instance in Workbench to view the setting:

[[image:JBoss-port-resource.png]]

You can edit the Setting by locating it in the &quot;Child Dependencies&quot; view and pressing the edit button on the right of the list.

This brings you to the edit page where you can change the value to &quot;ports-03&quot;:
[[image:JBoss-port-edit.png]]

Save the change.

==Run Deploy==

You have changed the setting to &quot;ports-03&quot; so now run the Deploy command.

The Deploy workflow will take care of installing the packages, regenerate configuration and then restart the server. 

&lt;pre&gt;
ctl -p demo -t JBossServer -r developmentDukesBank -c Deploy
&lt;/pre&gt;

A sampling of the output will show the &quot;Configure&quot; workflow that generates the configuration files:
&lt;pre&gt;
begin workflow command (1/4) -&gt; &quot;Stop &quot; ...
begin workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot; ...
JBoss is DOWN.
.
.
.
begin workflow command (3/4) -&gt; &quot;Configure &quot; ...
Start: &quot;Run the configuration cycle for the deployment.&quot; commands: Docs-Generate
begin workflow command (1/2) -&gt; &quot;Docs-Generate &quot; ...
Copying 3 files to /Users/alexh/ctier/demo/elements/development/dukesbank/jboss-4.0.3SP1/server/default
Copying /Users/alexh/ctier/ctl/projects/demo/modules/JBossServer/templates/jboss-4.0.3SP1/server/default/conf/bindings.xml.template to /Users/alexh/ctier/demo/elements/development/dukesbank/jboss-4.0.3SP1/server/default/conf/bindings.xml
Copying /Users/alexh/ctier/ctl/projects/demo/modules/JBossServer/templates/jboss-4.0.3SP1/server/default/conf/run.conf.template to /Users/alexh/ctier/demo/elements/development/dukesbank/jboss-4.0.3SP1/server/default/conf/run.conf
Copying /Users/alexh/ctier/ctl/projects/demo/modules/JBossServer/templates/jboss-4.0.3SP1/server/default/conf/jboss-service.xml.template to /Users/alexh/ctier/demo/elements/development/dukesbank/jboss-4.0.3SP1/server/default/conf/jboss-service.xml
.
.
.

end workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot;
end workflow command (4/4) -&gt; &quot;Start &quot;

&lt;/pre&gt;

Using the new configuration setting the JBoss server should now be bound to ports defined in &quot;ports-03&quot;.

==Login to Dukes Bank==

The &quot;ports-03&quot; server configuration has the JBoss instance listening on 8380. 

You should be able to see the management screen of an empty JBoss instance at http://localhost:8380/ (or your server's hostname).

==Summary==
In this demo we covered:
* Data driven configuration

Of course, you might want to return JBoss back to the &quot;ports-01&quot; configuration setting.

[[Category:Dukes Bank Demo]]</text>
    </revision>
  </page>
  <page>
    <title>Managed-Entity</title>
    <id>1075</id>
    <redirect />
    <revision>
      <id>10084</id>
      <timestamp>2009-12-11T15:42:25Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[Category:Managed-Entity]]</comment>
      <text xml:space="preserve">#REDIRECT [[:Category:Managed-Entity]]</text>
    </revision>
  </page>
  <page>
    <title>Managed-Entity Design Pattern</title>
    <id>1649</id>
    <redirect />
    <revision>
      <id>11163</id>
      <timestamp>2009-12-14T02:31:36Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>moved [[Managed-Entity Design Pattern]] to [[Managed-Entity design pattern]]</comment>
      <text xml:space="preserve">#REDIRECT [[Managed-Entity design pattern]]</text>
    </revision>
  </page>
  <page>
    <title>Managed-Entity design pattern</title>
    <id>1485</id>
    <revision>
      <id>13630</id>
      <timestamp>2010-11-10T15:01:21Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;entity &quot; to &quot;resource &quot;</comment>
      <text xml:space="preserve">&lt;noinclude&gt;&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Managed-Entity&lt;/categorytree&gt;&lt;/noinclude&gt;
Design pattern underlying the [[Managed-Entity]] type.

==Intent==
Separates several concerns pertaining to managed resources which
converge to comprise distributed integrated software systems.
Systemic  properties such as composition, configuration, measurement
and control  are defined as specific aspects.  

The Managed-Entity design pattern acts as a generic low-level structuring device which can be 
used  as a conceptual framework for solving systemic problems, especially 
those  dealing with maintainability and reconfigurability. 

==Motivation==

Integrated software systems are built using various architectural
styles (e.g., client-server, mediated middleware, etc.). A typical
3-tier  web portal application is built from various architectural
components  (e.g., a web tier, an application tier and a database
tier).  Each tier  is based   on a particular software platform which
has its own performance  limitations   and management capabilities.  Each
tier also has its own  external and internal  configuration requirements.
Depending on the role  of the  component of the architectural tier, the
maturity of the technology  and  the amount of user adoption, or standard
interfaces and protocols,  it may also be possible to  gain a certain degree
of freedom for substituting   similar products from  other
vendors. 

Problems arise during different stages of the development lifecycle
as well as during the evolution of the operations of such integrated
software  systems. During development phases, these systems or subsystems
must be   assembled  for a variety of users - engineers doing unit
development or application   integration, testers performing QA procedures,
system  administrators   providing   system and network environments.
While in  operations,   these systems  must  be scaled according to customer
demand  and this scaling   activity often  requires   re-engineering both
horizontally  (within a tier)   or vertically   (across tiers)   depending
on the end to  end performance  and reliability  requirements. To  enable
any of this activity  a great deal  of knowledge about  the design of  the
infrastructure - design  at various  levels - is required  in order to understand
how to effect change  without  causing wide spread or isolated hard to diagnose
problems.  The  Managed-Entity pattern describes how to
methodically    take into account  the variety of cross cutting concerns
encountered by these   multiple disciplines.    

Figure 1: Example Architectural Layers

[[Image:app-structure-example.png]]

The key to the the Managed-Entity pattern is the separation of composition aspects
from   measurement, configuration and control aspects. This is accomplished by
partitioning          the   problem into separate areas and assigning each
area a set of   abstract       classes.    The Aspect-oriented Managed-Entity
design pattern   acts as   a  framework  for  describing the basic features
and properties   of systems   and  their components. It acts  as a framework
allowing multiple   disciplines   to  solve problems within their  domain
but with results that   can be re-composed     into a consistently unifiable
whole.

The following diagram shows a typical composite structure of recursively
composed Managed-Entity objects: 

Figure 2: Example Composite Structures

[[Image:aome-example-structure.png]]

Each Managed-Entity object represents a different component occupying
a  particular      architectural tier. The Managed-Entity design pattern allows one
to  create&amp;nbsp;   component   hierarchies representing part-whole relationships
and the intra-   and inter-dependencies   between components. These higher-level
design pattern derivatives   can then be used  to represent the structures of -
environments,    integrated   software systems,  web servers, load balancers,
Java beans,   or custom built   in house services.


Managed-Entities can be nested and in this form represent a control hierarchy. 

Figure 3: Control hierarchy

[[Image:nested-managed-entity-collaboration.png|Managed-Entity Collaboration]]

Under this arrangement, a top level Managed-Entity dispatches actions to its child Managed-Entity dependencies and each child Managed-Entity in turn dispatches that same action to their own children. This dispatching pattern is easiest when it is the same command names and arguments passed down the hierarchy (ie, is polymorphic).

==Applicability==
Use the Managed-Entity pattern when

* coordinated change from multiple disciplines is needed    in   shared    environments. 
* structural arrangement is needed 
* as a conceptual framework for basing higher-level  and   more  refined conceptual frameworks

==Structure==

[[Image:controller-pattern.png|thumb|Refactored to Controller pattern]]
[[Image:aome-structure.png]]

==Participants==
===Resource Layer===
The resource layer contains classes which act as basic primitives
for representing properties and features of infrastructure components.

&lt;ul&gt;
 &lt;li&gt;Resource                                    
   &lt;ul&gt;
     &lt;li&gt;defines the root class of the pattern.&lt;/li&gt;
     &lt;li&gt;establishes common addressing protocol.&lt;/li&gt;
   &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;Command                                    
   &lt;ul&gt;
     &lt;li&gt; acts as metadata for describing executable procedures
of Managed-Entity                    &lt;/li&gt;
     &lt;li&gt;declares an interface for executing 
an  operation.                
     &lt;/li&gt;
   &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;Statistic                                 
   &lt;ul&gt;
     &lt;li&gt;represents a set of statistical data and metrics.                
     &lt;/li&gt;
     &lt;li&gt;with an association between this class and
the Resource class, enables a common representation of
tying data to any 
type   of Resource subclass.&lt;/li&gt;
     &lt;li&gt;with a recursive association to Statistic, one can
define hierarchies and/or dependencies of instances of
Statistic subclasses. 
     &lt;/li&gt;
   &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;Setting                                    
   &lt;ul&gt;
     &lt;li&gt;describes a configuration property.&lt;/li&gt;
     &lt;li&gt;used to contain a value and value metadata 
     &lt;/li&gt;
   &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;Assembly                                   
   &lt;ul&gt;
     &lt;li&gt;used to compose objects into nested 
structures   to represent part-whole hierarchies. (uses
Composite  pattern) 
     &lt;/li&gt;
     &lt;li&gt;provides protocol to add/remove/list
resources.&amp;nbsp;&amp;nbsp;&lt;/li&gt;
     &lt;li&gt;specifies a range of allowable Resource subclasses.&lt;/li&gt;
     &lt;li&gt;stores child resource subclass components
     &lt;/li&gt;
   &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;

===Managed-resource Layer===
The Managed-resource layer inherits the Resource layer to define
manageability and external dependencies of infrastructure components. 

====Managed-Entity====
   &lt;ul&gt;
     &lt;li&gt; provides interfaces to manage resource
assemblies.&amp;nbsp;&lt;/li&gt;
     &lt;li&gt;declares an interface for accessing and managing its child
components&lt;/li&gt;
     &lt;li&gt;defines an interface for accessing a component's parent
in the recursive structure.
     &lt;/li&gt;
     &lt;li&gt; maintains a set of references to      
&lt;ul&gt;
         &lt;li&gt; Commands represent operations on the Resource  &lt;/li&gt;
         &lt;li&gt; Settings acting as configuration properties
         &lt;/li&gt;
         &lt;li&gt; Statistics generated during the execution 
of  a  command                      &lt;/li&gt;
&lt;/ul&gt;
     &lt;/li&gt;
   &lt;/ul&gt;

====Controller====
   &lt;ul&gt;
     &lt;li&gt;externalizes the implementation for 
managing   a Managed-resource 
     &lt;/li&gt;
     &lt;li&gt;a delegate to Managed-resource inheriting 
&amp;nbsp;its interfaces and data.&lt;/li&gt;
     &lt;li&gt;Optional if no software is being based on the model.
     &lt;/li&gt;
   &lt;/ul&gt;

==Collaborations==
&lt;ul&gt;
&lt;li&gt;A Controller is the primary interface for management clients. Clients can
configure a Managed-Entity with Resource objects and execute
commands.
&lt;/li&gt;        
&lt;/ul&gt;

==Consequences==
&lt;p&gt; The Managed-Entity design pattern has the following benefits and drawbacks:&lt;/p&gt;            
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;The Managed-Entity localizes and partitions structural and control 
aspects&lt;/em&gt;. 
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Resource objects can be shared among Assemblies.&lt;/em&gt; 
&lt;/li&gt;                
&lt;/ol&gt;            

==Related Patterns==

* [http://c2.com/cgi/wiki?CompositePattern Go4 Composite] (Assembly)
* [http://c2.com/cgi/wiki?DecoratorPattern Go4 Decorator] (Controller)
* [[Deployment Design Pattern]]

Author: Alex Honor
Date: Copyright 2002-2009

[[Category:Managed-Entity]]</text>
    </revision>
  </page>
  <page>
    <title>Managing users</title>
    <id>1476</id>
    <revision>
      <id>15152</id>
      <timestamp>2011-02-19T01:00:13Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <comment>/* The default user */ add note about server being a client</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Configuration&lt;/categorytree&gt;
These instructions explain how to manage user credentials for the [[ControlTier server]] [[:Category:webapps|webapps]] in Jetty's &lt;code&gt;realm.properties&lt;/code&gt; file.
==realm.properties==
The default [[ControlTier server]] installation handles user authentication via Jetty, which in turn is configured to pull its user authentication from the $JETTY_HOME/etc/realm.properties file. $JETTY_HOME is usually at &lt;code&gt;$CTIER_ROOT/pkgs/jetty-x.y.z&lt;/code&gt;. This file is created at the time that you install the server, and the out-of-the-box usernames and passwords can be adjusted through the default.xml file or appropriate command-line arguments.

Assuming you use the defaults, your realm.properties file will probably look something like this:
&lt;pre&gt;
jetty: MD5:164c884306627e17250af12c89345d44,user
admin: CRYPT:cxekz..ry.1Ns,server-administrator,content-administrator,admin
other: OBF:1vmk1x261d9r1r1c1dmq
plain: plain
user: password

# This entry is for digest auth.  The credential is a MD5 hash of username:realmname:password
digest: MD5:6e110442ad67abfbc485dc2cb784e217
#
# This sets the default user accounts for the ControlTier apps
#
default:default,user,admin,architect,deploy,build
admin:admin,user,admin,architect,deploy,build
deploy:deploy,user,deploy
build:build,user,build
&lt;/pre&gt;

==The default user==
The ''default'' user in particular is used by the various applications to communicate with each other, and the values are hardcoded into the applications at install time. '''You need to be very careful if you change the credentials.''' To change the default credentials, they need to be updated in all of these locations:
* On the server: $JETTY_HOME/etc/realm.properties (as above) and $JETTY_HOME/webapps/itnav/WEB-​INF/classes/runtime.properties (properties dav.user and dav.password)
* On all clients (including the server, which is also a client): $CTL_BASE/etc/framework.properties (properties framework.server.username, framework.server.password, framework.webdav.username, framework.webdav.password)
If you do not, you'll run into &quot;HTTP Authorization failure&quot; and &quot;403 Forbidden&quot; errors.

Here is a bash shell script to change the password on the client:

'''File listing: update-client-user-pass.sh'''
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
# Update user name and password on clients
# Moses Lei, ControlTier project
# Apache License, Version 2.0

# N.B. Depends on GNU sed!

if [ ! $2 ]; then
  echo $(basename $0): Error: No username or password specified &gt;&amp;2
  echo &quot;$(basename $0): Usage: $(basename $0) &lt;username&gt; &lt;password&gt;&quot; &gt;&amp;2
  exit 1
fi 
sed -i.$(date +%Y%m%d) -re &quot;s/(framework\.(server|webdav)\.username = ).*$/\1$1/g&quot; -e &quot;s/(framework\.(server|webdav)\.password = ).*$/\1$2/g&quot; $CTL_BASE/etc/framework.properties

&lt;/syntaxhighlight&gt;

You can run this script to a large number of boxes using ctl-exec, for example:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl-exec -p project -I regex-of-nodes-to-change -s update-client-user-pass.sh -- username password
&lt;/syntaxhighlight&gt;

==Adding additional users==
You may wish to have additional users with various privileges rather than giving out role accounts to groups.  You may also want to avoid having the passwords in plaintext within the configuration file.  

To accomplish this, you'll need a properly hashed or encrypted password to use in the config.  On the control tier server, move into the directory that contains your jetty installation and pass the username and password to the jetty Password utility.  In this example, we'll setup a new user named &quot;jsmith&quot;, with a password of &quot;mypass&quot;:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ cd $JETTY_HOME
$ java -cp lib/jetty-6.1.14.jar:lib/jetty-util-6.1.14.jar org.mortbay.jetty.security.Password jsmith mypass
OBF:1xfd1zt11uha1ugg1zsp1xfp
MD5:a029d0df84eb5549c641e04a9ef389e5
CRYPT:jsnDAc2Xk4W4o
&lt;/syntaxhighlight&gt;

Then add this to the etc/realm.properties file with a line like so:
&lt;pre&gt;
jsmith: MD5:a029d0df84eb5549c641e04a9ef389e5,user,build,deploy
&lt;/pre&gt;

Then restart ctier to ensure jetty picks up the change and you're done.

&lt;noinclude&gt;{{Installation/navbox}}&lt;/noinclude&gt;

[[Category:Authorization]]
[[Category:Users]]</text>
    </revision>
  </page>
  <page>
    <title>MapperInput Type Reference</title>
    <id>157</id>
    <revision>
      <id>11433</id>
      <timestamp>2009-12-14T23:35:04Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Types&lt;/categorytree&gt;
=Description=
      &lt;p&gt;
	The mapperinput type specifies an input set for an apply-macro task to iterate against.
      &lt;/p&gt;

=mapperinput=
      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
        &lt;/tr&gt;
	&lt;tr&gt;
          &lt;td&gt;id&lt;/td&gt;&lt;td&gt;the id of this mapperinput element&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/table&gt;

=Parameters specified as nested elements=

      &lt;p&gt;&lt;strong&gt;forall&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
        One mandatory [[ForAll Type Reference|forall]] element.
      &lt;/p&gt;

=Examples=
     &lt;p&gt;
       see [[ApplyMacro Task Reference|apply-macro]] task.
      &lt;/p&gt;
&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Command Dispatcher Ant Types]]
[[Category:ApplyMacro Ant Type]]</text>
    </revision>
  </page>
  <page>
    <title>Maven Plugin</title>
    <id>218</id>
    <revision>
      <id>8397</id>
      <timestamp>2009-09-26T02:45:11Z</timestamp>
      <contributor>
        <username>Gschueler</username>
        <id>8</id>
      </contributor>
      <comment>Updated for maven-ctl-plugin 1.1</comment>
      <text xml:space="preserve">This section describes how to use the maven-ctl-plugin to invoke CTL commands from a Maven 2.0.x pom.

For a  use-case, see [[maven build-library|Using Maven to Build a Library Jar]].

==Plugin Details==

&lt;table border=&quot;1&quot;&gt;
  &lt;tr&gt;&lt;th&gt;groupId&lt;/th&gt;&lt;th&gt;artifactId&lt;/th&gt;&lt;th&gt;latest version&lt;/th&gt;&lt;/tr&gt;
  &lt;tr&gt;
      &lt;td&gt;com.controltier.ctl.maven.mojo&lt;/td&gt;
      &lt;td&gt;maven-ctl-plugin&lt;/td&gt;
      &lt;td&gt;1.1&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

==Maven Repository==

The maven-ctl-plugin is available from the ControlTier maven repository at this address: 

    http://controltier.sourceforge.net/maven2

==Usage==


The maven-ctl-plugin is a Maven 2 plugin that can be used to execute any CTL command during a maven build phase. 
The plugin should be configured in your pom.xml to attach to a build phase, and to specify the appropriate parameters.
The goal specified should be &quot;command&quot;:

Example pom.xml:

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;groupId&gt;com.mycompany&lt;/groupId&gt;
  &lt;artifactId&gt;myproject&lt;/artifactId&gt;
  &lt;packaging&gt;jar&lt;/packaging&gt;
  &lt;version&gt;1.0&lt;/version&gt;
  ...
  &lt;build&gt;
    ...
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;com.controltier.ctl.maven.mojo&lt;/groupId&gt;
            &lt;artifactId&gt;maven-ctl-plugin&lt;/artifactId&gt;
            &lt;version&gt;1.1&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;phase&gt;generate-resources&lt;/phase&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;command&lt;/goal&gt;
                    &lt;/goals&gt;
                    &lt;configuration&gt;
                        &lt;ctlBase&gt;${CTL_BASE}&lt;/ctlBase&gt;
                        &lt;depot&gt;DEPOT&lt;/depot&gt;
                        &lt;!-- Either the module parameter is required --&gt;
                        &lt;module&gt;MODULE&lt;/module&gt;
                        &lt;!-- Or both the type and name parameters are required --&gt;
                        &lt;type&gt;TYPE&lt;/type&gt;
                        &lt;name&gt;NAME&lt;/name&gt;
                        &lt;command&gt;COMMAND&lt;/command&gt;
                        &lt;!-- Optional Arguments --&gt;
                        &lt;!--
                        &lt;args&gt;-arg1 value -arg2 value2&lt;/args&gt;
                        --&gt;
                        &lt;/configuration&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;
&lt;/syntaxhighlight&gt;
      &lt;p&gt;
          The available parameters are listed below. 
      &lt;/p&gt;
      &lt;table border=&quot;1&quot;&gt;
        &lt;tr&gt;
            &lt;th&gt;Parameter name&lt;/th&gt;
            &lt;th&gt;Description&lt;/th&gt;
            &lt;th&gt;Default/Expression&lt;/th&gt;
            &lt;th&gt;Required&lt;/th&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;ctlBase&lt;/td&gt;
            &lt;td&gt;The CTL_BASE directory path for your installation of CTL.&lt;/td&gt;
            &lt;td&gt;${CTL_BASE} (the environment variable)&lt;/td&gt;
            &lt;td&gt;Yes&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;depot&lt;/td&gt;
            &lt;td&gt;Name of the depot&lt;/td&gt;
            &lt;td&gt;${context.depot}&lt;/td&gt;
            &lt;td&gt;Yes&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;type&lt;/td&gt;
            &lt;td&gt;Name of the Type&lt;/td&gt;
            &lt;td&gt;${context.type}&lt;/td&gt;
            &lt;td&gt;''No *''&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;name&lt;/td&gt;
            &lt;td&gt;Name of the Object&lt;/td&gt;
            &lt;td&gt;${context.name}&lt;/td&gt;
            &lt;td&gt;''No *''&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;module&lt;/td&gt;
            &lt;td&gt;Name of the Module&lt;/td&gt;
            &lt;td&gt;${context.module}&lt;/td&gt;
            &lt;td&gt;''No *''&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;command&lt;/td&gt;
            &lt;td&gt;Name of the Command to invoke on the object or module&lt;/td&gt;
            &lt;td&gt;${ctl.command}&lt;/td&gt;
            &lt;td&gt;Yes&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;args&lt;/td&gt;
            &lt;td&gt;Any additional commandline arguments to pass to the command, as a single string.&lt;/td&gt;
            &lt;td&gt;${ctl.args}&lt;/td&gt;
            &lt;td&gt;No&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;loglevel&lt;/td&gt;
            &lt;td&gt;Loglevel to use: debug, verbose, info, warning, or error&lt;/td&gt;
            &lt;td&gt;warning&lt;/td&gt;
            &lt;td&gt;No&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;environment&lt;/td&gt;
            &lt;td&gt;Map of environment variables to pass to the executed CTL command. [See Windows Note]&lt;/td&gt;
            &lt;td&gt;&lt;/td&gt;
            &lt;td&gt;No&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/table&gt;

:''* Note'': Either the &lt;code&gt;&amp;lt;module&amp;gt;&lt;/code&gt; parameter, or both &lt;code&gt;&amp;lt;type&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; are required.

:Windows Note: When using the maven-ctl-plugin in a Windows operating system, certain environment variables have to be passed through from Maven to the CTL command.  These must be explicitly done in the configuration of the maven-ctl-plugin.  See [[#Windows|Windows]] below.

==Invoking via the command-line==

          &lt;p&gt;The CTL plugin doesn't have to be attached to a specific build-phase, and can be invoked using the &lt;code&gt;ctl:command&lt;/code&gt; goal on the
              maven command-line. For example:&lt;/p&gt;
          &lt;pre&gt;
 mvn ctl:command
          &lt;/pre&gt;
          &lt;p&gt;
              This will invoke the plugin with the configuration specified in the POM that is directly below the &lt;code&gt;&amp;lt;plugin&amp;gt;&lt;/code&gt; element:
          &lt;/p&gt;
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
    &lt;groupId&gt;com.mycompany&lt;/groupId&gt;
    &lt;artifactId&gt;myproject&lt;/artifactId&gt;
    &lt;packaging&gt;jar&lt;/packaging&gt;
    &lt;version&gt;1.0&lt;/version&gt;
    ...
    &lt;build&gt;
        ...
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.controltier.ctl.maven.mojo&lt;/groupId&gt;
                &lt;artifactId&gt;maven-ctl-plugin&lt;/artifactId&gt;
                &lt;version&gt;1.1&lt;/version&gt;
                &lt;configuration&gt;
                    &lt;ctlBase&gt;${CTL_BASE}&lt;/ctlBase&gt;
                    &lt;depot&gt;DEPOT&lt;/depot&gt;
                    &lt;!-- Either the module parameter is required --&gt;
                    &lt;module&gt;MODULE&lt;/module&gt;
                    &lt;!-- Or both the type and name parameters are required --&gt;
                    &lt;type&gt;TYPE&lt;/type&gt;
                    &lt;name&gt;NAME&lt;/name&gt;
                    &lt;command&gt;COMMAND&lt;/command&gt;
                    &lt;!-- Optional Arguments --&gt;
                    &lt;!--
                    &lt;args&gt;-arg1 value -arg2 value2&lt;/args&gt;
                    --&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;
&lt;/syntaxhighlight&gt;
      &lt;p&gt;
          Note that in this example the &lt;code&gt;&amp;lt;configuration&amp;gt;&lt;/code&gt; is not wrapped within &lt;code&gt;&amp;lt;executions&amp;gt; &amp;lt;execution&amp;gt; ... &amp;lt;/execution&amp;gt; &amp;lt;/executions&amp;gt;&lt;/code&gt;.
      &lt;/p&gt;
      &lt;p&gt;
          If you want to specify the configuration elements manually, either via command-line flags or via properties passed into the maven execution (for example within a Cruise Control config file), use the property name listed as &lt;code&gt;${property}&lt;/code&gt; in the table of parameters above:
      &lt;/p&gt;
          &lt;pre&gt;
mvn ctl:command -DCTL_BASE=/some/ctl/base -Dcontext.depot=MyDepot -Dcontext.type=MyBuilder \
-Dcontext.name=anObject -Dctl.command=repoImport -Dctl.args=&quot;-some args&quot;
          &lt;/pre&gt;

==Installing the Plugin==

          &lt;p&gt;
              To install the plugin, configure your maven settings.xml file to contain a &amp;lt;pluginRepository&amp;gt; definition as shown:
          &lt;/p&gt;
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;settings xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; 
          xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; 
          xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;&gt;
  &lt;profiles&gt;
    &lt;profile&gt;
      &lt;id&gt;default&lt;/id&gt;
      &lt;activation&gt;
        &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;
      &lt;/activation&gt;
      &lt;pluginRepositories&gt;
        &lt;pluginRepository&gt;
          &lt;id&gt;ctier&lt;/id&gt;
          &lt;name&gt;ControlTier Repository&lt;/name&gt;
          &lt;releases&gt;
            &lt;enabled&gt;true&lt;/enabled&gt;
            &lt;updatePolicy&gt;always&lt;/updatePolicy&gt;
            &lt;checksumPolicy&gt;fail&lt;/checksumPolicy&gt;
          &lt;/releases&gt;
          &lt;snapshots&gt;
            &lt;enabled&gt;true&lt;/enabled&gt;
            &lt;updatePolicy&gt;daily&lt;/updatePolicy&gt;
            &lt;checksumPolicy&gt;warn&lt;/checksumPolicy&gt;
          &lt;/snapshots&gt;
          &lt;url&gt;http://controltier.sourceforge.net/maven2&lt;/url&gt;
          &lt;layout&gt;default&lt;/layout&gt;
        &lt;/pluginRepository&gt;
      &lt;/pluginRepositories&gt;
    &lt;/profile&gt;
  &lt;/profiles&gt;
&lt;/settings&gt;
&lt;/syntaxhighlight&gt;
          &lt;p&gt;
              Configure pom.xml as described above.  Now you can execute the Maven command to perform a build phase, and the plugin will be downloaded and installed to your local repository.
          &lt;/p&gt;
       
==Install Manually==

          &lt;p&gt;
              Alternatively, you may download the latest maven-ctl-plugin.jar from the Repository URL listed above and install it manually.
              Use the groupId, artifactId and version shown below.
              (See [http://maven.apache.org/guides/mini/guide-3rd-party-jars-local.html Maven - Guide to installing 3rd party JARs].)
          &lt;/p&gt;
          &lt;pre&gt;
mvn install:install-file -Dfile=&amp;lt;path-to-file&amp;gt; -DgroupId=com.controltier.ctl.maven.mojo \
    -DartifactId=maven-ctl-plugin -Dversion=1.1 -Dpackaging=jar
          &lt;/pre&gt;

==Windows==

      &lt;p&gt;
          Windows requires that the SystemRoot and TEMP environment variables be set when executing the CTL command.  In order to pass the 
          values used at Maven build time to the CTL command, these need to be added in an &amp;lt;environment&amp;gt; configuration element.  Using the values ${SystemRoot} and ${TEMP} will pass the current values from the environment.
      &lt;/p&gt;
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;configuration&gt;
    ...
    &lt;environment&gt;
       &lt;TEMP&gt;${TEMP}&lt;/TEMP&gt;
       &lt;SystemRoot&gt;${SystemRoot}&lt;/SystemRoot&gt;
    &lt;/environment&gt;
&lt;/configuration&gt;
&lt;/syntaxhighlight&gt;

==Using with ProjectBuilder build-library command==
      &lt;p&gt;
          See the [[Maven build-library]] use-case.
      &lt;/p&gt;

[[Category:Apache Maven]]</text>
    </revision>
  </page>
  <page>
    <title>Maven build-library</title>
    <id>219</id>
    <revision>
      <id>13894</id>
      <timestamp>2010-11-10T15:22:10Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot; -o &quot; to &quot; -r &quot;</comment>
      <text xml:space="preserve">=Overview=

        &lt;p&gt;This document describes how to use the CTL maven plugin and the ControlTier Library Jar maven archetype to build a ControlTier library jar using maven.&lt;/p&gt;
        
=Prerequisites=

            &lt;ul&gt;
                &lt;li&gt;ControlTier server and CTL client.  &lt;p&gt;The CTL base directory should be set as an environment variable named $CTL_BASE. (if not, see [[#Notes]] )&lt;/p&gt; &lt;/li&gt;
                &lt;li&gt;A project should be defined in the ControlTier server.  The name of this project is referred to as the $DEPOT in this document. &lt;/li&gt;
                &lt;li&gt;You should have a name for your  ControlTier Library, referred to as $NAME. &lt;/li&gt;
                &lt;li&gt;If you have existing library sources, you can skip to the [[Using+existing+sources]] section. &lt;/li&gt;
            &lt;/ul&gt;

=How the maven-ctl-plugin works=

            &lt;p&gt; The maven-ctl-plugin allows you to invoke any CTL command from any maven build phase. The plugin must be configured in the pom.xml to attach to a build phase, and to specify the required parameters for executing an CTL command. The parameters required are: ctlBase directory, depot name, type name, resource name, command name, and any option command arguments.&lt;/p&gt;
            &lt;p&gt;See the Document &lt;link href=&quot;maven.html&quot;&gt;Maven Integration&lt;/link&gt; for more detail about the maven-ctl-plugin.&lt;/p&gt;
            &lt;p&gt;Using the maven-ctl-plugin, we can use ProjectBuilder's build-library command to package the modules located in a source directory into their respective jar files, and then we can use Maven's built-in jar plugin create the final library jar with the necessary Manifest components.&lt;/p&gt;

            &lt;p&gt;The pom.xml necessary for doing this can be created for you using the Maven Archetype plugin, and the ctier-library-jar archetype. Then the only necessary actions are to using the archetype:create goal of the Archetype plugin, and to register a ProjectBuilder object within ControlTier to build the module jars.&lt;/p&gt;

=Plugin Details=

      &lt;table border=&quot;1&quot;&gt;
          &lt;tr&gt;&lt;th&gt;groupId&lt;/th&gt;&lt;th&gt;artifactId&lt;/th&gt;&lt;th&gt;latest version&lt;/th&gt;&lt;/tr&gt;
          &lt;tr&gt;
              &lt;td&gt;com.controltier&lt;/td&gt;
              &lt;td&gt;ctier-library-jar&lt;/td&gt;
              &lt;td&gt;1.0-SNAPSHOT&lt;/td&gt;
          &lt;/tr&gt;
      &lt;/table&gt;
      &lt;p&gt;
          See &lt;link href=&quot;maven.html#Maven+Repository&quot;&gt;Maven Repository&lt;/link&gt; for the ControlTier maven repository URL.
      &lt;/p&gt;

=Creating a new Project=

==archetype:create==
                    &lt;p&gt;Run the maven archetype:create command to create a project and pom.xml you can use to build your library jar:&lt;/p&gt;
                    &lt;pre&gt;
set GROUPID=com.mycompany
set VERSION=1.0-SNAPSHOT
mvn archetype:create -DarchetypeGroupId=com.controltier -DarchetypeArtifactId=ctier-library-jar \
    -DarchetypeVersion=1.0-SNAPSHOT -DgroupId=$GROUPID  -DartifactId=$NAME \
    -Dversion=$VERSION -DremoteRepositories=http://open.controltier.org/repo
&lt;/pre&gt;
&lt;p&gt;The usual initial version is &quot;1.0-SNAPSHOT&quot;. Specify your groupId similar to a Java package, e.g. &quot;com.mycompany&quot;.&lt;/p&gt;

&lt;p&gt;This command will create a a directory named $NAME, and a file $NAME/pom.xml file for you.&lt;/p&gt;

'''Note''':
    &lt;p&gt;the &quot;-DremoteRepositories=...&quot; is needed to install the ctier-library-jar archetype from the ControlTier maven repository the first time. Subsequent invocations will not need the &quot;-DremoteRepositories&quot; section.&lt;/p&gt;

==ProjectBuilder Register==

    &lt;p&gt;Create a ProjectBuilder object to manage your module code:&lt;/p&gt;
    &lt;pre&gt;
cd $NAME
set BASE=`pwd`
ctl -p $DEPOT -t ProjectBuilder -r $NAME -c Register -- -basedir $BASE/src -installroot $BASE/target -install
&lt;/pre&gt;
&lt;p&gt;
This will create the ProjectBuilder object, and deploy it locally.
&lt;/p&gt;
&lt;p&gt;
Create the directory for your modules:
&lt;/p&gt;
&lt;pre&gt;
mkdir $BASE/src/modules
&lt;/pre&gt;
&lt;p&gt;
Now you can develop modules under the structure $BASE/src/modules/&amp;lt;modulename&amp;gt;/type.xml.
&lt;/p&gt;
==Build the library==
    &lt;p&gt;
To build the library jar, first edit the pom.xml.
&lt;/p&gt;

&lt;p&gt;Replace the &quot;${context.depot}&quot; with $DEPOT defined above. (If necessary, replace the &amp;lt;name&amp;gt;${project.artifactId}&amp;lt;/name&amp;gt; parameter in the configuration of the maven-ctl-plugin to correspond to $NAME, if it is not equivalent to your maven project's artifactId.).&lt;/p&gt;
&lt;p&gt;
Execute the package command:
&lt;/p&gt;

&lt;pre&gt;mvn package&lt;/pre&gt;

'''Note:'''
&lt;p&gt;You can also define the context.depot variable on the commandline, by executing &quot;mvn package -Dcontext.depot=$DEPOT&quot;.&lt;/p&gt;

=Using existing sources=

    &lt;p&gt;This example will show how to use existing module sources in a library with a maven build process. Note: if you already have a ProjectBuilder object used to build your library jar, you can skip the ProjectBuilder Register command section. Just follow the Archetype Create steps, and configure the maven-ctl-plugin section of your pom.xml to use the correct object. &lt;/p&gt;

==ProjectBuilder Register==

        &lt;p&gt;First of all, make sure your sources exist in a directory named the same as the the maven artifactId you are about to generate. For example, if you will call your library &quot;mysystem&quot;, put the sources under a directory named &quot;mysystem&quot;, as so:&lt;/p&gt;

        &lt;pre&gt;mysystem/src/modules/&lt;em&gt;&amp;lt;moduleName&amp;gt;&lt;/em&gt;/type.xml&lt;/pre&gt;

        &lt;p&gt;Create a ProjectBuilder object to manage the library:&lt;/p&gt;
        &lt;pre&gt;
cd $NAME
ctl -p $DEPOT -t ProjectBuilder -r $NAME -c Register -- -basedir `pwd`/src -installroot `pwd`/target -install
&lt;/pre&gt;

&lt;p&gt;The -basedir is important, since it specifies which directory contains the &quot;modules&quot; directory. Make sure this is correct. You can use any name for &quot;-o&quot; (resource name), however it is convenient if the resource name is the same as the maven artifactId.&lt;/p&gt;

==Archetype Create==
    &lt;p&gt; Change to the directory that contains your library project.&lt;/p&gt;
    &lt;pre&gt;
cd ..
&lt;/pre&gt;

&lt;p&gt;Run the archetype:create command, and specify a groupId, artifactId, and version:&lt;/p&gt;
&lt;pre&gt;
set GROUPID=com.mycompany
set VERSION=1.0-SNAPSHOT
mvn archetype:create -DarchetypeGroupId=com.controltier -DarchetypeArtifactId=ctier-library-jar \
    -DarchetypeVersion=1.0-SNAPSHOT -DgroupId=$GROUPID -DartifactId=$NAME -Dversion=$VERSION \
    -DremoteRepositories=http://open.controltier.org/repo
&lt;/pre&gt;

&lt;p&gt;This will create &quot;$NAME/pom.xml&quot;.&lt;/p&gt;

&lt;p&gt;The pom.xml will now need to be edited:&lt;/p&gt;

&lt;p&gt;Replace the &quot;${context.depot}&quot; with $DEPOT defined above. (If necessary, replace the &amp;lt;name&amp;gt;${project.artifactId}&amp;lt;/name&amp;gt; parameter in the configuration of the maven-ctl-plugin to correspond to $NAME, if it is not equivalent to your maven project's artifactId.)&lt;/p&gt;

&lt;p&gt;you can now execute the following to create the library jar file: &lt;/p&gt;
&lt;pre&gt;
mvn package
&lt;/pre&gt;

=Notes=

=Repository Access=

        &lt;p&gt;To use the controltier repository, add a &quot;pluginRepository&quot; that has the URL http://open.controltier.org/repo to your settings.xml document (~/.m2/settings.xml).&lt;/p&gt;
        &lt;pre&gt;
&amp;lt;settings xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;
      xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
        xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 
                              http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;&amp;gt;
  &amp;lt;profiles&amp;gt;
    &amp;lt;profile&amp;gt;
      &amp;lt;id&amp;gt;default&amp;lt;/id&amp;gt;
      &amp;lt;activation&amp;gt;
        &amp;lt;activeByDefault&amp;gt;true&amp;lt;/activeByDefault&amp;gt;
      &amp;lt;/activation&amp;gt;
      &amp;lt;pluginRepositories&amp;gt;
        &amp;lt;pluginRepository&amp;gt;
          &amp;lt;id&amp;gt;openctier&amp;lt;/id&amp;gt;
          &amp;lt;name&amp;gt;ControlTier Repository&amp;lt;/name&amp;gt;
          &amp;lt;releases&amp;gt;
            &amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt;
            &amp;lt;updatePolicy&amp;gt;always&amp;lt;/updatePolicy&amp;gt;
            &amp;lt;checksumPolicy&amp;gt;fail&amp;lt;/checksumPolicy&amp;gt;
          &amp;lt;/releases&amp;gt;
          &amp;lt;snapshots&amp;gt;
            &amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt;
            &amp;lt;updatePolicy&amp;gt;daily&amp;lt;/updatePolicy&amp;gt;
            &amp;lt;checksumPolicy&amp;gt;warn&amp;lt;/checksumPolicy&amp;gt;
          &amp;lt;/snapshots&amp;gt;
          &amp;lt;url&amp;gt;http://open.controltier.org/repo&amp;lt;/url&amp;gt;
          &amp;lt;layout&amp;gt;default&amp;lt;/layout&amp;gt;
        &amp;lt;/pluginRepository&amp;gt;
      &amp;lt;/pluginRepositories&amp;gt;
    &amp;lt;/profile&amp;gt;
  &amp;lt;/profiles&amp;gt;
&amp;lt;/settings&amp;gt; 
        &lt;/pre&gt;

==Installing the ctier-library-jar archetype==
    &lt;p&gt; The first time you want to use the archetype, you must specify a remote repository to download it from, by adding &quot;-DremoteRepositories=http://open.controltier.org/repo&quot; to the &quot;mvn archetype:create&quot; command.&lt;/p&gt;

[[Category:Apache Maven]]</text>
    </revision>
  </page>
  <page>
    <title>Maven build-library.html</title>
    <id>220</id>
    <redirect />
    <revision>
      <id>1094</id>
      <timestamp>2008-12-30T18:57:42Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>[[Maven build-library.html]] moved to [[Maven build-library]]</comment>
      <text xml:space="preserve">#REDIRECT [[Maven build-library]]</text>
    </revision>
  </page>
  <page>
    <title>Mediator</title>
    <id>1076</id>
    <redirect />
    <revision>
      <id>10086</id>
      <timestamp>2009-12-11T15:43:26Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[Category:Mediator]]</comment>
      <text xml:space="preserve">#REDIRECT [[:Category:Mediator]]</text>
    </revision>
  </page>
  <page>
    <title>Mediator Concepts</title>
    <id>1643</id>
    <redirect />
    <revision>
      <id>11150</id>
      <timestamp>2009-12-14T02:27:35Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>moved [[Mediator Concepts]] to [[Mediator design pattern]]</comment>
      <text xml:space="preserve">#REDIRECT [[Mediator design pattern]]</text>
    </revision>
  </page>
  <page>
    <title>Mediator Settings and Attributes</title>
    <id>742</id>
    <revision>
      <id>10270</id>
      <timestamp>2009-12-11T18:55:40Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;noinclude&gt;&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Mediator&lt;/categorytree&gt;&lt;/noinclude&gt;
= Overview =

This document describes the predefined Setting subtypes and their declared Attribute names that are associated with the [[Core Type Guide#Mediator|Mediator]] type.

Complete reference documentation for these related types are here:

* [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Mediator.html#related_types Mediator Reference - related types]

= Settings =

{| border=&quot;1px solid #aaa&quot; cellpadding=&quot;5&quot; cellspacing=&quot;0&quot;
    ! Setting !! attribute !! purpose
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Mediator.html#type_DispatchBaseType DispatchBaseType] || ''dispatchBaseType'' || A setting to used to default dispatchCmd option: -resourceorder
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Mediator.html#type_DispatchChangeDependencies DispatchChangeDependencies] || ''dispatchChangeDependencies'' || A setting to determine whether Change-Dependencies is run locally or dispatched to resources
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Mediator.html#type_DispatchExecutionStrategy DispatchExecutionStrategy] || ''dispatchExecutionStrategy'' || A setting to used to define DispatchCommand option: -strategy
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Mediator.html#type_DispatchOptions DispatchOptions] || ''dispatchOptions'' || A setting to used to default dispatchCmd option: -dispatchOptions
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Mediator.html#type_DispatchResourceName DispatchResourceName] || ''dispatchResourceName'' || A setting to used to default dispatchCmd option: -resourcename
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Mediator.html#type_DispatchResourceType DispatchResourceType] || ''dispatchResourceType'' || A setting to used to default dispatchCmd option: -resourcetype
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Mediator.html#type_DispatchSortOrder DispatchSortOrder] || ''dispatchSortOrder'' || A setting to used to default dispatchCmd option: -sortorder
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Mediator.html#type_DispatchThreadCount DispatchThreadCount] || ''threadCount'' || A setting to used to default dispatchCmd option: -threadcount
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Mediator.html#type_MediatorNotificationList MediatorNotificationList] || ''mediatorNotificationList'' || Comma-separate list of notification email addresses
|}
{{Attributes Reference Footer}}

[[Category:Mediator]]</text>
    </revision>
  </page>
  <page>
    <title>Mediator design pattern</title>
    <id>704</id>
    <revision>
      <id>11149</id>
      <timestamp>2009-12-14T02:27:35Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>moved [[Mediator Concepts]] to [[Mediator design pattern]]</comment>
      <text xml:space="preserve">&lt;noinclude&gt;&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Mediator&lt;/categorytree&gt;&lt;/noinclude&gt;
= Intent =

* Define an object that provides a single interface to recieve an action and dispatch it to a set of subordinate [[Core Type Guide#Deployment|Deployment]] objects.
* Abstract the command dispatching algorithm so commands can be invoked on both local and remote [[Core Type Guide#Deployment|Deployment]]s.
* Offer workflow commands that take advantage of command dispatching to propagate key [[Core Type Guide#Deployment|Deployment]] commands.

= Problem =

There is a hierarchy of Deployment objects and we want to control a part of that hierarchy using a single point of control. Some of these objects are local while others are remote, therefore network transparent command execution is needed.

= Discussion =

In a distributed application, it is typical for a set of Deployments to be treated as a subsystem.

The Mediator provides the means to control the subsystem via a single interface, whether the Deployments are local or remote.

The Mediator also enables a form of loose coupling by exposing standard control actions while dispatching specific actions to subordinates, thus hiding those subordinate actions to higher level workflows.

= Structure =

[[Image:mediator-structure.png]]

The Mediator type inherits the capabilities and relationships from [[Core Type Guide#Deployment|Deployment]] incorporating command dispatching.

The Mediator is supported by a set of associated [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Mediator.html#type_MediatorSetting MediatorSetting] subtypes used to initialize option data to its commands.

= Example =

= Commands=

Mediator provides these Life-cycle Control Commands, which dispatch to the Mediator's Deployment resources:

* [[#Install]]
* [[#Configure]]
* [[#Deploy]]
* [[#Packages-Install]]
* [[#Update]]
* [[#dispatchCmd]]

See also:

* [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Mediator.html#Commands Mediator Commands Reference]

== Install ==
Dispatches &lt;code&gt;[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Deployment.html#cmd_Install Install]&lt;/code&gt; command to Deployments

* [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Mediator.html#cmd_Install Reference]

== Configure==
Dispatches &lt;code&gt;[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Deployment.html#cmd_Configure Configure]&lt;/code&gt; command to Deployments

* [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Mediator.html#cmd_Configure Reference]

==Deploy==
Dispatches &lt;code&gt;[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Deployment.html#cmd_Deploy Deploy]&lt;/code&gt; command to Deployments

* [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Mediator.html#cmd_Deploy Reference]

==Packages-Install==
Dispatches &lt;code&gt;[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Deployment.html#cmd_Packages-Install Packages-Install]&lt;/code&gt; command to Deployments

* [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Mediator.html#cmd_Packages-Install Reference]

==Update==
Dispatches &lt;code&gt;[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Deployment.html#cmd_Update Update]&lt;/code&gt; command to Deployments

* [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Mediator.html#cmd_Update Reference]

==dispatchCmd==
Dispatches any specified command to deployments

* [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Mediator.html#cmd_dispatchCmd Reference]

= Check List =

# Determine the paramters needed to match the part of the hierarchy commands will be dispatched.

= Related Types =

*  [[Node Concepts]]

Supertype:

*  [[Deployment Concepts]]

Subtypes:

*  [[Site Concepts]]
*  [[Updater Concepts]]

{{Core Type Guide Linkback}}

[[Category:Mediator]]</text>
    </revision>
  </page>
  <page>
    <title>Methodology</title>
    <id>1973</id>
    <redirect />
    <revision>
      <id>14292</id>
      <timestamp>2010-11-10T22:34:58Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>moved [[Methodology]] to [[Modeling Methodology]]</comment>
      <text xml:space="preserve">#REDIRECT [[Modeling Methodology]]</text>
    </revision>
  </page>
  <page>
    <title>Methodology Activities</title>
    <id>1974</id>
    <redirect />
    <revision>
      <id>14294</id>
      <timestamp>2010-11-10T22:35:23Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>moved [[Methodology Activities]] to [[Modeling Activities]]</comment>
      <text xml:space="preserve">#REDIRECT [[Modeling Activities]]</text>
    </revision>
  </page>
  <page>
    <title>MigratingToApacheModDav</title>
    <id>2223</id>
    <revision>
      <id>15390</id>
      <timestamp>2011-06-29T17:19:18Z</timestamp>
      <contributor>
        <username>Chuck</username>
        <id>13</id>
      </contributor>
      <comment>formatting</comment>
      <text xml:space="preserve">= Migrating to Apache mod_dav =

In [[mod_dav]], a brand new installation using the apache mod_dav repository is described.  In many cases, an existing jackrabbit repository is already in operation.  This document describes migrating existing ControlTIer projects from from jackrabbit to the apache mod_dav repository.   This procedure assumes jackrabbit is currently in operation and includes how to  prepare the mod_dav repository for migration.  In summary, we will create  a fresh apache mod_dav repository, copy the artifacts from jackrabbit to apache mod_dav, and convert the package resources to the new url.

==Assumptions==

* A centos 5.5 or 5.6 64 bit installation (other *nix platforms should be similar)
* Use fuse-davfs2 package for mounting webdav onto the filesystem for ease of copying physical artifacts (there are other dav utilities to accomplish this)
* ControlTier 3.6.1 installed with access to ctl client on the master node
* Review [[mod_dav#Create_a_new_Webdav_Repository]] which will be folllowed to prepare apache mod_dav repository.
* Regarding migration of the jackrabbit artifacts, the following will be accomplished:
** all resources currently available via:  &lt;nowiki&gt;http://CTIER_SERVER:8080/jackrabbit/repository/controltier/...&lt;/nowiki&gt;  
** will also be available via: &lt;nowiki&gt;http://CTIER_SERVER/webdav/repository/controltier/...&lt;/nowiki&gt;

==Procedure==

* Install rpmforge  yum repo configuration package (yum repo for davfs2 package):
 [root@centos-55-64-vm7 yum.repos.d]#  rpm -Uvh &lt;nowiki&gt;http://apt.sw.be/redhat/el5/en/x86_64/rpmforge/RPMS//rpmforge-release-0.3.6-1.el5.rf.x86_64.rpm&lt;/nowiki&gt;
 Retrieving &lt;nowiki&gt;http://apt.sw.be/redhat/el5/en/x86_64/rpmforge/RPMS//rpmforge-release-0.3.6-1.el5.rf.x86_64.rpm&lt;/nowiki&gt;
 warning: /var/tmp/rpm-xfer.Jnnmqy: Header V3 DSA signature: NOKEY, key ID 6b8d79e6
 Preparing...                ########################################### [100%]
   1:rpmforge-release       ########################################### [100%]
* Install fuse-davfs2 and cadaver
&lt;pre&gt;
[root@centos-55-64-vm7 yum.repos.d]# yum install fuse-davfs2 cadaver
rpmforge                                                                                                                                                                     | 1.1 kB     00:00     
rpmforge/primary                                                                                                                                                             | 3.8 MB     00:13     
rpmforge                                                                                                                                                                                10636/10636
Setting up Install Process
Package cadaver-0.22.3-4.el5.x86_64 already installed and latest version
Resolving Dependencies
--&gt; Running transaction check
---&gt; Package fuse-davfs2.x86_64 0:1.2.2-2.el5.rf set to be updated
--&gt; Processing Dependency: fuse &gt;= 2.2 for package: fuse-davfs2
--&gt; Running transaction check
---&gt; Package fuse.x86_64 0:2.7.4-8.el5 set to be updated
--&gt; Finished Dependency Resolution

Dependencies Resolved

====================================================================================================================================================================================================
 Package                                         Arch                                       Version                                              Repository                                    Size
====================================================================================================================================================================================================
Installing:
 fuse-davfs2                                     x86_64                                     1.2.2-2.el5.rf                                       rpmforge                                     199 k
Installing for dependencies:
 fuse                                            x86_64                                     2.7.4-8.el5                                          base                                          83 k

Transaction Summary
====================================================================================================================================================================================================
Install       2 Package(s)
Upgrade       0 Package(s)

Total download size: 283 k
Is this ok [y/N]: y
Downloading Packages:
(1/2): fuse-2.7.4-8.el5.x86_64.rpm                                                                                                                                           |  83 kB     00:00     
(2/2): fuse-davfs2-1.2.2-2.el5.rf.x86_64.rpm                                                                                                                                 | 199 kB     00:01     
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Total                                                                                                                                                               102 kB/s | 283 kB     00:02     
Running rpm_check_debug
Running Transaction Test
Finished Transaction Test
Transaction Test Succeeded
Running Transaction
  Installing     : fuse                                                                                                                                                                         1/2 
  Installing     : fuse-davfs2                                                                                                                                                                  2/2 

Installed:
  fuse-davfs2.x86_64 0:1.2.2-2.el5.rf                                                                                                                                                               

Dependency Installed:
  fuse.x86_64 0:2.7.4-8.el5                                                                                                                                                                         

Complete!
&lt;/pre&gt;
* Configure Apache mod_dav repository, see: [[mod_dav#Create_a_new_Webdav_Repository|Create a new Webdav Repository]]
** NOTE:  do not proceed to [[mod_dav#Apply_new_webdav_configuration_to_ControlTier|Apply new webdav configuration to ControlTier]], until directed to do so from this wiki page
* Create the controltier collection in the mod_dav repository if it does not already exist (in the case of a brand new mod_dav server this will likely not exist):
   [root@centos-55-64-vm7 conf.d]# cadaver &lt;nowiki&gt;http://$(hostname)/webdav/repository&lt;/nowiki&gt;
   dav:/webdav/repository/&gt; mkcol controltier
   Creating `controltier': Authentication required for General Webdav Repository on server `centos-55-64-vm7.local':
   Username: default
   Password: 
   Retrying: succeeded.
 dav:/webdav/repository/&gt; quit
 Connection to `centos-55-64-vm7.local' closed.
* Mount jackrabbit and apache mod_dav respositories on the filesystem:
  [root@centos-55-64-vm7 conf.d]#  mkdir -p /tmp/dav_migration/jackrabbit
  [root@centos-55-64-vm7 conf.d]# mkdir -p /tmp/dav_migration/mod_dav

   /bin/mount -t davfs &lt;nowiki&gt;http://$(hostname):8080/jackrabbit/repository/controltier /tmp/dav_migration/jackrabbit&lt;/nowiki&gt;
   Please enter the username to authenticate with server
   &lt;nowiki&gt;http://centos-55-64-vm7.local:8080/jackrabbit/repository/controltier&lt;/nowiki&gt; or hit enter for none.
   Username: default
   Please enter the password to authenticate user default with server
   &lt;nowiki&gt;http://centos-55-64-vm7.local:8080/jackrabbit/repository/controltier&lt;/nowiki&gt; or hit enter for none.
   Password: 

   /bin/mount -t davfs &lt;nowiki&gt;http://$(hostname)/webdav/repository/controltier&lt;/nowiki&gt; /tmp/dav_migration/mod_dav
   Please enter the username to authenticate with server
   &lt;nowiki&gt;http://centos-55-64-vm7.local/webdav/repository/controltier&lt;/nowiki&gt; or hit enter for none.
   Username: default
   Please enter the password to authenticate user default with server
   &lt;nowiki&gt;http://centos-55-64-vm7.local/webdav/repository/controltier&lt;/nowiki&gt; or hit enter for none.
   Password: 

   [root@centos-55-64-vm7 conf.d]# df |grep /tmp
                      26666664  13333332  13333332  50% /tmp/dav_migration/jackrabbit
                      26666664  13333332  13333332  50% /tmp/dav_migration/mod_dav

* Copy jackrabbit artifacts to mod_dav
   [root@centos-55-64-vm7 jackrabbit]# cd /tmp/dav_migration/jackrabbit
   [root@centos-55-64-vm7 jackrabbit]# tar cf - pkgs projects seeds | (cd ../mod_dav; tar xf -)
* Umount the davfs filesystems:
   [root@centos-55-64-vm7 jackrabbit]# cd /
   [root@centos-55-64-vm7 /]# umount /tmp/dav_migration/jackrabbit
   /sbin/umount.davfs: waiting while mount.davfs (pid 23840) synchronizes the cache .. OK
   [root@centos-55-64-vm7 /]# umount  /tmp/dav_migration/mod_dav
   /sbin/umount.davfs: waiting while mount.davfs (pid 24000) synchronizes the cache .. OK
* Export, Convert, and Reload the package resource model (replace PROJECT with the name of the project being migrated and repeat for each project):
** Export the project package resource model:
&lt;pre&gt;
   [root@centos-55-64-vm7 /]# su - ctier
   [ctier@centos-55-64-vm7 ]$ ctl -p PROJECT -m ProjectBuilder -c find-resources -- -type '^Package$' -out /tmp/jackrabbit.xml
   Results stored in file: /tmp/jackrabbit.xml
&lt;/pre&gt;
** Convert all urls for mod_dav:
&lt;pre&gt;
  [ctier@centos-55-64-vm7 ]$  sed 's,:8080/jackrabbit/,/webdav/,g' /tmp/jackrabbit.xml &gt; /tmp/mod_dav.xml
&lt;/pre&gt;
** Reload the package resource model:
&lt;pre&gt;
  [ctier@centos-55-64-vm7 ]$  ctl -p PROJECT -m ProjectBuilder -c load-resources -- -filename /tmp/mod_dav.xml
  Loading &quot;/tmp/mod_dav.xml&quot; ...
  1 file(s) have been successfully validated.
  ...
  ....
  [timer: 32.768 sec]
&lt;/pre&gt;
* Reconfigure ControlTier Server for mod_dav operation by referring to [[mod_dav#Apply_new_webdav_configuration_to_ControlTier]].</text>
    </revision>
  </page>
  <page>
    <title>Migration</title>
    <id>1971</id>
    <redirect />
    <revision>
      <id>14207</id>
      <timestamp>2010-11-10T17:26:02Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>moved [[Migration]] to [[Server migration]]</comment>
      <text xml:space="preserve">#REDIRECT [[Server migration]]</text>
    </revision>
  </page>
  <page>
    <title>Mock Service Example</title>
    <id>794</id>
    <redirect />
    <revision>
      <id>4192</id>
      <timestamp>2009-04-23T02:12:04Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>[[Mock Service Example]] moved to [[Mock Unix Service Example]]</comment>
      <text xml:space="preserve">#REDIRECT [[Mock Unix Service Example]]</text>
    </revision>
  </page>
  <page>
    <title>Mock Site Example</title>
    <id>768</id>
    <revision>
      <id>14236</id>
      <timestamp>2010-11-10T19:57:37Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>/* Related Topics */</comment>
      <text xml:space="preserve">&lt;noinclude&gt;&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Examples&lt;/categorytree&gt;&lt;/noinclude&gt;
{{Version Required|3.4.3}}

:''Note'': This document describes how to run the example with Unix.  For Windows instructions, see [[Mock site example for windows]].

The Mock Site Example shows the basics of using an object of the [[Core_Type_Guide#Site|Site]] type, which allows you to dispatch commands to all Service resources organized within the Site.  

This example defines two [[Core_Type_Guide#Service|Service]] objects and groups them beneath one Site object. Commands executed on the Site object are automatically dispatched down to the Services in accordance to their ranking.  The ranking is determined by the ''startuprank'' property, which is simply a number which orders the Services relative to each other, and is used by the Site commands to determine the order in which the resources should be used. By default for most dispatched commands, ranks are sorted in ascending order except for the Stop command which sorts startup rank values in descending order.

The Service lifecycle commands (see the [[Service Concepts]] document for more information) are: &lt;code&gt;Start&lt;/code&gt;,&lt;code&gt;Stop&lt;/code&gt;, and &lt;code&gt;Status&lt;/code&gt;.  Each of these commands is also defined in the Site type as a ''Dispatch'' command.  When you call one of these commands on a Site object, it iterates over each of its Service child dependencies and sends the same command to each Service, in the order determined by the ''startuprank''.  This makes it easy to control an entire set of Services using a single command sent to the Site.

The Site Type also has a command named &lt;code&gt;dispatchCmd&lt;/code&gt;.  You can use this command to send ''any'' subcommand to the entire set of Services within the Site.  You may have Service resources which have other special-purpose commands that the Site doesn't know about, and you can relay those using the &lt;code&gt;dispatchCmd&lt;/code&gt; command in the same way that the &lt;code&gt;Start&lt;/code&gt;,&lt;code&gt;Stop&lt;/code&gt;, and &lt;code&gt;Status&lt;/code&gt; lifecycle commands work automatically.

This Example shows you how to do the following things:

# Use the &lt;code&gt;Start&lt;/code&gt;,&lt;code&gt;Stop&lt;/code&gt;, and &lt;code&gt;Status&lt;/code&gt; lifecycle commands from a Site, where the commands will be dispatched to the Services
# Use the &lt;code&gt;dispatchCmd&lt;/code&gt; command to dynamically dispatch any named command to the Services for the Site.
# Use the [[project.xml]] resource model format to define a Site object and its related Services

The Example does not define any actual implementation for the lifecycle command scripts.  It merely demonstrates how to use the Site to dispatch commands to the Site's Service resources.  (For an example on how to implement the lifecycle commands for a Service, see the [[Mock Unix Service Example]] or the [[Windows service example]].)

The diagram below describes two Services (mock1 and mock2) grouped within one Site (mock). Notice also each Service resource has its own &lt;code&gt;startuprank&lt;/code&gt; value.  &lt;code&gt;mock1&lt;/code&gt; has a ''startuprank'' of 1, and &lt;code&gt;mock2&lt;/code&gt; has a ''startuprank'' of 2:

[[Image:mock-site-example.png]]

Site commands normally execute commands in ascending startup rank order. Below you can see &quot;mock1&quot; is first to run &quot;Start&quot; and after that completes, &quot;mock2&quot; runs Start:

[[Image:mock-site-startup.png]]

The Stop command executes commands in descending startup rank order:

[[Image:mock-site-shutdown.png]]

This time &quot;mock2&quot; runs Stop first and once it completes, &quot;mock1&quot; runs Stop.

==Dependencies==
This has these dependencies.
* [[ControlTier 3.4.3]]
** Meet the prerequisites and install ControlTier according to the [[Installation|Installing ControlTier]] instructions.
* '''Linux or Unix''' based Operating System.
** For Windows, see: [[Mock site example for windows]].

==Building the Example==
Follow the instructions in this section to setup the example code into your environment.  

'''Note''': Don't worry about what these commands do, as they just bootstrap the example code to work in your environment and to pre-load the resource model for you. (For complete detail about how to use the [[Examples]] see [[Using the Examples]]):

Execute these bootstrap steps:

# &lt;pre&gt;cd $CTIER_ROOT/examples/mock-site&lt;/pre&gt;
#* At the command line, navigate to the &lt;code&gt;examples/mock-site&lt;/code&gt; directory under your &lt;code&gt;$CTIER_ROOT&lt;/code&gt; directory.
# Edit the file: &lt;code&gt;templates/defaults.xml&lt;/code&gt; (optional)
#* Examine and possibly modify the &lt;code&gt;templates/defaults.xml&lt;/code&gt; file to contain suitable node name values.
# &lt;pre&gt;ctl -p demo -m ProjectBuilder -c Register -- -xml projectbuilder.xml -install&lt;/pre&gt;	
#* This loads a ProjectBuilder object definition into the ControlTier Server.
# &lt;pre&gt;ctl -p demo -t ProjectBuilder -r mock-site -c Build&lt;/pre&gt;
#* Builds a working example based on template files and your working environment. Later see [[Using_the_Examples#Further_Customization|Further Customization]]

The result of these bootstrap steps results in a Site resource named &quot;mock&quot; that you can use to control the life cycle of two Services, &quot;mock1&quot; and &quot;mock2&quot;.

You are now ready to run the examples.

==Running the Example==

You can run any of the Site commands via CTL like so:

&lt;pre&gt;
ctl -p demo -t Site -r mock -c &lt;command-name&gt;
&lt;/pre&gt;

If you run the command without the &quot;-c ''&lt;command-name&gt;''&quot; parameter you will see a listing of commands.

In the commands below, we will show the output of the command first, then an explanation of what occurred.

===Run Start===
The &lt;code&gt;[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Site.html#cmd_Start Start]&lt;/code&gt; command calls Start on the Service resources, in the order determined by the ''startuprank''. Notice how the Start command is called on &quot;mock1&quot; before &quot;mock2&quot;. 

''execute:''

&lt;pre&gt;
ctl -p demo -t Site -r mock -c Start
&lt;/pre&gt;

''output:''

&lt;pre&gt;
Dispatching command 'Start' to objects: mock1[Service], mock2[Service] ...
starting: mock1[Service]-&gt;Start ...
starting: mock2[Service]-&gt;Start ...
begin workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot; ...
end workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot;
begin workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot; ...
end workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot;
&lt;/pre&gt;

''What happened?''

# The Start command determines the order of the Services, and indicates the commands that will be dispatched
#* &lt;code&gt;Dispatching command 'Start' to objects: mock1[Service], mock2[Service] ...&lt;/code&gt;
#* &lt;code&gt;starting: mock1[Service]-&gt;Start ...&lt;/code&gt;
#* &lt;code&gt;starting: mock2[Service]-&gt;Start ...&lt;/code&gt;
# After that, it then sends the &lt;code&gt;Start&lt;/code&gt; command to each Service.  The &lt;code&gt;Start&lt;/code&gt; command invokes the &lt;code&gt;assertServiceIsUp&lt;/code&gt;. 
#* &lt;code&gt;begin workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot; ...&lt;/code&gt;
#* &lt;code&gt;end workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot;&lt;/code&gt;

Since this is a &quot;mock&quot; Site example, the Services don't actually do any startup routine, and merely succeed quietly.  But you can see that the order was correct as determined by the ''startuprank'', and that each Service actually ran the &lt;code&gt;Start&lt;/code&gt; command as intended.

===Run Status===
The &lt;code&gt;[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Site.html#cmd_Status Status]&lt;/code&gt; command dispatches to &quot;Status&quot; to all Services bound to this Site,  and the Status command uses the same sort order as does Start.

''execute:''

&lt;pre&gt;
ctl -p demo -t Site -r mock -c Status
&lt;/pre&gt;

''output:''

&lt;pre&gt;
Dispatching command 'Status' to objects: mock1[Service], mock2[Service] ...
starting: mock1[Service]-&gt;Status ...
starting: mock2[Service]-&gt;Status ...
begin workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot; ...
end workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot;
begin workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot; ...
end workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot;
&lt;/pre&gt;

''What happened?''

Exactly as with &lt;code&gt;Start&lt;/code&gt; command above, the &lt;code&gt;Status&lt;/code&gt; command was dispatched to each of the Services in the correct order, and the underlying &lt;code&gt;assertServiceIsUp&lt;/code&gt; command is then executed for each Service.

===Run Stop===
The &lt;code&gt;[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Site.html#cmd_Stop Stop]&lt;/code&gt; command calls Stop on the Service resources. Since the Stop command uses the ''startuprank'' property in ''descending'' order to sort the Services, Stop is called on &quot;mock2&quot; before &quot;mock2&quot;.  Stop works in reverse order relative to Start, as this is typically the behavior desired when managing a set of related software services.

''execute:''

&lt;pre&gt;
ctl -p demo -t Site -r mock -c Stop
&lt;/pre&gt;

''output:''

&lt;pre&gt;
Dispatching command 'Stop' to objects: mock2[Service], mock1[Service] ...
starting: mock2[Service]-&gt;Stop ...
starting: mock1[Service]-&gt;Stop ...
begin workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot; ...
end workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot;
begin workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot; ...
end workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot;
&lt;/pre&gt;

''What happened?''

# The Stop command determines the order of the Services to dispatch to, now executing on mock2 prior to mock1:
#* &lt;code&gt;Dispatching command 'Stop' to objects: mock2[Service], mock1[Service] ...&lt;/code&gt;
#* &lt;code&gt;starting: mock2[Service]-&gt;Stop ...&lt;/code&gt;
#* &lt;code&gt;starting: mock1[Service]-&gt;Stop ...&lt;/code&gt;
# The Stop command is then executed on the two Services in the order shown, which invokes the &lt;code&gt;assertServiceIsDown&lt;/code&gt; in turn.

===Run dispatchCmd===
The &lt;code&gt;[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Mediator.html#cmd_dispatchCmd dispatchCmd]&lt;/code&gt; command lets you dispatch any command to a Site's services
* The command to be dispatched must exist in the Services but is not required to have been defined in the Site itself
* The &lt;code&gt;-resourcename&lt;/code&gt; and &lt;code&gt;-resourcetype&lt;/code&gt; options filter which Services to match (Regular expressions allowed)

The example below runs the &quot;assertServiceIsUp&quot; command across all Service instances, using the regular expression &lt;code&gt;mock[12]&lt;/code&gt; to match both the mock1 and mock2 Services.  The default sortorder is &quot;ascending&quot;, so the mock1 Service is dispatched to first:

''execute:''

&lt;pre&gt;
ctl -p demo -t Site -r mock -c dispatchCmd -- -resourcename 'mock[12]' -command assertServiceIsUp
&lt;/pre&gt;

''output:''

&lt;pre&gt;
dispatching command: &quot;assertServiceIsUp &quot; to: [(Service) mock1,(Service) mock2 ]...
dispatching to resource: mock1 [Service] -&gt; &quot;assertServiceIsUp &quot;
dispatching to resource: mock2 [Service] -&gt; &quot;assertServiceIsUp &quot;
dispatched command: assertServiceIsUp completed for objects: (Service) mock1,(Service) mock2
&lt;/pre&gt;

''What happened?''

The &lt;code&gt;assertServiceIsUp&lt;/code&gt; is dispatched in the ascending order of ''startuprank''.

We can select the sortorder using the &lt;code&gt;-sortorder&lt;/code&gt; option.  If we use it with the value &quot;descending&quot; we will see the dispatch happen in reverse order:

''execute:''

&lt;pre&gt;
ctl -p demo -t Site -r mock -c dispatchCmd -- -resourcename 'mock[12]' -command assertServiceIsUp -sortorder descending
&lt;/pre&gt;

''output:''

&lt;pre&gt;
dispatching command: &quot;assertServiceIsUp &quot; to: [(Service) mock2,(Service) mock1 ]...
dispatching to resource: mock2 [Service] -&gt; &quot;assertServiceIsUp &quot;
dispatching to resource: mock1 [Service] -&gt; &quot;assertServiceIsUp &quot;
dispatched command: assertServiceIsUp completed for objects: (Service) mock2,(Service) mock1
&lt;/pre&gt;

==How it Works==

The mock Site resource model is defined in a [[project.xml|project XML]] file generated into the &lt;code&gt;$CTIER_ROOT/examples/mock-site&lt;/code&gt;. directory. This section walks through the XML definition files used to define the Site and Service resources.

Examine the contents of this file to see the full resource model definition excerpted below: 

&lt;code&gt;$CTIER_ROOT/examples/mock-site/default-object.xml&lt;/code&gt;

===The Service definitions===

From Workbench's &quot;Service Manager&quot; page you can navigate to the mock[Site] object and click its link. From that page you can graph the resource model for it and see the graph below:

[[Image:mock-site-graph.png]]

There are two Service definitions, one for &quot;mock1&quot; and another for &quot;mock2&quot;. Services are defined using the &lt;code&gt;[[Project-v10.xml#deployment|deployment]]&lt;/code&gt; tag and its attributes.

The &quot;mock1&quot; Service resource is shown first. Notice the ''startuprank'' attribute uses the value &quot;1&quot;.
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;deployment 
    type=&quot;Service&quot;
    name=&quot;mock1&quot; 
    description=&quot;The first mock Service.&quot; 
    installRoot=&quot;${env.CTIER_ROOT}/examples/mock-site&quot; 
    basedir=&quot;${env.CTIER_ROOT}/examples/mock-site&quot; 
    startuprank=&quot;1&quot;&gt;
    &lt;!--
  &lt;resources&gt;
  &lt;/resources&gt;
    --&gt; 
  &lt;!--
	**
	** Define a parent dependency to the node where you are running this example. 
	**
  --&gt;
  &lt;referrers replace=&quot;false&quot;&gt;
    &lt;!--
	  ** Change this line to one that matches your node name:
    --&gt;
    &lt;resource type=&quot;Node&quot; name=&quot;strongmad.local&quot;/&gt;
  &lt;/referrers&gt;
&lt;/deployment&gt;
&lt;/syntaxhighlight&gt;

The &quot;mock2&quot; Service resource is shown next. Notice the ''startuprank'' attribute uses the value &quot;2&quot;.
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
&lt;deployment 
    type=&quot;Service&quot;
    name=&quot;mock2&quot; 
    description=&quot;The first mock Service.&quot; 
    installRoot=&quot;${env.CTIER_ROOT}/examples/mock-site&quot; 
    basedir=&quot;${env.CTIER_ROOT}/examples/mock-site&quot; 
    startuprank=&quot;2&quot;&gt;
    &lt;!--
  &lt;resources&gt;
  &lt;/resources&gt;
    --&gt; 
  &lt;!--
	**
	** Define a parent dependency to the node where you are running this example. 
	**
  --&gt;
  &lt;referrers replace=&quot;false&quot;&gt;
    &lt;!--
	  ** Change this line to one that matches your node name:
    --&gt;
    &lt;resource type=&quot;Node&quot; name=&quot;strongmad.local&quot;/&gt;
  &lt;/referrers&gt;
&lt;/deployment&gt;
&lt;/syntaxhighlight&gt;

===The Site definition===

The &quot;mock&quot; Site object is defined next. It binds the two Service resources, mock1 and mock2, as child resources. 
The &lt;code&gt;resources&lt;/code&gt; tag lets you represent &quot;whole-part&quot; relationships between objects. Each of the Service resources is referenced via the &lt;code&gt;resource&lt;/code&gt; tag:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
&lt;deployment 
    type=&quot;Site&quot;
    name=&quot;mock&quot; 
    description=&quot;The mock deployment site.&quot; &gt;
  &lt;resources&gt;
    &lt;!--
	  ** Bind the mock1 and mock2 Services to this Site:
    --&gt;
    &lt;resource type=&quot;Service&quot; name=&quot;mock1&quot;/&gt;
    &lt;resource type=&quot;Service&quot; name=&quot;mock2&quot;/&gt;
  &lt;/resources&gt;
  &lt;!--
	**
	** Define a parent dependency to the node where you are running this example. 
	**
  --&gt;
  &lt;referrers replace=&quot;false&quot;&gt;
    &lt;!--
	  ** Change this line to one that matches your node name:
    --&gt;
    &lt;resource type=&quot;Node&quot; name=&quot;strongmad.local&quot;/&gt;
  &lt;/referrers&gt;
&lt;/deployment&gt;
&lt;/syntaxhighlight&gt;

===Command dispatching===

After the Site and Service resources were defined they were loaded and installed by the steps in the [[#Building the Example]] section. Once installed, commands could be executed via the CTL command dispatcher. In these examples, dispatching occurs at two levels:
# Site command invocation: At this level, the &lt;code&gt;ctl&lt;/code&gt; command line is used to call the specified command in the context of the mock Site object. The dispatcher resolves the command and invokes it for the Site.
# Service command invocation: The Site commands are nothing more than relays to the bound Services. At this level, the Site commands call the CTL command dispatcher directly, specifying to it the command and the resources they want to target.

===The Output===

First let's look at the Start command. 

You can preview the actions of the Start workflow from Workbench. Navigate to the mock[Site] object in the &quot;Service Manager&quot; and press the &quot;Commands&quot; tab. Locate the &quot;Start&quot; workflow and press the yellow button to right.
You will see the Process Flow view display workflow structure across the commands that are dispatched by Start.

[[Image:mock-site-start-flow.png]]

From the command line you ran:
&lt;pre&gt;
$ ctl -p demo -t Site -r mock -c Start
&lt;/pre&gt;
You can see from the output that the Site has dispatched &quot;Start&quot; to &quot;mock1[Service], mock2[Service]&quot; objects.
The next two lines are from the command dispatcher invoking the Start command on the Service resources. The last four lines are output from the Service Start commands and reflect that the Service's Start command is a workflow that calls &quot;assertServiceIsUp&quot;:
&lt;pre&gt;
Dispatching command 'Start' to objects: mock1[Service], mock2[Service] ...
starting: mock1[Service]-&gt;Start ...
starting: mock2[Service]-&gt;Start ...
begin workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot; ...
end workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot;
begin workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot; ...
end workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot;
&lt;/pre&gt;


Next, let's look at the Stop command.

You can preview the actions of the Stop workflow from Workbench. Navigate to the mock[Site] object in the &quot;Service Manager&quot; and press the &quot;Commands&quot; tab. Locate the &quot;Stop&quot; workflow and press the yellow button to right.
You will see the Process Flow view display workflow structure across the commands that are dispatched by Stop.

[[Image:mock-site-stop-flow.png]]

From the command line you ran:

&lt;pre&gt;
$ ctl -p demo -t Site -r mock -c Stop
&lt;/pre&gt;
You can see from the output that the Site has dispatched &quot;Stop&quot; to &quot;mock2[Service], mock1[Service]&quot; objects. The &quot;mock2&quot; object now precedes the &quot;mock1&quot; since the Site has specified a descending sort order for this command.
The next two lines are from the command dispatcher invoking the Stop command on the Service resources. The last four lines are output from the Service Stop commands and reflect that the Service's Stop command is a workflow that calls &quot;assertServiceIsDown&quot;:&lt;pre&gt;
Dispatching command 'Stop' to objects: mock2[Service], mock1[Service] ...
starting: mock2[Service]-&gt;Stop ...
starting: mock1[Service]-&gt;Stop ...
begin workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot; ...
end workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot;
begin workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot; ...
end workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot;
&lt;/pre&gt;

==Related Topics==
* The [[Site_Coordination_Models]] page describes various forms of nesting Sites to coordinate groups of Services using hierarchical forms.
* [[Mock Service Example]] shows how to attach your own scripts to the Service types startup and shutdown workflows.

{{Manual/navbox}}

[[Category:Site Examples]]</text>
    </revision>
  </page>
  <page>
    <title>Mock Unix Service Example</title>
    <id>772</id>
    <revision>
      <id>15684</id>
      <timestamp>2011-11-15T11:45:44Z</timestamp>
      <contributor>
        <username>Rob.percival</username>
        <id>377</id>
      </contributor>
      <minor/>
      <comment>Corrected typo.</comment>
      <text xml:space="preserve">&lt;noinclude&gt;&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Examples&lt;/categorytree&gt;&lt;/noinclude&gt;
==Overview==

{{Version Required 3.4.3}}

This Mock Unix Service example shows the basics of using an object of the [[Core_Type_Guide#Service|Service]] type to manage the runtime lifecycle of a long running application Service.  The [[Core_Type_Guide#Service|Service]] type defines several commands useful for managing the startup and shutdown cycle of a software service. 

This example shows you how to do the following things:

# Use the &lt;code&gt;Start&lt;/code&gt;,  &lt;code&gt;Stop&lt;/code&gt;, and &lt;code&gt;Status&lt;/code&gt; lifecycle commands
# customize the implementation of these commands using your shell scripts to perform the logic
# use the [[project.xml]] resource model format to define a Service resource

The example provides a working set of scripts to implement the logic to manage a &quot;mock&quot;, or simulated, application process, approximating a typical scenario where a system process is launched and controlled via a process identification file (PID file).

The lifecycle commands &lt;code&gt;Start&lt;/code&gt; and &lt;code&gt;Stop&lt;/code&gt; work in a similar way.  Each one runs another command designed to &quot;assert&quot; that the run-state of the process is as expected. For example, the &lt;code&gt;Start&lt;/code&gt; command runs &lt;code&gt;assertServiceIsUp&lt;/code&gt;.  This &quot;assert&quot; command merely does one thing: it checks that the service is in the state specified (running or not running), and if it doesn't meet that expectation, it fails.  If it succeeds, then the &lt;code&gt;Start/Stop&lt;/code&gt; command knows it doesn't have to do anything else, and the entire command succeeds.  However, if the &quot;assert&quot; command fails, then the &lt;code&gt;Start/Stop&lt;/code&gt; command has to change the state of the service.  It does this by subsequently invoking the &lt;code&gt;startService&lt;/code&gt; or &lt;code&gt;stopService&lt;/code&gt; command.  These commands are meant to perform whatever action is necessary to start or stop the underlying service.  If this command succeeds, then the &lt;code&gt;Start/Stop&lt;/code&gt; command has succeeded, otherwise it has failed.

This mechanism separates the logic of managing the run-state of a service into discrete tasks that have clear semantics, allowing this abstract pattern to apply to the wide range of software services that need to be managed.

This example will use a set of simple shell scripts to plug in to each of these discrete tasks, allowing us to demonstrate the behavior of the lifecycle commands while only simulating an actual running service.  You will see that the implementation of each of these tasks is simple and easy to customize for your own service management needs.

* For more information, see the [[Service Concepts]] document.

==Dependencies==
This demo has these dependencies.
* ControlTier &amp;mdash; 3.4.3
** Meet the prerequisites and install ControlTier according to the [[Installation|Installing ControlTier]] instructions.
* Unix
** ''This example is not compatible with Windows.''  It is compatible with Linux, Mac OS X and most unix variants.

==Building the Example==

Follow the instructions in this section to setup the example code into your environment.  

'''Note''': Don't worry about what these commands do, as they just bootstrap the example code to work in your environment and to pre-load the resource model for you. (For complete detail about how to use the [[Examples]] see [[Using the Examples]]):

Execute these bootstrap steps:

# &lt;pre&gt;cd $CTIER_ROOT/examples/mock-unix-service&lt;/pre&gt;
#* At the command line, navigate to the &lt;code&gt;examples/mock-unix-service&lt;/code&gt; directory under your &lt;code&gt;$CTIER_ROOT&lt;/code&gt; directory.
# &lt;pre&gt;ctl -p demo -m ProjectBuilder -c Register -- -xml projectbuilder.xml -install&lt;/pre&gt;	
#* This loads a ProjectBuilder object definition into the ControlTier Server.
# &lt;pre&gt;ctl -p demo -t ProjectBuilder -r mock-unix-service -c Build&lt;/pre&gt;
#* Builds a working example based on template files and your working environment. Later see [[Using_the_Examples#Further_Customization|Further Customization]]

You are now ready to run the examples.

==Running the Example==

You can run any of the Service commands like so: ctl -p demo -t Service -r mock -c ''&lt;command-name&gt;''

If you run the command without the &quot;-c ''&lt;command-name&gt;''&quot; parameter you will see a listing of commands.

In the commands below, we will show the output of the command first, then an explanation of what occurred.

===Run Start===
The &lt;code&gt;[[Service_Concepts#Start|Start]]&lt;/code&gt; command ensures the service is started.  When you execute it you should see that it in turn executes the &lt;code&gt;assertServiceIsUp&lt;/code&gt; command.  

''execute:''

&lt;pre&gt;
ctl -p demo -t Service -r mock -c Start
&lt;/pre&gt;

''output:''

&lt;pre&gt;
begin workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot; ...
Executing bourne shell script: /Users/greg/ctier2/examples/mock-unix-service/scripts/isup.sh
DOWN
Running handler command: startService
Executing bourne shell script: /Users/greg/ctier2/examples/mock-unix-service/scripts/start.sh
end workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot;
&lt;/pre&gt;

''What happened?''

The Start command invokes the startup sequence for the Service:

# the &lt;code&gt;assertServiceIsUp&lt;/code&gt; command is invoked: 
#* &lt;code&gt;begin workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot; ...&lt;/code&gt;
# The &lt;code&gt;assertServiceIsUp&lt;/code&gt; invokes the script defined as the &quot;isup&quot; script, named &lt;code&gt;isup.sh&lt;/code&gt;
#* &lt;code&gt;Executing bourne shell script: /Users/greg/ctier2/examples/mock-unix-service/scripts/isup.sh&lt;/code&gt;
# The &lt;code&gt;isup.sh&lt;/code&gt; script fails because the service is not started, and it reports that the service is down:
#* &lt;code&gt;DOWN&lt;/code&gt;
# Since the &lt;code&gt;isup&lt;/code&gt; script failed, the &lt;code&gt;Start&lt;/code&gt; command next invokes the &lt;code&gt;startService&lt;/code&gt;:
#* &lt;code&gt;Running handler command: startService&lt;/code&gt;
# The &lt;code&gt;startService&lt;/code&gt; command invokes the script defined as the &quot;start&quot; script, named &lt;code&gt;start.sh&lt;/code&gt;
#* &lt;code&gt;Executing bourne shell script: /Users/greg/ctier2/examples/mock-unix-service/scripts/start.sh&lt;/code&gt;
# Finally, the &lt;code&gt;assertServiceIsUp&lt;/code&gt; succeeds because the &lt;code&gt;startService&lt;/code&gt; command succeeded.
#* &lt;code&gt;end workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot;&lt;/code&gt;

In this &quot;mock&quot; service, the &lt;code&gt;start.sh&lt;/code&gt; script merely creates the PID file to simulate that the process was started. You should now see a PID file at &lt;code&gt;$CTL_BASE/var/tmp/mock.pid&lt;/code&gt;:

&lt;pre&gt;
ls $CTL_BASE/var/tmp/mock.pid
/Users/greg/ctier2/ctl/var/tmp/mock.pid
&lt;/pre&gt;

===Run Status===
The &lt;code&gt;[[Service_Concepts#Status|Status]]&lt;/code&gt; command checks if the service is up and running. When it is executed, it invokes the &lt;code&gt;assertServiceIsUp&lt;/code&gt; command, which succeeds or fails when it finds that the underlying service is up or down.

''execute:''

&lt;pre&gt;
ctl -p demo -t Service -r mock -c Status
&lt;/pre&gt;

''output:''

&lt;pre&gt;
begin workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot; ...
Executing bourne shell script: /Users/greg/ctier2/examples/mock-unix-service/scripts/isup.sh
UP
end workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot;
&lt;/pre&gt;

''What happened?''

Just as before, when running &lt;code&gt;Start&lt;/code&gt;, the &lt;code&gt;assertServiceIsUp&lt;/code&gt; command runs the script that was defined for it named &lt;code&gt;isup.sh&lt;/code&gt;

# The &lt;code&gt;assertServiceIsUp&lt;/code&gt; invokes the script defined as the &quot;isup&quot; script, named &lt;code&gt;isup.sh&lt;/code&gt;
#* &lt;code&gt;Executing bourne shell script: /Users/greg/ctier2/examples/mock-unix-service/scripts/isup.sh&lt;/code&gt;
# The &lt;code&gt;isup.sh&lt;/code&gt; script ''succeeds'' because the PID file now exists, and it reports that the service is UP:
#* &lt;code&gt;UP&lt;/code&gt;
# Finally the &lt;code&gt;Status&lt;/code&gt; command succeeds because the &lt;code&gt;assertServiceIsUp&lt;/code&gt; command succeeds:
#* &lt;code&gt;end workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot;&lt;/code&gt;

Since the PID file for the mock service exists, the isup.sh script succeeds, and the &lt;code&gt;Status&lt;/code&gt; command succeeds.

===Run Stop===
The &lt;code&gt;[[Service_Concepts#Stop|Stop]]&lt;/code&gt; command ensures the service is down.  This command is essentially a mirror image of the &lt;code&gt;Start&lt;/code&gt; command, running the &lt;code&gt;assertServiceIsDown&lt;/code&gt; command instead of &lt;code&gt;assertServiceIsUp&lt;/code&gt;.

''execute:''

&lt;pre&gt;
ctl -p demo -t Service -r mock -c Stop
&lt;/pre&gt;

''output:''

&lt;pre&gt;
begin workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot; ...
Executing bourne shell script: /Users/greg/ctier2/examples/mock-unix-service/scripts/isdown.sh
UP
Running handler command: stopService
Executing bourne shell script: /Users/greg/ctier2/examples/mock-unix-service/scripts/stop.sh
end workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot;
&lt;/pre&gt;

''What happened?''

The Stop command invokes the shutdown sequence for the Service:

# the &lt;code&gt;assertServiceIsDown&lt;/code&gt; command is invoked: 
#* &lt;code&gt;begin workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot; ...&lt;/code&gt;
# The &lt;code&gt;assertServiceIsDown&lt;/code&gt; invokes the script defined as the &quot;isdown&quot; script, named &lt;code&gt;isdown.sh&lt;/code&gt;
#* &lt;code&gt;Executing bourne shell script: /Users/greg/ctier2/examples/mock-unix-service/scripts/isdown.sh&lt;/code&gt;
# The &lt;code&gt;isdown.sh&lt;/code&gt; script fails because the service is already started, and it reports that the service is UP:
#* &lt;code&gt;UP&lt;/code&gt;
# Since the &lt;code&gt;isdown.sh&lt;/code&gt; script failed, the &lt;code&gt;Stop&lt;/code&gt; command next invokes the &lt;code&gt;stopService&lt;/code&gt;:
#* &lt;code&gt;Running handler command: stopService&lt;/code&gt;
# The &lt;code&gt;stopService&lt;/code&gt; command invokes the script defined as the &quot;stop&quot; script, named &lt;code&gt;stop.sh&lt;/code&gt;
#* &lt;code&gt;Executing bourne shell script: /Users/greg/ctier2/examples/mock-unix-service/scripts/stop.sh&lt;/code&gt;
# Finally, the &lt;code&gt;assertServiceIsDown&lt;/code&gt; succeeds because the &lt;code&gt;stopService&lt;/code&gt; command succeeded.
#* &lt;code&gt;end workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot;&lt;/code&gt;

The &lt;code&gt;stop.sh&lt;/code&gt; script invoked by the &lt;code&gt;stopService&lt;/code&gt; command removes the PID file that this mock service example uses to indicate the running process, so you should see that the PID file no longer exists:

&lt;pre&gt;
ls $CTL_BASE/var/tmp/mock.pid
ls: /Users/greg/ctier2/ctl/var/tmp/mock.pid: No such file or directory
&lt;/pre&gt;

==How it Works==

From Workbench's &quot;Service Manager&quot; page you can see the mock Service's resource model in a graphical representation:

[[Image:mock-service-screenshot.png]]

You should see the Service and a set of Setting child dependencies, and that the Service is deployed to one Node.

The mock Service resource model is defined in a [[project.xml|project XML]] file generated into the &lt;code&gt;$CTIER_ROOT/examples/mock-unix-service&lt;/code&gt;. directory. This section walks through the XML file used to define the Setting and Service resources.

Examine the contents of this file to see the full resource model definition excerpted below: 

&lt;code&gt;$CTIER_ROOT/examples/mock-unix-service/default-object.xml&lt;/code&gt;

===The Setting definitions===

The Service type defines a set of standard workflows to drive the startup and shutdown processes. Each of the discrete management tasks can be customized by defining a Setting child dependency of a specific type for the Service.  

[[Image:mock-service-uml.png|thumb|UML model]]

The diagram below describes the resource model for a Service deployed to one Node and configured to use several script settings. These settings specify a particular script to call via the related Service command.

[[Image:mock-service-example.png]]

When a Service life cycle command is called, the appropriate script is looked up and then invoked. The table below shows each command has a particular setting type where you declare the path to the script.

{| cellspacing=&quot;1&quot; cellpadding=&quot;4&quot; border=&quot;1&quot; style=&quot;border: 1px solid #aaa; border-collapse:collapse;&quot;
|-
!Setting 
!Command
!Example Script
|-
|ServiceStartScript
|startService
|start.sh
|-
|ServiceStopScript
|stopService
|stop.sh
|-
|ServiceIsUpScript
|assertServiceIsUp
|isup.sh
|-
|ServiceIsDownScript
|assertServiceIsDown
|isdown.sh
|}

Below is the XML used to define these settings for the Service's resource model.
The &lt;code&gt;[[Project-v10.xml#setting|setting]]&lt;/code&gt; tag is used to define each setting and the corresponding script location.  Notice that the &lt;code&gt;type=&lt;/code&gt; attribute declares the appropriate Setting type, the &lt;code&gt;name&lt;/code&gt; attributes all match the name of the Service we will define, and that the &lt;code&gt;settingValue&lt;/code&gt; is the full path of the appropriate script for that management task.

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;setting type=&quot;ServiceIsUpScript&quot; name=&quot;mock&quot; 
	   description=&quot;The script used by assertServicesIsUp&quot; 
	   settingValue=&quot;${env.CTIER_ROOT}/examples/mock-unix-service/scripts/isup.sh&quot; settingType=&quot;script&quot;/&gt;
&lt;setting type=&quot;ServiceIsDownScript&quot; name=&quot;mock&quot; 
	   description=&quot;The script used by assertServicesIsDown&quot; 
	   settingValue=&quot;${env.CTIER_ROOT}/examples/mock-unix-service/scripts/isdown.sh&quot; settingType=&quot;script&quot;/&gt;  
&lt;setting type=&quot;ServiceStopScript&quot; name=&quot;mock&quot; 
	   description=&quot;The script used by stopService&quot; 
	   settingValue=&quot;${env.CTIER_ROOT}/examples/mock-unix-service/scripts/stop.sh&quot; settingType=&quot;script&quot;/&gt;  
&lt;setting type=&quot;ServiceStartScript&quot; name=&quot;mock&quot; 
	   description=&quot;The script used by StartService&quot; 
	   settingValue=&quot;${env.CTIER_ROOT}/examples/mock-unix-service/scripts/start.sh&quot; settingType=&quot;script&quot;/&gt;
&lt;/syntaxhighlight&gt;

Each of the settings have use the same name (e.g,&lt;code&gt;name=&quot;mock&quot;&lt;/code&gt;) to make it more obvious that these settings are associated with the Service &quot;mock&quot;, defined below. This is a popular naming convention.

===The Service definition===

The Service is defined by a &lt;code&gt;[[Project-v10.xml#deployment|deployment]]&lt;/code&gt; tag. This element declares the name, type, and some paths (installRoot, basedir).  (These paths are often useful for defining a location to install the software components or other file resources for  the Service resource, but in this example they are not used.)

The settings are referenced in the &lt;code&gt;[[Project-v10.xml#resources|resources]]&lt;/code&gt; element. The Node where this Service is to be deployed is referenced in the &lt;code&gt;[[Project-v10.xml#referrers|referrers]]&lt;/code&gt; element.

The Settings (described above) and the Node are reference using a ''Resource Reference'' element, which identifies the appropriate object via the &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;type&lt;/code&gt; attributes.

(Also note: if packages would be installed during deployment, they would be included in the &lt;code&gt;&amp;lt;resources&amp;gt;&lt;/code&gt; as well. You can see an example with the [[Service Package Deployment Example]]). 

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
&lt;deployment 
    type=&quot;Service&quot;
    name=&quot;mock&quot; 
    description=&quot;A mock Service.&quot; 
    installRoot=&quot;${env.CTIER_ROOT}/examples/mock-unix-service&quot; 
    basedir=&quot;${env.CTIER_ROOT}/examples/mock-unix-service&quot; 
    startuprank=&quot;1&quot;&gt;

  &lt;resources&gt;
    &lt;!--
	  **
	  ** Service cycle scripts
	  **
    --&gt;
    &lt;resource name=&quot;mock&quot; type=&quot;ServiceIsDownScript&quot; /&gt;
    &lt;resource name=&quot;mock&quot; type=&quot;ServiceIsUpScript&quot; /&gt;
    &lt;resource name=&quot;mock&quot; type=&quot;ServiceStartScript&quot; /&gt;
    &lt;resource name=&quot;mock&quot; type=&quot;ServiceStopScript&quot; /&gt;
  &lt;/resources&gt;

  &lt;!--
	**
	** Define a parent dependency to the node where you are running this example. 
	**
  --&gt;
  &lt;referrers replace=&quot;false&quot;&gt;
    &lt;!--
	  ** Change this line to one that matches your node name:
    --&gt;
    &lt;resource type=&quot;Node&quot; name=&quot;localhost&quot;/&gt;
  &lt;/referrers&gt;
&lt;/deployment&gt;
&lt;/syntaxhighlight&gt;

===Command dispatching===

The startup and shutdown processes are managed via two Service workflow commands: [[Service_Concepts#Start|Start]] and [[Service_Concepts#Stop|Stop]].
Both workflows share a common design. Each check for a condition and if the condition is not met, an action is performed. Let's look at each of these workflows.

Service provides an implementation supporting a generic start up procedure that first checks if the service is up and if not, to then run a command to start the service. 

[[Image:Idempotent-start.png]]

You can see in the diagram that Start calls &lt;code&gt;[[Service_Concepts#assertServiceIsUp|assertServiceIsUp]]&lt;/code&gt; first. If it fails because the service is not running, then &lt;code&gt;[[Service_Concepts#startService|startService]]&lt;/code&gt; is executed.

Service also provides a program skeleton supporting a generic shutdown procedure that first checks if the service is down and if not, to then run a command to stop the service. 

[[Image:Idempotent-stop.png]]

You can see in the diagram that Stop calls &lt;code&gt;[[Service_Concepts#assertServiceIsDown|assertServiceIsDown]]&lt;/code&gt; first. If it fails because the service is running, then &lt;code&gt;[[Service_Concepts#stopService|stopService]]&lt;/code&gt; is executed.

Underlying these Service commands are the scripts that were configured via the setting definitions discussed above. All the service life cycle commands that call scripts assume a basic convention. If the script exits with a non-zero exit code, the command will fail otherwise it's interpreted as successful.

The scripts called by our simple mock Service are trivial but are representative of how you can incorporate your own procedures via scripts attached to Service commands. Let's look at each of them in turn. 

The &quot;isdown.sh&quot; script is called by &lt;code&gt;assertServiceIsDown&lt;/code&gt;. This command checks for the condition of the service is not up. In this case, the isdown.sh script checks for the non-existence of the mock.pid file. If it exists, the script exits with a non-zero exit (ie, &quot;exit 1&quot;).

File listing: isdown.sh
&lt;pre&gt;
#!/bin/sh
[ ! -f $CTL_BASE/var/tmp/mock.pid ] &amp;&amp; { echo &quot;DOWN&quot; ; } || { echo &quot;UP&quot; ; exit 1 ; }
&lt;/pre&gt;

The &quot;isup.sh&quot; script is called by &lt;code&gt;assertServiceIsUp&lt;/code&gt;. This command checks if the service is running. In this case, if the mock.pid file exists, the service is assumed running otherwise it exits with a non-zero exit code.

File listing: isup.sh
&lt;pre&gt;
#!/bin/sh
[ -f $CTL_BASE/var/tmp/mock.pid ] &amp;&amp; { echo &quot;UP&quot; ; } || { echo &quot;DOWN&quot; ; exit 1 ; }
&lt;/pre&gt;

The &quot;start.sh&quot; script is called by &lt;code&gt;startService&lt;/code&gt;. The &quot;start.sh&quot; script simulates the service startup procedure. Normally, this script would launch a process. For this trivial implementation, it creates the &quot;mock.pid&quot; file.

File listing: start.sh
&lt;pre&gt;
#!/bin/sh
touch $CTL_BASE/var/tmp/mock.pid
&lt;/pre&gt;

The &quot;stop.sh&quot; script is called by the &lt;code&gt;stopService&lt;/code&gt; command. The &quot;stop.sh&quot; script simulates the service shutdown procedure. Normally, this script would stop the service process in some way. For this example, it simply removes the &quot;mock.pid&quot; file.

File listing: stop.sh
&lt;pre&gt;
#!/bin/sh
rm $CTL_BASE/var/tmp/mock.pid
&lt;/pre&gt;

===The Output===

First let's look at the &lt;code&gt;Start&lt;/code&gt; command.

&lt;pre&gt;ctl -p demo -t Service -r mock -c Start&lt;/pre&gt;

You can see from the output the Start command is a workflow that calls &lt;code&gt;assertServiceIsUp&lt;/code&gt;. That command is configured to call the script defined by the ServiceIsUpScript setting, &quot;isup.sh&quot;. The first time Start is called the mock.pid file does not exist so isup.sh exits with a non-zero code causing the workflow to pass control to the error-handler. The error handler then runs &lt;code&gt;startService&lt;/code&gt; which is configured via the ServiceStartScript setting to call &quot;start.sh&quot;:

&lt;pre&gt;
begin workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot; ...
Executing bourne shell script: /Users/alexh/ctier/examples/mock-unix-service/scripts/isup.sh
DOWN
Running handler command: startService
Executing bourne shell script: /Users/alexh/ctier/examples/mock-unix-service/scripts/start.sh
end workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot;
&lt;/pre&gt;

Next, let's look at the &lt;code&gt;Stop&lt;/code&gt; command. 
&lt;pre&gt;ctl -p demo -t Service -r mock -c Stop&lt;/pre&gt;

It works very much like the Start command. You can see in the output the &lt;code&gt;assertServiceIsDown&lt;/code&gt; command is called. That command is configured to call the script defined by ServiceIsDownScript setting, &quot;isdown.sh&quot;. If the isdown.sh script finds an existing mock.pid file, then it exits with a non-zero code causing the workflow to pass control to the error-handler. The error handler runs &quot;stopService&quot; which is configured via the ServiceStopScript setting to call &quot;stop.sh&quot;:

&lt;pre&gt;
begin workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot; ...
Executing bourne shell script: /Users/alexh/ctier/examples/mock-unix-service/scripts/isdown.sh
UP
Running handler command: stopService
Executing bourne shell script: /Users/alexh/ctier/examples/mock-unix-service/scripts/stop.sh
end workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot;
&lt;/pre&gt;

You can manually create and remove the mock.pid file outside of these commands to and re run the individual commands.

Remove the pid file:
&lt;pre&gt;
rm $CTL_BASE/var/tmp/mock.pid
&lt;/pre&gt;

Now run the &lt;code&gt;assertServiceIsUp&lt;/code&gt; command. You will see it fail.
&lt;pre&gt;
$ ctl -p demo -t Service -r mock -c assertServiceIsUp
Executing bourne shell script: /Users/alexh/ctier/examples/mock-unix-service/scripts/isup.sh
DOWN

Command failed: The following error occurred while executing this line:
/Users/alexh/ctier/ctl/projects/demo/modules/Service/lib/antlib.xml:50: exec returned: 1
&lt;/pre&gt;

Now touch the file.
&lt;pre&gt;
touch $CTL_BASE/var/tmp/mock.pid
&lt;/pre&gt;

Run the &lt;code&gt;assertServiceIsUp&lt;/code&gt; command again:
&lt;pre&gt;
$ ctl -p demo -t Service -r mock -c assertServiceIsUp
Executing bourne shell script: /Users/alexh/ctier/examples/mock-unix-service/scripts/isup.sh
UP
&lt;/pre&gt;
The command completes successfully.

==Related Topics==

* [[Mock Site Example]] explains how to manage a set of Services as a logically controlled group.
* [[Service Package Deployment Example]] shows the deployment of an application server container and webapp along with startup/shutdown and configuration file customization.

{{Manual/navbox}}

[[Category:Service Examples]]</text>
    </revision>
  </page>
  <page>
    <title>Mock site example for windows</title>
    <id>960</id>
    <revision>
      <id>14248</id>
      <timestamp>2010-11-10T21:49:13Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>/* Related Topics */</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Examples&lt;/categorytree&gt;
{{Version Required|3.4.3}}

:''Note'': This document describes how to run the example with Windows.  For Unix instructions, see [[Mock Site Example]].

The Mock Site Example shows the basics of using an object of the [[Core_Type_Guide#Site|Site]] type, which allows you to dispatch commands to all Service resources organized within the Site.  

This example defines two [[Core_Type_Guide#Service|Service]] objects and groups them beneath one Site object. Commands executed on the Site object are automatically dispatched down to the Services in accordance to their ranking.  The ranking is determined by the ''startuprank'' property, which is simply a number which orders the Services relative to each other, and is used by the Site commands to determine the order in which the resources should be used. By default for most dispatched commands, ranks are sorted in ascending order except for the Stop command which sorts startup rank values in descending order.

The Service lifecycle commands (see the [[Service Concepts]] document for more information) are: &lt;code&gt;Start&lt;/code&gt;,&lt;code&gt;Stop&lt;/code&gt;, and &lt;code&gt;Status&lt;/code&gt;.  Each of these commands is also defined in the Site type as a ''Dispatch'' command.  When you call one of these commands on a Site object, it iterates over each of its Service child dependencies and sends the same command to each Service, in the order determined by the ''startuprank''.  This makes it easy to control an entire set of Services using a single command sent to the Site.

The Site Type also has a command named &lt;code&gt;dispatchCmd&lt;/code&gt;.  You can use this command to send ''any'' subcommand to the entire set of Services within the Site.  You may have Service resources which have other special-purpose commands that the Site doesn't know about, and you can relay those using the &lt;code&gt;dispatchCmd&lt;/code&gt; command in the same way that the &lt;code&gt;Start&lt;/code&gt;,&lt;code&gt;Stop&lt;/code&gt;, and &lt;code&gt;Status&lt;/code&gt; lifecycle commands work automatically.

This Example shows you how to do the following things:

# Use the &lt;code&gt;Start&lt;/code&gt;,&lt;code&gt;Stop&lt;/code&gt;, and &lt;code&gt;Status&lt;/code&gt; lifecycle commands from a Site, where the commands will be dispatched to the Services
# Use the &lt;code&gt;dispatchCmd&lt;/code&gt; command to dynamically dispatch any named command to the Services for the Site.
# Use the [[project.xml]] resource model format to define a Site object and its related Services

The Example does not define any actual implementation for the lifecycle command scripts.  It merely demonstrates how to use the Site to dispatch commands to the Site's Service resources.  (For an example on how to implement the lifecycle commands for a Service, see the [[Mock Unix Service Example]] or the [[Windows service example]].)

The diagram below describes two Services (mock1 and mock2) grouped within one Site (mock). Notice also each Service resource has its own &lt;code&gt;startuprank&lt;/code&gt; value.  &lt;code&gt;mock1&lt;/code&gt; has a ''startuprank'' of 1, and &lt;code&gt;mock2&lt;/code&gt; has a ''startuprank'' of 2:

[[Image:mock-site-example.png]]

Site commands normally execute commands in ascending startup rank order. Below you can see &quot;mock1&quot; is first to run &quot;Start&quot; and after that completes, &quot;mock2&quot; runs Start:

[[Image:mock-site-startup.png]]

The Stop command executes commands in descending startup rank order:

[[Image:mock-site-shutdown.png]]

This time &quot;mock2&quot; runs Stop first and once it completes, &quot;mock1&quot; runs Stop.

==Dependencies==
This has these dependencies.
* [[ControlTier 3.4.3]]
** Meet the prerequisites and install ControlTier according to the [[Installation|Installing ControlTier]] instructions.
* '''Windows''' Operating System
** For Linux or Unix, see: [[Mock Site Example]].

==Building the Example==
Follow the instructions in this section to setup the example code into your environment.  

'''Note''': Don't worry about what these commands do, as they just bootstrap the example code to work in your environment and to pre-load the resource model for you. (For complete detail about how to use the [[Examples]] see [[Using the Examples]]):

Execute these bootstrap steps:

# &lt;pre&gt;cd %CTIER_ROOT%\examples\mock-site&lt;/pre&gt;
#* At the command line, navigate to the &lt;code&gt;examples\mock-site&lt;/code&gt; directory under your &lt;code&gt;%CTIER_ROOT%&lt;/code&gt; directory.
# Edit the file: &lt;code&gt;templates\defaults.xml&lt;/code&gt; (optional)
#* Examine and possibly modify the &lt;code&gt;templates\defaults.xml&lt;/code&gt; file to contain suitable node name values.
# &lt;pre&gt;ctl -p demo -m ProjectBuilder -c Register -- -xml projectbuilder.xml -install&lt;/pre&gt;	
#* This loads a ProjectBuilder object definition into the ControlTier Server.
# &lt;pre&gt;ctl -p demo -t ProjectBuilder -r mock-site -c Build&lt;/pre&gt;
#* Builds a working example based on template files and your working environment. Later see [[Using_the_Examples#Further_Customization|Further Customization]]

The result of these bootstrap steps results in a Site resource named &quot;mock&quot; that you can use to control the life cycle of two Services, &quot;mock1&quot; and &quot;mock2&quot;.

You are now ready to run the examples.

==Running the Example==

You can run any of the Site commands via CTL like so:

&lt;pre&gt;
ctl -p demo -t Site -r mock -c &lt;command-name&gt;
&lt;/pre&gt;

If you run the command without the &quot;-c ''&lt;command-name&gt;''&quot; parameter you will see a listing of commands.

In the commands below, we will show the output of the command first, then an explanation of what occurred.

===Run Start===
The &lt;code&gt;[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Site.html#cmd_Start Start]&lt;/code&gt; command calls Start on the Service resources, in the order determined by the ''startuprank''. Notice how the Start command is called on &quot;mock1&quot; before &quot;mock2&quot;. 

''execute:''

&lt;pre&gt;
ctl -p demo -t Site -r mock -c Start
&lt;/pre&gt;

''output:''

&lt;pre&gt;
Dispatching command 'Start' to objects: mock1[Service], mock2[Service] ...
starting: mock1[Service]-&gt;Start ...
starting: mock2[Service]-&gt;Start ...
begin workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot; ...
end workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot;
begin workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot; ...
end workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot;
&lt;/pre&gt;

''What happened?''

# The Start command determines the order of the Services, and indicates the commands that will be dispatched
#* &lt;code&gt;Dispatching command 'Start' to objects: mock1[Service], mock2[Service] ...&lt;/code&gt;
#* &lt;code&gt;starting: mock1[Service]-&gt;Start ...&lt;/code&gt;
#* &lt;code&gt;starting: mock2[Service]-&gt;Start ...&lt;/code&gt;
# After that, it then sends the &lt;code&gt;Start&lt;/code&gt; command to each Service.  The &lt;code&gt;Start&lt;/code&gt; command invokes the &lt;code&gt;assertServiceIsUp&lt;/code&gt;. 
#* &lt;code&gt;begin workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot; ...&lt;/code&gt;
#* &lt;code&gt;end workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot;&lt;/code&gt;

Since this is a &quot;mock&quot; Site example, the Services don't actually do any startup routine, and merely succeed quietly.  But you can see that the order was correct as determined by the ''startuprank'', and that each Service actually ran the &lt;code&gt;Start&lt;/code&gt; command as intended.

===Run Status===
The &lt;code&gt;[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Site.html#cmd_Status Status]&lt;/code&gt; command dispatches to &quot;Status&quot; to all Services bound to this Site,  and the Status command uses the same sort order as does Start.

''execute:''

&lt;pre&gt;
ctl -p demo -t Site -r mock -c Status
&lt;/pre&gt;

''output:''

&lt;pre&gt;
Dispatching command 'Status' to objects: mock1[Service], mock2[Service] ...
starting: mock1[Service]-&gt;Status ...
starting: mock2[Service]-&gt;Status ...
begin workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot; ...
end workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot;
begin workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot; ...
end workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot;
&lt;/pre&gt;

''What happened?''

Exactly as with &lt;code&gt;Start&lt;/code&gt; command above, the &lt;code&gt;Status&lt;/code&gt; command was dispatched to each of the Services in the correct order, and the underlying &lt;code&gt;assertServiceIsUp&lt;/code&gt; command is then executed for each Service.

===Run Stop===
The &lt;code&gt;[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Site.html#cmd_Stop Stop]&lt;/code&gt; command calls Stop on the Service resources. Since the Stop command uses the ''startuprank'' property in ''descending'' order to sort the Services, Stop is called on &quot;mock2&quot; before &quot;mock2&quot;.  Stop works in reverse order relative to Start, as this is typically the behavior desired when managing a set of related software services.

''execute:''

&lt;pre&gt;
ctl -p demo -t Site -r mock -c Stop
&lt;/pre&gt;

''output:''

&lt;pre&gt;
Dispatching command 'Stop' to objects: mock2[Service], mock1[Service] ...
starting: mock2[Service]-&gt;Stop ...
starting: mock1[Service]-&gt;Stop ...
begin workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot; ...
end workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot;
begin workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot; ...
end workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot;
&lt;/pre&gt;

''What happened?''

# The Stop command determines the order of the Services to dispatch to, now executing on mock2 prior to mock1:
#* &lt;code&gt;Dispatching command 'Stop' to objects: mock2[Service], mock1[Service] ...&lt;/code&gt;
#* &lt;code&gt;starting: mock2[Service]-&gt;Stop ...&lt;/code&gt;
#* &lt;code&gt;starting: mock1[Service]-&gt;Stop ...&lt;/code&gt;
# The Stop command is then executed on the two Services in the order shown, which invokes the &lt;code&gt;assertServiceIsDown&lt;/code&gt; in turn.

===Run dispatchCmd===
The &lt;code&gt;[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Mediator.html#cmd_dispatchCmd dispatchCmd]&lt;/code&gt; command lets you dispatch any command to a Site's services
* The command to be dispatched must exist in the Services but is not required to have been defined in the Site itself
* The &lt;code&gt;-resourcename&lt;/code&gt; and &lt;code&gt;-resourcetype&lt;/code&gt; options filter which Services to match (Regular expressions allowed)

The example below runs the &quot;assertServiceIsUp&quot; command across all Service instances, using the regular expression &lt;code&gt;mock[12]&lt;/code&gt; to match both the mock1 and mock2 Services.  The default sortorder is &quot;ascending&quot;, so the mock1 Service is dispatched to first:

''execute:''

&lt;pre&gt;
ctl -p demo -t Site -r mock -c dispatchCmd -- -resourcename 'mock[12]' -command assertServiceIsUp
&lt;/pre&gt;

''output:''

&lt;pre&gt;
dispatching command: &quot;assertServiceIsUp &quot; to: [(Service) mock1,(Service) mock2 ]...
dispatching to resource: mock1 [Service] -&gt; &quot;assertServiceIsUp &quot;
dispatching to resource: mock2 [Service] -&gt; &quot;assertServiceIsUp &quot;
dispatched command: assertServiceIsUp completed for objects: (Service) mock1,(Service) mock2
&lt;/pre&gt;

''What happened?''

The &lt;code&gt;assertServiceIsUp&lt;/code&gt; is dispatched in the ascending order of ''startuprank''.

We can select the sortorder using the &lt;code&gt;-sortorder&lt;/code&gt; option.  If we use it with the value &quot;descending&quot; we will see the dispatch happen in reverse order:

''execute:''

&lt;pre&gt;
ctl -p demo -t Site -r mock -c dispatchCmd -- -resourcename 'mock[12]' -command assertServiceIsUp -sortorder descending
&lt;/pre&gt;

''output:''

&lt;pre&gt;
dispatching command: &quot;assertServiceIsUp &quot; to: [(Service) mock2,(Service) mock1 ]...
dispatching to resource: mock2 [Service] -&gt; &quot;assertServiceIsUp &quot;
dispatching to resource: mock1 [Service] -&gt; &quot;assertServiceIsUp &quot;
dispatched command: assertServiceIsUp completed for objects: (Service) mock2,(Service) mock1
&lt;/pre&gt;

==How it Works==

The mock Site resource model is defined in a [[project.xml|project XML]] file generated into the &lt;code&gt;$CTIER_ROOT/examples/mock-site&lt;/code&gt;. directory. This section walks through the XML definition files used to define the Site and Service resources.

Examine the contents of this file to see the full resource model definition excerpted below: 

&lt;code&gt;%CTIER_ROOT%\examples\mock-site\default-object.xml&lt;/code&gt;

===The Service definitions===

From Workbench's &quot;Service Manager&quot; page you can navigate to the mock[Site] object and click its link. From that page you can graph the resource model for it and see the graph below:

[[Image:mock-site-graph.png]]

There are two Service definitions, one for &quot;mock1&quot; and another for &quot;mock2&quot;. Services are defined using the &lt;code&gt;[[Project-v10.xml#deployment|deployment]]&lt;/code&gt; tag and its attributes.

The &quot;mock1&quot; Service resource is shown first. Notice the ''startuprank'' attribute uses the value &quot;1&quot;.
&lt;pre&gt;
&lt;deployment 
    type=&quot;Service&quot;
    name=&quot;mock1&quot; 
    description=&quot;The first mock Service.&quot; 
    installRoot=&quot;${env.CTIER_ROOT}/examples/mock-site&quot; 
    basedir=&quot;${env.CTIER_ROOT}/examples/mock-site&quot; 
    startuprank=&quot;1&quot;&gt;
    &lt;!--
  &lt;resources&gt;
  &lt;/resources&gt;
    --&gt; 
  &lt;!--
	**
	** Define a parent dependency to the node where you are running this example. 
	**
  --&gt;
  &lt;referrers replace=&quot;false&quot;&gt;
    &lt;!--
	  ** Change this line to one that matches your node name:
    --&gt;
    &lt;resource type=&quot;Node&quot; name=&quot;strongmad.local&quot;/&gt;
  &lt;/referrers&gt;
&lt;/deployment&gt;
&lt;/pre&gt;

The &quot;mock2&quot; Service resource is shown next. Notice the ''startuprank'' attribute uses the value &quot;2&quot;.
&lt;pre&gt;
&lt;deployment 
    type=&quot;Service&quot;
    name=&quot;mock2&quot; 
    description=&quot;The first mock Service.&quot; 
    installRoot=&quot;${env.CTIER_ROOT}/examples/mock-site&quot; 
    basedir=&quot;${env.CTIER_ROOT}/examples/mock-site&quot; 
    startuprank=&quot;2&quot;&gt;
    &lt;!--
  &lt;resources&gt;
  &lt;/resources&gt;
    --&gt; 
  &lt;!--
	**
	** Define a parent dependency to the node where you are running this example. 
	**
  --&gt;
  &lt;referrers replace=&quot;false&quot;&gt;
    &lt;!--
	  ** Change this line to one that matches your node name:
    --&gt;
    &lt;resource type=&quot;Node&quot; name=&quot;strongmad.local&quot;/&gt;
  &lt;/referrers&gt;
&lt;/deployment&gt;
&lt;/pre&gt;

===The Site definition===

The &quot;mock&quot; Site object is defined next. It binds the two Service resources, mock1 and mock2, as child resources. 
The &lt;code&gt;resources&lt;/code&gt; tag lets you represent &quot;whole-part&quot; relationships between objects. Each of the Service resources is referenced via the &lt;code&gt;resource&lt;/code&gt; tag:

&lt;pre&gt;
&lt;deployment 
    type=&quot;Site&quot;
    name=&quot;mock&quot; 
    description=&quot;The mock deployment site.&quot; &gt;
  &lt;resources&gt;
    &lt;!--
	  ** Bind the mock1 and mock2 Services to this Site:
    --&gt;
    &lt;resource type=&quot;Service&quot; name=&quot;mock1&quot;/&gt;
    &lt;resource type=&quot;Service&quot; name=&quot;mock2&quot;/&gt;
  &lt;/resources&gt;
  &lt;!--
	**
	** Define a parent dependency to the node where you are running this example. 
	**
  --&gt;
  &lt;referrers replace=&quot;false&quot;&gt;
    &lt;!--
	  ** Change this line to one that matches your node name:
    --&gt;
    &lt;resource type=&quot;Node&quot; name=&quot;strongmad.local&quot;/&gt;
  &lt;/referrers&gt;
&lt;/deployment&gt;
&lt;/pre&gt;

===Command dispatching===

After the Site and Service resources were defined they were loaded and installed by the steps in the [[#Building the Example]] section. Once installed, commands could be executed via the CTL command dispatcher. In these examples, dispatching occurs at two levels:
# Site command invocation: At this level, the &lt;code&gt;ctl&lt;/code&gt; command line is used to call the specified command in the context of the mock Site object. The dispatcher resolves the command and invokes it for the Site.
# Service command invocation: The Site commands are nothing more than relays to the bound Services. At this level, the Site commands call the CTL command dispatcher directly, specifying to it the command and the resources they want to target.

===The Output===

First let's look at the Start command. 

You can preview the actions of the Start workflow from Workbench. Navigate to the mock[Site] object in the &quot;Service Manager&quot; and press the &quot;Commands&quot; tab. Locate the &quot;Start&quot; workflow and press the yellow button to right.
You will see the Process Flow view display workflow structure across the commands that are dispatched by Start.

[[Image:mock-site-start-flow.png]]

From the command line you ran:
&lt;pre&gt;
C:\ctier\examples\mock-site&gt; ctl -p demo -t Site -r mock -c Start
&lt;/pre&gt;
You can see from the output that the Site has dispatched &quot;Start&quot; to &quot;mock1[Service], mock2[Service]&quot; objects.
The next two lines are from the command dispatcher invoking the Start command on the Service resources. The last four lines are output from the Service Start commands and reflect that the Service's Start command is a workflow that calls &quot;assertServiceIsUp&quot;:
&lt;pre&gt;
Dispatching command 'Start' to objects: mock1[Service], mock2[Service] ...
starting: mock1[Service]-&gt;Start ...
starting: mock2[Service]-&gt;Start ...
begin workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot; ...
end workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot;
begin workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot; ...
end workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot;
&lt;/pre&gt;


Next, let's look at the Stop command.

You can preview the actions of the Stop workflow from Workbench. Navigate to the mock[Site] object in the &quot;Service Manager&quot; and press the &quot;Commands&quot; tab. Locate the &quot;Stop&quot; workflow and press the yellow button to right.
You will see the Process Flow view display workflow structure across the commands that are dispatched by Stop.

[[Image:mock-site-stop-flow.png]]

From the command line you ran:

&lt;pre&gt;
C:\ctier\examples\mock-site&gt; ctl -p demo -t Site -r mock -c Stop
&lt;/pre&gt;
You can see from the output that the Site has dispatched &quot;Stop&quot; to &quot;mock2[Service], mock1[Service]&quot; objects. The &quot;mock2&quot; object now precedes the &quot;mock1&quot; since the Site has specified a descending sort order for this command.
The next two lines are from the command dispatcher invoking the Stop command on the Service resources. The last four lines are output from the Service Stop commands and reflect that the Service's Stop command is a workflow that calls &quot;assertServiceIsDown&quot;:&lt;pre&gt;
Dispatching command 'Stop' to objects: mock2[Service], mock1[Service] ...
starting: mock2[Service]-&gt;Stop ...
starting: mock1[Service]-&gt;Stop ...
begin workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot; ...
end workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot;
begin workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot; ...
end workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot;
&lt;/pre&gt;

==Related Topics==
* The [[Site_Coordination_Models]] page describes various forms of nesting Sites to coordinate groups of Services using hierarchical forms.
* [[Mock Service Example]] shows how to attach your own scripts to the Service types startup and shutdown workflows.

{{Manual/navbox}}

[[Category:Site Examples]]
[[Category:Windows Examples]]
[[Category:Site]]</text>
    </revision>
  </page>
  <page>
    <title>Mod dav</title>
    <id>2222</id>
    <revision>
      <id>15413</id>
      <timestamp>2011-06-30T17:13:15Z</timestamp>
      <contributor>
        <username>Chuck</username>
        <id>13</id>
      </contributor>
      <comment>3.6.1 rc info</comment>
      <text xml:space="preserve">= Adding apache mod_dav support to ControlTier =

This is a how-to for replacing jackrabbit in favor of apache mod_dav
NOTE:  this is for a brand new installation.  Regarding an existing installation where jackrabbit is currently in operation consider:  [[MigratingToApacheModDav]]

==Requirements==

* ControlTier 3.6.1 Installed 
** NOTE:  this is a pending release, check [http://sourceforge.net/projects/controltier/files/Installer/ here] for the official 3.6.1 release.   If not, consider the [http://services.dtosolutions.com:8080/job/ControlTier-3.6.1-server.rpm/lastSuccessfulBuild/artifact/controltier/ctiersvn/installer/target/rpm/RPMS/noarch/ctier-server-3.6.1-0rc1.noarch.rpm 3.6.1 release candidate].
* '''NOTE''':  3.6.0 does not include compatibility fixes for mod_dav/apache
* Can authenticate as the default/default user
* nice to have:
** decent dav client to test with, try cadaver:
&lt;pre&gt;
[root@centos-55-64-vm7 webdav]# rpm -q cadaver
cadaver-0.22.3-4.el5
&lt;/pre&gt;
* Do not configure a BAD /etc/hosts where the hostname is aliased to the loopback, this is a very bad /etc/hosts file:
&lt;pre&gt;
127.0.0.1              centos-55-64-vm7.local localhost.localdomain localhost
&lt;/pre&gt;
* This is a GOOD /etc/hosts file:
&lt;pre&gt;
127.0.0.1              localhost.localdomain localhost
&lt;/pre&gt;



==Assumptions==

* Tested on Centos 5.5 and 5.6
&lt;pre&gt;[root@centos-55-64-vm7 rundeck]# rpm -q centos-release
centos-release-5-5.el5.centos&lt;/pre&gt;
* ControlTier 3.6.1 rpm installation
* Standard apache installation package:
&lt;pre&gt;[root@centos-55-64-vm7 rundeck]# rpm -q httpd
httpd-2.2.3-43.el5.centos&lt;/pre&gt;
** '''NOTE''':  the standard httpd distribution already has mod_dav support
&lt;pre&gt;
[root@centos-55-64-vm7 etc]# rpm -q httpd --filesbypkg |grep mod_dav
httpd                     /usr/lib64/httpd/modules/mod_dav.so
httpd                     /usr/lib64/httpd/modules/mod_dav_fs.so
&lt;/pre&gt;
*Webdav root directory:  /opt/webdav/repository 
** NOTE:  with decent disk space
*Authentication:  files based, see [[mod_dav_ldap]] regarding ldap support for existing controltier roles

==Procedure==

===Create a new Webdav Repository===

* Create an apache webdav directory structure with apache user/group ownerships and group write repository directory:
&lt;pre&gt;
[root@centos-55-64-vm7 conf.d]# mkdir -p /opt/webdav/repository
[root@centos-55-64-vm7 conf.d]# mkdir -p /opt/webdav/etc
[root@centos-55-64-vm7 conf.d]# cd /opt/webdav
[root@centos-55-64-vm7 webdav]# chown -R apache:apache .
[root@centos-55-64-vm7 webdav]# chmod -R g+w repository
[root@centos-55-64-vm7 webdav]# ls -ld .
drwxr-xr-x 5 apache apache 4096 May 19 10:24 .
[root@centos-55-64-vm7 webdav]# find . -ls
818818    4 drwxr-xr-x   5 apache   apache       4096 May 19 10:24 .
818822    4 drwxrwxr-x   3 apache   apache       4096 Jun 24 13:30 ./repository
818820    4 drwxr-xr-x   2 apache   apache       4096 Jun 24 13:21 ./etc
&lt;/pre&gt;
*Apply mod_dav configuration adding authenticated read/write for ControlTier and public read / authenticated writes for the rest of the webdav share:
&lt;pre&gt;[root@centos-55-64-vm7 rundeck]# cd /etc/httpd/conf.d/
[root@centos-55-64-vm7 conf.d]# pwd
/etc/httpd/conf.d
[root@centos-55-64-vm7 conf.d]# vi httpd-webdav.conf
[root@centos-55-64-vm7 conf.d]# cat httpd-webdav.conf
#
# WebDAV module configuration section.
#

&lt;IfModule mod_dav_fs.c&gt;

   #authenticated controltier read/write repository
   Alias /webdav/repository/controltier &quot;/opt/webdav/repository/controltier&quot;
   &lt;Directory /opt/webdav/repository/controltier&gt;
      DAV On

      Options +Indexes
      IndexOptions FancyIndexing

      AuthType Basic
      AuthName &quot;Apache Webdav Repository&quot;
      AuthUserFile /opt/webdav/etc/httpd-webdav.users


      Order allow,deny
      Allow from all
      Require valid-user

      &lt;LimitExcept HEAD GET POST OPTIONS PROPFIND&gt;
         Allow from all
      &lt;/LimitExcept&gt;
      &lt;Limit MKCOL PUT DELETE LOCK UNLOCK COPY MOVE PROPPATCH&gt;
         Allow from all
      &lt;/Limit&gt;

   &lt;/Directory&gt; 

   #ensure general public read to the repository and authenticated writes
   Alias /webdav/repository &quot;/opt/webdav/repository&quot;
   &lt;Directory /opt/webdav/repository&gt;
      DAV On

      Options +Indexes
      IndexOptions FancyIndexing

      AuthType Basic
      AuthName &quot;General Webdav Repository&quot;
      AuthUserFile /opt/webdav/etc/httpd-webdav.users

      Order allow,deny
      Allow from all

      &lt;LimitExcept HEAD GET POST OPTIONS PROPFIND&gt;
         Allow from all
      &lt;/LimitExcept&gt;
      &lt;Limit MKCOL PUT DELETE LOCK UNLOCK COPY MOVE PROPPATCH&gt;
         Allow from all
         Require valid-user
      &lt;/Limit&gt;

   &lt;/Directory&gt;

&lt;/IfModule&gt;&lt;/pre&gt;
* Create the default user in the htpasswd file
&lt;pre&gt;
[root@centos-55-64-vm7 conf.d]# sudo -u apache htpasswd -bc  /opt/webdav/etc/httpd-webdav.users  default default
Adding password for user default
[root@centos-55-64-vm7 conf.d]# cat  /opt/webdav/etc/httpd-webdav.users
default:Xj22sGPdM9p2M
&lt;/pre&gt;
* Restart apache
&lt;pre&gt;
[root@centos-55-64-vm7 conf.d]# /etc/rc.d/init.d/httpd restart
Stopping httpd:                                            [  OK  ]
Starting httpd: [Fri Jun 24 13:27:24 2011] [warn] NameVirtualHost *:80 has no VirtualHosts
                                                           [  OK  ]
&lt;/pre&gt;
==Test mod_dav==
&lt;pre&gt;
[root@centos-55-64-vm7 conf.d]# cadaver http://$(hostname)/webdav/repository
dav:/webdav/repository/&gt; 
dav:/webdav/repository/&gt; mkcol testCollection
Authentication required for ControlTier Webdav Repository on server `centos-55-64-vm7.local':
Username: default
Password: 
Creating `testCollection': succeeded.
dav:/webdav/repository/&gt; lcd /etc/
dav:/webdav/repository/&gt; put passwd
Uploading passwd to `/webdav/repository/passwd':
Progress: [=============================&gt;] 100.0% of 286 bytes succeeded.
dav:/webdav/repository/&gt; ls
Listing collection `/webdav/repository/': succeeded.
Coll:   testCollection                         0  Jun 24 13:29
        passwd                              2005  Jun 24 13:30
dav:/webdav/repository/&gt; rm passwd
Deleting `passwd': succeeded.
dav:/webdav/repository/&gt; rmcol testCollection
Deleting collection `testCollection': succeeded.
&lt;/pre&gt;

== Apply new webdav configuration to ControlTier ==

* Apply ControlTier modifications to the following files:
&lt;ol&gt;
&lt;li&gt;/opt/ctier/pkgs/jetty-6.1.21/webapps/itnav/WEB-INF/classes/runtime.properties&lt;/li&gt;
&lt;li&gt;/opt/ctier/ctl/etc/project.properties&lt;/li&gt;
&lt;li&gt;/opt/ctier/ctl/etc/framework.properties&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;/opt/ctier/pkgs/jetty-6.1.21/webapps/itnav/WEB-INF/classes/runtime.properties:
&lt;pre&gt;
[root@centos-55-64-vm6 conf.d]# su - ctier
[ctier@centos-55-64-vm6 ~]$ 
[ctier@centos-55-64-vm6 ~]$  diff /opt/ctier/pkgs/jetty-6.1.21/webapps/itnav/WEB-INF/classes/runtime.properties /opt/ctier/pkgs/jetty-6.1.21/webapps/itnav/WEB-INF/classes/runtime.properties.orig  
23d22
156,157c155
&lt; dav.baseUrl = http://centos-55-64-vm7.local/webdav/repository/controltier
---
&gt; dav.baseUrl = http://centos-55-64-vm7.local:8080/jackrabbit/repository/controltier
162c160
&lt; dav.baseDir = /opt/ctier/webdav/repository/controltier
---
&gt; dav.baseDir = /opt/ctier/jackrabbit/repository/controltier
193,194c191
&lt; order.package.defaults.packageRepoURL.template=http://centos-55-64-vm7.local/webdav/repository/controltier/pkgs/@project@/@resourceType@/@defaults.packageFiletype@s/FILENAME
---
&gt; order.package.defaults.packageRepoURL.template=http://centos-55-64-vm7.local:8080/jackrabbit/repository/controltier/pkgs/@project@/@resourceType@/@defaults.packageFiletype@s/FILENAME
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;/opt/ctier/ctl/etc/project.properties (NOTE:  this must be changed on each CTL Client):
&lt;pre&gt;
&lt; project.resources.url = http://centos-55-64-vm7.local/webdav/repository/controltier/projects/${project.name}/etc/resources.xml
&lt; project.nodes.url = http://centos-55-64-vm7.local/webdav/repository/controltier/projects/${project.name}/etc/resources.xml
---
&gt; project.resources.url = http://centos-55-64-vm7.local:8080/jackrabbit/repository/controltier/projects/${project.name}/etc/resources.xml
&gt; project.nodes.url = http://centos-55-64-vm7.local:8080/jackrabbit/repository/controltier/projects/${project.name}/etc/resources.xml
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;/opt/ctier/ctl/etc/framework.properties  (NOTE:  this must be changed on each CTL Client):
&lt;pre&gt;
&lt; framework.dav.rootDir = /opt/webdav/repository/controltier
---
&gt; framework.dav.rootDir = /opt/ctier/pkgs/jetty-6.1.21/webapps/jackrabbit/repository/controltier
219,220c219,220
---
226,233c226,233
&lt; framework.webdav.uri = http://centos-55-64-vm7.local/webdav/repository/controltier
&lt; framework.webdav.rootdir = /opt/webdav/repository/controltier
&lt; 
&lt; framework.pkgRepo.uri = http://centos-55-64-vm7.local/webdav/repository/controltier/pkgs
&lt; framework.pkgRepo.rootdir = /opt/webdav/repository/controltier/pkgs
&lt; framework.pkgRepo.upload-url = http://centos-55-64-vm7.local/webdav/repository/controltier/pkgs
---
&gt; framework.webdav.uri = http://centos-55-64-vm7.local:8080/jackrabbit/repository/controltier
&gt; framework.webdav.rootdir = /opt/ctier/pkgs/jetty-6.1.21/webapps/jackrabbit/repository/controltier
&gt; 
&gt; framework.pkgRepo.uri = http://centos-55-64-vm7.local:8080/jackrabbit/repository/controltier/pkgs
&gt; framework.pkgRepo.rootdir = /opt/ctier/pkgs/jetty-6.1.21/webapps/jackrabbit/repository/controltier/pkgs
&gt; framework.pkgRepo.upload-url = http://centos-55-64-vm7.local:8080/jackrabbit/repository/controltier/pkgs
243c243
&lt; framework.moduleRepo.url = http://centos-55-64-vm7.local/webdav/repository/controltier/artifacts/modules
---
&gt; framework.moduleRepo.url = http://centos-55-64-vm7.local:8080/jackrabbit/repository/controltier/artifacts/modules
&lt;/pre&gt;
&lt;/li&gt;
* restart ControlTier:
&lt;pre&gt;
[root@centos-55-64-vm7 conf.d]# /etc/rc.d/init.d/ctier stop
[root@centos-55-64-vm7 conf.d]# /etc/rc.d/init.d/ctier start
&lt;/pre&gt;</text>
    </revision>
  </page>
  <page>
    <title>Mod dav ldap</title>
    <id>2224</id>
    <revision>
      <id>15412</id>
      <timestamp>2011-06-29T22:08:57Z</timestamp>
      <contributor>
        <username>Chuck</username>
        <id>13</id>
      </contributor>
      <comment>test info</comment>
      <text xml:space="preserve">=Integrating ldap with Apache's mod_dav repository=

By default, ControlTier assumes files based authentication which also includes the Jackrabbit webdav repository.  In addition to authenticated webdav, authorization is also enforced with ControlTier admin role membership required.  Therefore, if ldap authentication is integrated into ControlTier, then Apache's mod_dav repository should be similarly configured.

==Assumptions==

* Apache's mod_dav is currently in operation, see [[mod_dav|mod dav/apache]] and/or  [[MigratingToApacheModDav|migrating from jackrabbit to mod_dav]]
* Active Directory Integration (as other client ldap integrations are similar)
* See [[Active_Directory_integration|Active Directory Integration]] and [[ControlTier_3.1_and_OpenLDAP_integration|OpenLDAP Integration]] regarding specific configurations that are used in this example

==Converting Apache's mod_dav from files to ldap based authentication==

All changes will be made to the /etc/httpd/conf.d/httpd-webdav.conf apache configuration file, which was created from: [[mod_dav|mod dav/apache]]. 

The following configurations will be added:
&lt;ol&gt;
&lt;li&gt;'''AuthBasicProvider'''&lt;/li&gt;
&lt;li&gt;'''AuthLDAPURL'''&lt;/li&gt;
&lt;li&gt;'''AuthLDAPBindDN'''&lt;/li&gt;
&lt;li&gt;'''AuthLDAPBindPassword'''&lt;/li&gt;
&lt;li&gt;'''AuthLDAPGroupAttributeIsDN'''&lt;/li&gt;
&lt;/ol&gt;

The '''AuthUserFile''' configuration will be removed

The '''Require''' configuration will be modified

&lt;pre&gt;
[root@centos-55-64-vm7 conf.d]# cd /etc/httpd/conf.d
[root@centos-55-64-vm7 conf.d]# cp httpd-webdav.conf httpd-webdav.conf.orig 
[root@centos-55-64-vm7 conf.d]# vi httpd-webdav.conf
[root@centos-55-64-vm7 conf.d]# diff httpd-webdav.conf httpd-webdav.conf.orig 
7,8c7
&lt; 
&lt;    #ensure auth for controltier read/write 
---
&gt;    #authenticated controltier read/write repository
17a17
&gt;       AuthUserFile /opt/webdav/etc/httpd-webdav.users
19,31d18
&lt;       #
&lt;       # ldap/active directory configuration
&lt;       #
&lt;       AuthBasicProvider ldap
&lt; 
&lt;       # base search ldap url by sAMAccountName, switch localhost, etc to the active directory server
&lt;       AuthLDAPURL ldap://localhost:389/DC=controltier,DC=com?sAMAccountName?sub?(objectClass=*)
&lt; 
&lt; 
&lt;       # sAMAccountName
&lt;       AuthLDAPBindDN &quot;CN=Manager,DC=controltier,DC=com&quot;
&lt;       AuthLDAPBindPassword &quot;secret&quot;
&lt;       AuthLDAPGroupAttributeIsDN on
35c22
&lt;       Require ldap-group CN=admin,OU=roles,DC=controltier,DC=com
---
&gt;       Require valid-user
56,69c43
&lt; 
&lt;       #
&lt;       # ldap/active directory configuration
&lt;       #
&lt;       AuthBasicProvider ldap
&lt; 
&lt;       # base search ldap url by sAMAccountName
&lt;       AuthLDAPURL ldap://localhost:389/DC=controltier,DC=com?sAMAccountName?sub?(objectClass=*)
&lt; 
&lt;       # sAMAccountName
&lt;       AuthLDAPBindDN &quot;CN=Manager,DC=controltier,DC=com&quot;
&lt;       AuthLDAPBindPassword &quot;secret&quot;
&lt;       AuthLDAPGroupAttributeIsDN on
&lt; 
---
&gt;       AuthUserFile /opt/webdav/etc/httpd-webdav.users
79c53
&lt;          Require ldap-group CN=admin,OU=roles,DC=controltier,DC=com
---
&gt;          Require valid-user
82c56
&lt;    &lt;/Directory&gt; 
---
&gt;    &lt;/Directory&gt;
&lt;/pre&gt;

'''NOTE''':  These configurations are applied to both  /webdav/repository/controltier (ControlTier) and /webdav/repository (General) Repositories

The entire httpd-webdav.conf:
&lt;pre&gt;
[root@centos-55-64-vm7 conf.d]# cat /etc/httpd/conf.d/httpd-webdav.conf 
#
# WebDAV module configuration section.
#

&lt;IfModule mod_dav_fs.c&gt;


   #ensure auth for controltier read/write 
   Alias /webdav/repository/controltier &quot;/opt/webdav/repository/controltier&quot;
   &lt;Directory /opt/webdav/repository/controltier&gt;
      DAV On

      Options +Indexes
      IndexOptions FancyIndexing

      AuthType Basic
      AuthName &quot;Apache/ControlTier Webdav Repository&quot;

      #
      # ldap/active directory configuration
      #
      AuthBasicProvider ldap

      # base search ldap url by sAMAccountName, switch localhost, etc to the active directory server
      AuthLDAPURL ldap://localhost:389/DC=controltier,DC=com?sAMAccountName?sub?(objectClass=*)


      # sAMAccountName
      AuthLDAPBindDN &quot;CN=Manager,DC=controltier,DC=com&quot;
      AuthLDAPBindPassword &quot;secret&quot;
      AuthLDAPGroupAttributeIsDN on

      Order allow,deny
      Allow from all
      Require ldap-group CN=admin,OU=roles,DC=controltier,DC=com

      &lt;LimitExcept HEAD GET POST OPTIONS PROPFIND&gt;
         Allow from all
      &lt;/LimitExcept&gt;
      &lt;Limit MKCOL PUT DELETE LOCK UNLOCK COPY MOVE PROPPATCH&gt;
         Allow from all
      &lt;/Limit&gt;

   &lt;/Directory&gt; 

   #ensure general public read to the repository and authenticated writes
   Alias /webdav/repository &quot;/opt/webdav/repository&quot;
   &lt;Directory /opt/webdav/repository&gt;
      DAV On

      Options +Indexes
      IndexOptions FancyIndexing

      AuthType Basic
      AuthName &quot;Apache/General Webdav Repository&quot;

      #
      # ldap/active directory configuration
      #
      AuthBasicProvider ldap

      # base search ldap url by sAMAccountName
      AuthLDAPURL ldap://localhost:389/DC=controltier,DC=com?sAMAccountName?sub?(objectClass=*)

      # sAMAccountName
      AuthLDAPBindDN &quot;CN=Manager,DC=controltier,DC=com&quot;
      AuthLDAPBindPassword &quot;secret&quot;
      AuthLDAPGroupAttributeIsDN on


      Order allow,deny
      Allow from all

      &lt;LimitExcept HEAD GET POST OPTIONS PROPFIND&gt;
         Allow from all
      &lt;/LimitExcept&gt;
      &lt;Limit MKCOL PUT DELETE LOCK UNLOCK COPY MOVE PROPPATCH&gt;
         Allow from all
         Require ldap-group CN=admin,OU=roles,DC=controltier,DC=com
      &lt;/Limit&gt;

   &lt;/Directory&gt; 

&lt;/IfModule&gt;
&lt;/pre&gt;

Restart apache:
&lt;pre&gt;
 [root@centos-55-64-vm7 conf.d]# /etc/rc.d/init.d/httpd restart
 Stopping httpd:                                            [  OK  ]
 Starting httpd:                                            [  OK  ]
&lt;/pre&gt;

Test apache mod_dav:  [[Mod_dav#Test_mod_dav]]</text>
    </revision>
  </page>
  <page>
    <title>Model-driven Use Guide</title>
    <id>1199</id>
    <redirect />
    <revision>
      <id>6831</id>
      <timestamp>2009-07-10T14:02:34Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>[[Model-driven Use Guide]] moved to [[Model-driven approach]]</comment>
      <text xml:space="preserve">#REDIRECT [[Model-driven approach]]</text>
    </revision>
  </page>
  <page>
    <title>Model-driven approach</title>
    <id>1057</id>
    <revision>
      <id>16421</id>
      <timestamp>2012-02-20T14:13:45Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <comment>Corrected link to command dispatching page</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Methodology&lt;/categorytree&gt;
[[Image:icon-model-driven-approach.png|right|86px|Script-driven approach]]

{{model-driven approach}} This is in contrast to the [[How_to_use_ControlTier#Script-driven_approach|script-driven approach]]. Underlying  this approach is [[Model-driven command dispatching]].

To manage the life cycle of a business service component via ControlTier, there are several general kinds of tasks you perform to configure and customize your ControlTier deployment:
* Service definition: declaring a resource model describing the business service components as Services, importing necessary packaged artifacts for the deployment cycle, making Node assignments to declare where the Services will run and how you group them for simplified control. Each of these are defined in types. See [[Core Type Guide]].
* Integration: attaching scripts and actions that manage the physical long running process to the Service life cycle workflows, creating configuration templates and supporting Settings
* Extending ControlTier: developing new service and artifact types, commands and workflows and other modules used by ControlTier

This page provides a high-level overview of the steps you take to perform these tasks.
For a more in depth explanation and a structured method to automate your release and service management processes see the [[Methodology]] and [[Methodology Activities]] pages.

If you like to learn by getting your hands dirty then see the [[Examples]].

[[Image:core-type-model-example.png|thumb|Model example]]

==Execute Commands==
Acquaint yourself with CTL and [[Model-driven_command_dispatching|command dispatching]]. CTL is the heart of the ControlTier system providing the command dispatching capabilities that let you execute command and control actions in a distributed environment.
Everything else in the ControlTier system builds on or enhances CTL.

Begin by using [[ctl-exec]] to execute ad-hoc commands and scripts in your network. Then try out the [[coreutils]] to learn about running [[Running ctl|defined commands]].

==Upload Artifacts==
If you are managing software deployment, you will want to [[Creating packages|create packages]] and [[Setting up a Package for import|learn how to set up packages for import]]. This publishes the packages to the [[File share]].

===Configure a Builder===

If you are deploying packages that are produced from local builds then [[Core_Type_Guide#Builder|learn about ControlTier Builders]] that interface with your build process and then [[HOWTO - Generic Builder Setup|set up a Builder]] to import those packages to the repository for later deployment to a Service.

==Manage Deployment Cycle==
A [[Service]] represents a software deployment that is also a long running process and has runtime state. You can wrap the management of that application deployment by first [[:Category:Service|registering it as a Service]] (so it is visible in the [[resource model]]). Once it's registered you can manage it via defined commands.

===Deploy Packages===
After you have uploaded your Packages and registered your Service you can manage package deployments to it.
See the [[Deploying Packages to a Service ]] page to learn how to define Package dependencies for your Service and then use the &quot;Deploy&quot; workflow command to manage the deployment cycle.

===Integrate startup cycle scripts===
Services are long running process that have runtime state managed via startup and shutdown procedures. 
You already have scripts and commands to manage those procedures. You can plug those scripts into the Service's hook commands. See: [[Screencast: Configuring a Service with your start and stop scripts]]

===Generate configuration===
Beyond managing the package installation life cycle, the Service can also coordinate application configuration.
Service's &quot;Configure&quot; workflow command governs the configuration step inside the &quot;Deploy&quot; workflow. You can generate customized configuration files based on environment specific information and a set of template files.
See [[Generating Configuration Files]].

==Centralize Management==
===Set up a Site===
A &quot;Site&quot; lets you group a set of Services and then lets you control the group as a single object as a simple command.
[[Site_Coordination_Models|Sites can be nested]], too, and become very useful as a representation of your business service as an integrated software system.
See the [[Core_Type_Guide#Site|Working with Sites]] section in the User Manual for more.

===Configure Jobcenter===
Jobcenter provides a centralized graphical console to running service management commands. 
You can define two kinds of jobs: 
* jobs that can be run any time
* jobs that run a scheduled periodic basis

See the [[Jobcenter|Using Jobcenter]] section in the User Guide.

===Setup project build===
While you can use the Workbench graphical interface to register Nodes, upload Packages and define Services, it is often much more preferable to maintain the [[Project Content]] using a set of text files maintained in an SCM repository and a build tool to process them and update the [[ControlTier server]]. 
See the &quot;[[Use ProjectBuilder]]&quot; page for information on how to setup ProjectBuilder to support building your project artifacts.

==Extend ControlTier==

===Define new Types===
ControlTier's solution library contains dozens of types that provide the generic life cycle workflow commands to support managing your business service, as well as, specialized types for specific targets. ControlTier was first and foremost designed to be extensible via sub-typing. 

You can introduce the management of a new Service using information here: [[Create your own Service type]]
You might also want to package your control scripts inside a custom subtype to benefit from ControlTier's module distribution mechanism (See: [[Service_Subtype_Control_Scripts|Use custom control scripts with a Service sub-type]]).

===Add and override commands===
While ControlTier's generic types establish workflow command structures to manage the service management life cycles sometimes you need to customize these either by defining new steps or overriding existing ones.

See the [[:Category:Workflows]] sections to learn about creating new commands.
Also, the [[Workflow command]] page provides instructions for defining your own workflow structures.

===Define Attributes and Constraints===
ControlTier uses a sophisticated object-oriented model to describe your business service and its environment. 
ControlTier uses a class based Type system to allow you to create a data model to represent the various components of your Business Service. Read the [[Type modeling]] page to learn more.

You might also want to introduce new [[Attributes]] to capture configuration settings and use them for driving your commands and/or generate configuration files.

An important aspect of the ControlTier model schema are constraints. Constraints let you define rules that govern how instances are created and edited. You can also use constraints to govern how Objects are composed together into your model. See the [[Constraints]] page for more.

{{Manual/navbox}}
[[Category:Methodology]]</text>
    </revision>
  </page>
  <page>
    <title>Model-driven command dispatching</title>
    <id>600</id>
    <revision>
      <id>14478</id>
      <timestamp>2010-11-12T00:12:06Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;noinclude&gt;&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Introduction&lt;/categorytree&gt;&lt;/noinclude&gt;
This document describes the important concepts and mechanisms that [[CTL architecture|CTL]] Command Dispatcher uses to execute Commands based on the logical representation stored in the ControlTier resource model.

This diagram indicates the benefit of using a model-driven command dispatcher, versus an approach that uses rote scripts or procedures:

[[Image:dispatching-control-tier-benefit.png|Dispatching with the ControlTier]]

== Description ==

The Control Tier is a way of modeling your Business Service so that software programs and artifacts (Services and Packages), groups of related Services (Sites), and coordination points that affect the model (Builders, Updaters) can be identified and grouped by their logical purposes.  You will also model each Virtual Machine or physical computer as a Node, which represents an end-point for deployment and dispatching in the real-world. (See: [[Understanding the abstracted administration paradigm]])

Once you have created a representative model of your system, those Resources can be mapped to the real-world as effective Business Service components by modeling the connection between each deployable Resource and any set of Nodes to which it should be deployed.

==Sounds great, but how does that work?==

Diagrammed below are the steps that happen right after installation of the ControlTier software, up to the point of dispatching a Command to a remote Node based on Model configuration. 

=== How it works ===

The mechanism for dispatching a specific command to the correct real-world location requires that we create a useful Model of the real-world.  

The ControlTier Server holds a database which contains the Model and all of the data about the resources' relationships and properties. Each ControlTier Client installation on a virtual machine or physical computer is represented in the Model as a Node Resource when it is registered.

[[Image:dispatching-server-and-nodes.png|Clients registering as Nodes to the Server]]

The manager can then specify a relationship between a Node and a specific deployable Resource, such as a software Service or a set of related Resources called a Site.

[[Image:dispatching-node-and-service.png|Client Node is configured for a Service]]

The Client can then query the server to retrieve all necessary control modules and metadata for the Services that are related to the Node.

[[Image:dispatching-client-ctl-install.png|Client installs metadata and control modules]]

Once installed, the Client can execute Commands for the Service without needing to to know all of the detail about specific configuration.  The user only needs to know the name of the Resource.

[[Image:dispatching-client-execs-command.png|Client executes a command for the installed Resources]]

Sites are used for managing a group of Resources which may all be deployed on different Nodes.

[[Image:dispatching-site-and-nodes.png|A Site coordinates across nodes]]

The user can then execute a command for the logical Site Resource, and the command will be &quot;node-dispatched&quot; to the appropriate Nodes.

[[Image:dispatching-site-node-dispatch.png|A Site command dispatches across nodes]]


== Basics of Modeling ==

The modeling system of ControlTier is complex, and it needs to be in order to accurately represent complex systems and also to be functionally useful.

However, at the basic level there are only three important concepts in the modeling system:

# Resources
# Relationships
# Properties

[[Image:dispatching-modeling-basics.png|Basics of modeling]]

;Resources : every resource that we want to represent in the system is called a Resource.  

;Relationships: every Resource can have multiple other Resources as &quot;parents&quot;.  Some Resources can have multiple other Resources as &quot;children&quot;.

; Properties: every Resource can have literal values attached to it which are identified by a name

These basics allow you to model things in your enironment, as well as relationships between them and some of the pertinent data about them. In addition to these concepts, the only other important concept to add is that of Types.

; Type : a class of Resources, which confers on its members the ability to have certain Properties, Relationships, and other specific traits.

You can see that for example, there is a need to differentiate between the concept of a Node and a software Service, and that Resources of each of those Types will have different needs: different Properties will be necessary, as well as the ability to have only certain other Types of Resources as children. 

This is the basics of the modeling system, covered in more depth in the [[Type modeling]] section.

== Basics of Dispatching ==

The ControlTier Client installation has two components:

# A set of commandline tools for executing commands and libraries (stored in CTL_HOME directory)
# A local directory for storing control modules, metadata, and configuration (stored in CTL_BASE directory)

Once you have registered the Client installation as a Node to the Server, you will be able to &quot;deploy&quot; Services, Sites, etc. onto the Node.  This is simply a matter of adding the Resource as a child resource of the Node:

[[Image:dispatching-node-on-server.png|Node registered on the server]]


[[Image:dispatching-node-add-deployment.png|Adding a Deployment to a Node]]

Adding a Service &quot;deploys&quot; it to the Client inside the Model:

[[Image:dispatching-node-deployed-service.png|Node with deployed Service]]

Now that the Model reflects the configuration we want, we can effect the change in the ControlTier Client that the Node represents in two ways:

# Remotely, using a pull-based mechanism
# (Locally on the server, automatically)
#* When you deploy to the Node that represents the Server itself, the deployment steps below happen automatically

This shows an example of running the &quot;install&quot; action to do a pull-based install:

[[Image:dispatching-node-deploy-install.png|pull-based Install command on a remote Node]]

In either case, a set of Metadata for the deployed Resource, and any necessary Control Modules are installed into the Client's CTL_BASE directory.

The Metadata includes all properties and relationships of the Resource (scope is configurable).

Each deployed Resource also gets an installation directory inside CTL_BASE.  This directory holds the metadata file, and serves as a location where the Resource can install templates, files, etc.

The Dispatcher then dynamically scans the available Resources for use, and the Control Module used by each Resource, providing the commandline user with a list of the commands available for execution with that Resource.

== How Metadata is Deployed ==

When a ControlTier Client wants to retrieve all of the Resources deployed to its Node, it runs the &quot;install&quot; action using the &quot;ctl-project&quot; command:

:$ ctl-project -a '''install'''

&lt;pre&gt;
defaulting to project: demo
&quot;Install&quot; command running for resource: (Service) myService
&lt;/pre&gt;

This action does a few things:

# Retrieves a '''resources.properties''' file from the Server (WebDAV GET)
# Retrieves a '''nodes.properties''' file from the Server (WebDAV GET)
# Retrieves any control Modules that are directly deployed to the Client's Node, based on resources.properties (WebDAV GET)
# Creates the necessary ''resource.instance.dir'' for any deployed Resources, based on resources.properties
# Retrieves any '''resource.properties''' files for Resources that are deployed to the Client's Node, based on resources.properties (via Server API using HTTP GET)
# Runs the built-in &quot;Install&quot; Command for those Resources, which allows custom installation code to occur if necessary.

When an Resource is installed in the CTL_BASE directory, it lives inside the appropriate &quot;depot&quot; directory, at a path using the Resource's name and Type name:

$CTL_BASE/projects/''project''/resources/''type''/''Resource''

This installation directory is referred to as the &quot;resource.instance.dir&quot; location for the Resource.  Inside the resource.instance.dir, is:

${resource.instance.dir}/var/'''resource.properties'''

The &quot;resource.properties&quot; file contains the Metadata, serialized as Java Properties format.  This is a simple &quot;key=value&quot; text file, containing all of the metadata that is available for use by the Resource inside a Command execution context. 

For example here is some of the content for the &quot;myService&quot; Resource deployed earlier:

&lt;syntaxhighlight lang=&quot;text&quot;&gt;
...
resource.classname=Service
resource.controller-module=Service
resource.deployment-basedir=/Users/greg/ctierc/ctl/projects/demo/resources/Service/myService/base
resource.deployment-install-root=/Users/greg/ctierc/ctl/projects/demo/resources/Service/myService/install
resource.deployment-manages=false
resource.deployment-startup-rank=1
resource.depot=demo
resource.description=my service
resource.dirlist=bin,logs,var,var/transforms
resource.install.auto=true
resource.install.nomodule=false
resource.instance.dir=/Users/greg/ctierc/ctl/projects/demo/resources/Service/myService
resource.mapref-uri=http\://www.opendepo.org/ct/demo/Resources\#obj_2
resource.mapref-uri.encoded=http%3A%2F%2Fwww.opendepo.org%2Fct%2Fdemo%2FResources%23obj_2
resource.name=myService
resource.order=Service
...
&lt;/syntaxhighlight&gt;

This Metadata file provides the contextual data that the Dispatcher uses when it executes a Command.

== How Modules are Deployed ==

After the &quot;install&quot; action is run (see above), the Client downloads any Modules that it needs as described in the '''resources.properties''' file.

The file contains a line for each deployed Resource like this:

:Resource-deployment.''project''.''type''.''Resource''=''node''[,''node''...]

For example, this is the content produced in the above example:

&lt;pre&gt;
Resource-deployment.demo.Service.myService=Gozer.local
&lt;/pre&gt;

After seeing that a certain Resource is deployed to this Node, the Client will retrieve the ''resource.properties'' for that Resource.  Based on this information, it determines which Control Module is needed.

Definition:

; Control Module : An archive file which contains Type and Command definitions and metadata.  Every deployable Type in the Model has a corresponding Control Module.

Thus, the Control Module that is needed is the one for the Type of the deployed Resource.

If the necessary Control Module is not already installed, it is downloaded from the Server, using the WebDAV directory:

:http://''server-host'':''port''/''webdav-path''/''project''/publish/modules/''Type''-head.jar

Since a Module corresponds to a Type in the Type Modeling system, it may be necessary to also download the Module for any Supertype that the Type is extended from.  All of those Module dependencies are downloaded at this point.

These Modules are Java Jar archives, and their contents are now expanded into the &quot;modules&quot; directory for the particular project &quot;depot&quot; directory:

: $CTL_BASE/projects/''project''/modules
: $CTL_BASE/projects/''project''/modules/Service
: $CTL_BASE/projects/''project''/modules/CustomService

At this point the Resource can be used to execute Commands. 

== Advanced Command Dispatching ==

The ControlTier Client tool &quot;ctl&quot; has several commandline options that allow you to easily dispatch Commands to more than one Node.

For example, suppose you had configured two Nodes to use the myService Resource:

[[Image:dispatching-multiple-node-deployed.png|myService deployed on multiple Nodes]]

Normally, you could execute a command on the current Node by running it directly:

: ctl -t Service -r myService -c Start

However, you can use the &quot;node filtering&quot; options of the &lt;code&gt;ctl&lt;/code&gt; tool to send this command to all Nodes where the myService Resource is installed:

: ctl '''-I '.*'''' -t Service -r myService -c Start

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
begin workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot; ...
end workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot;
Connecting to Gozer.local:22
cmd : ctl -p demo -t Service -r myService -c Start 
[greg@localhost demo.Service.myService Start][INFO] begin workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot; ...
[greg@localhost demo.Service.myService Start][INFO] end workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot;
&lt;/syntaxhighlight&gt;

You can see that first the command is executed locally, and then subsequently it was dispatched via a remote SSH connection to the &quot;Gozer.local&quot; Node.

The &quot;ctl&quot; tool has these options for dispatching remotely:

{|  border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;5&quot;
! flag
! description
|-
| -I,--nodes
|include node parameter list
|-
| -X,--xnodes
|exclude node parameter list
|-
| -Z,--filter-exclude-precedence
| true/false. if true, exclusion filters have precedence over inclusion filters
|-
| -C,--threadcount
| number of threads
|}

Both of the &lt;code&gt;-I&lt;/code&gt;/&lt;code&gt;-X&lt;/code&gt; filter options allow these filter specifiers in the value:

{| border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;5&quot;
! specifier
! description
|-
| hostname/''none'' || hostname regular expression (''default'')
|-
| osfamily || Operating system family (e.g. &quot;windows&quot;,&quot;linux&quot;,...)
|-
| osarch || Operating system architecture regex
|-
| osname || Operating system name regex 
|-
| osversion || Operating system version regex
|-
| tags || Resource tag names: list of regexes
|-
| name || Node resource name: list of regexes
|}

For example, you could dispatch to all Unix nodes:

: ctl -I osfamily=unix -t Service -r myService -c Start

Or you could filter based on the Node tags:

: ctl -I tag=dev -t Service -r myService -c Start

All of the metadata needed to perform these filters comes from the '''nodes.properties''' file which is retrieved during the &quot;install&quot; action as described above.

[[Category:Resource model]]
{{Manual/navbox}}</text>
    </revision>
  </page>
  <page>
    <title>Model-driven examples</title>
    <id>1113</id>
    <revision>
      <id>14309</id>
      <timestamp>2010-11-10T22:51:17Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">[[Image:Crystal_Clear_app_display.png|right|150]]


These examples show  [[How_to_use_ControlTier#Model-driven_solutions|model-driven solutions]]. {{model-driven approach}}

==Running the Examples==

Be sure you have completed all the instructions in [[Installation|Installing ControlTier]] before you attempt to run the example.

Please read: [[Using the Examples]]

==Available Examples==

{| cellpadding=&quot;3&quot; cellspacing=&quot;1&quot; border=&quot;1&quot; style=&quot;border: 1px solid #aaa; border-collapse:collapse;&quot;
|-
! Example !! Operating System !! Description
|-
| [[Setting up a Package for import]]
| Linux/Unix
| Describes how to store packages in the ControlTier repository. 
|-
| [[Prepare_Finish_Scripts|Package prepare/finish scripts]]
| Linux/Unix
| Describes how to invoke scripts at the prepare and finish phases of the Package install life cycle
|-
| [[Mock Unix Service Example|Mock Unix Service]]
| Linux/Unix
| This page describes the configuration and behavior of the core Service type and its capability to control the runtime state of an application process.
|-
| [[Mock Site Example|Mock Site]]
| Linux/Unix
| This example describes the configuration and behavior of the core Site type and its ability to manage a set of related Services via command dispatching.
|-
| [[Service Package Deployment Example|Service Package Deployment]]
| Linux/Unix
| This example shows how to configure a Service to manage the deployment of two packages, customize a configuration file, and manage of startup and shutdown.
|-
| [[Builder Simple Example|Simple Builder]]
| Linux/Unix
| This example shows how to configure a Builder to integrate with a CVS repository for code checkout,  call an Ant build script that is part of the checked out sources, and import the produced build artifact to the repository.  The example generates a .war file for a simple web application.
|-
|[[Continuous Deployment Example with Tomcat|Continuous Deployment with Tomcat]]
| Linux/Unix
|In this example, we will demonstrate how to implement a [[Continuous Deployment]] mechanism using ControlTier, to automatically build and deploy a WAR to a Tomcat server after a code-change is performed.
|-
| [[Windows service example|Java-based Service]]
| Windows
| This page shows the basics of using an object of the JavaServiceWrapper type to manage the runtime lifecycle of a JBoss Application Server.
|-
| [[Mock site example for windows|Mock Site (windows)]]
| Windows
| This example describes the configuration and behavior of the core Site type and its ability to manage a set of related Services via command dispatching.
|-
| [[Windows service package deployment example|Service Package Deployment (windows)]]
| Windows
| This example shows how to configure a Service to manage the deployment of two packages, customize a configuration file, and manage of startup and shutdown.
|-
|}

== Downloading the Example code ==

* ''Since 3.4.3'' all of the Example code is available in the CTIER_ROOT directory in a directory named &quot;examples&quot;.

However, you can also download the example code using Subversion:

&lt;pre&gt;
 cd $CTIER_ROOT
 svn export http://controltier.svn.sourceforge.net/svnroot/controltier/branches/controltier-3-4-support/examples
&lt;/pre&gt;

== Troubleshooting ==

If you have problems with the examples, you should look at the [[Troubleshooting the Examples]] document to see if it addresses your problems.

Otherwise, please feel free to [[Community|Contact Us]] via [[IRC Channel|IRC]], or email to the [mailto:controltier@googlegroup.com Mailing List].


{{Manual/navbox}}

[[Category:Resource model examples]]</text>
    </revision>
  </page>
  <page>
    <title>Modeled examples</title>
    <id>1192</id>
    <redirect />
    <revision>
      <id>6744</id>
      <timestamp>2009-07-08T17:06:58Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>[[Modeled examples]] moved to [[Model-driven examples]]</comment>
      <text xml:space="preserve">#REDIRECT [[Model-driven examples]]</text>
    </revision>
  </page>
  <page>
    <title>Modeler Getting started</title>
    <id>2003</id>
    <revision>
      <id>14579</id>
      <timestamp>2010-11-16T20:46:00Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <text xml:space="preserve">&lt;noinclude&gt;&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Introduction&lt;/categorytree&gt;&lt;/noinclude&gt;
After reading this page, you should have the general pattern to using [[ControlTier]] to define and manage your automation. It begins with the installation of the ControlTier server and client across your hosts. Then you create a project where you will manage your work. Each step of automation is specified in a Module defined as a command. Module commands are combined into a workflow. Any  type-defined command can be executed across the network via the command dispatcher via the GUI or CLI. Dispatching flags control how the commands are executed across the network.

==Download and Install==
{{main|Installation}}
* [[Download]] the desired package type (e.g., [[ZIP installer]] or [[RPM installer]])
* Set the CTIER_ROOT environment variable
* [[Installation|Install]] the ControlTier Server package to the chosen [[ControlTier server]].
* Install the Client package on each additional [[ControlTier client|client]] host. (optional)
** Be sure to run [[CTL-SETUP_Command_Reference|ctl-setup]] for each client host, to configure the server's hostname.
* Once the server is running access the [[server landing page]] and login.
* Set your [[ControlTier_Environment_Variables|environment]]
If ControlTier is working correctly you should now be able to type &lt;code&gt;ctl --version&lt;/code&gt; in the terminal window and see output below:
&lt;pre&gt;
ctl --version	
	.
	.
	.
[CTL version 1.4.9 (20091117)]	
&lt;/pre&gt;

==Create a project==
{{main|Creating a project}}

A ControlTier &quot;[[Project|project]]&quot; provides a space to manage related automation activities.

The &lt;code&gt;[[ctl-project]]&lt;/code&gt; shell command is used to create the space (aka &quot;project&quot;) for each project. 

Run the [[CTL-PROJECT_Command_Reference|ctl-project]] command and specify a project name, here we use &quot;demo&quot;:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl-project -a create -p demo
&lt;/syntaxhighlight&gt;

''Do this first on the server, and then on each of the client hosts.''

This will create the Project in the server, and register each client as a Node in the Project's Resource Model.

===Node metadata===

Each ControlTier client is called a &quot;Node&quot; within the Resource Model. You may typically have one Node per physical or virtual &quot;Host&quot; computer.

When the client hosts were setup for the new project, a bit of [[Node#Metadata|metadata about each host]] was registered to the server. 
You can view information about the registered nodes via the &lt;code&gt;ctl-exec -v&lt;/code&gt; command. Use the &lt;code&gt;-p&lt;/code&gt; option to specify the Project name:

  $ ctl-exec -p demo -v	
  strongbad:
     hostname: strongbad
     os-arch: x86_64
     os-family: unix
     os-name: Mac OS X
     os-version: 10.6.2
     tags: []
     ---- Attributes ---- 

Node metadata can be extended but one of the most useful pieces of metadata is the &quot;tags&quot; property. A tag is a text label that you give to the Node, perhaps denoting a classification, a role the node plays in the environment, or group membership. The output above shows the strongbad node currently has an empty tags property: &lt;code&gt;tags: []&lt;/code&gt;

It is useful to start thinking about node tagging for your own nodes because you will use it later when specifying [[#Command_dispatcher_options]] to drive distributed command execution.

A node's tags can be maintained with the [[Node#Workbench_Node_Manager|graphical interface]], with the [[Node#Project_XML|XML]] definition or via the [[Node#Registering_via_command|command line]]. 

Here we use a command called &quot;&lt;code&gt;tag-add&lt;/code&gt;&quot; to add two tags to the &quot;strongbad&quot; node:

  $ ctl -p demo -m modelutil -c tag-add -- -type Node -name strongbad -tags admin,simple

Running ctl-exec -v again shows the tags property now contains &quot;admin,simple&quot;:

  $ ctl-exec -p demo -v	
  strongbad:
     hostname: strongbad
     os-arch: x86_64
     os-family: unix
     os-name: Mac OS X
     os-version: 10.6.2
     tags: [admin, simple]
     ---- Attributes ---- 

The &lt;code&gt;tag-remove&lt;/code&gt; command can remove a tag. Here the &quot;simple&quot; tag is removed:

  $ ctl -p demo -m modelutil -c tag-remove -- -type Node -name strongbad -tags simple

Now the node has only one tag, &quot;simple&quot;:

  $ ctl-exec -p demo -v	
  strongbad:
     hostname: strongbad
     os-arch: x86_64
     os-family: unix
     os-name: Mac OS X
     os-version: 10.6.2
     tags: [admin]
     ---- Attributes ----

==Dispatching commands==

The ControlTier [[Command dispatcher]] provides a means to execute commands across the network either through command line or graphical interface. Dispatcher options control how the commands will execute and let you coordinate actions across hosts. The [[Scripters cookbook]] page offers several examples on how to take advantage of various features and useful utilities that cover common scripting use cases.

===Run defined commands===
{{main|Running defined commands}}
''Defined commands'' are procedures formally defined in a ''Type'' and that are callable by the command dispatcher. A Type represents a control module comprised of one or more defined commands, each of which can have a set of formally defined ''command options''.
ControlTier provides a range of [[Core_Type_Guide|core types]] organized into several layers - [[Base Type Guide|base]], [[Utility Type Guide|utility]], [[Deployment Type Guide|deployment]]. These types provide a variety of useful commands.

Packaging your own procedures as commands allows you to use ControlTier to easily distribute them to your nodes as modules, compose them into workflows, and provide clear input options.

Defined commands have a uniform calling interface and are a standard way to distribute and deploy your automation procedures. The command dispatcher also has a command-line [[Running_defined_commands#Listing|listing]] feature that can help users to learn what commands are defined and even show their supported options. Defined commands ultimately form the basis of your own automation framework, where one command can call another either directly or via workflows.

Here's an example that shows off executing a defined command called &quot;listening&quot; declared in the the [[netutil]] type. The listening command checks if the specified port is listening and accepting connections.
Any type-defined commands can be invoked using the [[CTL_Command_Reference|ctl]] command line tool.
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m netutil -c listening -- -port 8080
&lt;/syntaxhighlight&gt;

Defined commands can also be executed via the GUI as a Job. The job definition sample below shows the same module and command chosen, and port 8080 entered as an option:

[[Image:getting-started-job-example1.png|border|400px|Defined netutil listening job]]

Save the job with a name to define it.

===Dispatcher options===
{{main|Dispatcher options}}
The command dispatcher supports a number of flags that can control how commands are executed across nodes. The command line tools, &lt;code&gt;ctl&lt;/code&gt;, &lt;code&gt;ctl-exec&lt;/code&gt; as well as job definitions support the notion of command dispatching flags.

* The include and exclude flags filter the set of nodes the command will execute. The ctl and ctl-exec commands do this via &quot;-I&quot; and &quot;-X&quot; flags.
Below, the &quot;-I os-name=Linux&quot; option specifies to include all nodes that have the operating system name &quot;Linux&quot;. The &quot;-X centos54&quot; excludes the node named &quot;centos54&quot;:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -I os-name=Linux -X centos54 -m netutil -c listening -- -port 8080
&lt;/syntaxhighlight&gt;
Here's an example that runs the &lt;code&gt;who am i&lt;/code&gt; command via [[shellutil]] &lt;code&gt;exec&lt;/code&gt; on all hosts that tagged &quot;admin&quot;:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -I tags=admin -m shellutil -c exec -- -executable bash -script 'who am i'
&lt;/syntaxhighlight&gt;

* The thread count and keepgoing and retry flags control concurrency and errors via &quot;-C&quot; and &quot;-K/-F&quot; options.
Here's an example that runs the &quot;listening&quot; command across all unix hosts. The &quot;-C 3&quot; option specifies to run three threads of execution. The &quot;-K -F /tmp/failednodes&quot; will specify to keep going if a command fails on a node but to save the list of failed nodes in the &quot;/tmp/failednodes&quot; file. If an error occurs, the user can later repeat the same command line but only nodes contained in that file will be targeted.
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -I os-family=unix -C 3 -K -F /tmp/failednodes -m netutil -c listening -- -port 8080
&lt;/syntaxhighlight&gt;

* The level of logging is controlled via the &quot;-l&quot; flag
Here only messages of &quot;warning&quot; level or higher are displayed to the console. Choose from: debug|verbose|info|warning|error
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -l warning -m netutil -c listening -- -port 80
&lt;/syntaxhighlight&gt;

* Job definitions can also specify dispatch and node filtering. When defined with XML, use the &lt;code&gt;[[Job-v10.xml#dispatch|dispatch]]&lt;/code&gt; and &lt;code&gt;[[Job-v10.xml#nodefilters|nodefilters]]&lt;/code&gt; tags.
* When defined via the GUI, enter the filter option values in the form. 

This example selects all nodes with the operating system name &quot;Linux&quot; but excludes the one named &quot;strongbad&quot;:

[[Image:getting-started-jobcenter-filtering.png|border|400px|Job node filtering]]

==Create a controller type ==
In ControlTier, multi-step processes are easily defined as a &quot;workflow&quot;. A workflow is a command defined as a sequence of one or more commands.  Like any command, workflows are defined in a [[Type_modeling|type]]. Types can be developed in XML with the help of [[ProjectBuilder]] or they can be defined graphically using the [[Graphical type editor]].

You can run ProjectBuilder commands on any node, as it can upload type definitions to the server. For the sake of convenience of this document, assume the commands are run on the server host.

* The ProjectBuilder &lt;code&gt;create-type&lt;/code&gt; command will create a new type definition, generating a directory of source files:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m ProjectBuilder -c create-type [-- options]
&lt;/syntaxhighlight&gt;

* The &lt;code&gt;build-type&lt;/code&gt; command processes the type definition and turns it into an executable artifact.
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m ProjectBuilder -c build-type [-- options]
&lt;/syntaxhighlight&gt;

==A SimpleApp controller example==

Imagine the goal is to create a controller type and set of defined commands to manage the deployment process for a fictitious application named SimpleApp distributed over several hosts. The plan is to run a workflow that will execute each step of the deployment cycle for the SimpleApp application. This example will show how to define a new type that defines a workflow command named &quot;deploy&quot; along with a command to manage each step of the deploy process: stop, install, configure, start, listening.

===Control scripts===
The ProjectBuilder &lt;code&gt;create-type&lt;/code&gt; includes a feature that will bootstrap command definitions for a new type based on a directory of scripts. A command name corresponding to the script file's name (minus the extension) will be defined for each file found inside the chosen script directory.
	
For the SimpleApp, imagine a set of scripts exist in a directory named &quot;~/tmp/SimpleApp/scripts&quot;. The directory contains a separate script for each step of the process (i.e., [[Scripters_cookbook#Refactor_scripts_into_reusable_building_blocks|reusable building blocks]]).
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[ctier@training src]$ ls ~/tmp/SimpleApp/scripts/
configure.sh  install.sh  listening.sh  start.sh  stop.sh	
&lt;/syntaxhighlight&gt;

Of course for a real application, each script implementation would do the actual procedure for each step, but for purposes to help get started, each script just contains code comments that suggest their intent:

; configure
: Customizes the configuration for the client node
File listing: configure.sh

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
#!/bin/sh
echo &quot;Running configure ...&quot;
# if [ -d /usr/local/tomcat ]; then
#   echo tomcat not installed; exit 1;
# fi;
# sed 's/8080/28080/g' /usr/local/tomcat/conf/server.xml &gt; /tmp/server.xml
# mv /tmp/server.xml /usr/local/tomcat/conf/server.xml
&lt;/syntaxhighlight&gt;

; install
: Gets, extracts the tomcat packages
File listing: install.sh
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
#!/bin/sh
echo &quot;Running install ...&quot;
#
# Download and extract the SimpleApp packages to the correct installation directory.
#
&lt;/syntaxhighlight&gt;

; listening
: Check if SimpleApp is listening on its port
File listing: listening.sh
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
#!/bin/sh
echo &quot;Running listening ...&quot;
# if [ -d /usr/local/tomcat ]; then
#   echo tomcat not installed; exit 1;
# fi;
# netstat -an | grep 8080 | grep LISTENING
&lt;/syntaxhighlight&gt;

; start 
: Runs the SimpleApp startup script
File listing: start.sh
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
#!/bin/sh
echo &quot;Running start ...&quot;
# if [ -d /usr/local/tomcat ]; then
#   echo tomcat not installed; exit 1;
# fi;
# /usr/local/tomcat/bin/startup.sh
&lt;/syntaxhighlight&gt;

; stop 
: runs the SimpleApp shutdown script
File listing: stop.sh
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
#!/bin/sh
echo &quot;Running stop ...&quot;
# if [ -d /usr/local/tomcat ]; then
#   /usr/local/tomcat/bin/shutdown.sh
#   exit $?
# fi;
&lt;/syntaxhighlight&gt;

===Create the type===
Run the [[ProjectBuilder]] &lt;code&gt;create-type&lt;/code&gt; command using the &quot;-scriptdir&quot; and &quot;-initialize&quot; options to automatically generate command definitions for each of the scripts.
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[ctier@training tmp]$ cd $CTL_BASE
[ctier@training ctl]$ mkdir src
[ctier@training ctl]$ cd src
[ctier@training src]$ ctl -m ProjectBuilder -c create-type -- -type SimpleAppCtl -scriptdir ~/tmp/SimpleApp/scripts -initialize
Description of type: 
Simple application module
Choose a supertype:  ([Module], Package, Builder, Deployment, Service, Site)

Directory where module files will be created:  [/opt/ctier/ctl/src]

Creating module definition files in directory: /opt/ctier/ctl/src ...
Creating directory structure...
Created dir: /opt/ctier/ctl/src/modules/SimpleAppCtl
Created dir: /opt/ctier/ctl/src/modules/SimpleAppCtl/bin
Created dir: /opt/ctier/ctl/src/modules/SimpleAppCtl/commands
Created dir: /opt/ctier/ctl/src/modules/SimpleAppCtl/objects
Created dir: /opt/ctier/ctl/src/modules/SimpleAppCtl/templates
Initializing type module from template dir: /opt/ctier/ctl/modules/ProjectBuilder/templates/boilerplate ...
Copying 2 files to /opt/ctier/ctl/src/modules/SimpleAppCtl
Define commands and attributes in this file: /opt/ctier/ctl/src/modules/SimpleAppCtl/type.xml
Matching scripts in the scripts directory...
Found 5 matching scripts. Generating commands from scripts...
Created dir: /opt/ctier/ctl/src/modules/SimpleAppCtl/scripts
Copying 1 file to /opt/ctier/ctl/src/modules/SimpleAppCtl/scripts
Copying 1 file to /opt/ctier/ctl/src/modules/SimpleAppCtl/scripts
Copying 1 file to /opt/ctier/ctl/src/modules/SimpleAppCtl/scripts
Copying 1 file to /opt/ctier/ctl/src/modules/SimpleAppCtl/scripts
Copying 1 file to /opt/ctier/ctl/src/modules/SimpleAppCtl/scripts
Copying 1 file to /opt/ctier/ctl/src/modules/SimpleAppCtl
Copying 1 file to /opt/ctier/ctl/src/modules/SimpleAppCtl
Commands have been generated for SimpleAppCtl: /opt/ctier/ctl/src/modules/SimpleAppCtl
&lt;/syntaxhighlight&gt;
Accept the defaults if prompted.

The command will generate a new directory structure of source files that will be later processed into an executable module that can be distributed to the ControlTier clients.

==Directory convention==
The type source directory structure created by &lt;code&gt;create-type&lt;/code&gt; follows a convention:
* SimpleAppCtl - top-level directory for type sources 
** &lt;code&gt;[[type.xml]]&lt;/code&gt; - The XML file that defines the type and its commands and their options
** &lt;code&gt;commands&lt;/code&gt; - Generated dispatcher code for each defined command
** &lt;code&gt;lib&lt;/code&gt; - optional resource files
** &lt;code&gt;scripts&lt;/code&gt; - Your scripts

===Define the workflow===
{{main|Workflow command}}
A workflow command defines a sequence of commands to execute. The goal is here is to define a workflow that manages the deployment process for the SimpleApp.
The example below describes a workflow command named &quot;deploy&quot; that calls each of the commands defined during the create type step in the desired order. 
Cut and paste the following into your SimpleAppCtl type definition (eg, CTL_BASE/src/modules/SimpleAppCtl/type.xml).
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;command name=&quot;deploy&quot; description=&quot;run the app deploy cycle&quot;		
	       command-type=&quot;WorkflowCommand&quot; is-static=&quot;true&quot;
	       error-handler-type=&quot;FAIL&quot;&gt;
  &lt;workflow threadcount=&quot;1&quot;&gt;
    &lt;command name=&quot;stop&quot;/&gt;
    &lt;command name=&quot;install&quot;/&gt;
    &lt;command name=&quot;configure&quot;/&gt;
    &lt;command name=&quot;start&quot;/&gt;
    &lt;command name=&quot;listening&quot;/&gt;
  &lt;/workflow&gt;
  &lt;opts&gt;
      &lt;opt parameter=&quot;argline&quot; required=&quot;false&quot; property=&quot;opts.argline&quot; default=&quot;simple&quot; type=&quot;string&quot; 
    description=&quot;Arguments passed to the script&quot;/&gt;
  &lt;/opts&gt;
&lt;/command&gt;
&lt;/syntaxhighlight&gt;

Workflows also support [[Workflow_error_handling|error handling]] and notification. Reference: [[Type-v10.xml#workflow]]

===Build the type===
Use the ProjectBuilder &lt;code&gt;build-type&lt;/code&gt; command to process the type sources and upload it to the server as a deployable control module.
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[ctier@training src]$ pwd
/opt/ctier/ctl/src
[ctier@training src]$ ctl -m ProjectBuilder -c build-type -- -type SimpleAppCtl -upload -deploy
Base directory where module source files reside [/opt/ctier/ctl/src]

Target directory where build files are generated [/opt/ctier/ctl/target]

Building type using the buildmodule.xml via classloader
converting type.xml for module: SimpleAppCtl
generating handlers...
packaging module: SimpleAppCtl
Copying 1 file to /opt/ctier/ctl/src/modules/SimpleAppCtl
Copying 1 file to /opt/ctier/ctl/src/modules/SimpleAppCtl
Deleting: /opt/ctier/ctl/src/modules/SimpleAppCtl/module.properties.temp
Building jar: /opt/ctier/ctl/target/modules/SimpleAppCtl-1.jar
Uploading built module to server ...
processing files in directory: /opt/ctier/ctl/target/modules
scanning for files matching pattern: (SimpleAppCtl)-([0-9]+)\.jar
Uploading jar: /opt/ctier/ctl/target/modules/SimpleAppCtl-1.jar to server: 'training' ...
Installing new build of &quot;SimpleAppCtl&quot; module from server ...
Getting: http://training:8080/jackrabbit/repository/controltier/projects/demo/artifacts/modules/SimpleAppCtl-head.jar
To: /opt/ctier/ctl/projects/demo/artifacts/modules/SimpleAppCtl-head.jar
Created dir: /opt/ctier/ctl/projects/demo/modules/SimpleAppCtl
Expanding: /opt/ctier/ctl/projects/demo/artifacts/modules/SimpleAppCtl-head.jar into /opt/ctier/ctl/projects/demo/modules/SimpleAppCtl
&lt;/syntaxhighlight&gt;

Accept the defaults if prompted. The &quot;-upload&quot; option takes the built artifact and stores it on the server's WebDAV repository while the &quot;-deploy&quot; option subsequently downloads and installs the module into the project.

Note that you can distribute and install the new SimpleAppCtl controller type on other nodes using &lt;code&gt;Install-Module&lt;/code&gt; command.  Use include/exclude dispatch flags to run the command across all hosts:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -I '.*' -m Managed-Entity -c Install-Module -- -module SimpleAppCtl
&lt;/syntaxhighlight&gt;

===Run commands===
With the SimpleAppCtl type built and installed on the client hosts, it is possible to run the newly defined commands.

The general usage for running commands in the new SimpleAppCtl type is: 
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[ctier@training src]$ ctl -p demo -m SimpleAppCtl -c deploy
Start: &quot;run the app deploy cycle&quot; commands: stop,install,configure,start,listening
begin workflow command (1/5) -&gt; &quot;stop -argline simple&quot; ...
Running stop ...
end workflow command (1/5) -&gt; &quot;stop -argline simple&quot;
begin workflow command (2/5) -&gt; &quot;install -argline simple&quot; ...
Running install ...
end workflow command (2/5) -&gt; &quot;install -argline simple&quot;
begin workflow command (3/5) -&gt; &quot;configure -argline simple&quot; ...
Running configure ...
end workflow command (3/5) -&gt; &quot;configure -argline simple&quot;
begin workflow command (4/5) -&gt; &quot;start -argline simple&quot; ...
Running start ...
end workflow command (4/5) -&gt; &quot;start -argline simple&quot;
begin workflow command (5/5) -&gt; &quot;listening -argline simple&quot; ...
Running listening ...
end workflow command (5/5) -&gt; &quot;listening -argline simple&quot;
[command.timer.demo.SimpleAppCtl.deploy: 1.523 sec]
Workflow completed. execution time: 1.523 sec
&lt;/syntaxhighlight&gt;

Here's how to run the &quot;deploy&quot; workflow command on all nodes tagged &quot;simple&quot;:
	
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -I tags=simple -m SimpleAppCtl -c deploy 
Start: &quot;run the app deploy cycle&quot; commands: stop,install,configure,start,listening
begin workflow command (1/5) -&gt; &quot;stop -argline simple&quot; ...
end workflow command (1/5) -&gt; &quot;stop -argline simple&quot;
begin workflow command (2/5) -&gt; &quot;install -argline simple&quot; ...
end workflow command (2/5) -&gt; &quot;install -argline simple&quot;
begin workflow command (3/5) -&gt; &quot;configure -argline simple&quot; ...
end workflow command (3/5) -&gt; &quot;configure -argline simple&quot;
begin workflow command (4/5) -&gt; &quot;start -argline simple&quot; ...
end workflow command (4/5) -&gt; &quot;start -argline simple&quot;
begin workflow command (5/5) -&gt; &quot;listening -argline simple&quot; ...
end workflow command (5/5) -&gt; &quot;listening -argline simple&quot;
[command.timer.demo.SimpleAppCtl.deploy: 5.234 sec]
Workflow completed. execution time: 5.234 sec
&lt;/syntaxhighlight&gt;

From the output you can see each of the steps was run in the order specified.

==Define job for the workflow==

The SimpleAppCtl &quot;deploy&quot; command can also be run as a job. Save the following [[job.xml]] definition into a file:

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;joblist&gt;
  &lt;job&gt;
    &lt;name&gt;deploy&lt;/name&gt;
    &lt;description&gt;&lt;/description&gt;
    &lt;additional&gt;&lt;/additional&gt;
    &lt;loglevel&gt;INFO&lt;/loglevel&gt;
    &lt;group&gt;SimpleAppCtl&lt;/group&gt;
    &lt;context&gt;
      &lt;project&gt;demo&lt;/project&gt;
      &lt;type&gt;SimpleAppCtl&lt;/type&gt;
      &lt;command&gt;deploy&lt;/command&gt;
	  &lt;options&gt;
	     &lt;option name=&quot;argline&quot; value=&quot;simple&quot;/&gt;
      &lt;/options&gt;
    &lt;/context&gt;

    &lt;dispatch&gt;
      &lt;threadcount&gt;1&lt;/threadcount&gt;
      &lt;keepgoing&gt;false&lt;/keepgoing&gt;
    &lt;/dispatch&gt;
  &lt;/job&gt;
&lt;/joblist&gt;
&lt;/syntaxhighlight&gt;

Load the job into the server with &lt;code&gt;load-jobs&lt;/code&gt;:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m ProjectBuilder -c load-jobs -- -file job.xml
&lt;/syntaxhighlight&gt;

Go to the GUI and run the job.

The result will look something like the following screenshot:

[[Image:getting-started-deploy-job-screenshot.png|border|400px|Deploy workflow execution]]

{{Manual/navbox|state=uncollapsed}}

[[Category:Introduction]]</text>
    </revision>
  </page>
  <page>
    <title>Modeler Guide</title>
    <id>1975</id>
    <revision>
      <id>16735</id>
      <timestamp>2012-05-16T03:45:07Z</timestamp>
      <contributor>
        <username>Ella19</username>
        <id>1789</id>
      </contributor>
      <minor/>
      <comment>dsdads</comment>
      <text xml:space="preserve">[[Image:Crystal_Clear_app_display.png|right|150]]

This is the place to come if you want help using [[ControlTier]] software to model your automation.  All the content in this section assumes that you have access to a fully [[Installation|set up and working]] version of ControlTier and are [http://www.cavite-housing.com/ house and lot for sale in cavite] looking for help using it to construct resource models or develop ControlTier modules.

{{hubs/disclaimer}}

{{Installation/navbox}}
{{Guide/navbox}}
{{Manual/navbox|state=uncollapsed}}
{{Reference/navbox}}

[[Category:Help]]</text>
    </revision>
  </page>
  <page>
    <title>Modeling Activities</title>
    <id>723</id>
    <revision>
      <id>14293</id>
      <timestamp>2010-11-10T22:35:23Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>moved [[Methodology Activities]] to [[Modeling Activities]]</comment>
      <text xml:space="preserve">This page describes the activities in the [[Methodology]] describing how to integrate your build and deploy processes into the ControlTier framework.

&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Methodology&lt;/categorytree&gt;
==Overview==
[[Image:methodology-main-graphic.png|thumb|Methodology Main graphic]]

Please be sure to read the introduction to the general
[[Methodology]] if you have not done so already.

'''Activities'''

The activities that culminate in an operational
application build and deployment process are accomplished through these activities:

''Low-level (physical)''
* 1) integrating the package process
* 2) integrating the build process
* 3) integrating the deployment process

''High-level (logical)''
* 4) configuring coordinated processes
* 5) defining and running jobs

The result of each activity is a working executable process that can
be performed by a release administrator.

Note: The steps discussed in the Activities section are meant as
a general plan and not a tutorial. Please refer to the [[User Guide]]
for more information.

'''Activity steps'''

[[Image:methodology-method-lifecycle.png|Activity steps]]

Each activity progresses through several traditional development steps
listed in the table below:

&lt;table border=&quot;1&quot;&gt;
&lt;tr&gt;
&lt;th&gt;Step&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Analyze&lt;/td&gt;
&lt;td&gt;Review the existing procedures and map them to the high level process
structure described earlier.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Design&lt;/td&gt;
&lt;td&gt;Map the existing procedure to the correct base type and appropriate command.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Implement&lt;/td&gt;
&lt;td&gt;Choose available or create new subtype, overriding commands and defaults when necessary.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Test&lt;/td&gt;
&lt;td&gt;Implementation is correct when the desired outcome is validated.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sustain&lt;/td&gt;
&lt;td&gt;Review and set up practices to support the organization's use
of the activity.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Activities==
===Activity #1: Integrate package process===
&lt;table border=&quot;1&quot;&gt;
&lt;tr&gt;
&lt;th&gt;Done when: &lt;/th&gt;
&lt;td&gt;Package creation and installation life cycles are satisfied &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;
In this activity, you will examine the package creation and extraction procedures and expose those steps
via a [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Package.html Package] object.
&lt;/p&gt;

Read more about the [[Package]] type page.

====Analyze====
&lt;p&gt;There are two main procedures to understand for a given Package resource:
creating the package archive with the correct content
and extracting that content to the desired location. Each of these steps is supported by
Package type commands. To supply the needed information to drive the Package resource answer these questions:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How is the package archive obtained now? What build process creates it or is it a 3rd party 
dependency? If an in-house build process produces the package, identify the build
script and where it runs. You will need to know that in [[#Activity_.232:_Integrate_build_process|Activity #2]].
&lt;/li&gt;
&lt;li&gt;What format is the package archive? Is it a compressed tar file or format an operating system
facility handles (eg, rpm, deb, etc)? The base automation library that comes out of the
box includes a number of common package formats which means you can use one directly.
If not, you will need to subtype Package and implement two commands: create and extract.
&lt;/li&gt;
&lt;li&gt;What location does the package get installed to and does it vary based on 
environment? The answer to this question is used by the &lt;code&gt;installroot&lt;/code&gt;
parameter to several of the Package resource commands. If it is a fixed location,
then just note it. If it varies, determine if there is a pattern to the path
name. If there is no pattern, the variation can still be handled but it will be
driven by the Service resource discussed in [[#Activity_.233:__Integrate_deploy_process|Activity #3]].
&lt;/li&gt;
&lt;li&gt;What is the naming convention (if any) that can be used to identify the package archive file
on the file system? Depending on the format, a package archive might be named with
a base name, version and extension. 
&lt;/li&gt;
&lt;li&gt;Are there any special steps that should immediately precede or follow the 
extraction step? Sometimes it is necessary to incorporate steps such as
creating a directory, fixing a permission or checking pre- and post-conditions.
If so, note them and you will have to subtype Package (or another existing subtype)
and implement &lt;code&gt;prepare&lt;/code&gt; or &lt;code&gt;finish&lt;/code&gt; accordingly.
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
With the answers to these questions in hand you have the needed information to proceed to the design step.
&lt;/p&gt;

====Design====

[[Image:methodology-artifact-producer-consumer-package.png|artifact]]

&lt;p&gt;The ControlTier
core types include a number of package types (e.g., war, zip, tgz, rpm, jar, etc.)
that can be used out of the box. If the package archive at hand is one of these
formats, start by choosing the appropriate type.
&lt;/p&gt;
&lt;p&gt;If you must manage a new format, subtype Package and implement 
&lt;code&gt;create&lt;/code&gt; and &lt;code&gt;extract&lt;/code&gt;. The initial implementation
of &lt;code&gt;create&lt;/code&gt; might take a directory of content and produce
an archive containing it. Likewise, the &lt;code&gt;extract&lt;/code&gt; command's
initial implementation takes an archive file and extracts it to the
specified installroot.
&lt;/p&gt;
&lt;p&gt;You can choose to subtype existing Package types
for no other reason but to distinguish them as your own. For example,
you may build a WAR for your bookstore webapp so you might like to call this type
of package, BookstoreWar, making it a subtype of the 
[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_war.html war] type.
In this case, there is no need to override any command.
&lt;/p&gt;
&lt;p&gt;Finally, you may not need to worry about the &lt;code&gt;create&lt;/code&gt; command at
all since the build process already produces the artifact in the packaged form.

&lt;/p&gt;

====Implement====
&lt;p&gt;If you are sub-typing a Package type, implement the create and extract commands.
&lt;/p&gt;
&lt;p&gt;Once the package archive exists, upload it either via Workbench
or use the
[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Package.html#cmd_upload Package upload]
command.
Then, use the 
[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Package.html#cmd_register Package register]
command to create an object to record its location and other pertinent installation data.
&lt;/p&gt;
&lt;p&gt;You have reached the first goal when the package archive resides in the repository and referenced
by a new Package resource.
&lt;/p&gt;
&lt;p&gt;The second goal is to install the package from the repository. That process can be handled
by the
[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Package.html#cmd_install Package install]
command. The &lt;code&gt;install&lt;/code&gt; command takes parameters that should result in a number of subordinate
commands to fire: prepare, get, extract and finish. If you are using an existing Package type
you are done. If you are implementing a new Package subtype, ensure your &lt;code&gt;extract&lt;/code&gt;
command executed correctly, placing the extracted files into &lt;code&gt;installroot&lt;/code&gt;.
&lt;/p&gt;

====Test====

&lt;table border=&quot;1&quot;&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;&lt;th&gt;Result&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;create&lt;/td&gt;
&lt;td&gt;archive file named &lt;code&gt;filename&lt;/code&gt; created from files in &lt;code&gt;installroot&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;extract&lt;/td&gt;
&lt;td&gt;archive file named &lt;code&gt;filename&lt;/code&gt; extracted to directory &lt;code&gt;installroot&lt;/code&gt; possibly under a subdirectory named &lt;code&gt;base&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

====Sustain====
&lt;p&gt;N/A
&lt;/p&gt;

&lt;p&gt;
With the activities complete for the package sub-process, you are ready to proceed to the deployment sub-process in [[#Activity_.232:_Integrate_build_process|activity #2]].
&lt;/p&gt;

===Activity #2: Integrate build process===

&lt;table border=&quot;1&quot;&gt;
&lt;tr&gt;
&lt;th&gt;Done when: &lt;/th&gt;
&lt;td&gt;Build life cycle stages installable package(s) in the repository&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;In this activity, you will examine the existing build and packaging procedure and expose
those steps via a 
[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Builder.html Builder] object.
&lt;/p&gt;
&lt;p&gt;
Read more about the [[Core_Type_Guide#Builder|Builder]] type in the Core Types page.
&lt;/p&gt;

====Analyze====
&lt;p&gt;There are three main procedures that comprise the Builder's Build workflow command:
checking out source code, running a build tool, loading the packaged build artifacts to the
repository. Each of these steps is supported by a Builder command that uses a standard
set of attributes to parameterize each step. To supply the needed values to drive the Builder
commands begin by answering these questions:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How is the source code accessed from the SCM repo?
Are the source files in Subversion, CVS or something else? What module names and
tagging/labeling/branching scheme are used? In the end, you'll want to know how
to run the appropriate checkout command.
&lt;/li&gt;
&lt;li&gt;What build tool is used?
If it is a java project, is it Ant or Maven? If it is C-based, is it make or autoconf, etc.?
Ultimately, you want to know what command and command parameters are necessary to execute
a build on the checked out source code.
&lt;/li&gt;
&lt;li&gt;How are builds versioned? 
Some groups version their build by a typical numbering scheme like major.minor.patch-level
while others use some form of timestamp (e.g., yyyymmdd), and yet others by a release tag name.
In the end, you'll want to establish a &quot;buildstamp&quot; a common version identifier that lets you
find all the build artifacts from a given build execution.
&lt;/li&gt;
&lt;li&gt;How are the build artifacts packaged?
Java projects typically yield packaged artifacts like JAR, WAR, EAR files.
Other builds yield executables and architecture specific binaries that may
be packaged together in TAR, ZIP or operating specific package formats like
RPMs. In any case, you need to know how to identify the target files that the build
creates and in which directory to find them.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With the answers to these questions in hand you have the needed information
to proceed to the design step.
&lt;/p&gt;

====Design====

[[Image:methodology-artifact-producer-consumer-builder.png|artifact: producer and consumer]]

&lt;p&gt;As noted earlier, the general build process is embodied by the Builder type. If
you use CVS or Subversion, then there you should be covered by the standard
Builder command, &lt;code&gt;scmCheckout&lt;/code&gt;, to check out your source code. That
really just leaves how to manage the invocation of your build tool. 
If you use Ant, then use AntBuilder. If you use Maven, use MavenBuilder. Both
these Builder subtypes, override the runBuildScript command to invoke
either tool with the needed parameters. If you use a different build tool, then
you will subtype Builder and override &lt;code&gt;runBuildScript&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;All the parameters are maintained via an object model that allows default
overriding. Take a look at the 
[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Builder.html#Attributes Builder attributes]
section for the dozen-odd settings that will configure your Builder.
&lt;/p&gt;

====Implement====
&lt;p&gt;If you are creating your own Builder subtype, then your primary command to
implement is the overridden &lt;code&gt;runBuildScript&lt;/code&gt; command. This will
be a wrapper around the underlying build tool, and you will need to pass the necessary
parameters and/or configuration to it.
&lt;/p&gt;
&lt;p&gt;Primarily, the implementation step is to review and possibly override the 
key attributes that are used by the individual Builder commands that are 
called in succession by the &lt;code&gt;Build&lt;/code&gt; workflow command. The table
below relates each command to its set of attributes:
&lt;/p&gt;
&lt;table border=&quot;1&quot;&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;&lt;th&gt;Attributes&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;scmCheckout&lt;/td&gt;
&lt;td&gt;scmBinding, scmConnection, scmLabel, scmModule&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;runBuildScript&lt;/td&gt;
&lt;td&gt;buildFile, buildTarget &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;repoImport&lt;/td&gt;
&lt;td&gt;importMax, importMin, packageExtension, packageFilebaes,
packageInstallroot, packageType, packageVersion &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;If you are a workbench user you will create Setting resources and connect them as child
dependencies to the Builder object. If you are a ProjectBuilder user, you will create
an XML file that defines the resources and the dependency relationships.
&lt;/p&gt;

====Test====
&lt;p&gt;Testing a Builder is a simple procedure. Just run each of the commands that &lt;code&gt;Build&lt;/code&gt;
would run on its own and check the result of each one.
&lt;/p&gt;

&lt;table border=&quot;1&quot;&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;&lt;th&gt;Result&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;scmCheckout&lt;/td&gt;
&lt;td&gt;correct files are checked out to the &lt;code&gt;basedir&lt;/code&gt; directory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;runBuildScript&lt;/td&gt;
&lt;td&gt;build tool is invoked against the &lt;code&gt;buildFile&lt;/code&gt; with the right &lt;code&gt;buildTarget&lt;/code&gt; in the &lt;code&gt;basedir&lt;/code&gt; directory where the source code
was checked out. You should see the build artifacts somewhere in or below the  &lt;code&gt;targetdir&lt;/code&gt; directory.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;repoImport&lt;/td&gt;
&lt;td&gt;the files matching by the repoImport attributes are found and uploaded
to the server repository and registered as Package resources.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;If each of the three commands completed correctly, then run the &lt;code&gt;Build&lt;/code&gt;
workflow command to see the whole build process in action.  Note, all of these
Builder commands take a &lt;code&gt;-buildstamp &amp;lt;&amp;gt;&lt;/code&gt; argument that utilizes
your build versioning convention discussed earlier.
&lt;/p&gt;

====Sustain====
&lt;p&gt;There are two aspects to sustaining the Builder process over time.
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Object model maintenance. If you used Workbench to create the initial model,
you might elect to take that information and maintain it in an XML file that
can be used by ProjectBuilder.
&lt;/li&gt;
&lt;li&gt;Repository maintenance. After a while, obsolete packages will accumulate in the repository
so you will want to clean them out. Builder provides a utility command, 
&lt;code&gt;repoFind&lt;/code&gt; that takes parameters and can purge the repository. You
can run this command from Job Center or a system facility like cron.
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With the activities complete for the build sub-process, you are ready to proceed
to the deployment sub-process in activity #3.
&lt;/p&gt;

===Activity #3:  Integrate deploy process===
&lt;table border=&quot;1&quot;&gt;
&lt;tr&gt;
&lt;th&gt;Done when: &lt;/th&gt;
&lt;td&gt;Deploy cycle pulls packages from the repository, installs them and restarts server process&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;In this activity, you will examine the existing package deployment and server restart
procedure and expose those steps via a 
[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Service.html Service] object.
&lt;/p&gt;

&lt;p&gt;
Read more about the [[Service]] type in the Core Types page.
&lt;/p&gt;

====Analyze====
&lt;p&gt;There are two primary concerns during the deployment process. First, knowledge about which
packages to install (their version, location in the repository, etc.).
Second, how to coordinate the package installation with the running application process.
Each of these steps is supported by a Service command. To get started
using a Service one must answer the following questions:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What are the key directories? Find out where the packages will be extracted to
and where the server binaries reside.
&lt;/li&gt;
&lt;li&gt;What kind of package or packages are needed for a complete deployment? These will
be the packages that were produced by the Builder in [[#Activity_.232:_Integrate_build_process|Activity #2]]. Optionally, you
might also deploy third party software that will be defined as its own Package resource.
&lt;/li&gt;
&lt;li&gt;Are there any customizations that must occur after the package(s) installation completes?
Sometimes it is necessary to execute post-installation steps such as modifying
configuration or setting permissions, etc.
&lt;/li&gt;
&lt;li&gt;Does the application process need to be restarted and if so, when?
Some applications support the &quot;hot deploy&quot; option while others must require
the application process to be restarted. If there is a restart you should choose
when the process will be restarted with respect to the package installation step.
&lt;/li&gt;
&lt;li&gt;How do you know if the service is up or down and how do you stop it and start it?
Checking if a service is up or down can be done by checking the process table, network
port, or running a utility. Likewise, how a process is started and stopped will differ
from application to application. In the end, you will invoke an executable to start it
and communicate to the operating system how to stop it.
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
With the answers to these questions in hand you have the needed information to proceed to the design step.
&lt;/p&gt;

====Design====
&lt;p&gt;As noted earlier, the general deployment process is embodied by the 
[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Service.html Service] type.
The Service type provides a number of commands and workflow commands
that provide a coordinated deploy and restart.
&lt;/p&gt;

[[Image:methodology-artifact-producer-consumer-deployment.png|artifact: producer and consumer]]

&lt;p&gt;
The workflow commands provided by Service are typically used as-is. These workflow commands
create the general process but rely on hook commands that can be overridden to manage the
runtime state of the application process. Of course, how a process is restarted varies widely depending
on the application runtime requirements. While we at ControlTier do contribute new Service
subtypes as times goes on, you may need to create your own Service subtype to meet your
requirements. Luckily, it is a simple task to design and implement a Service as there are only
four commands to worry about: assertServiceIsUp, assertServiceIsDown, startService and stopService.
&lt;/p&gt;
&lt;p&gt;Typically, these four commands are the only design consideration. If you find that your
commands need parameters of their own, you might consider defining attributes for your subtype
to contain them.
&lt;/p&gt;

====Implement====

&lt;p&gt;Implementation is done in these parts:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Choose or create a Service type&lt;/li&gt;
&lt;li&gt;Create a Service resource&lt;/li&gt;
&lt;li&gt;Configure a set of package dependencies&lt;/li&gt;
&lt;/ol&gt;

=====Choose or create a Service type=====
&lt;p&gt;Primarily, the implementation step includes: the review and possibly override the 
key attributes that are used by the individual Service commands that are 
called in succession by the &lt;code&gt;Stop, Start, Status&lt;/code&gt; workflow commands. The table
below relates each command to its set of attributes:
&lt;/p&gt;
&lt;table border=&quot;1&quot;&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;&lt;th&gt;Attributes&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;assertServiceIsDown and assertServiceIsUp&lt;/td&gt;
&lt;td&gt;basedir, installroot&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;startService and stopService&lt;/td&gt;
&lt;td&gt;basedir, installroot&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

=====Create a Service resource=====
&lt;p&gt;Create an instance of your chosen Service subtype, giving it a name
and setting the basedir and install-root values.
&lt;/p&gt;

=====Configure a set of package dependencies=====
&lt;p&gt;Identify the desired Package resources and make them child dependencies
to Service resource created in step 3.3.2.
&lt;/p&gt;

&lt;p&gt;If you are a workbench user you will create Setting resources and connect them as child
dependencies to the Builder object. If you are a ProjectBuilder user, you will create
an XML file that defines the resources and the dependency relationships.
&lt;/p&gt;

====Test====
&lt;p&gt;Testing a Service is a simple procedure. Just run each of the commands that &lt;code&gt;Update&lt;/code&gt;
would run on its own and check the result of each one.
&lt;/p&gt;

&lt;table border=&quot;1&quot;&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;&lt;th&gt;Result&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Packages-Install&lt;/td&gt;
&lt;td&gt;correct package dependencies are installed to their proper install-root directories&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Stop&lt;/td&gt;
&lt;td&gt;the application process is not running and the &lt;code&gt;assertServiceIsDown&lt;/code&gt;
command exits successfully (conversely assertServiceIsUp should fail).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Start&lt;/td&gt;
&lt;td&gt;the application process is running and the &lt;code&gt;assertServiceIsUp&lt;/code&gt;
command exits successfully (conversely assertServiceIsDown should fail).&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;If each of the three commands completed correctly, then run the &lt;code&gt;Update&lt;/code&gt;
workflow command to see the whole deployment process in action.
&lt;/p&gt;

====Sustain====
&lt;p&gt;The following aspects to sustaining the Service process over time include:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
Object model maintenance. If you used Workbench to create the initial model, 
you might elect to take that information and maintain it in an XML file
that can be used by ProjectBuilder.
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
With the activities complete for the deployment sub-process, 
you are ready to proceed to the deployment sub-process in activity #3.
&lt;/p&gt;

===Activity #4:  Configure coordinated processes===

&lt;table border=&quot;1&quot;&gt;
&lt;tr&gt;
&lt;th&gt;Done when: &lt;/th&gt;
&lt;td&gt;BuildAndUpdate workflow command drives builds and deployments end-to-end&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;In this activity, you will understand the coordination needs of build and deployment
and expose these steps via the BuildAndUpdate workflow command. Along the way
you will create and configure
[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Site.html Site] and
[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Updater.html Updater] objects.
This activity covers the &quot;logical&quot; process layer where you begin to coordinate the
sub-processes in the &quot;physical&quot; layer.
&lt;/p&gt;

[[Image:methodology-basetypes-flow-activity-3.png|basetypes-flow-activity-3]]

&lt;p&gt;
Read more about the [[Core_Type_Guide#Updater|Updater]] type in the Core Types page.
&lt;/p&gt;

====Analyze====
&lt;p&gt;
There are three levels of coordination at work here. Firstly, there is coordinating
all the Builders, invoking them to run their Build workflows. Secondly, there is coordinating
all the Service resources to run their Update workflows. Finally, there is coordinating the
two previous steps. Each of these steps are managed via the Updater and Site objects. To
make use of these types begin by answering these questions:
&lt;/p&gt;
&lt;ul&gt;   

&lt;li&gt;How will package version dependencies be coordinated across components ? 
The normal convention is to use a common &lt;code&gt;buildstamp&lt;/code&gt; value to relate
packages across a set of Builders for a single release. 
&lt;/li&gt;
&lt;li&gt;In what order will the Service resources be updated ? A multi-tier application
is usually comprised of various layers of components. Higher layers normally are
restarted after lower layers. 
&lt;/li&gt;
&lt;li&gt;What kind of logic is needed to update the set of interdependent application components ?
Make a note if there are unique interleaving requirements to restarting application components.
&lt;/li&gt;
&lt;li&gt;During the process are there other process management tools to tie in ?
Sometimes there are ancillary facilities that must be coordinated during the process (
e.g., security, load balancing, monitoring, etc.).
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
With the answers to these questions in hand you have the needed information to proceed to the design step.
&lt;/p&gt;

====Design====
&lt;p&gt;Generally, the generic Site and Updater types are useful as they are and 
implement a basic coordinated build and deployment process. One can govern the order
of Updates across Service resources by making use of the &lt;code&gt;rank&lt;/code&gt; attribute.
The Site object's commands use that value to sort in ascending and descending
order depending on the command.
&lt;/p&gt;
&lt;p&gt;Of course, how a given
set of application services that tie together to form an integrated service
are managed during a broad deployment can vary. For this reason, you may find
it necessary to eventually create a Site subtype that overrides the &lt;code&gt;Update&lt;/code&gt;
workflow command.    

The role of Site's Update  workflow command is to coordinate deployment activity
across an integrated stack of application service deployments. So, if you need
to interleave application restarts in between software package installations
in unique ways, you will likely need to:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;create specific commands in your Site subtype that manage tier-specific steps&lt;/li&gt;
&lt;li&gt; override the Update command and define a sequence of commands that presumably uses the commands defined above.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This topic is treated in the 
[[Core_Type_Guide#Site|Site]] section of the Core Types
documentation.
&lt;/p&gt;
&lt;p&gt;A final rule of thumb though is this: don't create Site or Updater subtypes
initially, if you can avoid it. It is more important to have an uncomplicated end-to-end process
to ensure the basic low-level 
steps exist and work correctly (i.e., actions in the Service and Builder level).
You can always subtype to come up with your own coordination logic later.
&lt;/p&gt;

====Implement====
&lt;p&gt;If you are creating your own Site subtype, override the &lt;code&gt;Update&lt;/code&gt; workflow command and implement the
necessary supporting commands that will comprise its command sequence.
&lt;/p&gt;
&lt;p&gt;Once the Updater and Site types are chosen, implementation is done in these parts:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create Site object
&lt;/li&gt;      
&lt;li&gt;Create Updater object
&lt;/li&gt;
&lt;/ol&gt;

=====Create Site object=====
&lt;p&gt;Create an instance of your chosen Site type via Workbench or ProjectBuilder.
Set the Site object's child dependencies to include the desired Site objects.
&lt;/p&gt;
=====Create Updater object=====

&lt;p&gt;Create an instance of your chosen Site type via Workbench or ProjectBuilder.
Set the Updater object's child dependencies to include the Site object
and desired Builder objects.
&lt;/p&gt;
&lt;p&gt;In between the Build and Update phases, Updater runs a command called
&lt;code&gt;runChangeDependencies&lt;/code&gt; to dynamically configure the Service resource dependencies
to use the new set of packages generated in the Build phase.
This command uses an optional attribute, &lt;code&gt;defaultpackagename&lt;/code&gt;,  to
pick among multiple packages of the same version to resolve ambiguity.
&lt;/p&gt;
&lt;table border=&quot;1&quot;&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;&lt;th&gt;Attributes&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;runChangeDependencies&lt;/td&gt;
&lt;td&gt;defaultpackagename&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

====Test====
&lt;p&gt;Testing the end-to-end process is a simple procedure of running through
each command on its own and check the result of each one.
&lt;/p&gt;
&lt;table border=&quot;1&quot;&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;&lt;th&gt;Result&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Build&lt;/td&gt;
&lt;td&gt;the Builder object(s) successfully execute their Build workflow.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;runChangeDependencies&lt;/td&gt;
&lt;td&gt;the Service resources have the correct versions of package dependencies
based on &lt;code&gt;-buildstamp&lt;/code&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Update&lt;/td&gt;
&lt;td&gt;the Service resources successfully complete their Update workflows&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;
If each of the three commands completed correctly,
then run the BuildAndUpdate workflow command to see the whole deployment process in action.
&lt;/p&gt;
====Sustain====
&lt;p&gt;The following aspects to sustaining the Service process over time include:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Object model maintenance. If you used Workbench to create the initial model, you might elect to take that information and maintain it in an XML file that can be used by ProjectBuilder.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
With the activities complete for the coordinated build and deploy sub-process, 
you are ready to proceed to define and run jobs in activity #4.
&lt;/p&gt;

===Activity #5:  Define and run jobs===
&lt;table border=&quot;1&quot;&gt;
&lt;tr&gt;
&lt;th&gt;Done when: &lt;/th&gt;
&lt;td&gt;admin staff can run scheduled commands from JobCenter&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;In this activity, you will expose the BuildAndUpdate workflow command to
the Job Center tool to automate running it at timed intervals.
&lt;/p&gt;
&lt;p&gt;Because Job Center is a graphical tool that makes it simple
to configure and run commands, the Analyze and Design steps
are brief.
&lt;/p&gt;

See the [[Jobcenter|Using Jobcenter]] section in the User Guide.

====Analyze====
&lt;p&gt;There are really just a few considerations that must be made
when exposing a command as a job in Job Center:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What commands need to be run? Maybe you will run
the Updater &lt;code&gt;BuildAndUpdate&lt;/code&gt; command but you
may also wish to run others like Site &lt;code&gt;Status&lt;/code&gt;.
&lt;/li&gt;
&lt;li&gt;Do the commands run on-demand or at scheduled intervals?
Some commands you may wish to expose to Job Center operators that
they can run any time. Others you will want to run automatically
on a scheduled basis. 
&lt;/li&gt;
&lt;li&gt;What additional information do you want to communicate to the Job Center operator ?
Each job entry, includes a section where you can type HTML to include anything
useful the JobCenter operator may benefit from.
&lt;/li&gt;
&lt;/ul&gt;

==== Design====
&lt;p&gt;There is not much design consideration, except perhaps coming up with
a naming convention for job entries. Job Center operators may be unfamiliar
with the underlying type/object model so it might be better to express job
names in plain english using business terms.
&lt;/p&gt;

====Implement====
&lt;p&gt;Implementing a job is a simple process of pushing the &quot;Create new job ...&quot;
button in Job Center. In the new job form input the following:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Pick object and command (including needed options)
&lt;/li&gt;
&lt;li&gt;Name the job and give it a description. Include additional information if any.&lt;/li&gt;
&lt;li&gt;If it is a scheduled job, configure the times and days&lt;/li&gt;
&lt;/ol&gt;

==== Test====
&lt;p&gt;Testing the job is a simple procedure of running the job from Job Center UI. It is
easiest to run the command &quot;on-demand&quot; but if it is a schedule command
you can temporarily edit the schedule to run it the next minute so you don't 
have to wait long to see it run.
&lt;/p&gt;
&lt;table border=&quot;1&quot;&gt;
&lt;tr&gt;&lt;th&gt;Action&lt;/th&gt;&lt;th&gt;Result&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;execute
&lt;/td&gt;
&lt;td&gt;command runs successfully and a new execution entry shows in the report.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

====Sustain====
&lt;p&gt;There is not much maintenance to perform for Job Center. The main consideration
is thinking about what kind of reports you might like to share. Select a filter
and report format and generate a report.
&lt;/p&gt;

{{Manual/navbox}}
[[Category:Methodology]]</text>
    </revision>
  </page>
  <page>
    <title>Modeling Methodology</title>
    <id>717</id>
    <revision>
      <id>14291</id>
      <timestamp>2010-11-10T22:34:58Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>moved [[Methodology]] to [[Modeling Methodology]]</comment>
      <text xml:space="preserve">This page describes a methodology on how to integrate your build and deploy processes into the ControlTier framework.

&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Methodology&lt;/categorytree&gt;
[[Image:methodology-main-graphic.png]]

You have a multi-component application that could benefit from ControlTier's
automation platform but you are unsure how to get started. After all,
your application is unique and so are some of its procedures to build and
deploy it.

This document provides a general description of a methodology successfully
used to implement various customer projects, both large and small. 
The scope of this methodology covers all
the activities needed to automate an end-to-end build and deployment process
using the ControlTier base automation library. This document is not a tutorial
but a general plan.

The activities of this methodology will address questions like:

# What is covered by the base automation framework ? 
# How to tie in a packaging process ? 
# How to tie in a build process ? 
# How to tie in a deployment process ?
# How the two above steps are coordinated for an end-to-end process ?
# How to operationalize these processes for admin staff ?

In the end, treat this methodology as a collection of rules of thumb for a successful use of 
ControlTier but feel free to bend it to best fit your organization and application
needs.

'''General approach: divide and conquer'''

While it's a somewhat simple job to automate a build process or deploy process
for a single application component, creating a coordinated automation process that manages
these steps for multiple and diverse application components is quite another! 
Of course, the result should be a set of automation processes that are simple
(so a less technical person can run them) yet flexible (so they can be re-factored safely over time).
The very thought of these considerations is no doubt quite overwhelming. In order to tackle
the problem, we use a &quot;divide and conquer&quot; strategy.

The divide and conquer strategy breaks the process into several rough parts, each part
responsible for a particular phase or role in the overall process. Dividing the work
into several parts will confine each sub process to few and simpler tasks and avoid
overly complex logic and information.

The figure below organizes these divided sub-processes into two layers: high and low levels.

[[Image:methodology-process-logic-layers.png|Process: logic layers]]

Low-level processes like &quot;build&quot;, &quot;package&quot; and &quot;deployment&quot; 
boil down to simple steps like invoking a build script, creating and extracting a package, or restarting
a system service. While high-level processes are only concerned about how to coordinate
low-level processes.

We consider low-level processes to be &quot;physical&quot; since they correspond to
concrete actions that occur on a machine against something like a system process or a package file. 
These are things you can see.
The high-level processes are considered to be &quot;logical&quot; since they are really about
some thing that coordinates activity and just corresponds to the process itself. 

The methodology discussed here uses the process structure illustrated in the diagram above.

'''Package-centric paradigm'''

It's important for any methodology to be grounded by something tangible, a basic concept
which will help direct its users to reach a certain end. This methodology is grounded by
the package concept, and it is the goal of this methodology to understand how
to produce and deploy packages. 
A package plays the role of pivot point in the end-to-end build and deployment process.
By understanding the needs to create and install a package, you are half way
to understanding how to integrate the build and deployment process.

While packages come in all sizes and formats, can contain data, content, code or configuration,
they are concrete things and are the common currency in the build and deployment world. Packages are
interchanged between teams across the organization as well as
the phases of the end to end process.

'''Modeling the process with ControlTier objects'''

Part of the usefulness of the ControlTier framework lies in its base automation library.
This library contains a set of object-oriented modules that reflect the &quot;divide and conquer&quot;
strategy discussed above and embodies each step in the process as a command contained
in a base type. These objects are designed to work together, enabling the 
end-to-end coordinated build and deployment process.


[[Image:methodology-basetypes-flow-BuildAndUpdate.png|Process: basetypes-flow-BuildAndUpdate]]

The diagram above shows five ControlTier objects 
&amp;mdash; Builder, Package, Service, Site, Updater &amp;mdash;
each object corresponding to a particular part of the overall process. The
solid blue arrows in the diagram show how objects interact with each other via standard
command interfaces while the red text and arrows show what part of the process
the object's type implements.

One puts the base library to work through tying your &quot;physical&quot; processes to
Builder, Package and Service resources. While one uses Updater and Site objects to coordinate the
end-to-end process. How one ties their existing process to the base framework depends
on their particular requirements and availability of concrete types.
For example, to tie an control-dispatching build process, one can use the Builder subtype,
AntBuilder (or MavenBuilder for a Maven build process). Alternatively, one can
use the Service subtype, JakartaTomcat, to manage WAR package deployments for Tomcat
instances. 

If one needs to expose a particular build and deploy process not covered by
an available type, one creates their own sub-types. Subtyping is simple and 
subtypes still leverage quite a bit of the functionality from base type framework.   

'''Framework driven control'''

The ControlTier base library controls the flow of execution using an inversion of control model.
Each base object executes a process step through a standard command.
These commands can be called in a sequence via a &lt;em&gt;workflow command&lt;/em&gt;, thereby
defining a higher level process. 
The base types establish the overall process structure using a hierarchy of
well known workflow commands. The diagram below shows a partial view into this workflow command hierarchy:

[[Image:methodology-workflow-structure.png|Workflow structure]]

The blue boxes are standard workflow commands that either call commands internal
to that object, or another standard workflow command offered by an object of another type.

''Design pattern for workflow commands''

All the standard workflow commands employ a software design pattern called
[http://en.wikipedia.org/wiki/Template_method_pattern Template method]
wherein the template method defines a program skeleton that establishes the steps of a process,
allowing sub types to override individual steps in order to establish specialized behavior.
Therefore, the commands you override in subtypes are called by the standard workflows
defined in base types.      

All the essential build and deployment processes are embodied in standard workflow commands
and follow the template method design pattern.
The diagram below shows the general pattern and an example showing Builder's &lt;code&gt;Build&lt;/code&gt;
workflow command. In this example, &lt;code&gt;Build&lt;/code&gt; is the standard workflow
that calls subordinate commands (scmCheckout, runBuildscript, repoImport) that can be overridden
by subtypes. The AntBuilder subtype overrides just the &lt;code&gt;runBuildscript&lt;/code&gt; command so
when &lt;code&gt;Build&lt;/code&gt; is run on a AntBuilder object, the standard Build workflow inherited by
the base type is used but the overridden command is used instead of the generic one.

&lt;table border=&quot;1&quot;&gt;
  &lt;tr&gt;
&lt;th&gt;Design Pattern&lt;/th&gt;&lt;th&gt;Example&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
&lt;td&gt;
[[Image:methodology-template-method-pattern.png|Template method pattern]]
&lt;/td&gt;
&lt;td&gt;
[[Image:methodology-template-method-example.png|Template method example]]
&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

'''General rules of thumb'''

It is important to keep perspective on how to go about the work which will
result in a working and successful ControlTier solution. There are several
rules of thumb that will help keep one on the right track:

''Divide and conquer''

Any time you face a long and/or complicated process it's easy to get overwhelmed
and confused. The name of the game is dividing the work into logical parts
and work on each one. Luckily, the ControlTier base types guide how to break
a build and deployment process down so often times one just asks to which base type
does a sub-process correspond. There are more primitive base types than the 
ones described here so consult the 
[[Core Type Guide]].

''Start with low-level procedures, then work up to the high-level ones''

The end-to-end build and deploy process covers a lot of ground. What is the best
order of work to get the job done? We have found time and again it is always
best to start with the build, then deploy, then the coordinated deploy and finally the coordinated
build and deploy. In fact, the activities of this methodology are organized around
this order of work. 

''Try to avoid custom sub-typing''

ControlTier's [[Workbench]] and [[ProjectBuilder]] make it easy to create your own
types and there are times when this is preferable or necessary. On the other hand,
you can get the final automated process working quicker by leveraging existing 
core types and type libraries found on 
[http://sourceforge.net/projects/moduleforge ModuleForge].
You may also have a fellow ControlTier
user in your organization that has pertinent functionality already in a custom type.
Code re-use means code avoidance, and less maintenance burden overall!

''Establish namespace and naming convention''

ControlTier gives you a lot of freedom on how you name your types
and objects. That said, it pays dividends to give some thought to
a standard way of naming your types and objects. We have found
it is best to use a common prefix for all locally developed subtypes
(e.g., &lt;em&gt;Pfx&lt;/em&gt;&lt;code&gt;Typename&lt;/code&gt;). This creates a type namespace
and makes it easy to visually distinguish your types from those from 
other sources. 
Objects also benefit from a regular naming scheme. Sites and Service resources
can be visually associated with each other by using an environment name
and optionally hostname.
(e.g., &lt;em&gt;environment&lt;/em&gt; or  &lt;em&gt;environment&lt;/em&gt;-&lt;code&gt;hostname&lt;/code&gt;).
Package resources typically follow a pattern where names are a concatenation
of three bits of package metadata
(e.g., &lt;em&gt;base&lt;/em&gt;-&lt;code&gt;version&lt;/code&gt;.&lt;em&gt;extension&lt;/em&gt;).

'''Module development using Workbench or ProjectBuilder? GUI vs. CLI'''

There are two ControlTier
module development tools: [[Workbench]] and [[ProjectBuilder]]. 
Either can be used to define types and objects, and maintain a project. Given this choice,
which one should you use? If you hate graphical interfaces and are comfortable within
a shell environment, then the default choice is  ProjectBuilder. That said,
there is a lot of merit in choosing Workbench, if you are a brand new user. Workbench includes
a class browser and nice features for moving around and editing your object model.
Once you have sketched out an initial process with Workbench you can always switch to
ProjectBuilder to maintain the type and resource definitions.
With care, you can even switch back and forth between
tools. If there is more than one user doing the module development and 
you do choose to use both tools, you will need to create a change process to ensure
changes are not lost when switching between the tools.

'''Methodology Activities'''

So what are the general steps to finishing a complete ControlTier implementation
and how do you know you have covered all the essentials?
To address these concerns, this methodology is made up of four activities 
which culminate in an operational application service build and deployment process:

[[Image:methodology-main-graphic.png|Main graphic]]

As the diagram indicates, you are done when you have exposed your process
as a job in Job Center.

Below are links to the individual activities if you want to skip directly to one:

# integrate package process  [[Methodology Activities#Activity_.231:_Integrate_package_process|Activity #1]]
# integrate build process [[Methodology Activities#Activity_.232:_Integrate_build_process|Activity #2]]
# integrate deployment process  [[Methodology Activities#Activity_.233:__Integrate_deploy_process|Activity #3]]
# configure coordinated processes [[Methodology Activities#Activity_.234:__Configure_coordinated_processes|Activity #4]]
# define and run jobs [[Methodology Activities#Activity_.235:__Define_and_run_jobs|Activity #5]]

The goal of each activity is a working executable process that can
be performed by a release administrator. This keeps the methodology grounded
in achieving practical results.

{{Manual/navbox}}

[[Category:Methodology]]</text>
    </revision>
  </page>
  <page>
    <title>Modelutil</title>
    <id>1291</id>
    <revision>
      <id>10223</id>
      <timestamp>2009-12-11T18:25:19Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Types&lt;/categorytree&gt;
[[File:Icon-AssemblyObject.png]]
[[modelutil]] is a utility containing several commands useful for managing resources in a project model. It provides a command interface to defining and accessing model data in a [[project]] (e.g., as an alternative to [[project.xml]], [[:Category:Workbench_Ant_Tasks|Ant tasks]]).
  
==Reference==

* [http://controltier.sourceforge.net/docs/snapshot/core/reference/user/modelutil/index.html modelutil reference]

{{Manual/navbox}}

[[Category:Managed-Entity]]
[[Category:coreutils]]</text>
    </revision>
  </page>
  <page>
    <title>Module</title>
    <id>1851</id>
    <revision>
      <id>12326</id>
      <timestamp>2010-01-21T17:28:29Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Created page with 'Proposed in [[Architecture (TNG)#Controller_type]] ==Intent== ==Discussion==  ==Structure== [[Image:Controller-pattern.png]]  ===Control Hierarchy===  ==Commands==  &lt;table class=…'</comment>
      <text xml:space="preserve">Proposed in [[Architecture (TNG)#Controller_type]]
==Intent==
==Discussion==

==Structure==
[[Image:Controller-pattern.png]]

===Control Hierarchy===

==Commands==

&lt;table class=&quot;wikitable&quot;&gt;
	&lt;caption&gt;Common Options&lt;/caption&gt;
	&lt;tr&gt;
		&lt;th&gt;parameter&lt;/th&gt;&lt;th&gt;type&lt;/th&gt;&lt;th&gt;example&lt;/th&gt;
	&lt;/tr&gt;	
	&lt;tr&gt;
		&lt;td&gt;output&lt;/td&gt;&lt;td&gt;string&lt;/td&gt;&lt;td&gt;/tmp/output.log&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;timeout&lt;/td&gt;&lt;td&gt;string&lt;/td&gt;&lt;td&gt;60s&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;nodeIncludes&lt;/td&gt;&lt;td&gt;string&lt;/td&gt;&lt;td&gt;regex&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;nodeExcludes&lt;/td&gt;&lt;td&gt;string&lt;/td&gt;&lt;td&gt;regex&lt;/td&gt;
	&lt;/tr&gt;	
	&lt;tr&gt;
		&lt;td&gt;args&lt;/td&gt;&lt;td&gt;string&lt;/td&gt;&lt;td&gt;-bloo blee&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
===call===

&lt;table class=&quot;wikitable&quot;&gt;
	&lt;caption&gt; Options&lt;/caption&gt;
	&lt;tr&gt;
		&lt;th&gt;parameter&lt;/th&gt;&lt;th&gt;type&lt;/th&gt;&lt;th&gt;example&lt;/th&gt;
	&lt;/tr&gt;	
	&lt;tr&gt;
		&lt;td&gt;command&lt;/td&gt;&lt;td&gt;string&lt;/td&gt;&lt;td&gt;cmdX&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;type&lt;/td&gt;&lt;td&gt;string&lt;/td&gt;&lt;td&gt;TypeX&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;call -- -command cmdX -type TypeA -args &quot;-floo blu&quot;&lt;/syntaxhighlight&gt;
===exec===
&lt;table class=&quot;wikitable&quot;&gt;
	&lt;caption&gt; Options&lt;/caption&gt;
	&lt;tr&gt;
		&lt;th&gt;parameter&lt;/th&gt;&lt;th&gt;type&lt;/th&gt;&lt;th&gt;example&lt;/th&gt;
	&lt;/tr&gt;	
	&lt;tr&gt;
		&lt;td&gt;executable&lt;/td&gt;&lt;td&gt;string&lt;/td&gt;&lt;td&gt;/bin/bash&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;script&lt;/td&gt;&lt;td&gt;string&lt;/td&gt;&lt;td&gt;&quot;who am i&quot;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;scriptfile&lt;/td&gt;&lt;td&gt;string&lt;/td&gt;&lt;td&gt;/path/to/script&lt;/td&gt;
	&lt;/tr&gt;	
	&lt;tr&gt;
		&lt;td&gt;exportprops&lt;/td&gt;&lt;td&gt;string&lt;/td&gt;&lt;td&gt;context.&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;spawn&lt;/td&gt;&lt;td&gt;boolean&lt;/td&gt;&lt;td&gt;&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;exec -- -executable sh -scriptfile dav://scripts/start.sh -spawn&lt;/syntaxhighlight&gt;

===relay===
&lt;table class=&quot;wikitable&quot;&gt;
	&lt;caption&gt; Options&lt;/caption&gt;
	&lt;tr&gt;
		&lt;th&gt;parameter&lt;/th&gt;&lt;th&gt;type&lt;/th&gt;&lt;th&gt;example&lt;/th&gt;
	&lt;/tr&gt;	
	&lt;tr&gt;
		&lt;td&gt;name&lt;/td&gt;&lt;td&gt;string&lt;/td&gt;&lt;td&gt;.*&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;type&lt;/td&gt;&lt;td&gt;string&lt;/td&gt;&lt;td&gt;[\.]*&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;errorcommand&lt;/td&gt;&lt;td&gt;string&lt;/td&gt;&lt;td&gt;cmdX&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;threadcount&lt;/td&gt;&lt;td&gt;string&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;
	&lt;/tr&gt;	
	&lt;tr&gt;
		&lt;td&gt;sortkey&lt;/td&gt;&lt;td&gt;string&lt;/td&gt;&lt;td&gt;property&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;sortorder&lt;/td&gt;&lt;td&gt;string&lt;/td&gt;&lt;td&gt;ascending/descending&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;relay -- -command cmdX -type TypeA -name '.*' -threadcount 2&lt;/syntaxhighlight&gt;

===sequence===
&lt;table class=&quot;wikitable&quot;&gt;
	&lt;caption&gt; Options&lt;/caption&gt;
	&lt;tr&gt;
		&lt;th&gt;parameter&lt;/th&gt;&lt;th&gt;type&lt;/th&gt;&lt;th&gt;example&lt;/th&gt;
	&lt;/tr&gt;	
	&lt;tr&gt;
		&lt;td&gt;commands&lt;/td&gt;&lt;td&gt;string&lt;/td&gt;&lt;td&gt;cmdA,cmdB&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;errorcommand&lt;/td&gt;&lt;td&gt;string&lt;/td&gt;&lt;td&gt;cmdX&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;threadcount&lt;/td&gt;&lt;td&gt;string&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;
	&lt;/tr&gt;
	
&lt;/table&gt;

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;sequence -- -commands cmdX,cmdY,cmdZ -errorcommand cmd&lt;/syntaxhighlight&gt;

===info===
Optionally update, and then display the metadata for the resource

&lt;table class=&quot;wikitable&quot;&gt;
	&lt;caption&gt; Options&lt;/caption&gt;
	&lt;tr&gt;
		&lt;th&gt;parameter&lt;/th&gt;&lt;th&gt;type&lt;/th&gt;&lt;th&gt;example&lt;/th&gt;
	&lt;/tr&gt;	
	&lt;tr&gt;
		&lt;td&gt;update&lt;/td&gt;&lt;td&gt;boolean&lt;/td&gt;&lt;td&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;properties&lt;/td&gt;&lt;td&gt;boolean&lt;/td&gt;&lt;td&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;process&lt;/td&gt;&lt;td&gt;boolean&lt;/td&gt;&lt;td&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;format&lt;/td&gt;&lt;td&gt;string&lt;/td&gt;&lt;td&gt;output format&lt;/td&gt;
	&lt;/tr&gt;
	
&lt;/table&gt;

==Model==</text>
    </revision>
  </page>
  <page>
    <title>Module.properties</title>
    <id>131</id>
    <revision>
      <id>9730</id>
      <timestamp>2009-12-10T21:17:02Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">=Overview=

      &lt;p&gt;This file contains the metadata describing the module. Command handlers
	can read the file using the following code. Note that the ${module.dir}
	property will be defined by the command dispatcher.
      &lt;/p&gt;

It is typically read by a command via a statement like so:

      &lt;code&gt;&amp;lt;property file=&amp;quot;${module.dir}/module.properties&amp;quot;/&amp;gt;&lt;/code&gt;

      &lt;p&gt;&lt;strong&gt;Common&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;The table below lists the properties defined for any module&lt;/p&gt;
      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	  &lt;th&gt;Property&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;module.name&lt;/td&gt;&lt;td&gt;Name of the module
	   &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;module.commands&lt;/td&gt;&lt;td&gt;Comma separated list of commands.
	  &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;modules.description&lt;/td&gt;&lt;td&gt;Description of the module and its use.
	 &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;module.notify&lt;/td&gt;&lt;td&gt;If true sends notifications.
	   &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;module.notify.email&lt;/td&gt;&lt;td&gt;Email address to send notifications.
	   &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;module.version&lt;/td&gt;&lt;td&gt;Module version number.
	   &lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;
      &lt;p&gt;Example&lt;/p&gt;
      &lt;pre&gt;module.name=Apache
module.commands=Start, Update, Status, Stop, PackagesGetAll, Configure
module.description=Module for controlling apache deployments
module.transforms.dir=/usr/local/httpd/var
module.notify=true
module.notify.email=admin@domain
module.version=55&lt;/pre&gt;

      &lt;p&gt;&lt;strong&gt;Super Modules&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;This table lists the properties that are required to describe super module dependencies.&lt;/p&gt;
     &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	  &lt;th&gt;Property&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;module.supermodules&lt;/td&gt;&lt;td&gt;Comma separated list of super modules.
	  &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;module.supermodule.&lt;em&gt;module-name&lt;/em&gt;.version&lt;/td&gt;&lt;td&gt;Version number of super module, &lt;em&gt;module-name&lt;/em&gt;.
	  &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;module.commands.&lt;em&gt;command-name&lt;/em&gt;.inherited&lt;/td&gt;&lt;td&gt;Name of super module command-name is inherited from.
	 &lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;
     &lt;p&gt;Example&lt;/p&gt;
     &lt;pre&gt;module.supermodules=Packages
module.commands.PackagesGetAll.inherited=Packages
module.supermodule.Packages.version=4&lt;/pre&gt;

[[Category:CTL properties]]</text>
    </revision>
  </page>
  <page>
    <title>ModuleExists Type Reference</title>
    <id>1030</id>
    <revision>
      <id>13782</id>
      <timestamp>2010-11-10T15:10:54Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;project depot&quot; to &quot;project name&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Types&lt;/categorytree&gt;

==Description==
      &lt;p&gt;
	The module-exists type is a [http://ant.apache.org/manual/CoreTypes/custom-programming.html#customconditions custom condition] that can be used
	in the [http://ant.apache.org/manual/CoreTasks/conditions.html condition] core Ant task or any task that accepts a condition.
      &lt;/p&gt;

{{Version Required 3.4.6}}

==Attributes==
      &lt;p&gt;The module-exists condition takes two attributes&lt;/p&gt;
    
{| border=&quot;1&quot;
! attribute
! description
! required
|-
| depot
| project name
| true
|-
| module
| module name
| true
|}

==Examples==

      &lt;pre&gt;
     &amp;lt;condition property=&quot;exists&quot;&amp;gt;
         &amp;lt;module-exists depot=&quot;${context.depot}&quot; module=&quot;shellutil&quot;/&amp;gt;
      &amp;lt;/condition&amp;gt;
      &amp;lt;fail unless=&quot;exists&quot;&gt;shellutil not found!&amp;lt;/fail&amp;gt;

      &lt;/pre&gt;
&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Command Dispatcher Ant Conditions]]</text>
    </revision>
  </page>
  <page>
    <title>ModuleFindClosestAncestorType Task Reference</title>
    <id>1698</id>
    <revision>
      <id>11466</id>
      <timestamp>2009-12-15T00:37:10Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Created page with '{{stub}}  &lt;pre&gt;        &lt;module-find-closest-ancestortype                 property=&quot;myzip.ancestor&quot;                 type=&quot;myzip&quot;                 modulesdir=&quot;${framework.modules.di…'</comment>
      <text xml:space="preserve">{{stub}}

&lt;pre&gt;
       &lt;module-find-closest-ancestortype
                property=&quot;myzip.ancestor&quot;
                type=&quot;myzip&quot;
                modulesdir=&quot;${framework.modules.dir}&quot;
                list=&quot;Package,zip&quot;
                /&gt;
     &lt;fail message=&quot;Incorrect result: ${ancestor}&quot;&gt;
            &lt;condition&gt;
                &lt;not&gt;
                    &lt;equals arg1=&quot;zip&quot; arg2=&quot;${myzip.ancestor}&quot;/&gt;
                &lt;/not&gt;
            &lt;/condition&gt;
        &lt;/fail&gt;
&lt;/pre&gt;

[[Category:Command Dispatcher Ant Tasks]]</text>
    </revision>
  </page>
  <page>
    <title>ModuleSubtypeof Type Reference</title>
    <id>1033</id>
    <revision>
      <id>13783</id>
      <timestamp>2010-11-10T15:10:54Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;project depot&quot; to &quot;project name&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Types&lt;/categorytree&gt;

==Description==
      &lt;p&gt;
	The module-subtypeof type is a [http://ant.apache.org/manual/CoreTypes/custom-programming.html#customconditions custom condition] that can be used
	in the [http://ant.apache.org/manual/CoreTasks/conditions.html condition] core Ant task or any task that accepts a condition.
      &lt;/p&gt;

{{Version Required 3.4.3}}

==Attributes==
      &lt;p&gt;The module-subtypeof condition takes these attributes&lt;/p&gt;
    
{| border=&quot;1&quot;
! attribute
! description
! required
|-
| depot
| project name
| true
|-
| type
| module type name
| true
|-
| super
| module supertype
| true
|}

==Examples==
Assume &quot;zip&quot; is a subtype of &quot;Package&quot; (and it actually is):

      &lt;pre&gt;
     &amp;lt;condition property=&quot;issubtype&quot;&amp;gt;
         &amp;lt;module-subtypeof depot=&quot;${context.depot}&quot; type=&quot;zip&quot; supertype=&quot;Package&quot;/&amp;gt;
      &amp;lt;/condition&amp;gt;
      &amp;lt;fail unless=&quot;issubtype&quot;&gt;zip not subtype of Package ?!?&amp;lt;/fail&amp;gt;
      &lt;/pre&gt;

&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Command Dispatcher Ant Conditions]]</text>
    </revision>
  </page>
  <page>
    <title>Module Development Guide</title>
    <id>1121</id>
    <redirect />
    <revision>
      <id>14418</id>
      <timestamp>2010-11-11T18:01:34Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[Category:Modules]]</comment>
      <text xml:space="preserve">#REDIRECT [[:Category:Modules]]</text>
    </revision>
  </page>
  <page>
    <title>Modules</title>
    <id>1637</id>
    <revision>
      <id>14476</id>
      <timestamp>2010-11-11T22:25:21Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;noinclude&gt;
&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Modules&lt;/categorytree&gt;
&lt;/noinclude&gt;
The definition of a [[Type]] exists in the ControlTier server's data model, yet in order to make the Commands and Resources of the Type usable, they must all be stored into an archive file and distributed to the various ControlTier Clients that need to use it.

A ''Module'' is a Java Jar Archive that is created to contain the Type definition and its related file resources, including the Command handler files, any included scripts or templates, and various metadata files which describe the Type itself.

You can create a Module for a Type, either by using the [[Graphical type editor]], or the [[ProjectBuilder]] utility.  

To create the Type Module using Workbench, navigate to the Type, and click the &quot;Package Commands&quot; button on the right side of the page:

[[Image:Typemodel-package-commands-1.png|Package Commands Button]]

The icon used on this button differs depending on whether the Type has been recently modified or not.  When there are changes that have been made to the Type that have not yet been stored in a Module, then the button has an exclamation mark to indicate that the Module is out of date:

[[Image:Typemodel-package-commands-2.png|Package Commands Button]]

When you click this button, the ControlTier server creates the Module file and names it ''Type''-head.jar.  This file is then stored in the WebDAV Repository under the path &lt;code&gt;/''PROJECT''/publish/modules&lt;/code&gt;, where &quot;PROJECT&quot; is the name of your Project.  This is the location that ControlTier Clients will use to find the latest version of the Module when they need to download it.

To create a Module using the ControlTier Client, CTL, you can use the [[ProjectBuilder]] Type's &lt;code&gt;build-type&lt;/code&gt; command.  This Command requires that you have a [[type.xml]] file defining the Type, and it will prompt you to locate the file and to input a location to store the Module .jar file.  If you include the &lt;code&gt;-upload&lt;/code&gt; option, the command will additionally upload the Module .jar file to the ControlTier Server and install it there.  Adding the &lt;code&gt;-deploy&lt;/code&gt; option will also deploy the Module in your local CTL installation, after which you can execute its commands.

&lt;noinclude&gt;
{{Manual/navbox}}
[[Category:Modules]]
&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Modules.properties</title>
    <id>132</id>
    <revision>
      <id>9726</id>
      <timestamp>2009-12-10T21:16:15Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">=Overview=
      &lt;p&gt;
	Settings managing modules library configuration.
      &lt;/p&gt;
      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	  &lt;th&gt;Property&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;modules.dir&lt;/td&gt;&lt;td&gt;Directory base where module library
	    resides&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;modules.repo.dir&lt;/td&gt;&lt;td&gt;URL to module jar repository
	  &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;modules.template.dir&lt;/td&gt;&lt;td&gt;Directory base where the module
	    command handler templates reside&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;
[[Category:CTL properties]]</text>
    </revision>
  </page>
  <page>
    <title>Multi-node tail -f</title>
    <id>283</id>
    <revision>
      <id>14233</id>
      <timestamp>2010-11-10T19:56:25Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;noinclude&gt;&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Examples&lt;/categorytree&gt;&lt;/noinclude&gt;
=Scenario=
You want to follow file output across a set of nodes. This might be accomplished using the Unix &lt;code&gt;tail&lt;/code&gt; command in a few ways:
* Open a window for each host and use SSH to run &quot;tail -f /path&quot;
* Use a unix shell with job control and launch a series of tail -f commands into the background (eg, tail -f /path &amp;)
* Write a throw away script that loops over a set of nodes and does the above

Note:
* This scenario is a specific case of [[Replace your SSH loop script]]

==Issues==

* You must run separate SSH commands to each of the nodes, specifying each host by name
* You write a throw away script


==ctl-exec with threadcount==
Here is an alternative that uses [[CTL-EXEC_Command_Reference|ctl-exec]]

Imagine the file being monitored is &quot;/var/log/messages&quot; on Linux hosts. 
Also imagine:
* the file might not be readable as a non root user, so we also use &quot;sudo&quot;
* we want to run each tail invocation in its own thread
* we already have registered nodes

To accomplish this we use the &quot;&lt;code&gt;-I os-name=Linux&lt;/code&gt;&quot; option to include just the hosts with os-name=Linux.
For this example, assume there are two nodes that match that criteria:
&lt;pre&gt;
$ ctl-exec -I os-name=Linux -v
centos:
   hostname: centos
   os-arch: i386
   os-family: unix
   os-name: Linux
   os-version: 2.6.9-34.EL
   tags: []
development:
   hostname: demo@development
   os-arch: i386
   os-family: unix
   os-name: Linux
   os-version: 2.6.9-11.EL
   tags: []
&lt;/pre&gt;

Also used, is the &quot;&lt;code&gt;-C 2&lt;/code&gt;&quot; option specifying two threads since 2 hosts match.

Here's the full command and output:

&lt;pre&gt;
$ ctl-exec  -I os-name=Linux -C 2 -- sudo tail -f /var/log/messages 
number of nodes to dispatch to: 2, (threadcount=2)
Connecting to development:22
Connecting to centos:22
cmd : sudo tail -f /var/log/messages
cmd : sudo tail -f /var/log/messages
Dec 31 08:54:16 centos pam_timestamp_check: pam_timestamp: `/var/run/' owner GID != 0
Dec 31 08:54:16 centos sshd(pam_unix)[3378]: session closed for user alexh
Dec 31 08:54:21 centos pam_timestamp_check: pam_timestamp: `/var/run/' owner GID != 0
Dec 31 08:54:46 centos last message repeated 5 times
Dec 31 08:54:49 centos sshd(pam_unix)[3402]: session opened for user alexh by (uid=0)
Dec 31 08:54:51 centos pam_timestamp_check: pam_timestamp: `/var/run/' owner GID != 0
Dec 31 08:55:01 centos last message repeated 2 times
Dec 31 08:55:02 centos sshd(pam_unix)[3402]: session closed for user alexh
Dec 31 08:55:06 centos pam_timestamp_check: pam_timestamp: `/var/run/' owner GID != 0
Dec 31 08:55:08 centos sshd(pam_unix)[3425]: session opened for user alexh by (uid=0)
Dec 31 08:54:16 development crond(pam_unix)[22318]: session closed for user root
Dec 31 08:54:21 development crond(pam_unix)[22322]: session opened for user root by (uid=0)
Dec 31 08:54:21 development crond(pam_unix)[22322]: session closed for user root
Dec 31 08:54:33 development sshd(pam_unix)[22337]: session opened for user demo by (uid=0)
Dec 31 08:54:33 development sshd(pam_unix)[22337]: session closed for user demo
Dec 31 08:55:06 development sshd(pam_unix)[22345]: session opened for user demo by (uid=0)
Dec 31 08:55:11 development sshd(pam_unix)[22345]: session closed for user demo
Dec 31 08:55:12 development sshd(pam_unix)[22498]: session opened for user demo by (uid=0)
Dec 31 08:55:14 development sshd(pam_unix)[22498]: session closed for user demo
Dec 31 08:55:16 development sshd(pam_unix)[22504]: session opened for user demo by (uid=0)
Dec 31 08:55:11 centos pam_timestamp_check: pam_timestamp: `/var/run/' owner GID != 0
&lt;/pre&gt;

{{Guide/navbox}}
[[Category:Scripting_Examples]]</text>
    </revision>
  </page>
  <page>
    <title>Multiple packages to Nodes</title>
    <id>933</id>
    <redirect />
    <revision>
      <id>5097</id>
      <timestamp>2009-05-03T21:56:08Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>[[Multiple packages to Nodes]] moved to [[Deploying Packages to Nodes]]</comment>
      <text xml:space="preserve">#REDIRECT [[Deploying Packages to Nodes]]</text>
    </revision>
  </page>
  <page>
    <title>Multiple packages to one Deployment</title>
    <id>449</id>
    <redirect />
    <revision>
      <id>2706</id>
      <timestamp>2009-02-09T23:15:16Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>[[Multiple packages to one Deployment]] moved to [[Deploying Packages to a Service]]</comment>
      <text xml:space="preserve">#REDIRECT [[Deploying Packages to a Service]]</text>
    </revision>
  </page>
  <page>
    <title>NetBoot Kickstart examples</title>
    <id>1885</id>
    <revision>
      <id>12595</id>
      <timestamp>2010-05-09T20:57:19Z</timestamp>
      <contributor>
        <username>Chuck</username>
        <id>13</id>
      </contributor>
      <comment>Created page with 'test'</comment>
      <text xml:space="preserve">test</text>
    </revision>
  </page>
  <page>
    <title>NetServer Kickstart examples</title>
    <id>1886</id>
    <revision>
      <id>14153</id>
      <timestamp>2010-11-10T16:00:11Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;ctl-depot&quot; to &quot;ctl-project&quot;</comment>
      <text xml:space="preserve">{{Version|3.4.12}}

In this [[Examples|example]], we will demonstrate how to implement an automated NetServer system using PXE based Kickstart.

== Description ==

Automating [http://en.wikipedia.org/wiki/Kickstart_(Linux) Kickstart]  requires managing various configurations, o/s distributions, and other artifacts.  The virtual machine environment is an excellent platform for rapid O/S provisioning development.  This guide describes automating system provisioning using the following protocols and technologies:

* [http://en.wikipedia.org/wiki/Trivial_File_Transfer_Protocol TFTP] for [http://en.wikipedia.org/wiki/Preboot_Execution_Environment PXE] booting
* [http://en.wikipedia.org/wiki/Kickstart_(Linux) Kickstart] configuration (ks.cfg)
* Managing the O/S distribution ISO
* FTP for serving O/S distribution
* [http://en.wikipedia.org/wiki/Dynamic_Host_Configuration_Protocol DHCP] for dynamic addressing

NetServer solution provides a package centric build and release strategy that consolidates the above integration points  with ControlTier.

== Dependencies ==

At least two &quot;Linux&quot; machines native and/or virtual (vm), one will be the NetServer and at least one designated as the install client
* NetServer:
** the server should have sufficient disk space to serve at least one linux distro in DVD/ISO format, preferably many numerous of these distros once in operation
*** RHEL and CentOS isos have been tested
**** Obtain RHEL ISOs from https://content-web.rhn.redhat.com/rhn/isos/
**** Obtain CentOS ISOs from http://mirror.centos.org/centos/
** only DVD/ISOs are supported since multi cd ISOs cannot be represented as a single distribution
** Server will have the following packages installed:
*** dhcp
*** tftp-server
*** syslinux
*** vsftpd
*** createrepo
*** rpm-build
*** subversion
** Server will NOT have the following packages installed as they will conflict with the NetServer rpm:
*** system-config-netboot
 sudo rpm -e system-config-netboot
***system-config-netboot-cmd
 sudo rpm -e system-config-netboot-cmd
** Server syslog is configured for network logging (desirable), ensure the -r option is set as follows
 [ctier@rhel-54-64-vm1]$ cd /etc/sysconfig
 [ctier@rhel-54-64-vm1 sysconfig]$ sudo vi syslog
 [ctier@rhel-54-64-vm1 sysconfig]$ grep SYSLOGD_OPTIONS syslog 
 SYSLOGD_OPTIONS=&quot;-m 0 -r&quot;
*** and if necessary, restart syslog
 ctier@rhel-54-64-vm1 sysconfig]$ sudo /etc/rc.d/init.d/syslog restart

Server and Client will reside on the same subnet

The NetServer is a configured Node in a ControlTier project

The ControlTier user (ctier in example shown) will be configured to execute various commands as root via sudoers and no password interaction set
&lt;pre&gt;
[rhel-54-64-vm1@netserver objects]$ sudo grep ^%wheel /etc/sudoers 
%wheel  ALL=(ALL)       NOPASSWD: ALL
[ctier@netserver objects]$ echo $USER
ctier
[ctier@ netserver objects]$ grep &quot;wheel:.*${USER}&quot; /etc/group
wheel:x:10:root,ctier
&lt;/pre&gt;

== Assumptions ==

for this demo, the following is assumed:

* ControlTier Project Name:  NetServer
* The NetServer running RHEL 5.4 64-bit   
* One client machine will be installed with the same version as the server
* NetServer hostname:
** Hostname: rhel-54-64-vm1.local (also registered as controltier node object:  rhel-54-64-vm1.local)
** IP Address: 172.16.98.131
* NetServer Client (when kickstarted)
** hostname: rhel-54-64-vm2.local
** IP Address: 172.16.98.112
** MAC Address:  00:50:56:37:d4:53, which is needed for dhcp address assignment.
*** This  address was pre-configured in VMware for the to-be-installed kickstart client.  Navigate to VMware configuration and note the following diagram for how address is obtained: 
&lt;pre&gt;
Settings -&gt; Network
&lt;/pre&gt;
[[File:VMwareMacAddr.jpg]]
* Both servers exist as VMs within VMware Fusion and on the same subnet
** NOTE:  In order to run DHCP on the NetServer without conflicting with VMware's dhcp service, please refer to [[NetServer VMware Preparation]] 
* Subnet Info
** Network:  172.16.98.0/24 (NOTE:  This is the Host Networking Subnet within VMware fusion also known as VMnet #1)
** DHCP server will run on the NetServer
*** NOTE:  no other dhcp server will be running on this subnet (NOTE:  for VMware this requires dhcp to be stopped for this subnet!)
** DHCP Address Range:  172.16.98.100-172.16.98.127
* ISO Distribution
** source URL: https://content-web.rhn.redhat.com/rhn/isos/RHEL-5.4/rhel-x86_64-server-5/rhel-server-5.4-x86_64-dvd.iso
** iso will be downloaded into the following installation root:  /var/ftp/RedHat/5.4-x86_64/
** NOTE: consider CentOS alternative if RHEL downloads are problematic
* Host machine (since we are running VMware Fusion) is a Mac
** The IP Address for the host machine on VMnet #1 is 172.16.98.1:
&lt;pre&gt;
charles-scotts-macbook-pro-30: chuck$ /sbin/ifconfig vmnet1
vmnet1: flags=8863&lt;UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST&gt; mtu 1500
	inet 172.16.98.1 netmask 0xffffff00 broadcast 172.16.98.255
	ether 00:50:56:c0:00:01 
&lt;/pre&gt;
** IP Forwarding is enabled in order to allow the NetServer (vm1) machine to access the internet for the following reasons:
*** checking out the NetServer library from sourceForge
*** executing scmCheckout of the RPM source build
&lt;pre&gt;
charles-scotts-macbook-pro-30: chuck$ sysctl net.inet.ip.forwarding
net.inet.ip.forwarding: 0
charles-scotts-macbook-pro-30: chuck$ sudo sysctl -w net.inet.ip.forwarding=1
net.inet.ip.forwarding: 0 -&gt; 1
&lt;/pre&gt;
** Mac Internet Sharing is enabled via
&lt;pre&gt;
System Preferences -&gt; Sharing -&gt; Internet Sharing (Checked)
&lt;/pre&gt; and enabled for Ethernet Sharing:
[[File:MacInternetSharing.jpg]]
** The default route for the NetServer (vm1) is the IP Address of the host machine (172.16.98.1) within the VMnet #1 subnet in order to allow routing to the internet:
&lt;pre&gt;
[ctier@rhel-54-64-vm1 netServer]$ sudo route add default gw 172.16.98.1 eth0
[ctier@rhel-54-64-vm1 netServer]$ netstat -rn
Kernel IP routing table
Destination     Gateway         Genmask         Flags   MSS Window  irtt Iface
172.16.98.0     0.0.0.0         255.255.255.0   U         0 0          0 eth0
169.254.0.0     0.0.0.0         255.255.0.0     U         0 0          0 eth0
0.0.0.0         172.16.98.1     0.0.0.0         UG        0 0          0 eth0
[ctier@rhel-54-64-vm1 netServer]$ sudo vi /etc/sysconfig/network
[ctier@rhel-54-64-vm1 netServer]$ grep GATEWAY /etc/sysconfig/network
GATEWAY=172.16.98.1
&lt;/pre&gt;

== Building the Example ==

* Checkout the netServer library from moduleforge
 cd $CTIER_ROOT/src/
 svn checkout  https://moduleforge.svn.sourceforge.net/svnroot/moduleforge/netServer/trunk netServer
* Configure ProjectBuilder netServer instance
 ctl -p NetServer -t ProjectBuilder -r netServer -c Register -- -basedir '${env.CTIER_ROOT}/src/netServer' -installroot '${env.CTIER_ROOT}/target/netServer' -install
* build and import the library
 ctl -p NetServer -t ProjectBuilder -r netServer -c build-library -- -upload 
* create and load the NetServerBuilder (netServer.xml already provided in $CTIER_ROOT/src/netServer/objects/builders)
** NOTE:  also see [https://moduleforge.svn.sourceforge.net/svnroot/moduleforge/netServer/trunk/modules/NetServer/objects/builders/sample.xml sample.xml]
&lt;pre style=&quot;CSS text&quot;&gt;
cd $CTIER_ROOT/src/netServer/objects/builders
vi netServer.xml
cat sample.xml 
&lt;?xml version=&quot;1.0&quot;?&gt;

&lt;!DOCTYPE project PUBLIC &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; &quot;project.dtd&quot;&gt;

&lt;!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --&gt;
&lt;!-- RpmBuilder example object XML definition file                                       --&gt;
&lt;!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --&gt;

&lt;project&gt;

        &lt;!-- Builder settings: --&gt;

        &lt;!-- Build environment updaters, sites and services: --&gt;

        &lt;deployment type=&quot;NetServerBuilder&quot; name=&quot;netServer&quot; basedir=&quot;${env.CTIER_ROOT}/src/netServer/RPMS&quot; description=&quot;netServer builder&quot; startuprank=&quot;1&quot;&gt;
                &lt;resources replace=&quot;true&quot;&gt;
                &lt;/resources&gt;
                &lt;referrers replace=&quot;false&quot;&gt;
                   &lt;resource type=&quot;Node&quot; name=&quot;rhel-54-64-vm1.local&quot;/&gt;
                &lt;/referrers&gt; 
        &lt;/deployment&gt;
&lt;/project&gt;
ctl -p NetServer -t ProjectBuilder -r netServer -c load-resources -- -filename netServer.xml
ctl-project -p NetServer -a install
&lt;/pre&gt;
* build and import the NetServer package
 ctl -p NetServer -t NetServerBuilder -r netServer -c Build
* download a linux o/s distribution in dvd iso format into its designated installation root
** NOTE: the rhel url shown here may only work within a redhat network, consider downloading CentOS or other freely available distribution if rhel is problematic
 sudo mkdir -p /var/ftp/RedHat/5.4-x86_64
 cd /var/ftp/RedHat/5.4-x86_64
 sudo wget https://content-web.rhn.redhat.com/rhn/isos/RHEL-5.4/rhel-x86_64-server-5/rhel-server-5.4-x86_64-dvd.iso
* configure a LinuxIso package object ( rhel-server-5.4-x86_64-dvd.iso.xml already provided in $CTIER_ROOT/src/netServer/objects)
** NOTE:  also see [https://moduleforge.svn.sourceforge.net/svnroot/moduleforge/netServer/trunk/modules/LinuxIso/objects/rhel-server-5.4-x86_64-dvd.iso.xml rhel-server-5.4-x86_64-dvd.iso.xml]
 [ctier@rhel-54-64-vm1 objects]$ cd $CTIER_ROOT/src/netServer/objects/ 
 [ctier@rhel-54-64-vm1 objects]$ cat rhel-server-5.4-x86_64-dvd.iso.xml 
&lt;pre style=&quot;CSS text&quot;&gt;
 &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
 &lt;!DOCTYPE project PUBLIC &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot;
        &quot;project.dtd&quot;&gt;
 &lt;project&gt;
  &lt;package
         type=&quot;LinuxIso&quot;
         name=&quot;rhel-server-5.4-x86_64-dvd.iso&quot;
         description=&quot;RedHat Enterprise Linux 5.4 64 bit iso distribution&quot;
         filename=&quot;rhel-server-5.4-x86_64-dvd.iso&quot;
         arch=&quot;x86_64&quot;
         base=&quot;rhel-server-5.4-x86_64-dvd&quot;
         buildtime=&quot;&quot;
         filetype=&quot;iso&quot;
         installroot=&quot;${resource.attribute.netServerRoot}/RedHat/${resource.package-version}&quot;
         installrank=&quot;40&quot;
         release=&quot;4&quot;
         releasetag=&quot;&quot;
         repoUrl=&quot;https://content-web.rhn.redhat.com/rhn/isos/RHEL-5.4/rhel-x86_64-server-5/rhel-server-5.4-x86_64-dvd.iso&quot;
         restart=&quot;false&quot;
         vendor=&quot;Red Hat, Inc.&quot;
         version=&quot;5.4-x86_64&quot;
         /&gt;
 &lt;/project&gt;
 [ctier@rhel-54-64-vm1 objects]$ ctl -p NetServer -t ProjectBuilder -r netServer -c load-resources -- -filename rhel-server-5.4-x86_64-dvd.iso.xml 
&lt;/pre&gt;

* Configure, load, and install the resources from the netServer project xml (netServer.xml already provided in $CTIER_ROOT/src/netServer/objects):
** NOTE:  also see [https://moduleforge.svn.sourceforge.net/svnroot/moduleforge/netServer/trunk/modules/NetServer/objects/sample.xml sample.xml]
&lt;pre style=&quot;CSS text&quot;&gt;
[ctier@rhel-54-64-vm1 objects]$ vi netServer.xml
[ctier@rhel-54-64-vm1 objects]$ cat netServer.xml
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE project PUBLIC &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot;
        &quot;project.dtd&quot;&gt;
&lt;project&gt;

  
  &lt;node type=&quot;NetServerLinuxNode&quot; name=&quot;rhel-54-64-vm2.local&quot; hostname=&quot;rhel-54-64-vm2.local&quot; ctlUsername=&quot;ctier&quot; ctlPassword=&quot;&quot; description=&quot;Kickstart Node&quot; tags=&quot;linux&quot;&gt;
    &lt;resources replace=&quot;true&quot;&gt;
      &lt;resource type=&quot;LinuxIso&quot; name=&quot;rhel-server-5.4-x86_64-dvd.iso&quot;/&gt;
      &lt;resource type=&quot;LinuxNodeIPAddress&quot; name=&quot;rhel-54-64-vm2.local&quot;/&gt;
      &lt;resource type=&quot;LinuxNodeMacAddress&quot; name=&quot;rhel-54-64-vm2.local&quot;/&gt;
      &lt;resource type=&quot;LinuxNodeRole&quot; name=&quot;rhel-54-64-vm2.local&quot;/&gt;
    &lt;/resources&gt;
  &lt;/node&gt;


  &lt;setting type=&quot;NetServerGenerateDhcpConfig&quot;  name=&quot;netServer&quot; settingValue=&quot;true&quot; description=&quot;ensure dhcpd.conf is regenerated automatically on rhel-54-64-vm1.local&quot;/&gt;

  &lt;setting type=&quot;NetServerSubnet&quot; name=&quot;vmnet1&quot; settingValue=&quot;172.16.98.0/24&quot; description=&quot;vmnet #1 subnet&quot;/&gt;
  &lt;setting type=&quot;NetServerSubnetMask&quot; name=&quot;vmnet1&quot; settingValue=&quot;255.255.255.0&quot; description=&quot;vmnet #1 subnet mask&quot;/&gt;
  &lt;setting type=&quot;NetServerSubnetGateway&quot; name=&quot;vmnet1&quot; settingValue=&quot;172.16.98.131&quot; description=&quot;vmnet #1 subnet gateway&quot;/&gt;
  &lt;setting type=&quot;NetServerNameServers&quot; name=&quot;vmnet1&quot; settingValue=&quot;172.16.98.131&quot; description=&quot;vmnet #1 name server&quot;/&gt;
  &lt;setting type=&quot;NetServerDhcpStart&quot; name=&quot;vmnet1&quot; settingValue=&quot;172.16.98.100&quot; description=&quot;vmnet #1 dhcp start address&quot;/&gt;
  &lt;setting type=&quot;NetServerDhcpEnd&quot; name=&quot;vmnet1&quot; settingValue=&quot;172.16.98.127&quot; description=&quot;vmnet #1 dhcp end address&quot;/&gt;
  &lt;setting type=&quot;NetServerLocation&quot; name=&quot;vmnet1&quot; settingValue=&quot;VMware&quot; description=&quot;my VMware Fusion laptop&quot;/&gt;

  &lt;!-- vm#2 Kickstart Linux Node  --&gt;
  &lt;setting type=&quot;LinuxNodeIPAddress&quot; name=&quot;rhel-54-64-vm2.local&quot; settingValue=&quot;172.16.98.112&quot; description=&quot;&quot;/&gt;
  &lt;setting type=&quot;LinuxNodeMacAddress&quot; name=&quot;rhel-54-64-vm2.local&quot; settingValue=&quot;00:50:56:2D:C0:C9&quot; description=&quot;&quot;/&gt;
  &lt;setting type=&quot;LinuxNodeRole&quot; name=&quot;rhel-54-64-vm2.local&quot; settingValue=&quot;server&quot; description=&quot;rhel 5.4 64bit linux node&quot;/&gt;

   &lt;!-- virtual machine #1 network, this is a host only net in vmware --&gt;
   &lt;deployment type=&quot;NetServerNetwork&quot; name=&quot;vmnet1&quot; description=&quot;vmnet #1 netServer network&quot;&gt; 
      &lt;resources replace=&quot;true&quot;&gt;
         &lt;resource type=&quot;NetServerSubnet&quot; name=&quot;vmnet1&quot;/&gt;
         &lt;resource type=&quot;NetServerSubnetMask&quot; name=&quot;vmnet1&quot;/&gt;
         &lt;resource type=&quot;NetServerSubnetGateway&quot; name=&quot;vmnet1&quot;/&gt;
         &lt;resource type=&quot;NetServerNameServers&quot; name=&quot;vmnet1&quot;/&gt;
         &lt;resource type=&quot;NetServerDhcpStart&quot; name=&quot;vmnet1&quot;/&gt;
         &lt;resource type=&quot;NetServerDhcpEnd&quot; name=&quot;vmnet1&quot;/&gt;
         &lt;resource type=&quot;NetServerLocation&quot; name=&quot;vmnet1&quot;/&gt;
      &lt;/resources&gt; 
   &lt;/deployment&gt; 

   &lt;deployment type=&quot;NetServer&quot; name=&quot;netServer&quot; description=&quot;netServer linux install server&quot; startuprank=&quot;10&quot;
               installRoot=&quot;/data/ftp&quot;&gt;
      &lt;resources replace=&quot;true&quot;&gt;

         &lt;resource type=&quot;NetServerGenerateDhcpConfig&quot;  name=&quot;netServer&quot;/&gt;

         &lt;!-- single NetServer rpm product package --&gt;
         &lt;resource type=&quot;NetServerRpm&quot; name=&quot;NetServer-1.0-78.x86_64.rpm&quot;/&gt;

         &lt;!-- node(s) to kickstart, these Nodes are defined in the model but are not (asy of yet) configured ctl clients --&gt;
         &lt;resource type=&quot;NetServerLinuxNode&quot; name=&quot;rhel-54-64-vm2.local&quot;/&gt;

         &lt;!-- network(s) supporting kickstart nodes --&gt;
         &lt;resource type=&quot;NetServerNetwork&quot; name=&quot;vmnet1&quot;/&gt;
      &lt;/resources&gt;
      &lt;referrers replace=&quot;false&quot;&gt;
         &lt;resource type=&quot;Node&quot; name=&quot;rhel-54-64-vm1.local&quot;/&gt;
      &lt;/referrers&gt;
   &lt;/deployment&gt;

&lt;/project&gt;

[ctier@rhel-54-64-vm1 objects]$ ctl -p NetServer -t ProjectBuilder -r netServer -c load-resources -- -filename netServer.xml
Loading &quot;/home/ctier/ctier/src/netServer/objects/netServer.xml&quot; ...
1 file(s) have been successfully validated.
Processing /home/ctier/ctier/src/netServer/objects/netServer.xml to /home/ctier/ctier/ctl/var/tmp/projectxml-82676434.xml
Loading stylesheet /home/ctier/ctier/ctl/projects/NetServer/modules/ProjectBuilder/lib/load-resources/projectxml/project.xsl
Mapping XML to properties ...
[timer: 0.406 sec]
Batching new object creation requests ...
[timer: 0.894 sec]
Executing batched new object creation for 13 objects ...
[timer: 6.191 sec]
Batching object attribute update requests ...
[timer: 7.743 sec]
Batching resource and referrer updates ...
[timer: 7.864 sec]
Executing 28 batched object updates ...
[timer: 13.615 sec]
Adding document transforms to deployments ...
[timer: 13.679 sec]

 [ctier@rhel-54-64-vm1 objects]$ ctl-project -p NetServer -a install
&lt;/pre&gt;
* Prior to executing the Deploy workflow, it is currently required to remove (or move) the dhcpd.conf file if it exists since the underlying utility that configures and (re)starts the dhcpd server is careful about overwriting it:
&lt;pre&gt;
[ctier@rhel-54-64-vm1 netServer]$ ls -l /etc/dhcpd.conf
-rw-r--r-- 1 root root 894 May  9 21:59 /etc/dhcpd.conf
[ctier@rhel-54-64-vm1 netServer]$ sudo mv /etc/dhcpd.conf /etc/dhcpd.conf.orig
&lt;/pre&gt;
* Deploy NetServer
&lt;pre style=&quot;CSS text&quot;&gt;
[ctier@rhel-54-64-vm1 objects]$  ctl -p NetServer -t  NetServer -r netServer -c Deploy 
&lt;/pre&gt;

== After Building the Example ==
After executing the Deploy workflow, the following events and configurations occur:
* Templatized pxelinux.cfg
** a role specific pxe configuration file will be generated from template within the /tftpboot/linux-install/pxelinux.cfg directory.   This file will match the kickstart client's IP address in hexadecimal.  Since hex is not intuitive, a convenient symbolic link is also created matching the ip address in conventional form:
&lt;pre&gt;
[ctier@rhel-54-64-vm1 NetServer]$ ls -l /tftpboot/linux-install/pxelinux.cfg/172.16.98.112
lrwxrwxrwx 1 root root 8 May 22 21:40 /tftpboot/linux-install/pxelinux.cfg/172.16.98.112 -&gt; AC106270
[ctier@rhel-54-64-vm1 NetServer]$ cat  /tftpboot/linux-install/pxelinux.cfg/AC106270
default RedHat5.4-64

timeout 100
prompt 0
#display msgs/boot.msg
serial 0 9600

label RedHat5.4-64
  kernel RedHat5.4-64/vmlinuz
  append initrd=RedHat5.4-64/initrd.img ks=ftp://172.16.98.131/kickstart/redhat5.4-64-vmware.cfg ksdevice=eth0 console=tty0 console=ttyS0,9600n8 ramdisk_size=7000 noipv6 dns=172.16.98.131 text
&lt;/pre&gt;
** the template used for expansion is based on the role configuration within the netServer object model:
&lt;pre&gt;
...
...
 &lt;setting type=&quot;LinuxNodeRole&quot; name=&quot;rhel-54-64-vm2.local&quot; settingValue=&quot;vmware&quot; description=&quot;rhel 5.4 64bit linux node&quot;/&gt;
...
...
[ctier@rhel-54-64-vm1 objects]$ ls /tftpboot/linux-install/pxelinux.cfg/vmware.TPL 
/tftpboot/linux-install/pxelinux.cfg/vmware.TPL
&lt;/pre&gt;
** Additionally, this file is configured for unattended installation where prompting is disabled and refers to a vmware specific kickstart configuration file (redhat5.4-64-vmware.cfg)
* Templatized ks.cfg (kickstart configuration)
** The redhat5.4-64-vmware.cfg is also generated from a corresponding template within the /var/ftp/kickstart directory aptly named:  redhat5.4-64-vmware.cfg.TPL
** This kickstart template has &quot;%pre&quot; install configuration.  In general the pre install phase is used for dynamically generating kickstart configurations used during the main installation phase (network, partitioning, packaging, etc).   This example will generate dynamic network configuration.  An installscript archive, generated during the ctier Configure command, is obtained via ftp (use of wget) and extracted.  Subsequently, a generateNetworkKs.sh script is called to generate network configuration and determine whether to produce dhcp or static addressing configuration.   Additionally, a convenient log utility for syslog purposes is also available.   This may be useful for debugging pre and post installations during kickstart development:
&lt;pre&gt;
[ctier@rhel-54-64-vm1 objects]$ cat /var/ftp/kickstart/redhat5.4-64-vmware.cfg
..
..

%pre
sleep 5
cd /tmp
wget ftp://172.16.98.131/configs/installscript.tar
tar xf installscript.tar
python log.py 172.16.98.131 &quot;KICKSTART, BEGIN PRE INSTALL PHASE&quot;
./generateNetworkKs.sh eth0 &gt;/tmp/netinfo.ks 2&gt;/tmp/netinfo.err
python log.py 172.16.98.131 &quot;KICKSTART, END PRE INSTALL PHASE&quot;

%post --nochroot
cp /tmp/log.py /mnt/sysimage/tmp
cp /tmp/netinfo.err /mnt/sysimage/tmp

%post
cd /tmp
python log.py 172.16.98.131 &quot;KICKSTART, BEGIN POST INSTALL PHASE&quot;
python log.py 172.16.98.131 &quot;KICKSTART, END POST INSTALL PHASE&quot;
&lt;/pre&gt;
** The generated /tmp/netinfo.ks file is then referenced via an %include statement during the main kickstart phase shown here:
&lt;pre&gt;
.
.
.
# Read network configuration from dynamically generated file
# this simple dhcp network configuratoin overrides potential pre install generated netinfo.ks file 
# which needs debugging
#network --bootproto=dhcp
%include /tmp/netinfo.ks
.
.
.
&lt;/pre&gt;
* Loop mounted ISO's are created for each LinuxISO package defined in the model.  The ISO itself is overlaid by a mounted filesystem and accessible via FTP:
&lt;pre&gt;
[ctier@rhel-54-64-vm1 objects]$ df
Filesystem           1K-blocks      Used Available Use% Mounted on
/dev/sda1             15235040   8419608   6029052  59% /
tmpfs                   513464         0    513464   0% /dev/shm
/data/ftp/RedHat/5.4-x86_64/rhel-server-5.4-x86_64-dvd.iso
                       3490018   3490018         0 100% /data/ftp/RedHat/5.4-x86_64
&lt;/pre&gt;
* dhcp service
** /etc/dhcpd.conf, the dhcp configuration file, will be generated from the corresponding /etc/dhcpd.conf.TPL:
&lt;pre&gt;
[ctier@rhel-54-64-vm1 objects]$ ls /etc/dhcpd.conf*
/etc/dhcpd.conf  /etc/dhcpd.conf.TPL
[ctier@rhel-54-64-vm1 objects]$ cat /etc/dhcpd.conf
#
# DHCP Server Configuration file.
#   see /usr/share/doc/dhcp*/dhcpd.conf.sample  
#

#########################################
# Static options that should never change
#########################################
not authoritative;
allow bootp;
allow booting;
ddns-update-style               none;

option domain-name &quot;local&quot;;
#########################################
# Dynamic Options
#########################################
subnet 172.16.98.0 netmask 255.255.255.0 {
        authoritative;
        range                           172.16.98.100 172.16.98.127;
        option routers                  172.16.98.131;
        next-server                     172.16.98.131;
        filename                        &quot;linux-install/pxelinux.0&quot;;
        option domain-name-servers      172.16.98.131;
        # Add hosts file for the subnet
        include &quot;/etc/dhcpd.d/net-172.16.98.0-hosts&quot;;
}
&lt;/pre&gt;
** some of the key dhcpd configuration to note:
*** domain-name
*** range (for dynamic ip assignments)
*** next-server (to determine where the tftp server will be, in this case it is the same but important when dhcp is not managed by cter
*** filename indicating the pxelinux image
*** and finally the separate inclusion of a subnet configuration file shown next
** subnet configuration:
&lt;pre&gt;
[ctier@rhel-54-64-vm1 objects]$ cat /etc/dhcpd.d/net-172.16.98.0-hosts 
        host rhel-54-64-vm2 { 
                hardware ethernet 00:50:56:37:d4:53;
                fixed-address 172.16.98.112;
        }
&lt;/pre&gt;
*** which shows that vm2 has been reserved based on its configured mac address
** NOTE:  even if dhcpd will not be run in the NetServer, the configuration needed to support this solution can be provided to expedite such requirement to the appropriate administrator.
** Ensure dhcp is running:
&lt;pre&gt;
[ctier@rhel-54-64-vm1 NetServer]$ sudo /etc/rc.d/init.d/dhcpd  status
dhcpd is stopped
[ctier@rhel-54-64-vm1 NetServer]$ sudo /etc/rc.d/init.d/dhcpd  start
Starting dhcpd:                                            [  OK  ]
&lt;/pre&gt;

== The Object Model ==

The following images describe the top level NetServer Mediator object and its dependent resources:
[[File:NetServerTop.jpg]]


Note the installation root, /data/ftp.  This is an equivalent path, which the RPM install configures /var/ftp as a symbolic link to:
&lt;pre&gt;
[ctier@rhel-54-64-vm1 netServer]$ ls -l /var/ftp
lrwxrwxrwx 1 root root 9 May 22 21:18 /var/ftp -&gt; /data/ftp
&lt;/pre&gt;


[[File:NetServerResources.jpg]]

Note the immediate dependencies of the NetServer object:  NetServerRpm,  NetServerGenerateDhcpConfig, and NetServerIPAddress as well as for the NetServerNetwork, NetServerLinuxNode, and NetServerRpm objects as described in the project xml files above.

== See it in action ==

Given that we are in an isolated VMware Host Networking subnet, we must ensure that the VMware kickstart client is configured to boot off of the network.
The following image via 

&lt;pre&gt;
Settings -&gt; Advanced -&gt; Startup Device
&lt;/pre&gt;
shows that the client will boot via the network:

[[File:VMwareStartupDevice.jpg]]

After the boot sequence has begun, reconfigure the Startup Device back to Hard Disk to prevent a kickstart infinite loop since the reboot configuration in the kickstart config is enabled.   (TODO:  auto configure the boot loader to prevent booting off of the network after kickstarting!)

The following image shows both VMware instances in action.  The left is a tailing of the NetServer's syslog and the right is the kickstart client booting off of the network:

[[File:VMwareServerAndClientRunning.jpg]]

Eventually, the kickstart file (VM#2) will boot with the expected hostname configured:

[[File:VMwareClientKickstarted.jpg]]</text>
    </revision>
  </page>
  <page>
    <title>NetServer VMware Preparation</title>
    <id>1887</id>
    <revision>
      <id>12697</id>
      <timestamp>2010-05-14T00:15:47Z</timestamp>
      <contributor>
        <username>Chuck</username>
        <id>13</id>
      </contributor>
      <comment>/* Disable VMware DHCP Service */</comment>
      <text xml:space="preserve">This describes how to configure VMware Fusion's Host-Only Networking virtual subnet, also known as vmnet #1.   Since VMware provides DHCP service automatically for host-only nodes, we must disable this service so that the automatically configured DHCP server on the NetServer node can operate exclusively.  This is mandatory due to DHCP's behavior as a broadcast based protocol where running more than one instance of this service will lead to unpredictable IP Address assignments.

== Assumptions ==

See [[NetServer_Kickstart_examples#Assumptions|NetServer Assumptions]] regarding the reference example for this subnet.  
This describes how to configure VMware Fusion on a Mac, however, other VMware implementations should be similar

== Disable VMware DHCP Service ==

Shutdown all VMware instances (including any suspended ones)

Quit the VMware Fusion Application

Configure VNET_1_DHCP:

&lt;pre style=&quot;CSS text&quot;&gt;
charles-scotts-macbook-pro-30:~ chuck$ sudo bash
bash-3.2# cd /Library/Application\ Support/VMware\ Fusion/
bash-3.2# cp locations locations.sav
bash-3.2# vi locations
&lt;/pre&gt;

And change:
 answer VNET_1_DHCP yes
to:
 answer VNET_1_DHCP no

Restart VMware Daemon(s)

&lt;pre style=&quot;CSS text&quot;&gt;
bash-3.2# /Library/Application\ Support/VMware\ Fusion/boot.sh --restart
VMware Fusion 232708: Shutting down VMware Fusion: 
Stopped DHCP service on vmnet1
Disabled hostonly virtual adapter on vmnet1
Stopped DHCP service on vmnet8
Stopped NAT service on vmnet8
Disabled hostonly virtual adapter on vmnet8
Stopped all configured services on all networks
No matching processes were found
...
...
...
/Library/Application Support/VMware Fusion /Library/Application Support/VMware Fusion
Stopped all configured services on all networks
Restored network settings
/Library/Application Support/VMware Fusion
Started network services
Verifying and re-installing files from /Library/Application Support/VMware Fusion/thnuclnt
bash-3.2# exit
charles-scotts-macbook-pro-30:~ chuck$
&lt;/pre&gt;


Verify that vmnet1 does not have dhcpd running (following process table shows only vmnet8)

&lt;pre style=&quot;CSS text&quot;&gt;
charles-scotts-macbook-pro-30:~ chuck$ ps auxww |grep dhcp
root     42739   1.0  0.0  2435032    528 s000  R+    8:41AM   0:00.00 grep dhcp
root     42362   0.0  1.0   129516  32492   ??  S     8:13AM   0:00.98 ./ViscosityHelper dhcplisten
root     42712   0.0  0.0  2441004    312   ??  Ss    8:40AM   0:00.00 /Library/Application Support/VMware Fusion/vmnet-dhcpd -s 6 -cf /Library/Application Support/VMware Fusion/vmnet8/dhcpd.conf -lf /var/db/vmware/vmnet-dhcpd-vmnet8.leases -pf /var/run/vmnet-dhcpd-vmnet8.pid vmnet8
&lt;/pre&gt;

Start VMware Fusion Application. 
* If the NetServer has already been installed, it will need to be reconfigured as a static address because DHCP will not be available.   If it has not been installed, ensure NetServer is installed with static addressing configured.</text>
    </revision>
  </page>
  <page>
    <title>Netutil</title>
    <id>1020</id>
    <revision>
      <id>10224</id>
      <timestamp>2009-12-11T18:25:43Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Types&lt;/categorytree&gt;
[[File:Icon-AssemblyObject.png]]
[[netutil]] is a utility containing several commands useful for network related checks. Commands include support for checking if a server is listening on a port, is reachable via IP and traceroute.

==Reference==
*   [http://controltier.sourceforge.net/docs/latest/core/reference/user/netutil/index.html netutil reference].
  
{{Manual/navbox}}
[[Category:Managed-Entity]]
[[Category:coreutils]]</text>
    </revision>
  </page>
  <page>
    <title>New to ControlTier? Start here.</title>
    <id>333</id>
    <redirect />
    <revision>
      <id>1596</id>
      <timestamp>2009-01-08T16:13:09Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <comment>[[New to ControlTier? Start here.]] moved to [[Getting Started]]: More concise title</comment>
      <text xml:space="preserve">#REDIRECT [[Getting Started]]</text>
    </revision>
  </page>
  <page>
    <title>Node</title>
    <id>1072</id>
    <redirect />
    <revision>
      <id>10087</id>
      <timestamp>2009-12-11T15:44:23Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[Category:Node]]</comment>
      <text xml:space="preserve">#REDIRECT: [[:Category:Node]]</text>
    </revision>
  </page>
  <page>
    <title>NodeSet Type Reference</title>
    <id>138</id>
    <revision>
      <id>11356</id>
      <timestamp>2009-12-14T22:59:28Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Types&lt;/categorytree&gt;
=Description=
      &lt;p&gt;
	The nodeset type specifies filtering options used by the &lt;code&gt;nodedispatch&lt;/code&gt;
	execution strategy of 
	[[ExecuteAction Type Reference|execute]] action for the
	[[Controller Task Reference|controller]] task.
      &lt;/p&gt;

=nodeset=
      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	  &lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;keepgoing&lt;/td&gt;&lt;td&gt;if an error continues continue other executions&lt;/td&gt;&lt;td&gt;No (default false)&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;threadcount&lt;/td&gt;&lt;td&gt;Number of threads to execute dispatch&lt;/td&gt;&lt;td&gt;No. (default &amp;quot;1&amp;quot;)&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;
    
=elements=
      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	  &lt;th&gt;Element&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;include&lt;/td&gt;&lt;td&gt;Include filter pattern&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;exclude&lt;/td&gt;&lt;td&gt;Exclude filter pattern&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;
  
=Include/Exclude filter attributes=

      &lt;p&gt;The values allowed for each of these attributes can be a literal
      value, a comma separated list or a Java style regular expression.
      &lt;/p&gt;
        &lt;p&gt;
            The attribute &lt;code&gt;tags&lt;/code&gt; can also use boolean operators to specify additional set logic.
        &lt;/p&gt;
        &lt;p&gt;
            The &lt;code&gt;dominant&lt;/code&gt; attribute declares whether the Include or Exclude element takes precendence in the
            case that a node matches both filters.  E.g. When Exclude is dominant (the default), and osfamily is set to &quot;unix&quot;, then
            all nodes that are Unix will be excluded, even if a specific filter in the Include element may match some Unix nodes.
        &lt;/p&gt;
      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	  &lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;hostname&lt;/td&gt;&lt;td&gt;Node hostname value, which may be formatted as &lt;code&gt;username@hostname&lt;/code&gt;. E.g. &quot;dev01&quot;, &quot;user1@host2.test.com&quot;  &lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;osarch&lt;/td&gt;&lt;td&gt;Node os-arch value. E.g. &quot;x86&quot;, &quot;x386&quot; &lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;osfamily&lt;/td&gt;&lt;td&gt;Node os-family value.  E.g. &quot;unix&quot;,&quot;windows&quot;&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;osname&lt;/td&gt;&lt;td&gt;Node os-name value.  E.g. &quot;Macintosh OS X&quot;, &quot;Windows NT&quot;, &quot;Linux&quot;&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;osversion&lt;/td&gt;&lt;td&gt;Node os-version value&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;tags&lt;/td&gt;&lt;td&gt;Tag names.  When specifying more than one tag, use the comma (&quot;,&quot;) to specify a boolean OR operation, and a plus-sign (&quot;+&quot;) to specify a boolean AND operation. E.g. To require both tags &quot;alpha&quot; and &quot;beta&quot;, specify &quot;alpha+beta&quot;.  This will match nodes that have both tags only.  To match any nodes that have one or the other tags, use &quot;alpha,beta&quot;.  Thus &quot;alpha,beta+gamma&quot; will match nodes with either the the tag &quot;alpha&quot;, or both tags &quot;beta&quot; and &quot;gamma&quot;.&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;name&lt;/td&gt;&lt;td&gt;Node name value.  This is the name of the object&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;type&lt;/td&gt;&lt;td&gt;Node type name. This is the name of the node type, typically the base type &quot;Node&quot;.&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;dominant&lt;/td&gt;&lt;td&gt;Boolean specifying if this filter should take
	  precedence over the other.&lt;/td&gt;&lt;td&gt;No (default false for Include, and true for Exclude)&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;

=Examples=

      &lt;pre&gt;
	&amp;lt;nodeset keepgoing=&quot;${opts.keepgoing}&quot; threadCount=&quot;${opts.threadCount}&quot;&amp;gt;
	  &amp;lt;include hostname=&quot;${opts.node-hostname}&quot;
		   name=&quot;${opts.node-name}&quot;
		   tags=&quot;${opts.node-tags}&quot;
		   osfamily=&quot;${opts.node-os-family}&quot;
		   osarch=&quot;${opts.node-os-arch}&quot;
		   osversion=&quot;${opts.node-os-version}&quot;
		   osname=&quot;${opts.node-os-name}&quot;
		   type=&quot;${opts.node-type}&quot;
		   dominant=&quot;${opts.node-dominant}&quot;
		   /&amp;gt;
	  &amp;lt;exclude hostname=&quot;${opts.xnode-hostname}&quot;
		   name=&quot;${opts.xnode-name}&quot;
		   tags=&quot;${opts.xnode-tags}&quot;
		   osfamily=&quot;${opts.xnode-os-family}&quot;
		   osarch=&quot;${opts.xnode-os-arch}&quot;
		   osversion=&quot;${opts.xnode-os-version}&quot;
		   osname=&quot;${opts.xnode-os-name}&quot;
		   type=&quot;${opts.xnode-type}&quot;
		   dominant=&quot;${opts.xnode-dominant}&quot;
		   /&amp;gt;
	&amp;lt;/nodeset&amp;gt;
      &lt;/pre&gt;
&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Command Dispatcher Ant Types]]</text>
    </revision>
  </page>
  <page>
    <title>Node Concepts</title>
    <id>1644</id>
    <redirect />
    <revision>
      <id>11152</id>
      <timestamp>2009-12-14T02:27:48Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>moved [[Node Concepts]] to [[Node design pattern]]</comment>
      <text xml:space="preserve">#REDIRECT [[Node design pattern]]</text>
    </revision>
  </page>
  <page>
    <title>Node Dispatch</title>
    <id>292</id>
    <revision>
      <id>10495</id>
      <timestamp>2009-12-12T00:45:50Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">Node Dispatch is the name of a CTL command execution strategy. It is how ControlTier supports distributed administration.

'''See also'''

----
* [[CTL architecture]]
* [[Use node filtering options]]</text>
    </revision>
  </page>
  <page>
    <title>Node Type Reference</title>
    <id>188</id>
    <revision>
      <id>13810</id>
      <timestamp>2010-11-10T15:13:35Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;object name&quot; to &quot;resource name&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Types&lt;/categorytree&gt;
=Description=
      &lt;p&gt;
	The Node data type represents an object of a Node base type.
      &lt;/p&gt;
   
=Attributes=
      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;name&lt;/td&gt;&lt;td&gt;The resource name.&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;type&lt;/td&gt;&lt;td&gt;The object type name.&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;maprefuri&lt;/td&gt;&lt;td&gt;The maprefUri&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;description&lt;/td&gt;&lt;td&gt;The object description.&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;includeExistingResources&lt;/td&gt;&lt;td&gt;Boolean flag specifying
	  whether to merge included entities with existing child
	  resources. &lt;/td&gt;&lt;td&gt;No, defaults to true.&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;osfamily&lt;/td&gt;&lt;td&gt;The OS family name. e.g, Unix, Windows&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;osname&lt;/td&gt;&lt;td&gt;The OS name. e.g, Linux, MacOs&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;osversion&lt;/td&gt;&lt;td&gt;The OS version. e.g, 7.1&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;osarch&lt;/td&gt;&lt;td&gt;The OS architecture. e.g, i386, PowerPC&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;hostname&lt;/td&gt;&lt;td&gt;The system FQDN. eg., host1.widgets.com or host1.widgets.com:2200 (since 3.4.11)&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;

=Nested elements=
      &lt;p&gt;
	Uses one or more [[EntityReference Type Reference|entityreference]] elements
	to represent child resources.
      &lt;/p&gt;

=Examples=

     &lt;p&gt;
       Shows Node data type used in the [[ObjectUpdate Task Reference|object-update]] Ant
       task. The properties - os.family, os.name, os.version, os.arch
       - are all properties normally defined by Ant.
      &lt;/p&gt;
      &lt;pre&gt;
	&amp;lt;osfamily property=&quot;os.family&quot;/&amp;gt;

	&amp;lt;property name=&quot;maprefId&quot;
                  value=&quot;Node_${framework.node}&quot;/&amp;gt;
	&amp;lt;property name=&quot;node.mapref-uri&quot;
                  value=&quot;http://www.opendepo.org/DepOnt#${maprefId}&quot;/&amp;gt;

	&amp;lt;object-update depot=&quot;${context.depot}&quot;
                       resultproperty=&quot;result&quot;
                       comment=&quot;Updated node object from Node.Register&quot;&amp;gt;
          &amp;lt;node maprefUri=&quot;${node.mapref-uri}&quot;
		name=&quot;${framework.node}&quot;
		type=&quot;${resource.classname}&quot;
		description=&quot;${resource.description}&quot;
		osfamily=&quot;${os.family}&quot;
		osname=&quot;${os.name}&quot;
		osversion=&quot;${os.version}&quot;
		osarch=&quot;${os.arch}&quot;/&amp;gt;
	&amp;lt;/object-update&amp;gt;
	&amp;lt;condition property=&quot;wasUpdated&quot;&amp;gt;
          &amp;lt;equals arg1=&quot;0&quot; arg2=&quot;${result}&quot;/&amp;gt;
	&amp;lt;/condition&amp;gt;
	&amp;lt;fail unless=&quot;wasUpdated&quot;&amp;gt;Failed saving object.&amp;lt;/fail&amp;gt;
      &lt;/pre&gt;
&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Resource model Ant Types]]
[[Category:Node]]</text>
    </revision>
  </page>
  <page>
    <title>Node design pattern</title>
    <id>730</id>
    <revision>
      <id>11151</id>
      <timestamp>2009-12-14T02:27:48Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>moved [[Node Concepts]] to [[Node design pattern]]</comment>
      <text xml:space="preserve">&lt;noinclude&gt;&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Node&lt;/categorytree&gt;&lt;/noinclude&gt;
==Intent==
* Represent a host where deployments reside

== Problem==
== Discussion==
== Structure==

[[Image:Node-structure.png]]

== Example==
==Check List==
== Rules of Thumb==
== Related Types==

*  [[Deployment Concepts]]
*  [[Package Concepts]]

Supertype:

*  [[Managed-Entity Concepts]]

{{Core Type Guide Linkback}}

[[Category:Node]]</text>
    </revision>
  </page>
  <page>
    <title>Node filtering options</title>
    <id>1511</id>
    <redirect />
    <revision>
      <id>9493</id>
      <timestamp>2009-12-08T18:39:37Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>moved [[Node filtering options]] to [[Dispatcher options]]</comment>
      <text xml:space="preserve">#REDIRECT [[Dispatcher options]]</text>
    </revision>
  </page>
  <page>
    <title>Nodes.properties</title>
    <id>133</id>
    <revision>
      <id>14037</id>
      <timestamp>2010-11-10T15:31:36Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;/jackrabbit/repository/workbench&quot; to &quot;/jackrabbit/repository/controltier/projects&quot;</comment>
      <text xml:space="preserve">The &lt;code&gt;nodes.properties&lt;/code&gt; file is a CTL configuration file that drives the node dispatch feature in the command dispatcher.
The command dispatcher uses this file to look up node information when performing distributed command execution. See the [[CTL_architecture#Node_Dispatch|node dispatch section]] for general info about the mechanism.

==Use==
The &lt;code&gt;nodes.properties&lt;/code&gt; file is used by:
* The nodedispatch strategy  uses this file to look up metadata about nodes. Node filtering options are driven by this metadata.
* [[CTL-EXEC_Command_Reference|ctl-exec]] command: Drives command execution.
* [[CTL_Command_Reference|ctl]] command: Drives command execution.

==Location==
===Server===
The file is located on the WebDAV and automatically retrieved from CTL commands when needed. CTL expects the file to be located at the URL:  

${framework.webdav.uri}/''project''/etc/nodes.properties

''Example''

[http://strongbad:8080/jackrabbit/repository/controltier/projects/demo/etc/nodes.properties http://strongbad:8080/jackrabbit/repository/controltier/projects/demo/etc/nodes.properties]

===Client===
On the CTL node,  configuration file is located within the &amp;quot;etc&amp;quot; directory of the depot 

$CTL_BASE/projects/''project''/etc/nodes.properties

''Example''

&lt;code&gt;/Users/alexh/ctier/ctl/projects/demo/etc/nodes.properties&lt;/code&gt;

==Generation and synchronization==

If Workbench is enabled, this file is generated by Workbench. The file is regenerated on the server any time a node definition is made or updated.

CTL synchronizes with the server, pulling this file if any change has been detected since the last time it was updated.

If Workbench is disabled, it is possible to maintain this file using another means (eg manually or via an external tool). Adhere to the format described below.

==Format==
This configuration file uses Java [http://en.wikipedia.org/wiki/.properties properties] format of key/value pairs. Keys are based on a dotted notation all prefixed with the prefix: &lt;code&gt;node&lt;/code&gt;.

Each key takes the basic form: &lt;code&gt;node.&lt;/code&gt;''name''.''attribute''&lt;code&gt; = value&lt;/code&gt;

* The ''name'' is the logical name for the node (can be the same as its hostname).
* The ''attribute'' is a node metadata field. 

{| style=&quot;cellpadding=&quot;5&quot; cellspacing=&quot;0&quot; border=&quot;1&quot;
! field
! description
! key
! example
|-
| description
| brief role of the node
| node.''name''.description
| node.strongbad.description = alex laptop
|-
| type
| node type (usually Node)
| node.''name''.type
| node.strongbad.type = Node
|-
| name
| Node's resource name. Typically value of &lt;code&gt;uname -n&lt;/code&gt;
| node.''name''.name
| node.strongbad.name = strongbad
|-
| hostname
| administrative interface. could be the FQDN or ''name''
| node.''name''.hostname
| node.strongbad.hostname = strongbad.local
|-
| os-arch
| The hosts cpu architecture
| node.''name''.os-arch
| node.strongbad.os-arch = i386
|-
| os-arch
| The hosts cpu architecture
| node.''name''.os-arch
| node.strongbad.os-arch = i386
|-
| os-family
| Either &quot;unix&quot; or &quot;windows&quot;
| node.''name''.os-family
| node.strongbad.family = unix
|-
| os-name
| The name of the operating system
| node.''name''.os-name
| node.strongbad.os-name = Linux
|-
| os-version
| The operating system version
| node.''name''.os-version
| node.strongbad.os-version = 2.6.27-7-generic
|-
| tags
| User defined tags. Comma separated
| node.''name''.tags
| node.strongbad.tags = desktop,sandbox
|-
|}

==Example==
Example nodes.properties defining three nodes: centos, strongbad, development
&lt;pre&gt;
# centos
node.centos.description=a development sandbox host
node.centos.type=Node
node.centos.name=centos
node.centos.hostname=centos
node.centos.os-arch=i386
node.centos.os-family=unix
node.centos.os-name=Linux
node.centos.os-version=9.2.0
node.centos.tags=sandbox
# strongbad
node.strongbad.description=A development desktop host
node.strongbad.type=Node
node.strongbad.name=strongbad
node.strongbad.hostname=strongbad
node.strongbad.os-arch=i386
node.strongbad.os-family=unix
node.strongbad.os-name=Mac OS X
node.strongbad.os-version=10.5.2
node.strongbad.tags=desktop,sandbox
# development
node.development.description=development integration test host
node.development.type=Node
node.development.name=development
node.development.hostname=demo@development
node.development.os-arch=i386
node.development.os-family=unix
node.development.os-name=Linux
node.development.os-version=9.2.0
node.development.tags=DIT
&lt;/pre&gt;

[[Category:CTL properties]]</text>
    </revision>
  </page>
  <page>
    <title>Numcompare Type Reference</title>
    <id>1034</id>
    <revision>
      <id>11344</id>
      <timestamp>2009-12-14T22:51:26Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Types&lt;/categorytree&gt;
==Description==
      &lt;p&gt;
	The numcompare type is a [http://ant.apache.org/manual/CoreTypes/custom-programming.html#customconditions custom condition] that can be used
	in the [http://ant.apache.org/manual/CoreTasks/conditions.html condition] core Ant task or any task that accepts a condition.
      &lt;/p&gt;

==Attributes==
      &lt;p&gt;The numcompare condition takes these attributes&lt;/p&gt;
    
{| border=&quot;1&quot;
! attribute
! description
! required
|-
| op
| comparison operator. One of: gt, gte, lt, lte
| true
|-
| arg1
| number
| true
|-
| arg2
| number
| true
|}

==Examples==

''Example'': Greater-than test
&lt;pre&gt;
&lt;condition property=&quot;isgreater&quot;&gt;
   &lt;numcompare op=&quot;gt&quot; arg1=&quot;2&quot; arg2=&quot;1&quot;/&gt;
&lt;/condition&gt;
 &lt;fail unless=&quot;isgreater&quot;&gt;shouldn't get here!&lt;/fail&gt;
&lt;/pre&gt;

''Example'': Greater-than-equal test
&lt;pre&gt;
&lt;condition property=&quot;isgreater&quot;&gt;
   &lt;numcompare op=&quot;gte&quot; arg1=&quot;2&quot; arg2=&quot;1&quot;/&gt;
&lt;/condition&gt;
 &lt;fail unless=&quot;isgreater&quot;&gt;shouldn't get here!&lt;/fail&gt;
&lt;/pre&gt;

''Example'': Less-than test
&lt;pre&gt;
&lt;condition property=&quot;isless&quot;&gt;
   &lt;numcompare op=&quot;lt&quot; arg1=&quot;2&quot; arg2=&quot;1&quot;/&gt;
&lt;/condition&gt;
 &lt;fail if=&quot;isless&quot;&gt;shouldn't get here!&lt;/fail&gt;
&lt;/pre&gt;

''Example'': Less-than-equal test
&lt;pre&gt;
&lt;condition property=&quot;isless&quot;&gt;
   &lt;numcompare op=&quot;lte&quot; arg1=&quot;2&quot; arg2=&quot;1&quot;/&gt;
&lt;/condition&gt;
 &lt;fail if=&quot;isless&quot;&gt;shouldn't get here!&lt;/fail&gt;
&lt;/pre&gt;

&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Ant Conditions]]</text>
    </revision>
  </page>
  <page>
    <title>Object-maprefuri</title>
    <id>1922</id>
    <redirect />
    <revision>
      <id>12878</id>
      <timestamp>2010-06-18T01:59:27Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Redirected page to [[ObjectMaprefUri Task Reference]]</comment>
      <text xml:space="preserve">#REDIRECT [[ObjectMaprefUri_Task_Reference]]</text>
    </revision>
  </page>
  <page>
    <title>Object-oriented programming terminology</title>
    <id>74</id>
    <revision>
      <id>11338</id>
      <timestamp>2009-12-14T22:37:54Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>/* Terminology */</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Object-orientation&lt;/categorytree&gt;

While object-oriented principles are pretty mainstream, there are differences when it comes to implementations and terminology. ControlTier offers several object-oriented features but it is not an object oriented langauge, nor is it a complete object oriented runtime. That said, it does offer some fundamental OOP features.

==Concepts==

The following table relates conventional object-orientation terms to the analogous ControlTier concept:

==Terminology==

	&lt;table border=&quot;1&quot;&gt;
	  &lt;tr&gt;
	    &lt;th&gt;Object oriention concept&lt;/th&gt;&lt;th&gt;ControlTier concept&lt;/th&gt;&lt;th&gt;Notes&lt;/th&gt;
	  &lt;/tr&gt;

	  &lt;tr&gt;
	    &lt;td&gt;Class&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;A ControlTier &lt;em&gt;type&lt;/em&gt; defines commands (the things it can do) and characteristics (attributes and properties). A &lt;em&gt;module&lt;/em&gt; is the software artifact produced from the type definition. ControlTier establishes the [[Managed-Entity]] core type.&lt;/td&gt;
	  &lt;/tr&gt;
	  &lt;tr&gt;
	    &lt;td&gt;Object&lt;/td&gt;&lt;td&gt;Object&lt;/td&gt;&lt;td&gt;An &lt;em&gt;object&lt;/em&gt; is a particular instance of a type. Objects are initialized with the type's attributes and properties but can override them with their own. ControlTier requires that each object have a unique name. The word &amp;quot;entity&amp;quot; is also used to refer to objects that are instances of  [[Managed-Entity]].&lt;/td&gt;
	  &lt;/tr&gt;
	  &lt;tr&gt;
	    &lt;td&gt;Method&lt;/td&gt;&lt;td&gt;Command&lt;/td&gt;&lt;td&gt;A type's behavior is comprised by its commands.  Part of the Command declaration is a [[Type-v10.xml#command-type|command-type]] that specifies how the command is implemented. The software artifact of a command definition is called a &lt;em&gt;handler&lt;/em&gt;.&lt;/td&gt;
	  &lt;/tr&gt;
	  &lt;tr&gt;
	    &lt;td&gt;Message passing&lt;/td&gt;&lt;td&gt;Dispatch&lt;/td&gt;&lt;td&gt; ControlTier objects invoke each other via an internal mechanism called the [[command dispatcher]] that forwards actions from the sender to the receiver.&lt;/td&gt;
	  &lt;/tr&gt;
	  &lt;tr&gt;
	    &lt;td&gt;Inheritance&lt;/td&gt;&lt;td&gt;Supertype / subtype&lt;/td&gt;&lt;td&gt;Types are arranged in a class hierarchy. A &lt;em&gt;subtype&lt;/em&gt; is a specialization of its supertype. ControlTier allows you to declare your type as a subtype of another type. Subtypes inherit all the commands of its super type. CTL currently supports a single-inheritance model.&lt;/td&gt;
	  &lt;/tr&gt;
	  &lt;tr&gt;
	    &lt;td&gt;Abstract class&lt;/td&gt;&lt;td&gt;Type with role=&quot;abstract&quot;&lt;/td&gt;&lt;td&gt;You can declare your types as &amp;quot;abstract&amp;quot; or &amp;quot;concrete&amp;quot;. An abstract type is one that cannot have object instantiation while concrete types can. The &amp;quot;concrete&amp;quot; role is default.&lt;/td&gt;
	  &lt;/tr&gt;


	  &lt;tr&gt;
	    &lt;td&gt;Static method&lt;/td&gt;&lt;td&gt;Static command&lt;/td&gt;&lt;td&gt;A command can be set to be &quot;is-static&quot; and signifies it can work outside of an object context. Normally, this is done for utility commands.&lt;/td&gt;
	  &lt;/tr&gt;

	  &lt;tr&gt;
	    &lt;td&gt;Class fields&lt;/td&gt;&lt;td&gt;Attributes&lt;/td&gt;&lt;td&gt;Type characteristics can be described in terms of &amp;quot;attributes&amp;quot;. This is done using the [[Reference#type.xml|type.xml]] &lt;code&gt;attributes&lt;/code&gt; tags in the type.xml&lt;/td&gt;
	  &lt;/tr&gt;

	&lt;/table&gt;
&lt;br/&gt;
See the [[Workflow Development Guide]] and the [[Type-v10.xml]] reference documentation for more information.

&lt;noinclude&gt;{{Manual/navbox}}&lt;/noinclude&gt;

[[Category:Object-orientation]]</text>
    </revision>
  </page>
  <page>
    <title>Object-update</title>
    <id>1880</id>
    <redirect />
    <revision>
      <id>12556</id>
      <timestamp>2010-04-21T16:57:46Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[ObjectUpdate Task Reference]]</comment>
      <text xml:space="preserve">#REDIRECT [[ObjectUpdate_Task_Reference]]</text>
    </revision>
  </page>
  <page>
    <title>Object.xml</title>
    <id>327</id>
    <redirect />
    <revision>
      <id>1476</id>
      <timestamp>2009-01-05T17:36:12Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>[[Object.xml]] moved to [[Project.xml]]</comment>
      <text xml:space="preserve">#REDIRECT [[Project.xml]]</text>
    </revision>
  </page>
  <page>
    <title>ObjectCreate Task Reference</title>
    <id>165</id>
    <revision>
      <id>12884</id>
      <timestamp>2010-06-18T02:43:24Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Resource model Ant Tasks&lt;/categorytree&gt;

      &lt;p&gt;
	Creates a new [[Resource]] in specified project.
      &lt;/p&gt;
    
=Parameters=
      &lt;table class=&quot;wikitable&quot;&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;depot&lt;/td&gt;&lt;td&gt;The project to update&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;resultproperty&lt;/td&gt;&lt;td&gt;Property to set with
	  success/fail value&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;comment&lt;/td&gt;&lt;td&gt;Text describing purpose of update&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;passfile&lt;/td&gt;&lt;td&gt;File containing authentication info to
	  server. If passfile is not specified, information from the
	   [[framework.properties]]
	  file is used instead.&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;

=Parameters specified as nested elements=
      &lt;p&gt;&lt;strong&gt;setting&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
	A [[Setting Type Reference|setting]] resource.
      &lt;/p&gt;
      &lt;p&gt;&lt;strong&gt;deployment&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
	A [[Deployment Type Reference|deployment]] resource.
      &lt;/p&gt;
      &lt;p&gt;&lt;strong&gt;assembly&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
	A [[Assembly Type Reference|assembly]] resource.
      &lt;/p&gt;
      &lt;p&gt;&lt;strong&gt;node&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
	A [[Node Type Reference|node]] resource.
      &lt;/p&gt;
      &lt;p&gt;&lt;strong&gt;package&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
	A [[Package Type Reference|package]] resource.
      &lt;/p&gt;
   
=Examples=
      &lt;p&gt;
	Create a package resource.
      &lt;/p&gt;
      &lt;pre&gt;
	&amp;lt;object-create depot=&quot;${context.depot}&quot;
                       resultproperty=&quot;result&quot;
                       comment=&quot;Created package resource from command&quot;&amp;gt;
          &amp;lt;package
                   name=&quot;${rpm.name}&quot;
                   type=&quot;Package&quot;
                   description=&quot;${rpm.descr}&quot;
                   filename=&quot;${rpm.filename}&quot;
                   version=&quot;${rpm.version}&quot;
                   release=&quot;${rpm.release}&quot;
                   base=&quot;${rpm.base}&quot;
                   arch=&quot;${rpm.arch}&quot;
                   vendor=&quot;${rpm.vendor}&quot;
                   buildtime=&quot;${rpm.buildtime}&quot;/&amp;gt;
	&amp;lt;/object-create&amp;gt;
	&amp;lt;condition property=&quot;wasCreated&quot;&amp;gt;
          &amp;lt;equals arg1=&quot;0&quot; arg2=&quot;${result}&quot;/&amp;gt;
	&amp;lt;/condition&amp;gt;
	&amp;lt;fail unless=&quot;wasCreated&quot;&amp;gt;Failed saving resource.&amp;lt;/fail&amp;gt;
      &lt;/pre&gt;

&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Resource model Ant Tasks]]
[[Category:Resource]]</text>
    </revision>
  </page>
  <page>
    <title>ObjectExists Task Reference</title>
    <id>166</id>
    <revision>
      <id>12885</id>
      <timestamp>2010-06-18T12:39:30Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Resource model Ant Tasks&lt;/categorytree&gt;

      &lt;p&gt;
	Checks if specified [[Resource]] exists in project.
      &lt;/p&gt;
    
==Parameters==
      &lt;table class=&quot;wikitable&quot;&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;depot&lt;/td&gt;&lt;td&gt;The project to update&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;resultproperty&lt;/td&gt;&lt;td&gt;Property to set with success/fail value&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;comment&lt;/td&gt;&lt;td&gt;Text describing purpose of update&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;passfile&lt;/td&gt;&lt;td&gt;File containing authentication info to server. If passfile is not specified, information from the [[framework.properties]] file is used instead.&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;
    
==Parameters specified as nested elements==

      &lt;p&gt;&lt;strong&gt;setting&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
	A [[Setting Type Reference|setting]] element.
      &lt;/p&gt;
      &lt;p&gt;&lt;strong&gt;deployment&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
	A [[Deployment Type Reference|deployment]] element.
      &lt;/p&gt;
      &lt;p&gt;&lt;strong&gt;assembly&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
	A [[Assembly Type Reference|assembly]] element.
      &lt;/p&gt;
      &lt;p&gt;&lt;strong&gt;node&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
	A [[Node Type Reference|node]] element.
      &lt;/p&gt;
      &lt;p&gt;&lt;strong&gt;package&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
	A [[Package Type Reference|package]] element.
      &lt;/p&gt;
    
==Examples==
      &lt;p&gt;
	Check if a package resource exists
      &lt;/p&gt;
      &lt;pre&gt;
	&amp;lt;object-exists depot=&quot;${context.depot}&quot;
                       resultproperty=&quot;result&quot;
                       comment=&quot;&quot;&amp;gt;
          &amp;lt;package
                   name=&quot;${rpm.name}&quot;
                   type=&quot;Package&quot;/&amp;gt;
	&amp;lt;/object-exists&amp;gt;
	&amp;lt;condition property=&quot;exists&quot;&amp;gt;
          &amp;lt;equals arg1=&quot;0&quot; arg2=&quot;${result}&quot;/&amp;gt;
	&amp;lt;/condition&amp;gt;
      &lt;/pre&gt;

&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Resource model Ant Tasks]]
[[Category:Resource]]</text>
    </revision>
  </page>
  <page>
    <title>ObjectMaprefUri</title>
    <id>1635</id>
    <redirect />
    <revision>
      <id>11068</id>
      <timestamp>2009-12-13T17:37:22Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>moved [[ObjectMaprefUri]] to [[ObjectMaprefUri Task Reference]]</comment>
      <text xml:space="preserve">#REDIRECT [[ObjectMaprefUri Task Reference]]</text>
    </revision>
  </page>
  <page>
    <title>ObjectMaprefUri Task Reference</title>
    <id>167</id>
    <revision>
      <id>13520</id>
      <timestamp>2010-11-10T01:45:36Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;depot.&quot; to &quot;project.&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Resource model Ant Tasks&lt;/categorytree&gt;

      &lt;p&gt;
	Looks up the [[Resource]] maprefuri identifier given its name,
	type and project.
      &lt;/p&gt;
   
==Parameters==
      &lt;table class=&quot;wikitable&quot;&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;depot&lt;/td&gt;&lt;td&gt;The project to update&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;resultproperty&lt;/td&gt;&lt;td&gt;Property to set with success/fail value&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;outputproperty&lt;/td&gt;&lt;td&gt;Property to set with objects mapref-uri value&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;comment&lt;/td&gt;&lt;td&gt;Text describing purpose of update&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;passfile&lt;/td&gt;&lt;td&gt;File containing authentication info to server. If passfile is not specified, information from the [[framework.properties]] file is used instead.&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;

==Parameters specified as nested elements==
      &lt;p&gt;&lt;strong&gt;resource&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
	A [[Resource Type Reference|resource]].
      &lt;/p&gt;

==Examples==
      &lt;p&gt;
	Check if a package resource exists
      &lt;/p&gt;
      &lt;pre&gt;
	&amp;lt;object-maprefuri depot=&quot;${context.depot}&quot;
                       resultproperty=&quot;result&quot;
	               outputproperty=&quot;mapref&quot;
                       comment=&quot;&quot;&amp;gt;
          &amp;lt;resource
                   name=&quot;${context.name}&quot;
                   type=&quot;${context.type}&quot;/&amp;gt;
	&amp;lt;/object-maprefuri&amp;gt;
        &amp;lt;echo message=&quot;mapref-uri is ${mapref}&quot;/&amp;gt;
      &lt;/pre&gt;

&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Resource model Ant Tasks]]
[[Category:Resource]]</text>
    </revision>
  </page>
  <page>
    <title>ObjectRemove Task Reference</title>
    <id>168</id>
    <revision>
      <id>11386</id>
      <timestamp>2009-12-14T23:09:47Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Tasks&lt;/categorytree&gt;

=Description=
      &lt;p&gt;
	Removes [[Resource]] in specified project.
      &lt;/p&gt;
    
=Parameters=
      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;depot&lt;/td&gt;&lt;td&gt;The project to update&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;resultproperty&lt;/td&gt;&lt;td&gt;Property to set with
	  success/fail value&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;comment&lt;/td&gt;&lt;td&gt;Text describing purpose of update&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;passfile&lt;/td&gt;&lt;td&gt;File containing authentication info to
	  server. If passfile is not specified, information from the
	    [[framework.properties]]
	  file is used instead.&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;

=Parameters specified as nested elements=

      &lt;p&gt;&lt;strong&gt;entityreference&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
	An [[EntityReference Type Reference|entityreference]]
	specifying object to remove.
      &lt;/p&gt;
 
   
=Examples=
      &lt;p&gt;
	Remove object with maprefUri set to http://www.opendepo.org/MyOrg#MyProj_001
      &lt;/p&gt;
      &lt;pre&gt;
	&amp;lt;object-remove depot=&quot;MyProj&quot;
                       resultproperty=&quot;result&quot;
                       comment=&quot;Removed object because it was obsolete&quot;&amp;gt;
          &amp;lt;entityreference maprefuri=&quot;http://www.opendepo.org/MyOrg#MyProj_001&quot;/&amp;gt;
	&amp;lt;/object-remove&amp;gt;

      &lt;/pre&gt;

&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Resource model Ant Tasks]]
[[Category:Resource]]</text>
    </revision>
  </page>
  <page>
    <title>ObjectUpdate Task Reference</title>
    <id>169</id>
    <revision>
      <id>12557</id>
      <timestamp>2010-04-21T16:59:30Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>reformattig</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Tasks&lt;/categorytree&gt;

=Description=

      &lt;p&gt;
	Updates [[Resource]] in specified project.
      &lt;/p&gt;
    
=Parameters=

      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;depot&lt;/td&gt;&lt;td&gt;The project to update&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;resultproperty&lt;/td&gt;&lt;td&gt;Property to set with
	  success/fail value&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;comment&lt;/td&gt;&lt;td&gt;Text describing purpose of update&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;passfile&lt;/td&gt;&lt;td&gt;File containing authentication info to
	  server. If passfile is not specified, information from the
	    [[framework.properties]]
	  file is used instead.&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;

=Parameters specified as nested elements=
A [[Resource]]
      &lt;p&gt;&lt;strong&gt;setting&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
	A [[Setting Type Reference|setting]] resource.
      &lt;/p&gt;
      &lt;p&gt;&lt;strong&gt;deployment&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
	A [[Deployment Type Reference|deployment]] resource.
      &lt;/p&gt;
      &lt;p&gt;&lt;strong&gt;assembly&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
	An [[Assembly Type Reference|assembly]] resource.
      &lt;/p&gt;
      &lt;p&gt;&lt;strong&gt;node&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
	A [[Node Type Reference|node]] resource.
      &lt;/p&gt;
      &lt;p&gt;&lt;strong&gt;package&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
	A [[Package Type Reference|package]] resource.
      &lt;/p&gt;

=Examples=

      &lt;p&gt;
	Update a package resource.
      &lt;/p&gt;
      &lt;syntaxhighlight&gt;
&lt;object-update depot=&quot;${context.depot}&quot;
                       resultproperty=&quot;result&quot;
                       comment=&quot;Updated package object from command&quot;&gt;
          &lt;package maprefUri=&quot;${maprefUri}&quot;
                   name=&quot;${rpm.name}&quot;
                   type=&quot;Package&quot;
                   description=&quot;${rpm.descr}&quot;
                   filename=&quot;${rpm.filename}&quot;
                   version=&quot;${rpm.version}&quot;
                   release=&quot;${rpm.release}&quot;
                   base=&quot;${rpm.base}&quot;
                   arch=&quot;${rpm.arch}&quot;
                   vendor=&quot;${rpm.vendor}&quot;
                   buildtime=&quot;${rpm.buildtime}&quot;/&gt;
 &lt;/object-update&gt;
 &lt;condition property=&quot;wasUpdated&quot;&gt;
          &lt;equals arg1=&quot;0&quot; arg2=&quot;${result}&quot;/&gt;
 &lt;/condition&gt;
 &lt;fail unless=&quot;wasUpdated&quot;&gt;Failed saving resource.&lt;/fail&gt;
      &lt;/syntaxhighlight &gt;

&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Resource model Ant Tasks]]
[[Category:Resource]]</text>
    </revision>
  </page>
  <page>
    <title>Object naming convention</title>
    <id>1970</id>
    <redirect />
    <revision>
      <id>14180</id>
      <timestamp>2010-11-10T16:09:33Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>moved [[Object naming convention]] to [[Resource naming convention]]</comment>
      <text xml:space="preserve">#REDIRECT [[Resource naming convention]]</text>
    </revision>
  </page>
  <page>
    <title>Older announcements</title>
    <id>1048</id>
    <revision>
      <id>13654</id>
      <timestamp>2010-11-10T15:03:08Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">* '''2010-08-31''': '''3.5.4 Released'''
*: [[Image:Bulbgaph.svg|18x18px|Bugfix]] [[ControlTier 3.5.4|ControlTier 3.5.4]] is now available
* '''2010-08-13''': '''3.5.3 Released'''
*: [[Image:Bulbgaph.svg|18x18px|Bugfix]] [[ControlTier 3.5.3|ControlTier 3.5.3]] is now available
* '''2010-06-22''': '''3.5.2 Released'''
*: [[Image:Bulbgaph.svg|18x18px|Bugfix]] [[ControlTier 3.5.2|ControlTier 3.5.2]] is now available
* '''2010-05-21''': '''3.4.12 Released'''
*: [[Image:Bulbgaph.svg|18x18px|Bugfix]] [[ControlTier 3.4.12|ControlTier 3.4.12]] is now available
* '''2010-05-21''': '''3.5.1 Released'''
*: [[Image:Bulbgaph.svg|18x18px|Bugfix]] [[ControlTier 3.5.1|ControlTier 3.5.1]] is now available
* '''2010-04-22''': '''3.4.11 Released'''
*: [[Image:Bulbgaph.svg|18x18px|Bugfix]] [[ControlTier 3.4.11|ControlTier 3.4.11]] is now available
* '''2010-04-07''': '''3.5/3.6 Development schedule posted'''
*: The [[3.5-3.6 Development]] schedule posted as a [http://www.google.com/calendar/hosted/dtosolutions.com/embed?src=dtosolutions.com_cp62m4u8cqsfs5t8icm1nspa1g%40group.calendar.google.com&amp;ctz=America/Los_Angeles Google calendar]
* '''2010-03-04''': '''3.4.10 Released'''
*: [[Image:Bulbgaph.svg|18x18px|Bugfix]] [[ControlTier 3.4.10|ControlTier 3.4.10]] is now available
* '''2010-01-11''': '''3.5-3.6 Development cycle underway'''
*: Major development cycle begins (aka [[Development_scope_(Vandelay)|Vandelay)]]: [http://groups.google.com/group/controltier/browse_frm/thread/57383bfddde98476?hl=en Google group posting]. The 3.4.10 release expected end of January
* '''2009-12-15''': '''Wiki updated'''
*: Simplified [[User Guide]], [[Help|contextual navigation]] and graphical [[Graphical type editor|type]] and [[Graphical resource editor|resource]] editors now documented
* '''2009-11-20''': '''Roadmap discussion'''
*: Alex starts ControlTier development planning with the [[Roadmap wishlist]]</text>
    </revision>
  </page>
  <page>
    <title>One Week Foundation Training</title>
    <id>1000</id>
    <revision>
      <id>10864</id>
      <timestamp>2009-12-12T23:59:57Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>/* Day 1 */</comment>
      <text xml:space="preserve">Send an email to [mailto:training@dtosolutions.com?Subject=One%20Week%20Foundation%20Training training@dtosolutions.com] or go to the [http://www.dtosolutions.com/controltier/ ControlTier Training and Support] page to schedule the One Week FoundationTraining.''

==Overview==
A five day training program covering, introductory concepts, installation, project setup, package management, service management and continuous deployment.

===Learn To===
* Understand the core concepts that drive and underly the ControlTier system
* Use the GUI and command line interfaces
* Install and configure a multi-node ControlTier infrastructure
* Execute commands via the CTL command dispatcher
* Create and import packages into the ControlTier server
* Define and manage a long running application service
* Deploy packages to application services
* Define and integrate scripts to manage startup and shutdown of a service
* Manage logically grouped sets of Services centrally using a Site
* Use ProjectBuilder to manage the ControlTier model and repository artifacts 
* Integrate ControlTier to your SCM via ProjectBuilder and create project builds

===Audience===
* System Administrators
* Software Engineers
* Build Engineers
* System Engineers

===Prerequisites===
==== Required Prerequisites ====
This training course contains a number of laboratory exercises that have the same system requirements as the [[Demo_system_requirements|ControlTier demonstration]].

==Schedule==

The training program is broken down into five days, where each day is broken into three sessions: morning, lunch and afternoon.
We realize that the attendees are key personnel and often need some flexibility to handle operational activities. We can tailor the schedule to fit the needs of your team.

===Day 1===
''Morning''
* Introduction
** [[What is ControlTier]], [[Getting Started]]
** Fundamentals, Roles and Responsibilities, UI orientation: [[Course - ControlTier Intro|Course - ControlTier Introduction]]
** [[How to use ControlTier]]
** Obtain installation prerequisites

''Lunch''

''Afternoon''

* System Administration
** [[Course - System Administration: Part 1]]
** [[Installation]], [[ZIP installer]]
** [[ZIP_installer (client-only)]], [[ZIP installer (multiple-clients)]]
** Environment and command line tools overview. [http://apps.sourceforge.net/mediawiki/controltier/index.php?title=Category:Command-line_utilities Command-line utilities]

===Day 2===
''Morning''
* Executing commands
** CTL: [[CTL architecture]], [[Command execution]]
** [[Running ad hoc commands]]
** [[Running defined commands]]
** [[Use node filtering options]]
** Jobs and [[Jobcenter]]
** Labs: [[Replace your SSH loop script]], [[Multi-node tail -f]], [[Use Deployment exec command]]

''Lunch''

''Afternoon''

* Package Management: Part 1
** [[Course - Package Manager]]
** Labs: [[Creating packages]], [[Prepare Finish Scripts]]

===Day 3===
''Morning''
* Service Management: Services
** [[Course - Service Life cycle Management]]
* Labs: [[Mock Unix Service Example]], [[Service Package Deployment Example]]

''Lunch''

''Afternoon''
* Service Management: Sites
** Introducing Mediator and Site types and life cycles, Understanding runtime state control and startup ranks
** [[Course - Service Life cycle Management#The Site Type]]
** Labs: [[Mock Site Example]], [[Site Coordination Models]]

===Day 4===
''Morning''
* Dukes Bank demo
** [[Building_Dukes_Bank_Project|Install demo]]
** [[ControlTier_Demo#Basic_Demos|Run demos]]

''Lunch''

''Afternoon''

* Package Management: Builders
** [[Course_-_Package_Manager#Builder|Builder types and life cycle]]
**  [[Course_-_Service_Life_cycle_Management#Understanding_Change-Dependencies|Understanding Change-Dependencies for automatic deployment]]
* Labs: [[Builder Simple Example]]

===Day 5===
''Morning''

* Project management
**[[:Category:Projects]]
* Labs: [[Use ProjectBuilder]]

''Lunch''

''Afternoon''

* Project management (cont)
** Generating forrest documentation
** Running a project build
** Release management

[[Category:Training Programs]]</text>
    </revision>
  </page>
  <page>
    <title>OpenLDAP integration</title>
    <id>1526</id>
    <redirect />
    <revision>
      <id>9539</id>
      <timestamp>2009-12-10T16:09:56Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>moved [[OpenLDAP integration]] to [[ControlTier 3.1 and OpenLDAP integration]]</comment>
      <text xml:space="preserve">#REDIRECT [[ControlTier 3.1 and OpenLDAP integration]]</text>
    </revision>
  </page>
  <page>
    <title>OpenLDAP integration32+</title>
    <id>1800</id>
    <redirect />
    <revision>
      <id>11848</id>
      <timestamp>2009-12-17T16:12:05Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>moved [[OpenLDAP integration32+]] to [[Jetty LDAP integration]]</comment>
      <text xml:space="preserve">#REDIRECT [[Jetty LDAP integration]]</text>
    </revision>
  </page>
  <page>
    <title>OpenSSH on Windows</title>
    <id>1702</id>
    <redirect />
    <revision>
      <id>11504</id>
      <timestamp>2009-12-15T16:05:50Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>moved [[OpenSSH on Windows]] to [[CopSSH on Windows]]</comment>
      <text xml:space="preserve">#REDIRECT [[CopSSH on Windows]]</text>
    </revision>
  </page>
  <page>
    <title>Option defaulting with a literal</title>
    <id>99</id>
    <revision>
      <id>11532</id>
      <timestamp>2009-12-15T16:28:02Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>/* See also */</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Command Options&lt;/categorytree&gt;

This page describes how to use the &quot;option&quot; tag to define a string type option that is defaulted to a literal value. A string type option is a named parameter that accepts an argument. Sometimes it is desirable to expose a command option to let a user provide input but to fall back to a reasonable default otherwise.

==Choose a command==
You can add the option to an existing command definition. To create a new type with an example command that takes an option run:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m ProjectBuilder -c create-type -- -type optioncommands
&lt;/syntaxhighlight&gt;

== Edit type.xml==
The example code below defines a command called &quot;print&quot; that takes an option &quot;-message&quot;. The opt tag includes a &quot;default&quot; attribute that specifies to print &quot;Hello&quot; value if a user does not specify &quot;-message&quot;.

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
   &lt;command name=&quot;print&quot; description=&quot;print a message.&quot; 
               command-type=&quot;AntCommand&quot; is-static=&quot;true&quot;&gt;
        &lt;implementation&gt;
	  &lt;echo message=&quot;${opts.message}&quot;/&gt;
        &lt;/implementation&gt;
        &lt;!--
	  ** Define an option called &quot;-message&quot;.
	  ** The command line will be parsed and set the 
	  ** value to the property named opts.message
	  --&gt;
        &lt;opts&gt;
          &lt;opt parameter=&quot;message&quot; description=&quot;option name&quot; required=&quot;false&quot;
	       property=&quot;opts.message&quot; type=&quot;string&quot; default=&quot;Hello&quot;/&gt;
        &lt;/opts&gt;
      &lt;/command&gt;      
&lt;/syntaxhighlight&gt;

==Build the type==
Use the &quot;build-type&quot; command to generate the command files.
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
 ctl -m ProjectBuilder -c build-type -- -type optioncommands -upload -deploy
&lt;/syntaxhighlight&gt;
The -upload and -deploy flag cause the generated type to be uploaded to Workbench and then deployed to the local client.

==Run the command==

Run it without the &quot;-message&quot; option to show the default
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m optioncommands -c print 
Hello
&lt;/syntaxhighlight&gt;

Run it with your own message:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -p default -m optioncommands -c print -- -message Hola
Hola 
&lt;/syntaxhighlight&gt;

Note:
* Remember that user specified options are typed after the &quot;--&quot; (double dash) characters.


&lt;noinclude&gt;{{Manual/navbox}}&lt;/noinclude&gt;

[[Category:Command Options]]</text>
    </revision>
  </page>
  <page>
    <title>Option defaulting with a literal and attribute</title>
    <id>102</id>
    <redirect />
    <revision>
      <id>537</id>
      <timestamp>2008-12-22T23:01:37Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>[[Option defaulting with a literal and attribute]] moved to [[Option defaulting with an attribute or literal]]</comment>
      <text xml:space="preserve">#REDIRECT [[Option defaulting with an attribute or literal]]</text>
    </revision>
  </page>
  <page>
    <title>Option defaulting with an attribute</title>
    <id>100</id>
    <revision>
      <id>13445</id>
      <timestamp>2010-11-10T01:37:23Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;entity.attribute&quot; to &quot;resource.attribute&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Command Options&lt;/categorytree&gt;

This page describes how to use the &quot;option&quot; tag to define a string type option that is defaulted to an attribute value. A string type option is a named parameter that accepts an argument. Sometimes it is desirable to expose a command option to let a user provide input but to fall back to a reasonable default defined in an attribute.

'''Why use an attribute rather than a literal ?'''
* Attribute data can be shared across commands defined in a type
* Attributes can be inherited by subtypes

Note:
* If the attribute is not set in the scope of the command, then the option will not be defaulted.

''See: [[Attributes]] for more detail''

==Choose a command==
You can add the option to an existing command definition. To create a new type with an example command that takes an option run:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m ProjectBuilder -c create-type -- -type optioncommands
&lt;/syntaxhighlight&gt;

== Edit type.xml==
The example code below defines a command called &quot;print&quot; that takes an option &quot;-message&quot;. The opt tag includes a &quot;defaultproperty&quot; attribute that specifies to print the value of resource.attribute.message if a user does not specify &quot;-message&quot;. 
The resource.attribute.message is specified using the &quot;attribute-default&quot; tag. Attributes generate properties prefixed with &quot;resource.attribute.&quot;.

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
&lt;types xmlns:cmd=&quot;http://open.controltier.com/base/Modules/Commands#&quot; 
       xmlns:module=&quot;http://open.controltier.com/base/Modules#&quot; 
       xmlns:type=&quot;http://open.controltier.com/base/Types#&quot;&gt;

&lt;type name=&quot;optioncommands&quot; role=&quot;concrete&quot; 
        uniqueInstances=&quot;true&quot;&gt;
   &lt;!-- 
      ** define an attribute named &quot;message&quot; to use as a default.
      --&gt;

     &lt;attributes&gt;
       &lt;attribute-default name=&quot;message&quot; value=&quot;Guten Tag!&quot;/&gt;
     &lt;/attributes&gt;

    &lt;command-settings&gt;
      &lt;notification notify=&quot;false&quot;/&gt;
      &lt;template-directory&gt;&lt;/template-directory&gt;
      &lt;dependency-view parents=&quot;false&quot; children=&quot;true&quot; proximity=&quot;1&quot;/&gt;
      &lt;logger name=&quot;optioncommands&quot;/&gt;
    &lt;/command-settings&gt;
    &lt;commands&gt;
     &lt;command name=&quot;print&quot; description=&quot;print a message.&quot; 
               command-type=&quot;AntCommand&quot; is-static=&quot;true&quot;&gt;
        &lt;implementation&gt;
	  &lt;echo message=&quot;${opts.message}&quot;/&gt;
        &lt;/implementation&gt;
        &lt;!--
	  ** Define an option called &quot;-message&quot;.
	  ** The command line will be parsed and set the 
	  ** value to the property named opts.message
	  --&gt;
        &lt;opts&gt;
          &lt;opt parameter=&quot;message&quot; description=&quot;option name&quot; required=&quot;false&quot;
	       property=&quot;opts.message&quot; type=&quot;string&quot; 
               defaultproperty=&quot;resource.attribute.message&quot;/&gt;
        &lt;/opts&gt;
      &lt;/command&gt; 
    &lt;/commands&gt;
&lt;/type&gt;
&lt;/types&gt;
&lt;/syntaxhighlight&gt;

==Build the type==
Use the &quot;build-type&quot; command to generate the command files.
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
 ctl -m ProjectBuilder -c build-type -- -type optioncommands -upload -deploy
&lt;/syntaxhighlight&gt;
The -upload and -deploy flag cause the generated type to be uploaded to Workbench and then deployed to the local client.

==Run the command==

Run it without the &quot;-message&quot; option to show the default
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m optioncommands -c print 
Guten Tag!
&lt;/syntaxhighlight&gt;

Run it with your own message:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -p default -m optioncommands -c print -- -message Hola
Hola 
&lt;/syntaxhighlight&gt;

Note:
* Remember that user specified options are typed after the &quot;--&quot; (double dash) characters.


&lt;noinclude&gt;{{Manual/navbox}}&lt;/noinclude&gt;

[[Category:Command Options]]</text>
    </revision>
  </page>
  <page>
    <title>Option defaulting with an attribute or literal</title>
    <id>101</id>
    <revision>
      <id>13973</id>
      <timestamp>2010-11-10T15:26:45Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;-objects&quot; to &quot;-resources&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Command Options&lt;/categorytree&gt;

This page describes how to use the &quot;option&quot; tag to define a string type option that is defaulted either by an attribute (if it is set) or a literal default. A string type option is a named parameter that accepts an argument. Sometimes it is desirable to expose a command option to let a user provide input but to fall back to a reasonable default defined in an attribute or a literal default.

This page builds on the ideas mentioned in:
* [[Option defaulting with a literal]]
* [[Option defaulting with an attribute]]

See: [[Attributes]] for more detail.

'''Thinking a bit further on the use case'''

Typically, this use case assumes the option for the command is expected to be defaulted from the value of an associated Setting resource. When this Setting resource is a child dependency, then the value of the exported attribute will be accessible in the scope of the executing command.
As a fail safe, the command author can declare a literal value to default the option, if the Setting resource association does not exist.

Note:
* An alternative to defining a default in the 'opt' tag, would be to use the 'attribute-default' tag to declare a default value for the attribute. This might be considered preferable to maximize model visibility.

==Choose a command==
You can add the option to an existing command definition. To create a new type with an example command that takes an option run:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m ProjectBuilder -c create-type -- -type optioncommands
&lt;/syntaxhighlight&gt;

== Edit type.xml==
The example code below defines a command called &quot;print&quot; that takes an option &quot;-message&quot;. The opt tag includes a &quot;defaultproperty&quot; attribute that specifies to print the value of resource.attribute.message if a user does not specify &quot;-message&quot;. 
The resource.attribute.message is specified using the &quot;attribute-default&quot; tag. Attributes generate properties prefixed with &quot;resource.attribute.&quot;.

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;types xmlns:cmd=&quot;http://open.controltier.com/base/Modules/Commands#&quot; 
       xmlns:module=&quot;http://open.controltier.com/base/Modules#&quot; 
       xmlns:type=&quot;http://open.controltier.com/base/Types#&quot;&gt;

  &lt;type name=&quot;optioncommands&quot; role=&quot;concrete&quot; 
        uniqueInstances=&quot;true&quot;&gt;
    &lt;description&gt;Example option commands&lt;/description&gt;

    &lt;supertype&gt;
      &lt;typereference name=&quot;Deployment&quot;/&gt;
    &lt;/supertype&gt;

    &lt;command-settings&gt;
      &lt;notification notify=&quot;false&quot;/&gt;
      &lt;template-directory&gt;&lt;/template-directory&gt;
      &lt;dependency-view parents=&quot;false&quot; children=&quot;true&quot; proximity=&quot;1&quot;/&gt;
      &lt;logger name=&quot;optioncommands&quot;/&gt;
    &lt;/command-settings&gt;

    &lt;commands&gt;

        &lt;!--
	  ** print:
	  --&gt;
     &lt;command name=&quot;print&quot; description=&quot;print a message.&quot; 
               command-type=&quot;AntCommand&quot; is-static=&quot;true&quot;&gt;
        &lt;implementation&gt;
	  &lt;echo message=&quot;${opts.message}&quot;/&gt;
        &lt;/implementation&gt;
        &lt;!--
	  ** Define an option called &quot;-message&quot;.
	  ** The command line will be parsed and set the 
	  ** value to the property named opts.message
	  --&gt;
        &lt;opts&gt;
          &lt;opt parameter=&quot;message&quot; description=&quot;option name&quot; required=&quot;false&quot;
	       property=&quot;opts.message&quot; type=&quot;string&quot; 
               default=&quot;Hello&quot;
               defaultproperty=&quot;resource.attribute.message&quot;/&gt;
        &lt;/opts&gt;
      &lt;/command&gt; 
    &lt;/commands&gt;
  &lt;/type&gt;

        &lt;!--
	  ** PrintCommandMessage
	  --&gt;
  &lt;type role=&quot;concrete&quot; uniqueInstances=&quot;true&quot; name=&quot;PrintCommandMessage&quot; order=&quot;Setting&quot;&gt;
    &lt;description&gt;A setting to used to default the -message option&lt;/description&gt;
    &lt;supertype&gt;
      &lt;typereference name=&quot;DeploymentSetting&quot;/&gt;
    &lt;/supertype&gt;
    &lt;attributes&gt;
      &lt;!--
          ** exports the &quot;message&quot; attribute
          --&gt;
      &lt;attribute name=&quot;message&quot; type-property=&quot;settingValue&quot;/&gt;
    &lt;/attributes&gt;
    &lt;constraints&gt;
      &lt;dependency-constraint enforced=&quot;false&quot; kind=&quot;parent&quot;&gt;
         &lt;allowedtypes&gt;
           &lt;typereference name=&quot;optioncommands&quot;/&gt;
          &lt;/allowedtypes&gt;
      &lt;/dependency-constraint&gt;
    &lt;/constraints&gt;
  &lt;/type&gt;

&lt;/types&gt;

&lt;/syntaxhighlight&gt;

==Build the type==
Use the &quot;build-type&quot; command to generate the command files.
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
 ctl -m ProjectBuilder -c build-type -- -type optioncommands -upload -deploy
&lt;/syntaxhighlight&gt;
The -upload and -deploy flag cause the generated type to be uploaded to Workbench and then deployed to the local client.

== Define the resources ==

Define an instance of the optioncommands type called &quot;default&quot;. 
Also define a Setting resource that contains the message value to print.

Listing: /tmp/objects.xml

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
&lt;!DOCTYPE project PUBLIC
&quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; &quot;project.dtd&quot;&gt;
&lt;project&gt;
  &lt;!--
      ** Declare the Setting containing the message to print
  --&gt;
  &lt;setting type=&quot;PrintCommandMessage&quot; name=&quot;default&quot; 
	   description=&quot;The message to print&quot; 
	   settingValue=&quot;Bon Jour&quot; settingType=&quot;script&quot;/&gt;
  &lt;deployment type=&quot;optioncommands&quot;
	      name=&quot;default&quot; 
	      description=&quot;The default optioncommands deployment.&quot; 
	      installRoot=&quot;&quot; basedir=&quot;&quot;&gt;
    &lt;referrers&gt;
      &lt;resource name=&quot;localhost&quot; type=&quot;Node&quot; /&gt;
    &lt;/referrers&gt;
  &lt;/deployment&gt;
&lt;/project&gt;
&lt;/syntaxhighlight&gt;

Upload the resource definitions:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -p default -m ProjectBuilder -c load-resources -- -filename /tmp/objects.xml
&lt;/syntaxhighlight&gt;

After loading, Workbench will have definitions for the setting and deployment object.
No association between the two was made.

==Install the resources to CTL==

Install the defined object on the localhost:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -p default -t optioncommands -r default -c Install
&lt;/syntaxhighlight&gt;

==Run the command==

Run it without the &quot;-message&quot; option and you will see the literal default value:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m optioncommands -c print 
Hello
&lt;/syntaxhighlight&gt;

Run it with your own message:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -p default -m optioncommands -c print -- -message Hola
Hola 
&lt;/syntaxhighlight&gt;


Note:
* Remember that user specified options are typed after the &quot;--&quot; (double dash) characters.

This example showed that if no associated Setting resource was found, to default the -message argument to the literal value &quot;Hello&quot;.

== Associate the setting ==
Creating an association to that Setting resource will bring its value into the scope of the command execution context. 

To create the association use the &quot;resources&quot; tag and reference it by name and type:

Listing: /tmp/objects.xml

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
&lt;!DOCTYPE project PUBLIC
&quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; &quot;project.dtd&quot;&gt;
&lt;project&gt;
  &lt;!--
      ** Declare the Setting containing the message to print
  --&gt;
  &lt;setting type=&quot;PrintCommandMessage&quot; name=&quot;default&quot; 
	   description=&quot;The message to print&quot; 
	   settingValue=&quot;Bon Jour&quot; settingType=&quot;script&quot;/&gt;
  &lt;deployment type=&quot;optioncommands&quot;
	      name=&quot;default&quot; 
	      description=&quot;The default optioncommands deployment.&quot; 
	      installRoot=&quot;&quot; basedir=&quot;&quot;&gt;
     &lt;!--
	** Associate the Setting
    --&gt;
    &lt;resources&gt;
      &lt;resource name=&quot;default&quot; type=&quot;PrintCommandMessage&quot; /&gt;
    &lt;/resources&gt;
    &lt;referrers&gt;
      &lt;resource name=&quot;localhost&quot; type=&quot;Node&quot; /&gt;
    &lt;/referrers&gt;
  &lt;/deployment&gt;
&lt;/project&gt;
&lt;/syntaxhighlight&gt;


Upload the resource definitions:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -p default -m ProjectBuilder -c load-resources -- -filename /tmp/objects.xml
&lt;/syntaxhighlight&gt;

After loading, Workbench will have have the definitions of both objects and the new association between them.

==Update the CTL resource==

Running &quot;Get-Properties&quot; will freshen the object data:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -p default -t optioncommands -r default -c Get-Properties
&lt;/syntaxhighlight&gt;

The associated Setting  object data will now be in the scope of all this object's commands.

Note:
* The default ControlTier CTL configuration is set up to automatically call the Get-Properties
command before the execution of each command.

==Run the command==

Run it without the &quot;-message&quot; option and you will see the associated Setting's value:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -t optioncommands -r default -c print 
Bon Jour
&lt;/syntaxhighlight&gt;

Of course, you can still specify your own message:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -t optioncommands -r default -c print -- -message Hola
Hola
&lt;/syntaxhighlight&gt;


&lt;noinclude&gt;{{Manual/navbox}}&lt;/noinclude&gt;

[[Category:Command Options]]</text>
    </revision>
  </page>
  <page>
    <title>Override an inherited command</title>
    <id>79</id>
    <revision>
      <id>10557</id>
      <timestamp>2009-12-12T18:44:30Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Object-orientation&lt;/categorytree&gt;

A subtype can override commands inherited from its supertype. To override a command, simply declare the same named command in the subtype's type.xml.

It's worth understanding what happens internally at the CTL dispatcher level when it comes to overriding. Roughly these are the steps taken by the dispatcher:

# Dispatcher receives a command request with the context params (either specified via the ctl shell tool or via Java API.
# The dispatcher resolves the module. If the command is scoped to an object, it looks up the object's type and looks or an installed module by that name. If it is not an object scoped command, then the module name will have been specified already.
# The dispatcher resolves the command. The dispatcher reads the module's metadata to understand how the command is declared. Overriden commands have extra metadata that tell the dispatcher what module contains it. If it is overriden, it will look in the implementing module for a command of that name.
# The dispatcher loads the command handler file. At this time two properties are declared in the execution context: 
#* &lt;code&gt;module.dir&lt;/code&gt; (the directory of the implementing module), 
#* &lt;code&gt;module.name&lt;/code&gt; (the name of the implementing module).
# The dispatcher executes the command handler.

==Create or choose type==

You can add commands to an existing type definition or you can create a new type.
To create a new type run:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ ctl -m ProjectBuilder -c create-type
&lt;/syntaxhighlight&gt;

The create-type command will generate a type.xml file where you can define your command.

==Edit type.xml==

Imagine for this example, there is a type hierarchy to represent animal greeting. A root type, &quot;animal&quot; defines a command, &quot;greet&quot;. 

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;type name=&quot;animal&quot; role=&quot;concrete&quot; 
        uniqueInstances=&quot;true&quot;&gt;

 &lt;description&gt;
   Provides animal greeting
 &lt;/description&gt;

 &lt;supertype&gt;
      &lt;typereference name=&quot;Managed-Entity&quot;/&gt;
 &lt;/supertype&gt;
 &lt;commands&gt;
  &lt;!-- 
   ** greet command 
    --&gt;
  &lt;command name=&quot;greet&quot; description=&quot;acknowledge a salute &quot;
           command-type=&quot;AntCommand&quot;&gt;
   &lt;implementation&gt;
     &lt;echo&gt;Greetings fellow animal&lt;/echo&gt;
   &lt;/implementation&gt;
  &lt;/command&gt;
 &lt;/commands&gt;
&lt;/type&gt;
&lt;/syntaxhighlight&gt;

You can see the &quot;animal&quot; type provides a default implementation for greet, printing a string to the console. All subtypes of &quot;animal&quot; inherit this command and can participate in workflows that use the command.

The example below shows how a sub type, &quot;barker&quot; overrides the supertype's &quot;greet&quot; definition by simply declaring the command in the subtype's type.xml:

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;type name=&quot;barker&quot; role=&quot;concrete&quot; 
        uniqueInstances=&quot;true&quot;&gt;

 &lt;description&gt;
   Inherits greeter salute and greet commands
   but overrides greet.
 &lt;/description&gt;

 &lt;supertype&gt;
      &lt;typereference name=&quot;greeter&quot;/&gt;
 &lt;/supertype&gt;
 &lt;commands&gt;
  &lt;!-- 
   ** override the greet command 
    --&gt;
  &lt;command name=&quot;greet&quot; description=&quot;acknowledge a salute &quot;
           command-type=&quot;BsfCommand&quot;&gt;
   &lt;script language=&quot;groovy&quot;&gt;&lt;![CDATA[
    println &quot;Bark!&quot;;
   ]]&gt;&lt;/script&gt;
  &lt;/command&gt;
 &lt;/commands&gt;
&lt;/type&gt;
&lt;/syntaxhighlight&gt;

Now instead of &quot;Greetings fellow animal&quot;, instances of the &quot;barker&quot; type, will respond to &quot;greet&quot; with &quot;Bark!&quot;.
	
CTL does not require that you preserve the same option set but it is considered best practice not to change semantics nor subtract any options.  This convention is based on the idea that you might have users of the parent type which are accustomed to the option set and the kind of arguments they take. If these options go missing or work differently, it might confuse the user of the subtype.

==Build the type==
Use the &quot;build-type&quot; command to generate the command files.
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ ctl -m ProjectBuilder -c build-type -- -type barker -upload -deploy
&lt;/syntaxhighlight&gt;

The -upload and -deploy flag cause the generated type to be uploaded to Workbench and then deployed to the local client.

== Run the command ==

The barker module is now deployed and the new command run:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ ctl -m barker -c greet
Bark!
&lt;/syntaxhighlight&gt;

&lt;noinclude&gt;{{Manual/navbox}}&lt;/noinclude&gt;

[[Category:Object-orientation]]</text>
    </revision>
  </page>
  <page>
    <title>Package</title>
    <id>1073</id>
    <redirect />
    <revision>
      <id>10089</id>
      <timestamp>2009-12-11T15:45:31Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[Category:Package]]</comment>
      <text xml:space="preserve">#REDIRECT [[:Category:Package]]</text>
    </revision>
  </page>
  <page>
    <title>Package Concepts</title>
    <id>1650</id>
    <redirect />
    <revision>
      <id>11165</id>
      <timestamp>2009-12-14T02:32:37Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>moved [[Package Concepts]] to [[Package design pattern]]</comment>
      <text xml:space="preserve">#REDIRECT [[Package design pattern]]</text>
    </revision>
  </page>
  <page>
    <title>Package Settings and Attributes</title>
    <id>743</id>
    <revision>
      <id>10331</id>
      <timestamp>2009-12-11T22:08:18Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">= Overview =

This document describes the predefined Setting subtypes and their declared Attribute names that are associated with the [[Core Type Guide#Package|Package]] type.

Complete reference documentation for these related types are here:

* [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Package.html#related_types Package Reference - related types]

= Settings =

{| border=&quot;1px solid #aaa&quot; cellpadding=&quot;5&quot; cellspacing=&quot;0&quot;
    ! Setting !! attribute !! purpose
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Package.html#type_PackageFiltersfile PackageFiltersfile] || ''package-filtersfile'' || The filtersfile used during finish
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Package.html#type_PackageFinishScript PackageFinishScript] || ''package-finish-script'' || The script used during finish
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Package.html#type_PackageIsInstalledExecutable PackageIsInstalledExecutable] || ''package-isinstalled-executable'' || The executable used during assertPackageIsInstalled
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Package.html#type_PackageIsInstalledScript PackageIsInstalledScript] || ''package-isinstalled-script'' || The script used during assertPackageIsInstalled
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Package.html#type_PackageIsUnInstalledExecutable PackageIsUnInstalledExecutable] || ''package-isuninstalled-executable'' || The executable used during assertPackageIsUnInstalled
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Package.html#type_PackageIsUnInstalledScript PackageIsUnInstalledScript] || ''package-isuninstalled-script'' || The script used during assertPackageIsUnInstalled
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Package.html#type_PackageIsVerifiedExecutable PackageIsVerifiedExecutable] || ''package-verified-executable'' || The executable used during assertPackageIsVerified
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Package.html#type_PackageIsVerifiedScript PackageIsVerifiedScript] || ''package-verified-script'' || The script used during assertPackageIsVerified
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Package.html#type_PackagePrepareScript PackagePrepareScript] || ''package-prepare-script'' || The script used during prepare
|}
{{Attributes Reference Footer}}

[[Category:Package]]</text>
    </revision>
  </page>
  <page>
    <title>Package Type Reference</title>
    <id>189</id>
    <revision>
      <id>13813</id>
      <timestamp>2010-11-10T15:13:42Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;object name&quot; to &quot;resource name&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Types&lt;/categorytree&gt;
=Description=
      &lt;p&gt;
	The Package data type represents an object of a Package base type.
      &lt;/p&gt;
    
=Attributes=
      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;name&lt;/td&gt;&lt;td&gt;The resource name.&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;type&lt;/td&gt;&lt;td&gt;The object type name.&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;maprefuri&lt;/td&gt;&lt;td&gt;The maprefUri&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;description&lt;/td&gt;&lt;td&gt;The object description.&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;includeExistingResources&lt;/td&gt;&lt;td&gt;Boolean flag specifying
	  whether to merge included entities with existing child
	  resources. &lt;/td&gt;&lt;td&gt;No, defaults to true.&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;filename&lt;/td&gt;&lt;td&gt;The package file name&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;version&lt;/td&gt;&lt;td&gt;The package version.&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;release&lt;/td&gt;&lt;td&gt;The package release&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;base&lt;/td&gt;&lt;td&gt;The package base name&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;arch&lt;/td&gt;&lt;td&gt;The platform architecture the package was
	  built for.&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;vendor&lt;/td&gt;&lt;td&gt;The organization that distributed the package&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;buildtime&lt;/td&gt;&lt;td&gt;The time the package was built.&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;

=Nested elements=
      &lt;p&gt;
	Uses one or more [[EntityReference Type Reference|entityreference]] elements
	to represent child resources.
      &lt;/p&gt;

=Examples=

     &lt;p&gt;
       Shows Package data type used in the [[ObjectUpdate Task Reference|object-update]] Ant
       task. In the example, an information from an RPM is being
       defined in the map.
      &lt;/p&gt;
      &lt;pre&gt;
	&amp;lt;basename property=&quot;rpm.base&quot; file=&quot;${rpm}&quot;/&amp;gt;
	&amp;lt;property name=&quot;maprefId&quot;
                  value=&quot;${context.depot}_${rpm.base}&quot;/&amp;gt;
	&amp;lt;property name=&quot;maprefUri&quot;
                  value=&quot;http://www.opendepo.org/DepOnt#${maprefId}&quot; /&amp;gt;

	&amp;lt;basename property=&quot;rpm.filename&quot; file=&quot;${rpm}&quot;/&amp;gt;

	&amp;lt;object-update depot=&quot;${context.depot}&quot;
                       resultproperty=&quot;result&quot;
                       comment=&quot;Updated package object from Register&quot;&amp;gt;
          &amp;lt;package maprefUri=&quot;${maprefUri}&quot;
                   name=&quot;${rpm.name}&quot;
                   type=&quot;Package&quot;
                   description=&quot;${rpm.descr}&quot;
                   filename=&quot;${rpm.filename}&quot;
                   version=&quot;${rpm.version}&quot;
                   release=&quot;${rpm.release}&quot;
                   base=&quot;${rpm.base}&quot;
                   arch=&quot;${rpm.arch}&quot;
                   vendor=&quot;${rpm.vendor}&quot;
                   buildtime=&quot;${rpm.buildtime}&quot;/&amp;gt;
	&amp;lt;/object-update&amp;gt;
	&amp;lt;condition property=&quot;wasUpdated&quot;&amp;gt;
          &amp;lt;equals arg1=&quot;0&quot; arg2=&quot;${result}&quot;/&amp;gt;
	&amp;lt;/condition&amp;gt;
	&amp;lt;fail unless=&quot;wasUpdated&quot;&amp;gt;Failed saving object.&amp;lt;/fail&amp;gt;


      &lt;/pre&gt;
&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Resource model Ant Types]]
[[Category:Package]]</text>
    </revision>
  </page>
  <page>
    <title>Package design pattern</title>
    <id>706</id>
    <revision>
      <id>13710</id>
      <timestamp>2010-11-10T15:07:27Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;Package object&quot; to &quot;Package resource&quot;</comment>
      <text xml:space="preserve">&lt;noinclude&gt;&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Package&lt;/categorytree&gt;&lt;/noinclude&gt;
= Intent =

* Define an object that encapsulates the lifecycle of a software package.
* Abstract the parameters common to packages of different formats.
* Abstract the methods to controlling packages of different formats.

= Problem =

We want to create and install packages of various formats but these packages have varying degrees of capability and require thier own tool sets to produce them. Lacking a standard way of creating, distributing and installing packages undermines the goal of a generic deployment procedure.

= Discussion =

Depending on their architecture and platform, applications are released using a wide variety of formats. The components of a Java based applications may be deployed as .jar, .war, and .ear files, while platform software may be deployed as .rpm, .deb, and .pkg files. Windows based applications have their own range of deployable artifacts and installers: .dll, .exe, .setup, .zip. Indeed, many software components are distributed as they are, devoid of any formalized packaged delivery.

When one considers the common details and requirements for software packages they can be organized into different categories:

* parameters: these are key attributes that describe the package.
* lifecycle: these are the set of procedures needed to create and manage the package.
* dependencies: these are the requirements needed both to build the package and the assumptions about the dependencies that will be met when the package is installed.

Due to this diversity of software delivery, one is often faced with using a myriad of tools and a recipe of procedures to prepare, deliver and install software components. This requires that the person undertaking the deployment must be well versed in the use of these tools and may also require that a developer maintain specialized locally developed code to produce the artifacts.

[[Image:package-discussion-problem.png|problem]]

Having to install packages of differing formats to support a multi-component application undermines the desirable goal to employ a single common mechanism. A preferred scenario of course, would be to have a homogeneous package format so that there could be a standard method to create and manage all packages.

Another approach would be to define a package concept that sufficiently describes the characteristics, both essential attributes and dependencies, as well as, encapsulate the lifecycle methods for the package.

This package abstraction offers the benefit of homogeneity by way of its standardized behavior and characteristics yet allows for the underlying differences of the heterogeneous formats and tools needed to support different application components. As new package formats are introduced, their differences can be accommodated by defining a new derived class.

[[Image:package-discussion-solution.png|solution]]

The package abstraction organizes the details of the package life cycle into several categories: configuration, procedures, context and content.

Package configuration encompasses essential installation, version, dependency, storage and deployment attributes. This configuration data is used to drive the package life cycle procedures.

Life cycle procedures fall into two general categories: creation and installation. Creation methods take as input package content and output a package artifact using the format specific to that package type. Additionally, the creation method can store the package artifact into a release repository for later distribution. Installation methods pull the package from the repository, extract it to the host and perform optional pre- and post-installation.

Occassionally, environment specific information is required by the life cycle methods (though one should strive to avoid this), therefore the package abstraction provides the means to override configuration parameters with needed values.

While the package abstraction can be implemented to contain the content of the package archive itself, it is preferable to decouple the content file itself from the code that creates and installs it. With this arrangement the package archive file (e.g, the .rpm file) resides in a repository, while an instance of a package type, provides the configuration and environment context and procedures to install the package.

= Structure =

There are two primary collaborations of the package abstraction one for building the package and the other for deploying the package.

The Builder uses the Package type to construct, register and store the package. The Deployment object uses the Package to deliver and install the package.

[[Image:package-structure.png|structure]]

The essential package properties are defined here:

&lt;table&gt;
&lt;caption&gt;Properties&lt;/caption&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;package-arch&lt;/td&gt;&lt;td&gt;Host architecture type.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;package-base&lt;/td&gt;&lt;td&gt;The package base name. This often is the name of the package
minus the file extension.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;package-buildtime&lt;/td&gt;&lt;td&gt;Timestamp specifying when the content of the package was built.
&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;package-install-rank&lt;/td&gt;&lt;td&gt;A value representing installation order.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;package-release&lt;/td&gt;&lt;td&gt;The version release identifier.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;package-restart&lt;/td&gt;&lt;td&gt;Boolean flag specifying that a service restart
is required after installation.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;package-release-tag&lt;/td&gt;&lt;td&gt;A logical release identification tag.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;package-filetype&lt;/td&gt;&lt;td&gt;Package format type
&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;package-install-root&lt;/td&gt;&lt;td&gt;Directory path where package should be extracted.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;package-vendor&lt;/td&gt;&lt;td&gt;Organization responsible for creating the package
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;package-repo-url&lt;/td&gt;&lt;td&gt;URL used to access the package artifact from the repository.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;package-version&lt;/td&gt;&lt;td&gt;Package version
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;package-filename&lt;/td&gt;&lt;td&gt;The name of the package file.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

= Example =
The Package type defines an object that provides methods to create and install a package and maintain key properties that describe the package. Packaging and deploying the Apache httpd server is a good example to demonstrate the use of the Package type.

The graphic below describes the two phases of the build and installation cycle for a package. In the build phase, a Builder object takes source files and a build configuration and compiles and uses the Package's &lt;code&gt;create, upload&lt;/code&gt; and {{Core Type Command Reference|Package|register}} commands to store it in the repo. In the installation phase, a Deployment object uses the Package's {{Core Type Command Reference|Package|package-install}} command which implicitly uses the &lt;code&gt;prepare, get, extract&lt;/code&gt; and {{Core Type Command Reference|Package|finish}} commands to acquire and install the package, providing optional environment context during the process.

[[Image:package-example.png|example]]

= Check List =
== Building ==

# Choose the package format type required. This may be from existing package types like: zip, jar, rpm, etc.). If a new format is desired then derive a new subtype from Package and implement the necessary installation lifecycle methods.
# Identify the set of files that will be archived using the above package format. Then run the {{Core Type Command Reference|Package|create}} command specifying necessary parameters.
# Store the package artifact in the repository and register it as a resource that can be used as Deployment dependency.

== Installation ==

# Identify Deployment types that require this package type. Possibly, modify the dependency constraints for the Deployment type to allow the new dependency type.
# Choose the Deployment object and Package resource and assign the dependency.
# Install the package by running the [[Core Type Guide#Deployment|Deployment]] object's {{Core Type Command Reference|Deployment|Packages-Install}}  command.

= Rules of Thumb =

Since package formats and the tools that produce and manage them are not equal, one must establish a middle ground.

= Related Types =

* [[Builder Concepts]]
* [[Updater Concepts]]
* [[Deployment Concepts]]

Supertype:

* [[Managed-Entity Concepts]]

{{Core Type Guide Linkback}}
* {{Core Type User Reference|Package}}

[[Category:Package]]</text>
    </revision>
  </page>
  <page>
    <title>ParallelAddMacro Task Reference</title>
    <id>145</id>
    <revision>
      <id>14380</id>
      <timestamp>2010-11-11T17:28:04Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Tasks&lt;/categorytree&gt;
=Description=

      &lt;p&gt;
         Schedules a macro for execution within the referred parallel container created by [[ParallelCreate_Task_Reference|parallel-create]].
      &lt;/p&gt;

=Parameters=

      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;refid&lt;/td&gt;&lt;td&gt;The name of the referred parallel container&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;macro&lt;/td&gt;&lt;td&gt;The name of the macro to call&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;

=Parameters specified as nested elements=
      &lt;p&gt;&lt;strong&gt;propertiesquery&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
        A [[PropertiesQuery Type Reference|propertiesquery]] element.
      &lt;/p&gt;

      &lt;p&gt;&lt;strong&gt;input&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
        A [[:Category:ApplyMacro Ant Type]] element.
      &lt;/p&gt;

=Examples=

      &lt;p&gt;
	Schedule instances of the sync-node macro based on nested propertiesquery 
      &lt;/p&gt;
      &lt;pre&gt;
        &amp;lt;macrodef name=&quot;sync-node&quot;&amp;gt; 
           &amp;lt;attribute name=&quot;node&quot;/&amp;gt;
           &amp;lt;sequential&amp;gt;
              &amp;lt;exec executable=&quot;scp&quot;
                    resultproperty=&quot;result.@{node}&quot;
                    outputproperty=&quot;stdout.@{node}&quot;
                    errorproperty=&quot;stderr.@{node}&quot;
                    failonerror=&quot;false&quot;&amp;gt;
              &amp;lt;/exec&amp;gt; 
           &amp;lt;/sequential&amp;gt;
        &amp;lt;/macrodef&amp;gt; 

	&amp;lt;parallel-addmacro refid=&quot;parallel-sync&quot;
		            macro=&quot;sync-node&quot;&amp;gt;
           &amp;lt;propertiesquery refid=&quot;nodesquery&quot;/&amp;gt;
	&amp;lt;/parallel-addmacro&amp;gt;
      &lt;/pre&gt;

&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Utility Ant Tasks]]</text>
    </revision>
  </page>
  <page>
    <title>ParallelAdd Task Reference</title>
    <id>144</id>
    <revision>
      <id>14379</id>
      <timestamp>2010-11-11T17:27:51Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Tasks&lt;/categorytree&gt;
=Description=
      &lt;p&gt;
         Schedules a task for execution within the referred parallel container created by [[ParallelCreate_Task_Reference|ParallelCreate]].
      &lt;/p&gt;

=Parameters=

      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;refid&lt;/td&gt;&lt;td&gt;The name of the referred parallel container&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;
 
=Parameters specified as nested elements=

      &lt;p&gt;any Ant task&lt;/p&gt;

=Examples=

      &lt;p&gt;
	Schedule the nested Update command to the referred parallel container parallel-update
      &lt;/p&gt;
&lt;syntaxhighlight&gt;
&lt;parallel-add id=&quot;parallel-update&quot;
	      failonany=&quot;false&quot;
	      threadCount=&quot;3&quot;&gt;
  &lt;exec executable=&quot;/bin/sh&quot;
	failonerror=&quot;false&quot;
	outputproperty=&quot;update.out&quot;
	errorproperty=&quot;update.err&quot;
	resultproperty=&quot;update.res&quot;&gt;
    &lt;arg line=&quot;update.sh&quot;/&gt;
  &lt;/exec&gt; 
&lt;/parallel-add&gt;
&lt;/syntaxhighlight &gt;

&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Utility Ant Tasks]]</text>
    </revision>
  </page>
  <page>
    <title>ParallelCreate Task Reference</title>
    <id>146</id>
    <revision>
      <id>14381</id>
      <timestamp>2010-11-11T17:28:18Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Tasks&lt;/categorytree&gt;
Creates an instance of the Ant Parallel task. Tasks can be added with [[ParallelAdd_Task_Reference|parallel-add]] and calls to macros with [[ParallelAddMacro_Task_Reference|parallel-addmacro]].

=Parameters=

      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;id&lt;/td&gt;&lt;td&gt;The name of the parallel container&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;threadCount&lt;/td&gt;&lt;td&gt;Maximum numbers of thread to use.&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;threadsPerProcessor&lt;/td&gt;&lt;td&gt;Maximum number of threads to use per available processor (Java 1.4+)&lt;/td&gt;&lt;td&gt;No, defers to threadCount&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;timeout&lt;/td&gt;&lt;td&gt;Number of milliseconds before execution is terminated	&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;failonany&lt;/td&gt;&lt;td&gt;If any of the nested tasks fails, execution of the task completes at that point without waiting for any other tasks to complete.	&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;

=Parameters specified as nested elements=

      &lt;p&gt;NONE&lt;/p&gt;
   

=Examples=
      &lt;p&gt;
	Create a refererrable parallel container with maximum of three concurrent threads and will continue to execute
	if any of them fail.
      &lt;/p&gt;
      &lt;pre&gt;
	&amp;lt;parallel-create id=&quot;parallel-update&quot;
		            failonany=&quot;false&quot;
		            threadCount=&quot;3&quot;/&amp;gt;
      &lt;/pre&gt;

&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Utility Ant Tasks]]</text>
    </revision>
  </page>
  <page>
    <title>ParallelExecute Task Reference</title>
    <id>147</id>
    <revision>
      <id>14382</id>
      <timestamp>2010-11-11T17:28:31Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Tasks&lt;/categorytree&gt;
=Description=
      &lt;p&gt;
	Executes threads associated with the referrred parallel container created [[ParallelCreate_Task_Reference|parallel-create]].
      &lt;/p&gt;
   
=Parameters=

      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;refid&lt;/td&gt;&lt;td&gt;The the referred parallel container&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;
   
=Parameters specified as nested elements=

      &lt;p&gt;&lt;strong&gt;NONE&lt;/strong&gt;&lt;/p&gt;
    
=Examples=

      &lt;p&gt;
	Create a refererrable parallel container with maximum of three concurrent threads and will continue to execute
	if any of them fail.
      &lt;/p&gt;
      &lt;pre&gt;
	&amp;lt;parallel-execute refid=&quot;parallel-update&quot;/&amp;gt;
      &lt;/pre&gt;

&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Utility Ant Tasks]]</text>
    </revision>
  </page>
  <page>
    <title>Patching</title>
    <id>1964</id>
    <redirect />
    <revision>
      <id>13363</id>
      <timestamp>2010-11-01T18:31:29Z</timestamp>
      <contributor>
        <username>Anthony</username>
        <id>42</id>
      </contributor>
      <comment>moved [[Patching]] to [[Patching Module Libraries]]</comment>
      <text xml:space="preserve">#REDIRECT [[Patching Module Libraries]]</text>
    </revision>
  </page>
  <page>
    <title>Patching Module Libraries</title>
    <id>1963</id>
    <revision>
      <id>14270</id>
      <timestamp>2010-11-10T21:58:49Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">These are the steps needed to patch a ControlTier server installation with the latest version of the core and Elements modules between releases. 

{{caution|These notes are written for ControlTier 3.4. The process is slightly different for 3.6}}

When a new project is created it is automatically populated with the set of modules contained in the &quot;controltier-seed.jar&quot; which is stored on the web DAV (typically at &quot;http://localhost:8080/jackrabbit/repository/controltier/projects/seeds/controltier-seed.jar). This single module (or &quot;seed&quot;) library contains both the core and Elements modules included with the distribution.

The following procedure describes how to patch individual modules into an existing Workbench project as well as how to prepare a stage a new library Jar so that new projects are seeded with the latest modules.

* Create a directory to work in. e.g:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[ctier@centos55 tmp]$ mkdir ~/tmp/controltier-seed
&lt;/syntaxhighlight&gt;

* Export the latest (or required version) of the ControlTier 3.4 support branch's core and Elements modules into a common directory:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[ctier@centos55 controltier-seed]$ svn export --force https://moduleforge.svn.sourceforge.net/svnroot/moduleforge/controltier/branches/controltier-3-4-support/core/modules controltier-seed/modules
A    controltier-seed/modules
.
.
.
Exported revision 2163.
[ctier@centos55 controltier-seed]$ svn export --force https://moduleforge.svn.sourceforge.net/svnroot/moduleforge/controltier/branches/controltier-3-4-support/elements/modules controltier-seed/modules
A    controltier-seed/modules
.
.
.
Exported revision 2163.
[ctier@centos55 tmp]$ ls controltier-seed/modules
ActiveMQ             ClientInstaller          ElementsProjectBuilder  JavaZip          MuleUserJar        PuppetClient         Tomcat
ActiveMQZip          ConfigZip                file                    JBossAntBuilder  MuleZip            PuppetMaster         TomcatAntBuilder
AntBuilder           ContentZip               fileutil                JBossEar         MysqlRdb           PxeLinuxServer       TomcatContext
AntZip               ContinuousIntegration    FireDaemonService       JBossServer      MysqlSchema        Rdb                  TomcatServer
Apache               coretests                HsqldbRdb               JBossZip         netutil            RdbSchema            TomcatServerService
ApacheSite           CruiseControl            HsqldbRdbDmp            JtdsJar          Network            rpm                  TomcatSite
ApacheSystemService  CruiseControlService     HsqldbRdbExportBuilder  KickstartServer  NetworkInterface   RpmBuilder           TomcatZip
BatBuilder           CruiseControlZip         HsqldbRdbSchema         LinuxIso         Node               Service              Updater
bin                  CTierInstallerZip        HsqldbZip               LinuxNode        OpenLDAP           shellutil            VMwareESXiIso
BitTorrentBuilder    davutil                  Hudson                  logicutil        Package            Site                 VMwareESXiNode
BitTorrentClient     Deployment               HudsonPlugin            MakeBuilder      PackedWar          SolidcoreController  war
BitTorrentFile       DhcpServer               HudsonWar               Managed-Entity   pkg                SolidcoreHost        WarUpdater
BitTorrentTracker    DhcpSubNetwork           ImageMagickTgz          MavenBuilder     PlatformJar        Squid                WindowsService
Builder              DnsServer                jar                     MavenZip         PlatformZip        SubNetwork           YumRepository
buildextension.xml   DnsZone                  JavaBin                 Mediator         PostgresRdb        SystemService        YumRpm
buildmodule.xml      DukesBankProjectBuilder  JavaServiceWrapper      modelutil        PostgresRdbSchema  textutil             zip
buildseed.xml        ear                      JavaServiceWrapperZip   Mule             ProjectBuilder     tgz                  ZipBuilder
&lt;/syntaxhighlight&gt;

* With this set of source setup, you can now build and upload individual modules to patch an existing project as follows. e.g::

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[ctier@centos55 controltier-seed]$ ctl -p build -m ProjectBuilder -c build-type -- -type PxeLinuxServer -upload
Base directory where module source files reside [/dnbusr1/dnbiadm/tmp/controltier-seed]

Target directory where build files are generated [/dnbusr1/dnbiadm/tmp/target]

Created dir: /dnbusr1/dnbiadm/tmp/target/modules
Building type using the buildmodule.xml via classloader
converting type.xml for module: PxeLinuxServer
generating handlers...
packaging module: PxeLinuxServer
Copying 1 file to /dnbusr1/dnbiadm/tmp/controltier-seed/modules/PxeLinuxServer
Copying 1 file to /dnbusr1/dnbiadm/tmp/controltier-seed/modules/PxeLinuxServer
Deleting: /dnbusr1/dnbiadm/tmp/controltier-seed/modules/PxeLinuxServer/module.properties.temp
Building jar: /dnbusr1/dnbiadm/tmp/target/modules/PxeLinuxServer-1.jar
Uploading built module to server ...
processing files in directory: /dnbusr1/dnbiadm/tmp/target/modules
scanning for files matching pattern: (PxeLinuxServer)-([0-9]+)\.jar
Uploading jar: /dnbusr1/dnbiadm/tmp/target/modules/PxeLinuxServer-1.jar to server: 'centos55' ...
&lt;/syntaxhighlight&gt;

* You can also build a new seed Jar as follows:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[ctier@centos55 controltier-seed]$ ctl -p build -m ProjectBuilder -c build-library -- -name controltier
Base directory where module source files reside [/dnbusr1/dnbiadm/tmp/controltier-seed]

Target directory where build files are generated [/dnbusr1/dnbiadm/tmp/target]

Building library from modules in opts.basedir: /dnbusr1/dnbiadm/tmp/controltier-seed/modules
setting property seed.build.name to controltier-seed
processing modules in directory: /dnbusr1/dnbiadm/tmp/controltier-seed/modules
.
.
.
 seed.build.name=controltier-seed
 generating controltier-seed.jar
Building jar: /dnbusr1/dnbiadm/tmp/target/controltier-seed.jar
&lt;/syntaxhighlight&gt;

* Patch the seed Jar into your installation as follows:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[ctier@centos55 controltier-seed]$ ctl -p build -m davutil -c put -- -file ~/tmp/target/controltier-seed.jar -overwrite -url dav://seeds/controltier-seed.jarUploading to: http://centos55:8080/jackrabbit/repository/controltier/projects/seeds/controltier-seed.jar
Uploading: controltier-seed.jar
Puted 1 file to http://centos55:8080/jackrabbit/repository/controltier/projects/seeds/controltier-seed.jar
&lt;/syntaxhighlight&gt;
{{Guide/navbox}}
{{Installation/navbox|state=uncollapsed}}
{{Manual/navbox}}
{{Reference/navbox}}

[[Category:Installation]]</text>
    </revision>
  </page>
  <page>
    <title>Perform-batch-request Task Reference</title>
    <id>1858</id>
    <revision>
      <id>12995</id>
      <timestamp>2010-07-08T22:42:12Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Tasks&lt;/categorytree&gt;
=Description=

Performs a batch request by sending it to the server. The batch operations and their parameters can either be embedded elements, or the request can be defined earlier via the [[create-batch-request Task Reference|create-batch-request]] task and the refId specified in the &quot;requestId&quot; attribute.

=Parameters=

      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;resultProperty&lt;/td&gt;&lt;td&gt;property name to set result value in
&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;requestId&lt;/td&gt;&lt;td&gt;Identifier of a previously defined request to perform &lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;

=Parameters specified as nested elements=

Depending on the operation used (defined by &quot;name&quot; attribute), different embedded types are appropriate.

;[[batch-operation Type Reference]]
: multiple batch-operation types can be embedded to define a set of batch operations to perform.

=Examples=

Perform a previously defined batch request and echo the result:

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;perform-batch-request resultProperty=&quot;result&quot; requestId=&quot;${my.request.id}&quot;/&gt;
&lt;echo&gt;Result: ${result}&lt;/echo&gt;
&lt;/syntaxhighlight&gt;
    
Perform a request defined with embedded batch operations:

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;perform-batch-request resultProperty=&quot;result&quot; &gt;
    &lt;batch-operation name=&quot;addResources&quot;&gt;
        &lt;propertiesparameter&gt;
            &lt;prop name=&quot;maprefUri&quot; value=&quot;${parent.maprefUri}&quot;/&gt;
            &lt;prop name=&quot;resourceUri.0&quot; value=&quot;${child0.maprefUri}&quot;/&gt;
            &lt;prop name=&quot;resourceUri.1&quot; value=&quot;${child1.maprefUri}&quot;/&gt;
        &lt;/propertiesparameter&gt;
    &lt;/batch-operation&gt;
    &lt;batch-operation name=&quot;removeResources&quot;&gt;
        &lt;propertiesparameter&gt;
            &lt;prop name=&quot;maprefUri&quot; value=&quot;${child0.maprefUri}&quot;/&gt;
            &lt;prop name=&quot;resourceUri.0&quot; value=&quot;${grandchild0.maprefUri}&quot;/&gt;
        &lt;/propertiesparameter&gt;
    &lt;/batch-operation&gt;
&lt;/perform-batch-request&gt;
&lt;/syntaxhighlight&gt;

&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Resource model Ant Tasks]]</text>
    </revision>
  </page>
  <page>
    <title>PioneerCycling Build and Provisioning JBoss applications</title>
    <id>816</id>
    <revision>
      <id>14154</id>
      <timestamp>2010-11-10T16:00:23Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;ctl-depot&quot; to &quot;ctl-project&quot;</comment>
      <text xml:space="preserve">[[Image:pioneerCycling.gif|256px]]  This is part of the PioneerCycling portion of the  [[ControlTier_and_ATG | ControlTier/ATG Demo]]

==Overview==

In this demo we are going to make a minor source code change to PioneerCycling and then run an end-to-end automated process that begins with source code checkout and continues all the way to the running PioneerCycling site. This example shows several collaborating ControlTier/ATG types that work together to unify the build and deploy cycle. 

The examples in this demo will introduce the &quot;Updater&quot; type, one of the ControlTier standard types that coordinates a unified build and deployment process. During the demo we will run workflow commands that support this end-to-end process.

==Prerequisites==
This demo assumes you have completed:
* [[Building PioneerCycling Project]]
* [[PioneerCycling Provisioning JBoss instances]]
* [[PioneerCycling Checkout and Build]]

==Preparation==

Before getting started confirm all the necessary objects are deployed to CTL.

Run the [[ctl-project]] command:
&lt;pre&gt;
[demo@centos45 pioneerCycling]$ ctl-project -p PioneerCycling -a install
&quot;Install&quot; command running for resource: (PioneerCyclingProjectBuilder) pioneerCycling
&quot;Install&quot; command running for resource: (AtgSolidRdb) staging
&quot;Install&quot; command running for resource: (Updater) development
&quot;Install&quot; command running for resource: (AtgSite) development
&quot;Install&quot; command running for resource: (AtgSite) staging
&quot;Install&quot; command running for resource: (AtgJBossServer) development
&quot;Install&quot; command running for resource: (AtgSolidRdbSchema) development
&quot;Install&quot; command running for resource: (CruiseControl) atg
.
.
.
&lt;/pre&gt;

==Make a change to the PioneerCycling source ==
For illustrative purposes, we are going to make a minor change to the entry jsp page seen  after you login to PioneerCycling. 

[[Image:PioneerCyclingEntryPage.gif]]

we will change the following text:

&quot;Copyright Art Technology Group 1999-2006&quot;

to

&quot;Copyright Art Technology Group 1999-2009&quot;

and redeploy the application.  Using your favorite editor:

&lt;pre&gt;
[demo@centos45 en]$ vi $CTIER_ROOT/demo/atg/build/ATG2006.3/PioneerCyclingJSP/j2ee-apps/pioneer/web-app/en/index.jsp 
&lt;/pre&gt;

and change:

&lt;pre&gt;
                        ATG Commerce Solution Set. Copyright Art Technology Group 1999-2006.
&lt;/pre&gt;

to

&lt;pre&gt;
                        ATG Commerce Solution Set. Copyright Art Technology Group 1999-2009.
&lt;/pre&gt;

In a live environment we would be committing this change, but to keep the demo simple we are just making the change on the local machine. The builder used in these PioneerCycling demos is configured to build from the local source directory and the scmCheckout command will not overwrite your changes with files from the remote subversion repository.

==Review the process flow and current package list==

With the preparation steps out of the way you are now ready to demonstrate the full build and deploy cycle. The &quot;BuildAndUpdate&quot; command is a workflow that carries out each of the steps for the end to end process. Workbench shows this in its graphical &quot;Process Flow&quot; view. You can see can see this visualization for the &quot;development&quot; Updater below:

[[Image:PioneerCyclingUpdaterBuildAndUpdatePView.gif]]

The process flow view shows that BuildAndUpdate actually is composed of two commands:
* Build: This interfaces all the Builders (in this case just AtgJBossModuleBuilder) and invokes their &quot;Build&quot; command.
* Update: This too is a workflow that calls:
** Change-Dependencies: This reconfigures all the Services to use the artifacts from the Build step
** Deploy: This invokes the &quot;Deploy&quot; command across the Site objects

If you look in the Package Manager tool in Workbench, you'll see .ear packages from the previous demos (and see that PioneerCycling-20090429.ear is currently deployed):

[[Image:PioneerCyclingPackageManagerDeployed.gif]]

You can also look at the dependency tree in the site list to see that the PioneerCycling-20090429.ear package is the one currently being used:


[[Image:PioneerCyclingSiteVerifyPackageDependency.gif]]

==Run the BuildAndUpdate command==

Now run the BuildAndUpdate command specifying a custom buildstamp (for the purpose of the demo we're arbitrarily calling this build &quot;2009123-demo&quot;)

&lt;pre&gt;
ctl -p PioneerCycling -t Updater -r development -c BuildAndUpdate  -- -buildstamp 20090429
&lt;/pre&gt;
You will see output like so:
&lt;pre&gt;
.
.
.
[demo@centos45.local PioneerCycling.AtgJBossModuleBuilder.pioneerCycling runBuildScript][INFO]      [exec] Copying  src: /home/demo/ctier/demo/atg/build/ATG2006.3/DCS/config/config.jar
[demo@centos45.local PioneerCycling.AtgJBossModuleBuilder.pioneerCycling runBuildScript][INFO]      [exec]         dest: /tmp/PioneerCycling-20090429.ear42474stage/atg_bootstrap.war/WEB-INF/ATG-INF/DCS/config/config.jar
[demo@centos45.local PioneerCycling.AtgJBossModuleBuilder.pioneerCycling runBuildScript][INFO]      [exec] Copying  src: /home/demo/ctier/demo/atg/build/ATG2006.3/DCS/liveconfig/atg/commerce/inventory/InventoryCache.properties
[demo@centos45.local PioneerCycling.AtgJBossModuleBuilder.pioneerCycling runBuildScript][INFO]      [exec]         dest: /tmp/PioneerCycling-20090429.ear42474stage/atg_bootstrap.war/WEB-INF/ATG-INF/DCS/liveconfig/atg/commerce/inventory/InventoryCache.properties
[demo@centos45.local PioneerCycling.AtgJBossModuleBuilder.pioneerCycling runBuildScript][INFO]      [exec] Copying  src: /home/demo/ctier/demo/atg/build/ATG2006.3/DCS/liveconfig/atg/commerce/pricing/priceLists/PriceCache.properties
[demo@centos45.local PioneerCycling.AtgJBossModuleBuilder.pioneerCycling runBuildScript][INFO]      [exec]         dest: /tmp/PioneerCycling-20090429.ear42474stage/atg_bootstrap.war/WEB-INF/ATG-INF/DCS/liveconfig/atg/commerce/pricing/priceLists/PriceCache.properties
[demo@centos45.local PioneerCycling.AtgJBossModuleBuilder.pioneerCycling runBuildScript][INFO]      [exec] Copying  src: /home/demo/ctier/demo/atg/build/ATG2006.3/DCS/liveconfig/atg/commerce/pricing/PMDLCache.properties
[demo@centos45.local PioneerCycling.AtgJBossModuleBuilder.pioneerCycling runBuildScript][INFO]      [exec]         dest: /tmp/PioneerCycling-20090429.ear42474stage/atg_bootstrap.war/WEB-INF/ATG-INF/DCS/liveconfig/atg/commerce/pricing/PMDLCache.properties
[demo@centos45.local PioneerCycling.AtgJBossModuleBuilder.pioneerCycling runBuildScript][INFO]      [exec] Copying  src: /home/demo/ctier/demo/atg/build/ATG2006.3/DCS/liveconfig/README.txt
[demo@centos45.local PioneerCycling.AtgJBossModuleBuilder.pioneerCycling runBuildScript][INFO]      [exec]         dest: /tmp/PioneerCycling-20090429.ear42474stage/atg_bootstrap.war/WEB-INF/ATG-INF/DCS/liveconfig/README.txt
[demo@centos45.local PioneerCycling.AtgJBossModuleBuilder.pioneerCycling runBuildScript][INFO]      [exec] Copying  src: /home/demo/ctier/demo/atg/build/ATG2006.3/DCS/help/dcs_ui_help.jar
[demo@centos45.local PioneerCycling.AtgJBossModuleBuilder.pioneerCycling runBuildScript][INFO]      [exec]         dest: /tmp/PioneerCycling-20090429.ear42474stage/atg_bootstrap.war/WEB-INF/ATG-INF/DCS/help/dcs_ui_help.jar
[demo@centos45.local PioneerCycling.AtgJBossModuleBuilder.pioneerCycling runBuildScript][INFO]      [exec] Copying  src: /home/demo/ctier/demo/atg/build/ATG2006.3/DCS/lib/resources.jar
[demo@centos45.local PioneerCycling.AtgJBossModuleBuilder.pioneerCycling runBuildScript][INFO]      [exec]         dest: /tmp/PioneerCycling-20090429.ear42474stage/atg_bootstrap.war/WEB-INF/ATG-INF/DCS/lib/resources.jar
[demo@centos45.local PioneerCycling.AtgJBossModuleBuilder.pioneerCycling runBuildScript][INFO]      [exec] Copying  src: /home/demo/ctier/demo/atg/build/ATG2006.3/DCS/admin/atg/commerce/admin/en/catalog/CustomMigrationStatus.jhtml
[demo@centos45.local PioneerCycling.AtgJBossModuleBuilder.pioneerCycling runBuildScript][INFO]      [exec]         dest: /tmp/PioneerCycling-20090429.ear42474stage/atg_bootstrap.war/WEB-INF/ATG-INF/DCS/admin/atg/commerce/admin/en/catalog/CustomMigrationStatus.jhtml
[demo@centos45.local PioneerCycling.AtgJBossModuleBuilder.pioneerCycling runBuildScript][INFO]      [exec] Copying  src: /home/demo/ctier/demo/atg/build/ATG2006.3/DCS/admin/atg/commerce/admin/en/catalog/SwitchFinished.jhtml
[demo@centos45.local PioneerCycling.AtgJBossModuleBuilder.pioneerCycling runBuildScript][INFO]      [exec]         dest: /tmp/PioneerCycling-20090429.ear42474stage/atg_bootstrap.war/WEB-INF/ATG-INF/DCS/admin/atg/commerce/admin/en/catalog/SwitchFinished.jhtml
[demo@centos45.local PioneerCycling.AtgJBossModuleBuilder.pioneerCycling runBuildScript][INFO]      [exec] Copying  src: /home/demo/ctier/demo/atg/build/ATG2006.3/DCS/admin/atg/commerce/admin/en/catalog/PrepareToSwitchProductCatalog.jhtml
[demo@centos45.local PioneerCycling.AtgJBossModuleBuilder.pioneerCycling runBuildScript][INFO]      [exec]         dest: /tmp/PioneerCycling-20090429.ear42474stage/atg_bootstrap.war/WEB-INF/ATG-INF/DCS/admin/atg/commerce/admin/en/catalog/PrepareToSwitchProductCatalog.jhtml
.
.
.
[demo@centos45.local PioneerCycling.AtgJBossModuleBuilder.pioneerCycling runBuildScript][INFO]      [exec] Packing earfile /tmp/PioneerCycling-20090429.ear42474stage to file /home/demo/ctier/demo/atg/build/cruisecontrol-bin-2.7.1/projects/pioneerCycling/PioneerCycling-20090429.ear.
[demo@centos45.local PioneerCycling.AtgJBossModuleBuilder.pioneerCycling runBuildScript][INFO]      [exec] Assembly took 53.79 seconds.
[demo@centos45.local PioneerCycling.AtgJBossModuleBuilder.pioneerCycling runBuildScript][INFO] 
[demo@centos45.local PioneerCycling.AtgJBossModuleBuilder.pioneerCycling runBuildScript][INFO] all:
[demo@centos45.local PioneerCycling.AtgJBossModuleBuilder.pioneerCycling runBuildScript][INFO] 
[demo@centos45.local PioneerCycling.AtgJBossModuleBuilder.pioneerCycling runBuildScript][INFO] BUILD SUCCESSFUL
[demo@centos45.local PioneerCycling.AtgJBossModuleBuilder.pioneerCycling runBuildScript][INFO] Total time: 1 minute 5 seconds
[demo@centos45.local PioneerCycling.AtgJBossModuleBuilder.pioneerCycling runBuildScript][INFO] [command.timer.AtgJBossModuleBuilder.runBuildScript: 1:13.603 sec]

[demo@centos45.local PioneerCycling.AtgJBossModuleBuilder.pioneerCycling Build][INFO] end workflow command (3/4) -&gt; &quot;runBuildScript -buildstamp 20090429&quot;

[demo@centos45.local PioneerCycling.AtgJBossModuleBuilder.pioneerCycling Build][INFO] begin workflow command (4/4) -&gt; &quot;repoImport -buildstamp 20090429&quot; ...

[demo@centos45.local PioneerCycling.AtgJBossModuleBuilder.pioneerCycling repoImport][INFO] Created dir: /home/demo/ctier/ctl/projects/PioneerCycling/resources/AtgJBossModuleBuilder/pioneerCycling/tmp/Builder-repoImport-20090421020259

[demo@centos45.local PioneerCycling.AtgJBossModuleBuilder.pioneerCycling repoImport][INFO] Condition: isProcessableWithoutExistingPropfile result: true

[demo@centos45.local PioneerCycling.AtgJBossModuleBuilder.pioneerCycling repoImport][INFO] opts.propfile set to: autogenerated-builder.properties

[demo@centos45.local PioneerCycling.AtgJBossModuleBuilder.pioneerCycling repoImport][INFO] Creating new property file: /home/demo/ctier/ctl/projects/PioneerCycling/resources/AtgJBossModuleBuilder/pioneerCycling/tmp/Builder-repoImport-20090421020259/import-count.properties
.
.
.

[demo@centos45.local PioneerCycling.Package upload][INFO] Uploading: PioneerCycling-20090429.ear

[demo@centos45.local PioneerCycling.Package upload][INFO] Puted 1 file to http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/pkgs/PioneerCycling/AtgEar/ears/PioneerCycling-20090429.ear
[demo@centos45.local PioneerCycling.AtgJBossModuleBuilder.pioneerCycling repoImport][INFO] Creating new property file: /home/demo/ctier/ctl/projects/PioneerCycling/resources/AtgJBossModuleBuilder/pioneerCycling/tmp/Builder-repoImport-20090421020259/import-list.properties
[demo@centos45.local PioneerCycling.AtgJBossModuleBuilder.pioneerCycling repoImport][INFO] Deleting: /home/demo/ctier/ctl/projects/PioneerCycling/modules/Builder/commands/entity365664803.properties

[demo@centos45.local PioneerCycling.AtgJBossModuleBuilder.pioneerCycling repoImport][INFO] Updating property file: /home/demo/ctier/ctl/projects/PioneerCycling/resources/AtgJBossModuleBuilder/pioneerCycling/tmp/Builder-repoImport-20090421020259/import-count.properties

[demo@centos45.local PioneerCycling.AtgJBossModuleBuilder.pioneerCycling repoImport][INFO] Current count: 1

[demo@centos45.local PioneerCycling.AtgJBossModuleBuilder.pioneerCycling repoImport][INFO] Batch request performed successfully.

[demo@centos45.local PioneerCycling.AtgJBossModuleBuilder.pioneerCycling repoImport][INFO] Current count: 1

[demo@centos45.local PioneerCycling.AtgJBossModuleBuilder.pioneerCycling repoImport][INFO] [command.timer.Builder.repoImport: 57.702 sec]

[demo@centos45.local PioneerCycling.AtgJBossModuleBuilder.pioneerCycling Build][INFO] end workflow command (4/4) -&gt; &quot;repoImport -buildstamp 20090429&quot;

[demo@centos45.local PioneerCycling.AtgJBossModuleBuilder.pioneerCycling Build][INFO] [command.timer: 2:47.670 sec]

[demo@centos45.local PioneerCycling.AtgJBossModuleBuilder.pioneerCycling Build][WARN] Completed: execution time: 2:47.670 sec

end workflow command (1/2) -&gt; &quot;Build -buildstamp 20090429&quot;
begin workflow command (2/2) -&gt; &quot;Update -buildstamp 20090429&quot; ...
Start: &quot;Changes package dependencies and runs the coordinated deployment cycle across the configured Sites.&quot; commands: Change-Dependencies,Deploy
begin workflow command (1/2) -&gt; &quot;Change-Dependencies -buildstamp 20090429 -resourcename .* -resourcetype [^\.]*&quot; ...
Start: &quot;Query model and switch package dependencies to the specified version or buildstamp..&quot; Changing to package dependencies with buildstamp &quot;20090429&quot; ...
begin workflow command (1/1) -&gt; &quot;runChangeDependencies -dispatch -buildstamp 20090429 -version 20090429 -resourcename .* -resourcetype [^\.]* &quot; ...
.
.
.

[demo@centos45.local PioneerCycling.AtgLicenseZip.atg-license-2006.3.0.zip is-verified][INFO] Package is VERIFIED

[demo@centos45.local PioneerCycling.AtgSolidRdb.development Packages-Install][WARN] Completed: Installed packages:   ATG2006.3.bin[AtgPlatformInstaller],  atg-license-2006.3.0.zip[AtgLicenseZip],  jdk-1_5_0_12-linux-i586.bin[JavaBin]

end workflow command (2/4) -&gt; &quot;Packages-Install -buildstamp 20090429 -resourcename .* -resourcetype [^\.]*&quot;
begin workflow command (3/4) -&gt; &quot;Configure -buildstamp 20090429 -resourcename .* -resourcetype [^\.]*&quot; ...
Dispatching command 'Configure' to objects: development[AtgJBossServer], development[AtgSolidRdb] ...
starting: development[AtgJBossServer]-&gt;Configure ...
starting: development[AtgSolidRdb]-&gt;Configure ...
Connecting to centos45.local:22
cmd : ctl -p PioneerCycling -t AtgJBossServer -r development -c Configure  -- -buildstamp 20090429
[demo@centos45.local PioneerCycling.AtgJBossServer.development Configure][WARN] Start: &quot;Configures the jboss server instance&quot; commands: Docs-Generate,configureDirectories,configureDataSources

[demo@centos45.local PioneerCycling.AtgJBossServer.development Configure][INFO] begin workflow command (1/3) -&gt; &quot;Docs-Generate &quot; ...

[demo@centos45.local PioneerCycling.AtgJBossServer.development Docs-Generate][INFO] Copying 5 files to /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default

[demo@centos45.local PioneerCycling.AtgJBossServer.development Docs-Generate][INFO] Copying /home/demo/ctier/ctl/projects/PioneerCycling/modules/AtgJBossServer/templates/jboss-4.0.5.GA/server/default/conf/bindings.xml.template to /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/conf/bindings.xml

[demo@centos45.local PioneerCycling.AtgJBossServer.development Docs-Generate][INFO] Copying /home/demo/ctier/ctl/projects/PioneerCycling/modules/AtgJBossServer/templates/jboss-4.0.5.GA/server/default/conf/run.conf.template to /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/conf/run.conf

[demo@centos45.local PioneerCycling.AtgJBossServer.development Docs-Generate][INFO] Copying /home/demo/ctier/ctl/projects/PioneerCycling/modules/AtgJBossServer/templates/jboss-4.0.5.GA/server/default/conf/login-config.xml.template to /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/conf/login-config.xml

[demo@centos45.local PioneerCycling.AtgJBossServer.development Docs-Generate][INFO] Copying /home/demo/ctier/ctl/projects/PioneerCycling/modules/AtgJBossServer/templates/jboss-4.0.5.GA/server/default/deploy/jbossweb-tomcat55.sar/server.xml.template to /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/deploy/jbossweb-tomcat55.sar/server.xml

[demo@centos45.local PioneerCycling.AtgJBossServer.development Docs-Generate][INFO] Copying /home/demo/ctier/ctl/projects/PioneerCycling/modules/AtgJBossServer/templates/jboss-4.0.5.GA/server/default/conf/jboss-service.xml.template to /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/conf/jboss-service.xml

[demo@centos45.local PioneerCycling.AtgJBossServer.development Configure][INFO] end workflow command (1/3) -&gt; &quot;Docs-Generate &quot;

[demo@centos45.local PioneerCycling.AtgJBossServer.development Configure][INFO] begin workflow command (2/3) -&gt; &quot;configureDirectories &quot; ...

[demo@centos45.local PioneerCycling.AtgJBossServer.development Configure][INFO] end workflow command (2/3) -&gt; &quot;configureDirectories &quot;

[demo@centos45.local PioneerCycling.AtgJBossServer.development Configure][INFO] begin workflow command (3/3) -&gt; &quot;configureDataSources &quot; ...

[demo@centos45.local PioneerCycling.AtgSolidRdbSchema.development Install][INFO] Updating AtgSolidRdbSchema module ...

[demo@centos45.local PioneerCycling.AtgSolidRdbSchema.development Install-Module][INFO] Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/AtgSolidRdbSchema-head.jar

[demo@centos45.local PioneerCycling.AtgSolidRdbSchema.development Install-Module][INFO] To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/AtgSolidRdbSchema-head.jar

[demo@centos45.local PioneerCycling.AtgSolidRdbSchema.development Install-Module][INFO] Not modified - so not downloaded

[demo@centos45.local PioneerCycling.AtgSolidRdbSchema.development Install-Module][INFO] Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/AtgSolidRdbSchema-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/AtgSolidRdbSchema

[demo@centos45.local PioneerCycling.Managed-Entity Get-Supers][INFO] Attempting to get AtgRdbSchema-head.jar ...

[demo@centos45.local PioneerCycling.Managed-Entity Install-Module][INFO] Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/AtgRdbSchema-head.jar

[demo@centos45.local PioneerCycling.Managed-Entity Install-Module][INFO] To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/AtgRdbSchema-head.jar

[demo@centos45.local PioneerCycling.Managed-Entity Install-Module][INFO] Not modified - so not downloaded

[demo@centos45.local PioneerCycling.Managed-Entity Install-Module][INFO] Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/AtgRdbSchema-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/AtgRdbSchema

[demo@centos45.local PioneerCycling.Managed-Entity Get-Supers][INFO] Attempting to get Deployment-head.jar ...

[demo@centos45.local PioneerCycling.Managed-Entity Install-Module][INFO] Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/Deployment-head.jar

[demo@centos45.local PioneerCycling.Managed-Entity Install-Module][INFO] To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/Deployment-head.jar

[demo@centos45.local PioneerCycling.Managed-Entity Install-Module][INFO] Not modified - so not downloaded

[demo@centos45.local PioneerCycling.Managed-Entity Install-Module][INFO] Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/Deployment-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/Deployment

[demo@centos45.local PioneerCycling.AtgSolidRdbSchema.development Install][WARN] Unable to convert list option to loop controls.

[demo@centos45.local PioneerCycling.AtgSolidRdbSchema.development Install][INFO] Updating properties ...

[demo@centos45.local PioneerCycling.AtgSolidRdbSchema.development Install][INFO] Updating process view file ...

[demo@centos45.local PioneerCycling.AtgSolidRdbSchema.development Get-Process-View][WARN] Process View definition updated.
[demo@centos45.local PioneerCycling.AtgSolidRdbSchema.development Install][INFO] Framework info:
[demo@centos45.local PioneerCycling.AtgSolidRdbSchema.development Install][INFO] Type module: /home/demo/ctier/ctl/projects/PioneerCycling/modules/AtgSolidRdbSchema
[demo@centos45.local PioneerCycling.AtgSolidRdbSchema.development Install][INFO] Object directory: /home/demo/ctier/ctl/projects/PioneerCycling/resources/AtgSolidRdbSchema/development
[demo@centos45.local PioneerCycling.AtgSolidRdbSchema.development Install][INFO] Object properties file: /home/demo/ctier/ctl/projects/PioneerCycling/resources/AtgSolidRdbSchema/development/var/resource.properties
[demo@centos45.local PioneerCycling.AtgSolidRdbSchema.development Install][INFO] Object process view file: /home/demo/ctier/ctl/projects/PioneerCycling/resources/AtgSolidRdbSchema/development/var/pview.xml
[demo@centos45.local PioneerCycling.AtgJBossServer.development configureDataSources][INFO] Copying 1 file to /home/demo/ctier/ctl/projects/PioneerCycling/resources/AtgJBossServer/development/var

[demo@centos45.local PioneerCycling.AtgJBossServer.development configureDataSources][INFO] Deleting: /home/demo/ctier/ctl/projects/PioneerCycling/resources/AtgJBossServer/development/var/null1900193394

[demo@centos45.local PioneerCycling.AtgJBossServer.development configureDataSources][INFO] Copying 1 file to /home/demo/ctier/ctl/projects/PioneerCycling/resources/AtgJBossServer/development/var

[demo@centos45.local PioneerCycling.AtgJBossServer.development configureDataSources][INFO] Deleting: /home/demo/ctier/ctl/projects/PioneerCycling/resources/AtgJBossServer/development/var/null1590742135

[demo@centos45.local PioneerCycling.AtgJBossServer.development configureDataSources][INFO] Deleting: /home/demo/ctier/ctl/projects/PioneerCycling/resources/AtgJBossServer/development/var/null279554199

[demo@centos45.local PioneerCycling.AtgJBossServer.development configureDataSources][INFO] Copying 1 file to /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/deploy

[demo@centos45.local PioneerCycling.AtgJBossServer.development configureDataSources][INFO] Copying /home/demo/ctier/ctl/projects/PioneerCycling/modules/AtgJBossServer/templates/datasource/atg-ds.xml.template to /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/deploy/AtgSolidRdb-development-CTAUTOGEN-ds.xml

[demo@centos45.local PioneerCycling.AtgJBossServer.development configureDataSources][INFO] Copying 1 file to /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/conf

[demo@centos45.local PioneerCycling.AtgJBossServer.development configureDataSources][INFO] Copying /home/demo/ctier/ctl/projects/PioneerCycling/modules/AtgJBossServer/templates/jboss-4.0.5.GA/server/default/conf/login-config.xml.template to /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/conf/login-config.xml

[demo@centos45.local PioneerCycling.AtgJBossServer.development Configure][INFO] end workflow command (3/3) -&gt; &quot;configureDataSources &quot;

[demo@centos45.local PioneerCycling.AtgJBossServer.development Configure][INFO] [command.timer.PioneerCycling.AtgJBossServer.Configure: 26.501 sec]

[demo@centos45.local PioneerCycling.AtgJBossServer.development Configure][WARN] Workflow completed. execution time: 26.501 sec

Connecting to centos45.local:22
cmd : ctl -p PioneerCycling -t AtgSolidRdb -r development -c Configure  -- -buildstamp 20090429
[demo@centos45.local PioneerCycling.AtgSolidRdb.development Configure][INFO] begin workflow command (1/1) -&gt; &quot;Docs-Generate &quot; ...

[demo@centos45.local PioneerCycling.AtgSolidRdb.development Docs-Generate][WARN] command beginning.

[demo@centos45.local PioneerCycling.AtgSolidRdb.development Docs-Generate][INFO] Copying 1 file to /home/demo/ctier/demo/atg/development/ATG2006.3/DAS/solid/atgdb

[demo@centos45.local PioneerCycling.AtgSolidRdb.development Docs-Generate][INFO] Copying 1 file to /home/demo/ctier/demo/atg/development/ATG2006.3/home/localconfig/atg/dynamo/service/jdbc

[demo@centos45.local PioneerCycling.AtgSolidRdb.development Docs-Generate][INFO] [command.timer.Docs-Generate: 0.616 sec]

[demo@centos45.local PioneerCycling.AtgSolidRdb.development Docs-Generate][WARN] command completed successfully. Execution time: 0.616 sec

[demo@centos45.local PioneerCycling.AtgSolidRdb.development Configure][INFO] end workflow command (1/1) -&gt; &quot;Docs-Generate &quot;

end workflow command (3/4) -&gt; &quot;Configure -buildstamp 20090429 -resourcename .* -resourcetype [^\.]*&quot;
begin workflow command (4/4) -&gt; &quot;Start -buildstamp 20090429 -resourcename .* -resourcetype [^\.]*&quot; ...
Dispatching command 'Start' to objects: development[AtgJBossServer], development[AtgSolidRdb] ...
starting: development[AtgJBossServer]-&gt;Start ...
starting: development[AtgSolidRdb]-&gt;Start ...
Connecting to centos45.local:22
cmd : ctl -p PioneerCycling -t AtgJBossServer -r development -c Start 
[demo@centos45.local PioneerCycling.AtgJBossServer.development Start][INFO] begin workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot; ...

[demo@centos45.local PioneerCycling.AtgJBossServer.development assertServiceIsUp][INFO] UID        PID  PPID  C STIME TTY          TIME CMD

[demo@centos45.local PioneerCycling.AtgJBossServer.development Start][INFO] Running handler command: startServiceWrapper

[demo@centos45.local PioneerCycling.AtgJBossServer.development startServiceWrapper][WARN] Workflow beginning. commands: startService,waitforStartEvent

[demo@centos45.local PioneerCycling.AtgJBossServer.development startServiceWrapper][INFO] begin workflow command (1/2) -&gt; &quot;startService &quot; ...

[demo@centos45.local PioneerCycling.AtgJBossServer.development startService][INFO] Moving 1 file to /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/log

[demo@centos45.local PioneerCycling.AtgJBossServer.development startServiceWrapper][INFO] end workflow command (1/2) -&gt; &quot;startService &quot;

[demo@centos45.local PioneerCycling.AtgJBossServer.development startServiceWrapper][INFO] begin workflow command (2/2) -&gt; &quot;waitforStartEvent &quot; ...
.
.
.
...
...
end workflow command (4/4) -&gt; &quot;Start -buildstamp 20090429 -resourcename .* -resourcetype [^\.]*&quot;
[command.timer.PioneerCycling.AtgSite.development.Deploy: 6:52.496 sec]
Completed: execution time: ${command.timer}
end workflow command (2/2) -&gt; &quot;Deploy -buildstamp 20090429 -resourcename .* -resourcetype [^\.]*&quot;
[command.timer.PioneerCycling.Mediator.development.Update: 7:20.304 sec]
Completed: execution time: 7:20.304 sec
end workflow command (2/2) -&gt; &quot;Update -buildstamp 20090429&quot;
[command.timer.PioneerCycling.Updater.development.BuildAndUpdate: 10:10.035 sec]
Completed: execution time: command.timer.PioneerCycling.Updater.development.BuildAndUpdate
&lt;/pre&gt;

Note that in a live development scenario where we were checking our changes into a source repository, you could run this command without specifying a build stamp. This would cause the builder to checkout from the head of the trunk and the buildstamp would be automatically generated using the latest subversion revision info. Since we aren't checking these changes in the subversion info would be meaningless, so we specified a custom buildstamp.

==View the new package and the dependency changes in Workbench==
Once the command has completed executing, you can refresh the package list and you'll see the new package listed (and that it is currently in use):

[[Image:PioneerCyclingVerifyPackageDependencyNew.gif]]

You can also look at the dependency tree in the site list and see that the new package is the one currently being used:


[[Image:PioneerCyclingPackageManagerDeployedNew.gif]]


==Go to the PioneerCycling website and view the change==

You can now view the running PioneerCycling website. Go to the instructions on [[Accessing the PioneerCycling Website]] for more information

[[Image:PioneerCyclingEntryPageChanged.gif]]

(tada!)

== Summary ==

In this Demo we covered:
* Using an Updater to tie together the both the build and deploy cycles into one end-to-end process
* Running the BuildAndUpdate command to both build and deploy a release of PioneerCycling

[[Category:PioneerCycling demo]]</text>
    </revision>
  </page>
  <page>
    <title>PioneerCycling Checkout and Build</title>
    <id>802</id>
    <revision>
      <id>14085</id>
      <timestamp>2010-11-10T15:34:14Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;/deployments&quot; to &quot;/resources&quot;</comment>
      <text xml:space="preserve">[[Image:pioneerCycling.gif|256px]]  This is part of the [[ControlTier_and_ATG | ControlTier/ATG Demo]]

==Overview==

In this demo we are going to coordinate the build process for the PioneerCycling application. This example shows the AtgJBossModuleBuilder type coordinating a build cycle that includes: source code checkout, build tool invocation and finally build artifact repository staging. The output will be an .ear file that is registered in your ControlTier package repository

[[Image:stop-medium.png]] This demo assumes the Subversion client is installed. You can [http://subversion.tigris.org/getting.html#binary-packages download a binary distribution from Collabnet] or consider following the [[ ControlTier_and_ATG#Dependencies| upgrading/installing subversion ]] instructions.

==Prerequisites==
This demo assumes you have completed:
* [[Building PioneerCycling Project|Setup for the PioneerCycling Project]]
* You have the Subversion client installed

==Prepare the Build Environment Using Deploy Command==

The first step before running the actual build cycle is to run the builder's &quot;Deploy&quot; command which will take care of ensuring all the build processes dependencies are in place.

In this demo, pioneerCycling (which is a builder instance of type AtgJBossModuleBuilder), will ensure it has the correct version of the Ant build tool and JBoss.

Workbench shows this in its graphical &quot;Process Flow&quot; view. You can see this visualization for the Deploy command for the &quot;pioneerCycling&quot; AtgJBossModuleBuilder below:

[[Image:pioneerCyclingAtgJBossModuleBuilderDeployProcessflow.gif]]

Run the following command to have the dukesBank instance of the AtgJBossModuleBuilder download and install it's own dependencies:

&lt;pre&gt;
[demo@centos45 ctier]$ ctl -p PioneerCycling -t AtgJBossModuleBuilder -r pioneerCycling -c Deploy
&lt;/pre&gt;
You should output similar to that shown below:
&lt;pre&gt;
Start: &quot;Run the deployment cycle, coordinating package installation and configuration.&quot; commands: Packages-Install,Configure
begin workflow command (1/2) -&gt; &quot;Packages-Install &quot; ...
Start: &quot;Install the configured package dependencies for the deployment.&quot; Beginning installation for packages:   jdk-1_5_0_12-linux-i586.bin[JavaBin],  jboss-4.0.5.GA.zip[JBossZip],  ATG2006.3.bin[AtgPlatformInstaller],  apache-ant-1.7.0-bin.zip[AntZip] ...
Dispatching command 'assertPackageIsVerified' to objects: jdk-1_5_0_12-linux-i586.bin[JavaBin], apache-ant-1.7.0-bin.zip[AntZip], jboss-4.0.5.GA.zip[JBossZip], ATG2006.3.bin[AtgPlatformInstaller] ...
starting: jdk-1_5_0_12-linux-i586.bin[JavaBin]-&gt;assertPackageIsVerified ...
starting: apache-ant-1.7.0-bin.zip[AntZip]-&gt;assertPackageIsVerified ...
starting: jboss-4.0.5.GA.zip[JBossZip]-&gt;assertPackageIsVerified ...
starting: ATG2006.3.bin[AtgPlatformInstaller]-&gt;assertPackageIsVerified ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/JavaBin-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/JavaBin-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/JavaBin-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/JavaBin
Attempting to get bin-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/bin-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/bin-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/bin-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/bin
Attempting to get Package-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/Package-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/Package-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/Package-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/Package
Packages-Install invoking: jdk-1_5_0_12-linux-i586.bin[JavaBin]-&gt;Install -installroot /home/demo/ctier/demo/atg/build/jdk1.5.0_12
Start: &quot;Install object and run the package installation cycle.&quot; commands: assertPackageIsInstalled
begin workflow command (1/1) -&gt; &quot;assertPackageIsInstalled -installroot /home/demo/ctier/demo/atg/build/jdk1.5.0_12&quot; ...
/home/demo/ctier/demo/atg/build/jdk1.5.0_12/LICENSE already exists, skipping installation
 
end workflow command (1/1) -&gt; &quot;assertPackageIsInstalled -installroot /home/demo/ctier/demo/atg/build/jdk1.5.0_12&quot;
[command.timer.PioneerCycling.Package.Install: 1.251 sec]
Workflow completed. execution time: 1.251 sec
Executing script: /home/demo/ctier/ctl/projects/PioneerCycling/modules/Package/bin/is-verified.xml ...
Package is VERIFIED
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/AntZip-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/AntZip-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/AntZip-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/AntZip
Attempting to get PlatformZip-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/PlatformZip-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/PlatformZip-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/PlatformZip-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/PlatformZip
Attempting to get zip-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/zip-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/zip-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/zip-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/zip
Attempting to get Package-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/Package-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/Package-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/Package-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/Package
Packages-Install invoking: apache-ant-1.7.0-bin.zip[AntZip]-&gt;Install -installroot /home/demo/ctier/demo/atg/build/apache-ant-1.7.0
Start: &quot;Install object and run the package installation cycle.&quot; commands: assertPackageIsInstalled
begin workflow command (1/1) -&gt; &quot;assertPackageIsInstalled -installroot /home/demo/ctier/demo/atg/build/apache-ant-1.7.0&quot; ...
/home/demo/ctier/demo/atg/build/apache-ant-1.7.0/bin/ant already exists, skipping installation
end workflow command (1/1) -&gt; &quot;assertPackageIsInstalled -installroot /home/demo/ctier/demo/atg/build/apache-ant-1.7.0&quot;
[command.timer.PioneerCycling.Package.Install: 1.251 sec]
Workflow completed. execution time: 1.251 sec
Executing script: /home/demo/ctier/ctl/projects/PioneerCycling/modules/Package/bin/is-verified.xml ...
Package is VERIFIED
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/JBossZip-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/JBossZip-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/JBossZip-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/JBossZip
Attempting to get PlatformZip-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/PlatformZip-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/PlatformZip-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/PlatformZip-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/PlatformZip
Attempting to get zip-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/zip-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/zip-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/zip-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/zip
Attempting to get Package-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/Package-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/Package-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/Package-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/Package
Packages-Install invoking: jboss-4.0.5.GA.zip[JBossZip]-&gt;Install -installroot /home/demo/ctier/demo/atg/build/jboss-4.0.5.GA
Start: &quot;Install object and run the package installation cycle.&quot; commands: assertPackageIsInstalled
begin workflow command (1/1) -&gt; &quot;assertPackageIsInstalled -installroot /home/demo/ctier/demo/atg/build/jboss-4.0.5.GA&quot; ...
/home/demo/ctier/demo/atg/build/jboss-4.0.5.GA/bin/run.sh already exists, skipping installation
[command.timer.assertPackageIsInstalled: 0.274 sec]
command completed successfully. Execution time: 0.274 sec
end workflow command (1/1) -&gt; &quot;assertPackageIsInstalled -installroot /home/demo/ctier/demo/atg/build/jboss-4.0.5.GA&quot;
[command.timer.PioneerCycling.Package.Install: 1.251 sec]
Workflow completed. execution time: 1.251 sec
Executing script: /home/demo/ctier/ctl/projects/PioneerCycling/modules/Package/bin/is-verified.xml ...
Package is VERIFIED
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/AtgPlatformInstaller-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/AtgPlatformInstaller-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/AtgPlatformInstaller-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/AtgPlatformInstaller
Attempting to get bin-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/bin-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/bin-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/bin-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/bin
Attempting to get Package-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/Package-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/Package-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/Package-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/Package
Packages-Install invoking: ATG2006.3.bin[AtgPlatformInstaller]-&gt;Install -installroot /home/demo/ctier/demo/atg/build/ATG2006.3
Start: &quot;Install object and run the package installation cycle.&quot; commands: assertPackageIsInstalled
begin workflow command (1/1) -&gt; &quot;assertPackageIsInstalled -installroot /home/demo/ctier/demo/atg/build/ATG2006.3&quot; ...
end workflow command (1/1) -&gt; &quot;assertPackageIsInstalled -installroot /home/demo/ctier/demo/atg/build/ATG2006.3&quot;
[command.timer.PioneerCycling.AtgPlatformInstaller.Install: 2.026 sec]
Workflow completed. execution time: 2.026 sec
Executing script: /home/demo/ctier/ctl/projects/PioneerCycling/modules/Package/bin/is-verified.xml ...
Package is VERIFIED
Completed: Installed packages:   jdk-1_5_0_12-linux-i586.bin[JavaBin],  jboss-4.0.5.GA.zip[JBossZip],  ATG2006.3.bin[AtgPlatformInstaller],  apache-ant-1.7.0-bin.zip[AntZip]
end workflow command (1/2) -&gt; &quot;Packages-Install &quot;
begin workflow command (2/2) -&gt; &quot;Configure &quot; ...
begin workflow command (1/1) -&gt; &quot;Docs-Generate &quot; ...
end workflow command (1/1) -&gt; &quot;Docs-Generate &quot;
end workflow command (2/2) -&gt; &quot;Configure &quot;
[command.timer: 32.486 sec]
Completed: execution time: 32.486 sec
&lt;/pre&gt;


==Verify Checkout==
The next step confirms the source code connection is defined correctly and accessible. Checkout is handled by a standard command called &quot;scmCheckout&quot;. This command interfaces with the SCM client tool and is configured with a number of parameters like connection string, module name, and base directory. In this demo, the source repository is hosted on sourceforge.net.

Run the &lt;code&gt;scmCheckout&lt;/code&gt; command without any arguments:
&lt;pre&gt;
ctl -p PioneerCycling -t AtgJBossModuleBuilder -r pioneerCycling -c scmCheckout
&lt;/pre&gt;

You will see output similar to below:
&lt;pre&gt;
scmCheckout parameters: {basedir=&quot;/home/demo/ctier/demo/atg/build/cruisecontrol-bin-2.7.1/projects/pioneerCycling&quot;, connection=&quot;https://moduleforge.svn.sourceforge.net/svnroot/moduleforge/atg/branches/3.2.4/demo/PioneerCycling/src&quot;, module=&quot;&quot;, label=&quot;&quot;, scmcommand=&quot;checkout&quot; }
Created dir: /home/demo/ctier/demo/atg/build/cruisecontrol-bin-2.7.1/projects/pioneerCycling
A    /home/demo/ctier/demo/atg/build/cruisecontrol-bin-2.7.1/projects/pioneerCycling/build.xml
Checked out revision 1363.
[command.timer.Builder.scmCheckout: 30.866 sec]
&lt;/pre&gt;

See [[Dukes Bank Checkout and Build#Troubleshooting]] if you get a SVN server certificate error.

==Build==

===Run the Build Command===
With the preparation and verification steps out of the way you are now ready to demonstrate the full build cycle.
The &lt;code&gt;Build&lt;/code&gt; command is a workflow that carries out the steps of the build cycle.
Workbench shows this in its graphical &quot;Process Flow&quot; view. You can see can see this visualization for the Build command of the &quot;pioneerCycling&quot; AtgJBossModuleBuilder below:

[[Image:pioneerCyclingAtgJBossModuleBuilderBuildProcessflow.gif]]


You can see the Build workflow has four commands:
# scmCheckout: checkout the source code
# setBuildstamp: automatically set a build identifier (in this case using the Subversion revision info)
# runBuildscript: invoke the build tool (Ant in this case)
# repoImport: upload the build artifacts to the repository

Run the &lt;code&gt;Build&lt;/code&gt; command without arguments:

&lt;pre&gt;
[demo@centos45 ctier]$ ctl -p PioneerCycling -t AtgJBossModuleBuilder -r pioneerCycling -c Build 
&lt;/pre&gt;

You will see output similar to below:
&lt;pre&gt;
Start: &quot;Run the build cycle.&quot; commands: scmCheckout,setBuildstamp,runBuildScript,repoImport
begin workflow command (1/4) -&gt; &quot;scmCheckout &quot; ...
scmCheckout parameters: {basedir=&quot;/home/demo/ctier/demo/atg/build/cruisecontrol-bin-2.7.1/projects/pioneerCycling&quot;, connection=&quot;https://moduleforge.svn.sourceforge.net/svnroot/moduleforge/atg/branches/3.2.4/demo/PioneerCycling/src&quot;, module=&quot;&quot;, label=&quot;&quot;, scmcommand=&quot;checkout&quot; }
Checked out revision 1341.
[command.timer.Builder.scmCheckout: 11.208 sec]
end workflow command (1/4) -&gt; &quot;scmCheckout &quot;
begin workflow command (2/4) -&gt; &quot;setBuildstamp &quot; ...
Checking &quot;https://moduleforge.svn.sourceforge.net/svnroot/moduleforge/atg/branches/3.2.4/demo/PioneerCycling/src&quot; for the last changed revision ...
Deleting: /home/demo/ctier/ctl/projects/PioneerCycling/resources/AtgJBossModuleBuilder/pioneerCycling/var/null208512313.out
Automatically set buildstamp to &quot;1.2.3.1080&quot;
[command.timer.Builder.setBuildstamp: 9.211 sec]
end workflow command (2/4) -&gt; &quot;setBuildstamp &quot;
begin workflow command (3/4) -&gt; &quot;runBuildScript &quot; ...
Buildfile: build.xml

clean:
   [delete] Deleting /home/demo/ctier/demo/atg/build/ATG2006.3/PioneerCyclingJSP/j2ee-apps/pioneer/pioneer.war
   [delete] Deleting /home/demo/ctier/demo/atg/build/cruisecontrol-bin-2.7.1/projects/pioneerCycling/PioneerCycling-1.2.3.1080.ear

war:
      [war] Building war: /home/demo/ctier/demo/atg/build/ATG2006.3/PioneerCyclingJSP/j2ee-apps/pioneer/pioneer.war

ear:
      [ear] Updating ear: /home/demo/ctier/demo/atg/build/ATG2006.3/PioneerCyclingJSP/j2ee-apps/pioneer.ear

runAssembler:
     [echo] DEBUG:
     [echo]             exec executable=&quot;/home/demo/ctier/demo/atg/build/ATG2006.3/home/bin/runAssembler&quot; failonerror=&quot;true&quot;
     [echo]                     arg line=&quot;-verbose -standalone -liveconfig -omit-licenses -pack /home/demo/ctier/demo/atg/build/cruisecontrol-bin-2.7.1/projects/pioneerCycling/PioneerCycling-1.2.3.1080.ear -m PioneerCyclingJSP DafEar.Admin&quot;/
     [echo]             /exec
     [exec] The following installed ATG components are being used to launch:
     [exec]   ATGPlatform version 2006.3 installed at /home/demo/ctier/demo/atg/build/ATG2006.3
     [exec] 
     [exec] Assembly started.
     [exec] Target application is /home/demo/ctier/demo/atg/build/cruisecontrol-bin-2.7.1/projects/pioneerCycling/PioneerCycling-1.2.3.1080.ear.
     [exec] Creating exploded ear file /tmp/PioneerCycling-1.2.3.1080.ear53809stage.
     [exec] Initializing...
     [exec] Creating application.xml...
     [exec] Creating Ear file MANIFEST...
     [exec] Importing classes...
     [exec] Copying  src: /home/demo/ctier/demo/atg/build/ATG2006.3/home/locallib/README.txt
     [exec]         dest: /tmp/PioneerCycling-1.2.3.1080.ear53809stage/./lib/_home_slocallib/README.txt
     [exec] Importing classes for module DafEar
     [exec] Importing classes for module DafEar.Admin
     [exec] Importing J2EE module atg-bootstrap-ejb.jar declared in DafEar.base
     [exec] Importing J2EE module pioneer.war declared in PioneerCyclingJSP
     [exec] Packing earfile /tmp/PioneerCycling-1.2.3.1080.ear53809stage to file /home/demo/ctier/demo/atg/build/cruisecontrol-bin-2.7.1/projects/pioneerCycling/PioneerCycling-1.2.3.1080.ear.
     [exec] Assembly took 57.851 seconds.

all:

BUILD SUCCESSFUL
Total time: 1 minute 6 seconds
[command.timer.AtgJBossModuleBuilder.runBuildScript: 1:10.519 sec]
end workflow command (3/4) -&gt; &quot;runBuildScript &quot;
begin workflow command (4/4) -&gt; &quot;repoImport &quot; ...
Created dir: /home/demo/ctier/ctl/projects/PioneerCycling/resources/AtgJBossModuleBuilder/pioneerCycling/tmp/Builder-repoImport-20090419045745
Condition: isProcessableWithoutExistingPropfile result: true
opts.propfile set to: autogenerated-builder.properties
Creating new property file: /home/demo/ctier/ctl/projects/PioneerCycling/resources/AtgJBossModuleBuilder/pioneerCycling/tmp/Builder-repoImport-20090419045745/import-count.properties
processing files in directory: '/home/demo/ctier/demo/atg/build/cruisecontrol-bin-2.7.1/projects/pioneerCycling' matching: '(PioneerCycling)(?:-1.2.3.1080)?\.(ear)$' ...
processing matched file: PioneerCycling-1.2.3.1080.ear
Deleting: /home/demo/ctier/demo/atg/build/cruisecontrol-bin-2.7.1/projects/pioneerCycling/autogenerated-builder.properties
Auto-generated builder properties file created: /home/demo/ctier/demo/atg/build/cruisecontrol-bin-2.7.1/projects/pioneerCycling/autogenerated-builder.properties...
Copying 1 file to /home/demo/ctier/demo/atg/build/cruisecontrol-bin-2.7.1/projects/pioneerCycling
Copying 1 file to /home/demo/ctier/ctl/projects/PioneerCycling/modules/Builder/commands
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/AtgEar-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/AtgEar-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/AtgEar-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/AtgEar
Attempting to get ear-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/ear-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/ear-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/ear-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/ear
Attempting to get Package-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/Package-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/Package-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/Package-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/Package
uploading file: /home/demo/ctier/demo/atg/build/cruisecontrol-bin-2.7.1/projects/pioneerCycling/PioneerCycling-1.2.3.1080.ear to: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/pkgs/PioneerCycling/AtgEar/ears/PioneerCycling-1.2.3.1080.ear...
Uploading to: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/pkgs/PioneerCycling/AtgEar/ears/PioneerCycling-1.2.3.1080.ear
Uploading: PioneerCycling-1.2.3.1080.ear
Puted 1 file to http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/pkgs/PioneerCycling/AtgEar/ears/PioneerCycling-1.2.3.1080.ear
Creating new property file: /home/demo/ctier/ctl/projects/PioneerCycling/resources/AtgJBossModuleBuilder/pioneerCycling/tmp/Builder-repoImport-20090419045745/import-list.properties
Package &quot;PioneerCycling-1.2.3.1080.ear (AtgEar)&quot; already registered. Updating object info.
Deleting: /home/demo/ctier/ctl/projects/PioneerCycling/modules/Builder/commands/entity512867352.properties
Updating property file: /home/demo/ctier/ctl/projects/PioneerCycling/resources/AtgJBossModuleBuilder/pioneerCycling/tmp/Builder-repoImport-20090419045745/import-count.properties
Current count: 1
Batch request performed successfully.
Current count: 1
[command.timer.Builder.repoImport: 51.521 sec]
end workflow command (4/4) -&gt; &quot;repoImport &quot;
[command.timer: 2:44.742 sec]
Completed: execution time: 2:44.742 sec
&lt;/pre&gt;

The output shows a file &quot;PioneerCycling-1.2.3.1080.ear&quot; uploaded to the WebDAV server.

===Query the repository===
Use the &lt;code&gt;repoFind&lt;/code&gt; command to query the repository to see what JBoss AtgEar packages exist:


&lt;pre&gt;
[demo@centos45 ctier]$ ctl -p PioneerCycling -t AtgJBossModuleBuilder -r pioneerCycling -c repoFind -- -packagetype AtgEar
&lt;/pre&gt;
... with results listed like so:
&lt;pre&gt;
Cleaning up old session data ...
Deleting: /home/demo/ctier/ctl/projects/PioneerCycling/resources/AtgJBossModuleBuilder/pioneerCycling/var/sessions/repoFind.session
Querying model for matching package objects ...
|
|--(AtgEar) PioneerCycling-1.2.3.1080.ear
session data saved: /home/demo/ctier/ctl/projects/PioneerCycling/resources/AtgJBossModuleBuilder/pioneerCycling/var/sessions/repoFind.session
[command.timer.Builder.repoFind: 1:42.411 sec]
&lt;/pre&gt;

The output above shows there is currently one AtgEar package. Subsequent builds will result in new versions of the AtgEar package.

You can also check Workbench's &quot;Package Manager&quot; to find the newly uploaded package. Clicking on the object will show its metadata like the screenshot below:

[[Image:pioneerCyclingAtgEarObjectView.gif]]


===Specifying your own Buildstamp===

The first example of &quot;Build&quot; used automatic buildstamp generation. You can also specify the buildstamp via a command line option. The example below uses a date stamp:

&lt;pre&gt;
 ctl -p PioneerCycling -t AtgJBossModuleBuilder -r pioneerCycling -c Build -- -buildstamp 20090114
&lt;/pre&gt;
Output:
&lt;pre&gt;
Start: &quot;Run the build cycle.&quot; commands: scmCheckout,setBuildstamp,runBuildScript,repoImport
begin workflow command (1/4) -&gt; &quot;scmCheckout -buildstamp 20090114&quot; ...
scmCheckout parameters: {basedir=&quot;/home/demo/ctier/demo/atg/build/cruisecontrol-bin-2.7.1/projects/pioneerCycling&quot;, connection=&quot;https://moduleforge.svn.sourceforge.net/svnroot/moduleforge/atg/branches/3.2.4/demo/PioneerCycling/src&quot;, module=&quot;&quot;, label=&quot;&quot;, scmcommand=&quot;checkout&quot; }
Checked out revision 1341.
[command.timer.Builder.scmCheckout: 16.492 sec]
end workflow command (1/4) -&gt; &quot;scmCheckout -buildstamp 20090114&quot;
begin workflow command (2/4) -&gt; &quot;setBuildstamp -buildstamp 20090114&quot; ...
Using provided buildstamp &quot;20090114&quot;
[command.timer.Builder.setBuildstamp: 1.091 sec]
end workflow command (2/4) -&gt; &quot;setBuildstamp -buildstamp 20090114&quot;
begin workflow command (3/4) -&gt; &quot;runBuildScript -buildstamp 20090114&quot; ...
Buildfile: build.xml

clean:
   [delete] Deleting /home/demo/ctier/demo/atg/build/ATG2006.3/PioneerCyclingJSP/j2ee-apps/pioneer/pioneer.war
   [delete] Deleting /home/demo/ctier/demo/atg/build/cruisecontrol-bin-2.7.1/projects/pioneerCycling/PioneerCycling-1.2.3.1080.ear

war:
      [war] Building war: /home/demo/ctier/demo/atg/build/ATG2006.3/PioneerCyclingJSP/j2ee-apps/pioneer/pioneer.war

ear:
      [ear] Updating ear: /home/demo/ctier/demo/atg/build/ATG2006.3/PioneerCyclingJSP/j2ee-apps/pioneer.ear

runAssembler:
     [echo] DEBUG:
     [echo]             exec executable=&quot;/home/demo/ctier/demo/atg/build/ATG2006.3/home/bin/runAssembler&quot; failonerror=&quot;true&quot;
     [echo]                     arg line=&quot;-verbose -standalone -liveconfig -omit-licenses -pack /home/demo/ctier/demo/atg/build/cruisecontrol-bin-2.7.1/projects/pioneerCycling/PioneerCycling-20090114.ear -m PioneerCyclingJSP DafEar.Admin&quot;/
     [echo]             /exec
     [exec] The following installed ATG components are being used to launch:
     [exec]   ATGPlatform version 2006.3 installed at /home/demo/ctier/demo/atg/build/ATG2006.3
     [exec] 
     [exec] Assembly started.
     [exec] Target application is /home/demo/ctier/demo/atg/build/cruisecontrol-bin-2.7.1/projects/pioneerCycling/PioneerCycling-20090114.ear.
     [exec] Creating exploded ear file /tmp/PioneerCycling-20090114.ear36904stage.
     [exec] Initializing...
     [exec] Creating application.xml...
     [exec] Creating Ear file MANIFEST...
     [exec] Importing classes...
     [exec] Copying  src: /home/demo/ctier/demo/atg/build/ATG2006.3/home/locallib/README.txt
     [exec]         dest: /tmp/PioneerCycling-20090114.ear36904stage/./lib/_home_slocallib/README.txt
     [exec] Importing classes for module DafEar
     [exec] Importing classes for module DafEar.Admin
     [exec] Importing classes for module DafEar.base
     [exec] Copying  src: /home/demo/ctier/demo/atg/build/ATG2006.3/DafEar/base/../Tomcat/lib/classes.jar
     [exec]         dest: /tmp/PioneerCycling-20090114.ear36904stage/./lib/_DafEar.base_s.._sTomcat_slib_sclasses.jar
     [exec] Copying  src: /home/demo/ctier/demo/atg/build/ATG2006.3/DafEar/base/../WebLogic/lib/classes.jar
     [exec]         dest: /tmp/PioneerCycling-20090114.ear36904stage/./lib/_DafEar.base_s.._sWebLogic_slib_sclasses.jar
     [exec] Copying  src: /home/demo/ctier/demo/atg/build/ATG2006.3/DafEar/base/../WebSphere/lib/classes.jar
     [exec]         dest: /tmp/PioneerCycling-20090114.ear36904stage/./lib/_DafEar.base_s.._sWebSphere_slib_sclasses.jar
     [exec] Copying  src: /home/demo/ctier/demo/atg/build/ATG2006.3/DafEar/base/lib/classes.jar
     [exec]         dest: /tmp/PioneerCycling-20090114.ear36904stage/./lib/_DafEar.base_slib_sclasses.jar
     [exec] Importing classes for module PioneerCyclingJSP
     [exec] Importing classes for module B2CCommerce
     [exec] Importing classes for module DCS.AbandonedOrderServices
     [exec] Importing classes for module DCS
     [exec] Copying  src: /home/demo/ctier/demo/atg/build/ATG2006.3/DCS/lib/resources.jar
     [exec]         dest: /tmp/PioneerCycling-20090114.ear36904stage/./lib/_DCS_slib_sresources.jar
     [exec] Copying  src: /home/demo/ctier/demo/atg/build/ATG2006.3/DCS/lib/classes.jar
     [exec]         dest: /tmp/PioneerCycling-20090114.ear36904stage/./lib/_DCS_slib_sclasses.jar
     [exec] Importing classes for module DSS
     [exec] Copying  src: /home/demo/ctier/demo/atg/build/ATG2006.3/DSS/lib/resources.jar
     [exec]         dest: /tmp/PioneerCycling-20090114.ear36904stage/./lib/_DSS_slib_sresources.jar
     [exec] Copying  src: /home/demo/ctier/demo/atg/build/ATG2006.3/DSS/lib/classes.jar
     [exec]         dest: /tmp/PioneerCycling-20090114.ear36904stage/./lib/_DSS_slib_sclasses.jar
     [exec] Importing classes for module DPS
     [exec] Copying  src: /home/demo/ctier/demo/atg/build/ATG2006.3/DPS/lib/resources.jar
     [exec]         dest: /tmp/PioneerCycling-20090114.ear36904stage/./lib/_DPS_slib_sresources.jar
     [exec] Copying  src: /home/demo/ctier/demo/atg/build/ATG2006.3/DPS/lib/classes.jar
     [exec]         dest: /tmp/PioneerCycling-20090114.ear36904stage/./lib/_DPS_slib_sclasses.jar
...
...
...
     [exec] Importing J2EE module pioneer.war declared in PioneerCyclingJSP
     [exec] Packing earfile /tmp/PioneerCycling-20090114.ear36904stage to file /home/demo/ctier/demo/atg/build/cruisecontrol-bin-2.7.1/projects/pioneerCycling/PioneerCycling-20090114.ear.
     [exec] Assembly took 39.107 seconds.

all:

BUILD SUCCESSFUL
Total time: 50 seconds
[command.timer.AtgJBossModuleBuilder.runBuildScript: 50.929 sec]
end workflow command (3/4) -&gt; &quot;runBuildScript -buildstamp 20090114&quot;
begin workflow command (4/4) -&gt; &quot;repoImport -buildstamp 20090114&quot; ...
Created dir: /home/demo/ctier/ctl/projects/PioneerCycling/resources/AtgJBossModuleBuilder/pioneerCycling/tmp/Builder-repoImport-20090419062211
Condition: isProcessableWithoutExistingPropfile result: true
opts.propfile set to: autogenerated-builder.properties
Creating new property file: /home/demo/ctier/ctl/projects/PioneerCycling/resources/AtgJBossModuleBuilder/pioneerCycling/tmp/Builder-repoImport-20090419062211/import-count.properties
processing files in directory: '/home/demo/ctier/demo/atg/build/cruisecontrol-bin-2.7.1/projects/pioneerCycling' matching: '(PioneerCycling)(?:-20090114)?\.(ear)$' ...
processing matched file: PioneerCycling-20090114.ear
Deleting: /home/demo/ctier/demo/atg/build/cruisecontrol-bin-2.7.1/projects/pioneerCycling/autogenerated-builder.properties
Auto-generated builder properties file created: /home/demo/ctier/demo/atg/build/cruisecontrol-bin-2.7.1/projects/pioneerCycling/autogenerated-builder.properties...
Copying 1 file to /home/demo/ctier/demo/atg/build/cruisecontrol-bin-2.7.1/projects/pioneerCycling
Copying 1 file to /home/demo/ctier/ctl/projects/PioneerCycling/modules/Builder/commands
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/AtgEar-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/AtgEar-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/AtgEar-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/AtgEar
Attempting to get ear-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/ear-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/ear-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/ear-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/ear
Attempting to get Package-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/Package-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/Package-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/Package-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/Package
uploading file: /home/demo/ctier/demo/atg/build/cruisecontrol-bin-2.7.1/projects/pioneerCycling/PioneerCycling-20090114.ear to: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/pkgs/PioneerCycling/AtgEar/ears/PioneerCycling-20090114.ear...
Uploading to: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/pkgs/PioneerCycling/AtgEar/ears/PioneerCycling-20090114.ear
Uploading: PioneerCycling-20090114.ear
Puted 1 file to http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/pkgs/PioneerCycling/AtgEar/ears/PioneerCycling-20090114.ear
Creating new property file: /home/demo/ctier/ctl/projects/PioneerCycling/resources/AtgJBossModuleBuilder/pioneerCycling/tmp/Builder-repoImport-20090419062211/import-list.properties
Deleting: /home/demo/ctier/ctl/projects/PioneerCycling/modules/Builder/commands/entity1302369619.properties
Updating property file: /home/demo/ctier/ctl/projects/PioneerCycling/resources/AtgJBossModuleBuilder/pioneerCycling/tmp/Builder-repoImport-20090419062211/import-count.properties
Current count: 1
Batch request performed successfully.
Current count: 1
[command.timer.Builder.repoImport: 1:07.470 sec]
end workflow command (4/4) -&gt; &quot;repoImport -buildstamp 20090114&quot;
[command.timer: 2:22.711 sec]
Completed: execution time: 2:22.711 sec
&lt;/pre&gt;

The output above shows the another AtgEar package uploaded, this time &quot;PioneerCycling-20090114.ear&quot;.

Of course you can confirm this via &lt;code&gt;repoFind&lt;/code&gt;:

&lt;pre&gt;
ctl -p PioneerCycling -t AtgJBossModuleBuilder -r pioneerCycling -c repoFind -- -packagetype AtgEar
&lt;/pre&gt;
&lt;pre&gt;
Cleaning up old session data ...
Deleting: /home/demo/ctier/ctl/projects/PioneerCycling/resources/AtgJBossModuleBuilder/pioneerCycling/var/sessions/repoFind.session
Querying model for matching package objects ...
|
|--(AtgEar) PioneerCycling-1.2.3.1080.ear
|
|--(AtgEar) PioneerCycling-20090114.ear
session data saved: /home/demo/ctier/ctl/projects/PioneerCycling/resources/AtgJBossModuleBuilder/pioneerCycling/var/sessions/repoFind.session
[command.timer.Builder.repoFind: 4.001 sec]
&lt;/pre&gt;

For example's of common maintenance commands for managing the ControlTier package repository see Duke&amp;apos;s Bank documentation:
* [[Dukes Bank and ControlTier Administration]]

==Summary==
In this demo we covered:
* Using a builder's Deploy command to prepare the build environment
* Verifying the connection to the source repository using the scmCheckout command
* Using the Build command to coordinate a build cycle that includes: source code checkout, build tool invocation and finally build artifact repository staging
* Querying the repository to find your new packages
* Specifying your own build stamp

With the AtgEar loaded you can proceed to the next demo: [[PioneerCycling Provisioning JBoss applications]]

[[Category:PioneerCycling demo]]</text>
    </revision>
  </page>
  <page>
    <title>PioneerCycling Migrating a Release from Development to Staging</title>
    <id>817</id>
    <revision>
      <id>14155</id>
      <timestamp>2010-11-10T16:00:24Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;ctl-depot&quot; to &quot;ctl-project&quot;</comment>
      <text xml:space="preserve">THIS DOCUMENT IS NOT COMPLETE AND IS IN PROGRESS

[[Image:java_duke_mascot.jpg|32px]] This is part of the DukesBank portion of the [[ControlTier Demo]]

==Overview==
In this demo we are simulating a development to staging lifecycle. We are going to make a source code change in development, deploy it to our &quot;development&quot; Dukes Bank instance and verify the change, and then deploy those same changes to our &quot;staging&quot; Dukes Bank instance. In this example we're codeploying both instances of Dukes Bank on the same OS instance as the ControlTier server (localhost), but as we [[Dukes_Bank_on_Multiple_Nodes|show in future demos]], deploying each instance across multiple machines is just as easy with ControlTier.

[[Image:Screencast-icon.png]]  [http://open.controltier.org/media/BasicDemo5_Migrate.swf Watch a video of this demo (less than 5:00)]

==Prerequisites==
This demo assumes you have completed the [[Building Dukes Bank Project|Dukes Bank Setup]].

==Preparation==

===Ensure objects are deployed to CTL client===
Before getting started confirm that all of the necessary objects are deployed to CTL.

Run the [[ctl-project]] command:
&lt;pre&gt;
ctl-project -p demo -a install
&lt;/pre&gt;
Output:
&lt;pre&gt;
&quot;Install&quot; command running for resource: (Site) developmentDukesBank
&quot;Install&quot; command running for resource: (HsqldbRdb) stagingDukesBank
&quot;Install&quot; command running for resource: (JBossServer) developmentDukesBank
&quot;Install&quot; command running for resource: (Updater) developmentDukesBank
&quot;Install&quot; command running for resource: (HsqldbRdb) developmentDukesBank
&quot;Install&quot; command running for resource: (JBossAntBuilder) dukesBank
&quot;Install&quot; command running for resource: (DukesBankProjectBuilder) dukesbank
&quot;Install&quot; command running for resource: (CruiseControl) development
&quot;Install&quot; command running for resource: (JBossServer) stagingDukesBank
&quot;Install&quot; command running for resource: (HsqldbRdbExportBuilder) dukesBank
&quot;Install&quot; command running for resource: (Site) stagingDukesBank
&lt;/pre&gt;

===Deploy staging instance of JBoss===
Deploy the JBoss instance that will be used for the staging instance of the Dukes Bank demo. This command and its output is very similar to what you did for deploying the development instance in the [[Dukes Bank Provisioning JBoss instances|first JBoss provisioning demo]].

&lt;pre&gt;
ctl -p demo -t JBossServer -r stagingDukesBank -c Deploy
&lt;/pre&gt;

Verify that the JBoss instance is functioning by navigating to its management web page:
http://localhost:8280/ (or your server's hostname)

[[Image:DukesBank staging empty jboss.png|400px]]

==Make a code change and deploy it to development==
If you haven't already performed the [[Dukes Bank Build and Provisioning JBoss applications|previous demo]], go ahead and do so now. In that demo you will make a code change to Dukes Bank app and deploy it to the development instance.

At the end of that demo, you'll be able to verify your changes ( http://localhost:8180/bank/main )

[[Image:DukesBank UncleSamWelcome.png|400px]]

==Deploy same package to staging==
In this step you are going to be deploying the same package you created and tested in development to the staging instance of Dukes Bank. 

&lt;pre&gt;
ctl -p demo -t Updater -r stagingDukesBank -c Update -- -buildstamp 20090123-demo
&lt;/pre&gt;

Output:

&lt;pre&gt;
Start: &quot;Changes package dependencies and runs the coordinated deployment cycle across the configured Sites.&quot; commands: Change-Dependencies,Deploy
begin workflow command (1/2) -&gt; &quot;Change-Dependencies -buildstamp 20090123-demo -resourcename .* -resourcetype [^\.]*&quot; ...
Start: &quot;Query model and switch package dependencies to the specified version or buildstamp..&quot; Changing to package dependencies with buildstamp &quot;20090123-demo&quot; ...
begin workflow command (1/1) -&gt; &quot;runChangeDependencies -dispatch -buildstamp 20090123-demo -version 20090123-demo -resourcename .* -resourcetype [^\.]* &quot; ...
Request succeeded.
end workflow command (1/1) -&gt; &quot;runChangeDependencies -dispatch -buildstamp 20090123-demo -version 20090123-demo -resourcename .* -resourcetype [^\.]* &quot;
[command.timer.demo.Mediator.stagingDukesBank.Change-Dependencies: 9.044 sec]
Completed: Dependencies changed. execution time: 9.044 sec
end workflow command (1/2) -&gt; &quot;Change-Dependencies -buildstamp 20090123-demo -resourcename .* -resourcetype [^\.]*&quot;
begin workflow command (2/2) -&gt; &quot;Deploy -buildstamp 20090123-demo -resourcename .* -resourcetype [^\.]*&quot; ...
Dispatching command 'Deploy' to objects: stagingDukesBank[Site] ...
starting: stagingDukesBank[Site]-&gt;Deploy ...
Dispatching command 'Deploy' to objects: stagingDukesBank[HsqldbRdb], stagingDukesBank[JBossServer] ...
.
.
.
.
.
.
.
.
.
end workflow command (1/1) -&gt; &quot;Docs-Generate &quot;
end workflow command (3/4) -&gt; &quot;Configure &quot;
begin workflow command (4/4) -&gt; &quot;Start &quot; ...
begin workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot; ...
JBoss is not UP!
Running handler command: startServiceWrapper
Workflow beginning. commands: startService,waitforStartEvent
begin workflow command (1/2) -&gt; &quot;startService &quot; ...
end workflow command (1/2) -&gt; &quot;startService &quot;
begin workflow command (2/2) -&gt; &quot;waitforStartEvent &quot; ...
end workflow command (2/2) -&gt; &quot;waitforStartEvent &quot;
[command.timer: 1:03.392 sec]
Workflow completed. execution time: 1:03.392 sec
end workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot;
end workflow command (4/4) -&gt; &quot;Start &quot;
end workflow command (2/2) -&gt; &quot;Deploy -buildstamp 20090123-demo -resourcename .* -resourcetype [^\.]*&quot;
[command.timer.demo.Mediator.stagingDukesBank.Update: 4:36.961 sec]
Completed: execution time: 4:36.961 sec
&lt;/pre&gt;

==Verify change in staging==
You can now navigate to the staging instance of Dukes Bank and verify that the same version of the application has been deployed:
http://localhost:8280/bank/main (or your server's hostname)

[[Image:DukesBank UncleSamWelcome staging.png|500px]]

If you go to the site list in Workbench's service manager tool, you'll see that the JBossDukesBank-20090123-demo.ear is now the current package dependency for stagingDukesBank.

[[Image:SiteList Dukesbank StagingAndDev Deployed.png|500px]]

You can also look at the package list in Workbench and see that the same packages are deployed to both development and staging.

[[Image:PackageManager demo deployed staginganddev.png|500px]]

[[Category:PioneerCycling demo]]</text>
    </revision>
  </page>
  <page>
    <title>PioneerCycling Provisioning JBoss applications</title>
    <id>806</id>
    <revision>
      <id>14156</id>
      <timestamp>2010-11-10T16:00:27Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;ctl-depot&quot; to &quot;ctl-project&quot;</comment>
      <text xml:space="preserve">[[Image:pioneerCycling.gif|256px]]  This is part of the PioneerCycling portion of the [[ControlTier and ATG | ControlTier/ATG Demo]]

==Overview==

In this demo we are going to deploy a release of the full PioneerCycing application. This example deploys both JBoss and Solid RDB as well as their respective application specific packages, configures the integrated application, and starts the services in the appropriate order. Which release is used is specified by the buildstamp provided (if none, then the latest is used).

==Prerequisites==
This demo assumes you have completed:
* [[Building PioneerCycling Project]]
* [[PioneerCycling Provisioning JBoss instances]]
* [[PioneerCycling Checkout and Build]]

==Preparation==

Before getting started confirm that all of the necessary objects are deployed to CTL.

Run the [[ctl-project]] command:
&lt;pre&gt;
ctl-project -p PioneerCycling -a install
&lt;/pre&gt;
Output:
&lt;pre&gt;
&quot;Install&quot; command running for resource: (PioneerCyclingProjectBuilder) pioneerCycling
&quot;Install&quot; command running for resource: (AtgSolidRdb) staging
&quot;Install&quot; command running for resource: (Updater) development
&quot;Install&quot; command running for resource: (AtgSite) development
&quot;Install&quot; command running for resource: (AtgSite) staging
&quot;Install&quot; command running for resource: (AtgJBossServer) development
&quot;Install&quot; command running for resource: (AtgSolidRdbSchema) development
&quot;Install&quot; command running for resource: (CruiseControl) atg
&quot;Install&quot; command running for resource: (Updater) staging
&quot;Install&quot; command running for resource: (AtgJBossServer) staging
&quot;Install&quot; command running for resource: (AtgJBossModuleBuilder) pioneerCycling
&quot;Install&quot; command running for resource: (AtgSolidRdb) development
&quot;Install&quot; command running for resource: (AtgSolidRdbSchema) staging
&lt;/pre&gt;

==Update==

===View the process flow===

The process flow view shows that BuildAndUpdate actually is composed of two commands:
* Change-Dependencies: This reconfigures all the Services to use the artifacts from the Build step
* Deploy: This invokes the &quot;Deploy&quot; command across the Site's objects (updating both JBoss and SolidRdb services)


The process flow view generated by Workbench show off the steps:

[[Image:PioneerCyclingUpdaterUpdate.gif]]

You'll notice the the PioneerCycling.ear package isn't listed in the process flow above. This is because the process flow is dynamically generated and since we haven't yet deployed a PioneerCycling.ear to this JBoss server, the &quot;development PioneerCycling&quot; JBoss server doesn't have its .ear dependency set yet. When the Change Dependencies part of this process flow executes the .ear dependency will be set for the Deploy part of the process flow.

===Run Update using last buildstamp===
You can run Update without arguments to configure the Services in the Site to use the last buildstamp


&lt;pre&gt;
ctl -p PioneerCycling -t Updater -r development -c Update
&lt;/pre&gt;
Output:
&lt;pre&gt;
[demo@centos45 ctier]$ ctl -p PioneerCycling -t Updater -r development -c Update  -- -buildstamp 20090114
Start: &quot;Changes package dependencies and runs the coordinated deployment cycle across the configured Sites.&quot; commands: Change-Dependencies,Deploy
begin workflow command (1/2) -&gt; &quot;Change-Dependencies -buildstamp 20090114 -resourcename .* -resourcetype [^\.]*&quot; ...
Start: &quot;Query model and switch package dependencies to the specified version or buildstamp..&quot; Changing to package dependencies with buildstamp &quot;20090114&quot; ...
begin workflow command (1/1) -&gt; &quot;runChangeDependencies -dispatch -buildstamp 20090114 -version 20090114 -resourcename .* -resourcetype [^\.]* &quot; ...
Request succeeded.
end workflow command (1/1) -&gt; &quot;runChangeDependencies -dispatch -buildstamp 20090114 -version 20090114 -resourcename .* -resourcetype [^\.]* &quot;
Process View definition updated.
[command.timer.PioneerCycling.Mediator.development.Change-Dependencies: 16.807 sec]
Completed: Dependencies changed. execution time: 16.807 sec
end workflow command (1/2) -&gt; &quot;Change-Dependencies -buildstamp 20090114 -resourcename .* -resourcetype [^\.]*&quot;
begin workflow command (2/2) -&gt; &quot;Deploy -buildstamp 20090114 -resourcename .* -resourcetype [^\.]*&quot; ...
Dispatching command 'Deploy' to objects: development[AtgSite] ...
starting: development[AtgSite]-&gt;Deploy ...
Start: &quot;Run the service deployment cycle, stopping installing package dependencies, configuring and the starting it.&quot; commands: Stop,Packages-Install,Configure,Start
begin workflow command (1/4) -&gt; &quot;Stop -buildstamp 20090114 -resourcename .* -resourcetype [^\.]*&quot; ...
Dispatching command 'Stop' to objects: development[AtgSolidRdb], development[AtgJBossServer] ...
starting: development[AtgSolidRdb]-&gt;Stop ...
starting: development[AtgJBossServer]-&gt;Stop ...
begin workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot; ...
command beginning.
[command.timer.assertServiceIsDown: 0.253 sec]
command completed successfully. Execution time: 0.253 sec
end workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot;
begin workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot; ...
UID        PID  PPID  C STIME TTY          TIME CMD
end workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot;
end workflow command (1/4) -&gt; &quot;Stop -buildstamp 20090114 -resourcename .* -resourcetype [^\.]*&quot;
begin workflow command (2/4) -&gt; &quot;Packages-Install -buildstamp 20090114 -resourcename .* -resourcetype [^\.]*&quot; ...
Dispatching command 'Packages-Install' to objects: development[AtgJBossServer], development[AtgSolidRdb] ...
starting: development[AtgJBossServer]-&gt;Packages-Install ...
starting: development[AtgSolidRdb]-&gt;Packages-Install ...
Start: &quot;Install the configured package dependencies for the deployment.&quot; Beginning installation for packages:   jboss-4.0.5.GA.zip[JBossZip],  PioneerCycling-20090114.ear[AtgEar],  jdk-1_5_0_12-linux-i586.bin[JavaBin] ...
Dispatching command 'assertPackageIsVerified' to objects: PioneerCycling-20090114.ear[AtgEar], jdk-1_5_0_12-linux-i586.bin[JavaBin], jboss-4.0.5.GA.zip[JBossZip] ...
starting: PioneerCycling-20090114.ear[AtgEar]-&gt;assertPackageIsVerified ...
starting: jdk-1_5_0_12-linux-i586.bin[JavaBin]-&gt;assertPackageIsVerified ...
starting: jboss-4.0.5.GA.zip[JBossZip]-&gt;assertPackageIsVerified ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/AtgEar-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/AtgEar-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/AtgEar-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/AtgEar
Attempting to get ear-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/ear-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/ear-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/ear-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/ear
Attempting to get Package-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/Package-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/Package-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/Package-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/Package
Packages-Install invoking: PioneerCycling-20090114.ear[AtgEar]-&gt;Install -installroot /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/deploy
Start: &quot;Install object and run the package installation cycle.&quot; commands: assertPackageIsInstalled
begin workflow command (1/1) -&gt; &quot;assertPackageIsInstalled -installroot /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/deploy&quot; ...
Executing ant file: /home/demo/ctier/ctl/projects/PioneerCycling/modules/Package/bin/is-installed.xml
Running handler command: installPackage
begin workflow command (1/5) -&gt; &quot;installDependencies -filename PioneerCycling.ear -installroot /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/deploy -url http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/pkgs/PioneerCycling/AtgEar/ears/PioneerCycling-20090114.ear&quot; ...
Dispatching command 'Install' to objects:  ...
end workflow command (1/5) -&gt; &quot;installDependencies -filename PioneerCycling.ear -installroot /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/deploy -url http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/pkgs/PioneerCycling/AtgEar/ears/PioneerCycling-20090114.ear&quot;
begin workflow command (2/5) -&gt; &quot;prepare -filename PioneerCycling.ear -installroot /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/deploy -url http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/pkgs/PioneerCycling/AtgEar/ears/PioneerCycling-20090114.ear&quot; ...
end workflow command (2/5) -&gt; &quot;prepare -filename PioneerCycling.ear -installroot /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/deploy -url http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/pkgs/PioneerCycling/AtgEar/ears/PioneerCycling-20090114.ear&quot;
begin workflow command (3/5) -&gt; &quot;get -filename PioneerCycling.ear -installroot /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/deploy -url http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/pkgs/PioneerCycling/AtgEar/ears/PioneerCycling-20090114.ear&quot; ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/pkgs/PioneerCycling/AtgEar/ears/PioneerCycling-20090114.ear
To: /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/deploy/PioneerCycling.ear
Not modified - so not downloaded
end workflow command (3/5) -&gt; &quot;get -filename PioneerCycling.ear -installroot /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/deploy -url http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/pkgs/PioneerCycling/AtgEar/ears/PioneerCycling-20090114.ear&quot;
begin workflow command (4/5) -&gt; &quot;extract -filename PioneerCycling.ear -installroot /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/deploy -url http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/pkgs/PioneerCycling/AtgEar/ears/PioneerCycling-20090114.ear&quot; ...
end workflow command (4/5) -&gt; &quot;extract -filename PioneerCycling.ear -installroot /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/deploy -url http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/pkgs/PioneerCycling/AtgEar/ears/PioneerCycling-20090114.ear&quot;
begin workflow command (5/5) -&gt; &quot;finish -filename PioneerCycling.ear -installroot /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/deploy -url http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/pkgs/PioneerCycling/AtgEar/ears/PioneerCycling-20090114.ear&quot; ...
end workflow command (5/5) -&gt; &quot;finish -filename PioneerCycling.ear -installroot /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/deploy -url http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/pkgs/PioneerCycling/AtgEar/ears/PioneerCycling-20090114.ear&quot;
end workflow command (1/1) -&gt; &quot;assertPackageIsInstalled -installroot /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/deploy&quot;
[command.timer.PioneerCycling.Package.Install: 13.700 sec]
Workflow completed. execution time: 13.700 sec
Executing script: /home/demo/ctier/ctl/projects/PioneerCycling/modules/Package/bin/is-verified.xml ...
Package is VERIFIED
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/JavaBin-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/JavaBin-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/JavaBin-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/JavaBin
Attempting to get bin-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/bin-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/bin-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/bin-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/bin
Attempting to get Package-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/Package-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/Package-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/Package-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/Package
Packages-Install invoking: jdk-1_5_0_12-linux-i586.bin[JavaBin]-&gt;Install -installroot /home/demo/ctier/demo/atg/development/jdk1.5.0_12
Start: &quot;Install object and run the package installation cycle.&quot; commands: assertPackageIsInstalled
begin workflow command (1/1) -&gt; &quot;assertPackageIsInstalled -installroot /home/demo/ctier/demo/atg/development/jdk1.5.0_12&quot; ...
/home/demo/ctier/demo/atg/development/jdk1.5.0_12/LICENSE already exists, skipping installation
 
end workflow command (1/1) -&gt; &quot;assertPackageIsInstalled -installroot /home/demo/ctier/demo/atg/development/jdk1.5.0_12&quot;
[command.timer.PioneerCycling.Package.Install: 13.700 sec]
Workflow completed. execution time: 13.700 sec
Executing script: /home/demo/ctier/ctl/projects/PioneerCycling/modules/Package/bin/is-verified.xml ...
Package is VERIFIED
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/JBossZip-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/JBossZip-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/JBossZip-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/JBossZip
Attempting to get PlatformZip-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/PlatformZip-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/PlatformZip-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/PlatformZip-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/PlatformZip
Attempting to get zip-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/zip-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/zip-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/zip-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/zip
Attempting to get Package-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/Package-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/Package-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/Package-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/Package
Packages-Install invoking: jboss-4.0.5.GA.zip[JBossZip]-&gt;Install -installroot /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA
Start: &quot;Install object and run the package installation cycle.&quot; commands: assertPackageIsInstalled
begin workflow command (1/1) -&gt; &quot;assertPackageIsInstalled -installroot /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA&quot; ...
/home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/bin/run.sh already exists, skipping installation
[command.timer.assertPackageIsInstalled: 0.013 sec]
command completed successfully. Execution time: 0.013 sec
end workflow command (1/1) -&gt; &quot;assertPackageIsInstalled -installroot /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA&quot;
[command.timer.PioneerCycling.Package.Install: 13.700 sec]
Workflow completed. execution time: 13.700 sec
Executing script: /home/demo/ctier/ctl/projects/PioneerCycling/modules/Package/bin/is-verified.xml ...
Package is VERIFIED
Completed: Installed packages:   jboss-4.0.5.GA.zip[JBossZip],  PioneerCycling-20090114.ear[AtgEar],  jdk-1_5_0_12-linux-i586.bin[JavaBin]
Start: &quot;Install the configured package dependencies for the deployment.&quot; Beginning installation for packages:   ATG2006.3.bin[AtgPlatformInstaller],  jdk-1_5_0_12-linux-i586.bin[JavaBin] ...
Dispatching command 'assertPackageIsVerified' to objects: jdk-1_5_0_12-linux-i586.bin[JavaBin], ATG2006.3.bin[AtgPlatformInstaller] ...
starting: jdk-1_5_0_12-linux-i586.bin[JavaBin]-&gt;assertPackageIsVerified ...
starting: ATG2006.3.bin[AtgPlatformInstaller]-&gt;assertPackageIsVerified ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/JavaBin-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/JavaBin-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/JavaBin-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/JavaBin
Attempting to get bin-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/bin-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/bin-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/bin-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/bin
Attempting to get Package-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/Package-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/Package-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/Package-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/Package
Packages-Install invoking: jdk-1_5_0_12-linux-i586.bin[JavaBin]-&gt;Install -installroot /home/demo/ctier/demo/atg/development/jdk1.5.0_12
Start: &quot;Install object and run the package installation cycle.&quot; commands: assertPackageIsInstalled
begin workflow command (1/1) -&gt; &quot;assertPackageIsInstalled -installroot /home/demo/ctier/demo/atg/development/jdk1.5.0_12&quot; ...
/home/demo/ctier/demo/atg/development/jdk1.5.0_12/LICENSE already exists, skipping installation
 
end workflow command (1/1) -&gt; &quot;assertPackageIsInstalled -installroot /home/demo/ctier/demo/atg/development/jdk1.5.0_12&quot;
[command.timer.PioneerCycling.Package.Install: 13.700 sec]
Workflow completed. execution time: 13.700 sec
Executing script: /home/demo/ctier/ctl/projects/PioneerCycling/modules/Package/bin/is-verified.xml ...
Package is VERIFIED
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/AtgPlatformInstaller-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/AtgPlatformInstaller-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/AtgPlatformInstaller-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/AtgPlatformInstaller
Attempting to get bin-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/bin-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/bin-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/bin-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/bin
Attempting to get Package-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/Package-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/Package-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/Package-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/Package
Packages-Install invoking: ATG2006.3.bin[AtgPlatformInstaller]-&gt;Install -installroot /home/demo/ctier/demo/atg/development/ATG2006.3
Start: &quot;Install object and run the package installation cycle.&quot; commands: assertPackageIsInstalled
begin workflow command (1/1) -&gt; &quot;assertPackageIsInstalled -installroot /home/demo/ctier/demo/atg/development/ATG2006.3&quot; ...
end workflow command (1/1) -&gt; &quot;assertPackageIsInstalled -installroot /home/demo/ctier/demo/atg/development/ATG2006.3&quot;
[command.timer.PioneerCycling.AtgPlatformInstaller.Install: 3.053 sec]
Workflow completed. execution time: 3.053 sec
Executing script: /home/demo/ctier/ctl/projects/PioneerCycling/modules/Package/bin/is-verified.xml ...
Package is VERIFIED
Completed: Installed packages:   ATG2006.3.bin[AtgPlatformInstaller],  jdk-1_5_0_12-linux-i586.bin[JavaBin]
end workflow command (2/4) -&gt; &quot;Packages-Install -buildstamp 20090114 -resourcename .* -resourcetype [^\.]*&quot;
begin workflow command (3/4) -&gt; &quot;Configure -buildstamp 20090114 -resourcename .* -resourcetype [^\.]*&quot; ...
Dispatching command 'Configure' to objects: development[AtgJBossServer], development[AtgSolidRdb] ...
starting: development[AtgJBossServer]-&gt;Configure ...
starting: development[AtgSolidRdb]-&gt;Configure ...
Start: &quot;Configures the jboss server instance&quot; commands: Docs-Generate,configureDirectories,configureDataSources
begin workflow command (1/3) -&gt; &quot;Docs-Generate &quot; ...
Copying 5 files to /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default
Copying /home/demo/ctier/ctl/projects/PioneerCycling/modules/AtgJBossServer/templates/jboss-4.0.5.GA/server/default/conf/bindings.xml.template to /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/conf/bindings.xml
Copying /home/demo/ctier/ctl/projects/PioneerCycling/modules/AtgJBossServer/templates/jboss-4.0.5.GA/server/default/conf/run.conf.template to /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/conf/run.conf
Copying /home/demo/ctier/ctl/projects/PioneerCycling/modules/AtgJBossServer/templates/jboss-4.0.5.GA/server/default/conf/login-config.xml.template to /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/conf/login-config.xml
Copying /home/demo/ctier/ctl/projects/PioneerCycling/modules/AtgJBossServer/templates/jboss-4.0.5.GA/server/default/deploy/jbossweb-tomcat55.sar/server.xml.template to /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/deploy/jbossweb-tomcat55.sar/server.xml
Copying /home/demo/ctier/ctl/projects/PioneerCycling/modules/AtgJBossServer/templates/jboss-4.0.5.GA/server/default/conf/jboss-service.xml.template to /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/conf/jboss-service.xml
end workflow command (1/3) -&gt; &quot;Docs-Generate &quot;
begin workflow command (2/3) -&gt; &quot;configureDirectories &quot; ...
end workflow command (2/3) -&gt; &quot;configureDirectories &quot;
begin workflow command (3/3) -&gt; &quot;configureDataSources &quot; ...
Updating AtgSolidRdbSchema module ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/AtgSolidRdbSchema-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/AtgSolidRdbSchema-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/AtgSolidRdbSchema-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/AtgSolidRdbSchema
Attempting to get AtgRdbSchema-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/AtgRdbSchema-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/AtgRdbSchema-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/AtgRdbSchema-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/AtgRdbSchema
Attempting to get Deployment-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/Deployment-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/Deployment-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/Deployment-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/Deployment
Unable to convert list option to loop controls.
Updating properties ...
Updating process view file ...
Process View definition updated.
Framework info:
Type module: /home/demo/ctier/ctl/projects/PioneerCycling/modules/AtgSolidRdbSchema
Object directory: /home/demo/ctier/ctl/projects/PioneerCycling/resources/AtgSolidRdbSchema/development
Object properties file: /home/demo/ctier/ctl/projects/PioneerCycling/resources/AtgSolidRdbSchema/development/var/resource.properties
Object process view file: /home/demo/ctier/ctl/projects/PioneerCycling/resources/AtgSolidRdbSchema/development/var/pview.xml
Copying 1 file to /home/demo/ctier/ctl/projects/PioneerCycling/resources/AtgJBossServer/development/var
Deleting: /home/demo/ctier/ctl/projects/PioneerCycling/resources/AtgJBossServer/development/var/null1434290848
Copying 1 file to /home/demo/ctier/ctl/projects/PioneerCycling/resources/AtgJBossServer/development/var
Deleting: /home/demo/ctier/ctl/projects/PioneerCycling/resources/AtgJBossServer/development/var/null1932032769
Deleting: /home/demo/ctier/ctl/projects/PioneerCycling/resources/AtgJBossServer/development/var/null350400787
Copying 1 file to /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/deploy
Copying /home/demo/ctier/ctl/projects/PioneerCycling/modules/AtgJBossServer/templates/datasource/atg-ds.xml.template to /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/deploy/AtgSolidRdb-development-CTAUTOGEN-ds.xml
Copying 1 file to /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/conf
Copying /home/demo/ctier/ctl/projects/PioneerCycling/modules/AtgJBossServer/templates/jboss-4.0.5.GA/server/default/conf/login-config.xml.template to /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/conf/login-config.xml
end workflow command (3/3) -&gt; &quot;configureDataSources &quot;
[command.timer.PioneerCycling.AtgJBossServer.Configure: 25.646 sec]
Workflow completed. execution time: 25.646 sec
begin workflow command (1/1) -&gt; &quot;Docs-Generate &quot; ...
command beginning.
Copying 1 file to /home/demo/ctier/demo/atg/development/ATG2006.3/DAS/solid/atgdb
Copying 1 file to /home/demo/ctier/demo/atg/development/ATG2006.3/home/localconfig/atg/dynamo/service/jdbc
[command.timer.Docs-Generate: 0.046 sec]
command completed successfully. Execution time: 0.046 sec
end workflow command (1/1) -&gt; &quot;Docs-Generate &quot;
end workflow command (3/4) -&gt; &quot;Configure -buildstamp 20090114 -resourcename .* -resourcetype [^\.]*&quot;
begin workflow command (4/4) -&gt; &quot;Start -buildstamp 20090114 -resourcename .* -resourcetype [^\.]*&quot; ...
Dispatching command 'Start' to objects: development[AtgJBossServer], development[AtgSolidRdb] ...
starting: development[AtgJBossServer]-&gt;Start ...
starting: development[AtgSolidRdb]-&gt;Start ...
begin workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot; ...
UID        PID  PPID  C STIME TTY          TIME CMD
Running handler command: startServiceWrapper
Workflow beginning. commands: startService,waitforStartEvent
begin workflow command (1/2) -&gt; &quot;startService &quot; ...
end workflow command (1/2) -&gt; &quot;startService &quot;
begin workflow command (2/2) -&gt; &quot;waitforStartEvent &quot; ...
end workflow command (2/2) -&gt; &quot;waitforStartEvent &quot;
[command.timer: 3:23.010 sec]
Workflow completed. execution time: 3:23.010 sec
end workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot;
begin workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot; ...
command beginning.
Running handler command: startService
command beginning.
[command.timer.startService: 0.285 sec]
command completed successfully. Execution time: 0.285 sec
end workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot;
end workflow command (4/4) -&gt; &quot;Start -buildstamp 20090114 -resourcename .* -resourcetype [^\.]*&quot;
[command.timer.PioneerCycling.AtgSite.development.Deploy: 5:41.534 sec]
Completed: execution time: ${command.timer}
end workflow command (2/2) -&gt; &quot;Deploy -buildstamp 20090114 -resourcename .* -resourcetype [^\.]*&quot;
[command.timer.PioneerCycling.Mediator.development.Update: 6:01.881 sec]
Completed: execution time: 6:01.881 sec
&lt;/pre&gt;

===Run Update specifying a specific buildstamp===
Very typically, you may want to deploy a particular set of build artifacts. Do this by specifying the &quot;&lt;code&gt;-buildstamp&lt;/code&gt;&quot; option.

Substitute the -buildstamp argument with one you used during the [[PioneerCycling Checkout and Build]] demo.

&lt;pre&gt;
ctl -p PioneerCycling -t Updater -r development -c Update -- -buildstamp 20090114
&lt;/pre&gt;
Output:
&lt;pre&gt;
Start: &quot;Changes package dependencies and runs the coordinated deployment cycle across the configured Sites.&quot; commands: Change-Dependencies,Deploy
begin workflow command (1/2) -&gt; &quot;Change-Dependencies -buildstamp 20090114 -resourcename .* -resourcetype [^\.]*&quot; ...
Start: &quot;Query model and switch package dependencies to the specified version or buildstamp..&quot; Changing to package dependencies with buildstamp &quot;20090114&quot; ...
&lt;/pre&gt;

===View current .ear dependency in Workbench===
If you view the child dependencies of the &quot;development&quot; AtgJbossServer in Workbench you can see which .ear package the Deploy command is currently set to use. If you ran the &quot;development&quot; AtgJbossServer's Deploy command directly this would be the package deployed if necessary.  
[[image:PioneerCyclingVerifyPackageDependency.gif]]

===View the PioneerCycling website===
You can now view the running PioneerCycling website. Go to the instructions on [[Accessing the PioneerCycling Website]] for more information.

[[Category:PioneerCycling demo]]</text>
    </revision>
  </page>
  <page>
    <title>PioneerCycling Provisioning JBoss instances</title>
    <id>799</id>
    <revision>
      <id>14157</id>
      <timestamp>2010-11-10T16:00:27Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;ctl-depot&quot; to &quot;ctl-project&quot;</comment>
      <text xml:space="preserve">[[Image:pioneerCycling.gif|256px]] This is part of the PioneerCycling portion of the [[ControlTier and ATG | ATG/PioneerCycling ControlTier Demo]] 
==Overview==
In this demo we are going to deploy and start an empty instance of JBoss that will later have the PioneerCycling application deployed to it. This example shows the AtgJBossServer type coordinating the deploy cycle that includes: shutdown, package download, configuration and startup.

The AtgJBossServer type is actually a subtype of [[Service]] and therefore inherits deployment and service cycle management commands from the Service type.

See also:
* [[PioneerCycling and Operations]] page for information about managing the service runstate (e.g., startup, shutdown, status).
* [[PioneerCycling and Multiple Nodes]] page for information on deploying JBoss to more than one Node

&lt;!--[[Image:Screencast-icon.png]]  [http://open.controltier.org/media/BasicDemo1_JBossProvision.swf Watch a video of this demo (less than 5:00)]--&gt;

==Prerequisites==
This demo assumes you have completed:
* [[Building PioneerCycling Project|Setup PioneerCycling Project]]

==Preparation==

Before getting started confirm the JBossServer and Site objects are deployed to CTL.

Run the [[ctl-project]] install command for the demo project:

&lt;pre&gt;
[demo@centos45 ctier]$ ctl-project -p PioneerCycling -a install 
&quot;Install&quot; command running for resource: (AtgSite) development
.
.
.
&quot;Install&quot; command running for resource: (AtgJBossServer) development
.
.
.
&lt;/pre&gt;

Your output should show the AtgSite and AtgJBossServer (among other objects).

==Deploy==
Once you have completed the preparation steps, you are now ready to demonstrate the full deploy cycle. 

===Preview the Process Flow===
The Deploy command is a workflow command that carries out the steps of the deploy cycle. You can visualize the &quot;process flow&quot; of the Deploy command in Workbench. 

[[Image:pioneerCyclingAtgJBossServerDeploy.gif]]

You can see the Deploy workflow has several steps:
# Stop: Shutdown the server (if it is not already stopped)
# Packages-Install: Download, extract and install any package dependencies
# Configure: Perform post package installation configuration steps
# Start: Start up the server.

You can also see that these steps are workflows themselves, each of which has it's own sub structure. Note also that all the commands are running on the Node &quot;centos45.local&quot;.

This process flow shown in the image above can be found by examining the development object in Workbench:
# From Workbench's main screen select the Service Manager tool (make sure you are in the project where you setup the demo)
# Select Site List and then expand the tree under development (click on the triangle to the left).
# Expand the list of of Child Dependencies and then click on the name &quot;development [AtgJBossServer]&quot; (this will take you to the object view)
# Click on the commands tab and then click the process flow button for the Deploy command (yellow button with green arrow on the right)

===Run the Deploy Command===

Run the &lt;code&gt;Deploy&lt;/code&gt; command without arguments:

&lt;pre&gt;
ctl -p PioneerCycling -t AtgJBossServer -r development -c Deploy
&lt;/pre&gt;

This command tells the CTL client to &quot;run the Deploy command for the development object (of type AtgJBossServer) in the PioneerCycling project&quot;.

You should output similar to that shown below:
&lt;pre&gt;
[demo@centos45 ctier]$ ctl -p PioneerCycling -t AtgJBossServer -r development -c Deploy
begin workflow command (1/4) -&gt; &quot;Stop &quot; ...
begin workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot; ...
UID        PID  PPID  C STIME TTY          TIME CMD
end workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot;
end workflow command (1/4) -&gt; &quot;Stop &quot;
begin workflow command (2/4) -&gt; &quot;Packages-Install &quot; ...
Start: &quot;Install the configured package dependencies for the deployment.&quot; Beginning installation for packages:   jdk-1_5_0_12-linux-i586.bin[JavaBin],  jboss-4.0.5.GA.zip[JBossZip] ...
Dispatching command 'assertPackageIsVerified' to objects: jdk-1_5_0_12-linux-i586.bin[JavaBin], jboss-4.0.5.GA.zip[JBossZip] ...
starting: jdk-1_5_0_12-linux-i586.bin[JavaBin]-&gt;assertPackageIsVerified ...
starting: jboss-4.0.5.GA.zip[JBossZip]-&gt;assertPackageIsVerified ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/JavaBin-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/JavaBin-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/JavaBin-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/JavaBin
Attempting to get bin-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/bin-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/bin-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/bin-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/bin
Attempting to get Package-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/Package-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/Package-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/Package-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/Package
Packages-Install invoking: jdk-1_5_0_12-linux-i586.bin[JavaBin]-&gt;Install -installroot /home/demo/ctier/demo/atg/development/jdk1.5.0_12
Start: &quot;Install object and run the package installation cycle.&quot; commands: assertPackageIsInstalled
begin workflow command (1/1) -&gt; &quot;assertPackageIsInstalled -installroot /home/demo/ctier/demo/atg/development/jdk1.5.0_12&quot; ...
/home/demo/ctier/demo/atg/development/jdk1.5.0_12/LICENSE already exists, skipping installation
 
end workflow command (1/1) -&gt; &quot;assertPackageIsInstalled -installroot /home/demo/ctier/demo/atg/development/jdk1.5.0_12&quot;
[command.timer.PioneerCycling.Package.Install: 1.249 sec]
Workflow completed. execution time: 1.249 sec
Executing script: /home/demo/ctier/ctl/projects/PioneerCycling/modules/Package/bin/is-verified.xml ...
Package is VERIFIED
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/JBossZip-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/JBossZip-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/JBossZip-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/JBossZip
Attempting to get PlatformZip-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/PlatformZip-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/PlatformZip-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/PlatformZip-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/PlatformZip
Attempting to get zip-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/zip-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/zip-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/zip-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/zip
Attempting to get Package-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/Package-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/Package-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/Package-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/Package
Packages-Install invoking: jboss-4.0.5.GA.zip[JBossZip]-&gt;Install -installroot /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA
Start: &quot;Install object and run the package installation cycle.&quot; commands: assertPackageIsInstalled
begin workflow command (1/1) -&gt; &quot;assertPackageIsInstalled -installroot /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA&quot; ...
/home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/bin/run.sh already exists, skipping installation
[command.timer.assertPackageIsInstalled: 0.012 sec]
command completed successfully. Execution time: 0.012 sec
end workflow command (1/1) -&gt; &quot;assertPackageIsInstalled -installroot /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA&quot;
[command.timer.PioneerCycling.Package.Install: 1.249 sec]
Workflow completed. execution time: 1.249 sec
Executing script: /home/demo/ctier/ctl/projects/PioneerCycling/modules/Package/bin/is-verified.xml ...
Package is VERIFIED
Completed: Installed packages:   jdk-1_5_0_12-linux-i586.bin[JavaBin],  jboss-4.0.5.GA.zip[JBossZip]
end workflow command (2/4) -&gt; &quot;Packages-Install &quot;
begin workflow command (3/4) -&gt; &quot;Configure &quot; ...
Start: &quot;Configures the jboss server instance&quot; commands: Docs-Generate,configureDirectories,configureDataSources
begin workflow command (1/3) -&gt; &quot;Docs-Generate &quot; ...
Copying 5 files to /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default
Copying /home/demo/ctier/ctl/projects/PioneerCycling/modules/AtgJBossServer/templates/jboss-4.0.5.GA/server/default/conf/bindings.xml.template to /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/conf/bindings.xml
Copying /home/demo/ctier/ctl/projects/PioneerCycling/modules/AtgJBossServer/templates/jboss-4.0.5.GA/server/default/conf/run.conf.template to /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/conf/run.conf
Copying /home/demo/ctier/ctl/projects/PioneerCycling/modules/AtgJBossServer/templates/jboss-4.0.5.GA/server/default/conf/login-config.xml.template to /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/conf/login-config.xml
Copying /home/demo/ctier/ctl/projects/PioneerCycling/modules/AtgJBossServer/templates/jboss-4.0.5.GA/server/default/deploy/jbossweb-tomcat55.sar/server.xml.template to /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/deploy/jbossweb-tomcat55.sar/server.xml
Copying /home/demo/ctier/ctl/projects/PioneerCycling/modules/AtgJBossServer/templates/jboss-4.0.5.GA/server/default/conf/jboss-service.xml.template to /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/conf/jboss-service.xml
end workflow command (1/3) -&gt; &quot;Docs-Generate &quot;
begin workflow command (2/3) -&gt; &quot;configureDirectories &quot; ...
end workflow command (2/3) -&gt; &quot;configureDirectories &quot;
begin workflow command (3/3) -&gt; &quot;configureDataSources &quot; ...
Updating AtgSolidRdbSchema module ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/AtgSolidRdbSchema-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/AtgSolidRdbSchema-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/AtgSolidRdbSchema-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/AtgSolidRdbSchema
Attempting to get AtgRdbSchema-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/AtgRdbSchema-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/AtgRdbSchema-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/AtgRdbSchema-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/AtgRdbSchema
Attempting to get Deployment-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/Deployment-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/Deployment-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/Deployment-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/Deployment
Unable to convert list option to loop controls.
Updating properties ...
Updating process view file ...
Process View definition updated.
Framework info:
Type module: /home/demo/ctier/ctl/projects/PioneerCycling/modules/AtgSolidRdbSchema
Object directory: /home/demo/ctier/ctl/projects/PioneerCycling/resources/AtgSolidRdbSchema/development
Object properties file: /home/demo/ctier/ctl/projects/PioneerCycling/resources/AtgSolidRdbSchema/development/var/resource.properties
Object process view file: /home/demo/ctier/ctl/projects/PioneerCycling/resources/AtgSolidRdbSchema/development/var/pview.xml
Copying 1 file to /home/demo/ctier/ctl/projects/PioneerCycling/resources/AtgJBossServer/development/var
Deleting: /home/demo/ctier/ctl/projects/PioneerCycling/resources/AtgJBossServer/development/var/null835234943
Copying 1 file to /home/demo/ctier/ctl/projects/PioneerCycling/resources/AtgJBossServer/development/var
Deleting: /home/demo/ctier/ctl/projects/PioneerCycling/resources/AtgJBossServer/development/var/null1134313208
Deleting: /home/demo/ctier/ctl/projects/PioneerCycling/resources/AtgJBossServer/development/var/null539522194
Copying 1 file to /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/deploy
Copying /home/demo/ctier/ctl/projects/PioneerCycling/modules/AtgJBossServer/templates/datasource/atg-ds.xml.template to /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/deploy/AtgSolidRdb-development-CTAUTOGEN-ds.xml
Copying 1 file to /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/conf
Copying /home/demo/ctier/ctl/projects/PioneerCycling/modules/AtgJBossServer/templates/jboss-4.0.5.GA/server/default/conf/login-config.xml.template to /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/conf/login-config.xml
end workflow command (3/3) -&gt; &quot;configureDataSources &quot;
[command.timer.PioneerCycling.AtgJBossServer.Configure: 15.520 sec]
Workflow completed. execution time: 15.520 sec
end workflow command (3/4) -&gt; &quot;Configure &quot;
begin workflow command (4/4) -&gt; &quot;Start &quot; ...
begin workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot; ...
UID        PID  PPID  C STIME TTY          TIME CMD
Running handler command: startServiceWrapper
Workflow beginning. commands: startService,waitforStartEvent
begin workflow command (1/2) -&gt; &quot;startService &quot; ...
end workflow command (1/2) -&gt; &quot;startService &quot;
begin workflow command (2/2) -&gt; &quot;waitforStartEvent &quot; ...
end workflow command (2/2) -&gt; &quot;waitforStartEvent &quot;
[command.timer: 1:12.972 sec]
Workflow completed. execution time: 1:12.972 sec
end workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot;
end workflow command (4/4) -&gt; &quot;Start &quot;
&lt;/pre&gt;

You can see output from each of the workflow commands (and their workflow commands, too).

===Visually verify that JBoss is running===
At this point, you should be able to see the management screen of an empty JBoss instance at http://centos45.local:8180 (or your server's hostname).

[[image:pioneerCyclingJBoss8180.gif]]

===Use CTL to verify JBoss is running===
You can run a CTL command to check the status of the JBoss instance like so:
&lt;pre&gt;
ctl -p demo -t AtgJBossServer -r development -c Status
&lt;/pre&gt;
&lt;pre&gt;
begin workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot; ...
JBoss is UP.
end workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot;
&lt;/pre&gt;

== Summary ==

In this Demo we covered:
* Viewing the process flow of a workflow command in Workbench
* Using the Deploy command to deploy and start an empty JBoss server


Related demos:
* [[PioneerCycling Checkout and Build]] for information on coordinating the build process for the application packages.
* [[PioneerCycling and Operations]] for information about managing the service cycle of the JBoss server(e.g., startup, shutdown, status).

[[Category:PioneerCycling demo]]</text>
    </revision>
  </page>
  <page>
    <title>PioneerCycling and Continuous Integration</title>
    <id>818</id>
    <revision>
      <id>14159</id>
      <timestamp>2010-11-10T16:01:31Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;ctl-depot&quot; to &quot;ctl-project&quot;</comment>
      <text xml:space="preserve">[[Image:pioneerCycling.gif|256px]] This is part of the PioneerCycling portion of the [[ControlTier and ATG | ATG/PioneerCycling ControlTier Demo]] 

==Overview==

This page describes how to demonstrate continuous deployment via CruiseControl for the PioneerCycling JBoss application. This example shows the CruiseControl type coordinating the deploy cycle via AtgJBossServer.
The AtgJBossServer type is actually a subtype of Service and therefore inherits the deploy and service cycle management commands (that includes: shutdown, package download, configuration and startup).

==Preparation==

This page describes how to provision CruiseControl instances both locally and via distributed commands. Before getting started confirm the CruiseControl object is installed to CTL.

Run the ctl-project command:

&lt;pre&gt;
$ ctl-project -p demo -a install
.
.
.
&quot;Install&quot; command running for resource: (CruiseControl) elements
.
.
.
&lt;/pre&gt;
Your output should show the CruiseControl  (among other objects).

==Deploy==

CruiseControl like any Service is deployed using the &quot;Deploy&quot; command. Like other examples of Deploy, this is a workflow that will stop, install package dependencies, generate configuration and then start the CruiseControl instance.

Run &quot;Deploy&quot; without arguments:

&lt;pre&gt;
ctl -p PioneerCycling -t CruiseControl -r atg -c Deploy
&lt;/pre&gt;
... which should produce output similar to below:
&lt;pre&gt;
begin workflow command (1/4) -&gt; &quot;Stop &quot; ...
begin workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot; ...
CruiseControl is down.
.
.
.
Start: &quot;Install the configured package dependencies for the deployment.&quot; 
Beginning installation for packages:   cruisecontrol-bin-2.7.1.zip[CruiseControlZip] ...
.
.
.
Running handler command: startService
CruiseControl started.
end workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot;
end workflow command (4/4) -&gt; &quot;Start &quot;

&lt;/pre&gt;

The CruiseControl instance should be available from build box at http://localhost:8081/dashboard or similar (depending on your node setup). In addition you'll find a &quot;boot.log&quot; and &quot;cruisecontrol.log&quot; in the CruiseControl installation directory.

[[Image:PioneerCyclingCruiseControlDashboard.gif]]


As soon as CruiseControl comes up for the first time it will kick-off an initial build and put the resultant package into the ControlTier server's package repository.

As a general rule, you can find an object's configuration properties (for example, in this case, the Cruisecontrol installation directory - ccDir) as follows:

&lt;pre&gt;
[demo@centos45 ctier]$ ctl -p PioneerCycling -t CruiseControl -r atg -c Properties
[MULTI_LINE]
# atg [CruiseControl] #

ATG module library continuous integration server

## Attributes ##

*  basedir: &quot;/home/demo/ctier/demo/atg/build/cruisecontrol-bin-2.7.1/projects/pioneerCycling&quot;
*  ccDir: &quot;/home/demo/ctier/demo/atg/build/cruisecontrol-bin-2.7.1&quot;
*  cruiseControlInterval: &quot;300&quot;
*  cruiseControlJavaHome: &quot;${env.JAVA_HOME}&quot;
*  cruiseControlJmxPort: &quot;8001&quot;
*  cruiseControlMailHost: &quot;localhost&quot;
*  cruiseControlPackageBase: &quot;cruisecontrol-bin-2.7.1&quot;
*  cruiseControlPath: &quot;/bin:/usr/bin&quot;
*  cruiseControlRmiPort: &quot;1100&quot;
*  cruiseControlThreads: &quot;1&quot;
*  cruiseControlWebPort: &quot;8081&quot;
*  defaultAllowMultiplePackageMatches: &quot;false&quot;
*  defaultDeploymentType: &quot;CruiseControl&quot;
*  defaultFailIfPackageNotReplaced: &quot;true&quot;
*  defaultPackageName: &quot;.*&quot;
*  defaultPackageProximity: &quot;1&quot;
*  defaultPackageType: &quot;[^\.]*&quot;
*  dirlist: &quot;bin,logs,var&quot;
*  errorNotificationRecipient: &quot;${framework.admin.tolist}&quot;
*  service-isdown-executable: &quot;&quot;
*  service-isdown-script: &quot;&quot;
*  service-isup-executable: &quot;&quot;
*  service-isup-script: &quot;&quot;
*  service-start-executable: &quot;&quot;
*  service-start-script: &quot;&quot;
*  service-stop-executable: &quot;&quot;
*  service-stop-script: &quot;&quot;
*  successNotificationRecipient: &quot;${framework.admin.tolist}&quot;
*  targetdir: &quot;/home/demo/ctier/demo/atg/build/cruisecontrol-bin-2.7.1/projects/pioneerCycling&quot;

## Dependencies ##

### Parent Dependencies ###
1.   centos45.local [Node]

### Child Dependencies ###

1.   pioneerCycling [AtgJBossModuleBuilder]
    *  basedir: &quot;/home/demo/ctier/demo/atg/build/cruisecontrol-bin-2.7.1/projects/pioneerCycling&quot;
    *  deployment-basedir: &quot;/home/demo/ctier/demo/atg/build/cruisecontrol-bin-2.7.1/projects/pioneerCycling &quot;
    *  deployment-install-root: &quot;/home/demo/ctier/demo/atg/build/cruisecontrol-bin-2.7.1/projects/pioneerCycling                                                         &quot;
    *  deployment-startup-rank: &quot;2                                                          &quot;
    *  doc: &quot;PioneerCycling ATG JBoss module builder&quot;
    *  install-root: &quot;/home/demo/ctier/demo/atg/build/cruisecontrol-bin-2.7.1/projects/pioneerCycling&quot;
    *  name: &quot;pioneerCycling&quot;
    *  order: &quot;Deployment&quot;
    *  runlevel: &quot;2&quot;
    *  startup-rank: &quot;2&quot;
    *  type: &quot;&quot;
2.   cruisecontrol-bin-2.7.1.zip [CruiseControlZip]
    *  doc: &quot;CruiseControl continuous integration server package&quot;
    *  name: &quot;cruisecontrol-bin-2.7.1.zip&quot;
    *  order: &quot;Package&quot;
    *  package-arch: &quot;noarch&quot;
    *  package-base: &quot;cruisecontrol-bin-2.7.1&quot;
    *  package-buildtime: &quot;&quot;
    *  package-filename: &quot;cruisecontrol-bin-2.7.1.zip&quot;
    *  package-filetype: &quot;zip&quot;
    *  package-install-rank: &quot;30&quot;
    *  package-install-root: &quot;/home/demo/ctier/demo/atg/build/cruisecontrol-bin-2.7.1&quot;
    *  package-release: &quot;&quot;
    *  package-release-tag: &quot;&quot;
    *  package-repo-url: &quot;http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/pkgs/PioneerCycling/zip/zips/cruisecontrol-bin-2.7.1.zip&quot;
    *  package-restart: &quot;false&quot;
    *  package-vendor: &quot;ThoughtWorks, Inc.&quot;
    *  package-version: &quot;2.7.1&quot;
    *  type: &quot;CruiseControlZip&quot;

&lt;/pre&gt;

==Triggering a build==

You can demonstrate how CruiseControl can kick off the AtgJBossAntBuilder's &quot;Build&quot; workflow upon source code commit events. In this scenario a developer commits a change to the source code repository which is detected by the CruiseControl CI loop. It then invokes the build process which includes staging the build artifact to the repository.

You can trigger a build without a code commit via either the home page or dashboard urls. Simply find the &quot;pioneerCycing&quot; project and then push the Build button:

[[Image:DukesBank-CruiseControl-trigger-build.png]]

The status will change to &quot;building&quot;.

You can view the output of the CruiseControl build by looking at the log output. Locate the build event and then view the log file.
You should see output similar to that shown below.

[[Image:DukesBank-CruiseControl-buildlog.png]]

Notice the scmCheckout, runBuildscript steps were successful and the Build workflow running &quot;repoImport&quot;. The repoImport command found the artifact is about to upload it to the repository.

===Lookup artifact in the repository===

You can use the AtgJBossModuleBuilder's &quot;repoFind&quot; command to list the AtgEar packages in the repository.

&lt;pre&gt;
$ ctl -p PioneerCycling -t AtgJBossModuleBuilder -r pioneerCycling -c repoFind -- -packagetype AtgEar
Cleaning up old session data ...
Deleting: /home/alexh/ctier/ctl/projects/demo/resources/JBossAntBuilder/dukesBank/var/sessions/find.session
Querying model for matching package objects ...
|
|--(JBossEar) PioneerCycling-.1.2.3.1080.ear
.
.
.
&lt;/pre&gt;

Alternatively, you can list the AtgEar packages in Workbench via the &quot;Package Manager&quot; tool.
Clicking on the package will show its metadata:

[[Image:PioneerCyclingAtgEarObjectView.gif]]

==Connecting to Deploy==

With the AtgEar package built and uploaded to the repository, it is available for future deployments.

See the [[PioneerCycling Provisioning JBoss applications]] page

==Automating Deployments within the Continuous Integration Loop ==

It is frequently desirable to automate the deployment of a build produced by the Continuous Integration Solution such CruiseControl or Hudson.  The following describes how to configure &quot;Auto Deploy&quot; for the PioneerCycling build produced by CruiseControl:

Using your favorite editor:

&lt;pre&gt;
[demo@centos45 pioneerCycling]$ cd $CTIER_ROOT/pioneerCycling
[demo@centos45 pioneerCycling]$ vi default-object.xml 
&lt;/pre&gt; 

reconfigure the BuilderAutoUpdate setting from false:

&lt;pre&gt;
        &lt;setting type=&quot;BuilderAutoUpdate&quot; name=&quot;pioneerCycling&quot; description=&quot;automatically deploy as part of Continuous Integration Loop&quot; settingValue=&quot;false&quot;/&gt;
&lt;/pre&gt;

to true:

&lt;pre&gt;
        &lt;setting type=&quot;BuilderAutoUpdate&quot; name=&quot;pioneerCycling&quot; description=&quot;automatically deploy as part of Continuous Integration Loop&quot; settingValue=&quot;true&quot;/&gt;
&lt;/pre&gt;

Load Object changes  into the Project:

&lt;pre&gt;
[demo@centos45 pioneerCycling]$ ctl -p PioneerCycling -t AtgPioneerCyclingProjectBuilder -r pioneerCycling -c load-resources -- -filename default-object.xml
Loading &quot;/home/demo/ctier/pioneerCycling/default-object.xml&quot; ...
1 file(s) have been successfully validated.
Processing /home/demo/ctier/pioneerCycling/default-object.xml to /home/demo/ctier/ctl/var/tmp/projectxml-1695827362.xml
Loading stylesheet /home/demo/ctier/ctl/projects/PioneerCycling/modules/ProjectBuilder/lib/load-resources/projectxml/project.xsl
Mapping XML to properties ...
Collecting object attributes ...
Batching object attribute updates ...
Batching resource and referrer updates ...
Executing batch update ...
&lt;/pre&gt;

ReDeploy CruiseControl to regenerate its configuration:

&lt;pre&gt;
[demo@centos45 pioneerCycling]$  ctl -p PioneerCycling -t CruiseControl -r atg -c Deploy
begin workflow command (1/4) -&gt; &quot;Stop &quot; ...
begin workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot; ...
Running handler command: stopService
CruiseControl stopped.
end workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot;
end workflow command (1/4) -&gt; &quot;Stop &quot;
begin workflow command (2/4) -&gt; &quot;Packages-Install &quot; ...
Start: &quot;Install the configured package dependencies for the deployment.&quot; Beginning installation for packages:   cruisecontrol-bin-2.7.1.zip[CruiseControlZip] ...
Dispatching command 'assertPackageIsVerified' to objects: cruisecontrol-bin-2.7.1.zip[CruiseControlZip] ...
starting: cruisecontrol-bin-2.7.1.zip[CruiseControlZip]-&gt;assertPackageIsVerified ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/CruiseControlZip-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/CruiseControlZip-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/CruiseControlZip-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/CruiseControlZip
Attempting to get PlatformZip-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/PlatformZip-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/PlatformZip-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/PlatformZip-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/PlatformZip
Attempting to get zip-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/zip-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/zip-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/zip-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/zip
Attempting to get Package-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/Package-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/Package-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/Package-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/Package
Packages-Install invoking: cruisecontrol-bin-2.7.1.zip[CruiseControlZip]-&gt;Install -installroot /home/demo/ctier/demo/atg/build/cruisecontrol-bin-2.7.1
Start: &quot;Install object and run the package installation cycle.&quot; commands: assertPackageIsInstalled
begin workflow command (1/1) -&gt; &quot;assertPackageIsInstalled -installroot /home/demo/ctier/demo/atg/build/cruisecontrol-bin-2.7.1&quot; ...
/home/demo/ctier/demo/atg/build/cruisecontrol-bin-2.7.1/README.txt already exists, skipping installation
[command.timer.PioneerCycling.CruiseControlZip.cruisecontrol-bin-2.7.1.zip.assertPackageIsInstalled: 0.006 sec]
end workflow command (1/1) -&gt; &quot;assertPackageIsInstalled -installroot /home/demo/ctier/demo/atg/build/cruisecontrol-bin-2.7.1&quot;
[command.timer.PioneerCycling.Package.Install: 1.347 sec]
Workflow completed. execution time: 1.347 sec
Executing script: /home/demo/ctier/ctl/projects/PioneerCycling/modules/Package/bin/is-verified.xml ...
Package is VERIFIED
Completed: Installed packages:   cruisecontrol-bin-2.7.1.zip[CruiseControlZip]
end workflow command (2/4) -&gt; &quot;Packages-Install &quot;
begin workflow command (3/4) -&gt; &quot;Configure &quot; ...
begin workflow command (1/1) -&gt; &quot;Docs-Generate &quot; ...
Copying 2 files to /home/demo/ctier/demo/atg/build/cruisecontrol-bin-2.7.1
Generating CruiseControl project from AtgJBossModuleBuilder &quot;pioneerCycling&quot;
[command.timer.AntBuilder.generateProject: 0.027 sec]
Deleting: /home/demo/ctier/ctl/projects/PioneerCycling/resources/CruiseControl/atg/var/config.AtgJBossModuleBuilder.pioneerCycling.xml
end workflow command (1/1) -&gt; &quot;Docs-Generate &quot;
end workflow command (3/4) -&gt; &quot;Configure &quot;
begin workflow command (4/4) -&gt; &quot;Start &quot; ...
begin workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot; ...
Running handler command: startService
CruiseControl started.
end workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot;
end workflow command (4/4) -&gt; &quot;Start &quot;
&lt;/pre&gt;


Via CruiseControl (http://localhost:8081/dashboard or similar), force the build to verify auto deploy:


[[Image:PioneerCyclingCruiseControlAutoSchedule.gif]]


In addition to the uploading of the package, the running build log will show that this uploaded ear will also be deployed to the development jboss instance:

&lt;pre&gt;
.
.
.
Uploading to: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/pkgs/PioneerCycling/AtgEar/ears/PioneerCycling-1.2.3.1080.ear
Uploading: PioneerCycling-1.2.3.1080.ear
Puted 1 file to http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/pkgs/PioneerCycling/AtgEar/ears/PioneerCycling-1.2.3.1080.ear
Creating new property file: /home/demo/ctier/ctl/projects/PioneerCycling/resources/AtgJBossModuleBuilder/pioneerCycling/tmp/Builder-repoImport-20090421193843/import-list.properties
Package &quot;PioneerCycling-1.2.3.1080.ear (AtgEar)&quot; already registered. Updating object info.
Deleting: /home/demo/ctier/ctl/projects/PioneerCycling/modules/Builder/commands/entity99570426.properties
Current count: 1
Batch request performed successfully.
Current count: 1
[command.timer.Builder.repoImport: 1:01.131 sec]
end workflow command (4/4) -&gt; &quot;repoImport &quot;
[command.timer: 3:56.922 sec]
Completed: execution time: 3:56.922 sec
end workflow command (1/2) -&gt; &quot;Build &quot;
begin workflow command (2/2) -&gt; &quot;Update &quot; ...
Start: &quot;Changes package dependencies and runs the coordinated deployment cycle across the configured Sites.&quot; commands: Change-Dependencies,Deploy
begin workflow command (1/2) -&gt; &quot;Change-Dependencies -resourcename .* -resourcetype [^\.]*&quot; ...
Start: &quot;Query model and switch package dependencies to the specified version or buildstamp..&quot; Changing to package dependencies with buildstamp &quot;1.2.3.1080&quot; ...
begin workflow command (1/1) -&gt; &quot;runChangeDependencies -dispatch -buildstamp 1.2.3.1080 -version 1.2.3.1080 -resourcename .* -resourcetype [^\.]* &quot; ...
Request succeeded.
end workflow command (1/1) -&gt; &quot;runChangeDependencies -dispatch -buildstamp 1.2.3.1080 -version 1.2.3.1080 -resourcename .* -resourcetype [^\.]* &quot;
Process View definition updated.
[command.timer.PioneerCycling.Mediator.development.Change-Dependencies: 17.668 sec]
Completed: Dependencies changed. execution time: 17.668 sec
end workflow command (1/2) -&gt; &quot;Change-Dependencies -resourcename .* -resourcetype [^\.]*&quot;
begin workflow command (2/2) -&gt; &quot;Deploy -resourcename .* -resourcetype [^\.]*&quot; ...
Dispatching command 'Deploy' to objects: development[AtgSite] ...
starting: development[AtgSite]-&gt;Deploy ...
Start: &quot;Run the service deployment cycle, stopping installing package dependencies, configuring and the starting it.&quot; commands: Stop,Packages-Install,Configure,Start
begin workflow command (1/4) -&gt; &quot;Stop -resourcename .* -resourcetype [^\.]*&quot; ...
Dispatching command 'Stop' to objects: development[AtgSolidRdb], development[AtgJBossServer] ...
starting: development[AtgSolidRdb]-&gt;Stop ...
tarting: development[AtgJBossServer]-&gt;Stop ...
begin workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot; ...
command beginning.
demo     17157  0.0  3.9 139652 30700 ?      Sl   16:31   0:10 /home/demo/ctier/demo/atg/development/ATG2006.3/DAS/solid/i486-unknown-linux2/bin/solfe -c /home/demo/ctier/demo/atg/development/ATG2006.3/DAS/solid/atgdb
Running handler command: stopService
command beginning.
[command.timer.stopService: 0.425 sec]
command completed successfully. Execution time: 0.425 sec
end workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot;
begin workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot; ...
UID        PID  PPID  C STIME TTY          TIME CMD
demo     16796     1  0 16:26 ?        00:00:00 sh /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/bin/run.sh -c default
Error handler caught failed command execution: development[AtgJBossServer]-&gt;assertServiceIsDown. reason: The following error occurred while executing this line:
/home/demo/ctier/ctl/projects/PioneerCycling/modules/AtgJBossServer/commands/assertServiceIsDown.xml:26: shellscript returned: 1
Running handler command: stopServiceWrapper
Workflow beginning. commands: stopService,waitforStopEvent
begin workflow command (1/2) -&gt; &quot;stopService &quot; ...
sending soft kill to pid: 16796
sending hard kill to pid: 16796
Running handler command: killService
end workflow command (1/2) -&gt; &quot;stopService &quot;
begin workflow command (2/2) -&gt; &quot;waitforStopEvent &quot; ...
end workflow command (2/2) -&gt; &quot;waitforStopEvent &quot;
[command.timer: 3:56.922 sec]
Workflow completed. execution time: 3:56.922 sec
end workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot;
end workflow command (1/4) -&gt; &quot;Stop -resourcename .* -resourcetype [^\.]*&quot;
begin workflow command (2/4) -&gt; &quot;Packages-Install -resourcename .* -resourcetype [^\.]*&quot; ...
Dispatching command 'Packages-Install' to objects: development[AtgJBossServer], development[AtgSolidRdb] ...
starting: development[AtgJBossServer]-&gt;Packages-Install ...
starting: development[AtgSolidRdb]-&gt;Packages-Install ...
Start: &quot;Install the configured package dependencies for the deployment.&quot; Beginning installation for packages:   atg-license-2006.3.0.zip[AtgLicenseZip],  jdk-1_5_0_12-linux-i586.bin[JavaBin],  jboss-4.0.5.GA.zip[JBossZip],  PioneerCycling-1.2.3.1080.ear[AtgEar] ...
Dispatching command 'assertPackageIsVerified' to objects: PioneerCycling-1.2.3.1080.ear[AtgEar], jdk-1_5_0_12-linux-i586.bin[JavaBin], jboss-4.0.5.GA.zip[JBossZip], atg-license-2006.3.0.zip[AtgLicenseZip] ...
starting: PioneerCycling-1.2.3.1080.ear[AtgEar]-&gt;assertPackageIsVerified ...
starting: jdk-1_5_0_12-linux-i586.bin[JavaBin]-&gt;assertPackageIsVerified ...
starting: jboss-4.0.5.GA.zip[JBossZip]-&gt;assertPackageIsVerified ...
starting: atg-license-2006.3.0.zip[AtgLicenseZip]-&gt;assertPackageIsVerified ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/AtgEar-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/AtgEar-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/AtgEar-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/AtgEar
Attempting to get ear-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/ear-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/ear-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/ear-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/ear
Attempting to get Package-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/Package-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/Package-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/Package-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/Package
Packages-Install invoking: PioneerCycling-1.2.3.1080.ear[AtgEar]-&gt;Install -installroot /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/deploy
Start: &quot;Install object and run the package installation cycle.&quot; commands: assertPackageIsInstalled
begin workflow command (1/1) -&gt; &quot;assertPackageIsInstalled -installroot /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/deploy&quot; ...
Executing ant file: /home/demo/ctier/ctl/projects/PioneerCycling/modules/Package/bin/is-installed.xml
Running handler command: installPackage
begin workflow command (1/5) -&gt; &quot;installDependencies -filename PioneerCycling.ear -installroot /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/deploy -url http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/pkgs/PioneerCycling/AtgEar/ears/PioneerCycling-1.2.3.1080.ear&quot; ...
Dispatching command 'Install' to objects:  ...
end workflow command (1/5) -&gt; &quot;installDependencies -filename PioneerCycling.ear -installroot /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/deploy -url http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/pkgs/PioneerCycling/AtgEar/ears/PioneerCycling-1.2.3.1080.ear&quot;
begin workflow command (2/5) -&gt; &quot;prepare -filename PioneerCycling.ear -installroot /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/deploy -url http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/pkgs/PioneerCycling/AtgEar/ears/PioneerCycling-1.2.3.1080.ear&quot; ...
end workflow command (2/5) -&gt; &quot;prepare -filename PioneerCycling.ear -installroot /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/deploy -url http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/pkgs/PioneerCycling/AtgEar/ears/PioneerCycling-1.2.3.1080.ear&quot;
begin workflow command (3/5) -&gt; &quot;get -filename PioneerCycling.ear -installroot /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/deploy -url http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/pkgs/PioneerCycling/AtgEar/ears/PioneerCycling-1.2.3.1080.ear&quot; ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/pkgs/PioneerCycling/AtgEar/ears/PioneerCycling-1.2.3.1080.ear
To: /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/deploy/PioneerCycling.ear
end workflow command (3/5) -&gt; &quot;get -filename PioneerCycling.ear -installroot /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/deploy -url http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/pkgs/PioneerCycling/AtgEar/ears/PioneerCycling-1.2.3.1080.ear&quot;
begin workflow command (4/5) -&gt; &quot;extract -filename PioneerCycling.ear -installroot /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/deploy -url http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/pkgs/PioneerCycling/AtgEar/ears/PioneerCycling-1.2.3.1080.ear&quot; ...
end workflow command (4/5) -&gt; &quot;extract -filename PioneerCycling.ear -installroot /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/deploy -url http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/pkgs/PioneerCycling/AtgEar/ears/PioneerCycling-1.2.3.1080.ear&quot;
begin workflow command (5/5) -&gt; &quot;finish -filename PioneerCycling.ear -installroot /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/deploy -url http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/pkgs/PioneerCycling/AtgEar/ears/PioneerCycling-1.2.3.1080.ear&quot; ...
end workflow command (5/5) -&gt; &quot;finish -filename PioneerCycling.ear -installroot /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/deploy -url http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/pkgs/PioneerCycling/AtgEar/ears/PioneerCycling-1.2.3.1080.ear&quot;
end workflow command (1/1) -&gt; &quot;assertPackageIsInstalled -installroot /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/deploy&quot;
[command.timer.PioneerCycling.Package.Install: 37.887 sec]
Workflow completed. execution time: 37.887 sec
Executing script: /home/demo/ctier/ctl/projects/PioneerCycling/modules/Package/bin/is-verified.xml ...
Package is VERIFIED
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/JavaBin-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/JavaBin-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/JavaBin-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/JavaBin
Attempting to get bin-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/bin-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/bin-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/bin-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/bin
Attempting to get Package-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/Package-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/Package-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/Package-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/Package
Packages-Install invoking: jdk-1_5_0_12-linux-i586.bin[JavaBin]-&gt;Install -installroot /home/demo/ctier/demo/atg/development/jdk1.5.0_12
Start: &quot;Install object and run the package installation cycle.&quot; commands: assertPackageIsInstalled
begin workflow command (1/1) -&gt; &quot;assertPackageIsInstalled -installroot /home/demo/ctier/demo/atg/development/jdk1.5.0_12&quot; ...
/home/demo/ctier/demo/atg/development/jdk1.5.0_12/LICENSE already exists, skipping installation
 
end workflow command (1/1) -&gt; &quot;assertPackageIsInstalled -installroot /home/demo/ctier/demo/atg/development/jdk1.5.0_12&quot;
[command.timer.PioneerCycling.Package.Install: 37.887 sec]
Workflow completed. execution time: 37.887 sec
Executing script: /home/demo/ctier/ctl/projects/PioneerCycling/modules/Package/bin/is-verified.xml ...
Package is VERIFIED
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/JBossZip-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/JBossZip-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/JBossZip-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/JBossZip
Attempting to get PlatformZip-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/PlatformZip-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/PlatformZip-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/PlatformZip-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/PlatformZip
Attempting to get zip-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/zip-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/zip-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/zip-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/zip
Attempting to get Package-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/Package-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/Package-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/Package-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/Package
Packages-Install invoking: jboss-4.0.5.GA.zip[JBossZip]-&gt;Install -installroot /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA
Start: &quot;Install object and run the package installation cycle.&quot; commands: assertPackageIsInstalled
begin workflow command (1/1) -&gt; &quot;assertPackageIsInstalled -installroot /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA&quot; ...
/home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/bin/run.sh already exists, skipping installation
[command.timer.assertPackageIsInstalled: 0.011 sec]
command completed successfully. Execution time: 0.011 sec
end workflow command (1/1) -&gt; &quot;assertPackageIsInstalled -installroot /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA&quot;
[command.timer.PioneerCycling.Package.Install: 37.887 sec]
Workflow completed. execution time: 37.887 sec
Executing script: /home/demo/ctier/ctl/projects/PioneerCycling/modules/Package/bin/is-verified.xml ...
Package is VERIFIED
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/AtgLicenseZip-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/AtgLicenseZip-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/AtgLicenseZip-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/AtgLicenseZip
Attempting to get zip-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/zip-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/zip-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/zip-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/zip
Attempting to get Package-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/Package-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/Package-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/Package-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/Package
Packages-Install invoking: atg-license-2006.3.0.zip[AtgLicenseZip]-&gt;Install -installroot /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/ATG-Data/localconfig
Start: &quot;Install object and run the package installation cycle.&quot; commands: assertPackageIsInstalled
begin workflow command (1/1) -&gt; &quot;assertPackageIsInstalled -installroot /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/ATG-Data/localconfig&quot; ...
Executing ant file: /home/demo/ctier/ctl/projects/PioneerCycling/modules/Package/bin/is-installed.xml
Running handler command: installPackage
begin workflow command (1/5) -&gt; &quot;installDependencies -filename atg-license-2006.3.0.zip -installroot /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/ATG-Data/localconfig -url http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/pkgs/PioneerCycling/AtgLicenseZip/zips/atg-license-2006.3.0.zip&quot; ...
Dispatching command 'Install' to objects:  ...
end workflow command (1/5) -&gt; &quot;installDependencies -filename atg-license-2006.3.0.zip -installroot /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/ATG-Data/localconfig -url http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/pkgs/PioneerCycling/AtgLicenseZip/zips/atg-license-2006.3.0.zip&quot;
begin workflow command (2/5) -&gt; &quot;prepare -filename atg-license-2006.3.0.zip -installroot /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/ATG-Data/localconfig -url http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/pkgs/PioneerCycling/AtgLicenseZip/zips/atg-license-2006.3.0.zip&quot; ...
end workflow command (2/5) -&gt; &quot;prepare -filename atg-license-2006.3.0.zip -installroot /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/ATG-Data/localconfig -url http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/pkgs/PioneerCycling/AtgLicenseZip/zips/atg-license-2006.3.0.zip&quot;
begin workflow command (3/5) -&gt; &quot;get -filename atg-license-2006.3.0.zip -installroot /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/ATG-Data/localconfig -url http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/pkgs/PioneerCycling/AtgLicenseZip/zips/atg-license-2006.3.0.zip&quot; ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/pkgs/PioneerCycling/AtgLicenseZip/zips/atg-license-2006.3.0.zip
To: /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/ATG-Data/localconfig/atg-license-2006.3.0.zip
end workflow command (3/5) -&gt; &quot;get -filename atg-license-2006.3.0.zip -installroot /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/ATG-Data/localconfig -url http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/pkgs/PioneerCycling/AtgLicenseZip/zips/atg-license-2006.3.0.zip&quot;
begin workflow command (4/5) -&gt; &quot;extract -filename atg-license-2006.3.0.zip -installroot /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/ATG-Data/localconfig -url http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/pkgs/PioneerCycling/AtgLicenseZip/zips/atg-license-2006.3.0.zip&quot; ...
Expanding: /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/ATG-Data/localconfig/atg-license-2006.3.0.zip into /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/ATG-Data/localconfig
end workflow command (4/5) -&gt; &quot;extract -filename atg-license-2006.3.0.zip -installroot /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/ATG-Data/localconfig -url http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/pkgs/PioneerCycling/AtgLicenseZip/zips/atg-license-2006.3.0.zip&quot;
begin workflow command (5/5) -&gt; &quot;finish -filename atg-license-2006.3.0.zip -installroot /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/ATG-Data/localconfig -url http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/pkgs/PioneerCycling/AtgLicenseZip/zips/atg-license-2006.3.0.zip&quot; ...
Deleting: /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/ATG-Data/localconfig/atg-license-2006.3.0.zip
end workflow command (5/5) -&gt; &quot;finish -filename atg-license-2006.3.0.zip -installroot /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/ATG-Data/localconfig -url http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/pkgs/PioneerCycling/AtgLicenseZip/zips/atg-license-2006.3.0.zip&quot;
end workflow command (1/1) -&gt; &quot;assertPackageIsInstalled -installroot /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/ATG-Data/localconfig&quot;
[command.timer.PioneerCycling.Package.Install: 37.887 sec]
Workflow completed. execution time: 37.887 sec
Executing script: /home/demo/ctier/ctl/projects/PioneerCycling/modules/Package/bin/is-verified.xml ...
Package is VERIFIED
Completed: Installed packages:   atg-license-2006.3.0.zip[AtgLicenseZip],  jdk-1_5_0_12-linux-i586.bin[JavaBin],  jboss-4.0.5.GA.zip[JBossZip],  PioneerCycling-1.2.3.1080.ear[AtgEar]
Start: &quot;Install the configured package dependencies for the deployment.&quot; Beginning installation for packages:   ATG2006.3.bin[AtgPlatformInstaller],  jdk-1_5_0_12-linux-i586.bin[JavaBin],  atg-license-2006.3.0.zip[AtgLicenseZip] ...
Dispatching command 'assertPackageIsVerified' to objects: jdk-1_5_0_12-linux-i586.bin[JavaBin], ATG2006.3.bin[AtgPlatformInstaller], atg-license-2006.3.0.zip[AtgLicenseZip] ...
starting: jdk-1_5_0_12-linux-i586.bin[JavaBin]-&gt;assertPackageIsVerified ...
starting: ATG2006.3.bin[AtgPlatformInstaller]-&gt;assertPackageIsVerified ...
starting: atg-license-2006.3.0.zip[AtgLicenseZip]-&gt;assertPackageIsVerified ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/JavaBin-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/JavaBin-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/JavaBin-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/JavaBin
Attempting to get bin-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/bin-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/bin-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/bin-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/bin
Attempting to get Package-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/Package-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/Package-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/Package-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/Package
Packages-Install invoking: jdk-1_5_0_12-linux-i586.bin[JavaBin]-&gt;Install -installroot /home/demo/ctier/demo/atg/development/jdk1.5.0_12
Start: &quot;Install object and run the package installation cycle.&quot; commands: assertPackageIsInstalled
begin workflow command (1/1) -&gt; &quot;assertPackageIsInstalled -installroot /home/demo/ctier/demo/atg/development/jdk1.5.0_12&quot; ...
/home/demo/ctier/demo/atg/development/jdk1.5.0_12/LICENSE already exists, skipping installation
 
end workflow command (1/1) -&gt; &quot;assertPackageIsInstalled -installroot /home/demo/ctier/demo/atg/development/jdk1.5.0_12&quot;
[command.timer.PioneerCycling.Package.Install: 37.887 sec]
Workflow completed. execution time: 37.887 sec
Executing script: /home/demo/ctier/ctl/projects/PioneerCycling/modules/Package/bin/is-verified.xml ...
Package is VERIFIED
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/AtgPlatformInstaller-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/AtgPlatformInstaller-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/AtgPlatformInstaller-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/AtgPlatformInstaller
Attempting to get bin-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/bin-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/bin-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/bin-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/bin
Attempting to get Package-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/Package-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/Package-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/Package-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/Package
Packages-Install invoking: ATG2006.3.bin[AtgPlatformInstaller]-&gt;Install -installroot /home/demo/ctier/demo/atg/development/ATG2006.3
Start: &quot;Install object and run the package installation cycle.&quot; commands: assertPackageIsInstalled
begin workflow command (1/1) -&gt; &quot;assertPackageIsInstalled -installroot /home/demo/ctier/demo/atg/development/ATG2006.3&quot; ...
end workflow command (1/1) -&gt; &quot;assertPackageIsInstalled -installroot /home/demo/ctier/demo/atg/development/ATG2006.3&quot;
[command.timer.PioneerCycling.AtgPlatformInstaller.Install: 3.625 sec]
Workflow completed. execution time: 3.625 sec
Executing script: /home/demo/ctier/ctl/projects/PioneerCycling/modules/Package/bin/is-verified.xml ...
Package is VERIFIED
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/AtgLicenseZip-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/AtgLicenseZip-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/AtgLicenseZip-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/AtgLicenseZip
Attempting to get zip-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/zip-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/zip-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/zip-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/zip
Attempting to get Package-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/Package-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/Package-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/Package-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/Package
Packages-Install invoking: atg-license-2006.3.0.zip[AtgLicenseZip]-&gt;Install -installroot /home/demo/ctier/demo/atg/development/ATG2006.3/home/localconfig
Start: &quot;Install object and run the package installation cycle.&quot; commands: assertPackageIsInstalled
begin workflow command (1/1) -&gt; &quot;assertPackageIsInstalled -installroot /home/demo/ctier/demo/atg/development/ATG2006.3/home/localconfig&quot; ...
Executing ant file: /home/demo/ctier/ctl/projects/PioneerCycling/modules/Package/bin/is-installed.xml
Running handler command: installPackage
begin workflow command (1/5) -&gt; &quot;installDependencies -filename atg-license-2006.3.0.zip -installroot /home/demo/ctier/demo/atg/development/ATG2006.3/home/localconfig -url http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/pkgs/PioneerCycling/AtgLicenseZip/zips/atg-license-2006.3.0.zip&quot; ...
Dispatching command 'Install' to objects:  ...
end workflow command (1/5) -&gt; &quot;installDependencies -filename atg-license-2006.3.0.zip -installroot /home/demo/ctier/demo/atg/development/ATG2006.3/home/localconfig -url http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/pkgs/PioneerCycling/AtgLicenseZip/zips/atg-license-2006.3.0.zip&quot;
begin workflow command (2/5) -&gt; &quot;prepare -filename atg-license-2006.3.0.zip -installroot /home/demo/ctier/demo/atg/development/ATG2006.3/home/localconfig -url http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/pkgs/PioneerCycling/AtgLicenseZip/zips/atg-license-2006.3.0.zip&quot; ...
end workflow command (2/5) -&gt; &quot;prepare -filename atg-license-2006.3.0.zip -installroot /home/demo/ctier/demo/atg/development/ATG2006.3/home/localconfig -url http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/pkgs/PioneerCycling/AtgLicenseZip/zips/atg-license-2006.3.0.zip&quot;
begin workflow command (3/5) -&gt; &quot;get -filename atg-license-2006.3.0.zip -installroot /home/demo/ctier/demo/atg/development/ATG2006.3/home/localconfig -url http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/pkgs/PioneerCycling/AtgLicenseZip/zips/atg-license-2006.3.0.zip&quot; ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/pkgs/PioneerCycling/AtgLicenseZip/zips/atg-license-2006.3.0.zip
To: /home/demo/ctier/demo/atg/development/ATG2006.3/home/localconfig/atg-license-2006.3.0.zip
end workflow command (3/5) -&gt; &quot;get -filename atg-license-2006.3.0.zip -installroot /home/demo/ctier/demo/atg/development/ATG2006.3/home/localconfig -url http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/pkgs/PioneerCycling/AtgLicenseZip/zips/atg-license-2006.3.0.zip&quot;
begin workflow command (4/5) -&gt; &quot;extract -filename atg-license-2006.3.0.zip -installroot /home/demo/ctier/demo/atg/development/ATG2006.3/home/localconfig -url http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/pkgs/PioneerCycling/AtgLicenseZip/zips/atg-license-2006.3.0.zip&quot; ...
Expanding: /home/demo/ctier/demo/atg/development/ATG2006.3/home/localconfig/atg-license-2006.3.0.zip into /home/demo/ctier/demo/atg/development/ATG2006.3/home/localconfig
end workflow command (4/5) -&gt; &quot;extract -filename atg-license-2006.3.0.zip -installroot /home/demo/ctier/demo/atg/development/ATG2006.3/home/localconfig -url http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/pkgs/PioneerCycling/AtgLicenseZip/zips/atg-license-2006.3.0.zip&quot;
begin workflow command (5/5) -&gt; &quot;finish -filename atg-license-2006.3.0.zip -installroot /home/demo/ctier/demo/atg/development/ATG2006.3/home/localconfig -url http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/pkgs/PioneerCycling/AtgLicenseZip/zips/atg-license-2006.3.0.zip&quot; ...
Deleting: /home/demo/ctier/demo/atg/development/ATG2006.3/home/localconfig/atg-license-2006.3.0.zip
end workflow command (5/5) -&gt; &quot;finish -filename atg-license-2006.3.0.zip -installroot /home/demo/ctier/demo/atg/development/ATG2006.3/home/localconfig -url http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/pkgs/PioneerCycling/AtgLicenseZip/zips/atg-license-2006.3.0.zip&quot;
end workflow command (1/1) -&gt; &quot;assertPackageIsInstalled -installroot /home/demo/ctier/demo/atg/development/ATG2006.3/home/localconfig&quot;
[command.timer.PioneerCycling.Package.Install: 37.887 sec]
Workflow completed. execution time: 37.887 sec
Executing script: /home/demo/ctier/ctl/projects/PioneerCycling/modules/Package/bin/is-verified.xml ...
Package is VERIFIED
Completed: Installed packages:   ATG2006.3.bin[AtgPlatformInstaller],  jdk-1_5_0_12-linux-i586.bin[JavaBin],  atg-license-2006.3.0.zip[AtgLicenseZip]
end workflow command (2/4) -&gt; &quot;Packages-Install -resourcename .* -resourcetype [^\.]*&quot;
begin workflow command (3/4) -&gt; &quot;Configure -resourcename .* -resourcetype [^\.]*&quot; ...
Dispatching command 'Configure' to objects: development[AtgJBossServer], development[AtgSolidRdb] ...
starting: development[AtgJBossServer]-&gt;Configure ...
starting: development[AtgSolidRdb]-&gt;Configure ...
Start: &quot;Configures the jboss server instance&quot; commands: Docs-Generate,configureDirectories,configureDataSources
begin workflow command (1/3) -&gt; &quot;Docs-Generate &quot; ...
Copying 5 files to /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default
Copying /home/demo/ctier/ctl/projects/PioneerCycling/modules/AtgJBossServer/templates/jboss-4.0.5.GA/server/default/conf/bindings.xml.template to /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/conf/bindings.xml
Copying /home/demo/ctier/ctl/projects/PioneerCycling/modules/AtgJBossServer/templates/jboss-4.0.5.GA/server/default/conf/run.conf.template to /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/conf/run.conf
Copying /home/demo/ctier/ctl/projects/PioneerCycling/modules/AtgJBossServer/templates/jboss-4.0.5.GA/server/default/conf/login-config.xml.template to /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/conf/login-config.xml
Copying /home/demo/ctier/ctl/projects/PioneerCycling/modules/AtgJBossServer/templates/jboss-4.0.5.GA/server/default/deploy/jbossweb-tomcat55.sar/server.xml.template to /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/deploy/jbossweb-tomcat55.sar/server.xml
Copying /home/demo/ctier/ctl/projects/PioneerCycling/modules/AtgJBossServer/templates/jboss-4.0.5.GA/server/default/conf/jboss-service.xml.template to /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/conf/jboss-service.xml
end workflow command (1/3) -&gt; &quot;Docs-Generate &quot;
begin workflow command (2/3) -&gt; &quot;configureDirectories &quot; ...
end workflow command (2/3) -&gt; &quot;configureDirectories &quot;
begin workflow command (3/3) -&gt; &quot;configureDataSources &quot; ...
Updating AtgSolidRdbSchema module ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/AtgSolidRdbSchema-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/AtgSolidRdbSchema-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/AtgSolidRdbSchema-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/AtgSolidRdbSchema
Attempting to get AtgRdbSchema-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/AtgRdbSchema-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/AtgRdbSchema-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/AtgRdbSchema-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/AtgRdbSchema
Attempting to get Deployment-head.jar ...
Getting: http://charles-scotts-macbook-pro-15.local:8080/jackrabbit/repository/controltier/projects/PioneerCycling/publish/modules/Deployment-head.jar
To: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/Deployment-head.jar
Not modified - so not downloaded
Expanding: /home/demo/ctier/ctl/var/tmp/downloads/PioneerCycling/Deployment-head.jar into /home/demo/ctier/ctl/projects/PioneerCycling/modules/Deployment
Updating properties ...
Updating process view file ...
Process View definition updated.
Framework info:
Type module: /home/demo/ctier/ctl/projects/PioneerCycling/modules/AtgSolidRdbSchema
Object directory: /home/demo/ctier/ctl/projects/PioneerCycling/resources/AtgSolidRdbSchema/development
Object properties file: /home/demo/ctier/ctl/projects/PioneerCycling/resources/AtgSolidRdbSchema/development/var/resource.properties
Object process view file: /home/demo/ctier/ctl/projects/PioneerCycling/resources/AtgSolidRdbSchema/development/var/pview.xml
Copying 1 file to /home/demo/ctier/ctl/projects/PioneerCycling/resources/AtgJBossServer/development/var
Deleting: /home/demo/ctier/ctl/projects/PioneerCycling/resources/AtgJBossServer/development/var/null1472662412
Copying 1 file to /home/demo/ctier/ctl/projects/PioneerCycling/resources/AtgJBossServer/development/var
Deleting: /home/demo/ctier/ctl/projects/PioneerCycling/resources/AtgJBossServer/development/var/null198649978
Deleting: /home/demo/ctier/ctl/projects/PioneerCycling/resources/AtgJBossServer/development/var/null30641239
Copying 1 file to /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/deploy
Copying /home/demo/ctier/ctl/projects/PioneerCycling/modules/AtgJBossServer/templates/datasource/atg-ds.xml.template to /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/deploy/AtgSolidRdb-development-CTAUTOGEN-ds.xml
Copying 1 file to /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/conf
Copying /home/demo/ctier/ctl/projects/PioneerCycling/modules/AtgJBossServer/templates/jboss-4.0.5.GA/server/default/conf/login-config.xml.template to /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/conf/login-config.xml
end workflow command (3/3) -&gt; &quot;configureDataSources &quot;
[command.timer.PioneerCycling.AtgJBossServer.Configure: 35.412 sec]
Workflow completed. execution time: 35.412 sec
begin workflow command (1/1) -&gt; &quot;Docs-Generate &quot; ...
command beginning.
Copying 1 file to /home/demo/ctier/demo/atg/development/ATG2006.3/DAS/solid/atgdb
Copying 1 file to /home/demo/ctier/demo/atg/development/ATG2006.3/home/localconfig/atg/dynamo/service/jdbc
[command.timer.Docs-Generate: 0.469 sec]
command completed successfully. Execution time: 0.469 sec
end workflow command (1/1) -&gt; &quot;Docs-Generate &quot;
end workflow command (3/4) -&gt; &quot;Configure -resourcename .* -resourcetype [^\.]*&quot;
begin workflow command (4/4) -&gt; &quot;Start -resourcename .* -resourcetype [^\.]*&quot; ...
Dispatching command 'Start' to objects: development[AtgJBossServer], development[AtgSolidRdb] ...
starting: development[AtgJBossServer]-&gt;Start ...
starting: development[AtgSolidRdb]-&gt;Start ...
begin workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot; ...
UID        PID  PPID  C STIME TTY          TIME CMD
Running handler command: startServiceWrapper
Workflow beginning. commands: startService,waitforStartEvent
begin workflow command (1/2) -&gt; &quot;startService &quot; ...
Moving 1 file to /home/demo/ctier/demo/atg/development/jboss-4.0.5.GA/server/default/log
end workflow command (1/2) -&gt; &quot;startService &quot;
begin workflow command (2/2) -&gt; &quot;waitforStartEvent &quot; ...
end workflow command (2/2) -&gt; &quot;waitforStartEvent &quot;
[command.timer: 3:56.922 sec]
Workflow completed. execution time: 3:56.922 sec
end workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot;
begin workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot; ...
command beginning.
Running handler command: startService
command beginning.
[command.timer.startService: 0.265 sec]
command completed successfully. Execution time: 0.265 sec
end workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot;
end workflow command (4/4) -&gt; &quot;Start -resourcename .* -resourcetype [^\.]*&quot;
[command.timer.PioneerCycling.AtgSite.development.Deploy: 11:27.682 sec]
Completed: execution time: ${command.timer}
end workflow command (2/2) -&gt; &quot;Deploy -resourcename .* -resourcetype [^\.]*&quot;
[command.timer.PioneerCycling.Mediator.development.Update: 11:50.837 sec]
Completed: execution time: 11:50.837 sec
end workflow command (2/2) -&gt; &quot;Update &quot;
[command.timer.PioneerCycling.Updater.development.BuildAndUpdate: 15:56.352 sec]
Completed: execution time: command.timer.PioneerCycling.Updater.development.BuildAndUpdate
&lt;/pre&gt;

and finally a successful build with AutoDeloy:

[[Image:PioneerCyclingCruiseControlAutoSuccess.gif]]

==Future Steps==

One thing this demo does not do but you could choose to do would be to have CruiseControl invoke Updater's &quot;BuildAndUpdate&quot; workflow.
So instead of simply kicking off JBossAntBuilder's Build workflow you instead execute Updater BuildAndUpdate. 
Doing this will ensure that not only the build occurs but that is also deployed.

[[Category:PioneerCycling demo]]
[[Category:Continuous integration]]</text>
    </revision>
  </page>
  <page>
    <title>PioneerCycling and Self Service</title>
    <id>825</id>
    <revision>
      <id>14160</id>
      <timestamp>2010-11-10T16:01:32Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;ctl-depot&quot; to &quot;ctl-project&quot;</comment>
      <text xml:space="preserve">[[Image:pioneerCycling.gif|256px]]  This is part of the PioneerCycling portion of the  [[ControlTier_and_ATG | ControlTier/ATG Demo]]

==Overview==
This page describes how to demonstrate the build and deployment processes for PioneerCycling JBoss application using a self service web interface, rather than the command line like we did in previous demos. 

The examples in this demo will introduce you to the Jobcenter tool, one of the ControlTier standard server tools that provides a web interface for running CTL commands.

The example will show use of Jobcenter as users with two different roles: Build and Deploy.

==Prerequisites==
This demo assumes you have completed:
* [[Building PioneerCycling Project]]
* [[PioneerCycling Provisioning JBoss instances]]
* [[PioneerCycling Checkout and Build]]

==Preparation==

Before getting started confirm all the necessary objects are deployed to CTL.

Run the [[ctl-project]] command:
&lt;pre&gt;
[demo@centos45 pioneerCycling]$ ctl-project -p PioneerCycling -a install 
&quot;Install&quot; command running for resource: (PioneerCyclingProjectBuilder) pioneerCycling
&quot;Install&quot; command running for resource: (AtgSolidRdb) staging
&quot;Install&quot; command running for resource: (AtgJBossServer) development
&quot;Install&quot; command running for resource: (AtgSolidRdbSchema) development
&quot;Install&quot; command running for resource: (CruiseControl) atg
&quot;Install&quot; command running for resource: (AtgJBossServer) staging
&quot;Install&quot; command running for resource: (AtgJBossModuleBuilder) pioneerCycling
&quot;Install&quot; command running for resource: (AtgPioneerCyclingProjectBuilder) pioneerCycling
&quot;Install&quot; command running for resource: (AtgSolidRdb) development
&quot;Install&quot; command running for resource: (AtgSolidRdbSchema) staging
&quot;Install&quot; command running for resource: (Updater) development
&quot;Install&quot; command running for resource: (AtgSite) development
&quot;Install&quot; command running for resource: (AtgSite) staging
&quot;Install&quot; command running for resource: (Updater) staging
&quot;Install&quot; command running for resource: (ProjectBuilder) pioneerCycling
...
&lt;/pre&gt;

==Access Jobcenter==

The Jobcenter web application can be accessed on your ControlTier web server.  Go to the main application list page, and click on Jobcenter:

* Example, if your server host is &quot;ctier.mycompany.com&quot;: http://ctier.mycompany.com:8080/

Jobcenter is linked from there, or you can just add the &quot;/jobcenter&quot; path to the URL: http://ctier.mycompany.com:8080/jobcenter

==Login as Build==

Enter the default build username and password, both &quot;build&quot;:

[[Image:jobcenter_login_build.png]]

You will see the listing of Jobs that are available for the Build user to run.  Some Jobs are not shown because the &quot;build&quot; role only shows Jobs which apply to Builder types.

[[Image:jobcenter_jobs_build.png]]

If you have performed the previous two Tutorial steps you should see a message like &quot;28 unauthorized jobs are not shown&quot;.  This is to indicate that some jobs in Jobcenter are not available to the build user.

== Scenario 1: Build the PioneerCycling application ==

As the Build user, you can perform the same Build command used to build the PioneerCycling sample application in the step [[PioneerCycling Checkout and Build#Run the Build Command]].

First, create the Job.

# Click the &quot;Create a new Job&amp;hellip;&quot; button. [[Image:Jobcenter_create_new_job_button.png]]
# Select the &quot;PioneerCycling&quot; project if it is not already selected
# Make sure that Defined Command is selected under &quot;Type of Job&quot;
# Select the appropriate Context from the scrolling list of available contexts:  AtgJBossModuleBuilder/pioneerCycling
# Select the &quot;Build&quot; command from the list of commands that appears. [[Image:PioneerCyclingJobcenterBuild.gif]]
# Under &quot;Save this Job?&quot; click the &quot;Yes&quot; button.
# Name the job &quot;Build PioneerCycling&quot;, and enter a description
# Under the &quot;Group&quot; section, enter &quot;Build&quot;. 

[[Image:PioneerCyclingJobcenterBuildSave.gif]]

Now click the &quot;Create&quot; button at the bottom of the form.

The Job will be created and you will be taken to the Job View: 

[[Image:PioneerCyclingJobcenterBuildSaved.gif]]

=== Run The Job ===

Click the &quot;Run Job Now&quot; button to immediately run the Build job.

You will be taken to the &quot;Now Running&quot; page that displays the list of currently running jobs.

[[Image:PioneerCyclingJobcenterBuildRun.gif]]

The status of the job will be updated as long as this page is open.  If you wish to view the progress of the Job, you can click the &quot;output&amp;raquo;&quot; link next to the running Job.

[[Category:PioneerCycling demo]]</text>
    </revision>
  </page>
  <page>
    <title>Pkg</title>
    <id>1658</id>
    <revision>
      <id>11190</id>
      <timestamp>2009-12-14T16:17:45Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Created page with '&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Package&lt;/categorytree&gt; [[File:Icon-Packa…'</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Package&lt;/categorytree&gt;
[[File:Icon-PackageObject.png]]
The [[pkg]] type represents a SVR4 package


==Reference==

{{Package/reference|pkg}}

==Definition==
[[File:Core-type-model.png|thumb|Core type model]]

===Metadata===

The table below gives a brief description for each of the attributes of the package type. The ones with an asterisk are required during the deployment cycle.
{{Package/type/properties}}

===Project XML===
{{Package/projectxml |example|123|pkg}}

===Querying===

{{Package/querying|example|123|pkg}}

{{Manual/navbox}}
[[Category:Package]]</text>
    </revision>
  </page>
  <page>
    <title>Platform overview</title>
    <id>45</id>
    <revision>
      <id>12102</id>
      <timestamp>2009-12-20T17:28:58Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">{{Cleanup}}
 
[[Image:platform-overview.png]]

==CTL: Command dispatcher==
{{main|Command dispatcher}}
All of the automation code is executed via the CTL command and control dispatching tool and framework. CTL along with a ControlTier plugin that integrates CTL to the platform repository, make accessing all the artifacts, modules and metadata stored in the repository possible. CTL's distributed &quot;node dispatch&quot; capability allows coordinated automation actions across hosts and managed objects. This control dispatching framework is installed on any host where the automation tasks are executed.

===ControlTier Types===
{{main|Types}}
ControlTier types provide fundamental building blocks for an automation solution you wish to develop. Building an automation solution specific to your enterprise is primarily achieved through configuring workflow commands that are already defined in a type. The general idea is that the functionality that comes prebuilt with the ControlTier automation types does most of the heavy lifting for you.

The following diagram shows an example of a workflow that coordinates an application service  build &amp; provisioning process (see [[Continuous Deployment]]) that spans from build through to deployment. In this diagram, workflows interact to provide and end-to-end process that automates packages being created, the organized storage of those packages in the ControlTier repository, and their consumption by various Deployments and Services hosted on Nodes in the target environment. This is a pretty standard pattern that many ControlTier automation solutions follow in integration test environments.

[[Image:coordinated-process.png]]
 

''Object-oriented flexibility''

In ControlTier, workflows are not monolithic scripts but are object-oriented components. Each type defines a set of commands (akin to class methods), and attributes (akin to class properties). Each step of the provisioning process is defined as a command in a type. These commands are then combined together in workflow commands to establish higher level processes.

The following chart shows some core types and the commands each provides.

[[Image:base-types.png]]

Users can customize the behavior of any part of the process through sub-typing - adding new commands and overriding existing ones from the appropriate core type. This object-oriented approach facilitates process refactoring, a very important requirement for those that must keep up with a changing application.

==JobCenter: Service Management Administration Tool==

All the key processes that drive your automation solution are exposed as schedulable jobs in the ControlTier Job Center. Job Center gives the administrative staff a single interface to schedule, run and track the execution of commands and workflows. Job Center is also highly useful for delegating tasks to non-technical staff.

[[Image:JobCenter-screen.png]]

Job Center acts as the operational dashboard to drive your automation processes. Read more [[About Jobcenter]].

==ReportCenter: Audit and Reporting Tool==

All the key processes that drive your automation solution are recorded and tracked by thee ControlTier Report Center. Report Center gives staff and their managers a single interface to querying and reporting on the operational activities that drive the application life cycle.

[[Image:rc-overview.png]]

ReportCenter is a standalone repository that collects activity events from various ControlTier components including commands run from CTL, jobs run though JobCenter, and changes to the data model made in Workbench.

Read more [[About_ReportCenter]].

==Workbench: Repository, Graphical type and resource model editor==

The platform includes a structured repository that houses artifacts from the build process as well as the module code and data that drives the application service provisioning process. Workbench provides a graphical interface to browsing the content of the repository. The repository is based on a standard web technology, called WebDAV, and can be made accessible to other tools via HTTP and WebDAV clients.

The diagram below describes the three kinds of repository content:

[[Image:repository.png]]

For deployment or provisioning solutions, an essential facility of the platform is a central repository wherein all the packaged build artifacts produced by the build process are registered and maintained. During the deployment phase of the process, application components with package dependencies retrieve their required artifacts from the repository.

A registry of application configuration, package dependencies, host deployment, and key configuration settings is based on the same type/object model defined by the automation modules. This data model is used to drive the commands and workflows at runtime.

When Workbench or ProjectBuilder is used to develop modules, the modules are automatically versioned, packaged, and stored in the repository.

Read more [[About Workbench]].

==ProjectBuilder: Solution Development Tool==

ControlTier provides two tools to develop your own solutions. Workbench provides a graphical development environment to design and develop automation modules. Workbench gives an integrated graphical interface to your provisioning automation code, data model and view and control of the repository. Inside Workbench, you can define types, commands, workflows, edit the metadata, inspect the artifacts in the repository and generate reports.

[[ProjectBuilder]] is an alternative to Workbench, providing a command-line oriented environment, wherein XML specifications are used to define the automation modules and data model and these specifications are fed through a series of command utilities to build, package and deploy them to the repository. Development is done in a traditional developer's edit, build, test cycle from source files. The artifacts of the ProjectBuilder are loaded into the operational repository via repository services. ProjectBuilder is useful when one needs to really scale up their use of ControlTier and or prefer a command-line/source-file approach to maintaining automation module code and data.

{{Manual/navbox}}</text>
    </revision>
  </page>
  <page>
    <title>Prepare Finish Scripts</title>
    <id>58</id>
    <revision>
      <id>12467</id>
      <timestamp>2010-04-01T16:11:09Z</timestamp>
      <contributor>
        <username>Noahcampbell</username>
        <id>73</id>
      </contributor>
      <minor/>
      <comment>minor change to wording</comment>
      <text xml:space="preserve">&lt;noinclude&gt;&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Package&lt;/categorytree&gt;&lt;/noinclude&gt;
Sometimes it is necessary to run a procedure before the package archive extraction begins, and directly afterwards. The [[Package]] type declares the installation lifecycle in four steps each implemented by a separate command.

# prepare: Procedure to run before the package archive is downloaded from the repository and extracted. [http://controltier.sourceforge.net/docs/latest/core/reference/user/Package/commands/prepare.html]
# get: Retrieves the package from the repository. [http://controltier.sourceforge.net/docs/latest/core/reference/user/Package/commands/get.html]
# extract: Extracts the package archive into the installation root directory. [http://controltier.sourceforge.net/docs/latest/core/reference/user/Package/commands/extract.html]
# finish: Procedure to run after the package archive has been extracted. [http://controltier.sourceforge.net/docs/latest/core/reference/user/Package/commands/finish.html]

The &lt;code&gt;prepare&lt;/code&gt; and &lt;code&gt;finish&lt;/code&gt; commands are essentially hook commands that can be configured to run a user-specified script. This document describes how to specify scripts you've written as the procedures for those commands to invoke.

There can be any number of reasons why prepare and finish procedures might be necessary. A preparation procedure might ensure the environment complies to the assumptions of the package installation. The finish step might involve customizing files after extraction.

The following sections describes how you can incorporate your procedures into the package installation life cycle.

==Registering prepare and finish scripts==

In this example you will see how to upload the zip distribution of Apache Tomcat 5.5 downloaded from here: http://tomcat.apache.org/download-55.cgi. 
Download the apache-tomcat-5.5.26.zip file to the directory, $CTIER_ROOT/pkgs.

As you may have already learned from the [[creating packages]] document, packages are registered during the creation or upload step. Facilitating the registration process is a package metadata file. Using the package metadata file, you can also register scripts to be run by the prepare and finish commands.

The following example shows how to use the necessary XML tags for the package metadata and assumes you want to upload a package file at hand.

===Define the package metadata file===

The example XML file below shows metadata about a tomcat package. In addition to using the package tag, there are several other tags. The setting tags are used to define the prepare and finish scripts you wish to run. The resources tags are used to tie that information as settings of the package.

The bolded text shows paths to scripts that are assumed to exist on the target machine.

The italized text shows a convention which you might choose to employ which uses the package's name as the name for the setting names. The name acts like a key that links the information. This naming is nothing more than convention and you are free to choose any convention that assists identification and correspondence.

File listing: apache-tomcat-5.5.26.zip.xml

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE project PUBLIC &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; 
    &quot;project.dtd&quot;&gt;
&lt;project&gt;
  &lt;!--
      **
      ** Defines path to the prepare and finish scripts
      **
  --&gt;
  &lt;setting type=&quot;PackagePrepareScript&quot; name=&quot;apache-tomcat-5.5.26.zip&quot; 
           description=&quot;The script used during finish&quot; 
           settingValue=&quot;${user.home}/bin/tomcat-prepare.sh&quot; settingType=&quot;script&quot;/&gt;
  &lt;setting type=&quot;PackageFinishScript&quot; name=&quot;apache-tomcat-5.5.26.zip&quot; 
           description=&quot;The script used during prepare&quot; 
           settingValue=&quot;${user.home}/bin/tomcat-finish.sh&quot; settingType=&quot;script&quot;/&gt;
  &lt;package 
      arch=&quot;noarch&quot;
      base=&quot;apache-tomcat-5.5.26&quot; 
      buildtime=&quot;2008061570109&quot; 
      description=&quot;The Tomcat application server.&quot; 
      filename=&quot;apache-tomcat-5.5.26.zip&quot; 
      filetype=&quot;zip&quot; 
      installroot=&quot;/demo/apache-tomcat-5.5.26&quot; 
      installrank=&quot;&quot; 
      name=&quot;apache-tomcat-5.5.26.zip&quot; 
      release=&quot;&quot;
      releasetag=&quot;&quot;
      repoUrl=&quot;/zip/zips/apache-tomcat-5.5.26.zip&quot; 
      restart=&quot;false&quot;
      type=&quot;zip&quot;
      vendor=&quot;&quot;
      version=&quot;5.5.26&quot;      
      &gt;
     &lt;!--
      **
      ** References the prepare and finish scripts as dependencies to the package
      **
      --&gt;
    &lt;resources&gt;
      &lt;resource type=&quot;PackagePrepareScript&quot; name=&quot;apache-tomcat-5.5.26.zip&quot;/&gt;
      &lt;resource type=&quot;PackageFinishScript&quot; name=&quot;apache-tomcat-5.5.26.zip&quot;/&gt;
    &lt;/resources&gt;
   &lt;/package&gt;
&lt;/project&gt;	
&lt;/syntaxhighlight&gt;

===Upload the file to the repository===

The next step is to upload the file to the repository using the metadata defined in the xml file above.
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
	ctl -m zip -c upload -- \
            -xml $CTIER_ROOT/pkgs/apache-tomcat-5.5.26.zip.xml \
	    -filename $CTIER_ROOT/pkgs/apache-tomcat-5.5.26.zip 
&lt;/syntaxhighlight&gt;

==Formalizing your package control scripts==

The above approach is useful when you can rely on the fact the prepare or finish scripts exist on each of the machines where your packages are to be installed. You may also find cases where you want to provide a set of additional files used during the prepare and finish steps. Finally, it might be desireable to define default script path names for the prepare and finish steps, thus avoiding having to always specify them in the package metadata file.

Package control is governed by a CTL module (like &quot;zip&quot; used in the example above). CTL modules are useful for defining your own defaults, and for packaging your scripts and additional files those scripts might need.

===Create a new Package type===

Module creation is done via the [[ProjectBuilder]] module's [http://controltier.sourceforge.net/docs/latest/core/reference/user/ProjectBuilder/commands/create-type.html create-type] command. For this example, the &quot;zip&quot; type is subtyped to one called &quot;myzip&quot;.
&lt;pre&gt;
ctl -m ProjectBuilder -c create-type -- -supertype zip -type myzip
&lt;/pre&gt;

After running the command you will have the initial source code for the myzip module. By default, the source should be found in: $CTL_BASE/src/modules/myzip.

Modules have a standard directory structure with standard subdirectories where you can store your files.
&lt;pre&gt;
module_name
  |
  |--- type.xml            // file containing module definitions
  |
  +--- bin/                // optional binaries, shell scripts, etc.
  |
  +--- commands/           // contains generated command files
  |
  +--- lib/                // optional resource files 
&lt;/pre&gt;

By convention, the bin directory is where you can locate scripts called by the prepare and finish steps. In the lib subdirectory, you can store other files like templates, or data files your scripts might need.

===Place your scripts into the module source directory===

Let's assume you have already written scripts for your preparation and finish steps. These scripts might already exist or you may be just now formalizing accepted procedure.

In this example, assume you have two bourne shell scripts ready to go, one called prepare.sh and the other finish.sh.

Copy the preparation script:
&lt;pre&gt;
cp prepare.sh $CTL_BASE/src/modules/myzip/bin/prepare.sh
&lt;/pre&gt;

Copy the finish script:
&lt;pre&gt;
cp finish.sh $CTL_BASE/src/modules/myzip/bin/finish.sh
&lt;/pre&gt;

The scripts are now part of the module's source files and will be packaged into the module in step#4. Packaging your scripts and files inside the module ensures they'll be at hand when the prepare and finish steps occur during package installation.

The standard ControlTier package types support three kinds of scripts and recognizes them based on their file extension:

* .sh: a bourne shell script
* .bat: a windows batch file
* .xml: an ant build file

If you have script code you'd like to run and do not want to invoke it via any of these three script types above, you can override the create and finish commands.

===Assign the defaults===

Defaults are defined using the attribute-default tags inside the type.xml file.

Edit the generated type.xml file and modify the attribute definitions for the package-prepare-script and package-finish-script attributes (eg, edit $CTL_BASE/src/modules/myzip/type.xml). Locate the attributes tag and change the following attribute-default definitions:

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;attributes&gt;
...
      &lt;attribute-default name=&quot;package-prepare-script&quot; 
         value=&quot;${module.dir}/bin/prepare.sh&quot;&gt;
	&lt;doc&gt;script to execute for prepare command&lt;/doc&gt;
      &lt;/attribute-default&gt;
      &lt;attribute-default name=&quot;package-finish-script&quot; 
         value=&quot;${module.dir}/bin/finish.sh&quot;&gt;
	&lt;doc&gt;script to execute for finish command&lt;/doc&gt;
      &lt;/attribute-default&gt;
&lt;/attributes&gt;
&lt;/syntaxhighlight&gt;

In step#2, the scripts were copied into the bin/ subdirectory of the module source. The ${module.dir}/bin path represents the module directory's bin/ path after the module has been installed.

Only convention suggests to name your scripts prepare.sh and finish.sh. You can name them whatever you wish; just specify the correct filenames in the attribute-default tags.

===Build the new Package type===

The last step packages your files into the module and makes them ready during package installation. Use [http://controltier.sourceforge.net/docs/latest/core/reference/user/ProjectBuilder/commands/build-type.html build-type] for this:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m ProjectBuilder -c build-type -- -type myzip -upload
&lt;/syntaxhighlight&gt;

You may wish to add other files to your module source later. Simply, rerun the build-type command to ensure they are loaded into the repository.

[[Category:Package Examples]]</text>
    </revision>
  </page>
  <page>
    <title>Prerelease</title>
    <id>1462</id>
    <revision>
      <id>12899</id>
      <timestamp>2010-06-22T18:46:02Z</timestamp>
      <contributor>
        <username>Gschueler</username>
        <id>8</id>
      </contributor>
      <text xml:space="preserve">This page will be updated with download links to available prerelease and release candidate builds of upcoming ControlTier releases.  

See: [[:Category:Releases]] for previous releases.

See: [[Development planning]] for release status and timeline.

== ControlTier prerelease builds==

Install instructions:

* [[RPM installers]] for the rpm packages
* [[Installation]]  for the zip and jar packages


=== 3.5.2 ===
:Last update: [[User:Gschueler|Gschueler]] 18:46, 22 June 2010 (UTC)

[http://sourceforge.net/projects/controltier/files/beta/3.5.2  all files]

[http://sourceforge.net/projects/controltier/files/beta/3.5.2/ControlTier-3.5.2.zip/download ControlTier-3.5.2.zip] [http://sourceforge.net/projects/controltier/files/beta/3.5.2/ControlTier-3.5.2.zip.md5/download md5]
:md5sum: d06a6c08fe182ceb91df4e95f4509653
:size: 214965070
[http://sourceforge.net/projects/controltier/files/beta/3.5.2/ControlTier-Installer-3.5.2.jar/download ControlTier-Installer-3.5.2.jar] [http://sourceforge.net/projects/controltier/files/beta/3.5.2/ControlTier-Installer-3.5.2.jar.md5/download md5]
:md5sum: 3fb5a50be74c69b8306925cb59cfbcd5
:size: 216554991
[http://sourceforge.net/projects/controltier/files/beta/3.5.2/ctier-server-3.5.2-5.noarch.rpm/download ctier-server-3.5.2-5.noarch.rpm] [http://sourceforge.net/projects/controltier/files/beta/3.5.2/ctier-server-3.5.2-5.noarch.rpm.md5/download md5] - server RPM installer
:md5sum: 22c60e85db3aeca4b873bb238df27d21
:size: 205447992
[http://sourceforge.net/projects/controltier/files/beta/3.5.2/ctier-client-3.5.2-5.noarch.rpm/download ctier-client-3.5.2-5.noarch.rpm] [http://sourceforge.net/projects/controltier/files/beta/3.5.2/ctier-client-3.5.2-5.noarch.rpm.md5/download md5] -  client RPM installer
:md5sum: e8b4321485a70cf96e08e6a63c546479
:size: 44505398


=== 3.5.1 ===
:Last update: [[User:Gschueler|Gschueler]] 19:12, 21 May 2010 (UTC)
[http://sourceforge.net/projects/controltier/files/alpha/3.5.1  all files]
[http://sourceforge.net/projects/controltier/files/alpha/3.5.1/ControlTier-3.5.1.zip/download ControlTier-3.5.1.zip] [http://sourceforge.net/projects/controltier/files/alpha/3.5.1/ControlTier-3.5.1.zip.md5/download md5]
:md5sum: 1b3739ea12c5687252855c800ee274a8
:size: 216610801
[http://sourceforge.net/projects/controltier/files/alpha/3.5.1/ControlTier-Installer-3.5.1.jar/download ControlTier-Installer-3.5.1.jar] [http://sourceforge.net/projects/controltier/files/alpha/3.5.1/ControlTier-Installer-3.5.1.jar.md5/download md5]
:md5sum: d5af8e2e67d82f58992a3f8b34c23651
:size: 217995118
[http://sourceforge.net/projects/controltier/files/alpha/3.5.1/ctier-server-3.5.1-1.noarch.rpm/download ctier-server-3.5.1-1.noarch.rpm] [http://sourceforge.net/projects/controltier/files/alpha/3.5.1/ctier-server-3.5.1-1.noarch.rpm.md5/download md5] - server RPM installer
:md5sum: d3c0868a1749f80101c08415243784b8
:size: 207773437
[http://sourceforge.net/projects/controltier/files/alpha/3.5.1/ctier-client-3.5.1-1.noarch.rpm/download ctier-client-3.5.1-1.noarch.rpm] [http://sourceforge.net/projects/controltier/files/alpha/3.5.1/ctier-client-3.5.1-1.noarch.rpm.md5/download md5] -  client RPM installer
:md5sum: 410c718c795adee9230a9fc45780e7dd
:size: 46852419

[[Category:Releases]]</text>
    </revision>
  </page>
  <page>
    <title>Presentations</title>
    <id>205</id>
    <revision>
      <id>15425</id>
      <timestamp>2011-08-10T13:09:44Z</timestamp>
      <contributor>
        <username>Frankloron</username>
        <id>225</id>
      </contributor>
      <minor/>
      <comment>Fixed link to BayLISA website, was missing the Y in Bay</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Presentations&lt;/categorytree&gt;

==Introductions==
; &amp;quot;Why use ControlTier?&amp;quot;
: [[Image: Why ctier slides1.pdf]] 
; &amp;quot;Scripting with ControlTier&amp;quot;
:  [[File: Why ctier slides2.pdf]] 

==CTL==
;&amp;quot;CTL, The Control Dispatcher&amp;quot; given May 22, 2008 to [http://www.penlug.org Peninsula Linux User Group] 
: [[File:penlug-intro.pdf]]
;&amp;quot;CTL, Management Application framework&amp;quot; given May 07, 2008 to [http://www.svlug.org Silicon Valley Linux User Group]
: [[File:svlug-intro.pdf]]
;&amp;quot;Introducing CTL&amp;quot; given Apr 21, 2008 to [http://www.lugod.org Linux User Group of Davis]
: [[File:lugod-intro.pdf]]
; &amp;quot;Introducing CTL&amp;quot; given Apr 17, 2008 to [http://www.baylisa.org BayLISA Silicon Valley]
: [[File:baylisa-intro.pdf]]
; &amp;quot;Introducing CTL&amp;quot; given  Mar 13, 2008 to [http://www.saclug.org Sacramento LUG]
: [[File:saclug-intro.pdf]]

{{Help/navbox}}
[[Category:Presentations]]</text>
    </revision>
  </page>
  <page>
    <title>Project</title>
    <id>299</id>
    <redirect />
    <revision>
      <id>3321</id>
      <timestamp>2009-03-18T16:19:15Z</timestamp>
      <contributor>
        <username>Redirect fixer</username>
        <id>9</id>
      </contributor>
      <comment>[[Workbench Project]] has been moved, it is now a redirect to [[Project Content]]</comment>
      <text xml:space="preserve">#REDIRECT [[Project Content]]</text>
    </revision>
  </page>
  <page>
    <title>Project-v10.xml</title>
    <id>104</id>
    <revision>
      <id>14161</id>
      <timestamp>2010-11-10T16:01:33Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;ctl-depot&quot; to &quot;ctl-project&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;XML&lt;/categorytree&gt;

The 'project' XML document declares a [[resource model]] that can also be uploaded to a [[project]] hosted on the [[ControlTier server]]. 
This is a demonstration document using all possible elements in the current DTD, [[project.dtd]].

This file can be batch loaded via [[ProjectBuilder]] &lt;code&gt;load-resources&lt;/code&gt;:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;ctl -m ProjectBuilder -c load-resources -- -file /path/to/resources.xml&lt;/syntaxhighlight&gt;

The resource model can be dumped and saved to a file via &lt;code&gt;find-resources&lt;/code&gt;
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;ctl -m ProjectBuilder -c find-resources -- -out /tmp/resources.xml&lt;/syntaxhighlight&gt;

Once loaded, the data is merged into the existing project's model.

=project=

     &lt;p&gt;
       The root (aka &quot;top-level&quot;) element of the project.xml file. Contains a set of resource elements.  There is an explict ordering of subsequent resource definitions. 
     &lt;/p&gt;
     &lt;p&gt;
     &lt;/p&gt;
     &lt;table class=&quot;wikitable&quot; border=&quot;1&quot;&gt;
       &lt;caption&gt;nested elements&lt;/caption&gt;
       &lt;tr&gt;&lt;th&gt;element&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;[[#node]]&lt;/td&gt;&lt;td&gt;node resource&lt;/td&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;[[#setting]]&lt;/td&gt;&lt;td&gt;setting resource&lt;/td&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;[[#package]]&lt;/td&gt;&lt;td&gt;package resource&lt;/td&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;[[#deployment]]&lt;/td&gt;&lt;td&gt;deployment resource&lt;/td&gt;&lt;/tr&gt;
     &lt;/table&gt;
     &lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;!DOCTYPE project PUBLIC  &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; &quot;project.dtd&quot;&gt;
&lt;project&gt;
  &lt;node .../&gt;
  &lt;setting ...  /&gt;
  &lt;package ... /&gt;
  &lt;deployment ...  /&gt;
&lt;/project&gt;
&lt;/syntaxhighlight &gt;

=node=

     &lt;p&gt;The node element defines a  [[Node]] resource. 
     &lt;/p&gt;
     {{project.xml/tags/node}}

     &lt;p&gt;
{{Caution|As of 3.4.10 it is possible to omit the ctlPassword attribute (along with all the other attributes set automatically by ctl-project, or updated via Workbench) and expect the set (or unset) value to be preserved. Prior to that release, the value would be corrupted with a property name if the attribute wasn't explicitly provided.}}

     &lt;/p&gt;
     &lt;table class=&quot;wikitable&quot; border=&quot;1&quot;&gt;
       &lt;caption&gt;nested elements&lt;/caption&gt;
       &lt;tr&gt;&lt;th&gt;element&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;[[#resources]]&lt;/td&gt;&lt;td&gt;Child dependencies&lt;/td&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;[[#referrers]]&lt;/td&gt;&lt;td&gt;Parent dependencies&lt;/td&gt;&lt;/tr&gt;
     &lt;/table&gt;
     &lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;/p&gt;

Define a node named &quot;strongbad&quot;:
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;node name=&quot;strongbad&quot; type=&quot;Node&quot;
    description=&quot;a development host&quot;
    hostname=&quot;strongbad.local&quot;
    osArch=&quot;i386&quot; osFamily=&quot;unix&quot; osName=&quot;Darwin&quot; osVersion=&quot;9.2.2&quot;
    ctlBase=&quot;/ctier/ctl&quot; ctlHome=&quot;/ctier/pkgs/ctl-1.1&quot; ctlUsername=&quot;${framework.ssh.user}&quot;/&gt;
&lt;/syntaxhighlight&gt;

Define an instance of the type LinuxNode that has a ApacheSystemService as a resource:
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
  &lt;node type=&quot;LinuxNode&quot; name=&quot;sample&quot; description=&quot;Sample Linux node&quot; tags=&quot;sample,linux&quot;&gt;
    &lt;resources replace=&quot;true&quot;&gt;
      &lt;resource type=&quot;ApacheSystemService&quot; name=&quot;sample&quot;/&gt;
    &lt;/resources&gt;
  &lt;/node&gt;
&lt;/syntaxhighlight&gt;

Define a node named that uses a non standard SSH port. The &quot;hostname&quot; value is overloaded to include the port (centos:4022):
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;node name=&quot;centos54&quot; type=&quot;Node&quot;
    description=&quot;a centos host&quot;
    hostname=&quot;centos:4022&quot;
    ctlBase=&quot;/ctier/ctl&quot; ctlHome=&quot;/ctier/pkgs/ctl-1.1&quot; ctlUsername=&quot;deploy&quot;/&gt;
&lt;/syntaxhighlight&gt;

=setting=

     &lt;p&gt;The setting element defines a [[Setting]] resource.
     &lt;/p&gt;

     &lt;table border=&quot;1&quot; class=&quot;wikitable&quot;&gt;
       &lt;caption&gt;attributes&lt;/caption&gt;
       &lt;tr&gt;&lt;th&gt;attribute&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;th&gt;values&lt;/th&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;type&lt;/td&gt;&lt;td&gt;setting type&lt;/td&gt;&lt;td&gt;Setting type&lt;/td&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;name&lt;/td&gt;&lt;td&gt;setting name&lt;/td&gt;&lt;td&gt;a name&lt;/td&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;description&lt;/td&gt;&lt;td&gt;setting description&lt;/td&gt;&lt;td&gt;a character string&lt;/td&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;settingType&lt;/td&gt;&lt;td&gt;the value type&lt;/td&gt;&lt;td&gt;a string&lt;/td&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;settingValue&lt;/td&gt;&lt;td&gt;the setting value&lt;/td&gt;&lt;td&gt;a string&lt;/td&gt;&lt;/tr&gt;
     &lt;/table&gt;
     &lt;p&gt;
     &lt;/p&gt;
     &lt;table border=&quot;1&quot; class=&quot;wikitable&quot;&gt;
       &lt;caption&gt;nested elements&lt;/caption&gt;
       &lt;tr&gt;&lt;th&gt;element&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;[[#referrers]]&lt;/td&gt;&lt;td&gt;Parent dependencies&lt;/td&gt;&lt;/tr&gt;
     &lt;/table&gt;
     &lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;setting type=&quot;PackageFinishScript&quot; name=&quot;apache-tomcat-5.5.26.zip&quot; 
           description=&quot;The script used during prepare&quot; 
           settingValue=&quot;$HOME/bin/tomcat-finish.sh&quot; settingType=&quot;script&quot;/&gt;
 
&lt;/syntaxhighlight&gt;

=package=

     &lt;p&gt;The package element defines a [[Package]] resource.
     &lt;/p&gt;
{{Package/type/properties}}
     &lt;p&gt;
     &lt;/p&gt;
     &lt;table border=&quot;1&quot; class=&quot;wikitable&quot;&gt;
       &lt;caption&gt;nested elements&lt;/caption&gt;
       &lt;tr&gt;&lt;th&gt;element&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;[[#resources]]&lt;/td&gt;&lt;td&gt;Child dependencies&lt;/td&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;[[#referrers]]&lt;/td&gt;&lt;td&gt;Parent dependencies&lt;/td&gt;&lt;/tr&gt;
     &lt;/table&gt;
     &lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;package 
      arch=&quot;noarch&quot;
      base=&quot;apache-tomcat-5.5.26&quot; 
      buildtime=&quot;2008061570109&quot; 
      description=&quot;The Tomcat application server.&quot; 
      filename=&quot;apache-tomcat-5.5.26.zip&quot; 
      filetype=&quot;zip&quot; 
      installroot=&quot;/demo/apache-tomcat-5.5.26&quot; 
      installrank=&quot;&quot; 
      name=&quot;apache-tomcat-5.5.26.zip&quot; 
      release=&quot;&quot;
      releasetag=&quot;&quot;
      repoUrl=&quot;${framework.pkgRepo.upload-url}/default/zip/zips/apache-tomcat-5.5.26.zip&quot; 
      restart=&quot;false&quot;
      type=&quot;zip&quot;
      vendor=&quot;&quot;
      version=&quot;5.5.26&quot;      
      /&gt;     
&lt;/syntaxhighlight&gt;

     &lt;p&gt;Another example showing resources:&lt;/p&gt;
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;!--
      **
      ** Defines path to the prepare and finish scripts
      **
--&gt;
&lt;setting type=&quot;PackagePrepareScript&quot; name=&quot;apache-tomcat-5.5.26.zip&quot; 
           description=&quot;The script used during finish&quot; 
           settingValue=&quot;$HOME/bin/tomcat-prepare.sh&quot; settingType=&quot;script&quot;/&gt;
&lt;setting type=&quot;PackageFinishScript&quot; name=&quot;apache-tomcat-5.5.26.zip&quot; 
           description=&quot;The script used during prepare&quot; 
           settingValue=&quot;$HOME/bin/tomcat-finish.sh&quot; settingType=&quot;script&quot;/&gt;
&lt;!--
      **
      ** Defines package resource
      **
--&gt;
&lt;package 
      arch=&quot;noarch&quot;
      base=&quot;apache-tomcat-5.5.26&quot; 
      buildtime=&quot;2008061570109&quot; 
      description=&quot;The Tomcat application server.&quot; 
      filename=&quot;apache-tomcat-5.5.26.zip&quot; 
      filetype=&quot;zip&quot; 
      installroot=&quot;/demo/apache-tomcat-5.5.26&quot; 
      installrank=&quot;&quot; 
      name=&quot;apache-tomcat-5.5.26.zip&quot; 
      release=&quot;&quot;
      releasetag=&quot;&quot;
      repoUrl=&quot;${framework.pkgRepo.upload-url}/default/zip/zips/apache-tomcat-5.5.26.zip&quot; 
      restart=&quot;false&quot;
      type=&quot;zip&quot;
      vendor=&quot;&quot;
      version=&quot;5.5.26&quot;      
      &gt;
    &lt;!--
      **
      ** References the prepare and finish scripts as dependencies to the package
      **
      --&gt;
    &lt;resources replace=&quot;true&quot;&gt;
      &lt;resource type=&quot;PackagePrepareScript&quot; name=&quot;apache-tomcat-5.5.26.zip&quot;/&gt;
      &lt;resource type=&quot;PackageFinishScript&quot; name=&quot;apache-tomcat-5.5.26.zip&quot;/&gt;
    &lt;/resources&gt;
&lt;/package&gt;
     
&lt;/syntaxhighlight&gt;

=deployment=

    &lt;p&gt;The deployment element defines a [[Deployment]] (or subtype) resource.
     &lt;/p&gt;
     &lt;table border=&quot;1&quot; class=&quot;wikitable&quot;&gt;
       &lt;caption&gt;attributes&lt;/caption&gt;
       &lt;tr&gt;&lt;th&gt;attribute&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;th&gt;values&lt;/th&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;type&lt;/td&gt;&lt;td&gt;deployment type&lt;/td&gt;&lt;td&gt;Deployment type&lt;/td&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;name&lt;/td&gt;&lt;td&gt;deployment name&lt;/td&gt;&lt;td&gt;a name&lt;/td&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;description&lt;/td&gt;&lt;td&gt;deployment description&lt;/td&gt;&lt;td&gt;a character string&lt;/td&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;basedir&lt;/td&gt;&lt;td&gt;the base directory&lt;/td&gt;&lt;td&gt;a path&lt;/td&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;installRoot&lt;/td&gt;&lt;td&gt;the install directory&lt;/td&gt;&lt;td&gt;a path&lt;/td&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;startuprank&lt;/td&gt;&lt;td&gt;the startup rank&lt;/td&gt;&lt;td&gt;a string&lt;/td&gt;&lt;/tr&gt;
     &lt;/table&gt;
     &lt;p&gt;
     &lt;/p&gt;
     &lt;table border=&quot;1&quot; class=&quot;wikitable&quot;&gt;
       &lt;caption&gt;nested elements&lt;/caption&gt;
       &lt;tr&gt;&lt;th&gt;element&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;[[#resources]]&lt;/td&gt;&lt;td&gt;Child dependencies&lt;/td&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;[[#referrers]]&lt;/td&gt;&lt;td&gt;Parent dependencies&lt;/td&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;[[#transforms]]&lt;/td&gt;&lt;td&gt;Parent dependencies (Since 3.4.10)&lt;/td&gt;&lt;/tr&gt;
     &lt;/table&gt;

     &lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;deployment 
      type=&quot;Deployment&quot;
      name=&quot;tomcat1&quot; 
      description=&quot;The Tomcat deployment.&quot; 
      installRoot=&quot;/demo/apache-tomcat-5.5.26&quot; 
      basedir=&quot;/demo/apache-tomcat-5.5.26&quot; /&gt;
&lt;/syntaxhighlight&gt;

     &lt;p&gt;Another example showing resources and referrers:&lt;/p&gt;
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;deployment 
      type=&quot;Deployment&quot;
      name=&quot;tomcat1&quot; 
      description=&quot;The Tomcat deployment.&quot; 
      installRoot=&quot;/demo/apache-tomcat-5.5.26&quot; 
      basedir=&quot;/demo/apache-tomcat-5.5.26&quot;&gt;

   &lt;resources replace=&quot;true&quot;&gt;
      &lt;resource name=&quot;apache-tomcat-5.5.26.zip&quot; type=&quot;zip&quot; /&gt;
      &lt;resource name=&quot;extras.jar&quot; type=&quot;jar&quot; /&gt;
   &lt;/resources&gt;

   &lt;referrers replace=&quot;true&quot;&gt;
      &lt;resource name=&quot;centos&quot; type=&quot;Node&quot; /&gt;
      &lt;resource name=&quot;development&quot; type=&quot;Node&quot; /&gt;
   &lt;/referrers&gt;
&lt;/deployment&gt;
&lt;/syntaxhighlight&gt;

=resource=

     &lt;p&gt;A [[Resource]] instance. A resource element is used to reference
     another resource in the project model by type and name.&lt;/p&gt;
     &lt;table border=&quot;1&quot; class=&quot;wikitable&quot;&gt;
       &lt;caption&gt;attributes&lt;/caption&gt;
       &lt;tr&gt;&lt;th&gt;attribute&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;th&gt;values&lt;/th&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;type&lt;/td&gt;&lt;td&gt;resource type&lt;/td&gt;&lt;td&gt;a type&lt;/td&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;name&lt;/td&gt;&lt;td&gt;resource name&lt;/td&gt;&lt;td&gt;a name&lt;/td&gt;&lt;/tr&gt;
     &lt;/table&gt;
     &lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;
     &lt;p&gt;Refrences an instance of Deployment named &amp;quot;tomcat1&amp;quot;.
     &lt;/p&gt;
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;resource type=&quot;Deployment&quot; name=&quot;tomcat1&quot; /&gt;
&lt;/syntaxhighlight&gt;

=resources=

     &lt;p&gt;The resources tag defines a set of child resource relationships. 
     Each child resource is referenced via a [[#resource]] element.
     &lt;/p&gt;
     &lt;table border=&quot;1&quot; class=&quot;wikitable&quot;&gt;
       &lt;caption&gt;attributes&lt;/caption&gt;
       &lt;tr&gt;&lt;th&gt;attribute&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;th&gt;values&lt;/th&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;replace&lt;/td&gt;&lt;td&gt;whether or not to replace child resource relationships that already exist in the project&lt;/td&gt;&lt;td&gt;true or false&lt;/td&gt;&lt;/tr&gt;
    
     &lt;/table&gt;

     &lt;table border=&quot;1&quot; class=&quot;wikitable&quot;&gt;
       &lt;caption&gt;nested elements&lt;/caption&gt;
       &lt;tr&gt;&lt;th&gt;attribute&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;[[#resource]]&lt;/td&gt;&lt;td&gt;A child resource&lt;/td&gt;&lt;/tr&gt;
     &lt;/table&gt;
     &lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;resources replace=&quot;true&quot;&gt;
  &lt;resource name=&quot;apache-tomcat-5.5.26.zip&quot; type=&quot;zip&quot; /&gt;
  &lt;resource name=&quot;extras.jar&quot; type=&quot;jar&quot; /&gt;
&lt;/resources&gt;
&lt;/syntaxhighlight&gt;

=referrers=

     &lt;p&gt;The referrers tag defines a set of parent resource relationships. 
     Each parent resource is specified via a [[#resource]] element.
     &lt;/p&gt;
     &lt;table border=&quot;1&quot; class=&quot;wikitable&quot;&gt;
       &lt;caption&gt;nested elements&lt;/caption&gt;
       &lt;tr&gt;&lt;th&gt;attribute&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;[[#resource]]&lt;/td&gt;&lt;td&gt;A parent resource&lt;/td&gt;&lt;/tr&gt;
     &lt;/table&gt;
     &lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;referrers&gt;
  &lt;resource name=&quot;centos&quot; type=&quot;Node&quot; /&gt;
  &lt;resource name=&quot;development&quot; type=&quot;Node&quot; /&gt;
&lt;/referrers&gt;
&lt;/syntaxhighlight&gt;


=transform=

{{Caution|This element is only available in releases after [[ControlTier 3.4.9]]}}

     &lt;p&gt;A document transform. A transform element is used to specify
     the attributes of a document associated with the deployment (see the  [[TransformCreate Task Reference]])&lt;/p&gt;
     &lt;table border=&quot;1&quot; class=&quot;wikitable&quot;&gt;
       &lt;caption&gt;attributes&lt;/caption&gt;
       &lt;tr&gt;&lt;th&gt;attribute&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;th&gt;default&lt;/th&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;name&lt;/td&gt;&lt;td&gt;transform name&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;description&lt;/td&gt;&lt;td&gt;description of the document transform&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;filetype&lt;/td&gt;&lt;td&gt;the document's file type&lt;/td&gt;&lt;td&gt;text/plain&lt;/td&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;outputdir&lt;/td&gt;&lt;td&gt;output directory of the transformed document&lt;/td&gt;&lt;td&gt;${resource.deployment-basedir}&lt;/td&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;template&lt;/td&gt;&lt;td&gt;template file used to drive the transform&lt;/td&gt;&lt;td&gt;same as the transform name&lt;/td&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;templatetype&lt;/td&gt;&lt;td&gt;the template file type&lt;/td&gt;&lt;td&gt; simple &lt;/td&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;templatedir&lt;/td&gt;&lt;td&gt;the directory containing the template file&lt;/td&gt;&lt;td&gt;${modules.dir}/&lt;i&gt;type&lt;/i&gt;/templates&lt;/td&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;direction&lt;/td&gt;&lt;td&gt;the direction in which attributes are brought into scope of the transformation&lt;/td&gt;&lt;td&gt; internal &lt;/td&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;proximity&lt;/td&gt;&lt;td&gt;the extent to which attributes are brought into scope of the transformation&lt;/td&gt;&lt;td&gt; 1 &lt;/td&gt;&lt;/tr&gt;
     &lt;/table&gt;
     &lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;
     &lt;p&gt;Defines the Tomcat server configuration file as a transformed document:
     &lt;/p&gt;
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
 &lt;transform name=&quot;server.xml&quot;  description=&quot;Tomcat server configuration file&quot; filetype=&quot;text/plain&quot;
      outputdir=&quot;${resource.deployment-basedir}/conf&quot; template=&quot;server.xml&quot; templatetype=&quot;simple&quot;
      templatedir=&quot;${modules.dir}/Deployment/templates&quot; direction=&quot;internal&quot; proximity=&quot;1&quot;/&gt;&lt;/syntaxhighlight&gt;

=transforms=

{{Caution|This element is only available in releases after 3.4.9}}

     &lt;p&gt;The transforms tag defines a set of document transforms associated with a deployment. 
     Each individual document transform is referenced via a [[#transform]] element.
     &lt;/p&gt;
     &lt;table border=&quot;1&quot; class=&quot;wikitable&quot;&gt;
       &lt;caption&gt;nested elements&lt;/caption&gt;
       &lt;tr&gt;&lt;th&gt;attribute&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;/tr&gt;
       &lt;tr&gt;&lt;td&gt;[[#transform]]&lt;/td&gt;&lt;td&gt;A document transform&lt;/td&gt;&lt;/tr&gt;
     &lt;/table&gt;
     &lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;transforms replace=&quot;true&quot;&gt;
  &lt;transform name=&quot;server.xml&quot;  description=&quot;Tomcat server configuration file&quot; 
      outputdir=&quot;${resource.deployment-basedir}/conf&quot;/&gt;
&lt;/transforms&gt;
&lt;/syntaxhighlight&gt;

&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:ProjectBuilder]]
[[Category:Resource model]]
[[Category:XML]]</text>
    </revision>
  </page>
  <page>
    <title>Project.dtd</title>
    <id>1905</id>
    <revision>
      <id>13976</id>
      <timestamp>2010-11-10T15:26:54Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;-objects&quot; to &quot;-resources&quot;</comment>
      <text xml:space="preserve">Find the DTD in the install:
* 3.4.x: &lt;code&gt;$CTL_BASE/modules/ProjectBuilder/lib/load-resources/projectxml/project.dtd&lt;/code&gt;
* 3.5.x: &lt;code&gt;$CTL_BASE/modules/ProjectBuilder/lib/load-resources/projectxml/project.dtd&lt;/code&gt;</text>
    </revision>
  </page>
  <page>
    <title>Project.properties</title>
    <id>128</id>
    <revision>
      <id>14079</id>
      <timestamp>2010-11-10T15:34:06Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>moved [[Depot.properties]] to [[Project.properties]]</comment>
      <text xml:space="preserve">=Overview=

      &lt;p&gt;
	Settings managing depot level configuration.
      &lt;/p&gt;
      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	  &lt;th&gt;Property&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;project.dir&lt;/td&gt;&lt;td&gt;The base directory for this depot's
	    instances&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;project.deployments.dir&lt;/td&gt;&lt;td&gt;The base directory where the
	    instance deployments reside &lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;

[[Category:CTL properties]]</text>
    </revision>
  </page>
  <page>
    <title>Project.xml</title>
    <id>313</id>
    <redirect />
    <revision>
      <id>10350</id>
      <timestamp>2009-12-11T22:18:18Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[Project-v10.xml]]</comment>
      <text xml:space="preserve">#REDIRECT [[Project-v10.xml]]</text>
    </revision>
  </page>
  <page>
    <title>ProjectBuilder</title>
    <id>275</id>
    <redirect />
    <revision>
      <id>10092</id>
      <timestamp>2009-12-11T15:49:03Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[Category:ProjectBuilder]]</comment>
      <text xml:space="preserve">#REDIRECT [[:Category:ProjectBuilder]]</text>
    </revision>
  </page>
  <page>
    <title>ProjectBuilder Concepts</title>
    <id>731</id>
    <revision>
      <id>13977</id>
      <timestamp>2010-11-10T15:27:02Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;-objects&quot; to &quot;-resources&quot;</comment>
      <text xml:space="preserve">&lt;noinclude&gt;&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;ProjectBuilder&lt;/categorytree&gt;&lt;/noinclude&gt;
==Intent==
==Discussion==
  &lt;p&gt;
ProjectBuilder is a [[Core_Type_Guide#Builder|Builder]] used to build  	
types and type libraries, load object data, even generate a Forrest documentation site.
ProjectBuilder along with a set
of properly prepared source files, is an alternative to 
the primarily graphical modeling tools offered by the
ControlTier server's Workbench web application.
  &lt;/p&gt;
  &lt;p&gt;
ProjectBuilder supports a typical edit, build, test methodology familiar to most developers
wherein, a set of source files maintained in a source code repository
are developed using familiar text editing tools,
and ProjectBuilder builds and deploys them, so that the results can be tested.
  &lt;/p&gt;
  &lt;p&gt;The Workbench application can still act as a useful tool in this methodology.
  Since it manages the active model for the project, it allows a user to get an
  integrated view of the type object model. Besides offering a visualization layer
  to the active model, Workbench can also assist in the code development process.
  A developer can let Workbench do some code generation and then copy those 
  generated files  back into the source directory.
  &lt;/p&gt;

===Project development cycle===
  &lt;p&gt;ProjectBuilder begins after a project has been created via Workbench. New projects
  are initialized with the [[Core_Type_Guide|ControlTier]] core type library. Typically, a developer
  is extending one or more of these types to manage the specifics of their application's
  build and deployment processes.
  &lt;/p&gt;
  &lt;p&gt;The project development cycle is undertaken in serveral rough steps:
  &lt;/p&gt;
  &lt;ol&gt;
&lt;li&gt;Base directory structure created. The ProjectBuilder commands work relative
to this base directory. 
&lt;/li&gt;
&lt;li&gt;Create and build a  type. The next section describes the development cycle for types.
&lt;/li&gt;
&lt;li&gt;Define resources. Each type module can contain files that define type instances.
&lt;/li&gt;
&lt;li&gt;Build the whole project. Process all the modules and build and deploy them.
&lt;/li&gt;
  &lt;/ol&gt;
  &lt;p&gt;To begin using ProjectBuilder one must first define an instance of it in the
  desired project. 
  The user can name the instance anyway they like, but two key bits of information
  should be specified:
  &lt;/p&gt;
  &lt;ol&gt;
&lt;li&gt;basedir: This is the base directory where the modules will reside&lt;/li&gt;
&lt;li&gt;installroot: This is the directory where the build artifacts will be written&lt;/li&gt;
  &lt;/ol&gt;
 &lt;p&gt;
  An instance of ProjectBuilder can be done either within Workbench or via CTL.
  &lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;
  Via Workbench: Navigate to ProjectBuilder type and create an instance specifying the basedir 
 install-root in the web form.
    &lt;/li&gt;
    &lt;li&gt;
  Via CLI: Run the &lt;code&gt;[http://controltier.sourceforge.net/docs/latest/core/reference/user/Deployment/commands/Register.html Register]&lt;/code&gt; command using the -basedir and -installroot arguments:
  &lt;pre&gt;ctl -p project -t ProjectBuilder -r resource -c Register -- \
  -basedir /path/to/modules -installroot /path/to/target -install&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
  &lt;p&gt;The ProjectBuilder is now ready to use to develop a type.
  &lt;/p&gt;

===Type development cycle===
  &lt;p&gt;
Typically, one uses ProjectBuilder to develop a type in three steps:
  &lt;/p&gt;
  &lt;ol&gt;
&lt;li&gt;
  Define the type. Create a new type using the &lt;code&gt;[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_ProjectBuilder.html#cmd_create-type create-type]&lt;/code&gt; command.
  &lt;pre&gt;ctl -p project -t ProjectBuilder -r resource -c create-type -- \
  -type NewType -supertype SuperType&lt;/pre&gt;
Edit the type.xml file generated by &lt;code&gt;create-type&lt;/code&gt;. Define various commands and schema info as desired.           
Implement command handlers and template files for the type.
&lt;/li&gt;
&lt;li&gt;
  Build the type. Use the &lt;code&gt;[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_ProjectBuilder.html#cmd_build-type build-type]&lt;/code&gt; command
  to process the type.xml and package the type definition and deploy the
  module.
  &lt;pre&gt;ctl -p project -t ProjectBuilder -r resource -c build-type -- \
  -name NewType -upload -deploy&lt;/pre&gt;	  
&lt;/li&gt;
&lt;li&gt;Test a  command in your new type. Register it and then run command:
&lt;pre&gt;ctl -p project -t NewType -r resource -c Register -- \
-basedir /path/to/basedir -installroot /path/to/install -install&lt;/pre&gt;
&lt;pre&gt;ctl -p project -t NewType -r resource -c command&lt;/pre&gt;
&lt;/li&gt;
  &lt;/ol&gt;


===Preparing for deployment===
&lt;p&gt;To prepare for widespread use of the project resources developed using ProjectBuilder,
one might consider the following next steps:
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
Create a type library: All the types defined by the ProjectBuilder can be packaged together into a library using the
&lt;code&gt;[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_ProjectBuilder.html#cmd_build-library build-library]&lt;/code&gt; command. A type library is a handy way to
reuse the type definition in other projects.
&lt;/li&gt;
&lt;li&gt;Generate documentation: Type definitions can also be processed to generate
a set of [http://forrest.apache.org/ Forrest] documentation using the
&lt;code&gt;[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_ProjectBuilder.html#cmd_generate-forrest-docs generate-forrest-docs]&lt;/code&gt; command.
  &lt;/li&gt;
  &lt;li&gt;Create object data: Once the types have been suitably developed, one may wish to define an object model
  based on the type definitions. ProjectBuilder provides  the &lt;code&gt;[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_ProjectBuilder.html#cmd_generate-resources generate-resources]&lt;/code&gt;
  command which will bootstrap a set of data files containing instances of the types defined
  in the &lt;code&gt;type.xml&lt;/code&gt;. Those generated files can be used as input for the
  &lt;code&gt;[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_ProjectBuilder.html#cmd_load-resources load-resources]&lt;/code&gt; command which reads in data as plain text
  files and loads it into Workbench.     
  &lt;/li&gt;
  &lt;li&gt;
Create a project build: All types can be checked out, built, packaged and loaded into the repository via the common Builder
&lt;code&gt;[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Builder.html#cmd_Build Build]&lt;/code&gt; workflow:
&lt;pre&gt;ctl -p project -t ProjectBuilder -r resource -c Build&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

==Check List==

===Building types with Perforce===

&lt;p&gt;By default, Perforce keeps checked out files (see &quot;p4 sync&quot;) as read-only, unless the file is opened (see &quot;p4 open&quot;).    After the file is checked in (see &quot;p4 submit&quot;), the filie will revert back to read-only state.   This behavior can lead to errors when build-type or build-library is run.  Because ProjectBuilder rewrites each command implementation within the /path/to/modules/moduleName/commands directory, any of these files checked into source control will likely lead to permission issues.  
&lt;/p&gt;

&lt;p&gt;The following workarounds are recommended:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[[#Promote_implementation_into_type.xml|Promote implementation into type.xml]]&lt;/li&gt;
&lt;li&gt;[[#Override_build-type_behavior|Override build-type behavior]]&lt;/li&gt;
&lt;/ul&gt;

====Promote implementation into type.xml====

Any command implemented and managed directed directly in the commands directory can be re-implemented verbatim directly in the module's type.xml file. After reimplementing the commands, be sure to delete the files from source control as these command file will be auto-generated from build-type or build-library commands.

====Override build-type behavior====

If reimplementing the command into the type.xml is not an option, the alternative is to override the build-type behavior (which is called directly or implicitly via build-library command).  An example buildmodule.xml is provided in the 3.4.5 or later distribution.  Alternatively, this example buildmodule.xml can be obtained from [https://moduleforge.svn.sourceforge.net/svnroot/moduleforge/controltier/branches/controltier-3-4-support/core/modules/ProjectBuilder/lib/p4/buildmodule.xml sourceForge]


&lt;ul&gt;
&lt;li&gt;copy the buildmodule.xml from the ProjectBuilder module residing in CTL to the desired module (example refers to &quot;moduleName&quot;):
&lt;pre&gt;
cd /path/to/modules/moduleName
cp ${CTL_BASE}/modules/ProjectBuilder/lib/p4/buildmodule.xml .
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;repeat for each module so that each module managed in perforce has their own copy of buildmodule.xml&lt;/li&gt;
&lt;/ul&gt;

==Rules of Thumb==
==Related Types==
Supertype:
*  [[Core Type Guide#Builder|Builder]]


{{Core Type Guide Linkback}}

[[Category:ProjectBuilder]]</text>
    </revision>
  </page>
  <page>
    <title>ProjectBuilder Settings and Attributes</title>
    <id>751</id>
    <revision>
      <id>10950</id>
      <timestamp>2009-12-13T00:59:28Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;ProjectBuilder&lt;/categorytree&gt;
= Overview =

This document describes the predefined Setting subtypes and their declared Attribute names that are associated with the [[Core Type Guide#ProjectBuilder|ProjectBuilder]] type.

Complete reference documentation for these related types are here:

* [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_ProjectBuilder.html#related_types ProjectBuilder Reference - related types]

= Settings =

{| border=&quot;1px solid #aaa&quot; cellpadding=&quot;5&quot; cellspacing=&quot;0&quot;
    ! Setting !! attribute !! purpose
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_ProjectBuilder.html#type_ProjectBuilderBuildTarget ProjectBuilderBuildTarget] || ''buildTarget'' || Build target for ProjectBuilder
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_ProjectBuilder.html#type_ProjectBuilderDefaults ProjectBuilderDefaults] || ''defaults'' || file containing project defaults properties
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_ProjectBuilder.html#type_ProjectBuilderDocBase ProjectBuilderDocBase] || ''docbase'' || Path to documentation directory
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_ProjectBuilder.html#type_ProjectBuilderForrestHome ProjectBuilderForrestHome] || ''forresthome'' || Path to FORREST_HOME directory
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_ProjectBuilder.html#type_ProjectBuilderOrganizationDescription ProjectBuilderOrganizationDescription] || ''organizationDescription'' || Descrpiton of organization responsible for the project
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_ProjectBuilder.html#type_ProjectBuilderOrganizationName ProjectBuilderOrganizationName] || ''organizationName'' || Organization responsible for the project
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_ProjectBuilder.html#type_ProjectBuilderOrganizationURL ProjectBuilderOrganizationURL] || ''organizationURL'' || URL to the organization home page
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_ProjectBuilder.html#type_ProjectBuilderProjectDescription ProjectBuilderProjectDescription] || ''projectDescription'' || Brief description about the purpose of the project
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_ProjectBuilder.html#type_ProjectBuilderProjectName ProjectBuilderProjectName] || ''projectName'' || The project name
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_ProjectBuilder.html#type_ProjectBuilderProjectURL ProjectBuilderProjectURL] || ''projectURL'' || URL to the project home page
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_ProjectBuilder.html#type_ProjectBuilderTemplateDir ProjectBuilderTemplateDir] || ''templateDir'' || file containing project template files
|}
{{Attributes Reference Footer}}

[[Category:ProjectBuilder]]</text>
    </revision>
  </page>
  <page>
    <title>Project Content</title>
    <id>297</id>
    <revision>
      <id>14486</id>
      <timestamp>2010-11-12T00:59:45Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">In the ControlTier software, a Project is a named container for all of the service management components you define or build. All management actions occur within the context of a single project.

Each project has the following content:

* '''A Resource model''': the types and resources maintained the [[Resource Model]]. 
* '''Space in the File share''': Deployable artifacts such as packages and other files stored in the [[WebDAV]]
* '''A history of activity''': model revisions and command execution history stored in [[Ctlcenter]]

In addition, each ControlTier client that registers as a Node within a Project creates a filesystem workspace, local to that client.

* Clients store Resource data and artifacts retrieved from the server

Multiple projects can be maintained on the same ControlTier server. Projects are independent of one another, so you can use them to organize unrelated systems within a single ControlTier installation.  This can be useful for managing each business line's application.

[[Image:project-content.png]]</text>
    </revision>
  </page>
  <page>
    <title>Project Scoping</title>
    <id>300</id>
    <revision>
      <id>14334</id>
      <timestamp>2010-11-11T00:00:57Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>/* Application resource model */</comment>
      <text xml:space="preserve">==Project boundaries==
Given that all activity occurs within the context of a project, how big or small should a project be? Should there be just one project to manage all applications in all environments? Should there be one project on a per application per environment basis? These questions go towards the topic of project scoping.

While there is no one size fits all strategy here, one strategy that works most of the time is to use one project to manage one application for all its environments. But before we keep throwing around terms like &quot;application&quot; and &quot;environment&quot; a simple example will help make these ideas more concrete.

===Applications===

The figure below describes a trivial three tier application comprised of a web tier that handles user requests, dispatching them to an application tier. The role of the application tier is to execute business logic and provide an abstraction layer over the database tier. The database contains standing data and application state.

[[Image:simple-app-model.png]]

The diagram shows a standard arrangement of components that when configured correctly comprise an application. Of course, these components do not run in isolation but are deployed to one or more physical hosts. During the course of the application life cycle, these components are deployed to different sets of machines, each set representing an environment.

===Environments===

The diagram below shows three environments, dev, qa and production, and indicates differences on how the application components are distributed to the number of machines each environment supports. In dev, all components are installed on one node while in production, each component is located on its own host.

[[Image:simple-app-deployments.png]]

From the point of view of the application components, these hosts may look like resources that are exclusively theirs, but in actuality, hosts might be shared between environments. The next diagram shows dev and qa share a pool of hardware while production has its own pool.

[[Image:project-environments.png]]</text>
    </revision>
  </page>
  <page>
    <title>Project creation</title>
    <id>1016</id>
    <redirect />
    <revision>
      <id>5834</id>
      <timestamp>2009-06-23T00:26:54Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <comment>Redirecting to [[Creating a project]]</comment>
      <text xml:space="preserve">#REDIRECT [[Creating a project]]</text>
    </revision>
  </page>
  <page>
    <title>Project setup</title>
    <id>1015</id>
    <redirect />
    <revision>
      <id>5833</id>
      <timestamp>2009-06-23T00:26:18Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <comment>[[Project setup]] moved to [[Creating a project]]</comment>
      <text xml:space="preserve">#REDIRECT [[Creating a project]]</text>
    </revision>
  </page>
  <page>
    <title>Projects</title>
    <id>1572</id>
    <redirect />
    <revision>
      <id>9947</id>
      <timestamp>2009-12-11T01:49:15Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>moved [[Projects]] to [[Projects overview]]</comment>
      <text xml:space="preserve">#REDIRECT [[Projects overview]]</text>
    </revision>
  </page>
  <page>
    <title>Projects overview</title>
    <id>1537</id>
    <revision>
      <id>14328</id>
      <timestamp>2010-11-10T23:47:33Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Projects&lt;/categorytree&gt;

{{:Project Content}}

{{:Project Scoping}}

{{Guide/navbox}}

[[Category:Projects]]</text>
    </revision>
  </page>
  <page>
    <title>PropertiesQuery Task Reference</title>
    <id>150</id>
    <revision>
      <id>14383</id>
      <timestamp>2010-11-11T17:28:45Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">=Examples=

     &lt;p&gt;
       see [[PropertiesQuery Type Reference|propertiesquery]] data type.
      &lt;/p&gt;
     &lt;p&gt;
       see see [[ApplyMacro Task Reference|apply-macro]] task.
      &lt;/p&gt;
[[Category:Utility Ant Tasks]]</text>
    </revision>
  </page>
  <page>
    <title>PropertiesQuery Type Reference</title>
    <id>158</id>
    <revision>
      <id>11462</id>
      <timestamp>2009-12-15T00:22:47Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>/* Examples */</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Types&lt;/categorytree&gt;
=Description=
      &lt;p&gt;
	The Propertiesquery data type represents a regular expression query of a Ant build file execution context. See [[PropertiesQuery Task Reference]] for the corresponding Ant task.
      &lt;/p&gt;

=Propertiesquery=
      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;id&lt;/td&gt;&lt;td&gt;Referrable name of the properties query&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;from&lt;/td&gt;&lt;td&gt;regular expression used to match against property context&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;select&lt;/td&gt;&lt;td&gt;Comma separated list of output parameters corresponding to the &quot;from&quot; value's regular expression pattern groups&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;where&lt;/td&gt;&lt;td&gt;Optional constraint limiting query to select parameter equaling a certain value or regular expression&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;equals&lt;/td&gt;&lt;td&gt;Optional constraint limiting query to the value or regular expression of the property itself&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;

=Parameters specified as nested elements=

      &lt;p&gt;&lt;strong&gt;sortby&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;sortby&gt;
     &lt;select by=&quot;column1&quot; order=&quot;ascending&quot;/&gt;
&lt;/sortby&gt;
&lt;/pre&gt;

=Examples=
Match properties and sort the results by the string matched in the second regex group:
&lt;syntaxhighlight&gt;
  &lt;property name=&quot;node.NodeTypeA.aNodeA.os-arch&quot;
	    value=&quot;i386&quot;/&gt;
  &lt;property name=&quot;node.NodeTypeB.aNodeB.os-arch&quot;
	    value=&quot;sparc&quot;/&gt;

  &lt;propertiesquery id=&quot;nodesquery&quot;
		   from=&quot;node.([^\.]*).([^\.]*).os-arch&quot;
		   select=&quot;nodeType,nodeName&quot;&gt;
    &lt;sortby&gt;
      &lt;select by=&quot;name&quot; name=&quot;nodeName&quot;/&gt;
    &lt;/sortby&gt;
  &lt;/propertiesquery&gt;
&lt;/syntaxhighlight&gt;

Match properties and sort by the value of the matching properties:
&lt;syntaxhighlight&gt;

  &lt;property name=&quot;deployment.MyType1.myObject1.startup-rank&quot;
	    value=&quot;2&quot;/&gt;
  &lt;property name=&quot;deployment.MyType2.myObject2.startup-rank&quot;
	    value=&quot;1&quot;/&gt;

  &lt;propertiesquery id=&quot;depsquery&quot;
		   from=&quot;deployment.([^\.]*).([^\.]*).startup-rank&quot;
		   select=&quot;depType,dName&quot;&gt;
    &lt;sortby&gt;
      &lt;select by=&quot;value&quot;/&gt;
    &lt;/sortby&gt;
  &lt;/propertiesquery&gt;

&lt;/syntaxhighlight&gt;
      
Note:
* See [[ApplyMacro Task Reference|apply-macro]] task for other examples.

&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Command Dispatcher Ant Types]]
[[Category:ApplyMacro Ant Type]]</text>
    </revision>
  </page>
  <page>
    <title>Property-default Task Reference</title>
    <id>148</id>
    <revision>
      <id>14384</id>
      <timestamp>2010-11-11T17:28:58Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Tasks&lt;/categorytree&gt;
=Description=
      &lt;p&gt;
         Sets a property to the value of a specified property or specified default value
	 if the other does not exist.
      &lt;/p&gt;
  
=Parameters=
      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;property&lt;/td&gt;&lt;td&gt;The name of the property to set&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;from&lt;/td&gt;&lt;td&gt;The name of the property you wish to set the value from. 
	  Embedded property references will be expanded.&lt;/td&gt;&lt;td&gt;Yes (unless propertylist
	element is set)&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;default&lt;/td&gt;&lt;td&gt;The default value to set &lt;code&gt;property&lt;/code&gt;
	  if no value can be used given &amp;quot;from&amp;quot; property
	  or propertylist.
	  Embedded property references will be expanded.
	  &lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;ignoremalformed&lt;/td&gt;&lt;td&gt;Boolean setting specifying if
	  malformed values should be ignored. 
	   Malformed values are those
	  that contain the pattern &lt;code&gt;${.*}&lt;/code&gt; after property
	  names have been expanded.
	  If set true,
	  then &lt;code&gt;property&lt;/code&gt; will not be set. If false,
	  then &lt;code&gt;property&lt;/code&gt; will be set to the value
	  containing the malformed value.&lt;/td&gt;&lt;td&gt;No (default &amp;quot;false&amp;quot;)&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;override&lt;/td&gt;&lt;td&gt;If the property is already set, should we change it's value.
	  Can be &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;&lt;/td&gt;&lt;td&gt;No (defaults to &amp;quot;false&amp;quot;)&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;

=Parameters specified as nested elements=

      &lt;p&gt;&lt;strong&gt;propertylist&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;Contains a list of property names to set the default.
      Mutually, exclusive with the &lt;code&gt;from&lt;/code&gt; attribute.
      The property will be defaulted to the first valid (i.e., not malformed)
      property in the list. If no valid property is in the list,
      then the value will be set to the &lt;code&gt;default&lt;/code&gt;
      attribute if one exists otherwise no default is defined
      and &lt;code&gt;property&lt;/code&gt; remains unset.
      &lt;/p&gt;
      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;names&lt;/td&gt;&lt;td&gt;Delimited list of property names&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;delimiter&lt;/td&gt;&lt;td&gt;List delimiter&lt;/td&gt;&lt;td&gt;No. (defaults to &amp;quot;,&amp;quot;)&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;
      &lt;p&gt;
      &lt;/p&gt;
      &lt;code&gt;&amp;lt;propertylist names=&quot;name1,name2,...,nameN&quot; delimiter=&quot;,&quot;/&amp;gt;&lt;/code&gt;

=Examples=

      &lt;p&gt;
	Set &lt;code&gt;opts.port&lt;/code&gt; from the property, an_httpPort, if that property exists
	otherwsie set it to 80.
      &lt;/p&gt;
      &lt;pre&gt;
        &amp;lt;property name=&quot;alt_httpPort&quot; value=&quot;8080&quot;/&amp;gt;
        &amp;lt;property-default
            property=&quot;opts.port&quot;
            from=&quot;alt_httpPort&quot;
            default=&quot;80&quot;/&amp;gt; &lt;/pre&gt;

      &lt;p&gt;Set the property &lt;code&gt;cmd.foo&lt;/code&gt; from the first existing property in
      the propertylist.
      &lt;/p&gt;
      &lt;pre&gt;
	&amp;lt;property-default property=&quot;cmd.foo&quot;&amp;gt;
	  &amp;lt;propertylist
	      names=&quot;opts.foo,resource.attribute.foo&quot;/&amp;gt;
	&amp;lt;/property-default&amp;gt;
      &lt;/pre&gt;
      &lt;p&gt;The next example attempts to set property &lt;code&gt;cmd.X&lt;/code&gt; from
      a property that has a non-existent value. Since no &lt;code&gt;default&lt;/code&gt;
      attribute was set, &lt;code&gt;cmd.X&lt;/code&gt; should remain unset.
      &lt;/p&gt;
      &lt;pre&gt;
        &amp;lt;property name=&quot;x&quot; value=&quot;${nonExistent}&quot;/&amp;gt;
        &amp;lt;property-default
            property=&quot;cmd.X&quot;
            from=&quot;x&quot;
            ignoremalformed=&quot;true&quot;/&amp;gt;
	&amp;lt;fail if=&quot;cmd.X&quot;&amp;gt;this should not fail&amp;lt;/fail&amp;gt;
      &lt;/pre&gt;

&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;


[[Category:Utility Ant Tasks]]</text>
    </revision>
  </page>
  <page>
    <title>Property-expand Task Reference</title>
    <id>149</id>
    <revision>
      <id>14385</id>
      <timestamp>2010-11-11T17:29:12Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Tasks&lt;/categorytree&gt;
=Description=

      &lt;p&gt;
	Ant task takes a string as input which may contain nested
	property references and attempts to expand multiple times 
	until all embeded properties are expanded or all possible properties in
	the Ant project are exhausted.
      &lt;/p&gt;

=Parameters=

      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;property&lt;/td&gt;&lt;td&gt;The name of the property to set&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;input&lt;/td&gt;&lt;td&gt;String (possibly) containing embedded property names&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;override&lt;/td&gt;&lt;td&gt;If the property is already set, should we change it's value.
	  Can be &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;&lt;/td&gt;&lt;td&gt;No (defaults to &amp;quot;false&amp;quot;)&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;

=Parameters specified as nested elements=

      &lt;p&gt;&lt;strong&gt;propertyset&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;Using a [http://ant.apache.org/manual/CoreTypes/propertyset.html PropertySet] allows multipe properties to be expanded based on the property name filtering.&lt;/p&gt;

=Examples=

      &lt;p&gt;Expand a single string:
      &lt;/p&gt;
      &lt;code&gt;&amp;lt;property-expand property=&quot;aPropname&quot; input=&quot;aString&quot; /&amp;gt; &lt;/code&gt;

      &lt;p&gt;To recursively expand all the property values in the project
      use a propertyset:
      &lt;/p&gt;
      &lt;pre&gt;
	&amp;lt;property-expand&amp;gt;
	  &amp;lt;propertyset&amp;gt;
	    &amp;lt;propertyref prefix=&quot;.*&quot;/&amp;gt;
	  &amp;lt;/propertyset&amp;gt;
	&amp;lt;/property-expand&amp;gt;
      &lt;/pre&gt;

&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Utility Ant Tasks]]</text>
    </revision>
  </page>
  <page>
    <title>PropertyDefault Task Reference</title>
    <id>964</id>
    <redirect />
    <revision>
      <id>5289</id>
      <timestamp>2009-05-21T20:48:59Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <comment>[[PropertyDefault Task Reference]] moved to [[Property-default Task Reference]]: task name does not match page name</comment>
      <text xml:space="preserve">#REDIRECT [[Property-default Task Reference]]</text>
    </revision>
  </page>
  <page>
    <title>PropertyExpand Task Reference</title>
    <id>972</id>
    <redirect />
    <revision>
      <id>5309</id>
      <timestamp>2009-05-22T19:54:43Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>[[PropertyExpand Task Reference]] moved to [[Property-expand Task Reference]]: Renamed to match task name</comment>
      <text xml:space="preserve">#REDIRECT [[Property-expand Task Reference]]</text>
    </revision>
  </page>
  <page>
    <title>PropertyResults Task Reference</title>
    <id>151</id>
    <revision>
      <id>14386</id>
      <timestamp>2010-11-11T17:29:26Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Tasks&lt;/categorytree&gt;
 
=Description=
      &lt;p&gt;
         Processes a propertiesquery and executes successtarget or failtarget based on each matched property's value.
      &lt;/p&gt;

=Parameters=

      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;value&lt;/td&gt;&lt;td&gt;The name of the referred parallel container&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;failtarget&lt;/td&gt;&lt;td&gt;The name of the target to call when matched property is equal to value&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;successtarget&lt;/td&gt;&lt;td&gt;The name of the target to call when matched property is not equal to value&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;
    
=Parameters specified as nested elements=

      &lt;p&gt;&lt;strong&gt;propertiesquery&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
        A [[PropertiesQuery Type Reference|propertiesquery]] element.
      &lt;/p&gt;
   
=Examples=

      &lt;p&gt;
        Processes the propertiesquery syncresults and will execute dosuccess or doerror target based on each property's value 
        equal to zero or not
      &lt;/p&gt;
      &lt;pre&gt;
	&amp;lt;property-results value=&quot;0&quot;
		             successtarget=&quot;dosuccess&quot;
		             failtarget=&quot;doerror&quot;&amp;gt;
           &amp;lt;propertiesquery refid=&quot;syncresults&quot;/&amp;gt;
	&amp;lt;/property-results&amp;gt;

        &amp;lt;target name=&quot;dosuccess&quot;&amp;gt;
           &amp;lt;echo level=&quot;info&quot;&amp;gt;object ${node} succeeded&amp;lt;/echo&amp;gt;
        &amp;lt;/target&amp;gt;

        &amp;lt;target name=&quot;doerror&quot;&amp;gt;
           &amp;lt;propertycopy from=&quot;stderr.${node}&quot;
                         property=&quot;err&quot;/&amp;gt;
           &amp;lt;echo level=&quot;info&quot;&amp;gt;object ${node} failed, stderr: ${err}&amp;lt;/echo&amp;gt;
        &amp;lt;/target&amp;gt;
      &lt;/pre&gt;

&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Utility Ant Tasks]]</text>
    </revision>
  </page>
  <page>
    <title>PropertySort Task Reference</title>
    <id>152</id>
    <revision>
      <id>14387</id>
      <timestamp>2010-11-11T17:29:41Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Tasks&lt;/categorytree&gt;
 
=Parameters=

      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;match&lt;/td&gt;&lt;td&gt;Regular expression to match property names&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;property&lt;/td&gt;&lt;td&gt;The name of the property to store results&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;by&lt;/td&gt;&lt;td&gt;Specifies what to sort. Takes either &lt;code&gt;value&lt;/code&gt; or &lt;code&gt;name&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;order&lt;/td&gt;&lt;td&gt;Specifies sort order. Takes either &lt;code&gt;ascending&lt;/code&gt; or &lt;code&gt;descending&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;
    
=Examples=

      &lt;p&gt;
	The following properties defined in a file called ports.properties:
      &lt;/p&gt;
      &lt;pre&gt;setting.TomcatPort.ajp13Port.value=8209
setting.TomcatPort.httpPort.value=8280
setting.TomcatPort.httpsPort.value=8643
setting.TomcatPort.shutdownPort.value=8205&lt;/pre&gt;
      &lt;p&gt;and the following code&lt;/p&gt;
      &lt;pre&gt;
&amp;lt;property file=&quot;ports.properties&quot;/&amp;gt;
&amp;lt;propertysort match=&quot;setting.TomcatPort.*.value&quot; by=&quot;value&quot; order=&quot;ascending&quot;
                 property=&quot;ports&quot;/&amp;gt;
&amp;lt;echo&amp;gt;${ports}&amp;lt;/echo&amp;gt;      &lt;/pre&gt;
      &lt;p&gt;	would yield &lt;/p&gt;
      &lt;code&gt;8205, 8209, 8280, 8643 &lt;/code&gt;

&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Utility Ant Tasks]]</text>
    </revision>
  </page>
  <page>
    <title>Puppet and ControlTier</title>
    <id>342</id>
    <revision>
      <id>5511</id>
      <timestamp>2009-06-02T06:00:59Z</timestamp>
      <contributor>
        <username>Damonedwards</username>
        <id>7</id>
      </contributor>
      <text xml:space="preserve">[http://reductivelabs.com/products/puppet/ Puppet] is a handy tool for system-level configuration management and compliance. ControlTier is a handy tool for deploying applications, controlling their state, and running on demand administrative tasks across multiple servers. Its not uncommon for ControlTier users to also be Puppet users (ControlTier, Inc. consultant lead solutions often liberally use both).

Both tools play an essential role in a fully automated provisioning scenario. Puppet makes sure that each OS instance is installed and configured as expected; then ControlTier gives you push-button deployment and service control capabilities for the applications your deploy across those OS instances.

Both tools are open source. Both share the same philosophy of specification (or policy) driven provisioning. When you put them together they form the bulk of a toolchain that allows you achieve a fully automated provisioning capability. Below is a diagram of that toolchain:

[[Image:ProvisioningToolchain.png]]


'''For a more detailed explaination of how ControlTier and Puppet complement each other, read this [http://blog.controltier.com/2009/04/new-whitepaper-achieving-fully.html Whitepaper from ControlTier and Reductive Labs] (Team behind Puppet) on Puppet and ControlTier integrated solutions.'''


Watch this page and blog.controltier.com for more information on ControlTier and Puppet integration.

Puppet related ControlTier HowTos:

* [[Puppet module build management]]

[[Category:Puppet]]</text>
    </revision>
  </page>
  <page>
    <title>Puppet integration musings</title>
    <id>1312</id>
    <revision>
      <id>13906</id>
      <timestamp>2010-11-10T15:22:33Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot; -o &quot; to &quot; -r &quot;</comment>
      <text xml:space="preserve">Crude facter integration
&lt;syntaxhighlight lang=&quot;ruby&quot;&gt;
Facter.add(&quot;someProp&quot;) do
  setcode do
    %x{ctl -t mytype -r myobj -c Properties -- -format plain 2&gt;/dev/null |grep someProp |sed 's/.*=//'}.chomp
  end
end
&lt;/syntaxhighlight&gt;

[http://reductivelabs.com/trac/puppet/wiki/PuppetTemplating PuppetTemplating]

[[Category:Puppet]]</text>
    </revision>
  </page>
  <page>
    <title>Puppet module build management</title>
    <id>515</id>
    <revision>
      <id>14162</id>
      <timestamp>2010-11-10T16:02:05Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;ctl-depot&quot; to &quot;ctl-project&quot;</comment>
      <text xml:space="preserve">The Elements modules included in the ControlTier distribution contain a couple of service modules aimed at managing both the Puppet master and clients. To support this on the build-side, a standard approach has evolved to manage the packaging of a site's Puppet source base.

A well-managed Puppet installation will have a number of Puppet master installations each designated to look after a specific environment within the broader infrastructure. Typically, then, there might be development, QA, staging and production Puppet masters. To support this, a multi-branch source base is established to facilitate releasing updates across the environments in a structured fashion. Note also, that since Puppet is a system configuration management tool, its own software artifacts are distributed using the system's packaging tools. On Redhat Linux, or similar, this means RPMs, of course.

All these requirements make for a prime use case for ControlTier based builds. Here's a case in point assuming Subversion and RPMs.

The set of modules and configuration files that setup the each Puppet master instance kept under Subversion source code control. There is a branch for each separate environment managed by its own Puppet master:

&lt;pre&gt;
[deploy@build noarch]$ svn list svn+ssh://subversion.localdomain/var/svn/puppet/branches
qa/
production/
&lt;/pre&gt;

The modules are packaged as RPMs and added to the ControlTier repository by build processes that are configured to run under CruiseControl on the build box. 

Here is the process for adding a new Puppet module builder to the ControlTier model when a Subversion branch is cut for a new environment:

* Working as your ControlTier project maintenance account, find the working directory for the object XML:

&lt;pre&gt;
[deploy@build objects]$ pwd
/home/deploy/ctier/src/myproject/objects
[deploy@build objects]$ svn info .
Path: .
URL: svn+ssh://subversion.localdomain/var/svn/ctier/trunk/objects
Repository Root: svn+ssh://subversion.localdomain/var/svn/ctier
Repository UUID: bddb9513-9d58-0410-ac02-8d36170c79bc
Revision: 104
Node Kind: directory
Schedule: normal
Last Changed Author: deploy
Last Changed Rev: 104
Last Changed Date: 2009-01-30 09:32:07 -0700 (Fri, 30 Jan 2009)

[deploy@build objects]$ svn update .
At revision 104.
&lt;/pre&gt;

* Add new settings and deployment resource definitions to the builders.xml file to model the new  build. This includes three settings to specify the Subversion URL (BuilderScmConnection), the package version tag (BuilderVersionTag), and the build stamp used to record each build (BuilderBuildstamp). The RpmBuilder deployment is specified itself (deployed to build.localdomain) and added to the CruiseControl object. For example:
&lt;pre&gt;
[deploy@build objects]$ svn diff  builders.xml 
Index: builders.xml
===================================================================
--- builders.xml        (revision 105)
+++ builders.xml        (working copy)
@@ -29,6 +29,11 @@
        &amp;lt;!-- We need to avoid resetting this value each time the object XML is loaded since doing so breaks the Purge job! --&amp;gt;
        &amp;lt;!-- &amp;lt;setting type=&quot;BuilderBuildstamp&quot; name=&quot;myPuppetTrunk&quot; description=&quot;Puppet trunk build current buildstamp&quot; settingValue=&quot;notset&quot;/&amp;gt; --&amp;gt;
 
+       &amp;lt;setting type=&quot;BuilderScmConnection&quot; name=&quot;myPuppetQa&quot; description=&quot;Puppet QA build Subversion URL&quot; settingValue=&quot;svn+ssh://subversion.localhost/var/svn/puppet/branches/qa&quot;/&amp;gt;
+       &amp;lt;setting type=&quot;BuilderVersionTag&quot; name=&quot;myPuppetQa&quot; description=&quot;Puppet QA build version tag&quot; settingValue=&quot;qa&quot;/&amp;gt;
+       &amp;lt;!-- We need to avoid resetting this value each time the object XML is loaded since doing so breaks the Purge job! --&amp;gt;
+       &amp;lt;setting type=&quot;BuilderBuildstamp&quot; name=&quot;myPuppetQa&quot; description=&quot;Puppet QA build current buildstamp&quot; settingValue=&quot;notset&quot;/&amp;gt;
+
@@ -235,6 +240,7 @@
                &amp;lt;resources replace=&quot;true&quot;&amp;gt;
                        &amp;lt;resource type=&quot;CruiseControlZip&quot; name=&quot;cruisecontrol-bin-2.8.2.zip&quot;/&amp;gt;
                        &amp;lt;resource type=&quot;RpmBuilder&quot; name=&quot;myPuppetTrunk&quot;/&amp;gt;
+                       &amp;lt;resource type=&quot;RpmBuilder&quot; name=&quot;myPuppetQa&quot;/&amp;gt;
                &amp;lt;/resources&amp;gt;
                &amp;lt;referrers replace=&quot;false&quot;&amp;gt;
                        &amp;lt;resource type=&quot;Node&quot; name=&quot;build.localdomain&quot;/&amp;gt;
@@ -259,6 +265,22 @@
                &amp;lt;/referrers&amp;gt;
        &amp;lt;/deployment&amp;gt;
 
+       &amp;lt;deployment type=&quot;RpmBuilder&quot; name=&quot;myPuppetQa&quot; basedir=&quot;${user.home}/cruisecontrol-bin-2.8.2/projects/myPuppetQa&quot; installRoot=&quot;${user.home}/cruisecontrol-bin-2.8.2/projects/myPuppetQa/src/redhat&quot; description=&quot;Puppet modules QA build&quot; startuprank=&quot;1&quot;&amp;gt;
+               &amp;lt;resources replace=&quot;true&quot;&amp;gt;
+                       &amp;lt;resource type=&quot;BuilderScmBinding&quot; name=&quot;myPuppet&quot;/&amp;gt;
+                       &amp;lt;resource type=&quot;BuilderScmConnection&quot; name=&quot;myPuppetQa&quot;/&amp;gt;
+                       &amp;lt;resource type=&quot;BuilderVersionTag&quot; name=&quot;myPuppetQa&quot;/&amp;gt;
+                       &amp;lt;resource type=&quot;BuilderPackageExcludes&quot; name=&quot;myPuppet&quot;/&amp;gt;
+                       &amp;lt;resource type=&quot;BuilderBuildstamp&quot; name=&quot;myPuppetQa&quot;/&amp;gt;
+                       &amp;lt;resource type=&quot;BuilderPackageFilebase&quot; name=&quot;myPuppet&quot;/&amp;gt;
+                       &amp;lt;resource type=&quot;BuilderPackageType&quot; name=&quot;myPuppet&quot;/&amp;gt;
+                       &amp;lt;resource type=&quot;BuilderPackageInstallroot&quot; name=&quot;myPuppet&quot;/&amp;gt;
+               &amp;lt;/resources&amp;gt;
+               &amp;lt;referrers replace=&quot;false&quot;&amp;gt;
+                       &amp;lt;resource type=&quot;Node&quot; name=&quot;build.localdomain&quot;/&amp;gt;
+               &amp;lt;/referrers&amp;gt;
+       &amp;lt;/deployment&amp;gt;
+
&lt;/pre&gt;

* Load the new objects into Workbench:

&lt;pre&gt;
[deploy@build objects]$  ctl -p myproject -t ProjectBuilder -r myProjectBuilder -c load-resources -- -filename builders.xml
Loading &quot;/home/deploy/ctier/src/myproject/objects/builders.xml&quot; ...
1 file(s) have been successfully validated.
Processing /home/deploy/ctier/src/myproject/objects/builders.xml to /home/deploy/ctier/ctl/var/tmp/projectxml-382319045.xml
Loading stylesheet /home/deploy/ctier/ctl/projects/my/modules/ProjectBuilder/lib/load-resources/projectxml/project.xsl
Mapping XML to properties ...
Collecting object attributes ...
Batching object attribute updates ...
Batching resource and referrer updates ...
Executing batch update ...
&lt;/pre&gt;

* Comment out the new BuilderBuildstamp object definition after the first object load, and commit the changes to Subversion:

&lt;pre&gt;
[deploy@build objects]$ svn diff  builders.xml 
Index: builders.xml
===================================================================
--- builders.xml        (revision 106)
+++ builders.xml        (working copy)
@@ -32,7 +32,7 @@
        &lt;setting type=&quot;BuilderScmConnection&quot; name=&quot;myPuppetQa&quot; description=&quot;Puppet QA build Subversion URL&quot; settingValue=&quot;svn+ssh://subversion.localhost/var/svn/puppet/branches/qa&quot;/&gt;
        &lt;setting type=&quot;BuilderVersionTag&quot; name=&quot;myPuppetQa&quot; description=&quot;Puppet QA build version tag&quot; settingValue=&quot;qa&quot;/&gt;
        &lt;!-- We need to avoid resetting this value each time the object XML is loaded since doing so breaks the Purge job! --&gt;
-       &lt;setting type=&quot;BuilderBuildstamp&quot; name=&quot;myPuppetQa&quot; description=&quot;Puppet QA build current buildstamp&quot; settingValue=&quot;notset&quot;/&gt;
+       &lt;!-- &lt;setting type=&quot;BuilderBuildstamp&quot; name=&quot;myPuppetQa&quot; description=&quot;Puppet QA build current buildstamp&quot; settingValue=&quot;notset&quot;/&gt; --&gt;
[deploy@build objects]$ svn commit  builders.xml 
Sending        builders.xml
Transmitting file data .
Committed revision 107.
&lt;/pre&gt;

* Install the newly created builder object:

&lt;pre&gt;
[deploy@build objects]$ ctl-project -p myproject -a install 
.
.
.
&quot;Install&quot; command running for resource: (RpmBuilder) myPuppetQa
&lt;/pre&gt;

* Use the new object to checkout working files from Subversion for the CruiseControl project to use:

&lt;pre&gt;
[deploy@build objects]$ ctl -p myproject -t RpmBuilder -r myPuppetQa -c scmCheckout 
scmCheckout parameters: {basedir=&quot;/home/deploy/cruisecontrol-bin-2.8.2/projects/myPuppetQa&quot;, connection=&quot;svn+ssh://subversion.localhost/var/svn/puppet/branches/qa&quot;, module=&quot;&quot;, label=&quot;&quot;, scmcommand=&quot;checkout&quot; }
Created dir: /home/deploy/cruisecontrol-bin-2.8.2/projects/myPuppetQa
A    /home/deploy/cruisecontrol-bin-2.8.2/projects/myproject/projectPuppetQa/src
A    /home/deploy/cruisecontrol-bin-2.8.2/projects/myproject/PuppetQa/src/redhat
A    /home/deploy/cruisecontrol-bin-2.8.2/projects/myproject/PuppetQa/modules
A    /home/deploy/cruisecontrol-bin-2.8.2/projects/myproject/PuppetQa/modules/modules
.
.
.
Checked out revision 184.
[command.timer.Builder.scmCheckout: 1.413 sec]
&lt;/pre&gt;

* (Re-)Deploy CruiseControl to configure the new builder as a project:

&lt;pre&gt;
[deploy@build objects]$ ctl -p myproject -t CruiseControl -r myCruiseControl -c Deploy 
begin workflow command (1/4) -&gt; &quot;Stop &quot; ...
begin workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot; ...
Running handler command: stopService
CruiseControl stopped.
[command.timer.CruiseControl.stopService: 0.046 sec]
.
.
.
&lt;/pre&gt;

At this point you can pull up CruiseControl and confirm that the new builder is in the list of projects. The first build will kick-off automatically, and you can review its XML log file to identify the name of the RPM package it added to the ControlTier repository (e.g. &quot;myPuppetModules-qa.183-1.noarch.rpm&quot;).

[[Category:Puppet]]</text>
    </revision>
  </page>
  <page>
    <title>Pushing content to the Sourceforge web service</title>
    <id>361</id>
    <revision>
      <id>10177</id>
      <timestamp>2009-12-11T17:36:26Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">==Overview==


* Be sure you have chmod'd the files and directories to be 664/775 respectively

==SCP==

General form
&lt;pre&gt;
$ scp -r LOCALPATH user,project@web.sourceforge.net:htdocs/DESTPATH
&lt;/pre&gt;

Example
&lt;pre&gt;
$ scp -r mydocs ahonor,ctl-dispatch@web.sourceforge.net:htdocs/mydocs
&lt;/pre&gt;

==SFTP==

General form
&lt;pre&gt;
$ sftp user,project@web.sourceforge.net

cd htdocs
put LOCALFILE DESTFILE
&lt;/pre&gt;

Example
&lt;pre&gt;
$ sftp ahonor,controltier@web.sourceforge.net

cd htdocs
put myfile destfile
&lt;/pre&gt;

[[Category:Releases]]</text>
    </revision>
  </page>
  <page>
    <title>Pview.xml</title>
    <id>1595</id>
    <revision>
      <id>10386</id>
      <timestamp>2009-12-11T22:36:53Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Created page with 'The so called &quot;process flow view&quot; generated by the Get-Process-Flow command in [[Deployment]] type.  [[Category:Deployment]]'</comment>
      <text xml:space="preserve">The so called &quot;process flow view&quot; generated by the Get-Process-Flow command in [[Deployment]] type.

[[Category:Deployment]]</text>
    </revision>
  </page>
  <page>
    <title>QueryResults Type Reference</title>
    <id>159</id>
    <revision>
      <id>11358</id>
      <timestamp>2009-12-14T22:59:51Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Types&lt;/categorytree&gt;

=Description=
      &lt;p&gt;
	The queryresults type specifies an iterator for the mapperinput type
      &lt;/p&gt;
    
=queryresults=
     
=Parameters specified as nested elements=
      &lt;p&gt;&lt;strong&gt;propertiesquery&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
        One mandatory [[PropertiesQuery Type Reference|propertiesquery]] element.
      &lt;/p&gt;
    
=Examples=

     &lt;p&gt;
       see [[ApplyMacro Task Reference|apply-macro]] task.
      &lt;/p&gt;

&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Command Dispatcher Ant Types]]</text>
    </revision>
  </page>
  <page>
    <title>RPM Java detection</title>
    <id>1444</id>
    <revision>
      <id>10797</id>
      <timestamp>2009-12-12T21:58:20Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">The ControlTier RPM spec files just declare a Requires of &quot;java&quot; (and &quot;java-sdk&quot; for server). So any rpm that provides that would satisfy the dependency

There is also logic to check common JAVA_HOME dirs to find a java to use...this is similar to the logic used in Jetty's jetty.sh script

[[Category:Installers]]</text>
    </revision>
  </page>
  <page>
    <title>RPM client installer</title>
    <id>1620</id>
    <redirect />
    <revision>
      <id>10846</id>
      <timestamp>2009-12-12T23:45:07Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>moved [[RPM client installer]] to [[RPM installer (client-only)]]</comment>
      <text xml:space="preserve">#REDIRECT [[RPM installer (client-only)]]</text>
    </revision>
  </page>
  <page>
    <title>RPM installer</title>
    <id>1616</id>
    <revision>
      <id>15519</id>
      <timestamp>2011-09-25T05:20:38Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <comment>add yum install instructions</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Installation&lt;/categorytree&gt;

{{Version Required|3.4.9}}

Installs the ControlTier server and client software. The [[RPM installer (client-only)]] page contains instructions for installing just the client software via RPM distribution.

Alternatively, you can install via yum by following the instructions at the [http://repo.controltier.org ControlTier yum repository].

==Prerequisites ==

{{RPM installer prerequisites}}

== Server&amp;client install==

{{RPM server+client install}}

==Client-only installation==
{{main|RPM installer (client-only)}}

== Using the client ==

{{RPM using the client}}

== Appendix ==

{{RPM install appendix}}

{{Installation/navbox}}
[[Category:Installers]]</text>
    </revision>
  </page>
  <page>
    <title>RPM installer (client-only)</title>
    <id>1614</id>
    <revision>
      <id>10852</id>
      <timestamp>2009-12-12T23:50:51Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Installation&lt;/categorytree&gt;

{{Version Required|3.4.9}}

RPM installation for the ControlTier client. Use the [[RPM installer]] instructions to install the ControlTier server software.

==Prerequisites ==

{{RPM installer prerequisites}}

== Client only install==

{{RPM client install}}

== Using the client ==

{{RPM using the client}}

== Appendix ==

{{RPM install appendix}}

{{Installation/navbox}}
[[Category:Installers]]</text>
    </revision>
  </page>
  <page>
    <title>RPM installer (server+client)</title>
    <id>1624</id>
    <redirect />
    <revision>
      <id>10868</id>
      <timestamp>2009-12-13T00:01:41Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>moved [[RPM installer (server+client)]] to [[RPM installer]] over redirect</comment>
      <text xml:space="preserve">#REDIRECT [[RPM installer]]</text>
    </revision>
  </page>
  <page>
    <title>RPM installers</title>
    <id>1443</id>
    <revision>
      <id>15520</id>
      <timestamp>2011-09-25T05:21:09Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <comment>remove required version (RPM is provided for all 3.6 releases)</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Installation&lt;/categorytree&gt;
==Prerequisites ==

{{RPM installer prerequisites}}

== Client only install==

{{main|RPM installer (client-only)}}
If you want to install only the ControlTier client, use the &quot;ctier-client&quot; RPM file.

== Server&amp;Client install==
{{main|RPM installer}}
If you want to install the full ControlTier Server (which also includes all components of a client installation), use the &quot;ctier-server&quot; RPM file.

&lt;br/&gt;
{{Installation/navbox}}
[[Category:Installers]]</text>
    </revision>
  </page>
  <page>
    <title>RPM server installer</title>
    <id>1621</id>
    <redirect />
    <revision>
      <id>10849</id>
      <timestamp>2009-12-12T23:47:01Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>moved [[RPM server installer]] to [[RPM installer]]</comment>
      <text xml:space="preserve">#REDIRECT [[RPM installer]]</text>
    </revision>
  </page>
  <page>
    <title>Realm.properties</title>
    <id>1844</id>
    <redirect />
    <revision>
      <id>12498</id>
      <timestamp>2010-04-07T16:46:57Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <comment>redirect to [[Managing users]] because it has actual info</comment>
      <text xml:space="preserve">#REDIRECT [[Managing users]]</text>
    </revision>
  </page>
  <page>
    <title>Reference</title>
    <id>35</id>
    <redirect />
    <revision>
      <id>12066</id>
      <timestamp>2009-12-20T16:57:33Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[Category:Reference]]</comment>
      <text xml:space="preserve">#REDIRECT [[:Category:Reference]]</text>
    </revision>
  </page>
  <page>
    <title>Reference directory</title>
    <id>372</id>
    <revision>
      <id>1993</id>
      <timestamp>2009-01-17T19:12:35Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>New page: A ''reference directory'' is a directory that contains the files and directories as you want them on the target hosts relative to its installation root directory.  See also ---- * [[Creati...</comment>
      <text xml:space="preserve">A ''reference directory'' is a directory that contains the files and directories as you want them on the target hosts relative to its installation root directory.

See also
----
* [[Creating packages]]</text>
    </revision>
  </page>
  <page>
    <title>Release Management</title>
    <id>368</id>
    <revision>
      <id>12302</id>
      <timestamp>2010-01-15T16:57:47Z</timestamp>
      <contributor>
        <username>Gschueler</username>
        <id>8</id>
      </contributor>
      <comment>/* ControlTier 3.5 Development Branches (Vandelay) */</comment>
      <text xml:space="preserve">&lt;noinclude&gt;&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Development&lt;/categorytree&gt;&lt;/noinclude&gt;
This page describes the development process and Subversion structure used for the ControlTier releases.

In general, each project has a Subversion Trunk, and from that there may be one or more development branches.  Development for a particular version of a software release will happen on a &quot;dev&quot; branch.  Once development on this release is complete, the branch will be merged back to the Trunk, and a new dev branch will be created from the trunk.  Tags are also usually created from the Trunk or Branch when the development is complete for a particular branch.  Builds are performed from the Development branch for each project.

Once a development branch is completed, then the original development branch is branched to create a &quot;Support&quot; branch.  This branch is used to patch issues with the release after it has been completed.  Builds of older release are created from the Support branch.

The ControlTier project comprises several sub-projects which are in their own Subversion repositories.  Sub-projects also may have a different version number.

Starting with ControlTier version 3.3, the release version number will have the following meaning:

* Odd numbered releases (e.g. 3.3.0) are &quot;experimental&quot; and may contain new and incomplete features
* Even numbered releases (e.g. the future 3.4.0) are &quot;Stable&quot;.  Subsequent patches will have patch version numbers as well (3.4.x).

: '''Note''': The URLs below use the &quot;https&quot; scheme. Read-Only access is available by replacing that with the &quot;http&quot; scheme.

== Subversion Roots ==

* ControlTier Project: https://controltier.svn.sourceforge.net/svnroot/controltier
* CTL Project: https://ctl-dispatch.svn.sourceforge.net/svnroot/ctl-dispatch
* Jobcenter: https://webad.svn.sourceforge.net/svnroot/webad/
* The ControlTier Seed: https://moduleforge.svn.sourceforge.net/svnroot/moduleforge/controltier/

== ControlTier 3.5 Development Branches (Vandelay) ==

Version numbers are being consolidated into 3.5

* ControlTier Project: https://controltier.svn.sourceforge.net/svnroot/controltier/branches/controltier-3-5-dev
* CTL Project: https://ctl-dispatch.svn.sourceforge.net/svnroot/ctl-dispatch/branches/ctl-dispatch-3-5-dev
* The ControlTier Seed: https://moduleforge.svn.sourceforge.net/svnroot/moduleforge/controltier/branches/controltier-3-5-dev

== ControlTier 3.4 Support Branches (stable) ==

* ControlTier Project: https://controltier.svn.sourceforge.net/svnroot/controltier/branches/controltier-3-4-support
* CTL Project (1.4): https://ctl-dispatch.svn.sourceforge.net/svnroot/ctl-dispatch/branches/ctl-dispatch-1-4-support
* Jobcenter (1.4): https://webad.svn.sourceforge.net/svnroot/webad/branches/jobcenter-1-4-support
* The ControlTier Seed: https://moduleforge.svn.sourceforge.net/svnroot/moduleforge/controltier/branches/controltier-3-4-support
** Services branch: https://moduleforge.svn.sourceforge.net/svnroot/moduleforge/controltier/branches/controltier-3-4-services

: Note: For the 3.4 release, Jobcenter's internal version number has been bumped ahead to 1.4, to match the minor version number to the other projects.

== ControlTier 3.3 Development Branches ==

* ControlTier Project: https://controltier.svn.sourceforge.net/svnroot/controltier/branches/controltier-3-3-dev
* CTL Project (1.3): https://ctl-dispatch.svn.sourceforge.net/svnroot/ctl-dispatch/branches/ctl-dispatch-1-3-dev
* Jobcenter (1.2): https://webad.svn.sourceforge.net/svnroot/webad/branches/jobcenter-1-2-dev
* The ControlTier Seed: https://moduleforge.svn.sourceforge.net/svnroot/moduleforge/controltier/branches/controltier-3-3-dev

In addition, the ControlTier Seed will have another branch used for the service group's module development and maintenance efforts:

* The ControlTier Seed : https://moduleforge.svn.sourceforge.net/svnroot/moduleforge/controltier/branches/controltier-3-3-services

== ControlTier 3.2 ==

* ControlTier Project: https://controltier.svn.sourceforge.net/svnroot/controltier/branches/controltier-3-2-dev
** Support: https://controltier.svn.sourceforge.net/svnroot/controltier/branches/controltier-3-2-support
* CTL Project (1.2): https://ctl-dispatch.svn.sourceforge.net/svnroot/ctl-dispatch/branches/ctl-dispatch-1-2-dev
** Support: https://ctl-dispatch.svn.sourceforge.net/svnroot/ctl-dispatch/branches/controltier-3-2-ctl-dispatch-1-2-support
* Jobcenter (1.1): https://webad.svn.sourceforge.net/svnroot/webad/branches/jobcenter-1-0-dev
** Support: https://webad.svn.sourceforge.net/svnroot/webad/branches/controltier-3-2-jobcenter-1-0-support

{{CtDevelopment/navbox}}

[[Category:Development]]</text>
    </revision>
  </page>
  <page>
    <title>Replace your SSH loop script</title>
    <id>276</id>
    <revision>
      <id>15091</id>
      <timestamp>2010-12-16T16:37:53Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;noinclude&gt;&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Examples&lt;/categorytree&gt;&lt;/noinclude&gt;

This page introduces the idea of command dispatching using ctl-exec as an alternative to SSH looping scripts.

==Scenario==

You have a shell script that basically is an SSH loop around a set of remote hosts, where at each pass, you execute one or more commands. It has a structure something like this:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
FORALL host in HOST-LIST
  SSH host command statement
  .
  .
  .
END FORALL
&lt;/syntaxhighlight&gt;

Here's an example Bash script that executes the &lt;code&gt;uname&lt;/code&gt; command across two hosts:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
#!/bin/bash
NODES=&quot;centos demo@development&quot;
for n in $NODES
do
  ssh $n uname -a
done
&lt;/syntaxhighlight&gt;

===Issues===

* Can't debug it on one of the remote nodes
* It mixes looping and ssh calls 
* You have to edit your script anytime you need to change host targets. This is undesirable because it leads to a lot of one-off copies which end up being a burden to maintain.
* Often these are just a temporary solution so functionality, like error handling, are not implemented

==Alternatives==
Here are some alternatives that use [[CTL-EXEC_Command_Reference|ctl-exec]]. 

Benefits:
* Less code complexity: Looping, node addressing, and individual steps separated.
* Flexibility: Use the node filtering options
* Error recovery: Use &quot;-K&quot; to skip over any node where the command fails

===Single command===

If you have just a single command statement, you can use &lt;code&gt;ctl-exec&lt;/code&gt; like so:
&lt;pre&gt;
ctl-exec -- uname -a
&lt;/pre&gt;

===Scripts===

You can have &lt;code&gt;ctl-exec&lt;/code&gt; execute multiple commands in the form of a shell script. 

====Script file====
You might prefer to save a series of command statements to a script file. The &lt;code&gt;ctl-exec&lt;/code&gt; command will copy the script and execute it on each remote host:

File listing: info.sh
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
#!/bin/bash
uname -a;
who;
&lt;/syntaxhighlight&gt;

You can let &lt;code&gt;ctl-exec&lt;/code&gt; copy that script to the target host and then run it:
&lt;pre&gt;
ctl-exec -s info.sh
&lt;/pre&gt;


====Stdin====
The &lt;code&gt;ctl-exec&lt;/code&gt; command can read the script statements from standard input.
You can specify the &quot;-S&quot; or &quot;--stdin&quot;  option to have ctl-exec read from standard input.

Here's an example of the &lt;code&gt;uname&lt;/code&gt; command being read from stdin: 
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ echo &quot;uname -a&quot;|ctl-exec -S
&lt;/syntaxhighlight&gt;

You can also use the &quot;here document&quot; syntax:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl-exec -S &lt;&lt;EOS
command statement 1;
command statement 2;
...
command statement N;
EOS
&lt;/syntaxhighlight&gt;

Here's an example using the here document syntax:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl-exec -S &lt;&lt;EOS
uname -a;
who;
EOS
&lt;/syntaxhighlight&gt;


{{Guide/navbox}}

[[Category:Scripting Examples]]</text>
    </revision>
  </page>
  <page>
    <title>Replace your for loop script</title>
    <id>277</id>
    <redirect />
    <revision>
      <id>1228</id>
      <timestamp>2008-12-31T01:07:55Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>[[Replace your for loop script]] moved to [[Replace your SSH loop script]]</comment>
      <text xml:space="preserve">#REDIRECT [[Replace your SSH loop script]]</text>
    </revision>
  </page>
  <page>
    <title>Report Task Reference</title>
    <id>1331</id>
    <revision>
      <id>14388</id>
      <timestamp>2010-11-11T17:29:59Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Tasks&lt;/categorytree&gt;

Generates a report event viewable in [[Reportcenter]].
This task is a simple wrapper around [http://controltier.sourceforge.net/docs/snapshot/javadoc/common/org/opendepo/services/correlation/IndexAgent.html IndexAgent].

==Parameters==
&lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;author&lt;/td&gt;&lt;td&gt;User generating the report event&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;command&lt;/td&gt;&lt;td&gt;Command name&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;echo&lt;/td&gt;&lt;td&gt;Echo the message to the console. Can be &quot;true&quot; or &quot;false&quot;&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;echolevel&lt;/td&gt;&lt;td&gt;The log level to echo the message. Can be verbose, info, warn, error&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;resourcename&lt;/td&gt;&lt;td&gt;The resource name&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;entitytype&lt;/td&gt;&lt;td&gt;The resource type&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;ignoremalformed&lt;/td&gt;&lt;td&gt;Should values that contain apparent unset properties be used. true/false
		Applies to the values for: resourcename, entitytype, maprefuri, module&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;maprefuri&lt;/td&gt;&lt;td&gt;The resource mapref-uri&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;module&lt;/td&gt;&lt;td&gt;The command module name. Required if resourcename and entitytype are not set&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;nodename&lt;/td&gt;&lt;td&gt;The node name. Defaults to framework.node.name as defined in [[framework.properties]]&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;projectname&lt;/td&gt;&lt;td&gt;The project name&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;reportid&lt;/td&gt;&lt;td&gt;The report id&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;success&lt;/td&gt;&lt;td&gt;Does the event represent a successful operation. true/false&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
    
Text may also be included in a character section within this element.

==Examples==

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;report author=&quot;alexh&quot;  projectname=&quot;demo&quot; 
	resourcename=&quot;simpleTomcat&quot; entitytype=&quot;Service&quot; 
	command=&quot;Deploy&quot; module=&quot;Service&quot; success=&quot;true&quot;&gt;The deployment was successful&lt;/report&gt;	
&lt;/syntaxhighlight&gt;

Generates a log event that is set as successful status.

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;report author=&quot;${context.user}&quot;  projectname=&quot;${context.depot}&quot; 
	resourcename=&quot;${context.name}&quot; entitytype=&quot;${context.type}&quot; maprefuri=&quot;${resource.mapref-uri}&quot;
	command=&quot;${command.name}&quot; module=&quot;${module.name}&quot; success=&quot;true&quot;&gt;${content}&lt;/report&gt;	
&lt;/syntaxhighlight&gt;

Similar to example above but this time soft coded with context data.

&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Utility Ant Tasks]]
[[Category:Event logging]]</text>
    </revision>
  </page>
  <page>
    <title>Reportcenter</title>
    <id>228</id>
    <revision>
      <id>15635</id>
      <timestamp>2011-10-27T17:16:53Z</timestamp>
      <contributor>
        <username>Gschueler</username>
        <id>8</id>
      </contributor>
      <minor/>
      <comment>Reverted edits by [[Special:Contributions/Jeraldinesewell|Jeraldinesewell]] ([[User talk:Jeraldinesewell|talk]]) to last revision by [[User:Ahonor|Ahonor]]</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Webapps&lt;/categorytree&gt;
{{Cleanup}}

      &lt;p&gt;Reportcenter is a tool for tracking operational activity as it happens and generating historical reports. Reportcenter is a standalone logger that collects activity events from various ControlTier components including commands run from the command line, jobs run though JobCenter, and changes to the resource model made in Workbench. Currently, Reportcenter's primary use is for viewing activity reports. 
      &lt;/p&gt;

==Features==
[[Image:ReportCenter-rc-overview.png]]

      &lt;p&gt;&amp;nbsp;&lt;/p&gt;
      &lt;p&gt;&lt;strong&gt;Current Features:&lt;/strong&gt;&lt;/p&gt;
      &lt;ul&gt;
  &lt;li&gt;View list of all activity&lt;/li&gt;
  &lt;li&gt;Filter list of events by type, date, job name (if any), user, etc.&lt;/li&gt;
  &lt;li&gt;Create custom RSS feeds of activity for viewing in external readers&lt;/li&gt;
  &lt;li&gt;Integration with JobCenter and Workbench web interfaces&lt;/li&gt;
  &lt;li&gt;External tools can query the Reportcenter repository using a web-based API&lt;/li&gt;
  &lt;li&gt;Create and plug-in fully customizable report templates and logic (using [http://www.eclipse.org/birt/phoenix/ BIRT from the Eclipse project])&lt;/li&gt;
	
      &lt;/ul&gt;      
&lt;gallery&gt;
Image:ReportCenter-rc-report.png|Messages
Image:ReportCenter-rc-filter.png|Filtering
&lt;/gallery&gt;


==How do I use Reportcenter?==

      &lt;p&gt; The Reportcenter application is installed and configured
      via the ControlTier installer.
      &lt;/p&gt;

===Choose event type===
&lt;p&gt;Start off by going to the Reportcenter main page. 
      You can go to the Reportcenter URL directly, or navigate
      to it from Jobcenter or Workbench.
      &lt;/p&gt;

[[Image:ReportCenter-using-step-1.png]]

      &lt;p&gt;Choose the kind of report you are interested in. For example, if you are interested
      in the activity managed by [[Jobcenter]] then choose 
      &amp;quot;Jobs&amp;quot;. 
      This will bring up the most recent job history.
      &lt;/p&gt;

===Filter===
&lt;p&gt;You may be interested in looking for particular kinds of activity.
      Reportcenter lets you filter the history by various key words
      as well as, by date range.
      &lt;/p&gt;
      &lt;p&gt;Press the &amp;quot;Filter&amp;quot; button to bring up the filter panel.
      &lt;/p&gt; 

[[Image:ReportCenter-using-step-2.png]]

      &lt;p&gt;You may also want to customize the report format, including or excluding
      particular columns. Press the &amp;quot;Customize Report&amp;quot; button to configure
      your output.
      &lt;/p&gt;

===RSS feed===
&lt;p&gt;Now that you have chosen, filtered and configured
      your report activity, you can now keep up to date via an RSS feed. Press
      the &amp;quot;RSS&amp;quot; button to access the feed link.
      &lt;/p&gt;

[[Image:ReportCenter-using-step-3.png]]

      &lt;p&gt;Paste the RSS URL into your favorite RSS reader.
      &lt;/p&gt;

===Custom report templates===

      &lt;p&gt;Reportcenter has built in integration with the
      [http://www.eclipse.org/birt/phoenix/ Eclipse BIRT framework].
      Create your own report templates using the BIRT design tool and then execute your
      custom report at any time.
      &lt;/p&gt;

[[Image:ReportCenter-rc-birt-list.png]]

{{Manual/navbox}}

[[Category:Reportcenter]]</text>
    </revision>
  </page>
  <page>
    <title>Reportcenter Query API</title>
    <id>370</id>
    <revision>
      <id>14775</id>
      <timestamp>2010-11-23T06:32:06Z</timestamp>
      <contributor>
        <username>Anthony</username>
        <id>42</id>
      </contributor>
      <text xml:space="preserve">;Version:  0.3
;Last Modified Date: 3/8/2008
;Author: Greg Schueler &lt;greg@controltier.com&gt;
   
== Summary ==
This document specifies the Reports Remote Query API for ControlTier 3.0rc2.
 
Reports can be viewed from the main page of the Workbench GUI after selecting aproject, and are messages generated by both the ControlTier Server and theControlTier Client.
 
The reports can also be queried by use of REST-ful API for report entriesmatching a set of query parameters.   All of the fields of the reports canbe queried, and the query response will be returned in a simple XML documentformat.
 
== Report Fields ==
 
The report tool uses Lucene to index and search the reports, and Antdepo uses Log4j to send them to the Reports tool of ControlTier Server.
 
The Lucene index uses a particular set of fields for each report: 
 
{| border=&quot;1&quot;
!Field!! Description!! Type!! Notes
|-
|action || Action being performed || String || Brief description of the action, e.g. &quot;Object Create&quot;, or &quot;Command Execution&quot;
|- 
| actionType || Type of action being performed || Constant || for Model reports: create, delete, update. for Command executions: fail, succeed
|- 
| author || name of the user || String
|- 
| commandName || Name of command that was executed || String
|- 
| controller || Name of Module/controller for command execution || String
|- 
| date || Date and time of the log message || Timestamp
|- 
| resourceName || Name of the resource || String
|- 
| resourceType || Type name of the resource || String
|- 
| itemType || Report entry type || String || for Model reports: object, type, pattern, project. for Command executions: commandExec
|- 
| maprefUri || URI of the resource || String
|- 
| message || Message text || String    
|- 
| nodename || Name of the node || String
|- 
| patternName || Name of the pattern || String || Used for Pattern add/remove in the data model only.
|- 
| project || Name of the project || String || '''(required)'''
|- 
| reportId || Identifier for a sequence of related reports. || String  
|}

These fields are present in every Report entry, however not all fields are usedin each entry.   Depending on the &quot;actionType&quot; and &quot;itemType&quot;, some fields will have different meanings as well.

Note: The following fields are stored in &quot;keyword&quot; form in the lucene index, meaning they are not textually tokenized to allow full searching ability.   They can be searched for the exact value, but wildcard operators cannot be used.
 
* project
* maprefUri
* actionType
* itemType
* commandName
* controller

== Report Entry Item Types and Action Types ==
 
Each report entry is generated by one of two events: a change to the Workbenchdata model due to user action, or a command execution in the CTL/Jobcenter environment. The type of the report entry can be determined by the itemType field.
 
For command execution reports, the itemType field will be&quot;commandExec&quot;.   For data model changes, the itemType field will be one of:&quot;object&quot;,&quot;type&quot;,&quot;pattern&quot;,or &quot;project&quot;, depending on the resource that was modified in the Workbench data model.
 
Further, the actionType field specifies what kind of action occurred to generate the report entry: For model changes, actionType is either &quot;create&quot;,&quot;update&quot; or &quot;delete&quot;. For command executions, actionType is either &quot;succeed&quot; or&quot;fail&quot;.

== Query API == 
The format of the request and response are described below.

=== Request ===
The query is sent in a REST-ful manner using a HTTP GET request with URL parameters to specify the field query values, and retrieving the result set as adocument in the HTTP response.

: '''Note: Before performing the query request, your HTTP user-agent must be authenticated to the ControlTier server.   See: [[#Authentication]].'''
 
The query URL is based on the location of your ControlTier CtlCenter server installation:

&lt;pre&gt;http://&lt;host&gt;:&lt;port&gt;/ctlcenter/reports/query?&lt;params&gt;&lt;/pre&gt;

Where &amp;lt;host&amp;gt; and &amp;lt;port&amp;gt; are as described in this table:
 
{| border=&quot;1&quot;
|-
!URL part
!   Description
|-
| host
|  ControlTier Workbench hostname/IP address
|-  
| port
|  ControlTier Workbench TCP port (usually 8080)  
|}

The query fields and query values are specified as simple HTTP query parameters at the end of the URL.   The names of the query parameters match the field names for Report entries, as described above. (See: [[#Report Fields]].)   

For each query, the following field query parameters are required:

{| border=&quot;1&quot;
! Required parameter !! Purpose  
|-
|project || specifies the name of the project  
|}

In addition, '''at least one field in addition to project is required'''.   This is to prevent the result set from being too large.

In addition to all of the Fields names, the following additional parameters are allowed in the query.
 
{| border=&quot;1&quot;
!URL part
!Description
|-   
|format
|Format for results of the query. (optional)
Possible values: &lt;code&gt;xml&lt;/code&gt;
|-  
|sortBy
|Field name on which to sort the results (default: &lt;code&gt;date&lt;/code&gt;)
|-  
|sortOrder
|Direction for sorting: &lt;code&gt;ascending&lt;/code&gt; or &lt;code&gt;descending&lt;/code&gt;. (default: &lt;code&gt;descending&lt;/code&gt;)
|-  
|dateStart 
|Start date for finding results within a date range. (integer)  
|-
|dateEnd
|End date for finding results within a date range. (integer)  
|}

The sortBy parameter specifies that the results are sorted by that field.   The sortOrder specifies how the sorting is ordered: ascending (incrementing) or descending (decrementing).

The reports entries can be filtered by date by specifying the &quot;date&quot;, &quot;dateStart&quot; or &quot;dateEnd&quot; parameters.   The value for these query parameters is a Unix epoch time in milliseconds.   If you specify &quot;date&quot;, then only entries matching that date exactly will be returned.   &quot;dateStart&quot; filters the results to all entries at and after that timestamp, and &quot;dateEnd&quot; includes all entries at or before that timestamp.   

The request parameter names and values must be formatted properly according to the HTTP spec.   This means that characters like space (&quot; &quot;) and other characters that are special in the HTTP request and URL must be properly URL encoded.   Normally a HTTP-access code library will do this encoding for you.

=== Wildcards ===
Wildcard operators can be used in the queries, for most of the fields. (Except the Keyword fields as described above.)

These operators are:

* &quot;*&quot;: star, matches any sequence of zero or more characters
* &quot;?&quot;: question-mark. matches a single character.

Thus you can search for any value starting with the string &quot;&lt;code&gt;blue&lt;/code&gt;&quot;, by using the query &quot;&lt;code&gt;blue*&lt;/code&gt;&quot;.   Or, you can search for any three-letter word that starts with B and ends with D by searcing for &quot;B?D&quot;.

: '''Note''': Wildcard characters '''cannot be used as the first character of the query.'''
 
=== Query Example ===
For example, suppose you wanted to query the following field values:
{| border=&quot;1&quot;
!field
!value
|-  
|project
|MyProject1
|-  
|resourceName
|   testObject
|-   
|resourceType
|   MyType
|-   
|itemType
|   commandExec
|-   
|actionType
|   succeed
|-   
|reportId
|  20070313-*
|}   

And your ControlTier Server exist on host ctierserv1 and port 8080.
 
They query would be constructed as so:

: &lt;code&gt;http://ctierserv1:8080/ctlcenter/reports/query?project=MyProject1&amp;resourceName=testObject&amp;resourceType=MyType&amp;itemType=commandExec&amp;actionType=succeed&amp;reportId=20070313-*&lt;/code&gt;
 
=== XML Response Format ===
The Response to the query comes in the form of a simple XML document, with the following structure (See: [[#Result XML DTD]]) :

&lt;pre&gt;
&amp;lt;reports-query-result&amp;gt;
  &amp;lt;reports count=&quot;N&quot;&amp;gt;
    &amp;lt;report-entry&amp;gt;
      &amp;lt;!-- report-entry contents --&amp;gt;
    &amp;lt;/report-entry&amp;gt;
  &amp;lt;/reports&amp;gt;
 &amp;lt;/reports-query-result&amp;gt;
&lt;/pre&gt;

The &amp;lt;reports&amp;gt; element will contain the number of &amp;lt;report-entry&amp;gt; sub-elements int the &quot;count&quot; attribute.
 
The contents of the &amp;lt;report-entry&amp;gt; element are elements for each of the Fields described above.   Some fields may or may not be present, depending on whether the report contained values for those fields, and the itemType and actionType of the report.   These elements will always be present, however: date, author, project, itemType, actionType, action, message.   The itemType and actionType fields are present as attributes of the &amp;lt;report-entry&amp;gt; element as well.   The date element will also have an attribute named &quot;time&quot; that specifies the unix epoch timestamp in milliseconds.

The MIME type of the result will be: &quot;&lt;code&gt;text/xml;charset=UTF-8&lt;/code&gt;&quot;.
 
Example 
&lt;pre&gt;
&amp;lt;reports-query-result&amp;gt;
 &amp;lt;reports count=&quot;2&quot;&amp;gt;
    &amp;lt;report-entry itemType=&quot;commandExec&quot; actionType=&quot;succeed&quot;&amp;gt;
      &amp;lt;date time=&quot;1174677709274&quot;&amp;gt;Mar 23, 2007 12:21:49 PM&amp;lt;/date&amp;gt;
      &amp;lt;author&amp;gt;greg&amp;lt;/author&amp;gt;
      &amp;lt;project&amp;gt;Test1&amp;lt;/project&amp;gt;
      &amp;lt;itemType&amp;gt;commandExec&amp;lt;/itemType&amp;gt;
      &amp;lt;resourceType&amp;gt;ProjectBuilder&amp;lt;/resourceType&amp;gt;
      &amp;lt;resourceName&amp;gt;test&amp;lt;/resourceName&amp;gt;
      &amp;lt;controller&amp;gt;Deployment&amp;lt;/controller&amp;gt;
      &amp;lt;commandName&amp;gt;Install&amp;lt;/commandName&amp;gt;
      &amp;lt;maprefUri&amp;gt;http://www.opendepo.org/ct/Test1/Objects#obj_83&amp;lt;/maprefUri&amp;gt;
      &amp;lt;nodename&amp;gt;gozer&amp;lt;/nodename&amp;gt;
      &amp;lt;reportId&amp;gt;LY_ctier_v1&amp;lt;/reportId&amp;gt;
      &amp;lt;actionType&amp;gt;succeed&amp;lt;/actionType&amp;gt;
      &amp;lt;action&amp;gt;Command Execution&amp;lt;/action&amp;gt;
      &amp;lt;message&amp;gt;
        command completed successfully. Execution time: 0.722 sec
      &amp;lt;/message&amp;gt;
    &amp;lt;/report-entry&amp;gt;
 
    &amp;lt;report-entry itemType=&quot;object&quot; actionType=&quot;update&quot;&amp;gt;
      &amp;lt;date time=&quot;1174677709257&quot;&amp;gt;Mar 23, 2007 12:21:49 PM&amp;lt;/date&amp;gt;
      &amp;lt;author&amp;gt;default&amp;lt;/author&amp;gt;
      &amp;lt;project&amp;gt;Test1&amp;lt;/project&amp;gt;
      &amp;lt;itemType&amp;gt;object&amp;lt;/itemType&amp;gt;
      &amp;lt;resourceType&amp;gt;ProjectBuilder&amp;lt;/resourceType&amp;gt;
      &amp;lt;resourceName&amp;gt;test&amp;lt;/resourceName&amp;gt;
      &amp;lt;maprefUri&amp;gt;http://www.opendepo.org/ct/Test1/Objects#obj_83&amp;lt;/maprefUri&amp;gt;
      &amp;lt;actionType&amp;gt;update&amp;lt;/actionType&amp;gt;
      &amp;lt;action&amp;gt;Update Object Referrers&amp;lt;/action&amp;gt;
      &amp;lt;message&amp;gt;Modified parents&amp;lt;/message&amp;gt;
    &amp;lt;/report-entry&amp;gt;
 
  &amp;lt;/reports&amp;gt;
&amp;lt;/reports-query-result&amp;gt;
&lt;/pre&gt;

=== Errors ===
 
Successful requests will result in a 200 OK HTTP response.   If there is an error with authentication, or an error processing the HTTP request, the web server will reply with a non-200 error code in the HTTP response.
 
If there is an error processing the query, or an error occurs during the query execution, then the &amp;lt;reports-query-result&amp;gt; element will have an attribute named &quot;error&quot; with a value of &quot;true&quot;, and an element named &amp;lt;errors&amp;gt; will contain any error messages :

&lt;pre&gt;
&amp;lt;reports-query-result error=&quot;true&quot;&amp;gt;
  &amp;lt;errors&amp;gt;
    &amp;lt;error&amp;gt;Error message&amp;lt;/error&amp;gt;
  &amp;lt;/errors&amp;gt;
&amp;lt;/reports-query-result&amp;gt;
&lt;/pre&gt;

== Authentication ==
Authentication is required to query the Reports API.   A valid ControlTier Server username and password are required.
 
The authentication must occur prior to sending of the Query Request, and the Query Request must include the correct HTTP cookies to maintain the authentication that was previously carried out.

: '''The ControlTier Client (&quot;Commander&quot;) contains a set of Java classes that can perform this authentication using the [http://jakarta.apache.org/commons/httpclient/ Apache Commons HttpClient library].   To use the Commander classes to authenticate, see the section [[#Authentication Through Commander]].'''
 
Performing Authentication 
ControlTier server runs on the Tomcat 4.x servlet container application, and the servlet specification defines three ways that authentication can be performed.   Of these, ControlTier Server uses the FORM-BASED authentication method.
 
This is the sequence for performing FORM-BASED authentication to the ControlTier Server:
 
# Submit a HTTP-GET request for a URL (the Original URL) that requires authentication from the server. 
## Instead of presenting the requested page, the server will redirect the HTTP client to the Logon URL, a page which includes a logon form. 
## The server will also set a Cookie in the response containing a Session ID.
## Submit the Logon Request (see below) 
### If the username and password are correct, the server will redirect the client back to the Original URL. 
#### Further authenticated requests can now be made to the server, as long as the correct Session ID is included as a Cookie.
#### If the username and password are invalid, the server will redirect to the Logon Error URL, a page where the logon form is included again.
 
This authentication can be done programmatically, and is most easily done by use of a HTTP code library that can act as a User-Agent and correctly maintain the Cookies between requests.

=== Authentication In Detail ===
 
Definitions:
 
{| border=&quot;1&quot;
|USERNAME
|The username
|-  
|PASSWORD
|The password
|-  
|HOSTNAME
|the IP Address or Hostname of the ControlTier Workbench server.   
|-
|PORT
|the TCP port that the Workbench server is available on.   
|-
|PROTOCOL
|either &quot;http&quot; or &quot;https&quot;: the HTTP protocol that Workbench is using.  
|-
|BASE_URL
|PROTOCOL://HOSTNAME:PORT/ctlcenter   
|-
|START_URL
|BASE_URL/do/menu/Welcome  
|-
|LOGON_URL
|BASE_URL/Logon.do
|-
|LOGON_ERROR_URL
|BASE_URL/LogonError.do
|}
   
To perform Authentication do the following:
 
# Send a HTTP-GET request for the START_URL to the server. 
## The response should be one of:
### 200 (OK): then authentication has already occurred, and nothing more needs to be done.
### A Redirect Response (see below).
### If it is not one of the 300 status codes, then it is an error.
### The response header field &quot;Location&quot; should contain a URL X. 
### X should be equivalent to LOGON_URL. 
### The response should contain a Cookie named JSESSIONID.   This Cookie must be stored and sent in subsequent requests to maintain the user session. 
### Send a HTTP-GET request for X to the server. 
#### If the response STATUS code is not 200 (OK) it is an error. 
### Send the Logon Request to the server using the USERNAME and PASSWORD values 
#### The response should be a Redirect Response. 
#### The &quot;Location&quot; header should contain a URL Y. 
#### Y should be equivalent to the START_URL. If so, authentication has been completed. 
#### If Y is equivalent to LOGON_ERROR_URL then the user authentication failed, and the username or password are incorrect. 
#### Any other response is an error. 

After completing these steps, the Cookie which specifies the user session will allow further requests to ControlTier server to succeed without authentication.

=== Authentication Through Commander ===
The ControlTier Client (Commander) contains Java code which can perform the authentication steps described above, using the Apache Commons HttpClient library (3.x).
 
Library Dependencies:
 
* apache-commons-httpclient-3.0.jar 
* apache-commons-codec-1.3.jar 
* commander-3.0rc2.jar 
* log4j-1.2.9.jar
* apache-commons-logging-1.0.4.jar

The Java class that is used is:
 
: &lt;code&gt;com.controltier.commander.utils.DefaultFormAuthenticator&lt;/code&gt;
 
You can create a new instance of this class by using the constructor:
 
: &lt;code&gt;DefaultFormAuthenticator(String username, String password);&lt;/code&gt;
 
You can then authenticate your HttpClient instance with the following method:

&lt;pre&gt;

/**
* Authenticate the client http state so that the workbench requests can be made.
* @param baseURL base URL of the Workbench server, used to determine the server's protocol, host, and port.
* @param client HttpClient instance
* @return true if authentication succeeded.
* @throws HttpClientException
*/
public boolean authenticate(URL baseURL, HttpClient client) throws com.controltier.commander.utils.HttpClientException;

&lt;/pre&gt;

The Apache Commons HttpClient library's HttpClient (org.apache.commons.httpclient.HttpClient) class maintains inter-request state via a class named HttpState (org.apache.commons.httpclient.HttpState).   By re-using the HttpClient instance, or at least the HttpState instance, once you authenticate to Workbench you will be able to make further requests without having to re-authenticate.
 
The following Java code shows an example of how to use the DefaultFormAuthenticator class:

&lt;pre&gt;

HttpClient client = new HttpClient();
DefaultFormAuthenticator authenticator = new DefaultFormAuthenticator(&quot;user1&quot;,&quot;pass1&quot;);
              
//check that the state has a workbench session
URL reqUrl = new URL(&quot;http://ctierserv:8080/ctlcenter&quot;);
if (!authenticator.authenticate(reqUrl, getHttpClient())) {
  throw new AuthorizationFailureException(&quot;Unable to authenticate user: &quot; + authenticator.getUsername() );
}
 
//now the HttpClient is authenticated.
 
&lt;/pre&gt;

== Appendix==

=== Redirect Response ===

A Redirect response has a STATUS code that should be one of:
 
* 302 (Moved Temporarily) 
* 301 (Moved Permanently) 
* 303 (See Other) 
* 307 (Temporary Redirect)
 
It also has a Header field named &quot;Location&quot; that contains a URL or URL path to redirect to.
 
=== Logon Request ===

The Logon Request is a HTTP-POST request sent to the URL path &quot;/j_security_check&quot;.   The body of the request has the MIME type of &quot;application/x-www-form-urlencoded&quot;, and be in the URL encoded format.   The body should contain the following key/value pairs:
 
{| border=&quot;1&quot;
!key
!  value
|-   
|j_username
|  The username value
|-   
|j_password
|  The password value
|}   

=== Result XML DTD ===
&lt;pre&gt;
&amp;lt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&amp;gt;

&amp;lt;!ELEMENT reports-query-result (reports|errors)   &amp;gt;

&amp;lt;!ELEMENT reports (report-entry*) &amp;gt;
&amp;lt;!ATTLIST reports count CDATA #REQUIRED &amp;gt;

&amp;lt;!ELEMENT errors (error+) &amp;gt;

&amp;lt;!ELEMENT error (#PCDATA) &amp;gt;

&amp;lt;!ELEMENT report-entry (date,author,project,itemType,resourceType?,resourceName?,controller?,commandName?,maprefUri?,nodename?,actionType,action,message)   &amp;gt;
&amp;lt;!ATTLIST report-entry 
     itemType (object|type|project|pattern|commandExec) #REQUIRED 
     actionType (create|delete|update|fail|succeed) #REQUIRED &amp;gt;

&amp;lt;!ELEMENT date (#PCDATA) &amp;gt;
&amp;lt;!ATTLIST date time CDATA #REQUIRED &amp;gt;

&amp;lt;!ELEMENT author (#PCDATA) &amp;gt;
&amp;lt;!ELEMENT project (#PCDATA) &amp;gt;
&amp;lt;!ELEMENT itemType (#PCDATA) &amp;gt;
&amp;lt;!ELEMENT resourceType (#PCDATA) &amp;gt;
&amp;lt;!ELEMENT resourceName (#PCDATA) &amp;gt;
&amp;lt;!ELEMENT controller (#PCDATA) &amp;gt;
&amp;lt;!ELEMENT commandName (#PCDATA) &amp;gt;
&amp;lt;!ELEMENT maprefUri (#PCDATA) &amp;gt;
&amp;lt;!ELEMENT nodename (#PCDATA) &amp;gt;
&amp;lt;!ELEMENT actionType (#PCDATA) &amp;gt;
&amp;lt;!ELEMENT action (#PCDATA) &amp;gt;
&amp;lt;!ELEMENT message (#PCDATA) &amp;gt;

&lt;/pre&gt;



=== Full Code Example ===
&lt;syntaxhighlight lang=&quot;java&quot;&gt;  
/* file: TestReports.java 
 dependencies: 
  apache-commons-httpclient-3.0.jar 
  apache-commons-codec-1.3.jar 
  commander-3.0rc2.jar 
  log4j-1.2.9.jar
  apache-commons-logging-1.0.4.jar
*/
import com.controltier.commander.utils.DefaultFormAuthenticator;
import com.controltier.commander.utils.HttpClientException;
import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.HttpException;
import org.apache.commons.httpclient.HttpMethod;
import org.apache.commons.httpclient.methods.GetMethod;

import java.io.IOException;
import java.net.URL;
import java.net.URLEncoder;
import java.util.Iterator;
import java.util.Map;
import java.util.HashMap;


/**
  * TestReports demonstrates the Query Reports API of ControlTier Workbench.
  *
  * @author Greg Schueler &lt;a href=&quot;mailto:greg@controltier.com&quot;&gt;greg@controltier.com&lt;/a&gt;
  */
public class TestReports {
       private static final String CTIER_SERVER = &quot;localhost&quot;;
       private static final String CTIER_PORT = &quot;8080&quot;;
       private static final String HTTP_PROTOCOL = &quot;http&quot;;

       /**
         * main method
         *
         * @param args
         *
         * @throws IOException
         * @throws HttpClientException
         */
       public static void main(String[] args) throws IOException, HttpClientException {

               if (args.length &lt; 2) {
                       System.err.println(&quot;usage: username password [param value ...]&quot;);
                       System.exit(2);
               }
               int c = 0;
               String username = args[c++];
               String password = args[c++];
               HashMap map = new HashMap();
               while (c + 1 &lt; args.length) {
                       map.put(args[c++], args[c++]);
               }
               new TestReports(username, password).query(map);
       }

       DefaultFormAuthenticator auth;
       HttpClient client;

       /**
         * Constructor
         *
         * @param username controltier username
         * @param password controltier password
         */
       public TestReports(String username, String password) {
               this.client = new HttpClient();
               this.auth = new DefaultFormAuthenticator(username, password);
       }

       public static String QUERY_URL = HTTP_PROTOCOL + &quot;://&quot; + CTIER_SERVER + &quot;:&quot; + CTIER_PORT
                                                                         + &quot;/ctlcenter/reports/query&quot;;


       public void query(Map params) throws HttpClientException, IOException {
               String request = constructURLQuery(QUERY_URL, params);
               auth.authenticate(new URL(request), client);
               HttpMethod method = new GetMethod(request);

               int resultCode;
               String resultType = null;
               String expectedContentType = &quot;text/xml&quot;;
               StringBuffer results = new StringBuffer();
               try {
                       resultCode = client.executeMethod(method);
                       if (200 != resultCode) {
                               System.err.println(&quot;Bad Result Code: &quot; + resultCode);
                               return;
                       }

                       if (null != method.getResponseHeader(&quot;Content-Type&quot;)) {
                               resultType = method.getResponseHeader(&quot;Content-Type&quot;).getValue();
                               String[] ar = resultType.split(&quot;;&quot;);
                               if (null != ar &amp;&amp; ar.length &gt; 1) {
                                       resultType = ar[0];
                               }
                       }
                       if (null == expectedContentType || expectedContentType.equals(resultType)) {

                               results.append(method.getResponseBodyAsString());
                       } else {
                               System.err.println(&quot;Content-Type was not expected: &quot; + resultType);
                       }
               } catch (HttpException e) {
                       e.printStackTrace();
               }
               method.releaseConnection();
               System.out.println(results.toString());
       }


       /**
         * Create new URL with query parameters
         */
       private String constructURLQuery(String urlbase, Map query) {
               StringBuffer sb = new StringBuffer(urlbase);
               sb.append(&quot;?&quot;);
               for (Iterator i = query.entrySet().iterator(); i.hasNext();) {
                       Map.Entry entry = (Map.Entry) i.next();
                       String key = (String) entry.getKey();
                       Object val = entry.getValue();
                       if (null == val) {
                               val = &quot;&quot;;
                       }
                       try {
                               sb.append(URLEncoder.encode(key, &quot;UTF-8&quot;))
                                       .append(&quot;=&quot;)
                                       .append(URLEncoder.encode(val.toString(), &quot;UTF-8&quot;));
                       } catch (java.io.UnsupportedEncodingException exc) {
                               throw new RuntimeException(&quot;URLEncoder failed on UTF-8 encoding&quot;);
                       }
                       if (i.hasNext()) {
                               sb.append(&quot;&amp;&quot;);
                       }
               }
               return sb.toString();
       }
}

&lt;/syntaxhighlight&gt;

{{Reference/navbox|state=uncollapsed}}

[[Category:Reportcenter]]
[[Category:API Reference]]</text>
    </revision>
  </page>
  <page>
    <title>Resource</title>
    <id>1632</id>
    <revision>
      <id>13979</id>
      <timestamp>2010-11-10T15:27:17Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;-objects&quot; to &quot;-resources&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Types&lt;/categorytree&gt;

The Resource type is the root type of the ControlTier types.

[[File:Aome-structure.png]]

==Definition==

===Metadata===
Each Resource is described with this fields:

* name: a symbolic name of the setting
* description: description of the node's role or function
* type: the resource type
* referrers: Parent resources (see [[Assembly]])

===Querying===
You can also use the [[ProjectBuilder]] &lt;code&gt;find-resources&lt;/code&gt; command to query with criteria:

&lt;pre&gt;
ctl -p project -m ProjectBuilder -c find-resources -- -type Resource 
&lt;/pre&gt;

[[Category:Resource]]</text>
    </revision>
  </page>
  <page>
    <title>Resource.properties</title>
    <id>129</id>
    <revision>
      <id>14099</id>
      <timestamp>2010-11-10T15:35:36Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>moved [[Entity.properties]] to [[Resource.properties]]</comment>
      <text xml:space="preserve">==Use==
      &lt;p&gt;
	Settings managing managed-resource level configuration.
      &lt;/p&gt;
      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	  &lt;th&gt;Property&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;resource.instance.dir&lt;/td&gt;&lt;td&gt;The base directory for the entity
	    deployment&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt; resource.dirlist&lt;/td&gt;&lt;td&gt;The default directories to create at
	    deployment install&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt; resource.properties.file&lt;/td&gt;&lt;td&gt;The file containing the metadata for
	    this resource deployment &lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;

==Location==
===Client===
This the resource model for a given entity

&lt;code&gt;$CTL_BASE/projects/&lt;/code&gt;''project''&lt;code&gt;/resources/&lt;/code&gt;''type/name''&lt;code&gt;/var/resource.properties&lt;/code&gt;

''Example''

&lt;pre&gt;/Users/alexh/ctier/ctl/projects/demo/resources/Site/mock1/var/resource.properties&lt;/pre&gt;

==Generation and synchronization==
If Workbench is enabled, this file is generated by Workbench (and it will be by default). The file is regenerated on the server any time the object is edited. 

CTL synchronizes with the server, pulling this file if any change has been detected since the last time it was updated.
You can force the synchronization by running the &lt;code&gt;Get-Properties&lt;/code&gt; command:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;ctl -p project -t Type -r resource -c Get-Properties&lt;/syntaxhighlight &gt;

If Workbench is disabled, it is possible to maintain this file directly either manually or external tool.

[[Category:CTL properties]]</text>
    </revision>
  </page>
  <page>
    <title>Resource Model</title>
    <id>620</id>
    <revision>
      <id>13695</id>
      <timestamp>2010-11-10T15:06:11Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;Service object&quot; to &quot;Service resource&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Resource model&lt;/categorytree&gt;

The ControlTier Resource Model is a generic, object-oriented datastore that lets you construct concrete representations of your real-world systems and components (Resources), as well as abstracted scripts and workflows to operate on them.

This document describes how the Resource model lets you represent a business service and support the automation of your key service management processes using the Type system.

== Summary ==

The ControlTier Resource Model is the central storage place for most data used by the ControlTier software, and can be viewed and interacted with directly using the [[Graphical resource editor]].  All of the Type and Resource data within the Model can also be managed as [[XML]], and loaded into the server by executing a shell command.

These are the data that are stored within it:

* Components - each software, service or logical grouping of components is stored as a '''Resource'''
* Configuration data - individual strings and configuration values are stored as '''Settings'''
* Classifcation - each component is classified as a certain '''Type''', giving it a certain set of behaviors and restrictions
* Defined Commands - each scripted process or workflow is defined as a '''Command''' within a Type

:(Note, the Resource Model does not store ''files'', however. These are represented by the [[Package]] type and the file content is stored in the [[File share]].)

The data from the Resource Model is used to produce metadata used by other ControlTier systems, such as the [[Command dispatcher]], and the [[ControlTier client]].

== Basic Concepts ==

There are four basic concepts in the modeling system:

# Resources
# Relationships
# Properties
# Types

[[Image:dispatching-modeling-basics.png|Basics of modeling]]

;Resources : every &quot;thing&quot; that we want to represent in the system is called a Resource.  

;Relationships: every Resource can have multiple other Resources as &quot;parents&quot;.  Most Resources can have multiple other Resources as &quot;children&quot;.

; Properties: every Resource can have literal values attached to it which are identified by certain names

; Type : a class of Resources, which confers on its members the ability to have certain Properties, Relationships, and other specific traits.  Types can be sub-typed to introduce new traits.  Every Resource of a certain Type is also considered a member of its super-Types.  This produces a hierarchy of Types, and a system of inheritance of traits.

These basics allow you to model things in your environment, as well as relationships between them and some of the pertinent data about them. Types allow you to differentiate between the concept of a computer Node and a software Service, because the Resources of each of those Types will have different needs: different Properties will be necessary, as well as the ability to have only certain other Types of Resources as children. 

This is the basics of the modeling system, covered in more depth in the [[Type modeling]] section.

=== Nomenclature Note ===

The direction of a relationship between two Resources is often mentioned in this and other documents in a few different ways, but the meaning is the same:

;A &amp;rarr; B:
# B is a &quot;Child Resource&quot; of A, and A is a &quot;Parent Resource&quot; of B
# B is one of A's &quot;resources&quot;, and A is one of B's &quot;referrers&quot;
# B is a &quot;dependency&quot; of A, and A &quot;depends on&quot; B

In all cases they refer to the same concepts: a relationship from one Resource directed at another, or the inverse.

== Types ==

{{main|Types}}

At its core the Resource Model is generic, and so could be used to represent any components or systems that you like, however ControlTier comes with a predefined set of types which are a useful starting point.

Among the included types are so-called '''Base types'''.  These constitute a very generic underpinning for the rest of the included types, and define all of the Properties in use in the system. [[Resource]] is the single base Type from which all the other Types extend, and [[Managed-Entity]] is a sub-type of it which introduces the &quot;managable&quot; IT and software components layer.

Next is a layer called the '''Core types''', and on top of that is large suite of types designed for managing or interacting with specific Third-party software packages, and this suite is called the '''Elements types'''.

This is the conceptual hierarchy of these types:

* ''Resource''
** Base Types
*** Core Types
**** Elements Types

However to get started, there are only a few key Base and Core types that you should understand:

* [[Setting]] - a resource that defines a string value
* [[Node]] - a resource that represents a computer/host.
* [[Deployment]] - a resource that represents an installable component or software
** [[Service]] - a subtype, which represents a software service with a controllable state
* [[Package]] - a resource that represents a file 
* [[Mediator]] - a resource that represents a composition of other resources
** [[Site]] - a subtype which represents a composition of Services
** [[Updater]] a subtype which defines process for manipulating a set of other resources

If there are no predefined Types which suit your needs, you should consider starting with these and creating subtypes to solve your problem.

=== Properties ===

Properties are named values that can be set for each Resource.  Certain Resource Types define specific Properties that can be used, and all Subtypes inherit those properties.

The ControlTier type system has pre-defined Properties for each of the Base types.  Custom Properties are not supported, but [[Setting]] resources are used to introduce custom key/value pairs for resources.

=== Commands ===

{{main|Type modeling}}

Types that represent &quot;manageable&quot; components can define Commands.  These commands may run a shell script, or an [[Ant]] based script, or they may be Workflows which run a sequence of other Commands, or they may be Dispatch Commands which send another command to a set of other Resources. Commands are how you define your processes and procedures in the ControlTier system, and Types let you group them by their purpose.  

Commands can be run in either of two contexts:

# Module context (&quot;static&quot;) - without reference to any Resources
# Object context - the command is invoked with knowledge of a particular Resource that belongs to the Type (known as the Object).

By defining &quot;Object&quot; context commands in a Type you give the Resources of that type the ability to run those commands with their own contextual data. This means your commands can be abstracted to operate on ''any'' Resource of that Type, and the input dataset to the command will be dynamic based on which Resource you are using.

The mechanism for importing the data from the [[Resource Model]] for the particular Resource you are using is done automatically, but there are ways to import other bits of data from the Model (See [[Resource model Ant Tasks]]), or to alter the scope of the data that gets imported for you.

===Conceptual Layers===
The ControlTier core types divide the conceptual space into these layers:
* Physical Layer: This level contains instances of actual things in the physical world. ([[Node]]s, [[Package]]s, [[Deployment]]s, [[Service]]s,...)
* Logical Layer: Describes patterns of structure and use of resources in distributed environments and integrated-software systems. ([[Site]]s)
* Process Layer: Describes coordinated processes that span the logical and physical layers. ([[Builder]]s, [[Updater]]s, [[Mediator]]s)

The Core Type Model defines a set of types that support the definition of these layers. 

===Model Design Process===

Using the Core Types as a starting point, you can begin to represent your business service in the context of its physical environment, as well as, capture other essential relationships between components.

These steps can be useful for this process:

#  Define Physical Layer: Using Node, Package, Service (if it is a long running process) or Deployment (if it is not a long running process)
#  Define Logical Layer: Use the Site type to define sets of Services that represent a cohesive set of Services. 
#  Define Process Layer: Use the Builder, Updater (and possibly Mediator) types to automate coordinated build and deployment
# Optionally, create subtypes of the Core Types to integrate with your particular tools and procedures.

== Configuration: Relationships and Settings ==

There are two aspects of configuration represented in a ControlTier model: Relationships and Settings

=== Relationships: Compositional Structure===

Relationships are used to compose Resources together to form larger structures.  When you have two related Resources, the procedures that can be run on one Resource can typically &quot;see&quot; into the specific Properties and Setting values for the other.  This allows you to write your procedures in a generic way, and let the run-time dataset used by the procedures be determined dynamically from your compositional configuration.

Typically, there are two reasons ways to use relationships:

#  between connected physical resources - Nodes, Packages, Services
#  between logically related resources by means of a common &quot;compositional&quot; resource.

Below is an example between several physical resources (a Node hosting Apache, Tomcat deployments, and another host with a Mysql deployment). Also note that these Services have relationships to related Package resources:

[[Image:resource-model-physical-relationship.png]]

These relationships are not strict hierarchies but are actually graph structures. 

Below is an example that shows how the three Services mentioned above can be related through their relationship to a Resource called &quot;estore[Site]&quot;:

[[Image:resource-model-compositional-relationship.png]]

=== Settings ===

[[Setting]] Resources let you define a string value, and then attach that Setting to another Resource.  This is useful both for configuring a single component (e.g. port numbers, file paths, etc.), and for configuring multiple Resources with a shared Setting value (e.g TCP port numbers for connecting two services).

Here is an example Service resource with two Setting resources, showing particular values:

[[Image:resource-model-setting-resources.png]]

== Documents ==

{{main|Transform documents}}

The Resource Model also has a secondary citizen called a &quot;Document&quot; (aka &quot;Transform&quot;).

;Document
: Defines a file template and a file output path, and belongs to a Resource

Each Resource can own multiple Documents.  Documents let you easily generate configuration files based on templates.  The template can be in [[XSLT]] format, or be simple text files that use Token expansion to replace embedded strings with property or Setting values from the Resource.

Thus you can define a Document to generate the configuration for a piece of software and have it use values from your Resource's properties to fill in the specific configuration details.

== Defining Types ==

{{main|Type modeling}}

The Types in your Model can be defined either graphically via the [[Workbench]] GUI, or via XML using the [[type.xml]] format.

== Defining Resources ==

{{main|Graphical resource editor}}

The Resources in your Model can be defined either graphically via the [[Workbench]] GUI, or via XML using the [[project.xml]] format.

{{Manual/navbox}}

[[Category:Resource model]]</text>
    </revision>
  </page>
  <page>
    <title>Resource Model Basics</title>
    <id>1678</id>
    <redirect />
    <revision>
      <id>11295</id>
      <timestamp>2009-12-14T20:02:51Z</timestamp>
      <contributor>
        <username>Gschueler</username>
        <id>8</id>
      </contributor>
      <comment>moved [[Resource Model Basics]] to [[Resource Model]]</comment>
      <text xml:space="preserve">#REDIRECT [[Resource Model]]</text>
    </revision>
  </page>
  <page>
    <title>Resource Type Reference</title>
    <id>190</id>
    <revision>
      <id>13814</id>
      <timestamp>2010-11-10T15:13:42Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;object name&quot; to &quot;resource name&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Types&lt;/categorytree&gt;
=Description=
      &lt;p&gt;
	The Resource data type represents an object of a Resource base type.
      &lt;/p&gt;
  
=Attributes=
      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;name&lt;/td&gt;&lt;td&gt;The resource name.&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;type&lt;/td&gt;&lt;td&gt;The object type name.&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;maprefuri&lt;/td&gt;&lt;td&gt;The maprefUri&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;description&lt;/td&gt;&lt;td&gt;The object description.&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;

=Examples=

     &lt;p&gt;
       Shows Resource data type used in the [[ObjectUpdate Task Reference|object-update]] Ant
       task. 
      &lt;/p&gt;
      &lt;pre&gt;

	&amp;lt;object-mapref depot=&quot;${context.depot}&quot;
                       resultproperty=&quot;result&quot;
                       comment=&quot;Updated aResource object.&quot;&amp;gt;
          &amp;lt;resource maprefUri=&quot;${maprefUri}&quot;
                   name=&quot;aResource&quot;
                   type=&quot;ResourceSubtype&quot;
                   description=&quot;this is a resource object&quot;/&amp;gt;
	&amp;lt;/object-mapref&amp;gt;

      &lt;/pre&gt;

&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Resource model Ant Types]]
[[Category:Resource]]</text>
    </revision>
  </page>
  <page>
    <title>Resource model</title>
    <id>1679</id>
    <redirect />
    <revision>
      <id>11516</id>
      <timestamp>2009-12-15T16:14:01Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[Resource Model]]</comment>
      <text xml:space="preserve">#REDIRECT [[Resource Model]]</text>
    </revision>
  </page>
  <page>
    <title>Resource model Ant Tasks</title>
    <id>1732</id>
    <redirect />
    <revision>
      <id>11731</id>
      <timestamp>2009-12-16T19:07:22Z</timestamp>
      <contributor>
        <username>Gschueler</username>
        <id>8</id>
      </contributor>
      <comment>Redirected page to [[Category:Resource model Ant Tasks]]</comment>
      <text xml:space="preserve">#REDIRECT [[:Category:Resource model Ant Tasks]]</text>
    </revision>
  </page>
  <page>
    <title>Resource naming convention</title>
    <id>619</id>
    <revision>
      <id>14183</id>
      <timestamp>2010-11-10T16:11:16Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>/* Overview */</comment>
      <text xml:space="preserve">==Overview==
It is a good idea to establish an resource naming convention early on. Consistent naming makes the project's resource model more cohesive and facilitates navigation and search.

The fundamental consideration when constructing a resource naming convention for your project is balancing its mnemonic value for the people using the system against the technical requirement of being able to easily compose regular expressions that select useful subsets of the resource namespace.

The latter consideration arises since the scope of execution of many standard ControlTier commands (e.g. runChangeDependencies, dispatchCmd, find-resources) is dictated by type and resource name parameters of one sort or the other; most of which can be supplied regular expressions as values. Given that it only convenient to go so far resolving resources by their type (and the inherent limit of a single type per resource), using regular expressions to select subsets of resources by name (i.e. creating implicit categories) becomes an important mechanism.

==Tips==

===Services===
* Typically, resources that manage infrastructure are named after their application instance name (app-1, apache-ssl, tomcat-estore1)

===Sites===

* Typically are named after their environment (dev, qa, staging, production). 

===Common===
* Other types of resources may be named after use patterns (common, default, shared)

===Packages=== 
In the case of packages, after their file names (simple-123.war, openssl-2.2.tgz).

[[Category:Methodology]]</text>
    </revision>
  </page>
  <page>
    <title>Resources.properties</title>
    <id>125</id>
    <revision>
      <id>14070</id>
      <timestamp>2010-11-10T15:33:32Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>/* Synchronization */</comment>
      <text xml:space="preserve">The &lt;code&gt;resources.properties&lt;/code&gt; is a [[ControlTier client]] configuration file. This is a mapping between resources defined in the project model and CTL nodes. This data is used to drive the node dispatch mechanism for distributed command execution.

==Use==
The resources.properties file is used by:

* The nodedispatch strategy uses this file to look up if the command should be executed locally or remotely. 
* [[CTL-PROJECT Command Reference|ctl-project]] command: Drives the ''install'' action.
* [[CTL-ARCHIVE Command Reference|ctl-archive]] command: Drives filtered extraction.

==Location==

===Client===
This configuration file is located within the &quot;etc&quot; directory of a CTL project:

&lt;code&gt;$CTL_BASE/projects/&lt;/code&gt;''project''&lt;code&gt;/etc/resources.properties&lt;/code&gt;

''Example''

&lt;pre&gt;/Users/alexh/ctier/ctl/projects/demo/etc/resources.properties&lt;/pre&gt;

===Server===
The file is maintained on the server and should be accessible via HTTP.
CTL expects the file to be located at the URL: ${framework.webdav.uri}/''project''/etc/resources.properties

The &lt;code&gt;framework.webdav.uri&lt;/code&gt; setting is defined in the CTL configuration file: $CTL_BASE/etc/[[framework.properties]].

''Example''

http://strongbad:8080/jackrabbit/repository/controltier/projects/demo/etc/resources.properties

==Generation and synchronization==
===Generation===
If Workbench is enabled, this file is generated by Workbench (and it will be by default). The file is regenerated on the server any time a node assignment is made for a deployment. In other words, any time the resource model is changed to modify relationships between Nodes and Deployments, the file is regenerated. 

To force Workbench to regenerate the file go to Workbench &amp;rarr; Admin and then press the &quot;Regenerate resources.properties file&quot; button.

[[Image:workbench-regenerate-deployments.png]]

===Synchronization===
CTL synchronizes with the server, pulling this file if any change has been detected since the last time it was updated.
You can force the synchronization by running the &lt;code&gt;ctl-project&lt;/code&gt; command:
&lt;pre&gt;ctl-project -a install -p project&lt;/pre&gt;.

If Workbench is disabled, it is possible to maintain this file directly either manually or external tool. Adhere to the format and locations described here.

==Format==
This configuration file uses Java [http://en.wikipedia.org/wiki/.properties properties] format of key/value pairs. Keys are based on a dotted notation that identify the kind of entry (ie, object-deployment vs module-deployment) and the node where that deployment resides.

The format of the file is described as shown below.

The primary kind of key in the resources.properties file is an &quot;object-deployment&quot; which maps object deployments to nodes:
&lt;pre&gt;
### 
#
# format:
#
# object-deployment.&lt;project&gt;.&lt;type&gt;.&lt;name&gt; = node1, node2,...,nodeN
#
###
&lt;/pre&gt;

==Example==

Two object deployments to node mappings in project &quot;demo&quot; :
&lt;pre&gt;
#
#    
#   The Apache resource named &quot;apache-1&quot; is deployed to nodes web01 and web02 :
#
object-deployment.demo.Apache.apache-1=web01,web02
#
#   The Tomcat resource named &quot;simple&quot; is deployed to nodes app02 and app05 :
#
object-deployment.demo.Tomcat.simple=app02,app05
&lt;/pre&gt;

'''Note''': If Workbench is enabled, do not manually edit the object-deployment entries as your changes will be lost.


[[Category:CTL properties]]</text>
    </revision>
  </page>
  <page>
    <title>Resources.xml</title>
    <id>1882</id>
    <redirect />
    <revision>
      <id>12574</id>
      <timestamp>2010-04-27T19:38:17Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[Project-v10.xml]]</comment>
      <text xml:space="preserve">#REDIRECT [[Project-v10.xml]]</text>
    </revision>
  </page>
  <page>
    <title>Roadmap wishlist</title>
    <id>1466</id>
    <revision>
      <id>14163</id>
      <timestamp>2010-11-10T16:02:06Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;ctl-depot&quot; to &quot;ctl-project&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Roadmap&lt;/categorytree&gt;
Here is a list of development  areas that I find myself often coming back to when thinking about how and where the ControlTier project can be evolved. This list is in no particular order of importance. It tends to be strategic improvements either aiming to improve new user experience or facilitating scale up. Some improvements are incremental, achievable in one development cycle, while others more profound and grandiose that might result in major version changes. Also, these issues come from the perspective of someone with an internals perspective of the ControlTier system, and has been immersed in the ControlTier paradigm for a very long time (i.e., me). Newer users will have a fresher and perhaps more practical assessment.

Depending on interest these ideas may be discussed further as CTIPs or even implemented in future ControlTier versions (See the [http://sourceforge.net/tracker/?group_id=151079&amp;atid=779850 Sourceforge tracker] for a list of logged feature requests). Feel free to leave your comments on the talk (discussion) page or voice your opinions on the [http://groups.google.com/group/controltier Google group].

==Planning==
How might future development be planned out? Here's what I had in mind:
* Continue current fixes and minor enhancements on the 3-4-support branch
* Open up a &quot;roadmap wish list&quot; discussion about tactical and strategic needs by using this one as a point of departure
* Organize it and prioritize the roadmap objectives
* Publish the roadmap with phasing and scheduling
* Establish two development tracks:
** [[ControlTier Vandelay]]: Establish the 3-5-development branch where compatibility and migration support will be added. Later the 3-5 users can converge to 4-0
** [[ControlTier TNG]]: 4-0-development branch where major refactoring/architecture work will be done.  Release 4-0 snapshots to the community for feedback
* Drive the work forward!

==Wish list==
===General===
====Rationalize conceptual terms====
{{main|Conceptual terms analysis}}

ControlTier is really a set of independent projects that have evolved over the years. Each of these projects talks about a common set of concepts but sometimes using different terms. As our thinking has developed and we faced new use cases and challenges, we sometimes revised some of their names because we thought they would correspond to better known idioms. Unfortunately, these inconsistencies create an unnecessary complexity to learning how to use ControlTier and make documentation difficult to write.

The terms below are a case in point as they all describe the same thing in different ControlTier application contexts (e.g., between Workbench, CTL):
* object: An instance of a Type
* resource: An instance of a Resource
* entity: An instance of a Managed-Entity (itself a Resource)
* instance: An instance of a Type

Rationalizing terms may also include renaming some of the core types and attributes. For example, Managed-Entity might be called Managed-Resource and Updater to a name reflecting it does a Build and Deploy. The &quot;buildstamp&quot; attribute and option could be dropped in favor of &quot;version&quot;.
Rationalizing terms in the software code will also make the software internally coherent, and easier to maintain across projects.

An effort to create a mapping of terms, highlighting overlap and ambiguity would be a good first step. Later this mapping can be used to agree on a standard set of terms used throughout the software projects and documentation.

===User interface===
As of 3.4.9, there are three graphical interfaces provided by separate webapps: Jobcenter, Reportcenter and Workbench. It is also apparent there are three classes of users: process managers (those that execute commands and manage services within the environment), process developers (developing supporting resource models), module developers (those that define new types, constraints and workflows). The ControlTier toolchain should be organized to reflect these kinds of users.

====Operations console====
An operations console would provide a unified tool for process managers. This new centralized view of CTL operations would combine the functionality of Jobcenter and Reportcenter along with new features.
; Dashboard
: Concentrated summary of activity and available control actions.
; Processes
: List, preview and execute loaded process definitions.
; History
: Filter, list and display reported activity.
; Subscriptions
: Configured notification rules that email digests and individual reported events
; Inventory
: Define, filter list and view operational resources (Nodes, Services and Controllers)
; Availability
: Reports on Node and Service availability events

====Modeler====
[[Workbench]] is the current modeling tool supporting all classes of users and is really several tools in one. 
* Firstly, it provides an editing and visualization environment for the [[resource model]] (some people call this the CMDB). See [[Graphical resource editor]]
* Secondly, it acts as an IDE to developing commands and modules (this part used to be called ModuleBuilder).  See [[Graphical type editor]]
* Thirdly, its &quot;Package Manager&quot; provides an interface to packaged artifacts stored in the WebDAV, while the &quot;Node Manager&quot; gives an inventory view into the CTL nodes. See: [[File share]]

So on the one hand, Workbench is meant to provide an operational view of the world, while on the other, a devloper's design tool. Because of this, new users are often overwhelmed. One idea is to better partition the functionality so they aren't so blended together. A more radical approach would be to break the app down into separate components (see [[#Operations console]] above).

===Model===
The [[Resource model]] and [[Workflows]] are both defined in a project's model.
====Improve text-based definitions====
ControlTier provides web-based graphical user interfaces to author system definitions like jobs, resources and commands but often experienced users prefer text-based approaches as they can be maintained in an SCM and easily shared between team members. There are a variety of formats and some have expressed desire for better approaches. 

; Consolidate XML tag set
: There are several XML files used to author various ControlTier definitions ([[job.xml]], [[project.xml]], [[type.xml]], [[pview.xml]], [[Ant_Reference |Ant datatypes]]). Each of these files were developed at different times, by different people and for different purposes and so do not strictly share the same tag names even though the tags may semantically represent the same things. This is in the same vein as [[#Rationalize conceptual terms]].
; Automated model management
: Today most users maintain their model as static definitions in text files (maintained in an SCM). Sometimes it is necessary to make a change that cuts across many resources, such as dependencies between Deployment and Packages. ControlTier includes the &quot;Change-Dependencies&quot; command to automate this kind of change but it is not generic, occurs just on the server, and is a bit complex. Some have expressed a preference for a pure files-based trasformation process (e.g., JAXB for the project.xml) while others prefer scripted approaches.
; Domain specific language
: Some find the XML-based formats cumbersome and verbose (eg. &quot;too pointy&quot;). One idea would be to define a simple domain specific language used to express system definitions. The trick is balancing language scope and programming flexibility (not to mention debates over the &quot;right&quot; base language).
; Reconcile resource model representation
: Users define a resource model in an XML file called [[project.xml]]. It does not in fact represent the model of a project but rather just a portion of the resources defined within the project (other definitions also consitute a model &amp;mdash; project organization, description, type definition, revision info, etc.).

====Self contained process definition====
{{main|CTIP - Self-contained Process Definition}}

Users following the so called &quot;[[Model-driven_approach|model-driven approach]]&quot; must understand several aspects about ControlTier before they can become productive users. They must know the model semantics (the core types and how they interact via dispatch command), the standard lifecycles and corresponding workflow commands, how to model resources in [[project.xml]], perhaps define their own workflows in [[type.xml]], and appreciate its solution development [[Methodology|methodology]]. This is quite a learning curve for new users. A preferred approach would be to  have a single definition file that lets users define a process, starting simply with one step and easily composing up from there.

A self contained process definition is one where a new user with limited understanding of the ControlTier system can — using scripting skills and a cursory exposure to the definition language — automate multi-step procedures across hosts and resources in the network.

====Scale up resource model loading====
Resource model data is often declared in a &quot;[[project.xml]]&quot; file. The current project.xml data loader, [[ProjectBuilder]]#load-resources is fairly slow and can become a bottleneck when reloading a project from sources.
Part of the reason for the slowness, is due to all the work being done client side, and the subsequent chattiness with the server.

Loading resource model data should be a server-side task wherein the server is passed an XML file and it does all the necessary checking and model modification. Further, the project.xml format should include attributes to instruct the processor to modify/replace/augment the affected resources.

====Reconcile attributes and type properties====
Currently, users define the equivalent of type-level properties using [[Attributes]] and [[Setting]] subtypes and attribute defaults. The definition process is already a bit tedious but the real concern lies in users of the type having to know how to assign their own attribute values. The Workbench UI doesn't support this use case very well either leading many new users into a corner.

A simpler albeit more radical idea would be to allow users to define true type-level properties. That is the best strategic solution.

===Architecture===
====Development modernization====
The first ControlTier software project began in 2004 using a toolchain and practices current to that time (e.g., CVS, maven1, Java 1.3, Struts 1.x).  Upgrades to newer tools have gradually been made (e.g., SVN, Java 1.6, Grails/Groovy) but I think it is time to undertake a wholesale modernization. Workbench, CTL, modules, installers are still built with maven1 while Grails apps, ReportCenter and Jobcenter are built using Grails procedures. See related [http://groups.google.com/group/controltier/browse_thread/thread/9c11408ac98c653d google thread]. The ControlTier distribution lends itself to dependency driven builds and maven2 seems the obvious choice for this. 
; Standard build tool
: A proper modern build configuration can foster adoption and contribution. Maven 2 seems the likely choice. Should start with CTL as a first candidate. 
; Continuous integration
: Regular use of a CI server (eg Hudson) is also critical to code integrity and quality. Again, CTL makes a good first candidate.
; Consolidate sources
: Related to the build configuration, is source code management. ControlTier sources are spread across four Sourceforge projects (controltier, ctl-dispatch, webad, moduleforge). It would simplify the development if some or all of these projects were consolidated into one repository. 
; Project hoster
: Finally, consolidating the sources into one repository presents an opportunity to use a new SCM system and project hosting provider (eg, [http://github.com GitHub/Git]).
: Also see [[CTIP - Project hosting provider change]]

Finally, adopting a common web framework (see [[#Workbench upgrades]]) simplifies architectural design. Grails is the obvious choice as it has been a good enabler helping yield Jobcenter and Reportcenter.

====System architecture====
{{main|Architecture (TNG)}}

=====RESTful interfaces=====
The ControlTier server functionality should be accessible over REST style interfaces. Workbench uses a [http://www.castor.org castor] based XML marshaling between client and server for model data management. Reportcenter uses an [[Reportcenter_Query_API|XML-based query API]]. Jobcenter completely lacks a network accessible API.
An adequate set of REST interfaces will facilitate external tool integration. This topic also fits with the &quot;Reconcile CTL Server&quot; discussion also in this document.

Here are a few ideas for public interfaces:
; Resource model
: CRUD API to resource model 
; Command execution
: CRUD+Job control 
; Reporting
: An alternative to the custom log4j port, an HTTP interface would not require a special port access.

=====CTL improvements =====
; Automated resource staging to CTL nodes
: CTL assumes modules and objects are already present when executing a command. This becomes an administration annoyance as users must know to first distribute modules and install objects ahead of time. For example, when users define resources in a model, assigning Node referrers, it is necessary to run &lt;code&gt;[[ctl-project]] -a install&lt;/code&gt; across all the Nodes where that object was assigned. Missing this is a frequent pitfall. Likewise, users must run &lt;code&gt;ctl -I .* -p project -m [[Managed-Entity]] -c Install-Module -- -module module&lt;/code&gt; to have modules downloaded and installed. An automated process should distribute these resources perhaps on a regular basis maybe via Jobcenter (and/or assisted by Workbench).

; Alternative CTL nodedispatch transport
: CTL nodedispatching occurs over SSH which while a ubiquitous Unix service is not necessarily ideal for all users. For one thing, SSH is not ubiquitous for Windows users and requires an SSH server installed (perhaps using Cygwin a tedious dependency). Further, the SSH connections are not long running and therefore a setup/teardown is required for each dispatched command. Finally, it is difficult to implement a asynchronous workflow using this 'fire and wait until complete' model.

; Reconcile the &quot;CTL server&quot;
: CTL was designed to be a lightweight command execution framework that could work in a server-less configuration but practically speaking, centralized management greatly benefits from a server. Currently, Jobcenter performs the role of a central point of control to execute CTL commands while Workbench is used to populate model and module artifacts to the WebDAV. As mentioned elsewhere here, CTL should have a consistent view of resources it needs to retrieve from central repositories (ie., pulling files from a plain web server). Some view Jobcenter as the &quot;real CTL&quot; application as it embeds CTL and provides a user interface. In this view, Jobcenter would be installed on all clients and become a long running process there, additionally offering a network-accessible client interface. Taking this approach, Workbench could be refactored so it does not use its &quot;CtlIntegration&quot; code. Instead, it would be left to Jobcenter to take care of those tasks.

; No Workbench dependency
:  As an extension to the [[#RESTful interfaces]] idea, it would be more scaleable for CTL's &quot;Get-Properties&quot; requests to be straight HTTP/GET's of files rather than Workbench requests. This would lend itself to caching proxy servers. Note, the [[Managed-Entity]]#Get-Properties implementation works this way but most access is done via [[Deployment]]#Get-Properties which makes Workbench requests.

; Reconcile CTL data model
: Commands execute an a property context prepared by the Get-Properties command. The representation returned is a Java/Ant property file (see [[Entity.properties]]) which differs from the [[project.xml]] format often  used during initial setup. There should be closer correspondence between the two. Many users actually assume that the project.xml they upload to the server will later be returned to them during command execution.

=====Better support for managing virtualized infrastructure=====
Many ControlTier users manage environments made up of both physical and virtual servers. Beyond these in-house managed hosts, are those from cloud providers. ControlTier is well suited for managing distributed environments since it provides abstractions to application configurations. More can be done to support virtualized environments though ranging from: automating VM provisioning, modeling Nodes that come in and out of service, integrating with VM management tools (e.g., to query node descriptions).

One possible improvement would be to model the state of a VM Node in the Node type, supporting the notion of a Node being declared in the VM manager but offline/suspended/powered-off.

====Workbench dependencies ====
Workbench (aka itnav) was the first ControlTier project, therefore the oldest, and assuming we don't want to make radical architectural design changes, could use an overhaul.
; Jena
: RDF is the underlying model representation used within Workbench. Workbench is based on a fairly old version of [http://jena.sourceforge.net Jena] (2.4) and newer versions have high performance optimizations and backends (TDB/SDB) and use the now standard SPARQL query language. Workbench should be upgraded to the newest stable version of Jena to resolve outstanding [http://sourceforge.net/tracker/?func=detail&amp;aid=1697286&amp;group_id=151079&amp;atid=779847 bugs] and eliminate the use of now defunct RDQL.
; Web framework
: This is part of [[#Development modernization|development modernization]], too. Workbench is a Struts-based application and a very old Struts implementation at that (v1.1!). Struts has continued to evolve (combining with WebWork) but perhaps a better approach would be to use the same framework used by the newer webapps, Jobcenter and Reportcenter. Jobcenter and Reportcenter are both [http://www.grails.org Grails]-based webapps and we find them easier to enhance and maintain. Consolidating to a common app framework will reduce maintenance burden overall.

===Extension===
Some might call our modules &quot;plug-ins&quot; but in any case its the way we extend the framework.

====Development and release====
ControlTier includes all the [[Core Type Guide|core]] and [[Elements Type Library|elements]] modules as part of the main distribution. Some of these modules are well documented, mature and stable while others experimental and not yet production quality &amp;mdash; yet all are still included. Other open source projects might provide a website and mechanism for users to find and download just what they need. This promotes participation from developers outside of the core committers and lets each extension evolve along its own development path.

====Provider model====
ControlTier core types establish a small but effective set of complimentary abstractions. For example, [[Service]] represents any long running application deployment, while [[Package]] represents a deployable packaged-artifact. Users specialize behavior through subtyping. The downside to subtyping is it requires users to know about these new types, obscuring the core abstraction. Another approach is to separate the implementation from the core abstraction (cf Java interface), and using configuration to tie the two together. This could be done with a convention around command hooks and called scripts and/or the strategy pattern.

====Packaging====
Modules can be developed as a set and released via a [[Create_a_seed_library|library]] or [[Create_an_extension_library|extension]]. Neither form supports library-to-library dependencies. Today, modules are deployed to CTL via the [[Managed-Entity]]#Install-Module command usually indirectly by [[ctl-project]]. This creates an administrative burden and would be improved by a better mechanism. Module-to-module dependencies are supported only for supertype relationships.  Besides supertype dependencies, there can be other related modules (perhaps due child resource allowed-type constraints). The concept of seed and extension should be reconciled as both provide a structure for multiple modules. The extension has the advantage of the [[CTL-EXTENSION_Command_Reference|ctl-extension]] tool.

====Public module distribution====
It would be attractive to have a CPAN-like global repository where users can get publicly shared modules. This avoids having to install all types in a project even if they are not required and stay on top of new updates.

====Standardized module unit test framework====
There is little unit testing included in the module code base now. The &quot;coretests&quot; module supports unit tests for the utility types and there are now a couple for Elements modules. The unit testing practice needs to be better baked into the module development cycle. Requiring some level of testing will also encourage better module design, making strategy-based (either by configured scripts or callouts to external modules) implementations commonplace.

===Reporting===
[[Reportcenter]] offers a basic interface that lists reported events by Jobcenter, CTL commands and Workbench model changes. It offers no organization but rather provides a filtering interface selecting events that match the filter criteria. Users can configure an RSS feed from this filter but there is no output notification capability. Here's several approaches to improving reporting.
==== Notification subscriptions====
: Allow users to define triggers that will forward matching events via email. Subscriptions should two modes: immediate notification and daily digest reports.
====Categorization structure====
: Events could be organized based on a simple view of the resource model and/or process categorization. 

{{CtDevelopment/navbox}}

[[Category:Roadmap]]
[[Category:ControlTier TNG]]</text>
    </revision>
  </page>
  <page>
    <title>Rpm</title>
    <id>1401</id>
    <revision>
      <id>12835</id>
      <timestamp>2010-06-07T20:57:28Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Package&lt;/categorytree&gt;
[[File:Icon-PackageObject.png]]

Go here for information about [[RPM installers]].

The rpm type models the [[package]] installation life-cycle of an individual RPM package. Essentially the module wraps a subset of functionality of rpm(8) and rpmbuild(8).

The module includes a number of attributes that map to standard RPM package information. Taking the Graphviz RPM as an example:

&lt;pre&gt;
[anthony@centos52 ~]$ rpm -qi -p ~/tmp/graphviz-2.16.1-1.el4.i386.rpm 
Name        : graphviz                     Relocations: /usr 
Version     : 2.16.1                            Vendor: AT&amp;T &lt;http://www.research.att.com/&gt;
Release     : 1.el4                         Build Date: Thu 13 Dec 2007 01:20:29 AM PST
Install Date: (not installed)               Build Host: centos4.research.att.com
Group       : Applications/Multimedia       Source RPM: graphviz-2.16.1-1.el4.src.rpm
Size        : 4873458                          License: CPL
Signature   : (none)
Packager    : Graphviz Build Account &lt;gviz@research.att.com&gt;
URL         : http://www.graphviz.org/
Summary     : Graph Visualization Tools
Description :
A collection of tools for the manipulation and layout
of graphs (as in nodes and edges, not as in barcharts).
&lt;/pre&gt;

... the mapping is as follows:

{| class=&quot;wikitable&quot;
|-
! Attribute
! RPM information
|-
| rpmCategory
| Group
|-
| rpmLicense
| License
|-
| rpmPackager
| Packager
|-
| rpmUrl
| URL
|-
| rpmVendor
| Vendor
|}

The module also includes a template RPM specification file designed to be used in combination with the object's attributes by the create command which runs the rpmbuild(8) command to create &quot;application&quot; RPMs.

== Limitations ==

{{Caution|Note that rpmbuild(8) is often not installed on a system by default, and as a result the rpm-build package may have to be installed before the create command will work.}}

The module's create command is hard-coded to build binary package (&quot;-bb&quot;) &quot;noarch&quot; RPMs, and the template specification file has the following limitations:

* No support for dependency tags
* Requirements checking explicitly turned off (&quot;AutoReq: 0&quot;)
* Creates relocatable packages
* Expects a separate manifest file containing the list of files to be included in the RPM (see [[RpmBuilder|RPM Builder]])

The type level default attribute values set rpmUseSudo to true. To this end, the ControlTier client user must be configured to have rights to run the rpm command as root.

Additionally the rpmDbPath attribute is set to the system's default RPM database at &quot;/var/lib/rpm&quot;. Overriding this value allows the module to be used with alternate RPM databases. For example, a common practice is to establish separate databases for system and application packages.

== Examples ==

=== Static package definition ===

Sample project XML to define a package object for the Graphviz examples above:

&lt;pre&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE project PUBLIC &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; &quot;project.dtd&quot;&gt;

&lt;!-- Sample RPM definition --&gt;


&lt;project&gt;
  &lt;setting description=&quot;Graphviz RPM category&quot; type=&quot;RpmCategory&quot; name=&quot;graphviz-2.16.1-1.el4.i386.rpm&quot; settingValue=&quot;Applications/Multimedia&quot;/&gt;
  &lt;setting description=&quot;Graphviz RPM license&quot; type=&quot;RpmLicense&quot; name=&quot;graphviz-2.16.1-1.el4.i386.rpm&quot; settingValue=&quot;CPL&quot;/&gt;
  &lt;setting description=&quot;Graphviz RPM packager&quot; type=&quot;RpmPackager&quot; name=&quot;graphviz-2.16.1-1.el4.i386.rpm&quot; settingValue=&quot;Graphviz Build Account (gviz@research.att.com)&quot;/&gt;
  &lt;setting description=&quot;Graphviz RPM URL&quot; type=&quot;RpmUrl&quot; name=&quot;graphviz-2.16.1-1.el4.i386.rpm&quot; settingValue=&quot;http://www.graphviz.org/&quot;/&gt;
  &lt;setting description=&quot;Graphviz RPM vendor&quot; type=&quot;RpmVendor&quot; name=&quot;graphviz-2.16.1-1.el4.i386.rpm&quot; settingValue=&quot;AT&amp;amp;T (http://www.research.att.com/)&quot;/&gt;

  &lt;package type=&quot;rpm&quot; name=&quot;graphviz-2.16.1-1.el4.i386.rpm&quot; description=&quot;Graph Visualization Tools&quot; filename=&quot;graphviz-2.16.1-1.el4.i386.rpm&quot; arch=&quot;i386&quot; base=&quot;graphviz&quot; buildtime=&quot;Thu 13 Dec 2007 01:20:29 AM PST&quot; filetype=&quot;rpm&quot; installroot=&quot;/&quot; installrank=&quot;&quot; releasetag=&quot;&quot; repoUrl=&quot;/rpm/rpms/graphviz-2.16.1-1.el4.i386.rpm&quot; restart=&quot;&quot; vendor=&quot;AT&amp;amp;T (http://www.research.att.com/)&quot; version=&quot;2.16.1&quot; release=&quot;1.el4&quot;&gt;
    &lt;resources&gt;
      &lt;resource type=&quot;RpmCategory&quot; name=&quot;graphviz-2.16.1-1.el4.i386.rpm&quot;/&gt;
      &lt;resource type=&quot;RpmLicense&quot; name=&quot;graphviz-2.16.1-1.el4.i386.rpm&quot;/&gt;
      &lt;resource type=&quot;RpmPackager&quot; name=&quot;graphviz-2.16.1-1.el4.i386.rpm&quot;/&gt;
      &lt;resource type=&quot;RpmUrl&quot; name=&quot;graphviz-2.16.1-1.el4.i386.rpm&quot;/&gt;
      &lt;resource type=&quot;RpmVendor&quot; name=&quot;graphviz-2.16.1-1.el4.i386.rpm&quot;/&gt;
    &lt;/resources&gt;
  &lt;/package&gt;
&lt;/project&gt;
&lt;/pre&gt;

=== Creating sub-types for use with RPM builder ===

The module's create command is constructed for use with [[RpmBuilder|RPM Builder]], with that module's createPackage command invoking it to actually build the target RPM. This Builder/Package interface is limited to a subset of all the options that the create command supports (even though the create command does expose options for all the RPM-specific attributes too). The balance of the attributes have type-level default attribute values in the rpm module itself.

It is expected that users of the module will want to have custom attributes for a given RPM and still exploit RpmBuilder. To achieve this, the approach is to sub-type rpm and set new type-level default attribute values. This approach is commonly used in a type model where distinct constraints are to be established for a set of application RPMs and so sub-typing is naturally required.

Another advantage of sub-typing rpm is the ability to include a customized template specification file. Unfortunately (as of 3.4.8) this also requires overriding the create command since the template's location is hard-coded to &quot;${module.dir}/templates/spec.template&quot;.

{{Manual/navbox}}
[[Category:Package]]</text>
    </revision>
  </page>
  <page>
    <title>RpmBuilder</title>
    <id>1318</id>
    <revision>
      <id>14089</id>
      <timestamp>2010-11-10T15:34:21Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;/deployments&quot; to &quot;/resources&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Builder&lt;/categorytree&gt;

The intent of this module is to demonstrate how an extended Build workflow can manage packaging the results of the build as an [http://rpm.org RPM].

While the standard Builder Build workflow assumes the that build script (called by the runBuildScript command) does everything necessary to create the artifacts to be imported to the package repository (by the repoImport command),  the RpmBuilder module adds two commands to the workflow to implement this step explicitly.

Firstly, the [http://controltier.sourceforge.net/docs/latest/elements/reference/modules/type_RpmBuilder.html#cmd_generateManifest generateManifest] command is used to create a list of the subset of files and directories (determined by the command's include and exclude options) of the builder's base directory (resource.attribute.basedir) to be included in the RPM. The command creates the manifest file in the builder's install root directory called manifest.txt (by default).

'''Note''': the use of the standard base directory (resource.attribute.basedir) to denote the directory hierarchy to include in the RPM is inherently at odds with the normal use of this attribute in a builder (i.e. as the location of the source working files). It would probably be more flexible to either use the install root directory (resource.attribute.targetdir) or a new attribute for this purpose. In its current implementation, the thought is that one can easily package a hierarchy checked out directly from the source code repository as opposed to one created by a build process. Careful structuring of the source base and specification of the inclusion/exclusion attributes can mitigate this inflexibility.

Secondly, the [http://controltier.sourceforge.net/docs/latest/elements/reference/modules/type_RpmBuilder.html#cmd_createPackage createPackage] command is used to invoke the package type's (resource.attribute.packageType - rpm by default) [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_rpm.html#cmd_create create] command supplying the generate manifest file. Naturally, the rpm create command ultimately invokes the rpmbuild command to actually create the RPM in the builder's install root directory (resource.attribute.targetdir) producing the standard layout expected by rpmbuild.

'''Note''': the rpmbuild command is often not part of the default system installation:

&lt;pre&gt;
[root@centos52 ~]# rpm -q --whatprovides /usr/bin/rpmbuild
rpm-build-4.4.2.3-9.el5
&lt;/pre&gt;

== Limitations ==

RpmBuilder includes a C utility called &quot;mkmanifest&quot; that needs to be compiled and added to the module before the generateManifest command can be used. Here are instructions to accomplish this assuming you've checked-out the relevant module library source from [http://sourceforge.net/projects/moduleforge ModuleForge]; for example:

&lt;pre&gt;
[anthony@centos52 RpmBuilder]$ pwd
/home/anthony/ctier/src/elements-3-4-support/modules/RpmBuilder
[anthony@centos52 RpmBuilder]$ svn info .
Path: .
URL: https://moduleforge.svn.sourceforge.net/svnroot/moduleforge/controltier/branches/controltier-3-4-support/elements/modules/RpmBuilder
Repository Root: https://moduleforge.svn.sourceforge.net/svnroot/moduleforge
Repository UUID: 3ed12e13-7237-0410-b9af-b7dc6c7a317f
Revision: 1710
Node Kind: directory
Schedule: normal
Last Changed Author: moseslei
Last Changed Rev: 1537
Last Changed Date: 2009-05-28 17:12:24 -0700 (Thu, 28 May 2009)
&lt;/pre&gt;

... and have the appropriate C-compiler to hand:

&lt;pre&gt;
[anthony@centos52 src]$ gcc --version
gcc (GCC) 4.1.2 20080704 (Red Hat 4.1.2-44)
Copyright (C) 2006 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
&lt;/pre&gt;

* Locate the mkmanifest source:

&lt;pre&gt;
[anthony@centos52 src]$ pwd
/home/anthony/ctier/src/elements-3-4-support/modules/RpmBuilder/src
&lt;/pre&gt;

* Compile and check the utility:

&lt;pre&gt;
[anthony@centos52 src]$ make
rm -f mkmanifest
cc mkmanifest.c -r mkmanifest
cp mkmanifest ../bin
[anthony@centos52 src]$ ../bin/mkmanifest --help
Usage: mkmanifest [OPTIONS] -b basedir

options:
--basedir     -b  &lt;dir&gt;         : base directory from which to create the manifest
--excludes    -e  &lt;regex&gt;       : POSIX.2 extended regular expression indicating paths relative to the basedir to exclude
--includes    -i  &lt;regex&gt;       : POSIX.2 extended regular expression indicating paths relative to the basedir to include
--attributes  -a                : include the RPM %attr directive for each entry in the manifest based on the permissions of the source file
--manifest    -m  &lt;file&gt;        : name of the manifest file to be created for inclusion in an RPM specification %files section
--version     -V                : version of mkmanifest
--verbose     -v                : verbose output
--help        -h                : this help screen
&lt;/pre&gt;

* Build and upload the module to Workbench:

&lt;pre&gt;
[anthony@centos52 src]$ ctl -p development -t ProjectBuilder -r elements-3-4-support -c build-type -- -type RpmBuilder -upload 
Created dir: /home/anthony/ctier/target/elements-3-4-support/modules
Building type using the buildmodule.xml via classloader
converting type.xml for module: RpmBuilder
generating handlers...
packaging module: RpmBuilder
Copying 1 file to /home/anthony/ctier/src/elements-3-4-support/modules/RpmBuilder
Copying 1 file to /home/anthony/ctier/src/elements-3-4-support/modules/RpmBuilder
Deleting: /home/anthony/ctier/src/elements-3-4-support/modules/RpmBuilder/module.properties.temp
Building jar: /home/anthony/ctier/target/elements-3-4-support/modules/RpmBuilder-1.jar
Uploading built module to server ...
processing files in directory: /home/anthony/ctier/target/elements-3-4-support/modules
scanning for files matching pattern: (RpmBuilder)-([0-9]+)\.jar
Uploading jar: /home/anthony/ctier/target/elements-3-4-support/modules/RpmBuilder-1.jar to server: 'centos52' ...
&lt;/pre&gt;

== Examples ==

=== Basic example ===

The minimal RpmBuilder object definition is something like this:

&lt;pre&gt;
&lt;?xml version=&quot;1.0&quot;?&gt;

&lt;!DOCTYPE project PUBLIC &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; &quot;project.dtd&quot;&gt;

&lt;!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --&gt;
&lt;!-- RpmBuilder example object XML definition file                                       --&gt;
&lt;!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --&gt;

&lt;project&gt;

        &lt;!-- Builder settings: --&gt;
        &lt;setting type=&quot;BuilderBuildFile&quot; name=&quot;sampleRpmBuilder&quot; description=&quot;Sample RPM build target&quot; settingValue=&quot;build.xml&quot;/&gt;
        &lt;setting type=&quot;BuilderBuildTarget&quot; name=&quot;sampleRpmBuilder&quot; description=&quot;Sample RPM build target&quot; settingValue=&quot;all&quot;/&gt;
        &lt;setting type=&quot;BuilderPackageFilebase&quot; name=&quot;sampleRpmBuilder&quot; description=&quot;Sample RPM file base name&quot; settingValue=&quot;sampleRpm&quot;/&gt;

        &lt;!-- Build environment updaters, sites and services: --&gt;

        &lt;deployment type=&quot;RpmBuilder&quot; name=&quot;sampleRpmBuilder&quot; basedir=&quot;${modules.dir}/RpmBuilder/sample&quot; installRoot=&quot;${user.home}/RPMS/sampleRpm&quot; description=&quot;Sample RPM builder&quot; startuprank=&quot;1&quot;&gt;
                &lt;resources replace=&quot;true&quot;&gt;
                        &lt;resource type=&quot;BuilderBuildFile&quot; name=&quot;sampleRpmBuilder&quot;/&gt;
                        &lt;resource type=&quot;BuilderBuildTarget&quot; name=&quot;sampleRpmBuilder&quot;/&gt;
                        &lt;resource type=&quot;BuilderPackageFilebase&quot; name=&quot;sampleRpmBuilder&quot;/&gt;
                &lt;/resources&gt;
        &lt;/deployment&gt;
&lt;/project&gt;
&lt;/pre&gt;

You can see that three settings are required to make the Build workflow work:

* Specify the build file for the runBuildScript command to call
* Set the target for the build
* Give the resultant RPM a &quot;base&quot; file name

The &quot;basedir&quot; decides which directory is packaged and the &quot;installRoot&quot; specifies the directory in which the RPM is setup and built.

Here's sample output from the command:

&lt;pre&gt;
[anthony@centos52 ~]$ ctl -p development -t RpmBuilder -r sampleRpmBuilder -c Build -- -buildstamp 1.2.3-1
Start: &quot;Run the build cycle.&quot; commands: scmCheckout,setBuildstamp,runBuildScript,generateManifest,createPackage,repoImport
begin workflow command (1/6) -&gt; &quot;scmCheckout -buildstamp 1.2.3-1&quot; ...
scmCheckout parameters: {basedir=&quot;/home/anthony/ctier/ctl/projects/development/modules/RpmBuilder/sample&quot;, connection=&quot;&quot;, module=&quot;&quot;, label=&quot;&quot;, scmcommand=&quot;checkout&quot; }
[command.timer.Builder.scmCheckout: 0.002 sec]
end workflow command (1/6) -&gt; &quot;scmCheckout -buildstamp 1.2.3-1&quot;
begin workflow command (2/6) -&gt; &quot;setBuildstamp -buildstamp 1.2.3-1&quot; ...
Using provided buildstamp &quot;1.2.3-1&quot;
[command.timer.RpmBuilder.setBuildstamp: 0.003 sec]
end workflow command (2/6) -&gt; &quot;setBuildstamp -buildstamp 1.2.3-1&quot;
begin workflow command (3/6) -&gt; &quot;runBuildScript -buildstamp 1.2.3-1&quot; ...
Exiting command. buildfile did not exist: 'build.xml'&quot;
[command.timer.Builder.runBuildScript: 0.003 sec]
end workflow command (3/6) -&gt; &quot;runBuildScript -buildstamp 1.2.3-1&quot;
begin workflow command (4/6) -&gt; &quot;generateManifest -buildstamp 1.2.3-1&quot; ...
Created dir: /home/anthony/RPMS/sampleRpm
[command.timer.RpmBuilder.generateManifest: 0.083 sec]
end workflow command (4/6) -&gt; &quot;generateManifest -buildstamp 1.2.3-1&quot;
begin workflow command (5/6) -&gt; &quot;createPackage -buildstamp 1.2.3-1&quot; ...
Getting: http://centos52:8080/jackrabbit/repository/controltier/projects/development/publish/modules/rpm-head.jar
To: /home/anthony/ctier/ctl/var/tmp/downloads/development/rpm-head.jar
Not modified - so not downloaded
Deleting directory /home/anthony/ctier/ctl/projects/development/modules/rpm
Created dir: /home/anthony/ctier/ctl/projects/development/modules/rpm
Expanding: /home/anthony/ctier/ctl/var/tmp/downloads/development/rpm-head.jar into /home/anthony/ctier/ctl/projects/development/modules/rpm
Attempting to get Package-head.jar ...
Getting: http://centos52:8080/jackrabbit/repository/controltier/projects/development/publish/modules/Package-head.jar
To: /home/anthony/ctier/ctl/var/tmp/downloads/development/Package-head.jar
Not modified - so not downloaded
Deleting directory /home/anthony/ctier/ctl/projects/development/modules/Package
Created dir: /home/anthony/ctier/ctl/projects/development/modules/Package
Expanding: /home/anthony/ctier/ctl/var/tmp/downloads/development/Package-head.jar into /home/anthony/ctier/ctl/projects/development/modules/Package
Created dir: /home/anthony/RPMS/sampleRpm/SPECS
Created dir: /home/anthony/RPMS/sampleRpm/RPMS
Copying 1 file to /home/anthony/RPMS/sampleRpm/SPECS
Building the RPM based on the sampleRpm.spec file
Building target platforms: noarch
Building for target noarch
Processing files: sampleRpm-1.2.3-1
Requires(rpmlib): rpmlib(PayloadFilesHavePrefix) &lt;= 4.0-1 rpmlib(CompressedFileNames) &lt;= 3.0.4-1
Wrote: /home/anthony/RPMS/sampleRpm/RPMS/noarch/sampleRpm-1.2.3-1.noarch.rpm
[command.timer.RpmBuilder.createPackage: 1.116 sec]
end workflow command (5/6) -&gt; &quot;createPackage -buildstamp 1.2.3-1&quot;
begin workflow command (6/6) -&gt; &quot;repoImport -buildstamp 1.2.3-1&quot; ...
Created dir: /home/anthony/ctier/ctl/projects/development/resources/RpmBuilder/sampleRpmBuilder/tmp/Builder-repoImport-20090911212743
Condition: isProcessableWithoutExistingPropfile result: true
opts.propfile set to: autogenerated-builder.properties
Creating new property file: /home/anthony/ctier/ctl/projects/development/resources/RpmBuilder/sampleRpmBuilder/tmp/Builder-repoImport-20090911212743/import-count.properties
processing files in directory: '/home/anthony/RPMS/sampleRpm' matching: '(sampleRpm)(?:-1.2.3-1)?\.(noarch.rpm)$' ...
processing matched file: RPMS/noarch/sampleRpm-1.2.3-1.noarch.rpm
Auto-generated builder properties file created: /home/anthony/RPMS/sampleRpm/RPMS/noarch/autogenerated-builder.properties...
Copying 1 file to /home/anthony/RPMS/sampleRpm/RPMS/noarch
Updating property file: /home/anthony/ctier/ctl/projects/development/resources/RpmBuilder/sampleRpmBuilder/tmp/Builder-repoImport-20090911212743/import-count.properties
Copying 1 file to /home/anthony/ctier/ctl/projects/development/modules/Builder/commands
Getting: http://centos52:8080/jackrabbit/repository/controltier/projects/development/publish/modules/rpm-head.jar
To: /home/anthony/ctier/ctl/var/tmp/downloads/development/rpm-head.jar
Not modified - so not downloaded
Deleting directory /home/anthony/ctier/ctl/projects/development/modules/rpm
Created dir: /home/anthony/ctier/ctl/projects/development/modules/rpm
Expanding: /home/anthony/ctier/ctl/var/tmp/downloads/development/rpm-head.jar into /home/anthony/ctier/ctl/projects/development/modules/rpm
Attempting to get Package-head.jar ...
Getting: http://centos52:8080/jackrabbit/repository/controltier/projects/development/publish/modules/Package-head.jar
To: /home/anthony/ctier/ctl/var/tmp/downloads/development/Package-head.jar
Not modified - so not downloaded
Deleting directory /home/anthony/ctier/ctl/projects/development/modules/Package
Created dir: /home/anthony/ctier/ctl/projects/development/modules/Package
Expanding: /home/anthony/ctier/ctl/var/tmp/downloads/development/Package-head.jar into /home/anthony/ctier/ctl/projects/development/modules/Package
uploading file: /home/anthony/RPMS/sampleRpm/RPMS/noarch/sampleRpm-1.2.3-1.noarch.rpm to: http://centos52:8080/jackrabbit/repository/controltier/projects/pkgs/development/rpm/noarch.rpms/sampleRpm-1.2.3-1.noarch.rpm...
Puted 1 file to http://centos52:8080/jackrabbit/repository/controltier/projects/pkgs/development/rpm/noarch.rpms/sampleRpm-1.2.3-1.noarch.rpm
Creating new property file: /home/anthony/ctier/ctl/projects/development/resources/RpmBuilder/sampleRpmBuilder/tmp/Builder-repoImport-20090911212743/import-list.properties
Deleting: /home/anthony/ctier/ctl/projects/development/modules/Builder/commands/entity1099091901.properties
Current count: 1
Batch request performed successfully.
Current count: 1
[command.timer.Builder.repoImport: 6.162 sec]
end workflow command (6/6) -&gt; &quot;repoImport -buildstamp 1.2.3-1&quot;
[command.timer.development.RpmBuilder.Build: 10.351 sec]
Workflow completed. execution time: 10.351 sec
&lt;/pre&gt;

'''Note''': the buildstamp must be specified in the form that RPMs require (e.g. &quot;1.2.3-1&quot; ... numerical version and a release number).

Here's what the resultant RPMS directory looks like:

&lt;pre&gt;
[anthony@centos52 ~]$ find RPMS/
RPMS/
RPMS/sampleRpm
RPMS/sampleRpm/manifest.txt
RPMS/sampleRpm/SPECS
RPMS/sampleRpm/SPECS/sampleRpm.spec
RPMS/sampleRpm/RPMS
RPMS/sampleRpm/RPMS/noarch
RPMS/sampleRpm/RPMS/noarch/sampleRpm-1.2.3-1.noarch.rpm
RPMS/sampleRpm/RPMS/noarch/autogenerated-builder.properties
&lt;/pre&gt;

The manifest file created by generateManifest:

&lt;pre&gt;
[anthony@centos52 ~]$ cat RPMS/sampleRpm/manifest.txt
%dir &quot;/home/anthony/ctier/ctl/projects/development/modules/RpmBuilder/sample&quot;
%dir &quot;/home/anthony/ctier/ctl/projects/development/modules/RpmBuilder/sample/dir2&quot;
&quot;/home/anthony/ctier/ctl/projects/development/modules/RpmBuilder/sample/dir2/file21&quot;
&quot;/home/anthony/ctier/ctl/projects/development/modules/RpmBuilder/sample/dir2/file22&quot;
&quot;/home/anthony/ctier/ctl/projects/development/modules/RpmBuilder/sample/dir2/file23&quot;
%dir &quot;/home/anthony/ctier/ctl/projects/development/modules/RpmBuilder/sample/dir1&quot;
&quot;/home/anthony/ctier/ctl/projects/development/modules/RpmBuilder/sample/dir1/file12&quot;
&quot;/home/anthony/ctier/ctl/projects/development/modules/RpmBuilder/sample/dir1/file11&quot;
&quot;/home/anthony/ctier/ctl/projects/development/modules/RpmBuilder/sample/dir1/file13&quot;
%dir &quot;/home/anthony/ctier/ctl/projects/development/modules/RpmBuilder/sample/dir3&quot;
&quot;/home/anthony/ctier/ctl/projects/development/modules/RpmBuilder/sample/dir3/file33&quot;
&quot;/home/anthony/ctier/ctl/projects/development/modules/RpmBuilder/sample/dir3/file32&quot;
&quot;/home/anthony/ctier/ctl/projects/development/modules/RpmBuilder/sample/dir3/file31&quot;
&lt;/pre&gt;

... and the SPEC file created from a template kept in the rpm module:

&lt;pre&gt;
[anthony@centos52 ~]$ cat RPMS/sampleRpm/SPECS/sampleRpm.spec
#
# One-line summary description of the package:
#
Summary: sampleRpm binary RPM package
#
# Name of the package:
#
Name: sampleRpm
#
# Version number ordering:
#
#  Epoch:
#
# Package version number:
#
Version: 1.2.3
#
# Package release number:
#
Release: 1
#
# Package builder tags:
#
Vendor: none
URL: none
# Copyright: none
Packager: none
Distribution: none
Group: none
License: none
#
# Dependency tags:
#
#  Requires:
#  Provides:
#  Obsoletes:
#  Conflicts:
#
# Explictly turn off requirements checking:
#
AutoReq: 0
#
# Source of the files to include in the package:
#
# Source: %{_topdir}/SOURCES/sampleRpm.tar.gz
#
# Relocatable package prefix:
#
Prefix: /home/anthony/ctier/ctl/projects/development/modules/RpmBuilder/sample

#
# Detailed description of the package:
#
%description
This is version 1.2.3 of the sampleRpm binary RPM package built on centos52 using the /home/anthony/RPMS/sampleRpm/manifest.txt file list.

The package is relocatable from its base directory of /home/anthony/ctier/ctl/projects/development/modules/RpmBuilder/sample.
#
# Prepare for the build:
#
# %prep

#
# Build from source:
#
# %build

#
# Install the built files:
#
# %install

#
# Clean up after the build:
#
# %clean

#
# Select file for the binary RPM:
#
%files -f /home/anthony/RPMS/sampleRpm/manifest.txt
%defattr(-,root,root)
%undefine __check_files
&lt;/pre&gt;

Here's the lowdown on the rpm itself:

&lt;pre&gt;
[anthony@centos52 ~]$ rpm -qi -p RPMS/sampleRpm/RPMS/noarch/sampleRpm-1.2.3-1.noarch.rpm 
Name        : sampleRpm                    Relocations: /home/anthony/ctier/ctl/projects/development/modules/RpmBuilder/sample 
Version     : 1.2.3                             Vendor: none
Release     : 1                             Build Date: Fri 11 Sep 2009 09:27:43 PM PDT
Install Date: (not installed)               Build Host: localhost.localdomain
Group       : none                          Source RPM: sampleRpm-1.2.3-1.src.rpm
Size        : 1863                             License: none
Signature   : (none)
Packager    : none
URL         : none
Summary     : sampleRpm binary RPM package
Description :
This is version 1.2.3 of the sampleRpm binary RPM package built on centos52 using the /home/anthony/RPMS/sampleRpm/manifest.txt file list.

The package is relocatable from its base directory of /home/anthony/ctier/ctl/projects/development/modules/RpmBuilder/sample.
[anthony@centos52 ~]$ rpm -ql -p RPMS/sampleRpm/RPMS/noarch/sampleRpm-1.2.3-1.noarch.rpm 
/home/anthony/ctier/ctl/projects/development/modules/RpmBuilder/sample
/home/anthony/ctier/ctl/projects/development/modules/RpmBuilder/sample/dir1
/home/anthony/ctier/ctl/projects/development/modules/RpmBuilder/sample/dir1/file11
/home/anthony/ctier/ctl/projects/development/modules/RpmBuilder/sample/dir1/file12
/home/anthony/ctier/ctl/projects/development/modules/RpmBuilder/sample/dir1/file13
/home/anthony/ctier/ctl/projects/development/modules/RpmBuilder/sample/dir2
/home/anthony/ctier/ctl/projects/development/modules/RpmBuilder/sample/dir2/file21
/home/anthony/ctier/ctl/projects/development/modules/RpmBuilder/sample/dir2/file22
/home/anthony/ctier/ctl/projects/development/modules/RpmBuilder/sample/dir2/file23
/home/anthony/ctier/ctl/projects/development/modules/RpmBuilder/sample/dir3
/home/anthony/ctier/ctl/projects/development/modules/RpmBuilder/sample/dir3/file31
/home/anthony/ctier/ctl/projects/development/modules/RpmBuilder/sample/dir3/file32
/home/anthony/ctier/ctl/projects/development/modules/RpmBuilder/sample/dir3/file33
&lt;/pre&gt;

=== Specifying includes and excludes ===

This example goes a step further to use the includes and excludes settings to select a subset of the files and directories beneath the base directory:

&lt;pre&gt;
[anthony@centos52 objects]$ cat sample.xml 
&lt;?xml version=&quot;1.0&quot;?&gt;

&lt;!DOCTYPE project PUBLIC &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; &quot;project.dtd&quot;&gt;

&lt;!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --&gt;
&lt;!-- RpmBuilder example object XML definition file                                       --&gt;
&lt;!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --&gt;

&lt;project&gt;

        &lt;!-- Builder settings: --&gt;
        &lt;setting type=&quot;BuilderBuildFile&quot; name=&quot;sampleRpmBuilder&quot; description=&quot;Sample RPM build target&quot; settingValue=&quot;build.xml&quot;/&gt;
        &lt;setting type=&quot;BuilderBuildTarget&quot; name=&quot;sampleRpmBuilder&quot; description=&quot;Sample RPM build target&quot; settingValue=&quot;all&quot;/&gt;
        &lt;setting type=&quot;BuilderPackageFilebase&quot; name=&quot;sampleRpmBuilder&quot; description=&quot;Sample RPM file base name&quot; settingValue=&quot;sampleRpm&quot;/&gt;

        &lt;setting type=&quot;BuilderPackageIncludes&quot; name=&quot;sampleRpmBuilder&quot; description=&quot;Sample RPM include regex&quot; settingValue=&quot;dir2|dir3&quot;/&gt;
        &lt;setting type=&quot;BuilderPackageExcludes&quot; name=&quot;sampleRpmBuilder&quot; description=&quot;Sample RPM exclude regex&quot; settingValue=&quot;file[23]1&quot;/&gt;

        &lt;!-- Build environment updaters, sites and services: --&gt;

        &lt;deployment type=&quot;RpmBuilder&quot; name=&quot;sampleRpmBuilder&quot; basedir=&quot;${modules.dir}/RpmBuilder/sample&quot; installRoot=&quot;${user.home}/RPMS/sampleRpm&quot; description=&quot;Sample RPM builder&quot; startuprank=&quot;1&quot;&gt;
                &lt;resources replace=&quot;true&quot;&gt;
                        &lt;resource type=&quot;BuilderBuildFile&quot; name=&quot;sampleRpmBuilder&quot;/&gt;
                        &lt;resource type=&quot;BuilderBuildTarget&quot; name=&quot;sampleRpmBuilder&quot;/&gt;
                        &lt;resource type=&quot;BuilderPackageFilebase&quot; name=&quot;sampleRpmBuilder&quot;/&gt;
                        &lt;resource type=&quot;BuilderPackageIncludes&quot; name=&quot;sampleRpmBuilder&quot;/&gt;
                        &lt;resource type=&quot;BuilderPackageExcludes&quot; name=&quot;sampleRpmBuilder&quot;/&gt;
                &lt;/resources&gt;
        &lt;/deployment&gt;
&lt;/project&gt;
&lt;/pre&gt;

... and here's the contents of the resultant RPM:

&lt;pre&gt;
[anthony@centos52 ~]$ rpm -ql -p RPMS/sampleRpm/RPMS/noarch/sampleRpm-1.2.3-1.noarch.rpm 
/home/anthony/ctier/ctl/projects/development/modules/RpmBuilder/sample
/home/anthony/ctier/ctl/projects/development/modules/RpmBuilder/sample/dir2
/home/anthony/ctier/ctl/projects/development/modules/RpmBuilder/sample/dir2/file22
/home/anthony/ctier/ctl/projects/development/modules/RpmBuilder/sample/dir2/file23
/home/anthony/ctier/ctl/projects/development/modules/RpmBuilder/sample/dir3
/home/anthony/ctier/ctl/projects/development/modules/RpmBuilder/sample/dir3/file32
/home/anthony/ctier/ctl/projects/development/modules/RpmBuilder/sample/dir3/file33
&lt;/pre&gt;

=== Web content RPM example ===

This example demonstrates the use of the requires and provides attributes as part of on an RpmBuilder implementation that packages the contents of the default Linux Apache web server document root (/var/www/html). The RpmBuilder object definition is something like this:

&lt;pre&gt;
&lt;?xml version=&quot;1.0&quot;?&gt;

&lt;!DOCTYPE project PUBLIC &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; &quot;project.dtd&quot;&gt;

&lt;!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --&gt;
&lt;!-- RpmBuilder example object XML definition file                                       --&gt;
&lt;!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --&gt;

&lt;project&gt;

        &lt;!-- Builder settings: --&gt;
        &lt;setting type=&quot;BuilderBuildFile&quot; name=&quot;sampleRpmBuilder&quot; description=&quot;Sample RPM build target&quot; settingValue=&quot;build.xml&quot;/&gt;
        &lt;setting type=&quot;BuilderBuildTarget&quot; name=&quot;sampleRpmBuilder&quot; description=&quot;Sample RPM build target&quot; settingValue=&quot;all&quot;/&gt;
        &lt;setting type=&quot;BuilderPackageFilebase&quot; name=&quot;sampleWwwRpmBuilder&quot; description=&quot;Sample web content RPM file base name&quot; settingValue=&quot;sampleWwwRpm&quot;/&gt;
        &lt;setting type=&quot;BuilderPackageInstallroot&quot; name=&quot;sampleWwwRpmBuilder&quot; description=&quot;Sample web content RPM builder file install root&quot; settingValue=&quot;/var/www/html&quot;/&gt;
        &lt;setting type=&quot;RpmRequires&quot; name=&quot;sampleWwwRpmBuilder&quot; description=&quot;Sample web content RPM builder package requires&quot; settingValue=&quot;httpd&quot;/&gt;
        &lt;setting type=&quot;RpmProvides&quot; name=&quot;sampleWwwRpmBuilder&quot; description=&quot;Sample web content RPM builder package provides&quot; settingValue=&quot;website&quot;/&gt;
        &lt;setting type=&quot;RpmAutoreq&quot; name=&quot;sampleWwwRpmBuilder&quot; description=&quot;Sample web content RPM builder automatic requires processing check&quot; settingValue=&quot;1&quot;/&gt;

        &lt;!-- Build environment updaters, sites and services: --&gt;
        &lt;deployment type=&quot;RpmBuilder&quot; name=&quot;sampleWwwRpmBuilder&quot; basedir=&quot;/var/www/html&quot; installRoot=&quot;${user.home}/RPMS/sampleWwwRpm&quot; description=&quot;Sample web content RPM builder&quot; startuprank=&quot;1&quot;&gt;
        &lt;resources replace=&quot;true&quot;&gt;
                &lt;resource type=&quot;BuilderBuildFile&quot; name=&quot;sampleRpmBuilder&quot;/&gt;
                &lt;resource type=&quot;BuilderBuildTarget&quot; name=&quot;sampleRpmBuilder&quot;/&gt;
                &lt;resource type=&quot;BuilderPackageFilebase&quot; name=&quot;sampleWwwRpmBuilder&quot;/&gt;
                &lt;resource type=&quot;BuilderPackageInstallroot&quot; name=&quot;sampleWwwRpmBuilder&quot;/&gt;
                &lt;resource type=&quot;RpmRequires&quot; name=&quot;sampleWwwRpmBuilder&quot;/&gt;
                &lt;resource type=&quot;RpmProvides&quot; name=&quot;sampleWwwRpmBuilder&quot;/&gt;
                &lt;resource type=&quot;RpmAutoreq&quot; name=&quot;sampleWwwRpmBuilder&quot;/&gt;
        &lt;/resources&gt;
        &lt;/deployment&gt;
&lt;/project&gt;
&lt;/pre&gt;

You can see the three extra settings that manage package dependencies:

* Specify which other RPMs this RPM depends on for successful installation
* Define &quot;virtual&quot; package categories that this RPM provides
* Turn on automatic requirements checking in the RPM (it is off by default)

Here's sample output from the command:

&lt;pre&gt;
[anthony@centos54 ctl]$ ctl -p Development -t RpmBuilder -r sampleWwwRpmBuilder -c Build -- -buildstamp 1.0-1
Start: &quot;Run the build cycle.&quot; commands: scmCheckout,setBuildstamp,runBuildScript,generateManifest,createPackage,repoImport
begin workflow command (1/6) -&gt; &quot;scmCheckout -buildstamp 1.0-1&quot; ...
scmCheckout parameters: {basedir=&quot;/var/www/html&quot;, connection=&quot;&quot;, module=&quot;&quot;, label=&quot;&quot;, scmcommand=&quot;checkout&quot; }
[command.timer.Builder.scmCheckout: 0.002 sec]
end workflow command (1/6) -&gt; &quot;scmCheckout -buildstamp 1.0-1&quot;
begin workflow command (2/6) -&gt; &quot;setBuildstamp -buildstamp 1.0-1&quot; ...
Using provided buildstamp &quot;1.0-1&quot;
[command.timer.RpmBuilder.setBuildstamp: 0.004 sec]
end workflow command (2/6) -&gt; &quot;setBuildstamp -buildstamp 1.0-1&quot;
begin workflow command (3/6) -&gt; &quot;runBuildScript -buildstamp 1.0-1&quot; ...
Exiting command. buildfile did not exist: 'build.xml'&quot;
[command.timer.Builder.runBuildScript: 0.004 sec]
end workflow command (3/6) -&gt; &quot;runBuildScript -buildstamp 1.0-1&quot;
begin workflow command (4/6) -&gt; &quot;generateManifest -buildstamp 1.0-1&quot; ...
[command.timer.RpmBuilder.generateManifest: 0.140 sec]
end workflow command (4/6) -&gt; &quot;generateManifest -buildstamp 1.0-1&quot;
begin workflow command (5/6) -&gt; &quot;createPackage -buildstamp 1.0-1&quot; ...
Getting: http://centos54:8080/jackrabbit/repository/controltier/projects/Development/publish/modules/rpm-head.jar
To: /opt/ctier/ctl/var/tmp/downloads/Development/rpm-head.jar
Created dir: /opt/ctier/ctl/projects/Development/modules/rpm
Expanding: /opt/ctier/ctl/var/tmp/downloads/Development/rpm-head.jar into /opt/ctier/ctl/projects/Development/modules/rpm
Attempting to get Package-head.jar ...
Getting: http://centos54:8080/jackrabbit/repository/controltier/projects/Development/publish/modules/Package-head.jar
To: /opt/ctier/ctl/var/tmp/downloads/Development/Package-head.jar
Created dir: /opt/ctier/ctl/projects/Development/modules/Package
Expanding: /opt/ctier/ctl/var/tmp/downloads/Development/Package-head.jar into /opt/ctier/ctl/projects/Development/modules/Package
Created dir: /home/anthony/RPMS/sampleWwwRpm/SPECS
Created dir: /home/anthony/RPMS/sampleWwwRpm/RPMS
Created dir: /home/anthony/RPMS/sampleWwwRpm/BUILD
Copying 1 file to /home/anthony/RPMS/sampleWwwRpm/SPECS
Building the RPM based on the sampleWwwRpm.spec file
Building target platforms: noarch
Building for target noarch
Processing files: sampleWwwRpm-1.0-1
Provides: Explictly checking: off requirements turn website${line.seperator}#
Requires(rpmlib): rpmlib(CompressedFileNames) &lt;= 3.0.4-1 rpmlib(PayloadFilesHavePrefix) &lt;= 4.0-1
Requires: httpd
Wrote: /home/anthony/RPMS/sampleWwwRpm/RPMS/noarch/sampleWwwRpm-1.0-1.noarch.rpm
[command.timer.RpmBuilder.createPackage: 2.845 sec]
end workflow command (5/6) -&gt; &quot;createPackage -buildstamp 1.0-1&quot;
begin workflow command (6/6) -&gt; &quot;repoImport -buildstamp 1.0-1&quot; ...
Created dir: /opt/ctier/ctl/projects/Development/resources/RpmBuilder/sampleWwwRpmBuilder/tmp/Builder-repoImport-20091107165832
Condition: isProcessableWithoutExistingPropfile result: true
opts.propfile set to: autogenerated-builder.properties
Creating new property file: /opt/ctier/ctl/projects/Development/resources/RpmBuilder/sampleWwwRpmBuilder/tmp/Builder-repoImport-20091107165832/import-count.properties
processing files in directory: '/home/anthony/RPMS/sampleWwwRpm' matching: '(sampleWwwRpm)(?:-1.0-1)?\.(noarch.rpm)$' ...
processing matched file: RPMS/noarch/sampleWwwRpm-1.0-1.noarch.rpm
Auto-generated builder properties file created: /home/anthony/RPMS/sampleWwwRpm/RPMS/noarch/autogenerated-builder.properties...
Copying 1 file to /home/anthony/RPMS/sampleWwwRpm/RPMS/noarch
Updating property file: /opt/ctier/ctl/projects/Development/resources/RpmBuilder/sampleWwwRpmBuilder/tmp/Builder-repoImport-20091107165832/import-count.properties
Copying 1 file to /opt/ctier/ctl/projects/Development/modules/Builder/commands
Getting: http://centos54:8080/jackrabbit/repository/controltier/projects/Development/publish/modules/rpm-head.jar
To: /opt/ctier/ctl/var/tmp/downloads/Development/rpm-head.jar
Not modified - so not downloaded
rpm up to date
Attempting to get Package-head.jar ...
Getting: http://centos54:8080/jackrabbit/repository/controltier/projects/Development/publish/modules/Package-head.jar
To: /opt/ctier/ctl/var/tmp/downloads/Development/Package-head.jar
Not modified - so not downloaded
Package up to date
uploading file: /home/anthony/RPMS/sampleWwwRpm/RPMS/noarch/sampleWwwRpm-1.0-1.noarch.rpm to: http://centos54:8080/jackrabbit/repository/controltier/projects/pkgs/Development/rpm/noarch.rpms/sampleWwwRpm-1.0-1.noarch.rpm...
Puted 1 file to http://centos54:8080/jackrabbit/repository/controltier/projects/pkgs/Development/rpm/noarch.rpms/sampleWwwRpm-1.0-1.noarch.rpm
Creating new property file: /opt/ctier/ctl/projects/Development/resources/RpmBuilder/sampleWwwRpmBuilder/tmp/Builder-repoImport-20091107165832/import-list.properties
Deleting: /opt/ctier/ctl/projects/Development/modules/Builder/commands/entity52776743.properties
Current count: 1
Batch request performed successfully.
Current count: 1
[command.timer.Builder.repoImport: 4.877 sec]
end workflow command (6/6) -&gt; &quot;repoImport -buildstamp 1.0-1&quot;
[command.timer.Development.RpmBuilder.Build: 13.789 sec]
Workflow completed. execution time: 13.789 sec
&lt;/pre&gt;

'''Note''': the buildstamp must be specified in the form that RPMs require (e.g. &quot;1.0-1&quot; ... numerical version and a release number).

Here's what the resultant RPMS directory looks like:

&lt;pre&gt;
[anthony@centos54 ~]$ find RPMS/
RPMS/
RPMS/sampleWwwRpm
RPMS/sampleWwwRpm/BUILD
RPMS/sampleWwwRpm/RPMS
RPMS/sampleWwwRpm/RPMS/noarch
RPMS/sampleWwwRpm/RPMS/noarch/sampleWwwRpm-1.0-1.noarch.rpm
RPMS/sampleWwwRpm/RPMS/noarch/autogenerated-builder.properties
RPMS/sampleWwwRpm/manifest.txt
RPMS/sampleWwwRpm/SPECS
RPMS/sampleWwwRpm/SPECS/sampleWwwRpm.spec
&lt;/pre&gt;

The manifest file created by generateManifest:

&lt;pre&gt;
[anthony@centos54 ~]$ cat RPMS/sampleWwwRpm/manifest.txt
%dir &quot;/var/www/html&quot;
&quot;/var/www/html/index.html&quot;
&lt;/pre&gt;

... and the SPEC file created from a template kept in the rpm module:

&lt;pre&gt;
[anthony@centos54 ~]$ cat RPMS/sampleWwwRpm/SPECS/sampleWwwRpm.spec
#
# One-line summary description of the package:
#
Summary: sampleWwwRpm binary RPM package
#
# Name of the package:
#
Name: sampleWwwRpm
#
# Version number ordering:
#
#  Epoch:
#
# Package version number:
#
Version: 1.0
#
# Package release number:
#
Release: 1
#
# Package builder tags:
#
Vendor: none
URL: none
# Copyright: none
Packager: none
Distribution: none
Group: root
License: none
#
# Dependency tags:
#
#  Requires:
#  Provides:
#  Obsoletes:
#  Conflicts:
Requires: httpd
Provides: website
#
# Manage requirements checking:
#
AutoReq: 1
#
# Source of the files to include in the package:
#
# Source: %{_topdir}/SOURCES/sampleWwwRpm.tar.gz
#
# Relocatable package prefix:
#
Prefix: /var/www/html

#
# Detailed description of the package:
#
%description
This is version 1.0 of the sampleWwwRpm binary RPM package built on centos54 using the /home/anthony/RPMS/sampleWwwRpm/manifest.txt file list.

The package is relocatable from its base directory of /var/www/html.
#
# Prepare for the build:
#
# %prep

#
# Build from source:
#
# %build

#
# Install the built files:
#
# %install

#
# Clean up after the build:
#
# %clean

#
# Select file for the binary RPM:
#
%files -f /home/anthony/RPMS/sampleWwwRpm/manifest.txt
%defattr(-,root,root)
%undefine __check_files
&lt;/pre&gt;

... note the Requires, Provides and Autoreq settings. Here's the lowdown on the rpm itself:

&lt;pre&gt;
[anthony@centos54 ~]$ rpm -qi -p RPMS/sampleWwwRpm/RPMS/noarch/sampleWwwRpm-1.0-1.noarch.rpm 
Name        : sampleWwwRpm                 Relocations: /var/www/html 
Version     : 1.0                               Vendor: none
Release     : 1                             Build Date: Sat 07 Nov 2009 05:02:28 PM PST
Install Date: (not installed)               Build Host: localhost.localdomain
Group       : root                          Source RPM: sampleWwwRpm-1.0-1.src.rpm
Size        : 8327                             License: none
Signature   : (none)
Packager    : none
URL         : none
Summary     : sampleWwwRpm binary RPM package
Description :
This is version 1.0 of the sampleWwwRpm binary RPM package built on centos54 using the /home/anthony/RPMS/sampleWwwRpm/manifest.txt file list.

The package is relocatable from its base directory of /var/www/html.
[anthony@centos54 ~]$ rpm -q --requires -p RPMS/sampleWwwRpm/RPMS/noarch/sampleWwwRpm-1.0-1.noarch.rpm 
httpd  
rpmlib(CompressedFileNames) &lt;= 3.0.4-1
rpmlib(PayloadFilesHavePrefix) &lt;= 4.0-1
[anthony@centos54 ~]$ rpm -q --provides -p RPMS/sampleWwwRpm/RPMS/noarch/sampleWwwRpm-1.0-1.noarch.rpm 
website  
sampleWwwRpm = 1.0-1
[anthony@centos54 ~]$ rpm -ql -p RPMS/sampleWwwRpm/RPMS/noarch/sampleWwwRpm-1.0-1.noarch.rpm 
/var/www/html
/var/www/html/index.html
&lt;/pre&gt;

{{Manual/navbox}}

[[Category:Builder]]
[[Category:Elements]]</text>
    </revision>
  </page>
  <page>
    <title>RunDeck</title>
    <id>2399</id>
    <revision>
      <id>15818</id>
      <timestamp>2011-12-11T17:52:42Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>/* Original Announcement */</comment>
      <text xml:space="preserve">RunDeck is a separate open source project hosted on GitHub focussing on a simple to use web-based distributed orchestration console.
See the home page http://rundeck.org.

== Overview ==

[[File:rundeck-logo-small.png|right]]
RunDeck is cross-platform open source software that helps you automate ad-hoc and routine procedures in data center or cloud environments. RunDeck allows you to run tasks on any number of nodes from a web-based or command-line interface. RunDeck also includes other features that make it easy to scale up your scripting efforts including: access control, workflow building, scheduling, logging, and integration with external sources for node and option data. Read more in the [http://rundeck.org/docs/RunDeck-Guide.html User Manual].

=== Original Announcement===

On Dec 10, 2010 [[User:Ahonor|Alex Honor]] posted [http://groups.google.com/group/controltier/browse_thread/thread/20eda1cc6066dc2f# Announcing project &quot;RunDeck&quot;] on the ControlTier google group:

&lt;div style=&quot;margin-left: 1cm; &quot;&gt;
Quote:
&lt;div style=&quot;background: #eee;&quot;&gt;
Hello fellow ControlTier users, 

In addition to working on ControlTier, I'm working on a new open 
source project along with a couple ControlTier developers called 
&quot;RunDeck&quot;. The goal of this project is a client-less, easy to install 
and use command and control server. It's really a spin off or a 
promotion of some of ControlTier's most popular features: Jobs and ad-hoc command execution. 

RunDeck shares many ControlTier ideas and its code base was seeded 
from ControlTier 3.6. Combine [[CTL Center]],  supporting shell tools ([[ctl-exec]], [[ctl-queue]], [[ctl-run]], [[ctl-jobs]]), document formats like [[job.xml]] and 
a subset of [[resources.xml]], and you can probably envision the RunDeck 
footprint. The user interface design should also be quite familiar to 
CTL Center users with some improvements, as well. 

''What's the focus of the RunDeck project? ''

A particular focus of RunDeck is the further development of the ad-hoc 
command execution environment. Any of you that were attracted to 
ControlTier's &quot;[[script-driven approach]]&quot; will find RunDeck particularly 
of interest. We are really excited about two feature areas: 
*  distributed command prompt: We want to create a dynamic and  powerful interface to filtering and dispatching commands and scripts  to Node sets. We've got all kinds of ideas on how to do this  graphically 
*  pluggable external data providers: Everyone has existing sources of  data about their environment and process. We want to enable a simple  way of exposing this data to RunDeck 

From an admin's standpoint, we want RunDeck to have a small footprint, 
running on a single server, without the need to install client 
software.  For new users, we want to focus on a tool with a small 
learning curve with a lighter weight scripting model. 

''How is RunDeck different from ControlTier? ''

RunDeck is an evolution of some features of ControlTier into a 
standalone service. RunDeck also relies on external services to 
provide the Node catalog that ControlTier manages on its own.  This 
can make it easier to use with existing management tools. 
RunDeck is lighter weight and does not use the [[CTL]] module programming 
framework, it only uses Jobs. 

RunDeck defines multi-step procedures 
using workflow sequences and does not use the granular type/object 
resource model, repository and distributed object paradigm. Because of 
this, RunDeck relies more heavily on other tools in the chain. We have 
also put effort into giving RunDeck an easier install process. The RPM 
installer also shows our work on adopting the Linux system standards. 
Finally, RunDeck is using a different project hosting service, GitHub. 
We like GitHub's social features and excellent git support. 

''What does RunDeck mean to ControlTier? ''

In the future, RunDeck could be a drop in replacement for CTL Center 
and ctl-exec. This would allow ControlTier to focus on its original 
design of being a model-driven automation framework. Your feedback 
will help make that decision. 

''When is RunDeck available? ''

RunDeck preview builds are available now, and a beta release candidate 
will be available soon. 

For more information, go to http://rundeck.org
&lt;/div&gt;
&lt;/div&gt;

Note, as of Dec 10 2011, RunDeck is on it's fourth major iteration: 1.4.

== ControlTier integration ==

ControlTier users can take advantage of RunDeck by using it in place of [[CTL Center]]. In a ControlTier Google group post, Anthony Shortland states:
  
&lt;blockquote&gt;
There is nothing preventing a ControlTier user with an operational solution based on a Workbench resource model and a set of Ctl modules taking advantage of these latest innovations by carefully reconfiguring the installation to drop certain components and switch to the newer stuff incrementally. In other words there's a clean migration path to adopting the &quot;loosely-coupled&quot; tool-chain approach rather than continue to rely on all the tightly-coupled components included in the ControlTier install. 
&lt;/blockquote&gt;

See [http://groups.google.com/group/controltier/browse_thread/thread/cc734760224fba82/ee8d17e57c1b7faa?lnk=gst&amp;q=rundeck#ee8d17e57c1b7faa Configuring Rundeck and ControlTier as part of a &quot;loosely-coupled&quot; tool-chain] for more.</text>
    </revision>
  </page>
  <page>
    <title>Running Jobs with Jobcenter</title>
    <id>1575</id>
    <redirect />
    <revision>
      <id>10033</id>
      <timestamp>2009-12-11T04:06:09Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <comment>moved [[Running Jobs with Jobcenter]] to [[Running jobs]]:&amp;#32;make more concise</comment>
      <text xml:space="preserve">#REDIRECT [[Running jobs]]</text>
    </revision>
  </page>
  <page>
    <title>Running ad hoc commands</title>
    <id>54</id>
    <revision>
      <id>14761</id>
      <timestamp>2010-11-21T20:02:14Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>/* Command line usage */</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Command execution&lt;/categorytree&gt;
[[Image:ctl-exec-cartoon.png|left|thumb|ctl-exec]]

An ''ad hoc command'' is any system command or shell script can executed via the [[command dispatcher]]. Ad hoc commands can be executed via a command line utility named ''ctl-exec'' or as a [[Job]] run from a graphical console called CTL Center.

A [http://www.screencast.com/t/OI1fWpXFq screencast] showing ctl-exec is available.

Ad hoc commands can be executed to registered [[node]]s. All that needs to be running is SSH on the remote hosts and the server's public key in the destination account's allowed_keys file.

==Command line usage==

The &lt;code&gt;ctl-exec&lt;/code&gt; tool has a variety of options that can be dispalyed via -help. Typing ctl-exec -help shows a complete listing of all the ctl-exec options.

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ ctl-exec -help
usage: ctl-exec [-h] [-v] [-V] [-q] [-p project] [-I nodes] [-X xnodes]
                [--threadcount &lt;1&gt;] [-keepgoing] [[-S] | [-s &lt;&gt;] | [-- command-args]]
 -Z,--filter-exclude-precedence    true/false. if true, exclusion filters have
                                   precedence over inclusion filters
 -C,--threadcount                  number of threads
 -F,--failednodes                  Filepath to store failed nodes (Since 3.4.7)
 -I,--nodes                        include node list
 -K,--keepgoing                    keep going if there are errors
 -S,--stdin                        read script from stdin
 -X,--xnodes                       exclude node list
 -h,--help                         print usage
 -p,--depot                        depot name
 -q,--quiet                        quiet mode
 -s,--scriptfile                   scriptfile script file
 -v,--verbose                      verbose mode
&lt;/syntaxhighlight&gt;

The general option pattern follows this form:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl-exec [options] [-- [command-options]]
&lt;/syntaxhighlight&gt;

These options control nodedispatch:

* -I,--nodes: Run the command on all nodes matching the regular expression.
* -X,--xnodes: Do not run the command on any node matching the regular expression. If no -I flag is specified, all nodes are looked up and then those matching the -X expression are filtered out.

Two other options of interest for are:

* -C,--threadcount: For all the matching nodedispatch results, execute the commands in the specified number of threads.
* -K: If specified, ctl-exec will continue if any errors occur.
* -F, --failednodes: specify a file to store the list of any nodes that failed.  Specify again on retry to read the nodes list and execute only on the failed nodes.

See the document [[Dispatcher options]] for further discussion of node filtering.

==Node Dispatch==

The ctl-exec shell command includes a feature called  node dispatch that allows you to call commands across a set of hosts without having to specify specific host names. Internally, CTL looks up the nodes that have the module or object, and then dispatches that command to those nodes. Options provide a way to filter the lookup results.

The ctl-exec command supports a listing feature that lists all the nodes to which commands can be dispatched. Run the ctl-exec command without arguments:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ ctl-exec   
strongbad dev@development centos
&lt;/syntaxhighlight&gt;      

By adding the &quot;-v&quot; option you can see more information about each node:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ ctl-exec -v
strongbad:
   hostname: strongbad
   os-arch: i386
   os-family: unix
   os-name: Mac OS X
   os-version: 10.5.5
   tags: []
development:
   hostname: demo@development
   os-arch: i386
   os-family: unix
   os-name: Linux
   os-version: 2.5.5
   tags: []
centos:
   hostname: centos
   os-arch: i386
   os-family: unix
   os-name: Linux
   os-version: 2.5.5
   tags: []
&lt;/syntaxhighlight&gt;

==Command line execution==
=== Execute a command ===

The following executes the &quot;ps&quot; command across all registered nodes:

&lt;pre&gt;
ctl-exec -- ps
&lt;/pre&gt;

This says execute the &quot;ps&quot; but limited to those nodes tagged with the name &quot;tomcats&quot;:
&lt;pre&gt;
ctl-exec -I tags=tomcats -- ps
&lt;/pre&gt;

Continue executing to next node if an error occurs:
&lt;pre&gt;
ctl-exec -K -I tags=tomcats -- ps
&lt;/pre&gt;

* Check if the web servers are listening on port 80:
&lt;pre&gt;
ctl-exec --nodes &quot;web.*&quot; -- netstat -an |grep 80
&lt;/pre&gt;

* Run who command on all the dev machines except don't run it on localhost:
&lt;pre&gt;
ctl-exec --nodes &quot;.*.dev.acme.com&quot; --xnode localhost -- who
&lt;/pre&gt;

* Run the pgrep command across all the machines in dev using 10 threads:
&lt;pre&gt;
ctl-exec -C 10 -I &quot;.*.dev.acme.com&quot; -X localhost -- pgrep httpd
&lt;/pre&gt;

* Run a &lt;code&gt;ctl&lt;/code&gt; defined command:
&lt;pre&gt;
$ ctl-exec -- ctl -p demo -m netutil -c listening -- -port 8080
number of nodes to dispatch to: 1, (threadcount=1)
true
&lt;/pre&gt;

=== Execute a script ===

* Execute the &lt;code&gt;/tmp/bounce.sh&lt;/code&gt;  script across all the servers tagged &quot;tomcats&quot;
&lt;pre&gt;
ctl-exec -K -I tags=tomcats -s /tmp/bounce.sh
&lt;/pre&gt;
The ctl-exec command copies the &quot;/tmp/bounce.sh&quot; script to each of the matching hosts and then executes it:

=== Execute from stdin===

* Execute the script provided via STDIN:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
echo &quot;uname -a&quot; | ctl-exec --stdin 
number of nodes to dispatch to: 1, (threadcount=1)
Darwin strongbad.local 9.6.0 Darwin Kernel Version 9.6.0: Mon Nov 24 17:37:00 PST 2008; root:xnu-1228.9.59~1/RELEASE_I386 i386
&lt;/syntaxhighlight&gt;

* Execute the scripts using here doc form:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ ctl-exec --stdin &lt;&lt;EOS
&gt; uname -a;
&gt; whoami;
&gt; EOS
number of nodes to dispatch to: 1, (threadcount=1)
Darwin strongbad.local 9.6.0 Darwin Kernel Version 9.6.0: Mon Nov 24 17:37:00 PST 2008; root:xnu-1228.9.59~1/RELEASE_I386 i386
alexh
&lt;/syntaxhighlight&gt;

==Job execution==
You can also run an ad hoc command or a script via the GUI by exposing it as a &quot;job&quot;. Jobs can be defined in an XML file called &quot;[[job.xml]]&quot; and loaded to the server by a utility module called [[ProjectBuilder]]. The sample below illustrates job definition. The first definition specifies a shell pipeline script expression inside the &lt;code&gt;script&lt;/code&gt; tag. The second job definition describes a script file specified via the &lt;code&gt;scriptfile&lt;/code&gt;:

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;joblist&gt;
  &lt;job&gt;
    &lt;name&gt;check port&lt;/name&gt;
    &lt;description&gt;&lt;/description&gt;
    &lt;loglevel&gt;WARN&lt;/loglevel&gt;
    &lt;additional/&gt;
    &lt;context&gt;
      &lt;depot&gt;demo&lt;/depot&gt;
    &lt;/context&gt;
    &lt;script&gt;netstat -an | grep 8080 | grep LISTENING&lt;/script&gt;
  &lt;/job&gt;

  &lt;job&gt;
    &lt;name&gt;listening.sh&lt;/name&gt;
    &lt;description/&gt;
    &lt;additional/&gt;
    &lt;loglevel&gt;WARN&lt;/loglevel&gt;
    &lt;context&gt;
      &lt;depot&gt;demo&lt;/depot&gt;
    &lt;/context&gt;
    &lt;scriptfile&gt;/path/to/listening.sh&lt;/scriptfile&gt;
  &lt;/job&gt;
&lt;/joblist&gt;
&lt;/syntaxhighlight&gt;

[[Image:getting-started-joblist1-screenshot.png|thumb|Job listing]]

[[Job.xml]] files can be loaded using [[ProjectBuilder]]'s &lt;code&gt;load-jobs&lt;/code&gt; command which will read the job definitions and store them on the server:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m ProjectBuilder -c load-jobs -- -file job.xml
Succeeded creating/updating 2 Jobs:
	1: check port [1] &lt;/jobcenter/scheduledExecution/show/1&gt;
	2: listening.sh [2] &lt;/jobcenter/scheduledExecution/show/2&gt;
&lt;/syntaxhighlight&gt;

[[Image:getting-started-check-port-screenshot.png|thumb|Job running]]

With a browser you can view the defined jobs and execute them by accessing the GUI's home page where they are listed or go directly to a job URL. 
To access the &quot;check port&quot; job, reference it by its ID, &quot;1&quot;: http://strongbad:8080/jobcenter/scheduledExecution/show/1

ProjectBuilder also includes the &lt;code&gt;find-jobs&lt;/code&gt; command useful to list the jobs already loaded:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ ctl -p demo -m ProjectBuilder -c find-jobs 
No filters specified, finding all jobs
Jobs xml content written to: /Users/alexh/ctier/ctl/var/tmp/find-jobs.1386687012.xml
Found 2 Jobs:
	1: check port [1]
	2: listening.sh [2]
Deleting: /Users/alexh/ctier/ctl/var/tmp/find-jobs.1386687012.xml
&lt;/syntaxhighlight&gt;


{{Guide/navbox}}

[[Category:Command execution]]</text>
    </revision>
  </page>
  <page>
    <title>Running ctl</title>
    <id>1510</id>
    <redirect />
    <revision>
      <id>9472</id>
      <timestamp>2009-12-08T17:55:57Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>moved [[Running ctl]] to [[Running defined commands]]</comment>
      <text xml:space="preserve">#REDIRECT [[Running defined commands]]</text>
    </revision>
  </page>
  <page>
    <title>Running ctl-exec</title>
    <id>1509</id>
    <redirect />
    <revision>
      <id>9453</id>
      <timestamp>2009-12-08T17:38:18Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>moved [[Running ctl-exec]] to [[Running ad hoc commands]]</comment>
      <text xml:space="preserve">#REDIRECT [[Running ad hoc commands]]</text>
    </revision>
  </page>
  <page>
    <title>Running defined commands</title>
    <id>56</id>
    <revision>
      <id>15532</id>
      <timestamp>2011-09-26T18:09:00Z</timestamp>
      <contributor>
        <username>Krohr</username>
        <id>272</id>
      </contributor>
      <minor/>
      <comment>Fixed typo</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Command execution&lt;/categorytree&gt;
[[Image:ctl-cartoon.png|left|thumb|ctl]]

''Defined commands'' are procedures formally defined in a ControlTier type and provide a standard calling interface to the [[command dispatcher]]. These defined commands encapsulate your routine procedures and form the basis of your own automation toolkit. Commands can be combined into workflows that represent multi-step processes.

ControlTier includes a variety of  [[types]] containing standalone commands and workflows that you can use to automate your processes. 

Defined commands can be executed either via a command line utility via [[ctl]] or as a [[Job]] via a graphical console called [[Jobcenter]].

==Command line usage==

CTL has a variety of options that can be displayed via -help. Typing &lt;code&gt;ctl -help&lt;/code&gt; shows a complete listing of all the ctl options.
&lt;pre&gt;
usage: ctl [-h] [-v] [-V] [-z] [-p project -t type -r resource -c command] [-p
           project -m module -c command] [--threadcount &lt;1&gt;] [-I filter] [-X filter]
           [--filter-exclude-precedence true/false][-l level] [-- command-options]
 -R,--report-category              The reporting category name
 -P,--process-instance             The process instance identifier
 -Z,--filter-exclude-precedence    true/false. if true, exclusion filters have
                                   precedence over inclusion filters
 -C,--threadcount                  number of threads
 -F,--failednodes                  Filepath to store failed nodes (Since 3.4.7)
 -I,--nodes                        include node parameter list
 -K,--keepgoing                    continue node dispatch when execution on one
                                   node fails
 -V                                run verbose and with loglevel &quot;debug&quot;
 -X,--xnodes                       exclude node parameter list
 -c                                command
 -h                                display this help
 -l,--level                        log level. debug|verbose|info|warning|error
 -m                                module name
 -r                                resource resource name
 -p                                project name name
 -t                                resource type name
 -v                                run verbose
 -z,--terse                        leave log messages unadorned
&lt;/pre&gt;

The general option pattern follows this form:

&lt;pre&gt;
ctl [ctl-options] [-- [command-options]]
&lt;/pre&gt;

==Node Dispatch==

The &lt;code&gt;ctl&lt;/code&gt; command includes a feature called  ''[[CTL_architecture#Node_Dispatch|node dispatch]]'' that allows you to call commands across a set of hosts without having to specify specific host names. Internally, CTL looks up the nodes that have the command, and then dispatches that command to those matching nodes. Options provide a way to filter the lookup results.

These options control nodedispatch:

* -I,--nodes: Run the command on all nodes matching the regular expression.
* -X,--xnodes: Do not run the command on any node matching the regular expression. If no -I flag is specified, all nodes are looked up and then those matching the -X expression are filtered out.

Note:
* Please note that the &quot;-I&quot; and/or &quot;-X&quot; option must be specified to enable node dispatch.

Use these options with nodedispatch:
* -K,--keepgoing: continue execution on nodes even if one node fails
* -F, --failednodes: specify a file to store the list of any nodes that failed.  Specify again on retry to read the nodes list and execute only on the failed nodes.

See the document [[Use node filtering options]] for further discussion of node filtering.

==Listing==

The &lt;code&gt;ctl&lt;/code&gt; command provides a listing capability that will let you see which modules, commands and objects are available in a specified CTL project project.
The listing is controlled by specifying the &quot;-p&quot;, &quot;-m&quot;, &quot;-t&quot;, &quot;-o&quot; options.

When no arguments are specified, all modules, commands and objects are listed. 

Note:
* If you are a bash user be sure to source the $CTL_HOME/etc/bash_completion.sh file. It provides listing via the tab key

Examples

To list all the modules in project &quot;demo&quot; run: &lt;code&gt;ctl -p demo&lt;/code&gt;. You will see each module and the commands defined for that type listed:
&lt;pre&gt;
.
.
.
zip: A zip package
commands: [Get-Process-View, Get-Properties, Get-Supers, Install, Install-Module, Properties, Set-Properties, 
assertPackageIsInstalled, assertPackageIsUnInstalled, assertPackageIsVerified, create, extract, finish, get, 
installDependencies, installPackage, object-deployment-uninstall, prepare, purge, register, remove, upload]
objects: [j2eetutorial14.zip, demo-pkgs-1.2.zip]
&lt;/pre&gt;

If objects exist for that type, you will see an additional line saying: &lt;code&gt;objects:[ &lt;em&gt;obj1&lt;/em&gt;,&lt;em&gt;obj2&lt;/em&gt;...]&lt;/code&gt;

You can list the options for a command like so: &lt;code&gt;ctl -p &lt;em&gt;project&lt;/em&gt; -m &lt;em&gt;type&lt;/em&gt; -- -?&lt;/code&gt;:

&lt;pre&gt;
$ ctl -p demo -m zip -- -?
zip: A zip package
[commands]
.
.
.
  upload: Upload the file to the repository.
    [options]
    [-url &lt;&gt;]: repository url
    [-filename &lt;&gt;]: file to upload
    [-xml &lt;&gt;]: package metadata xml file
    [-register]: register the package based on filename and module info
&lt;/pre&gt;

You can also list commands of an object similarly; &lt;code&gt;ctl -p &lt;em&gt;project&lt;/em&gt; -t &lt;em&gt;type&lt;/em&gt; -r &lt;em&gt;object&lt;/em&gt;&lt;/code&gt;:

&lt;pre&gt;
$ctl -p demo -t zip -r demo-pkgs-1.2.zip
.
.
.
  upload: Upload the file to the repository.
    [options]
    [-url &lt;&gt;]: repository url
    [-filename &lt;&gt;]: file to upload
    [-xml &lt;&gt;]: package metadata xml file
    [-register]: register the package based on filename and module info
&lt;/pre&gt;

==Command line execution==
Commands can be executed in one of two [[CTL_Command_Reference#Context|contexts]]:

* Static context: Static context refers to the executing of a command directly from the software module.  
** Eg: &lt;code&gt;-m &lt;em&gt;type&lt;/em&gt;  -c &lt;em&gt;command&lt;/em&gt;&lt;/code&gt;)
* Object context: Via an object specified by name and type 
** Eg: &lt;code&gt;-t &lt;em&gt;type&lt;/em&gt; -r &lt;em&gt;object&lt;/em&gt; -c &lt;em&gt;command&lt;/em&gt;&lt;/code&gt;)

The commands defined in the [[coreutils]] library are all defined as static. 

Here are some examples of static command execution:

* On the localhost, check if something is listening on port 80:
&lt;pre&gt;
ctl -m netutil -c listening -- -port 80
&lt;/pre&gt;
* Do the same check but this time across all registered hosts:
&lt;pre&gt;
ctl -I '.*' -m netutil -c listening -- -port 80
&lt;/pre&gt;

This example shows the defined command called &quot;listening&quot; from the [[netutil]] module.

* Copy a file from a repository:
&lt;pre&gt;
ctl -m fileutil -c copy -- \
      -file http://repo/myapp/file1.txt -target /myapp/file1.txt -backup
&lt;/pre&gt;

The [[fileutil]] &quot;copy&quot; command can copy a local file or one from a web repository, as this example shows off. The &quot;-backup&quot; flag says to create a backup if that file will be overwritten.

* Run the available command:
&lt;pre&gt;
ctl -m fileutil -c available -- -file /myapp/file1.txt
&lt;/pre&gt;
This checks to see if the file &quot;/myapp/file1.txt&quot; is present.

* Run the available command across all hosts
&lt;pre&gt;
ctl -I '.*' -m fileutil -c available -- -file /myapp/file1.txt
&lt;/pre&gt;

This checks to see if the file &quot;/myapp/file1.txt&quot; is present

Here are some examples showing object-context commands:

* Run the &quot;Install&quot; command for a [[ProjectBuilder]] object:

&lt;pre&gt;
ctl -p ProjectBuilder -r default -c Install
&lt;/pre&gt;

You can also see the ctl command also supports the node filtering, threadcount and keepgoing flags. See: [[CTL_Command_Reference#Node_Dispatch_Options|options]].

*  Run the &quot;Status&quot; command across all web Nodes with host names beginning with &quot;web&quot;:
&lt;pre&gt;
ctl -I 'web.*' -t Service -r tomcat1 -c Status
&lt;/pre&gt;

* Run the Status command across all the hosts tagged &quot;tomcats&quot; using 10 threads:
&lt;pre&gt;
ctl -C 10 -I tags=tomcats -t Service -r tomcat1 -c Status
&lt;/pre&gt;

==Job execution==
Defined commands can also be executed via the GUI as a job. The job definition sample below shows the use of the &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;command&lt;/code&gt; tags to specify the [[netutil]] type name and the listening command, and one of its options:
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;job&gt;
  &lt;name&gt;Run netutil&lt;/name&gt;
  &lt;description/&gt;
  &lt;additional/&gt;
  &lt;context&gt;
    &lt;depot&gt;demo&lt;/depot&gt;
    &lt;type&gt;netutil&lt;/type&gt;
    &lt;command&gt;listening&lt;/command&gt;
    &lt;options&gt;
      &lt;option name=&quot;port&quot; value=&quot;8080&quot;/&gt;
    &lt;/options&gt;
  &lt;/context&gt;
&lt;/job&gt;
&lt;/syntaxhighlight&gt;

[Job.xml]] files can be loaded using [[ProjectBuilder]]'s &lt;code&gt;load-jobs&lt;/code&gt; command which will read the job definitions and store them on the server:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m ProjectBuilder -c load-jobs -- -file job.xml
Succeeded creating/updating 2 Jobs:
	1: Run netutil [1] &lt;/jobcenter/scheduledExecution/show/1&gt;
&lt;/syntaxhighlight&gt;

With a browser you can view the defined jobs and execute them by accessing the GUI's home page where they are listed or go directly to a job URL. 
To access the &quot;Run netutil&quot; job, reference it by its ID, &quot;1&quot;: http://strongbad:8080/jobcenter/scheduledExecution/show/1

{{Guide/navbox}}

[[Category:Command execution]]</text>
    </revision>
  </page>
  <page>
    <title>Running jobs</title>
    <id>690</id>
    <revision>
      <id>16416</id>
      <timestamp>2012-02-20T14:08:25Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Corrected link to command dispatching page</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;CTL Center&lt;/categorytree&gt;

This document describes how to run saved Jobs with [[CTL Center]]. Non-Scheduled Jobs can be run at any time.  Any running job can be observed as it runs, in a few different ways.

* For information on Creating Jobs, see: [[Creating jobs]]

== Description ==

CTL Center lets you execute Stored Jobs at any time, and the output of those Jobs can be observed as the Job is running.  You can view a list of the currently running Jobs that is dynamically updated as the Jobs progress.  Jobs can also be Killed if they need to be stopped.  

Each Job has a record of every time it has been executed, and the output from those executions can be viewed.  

==Using the GUI==
=== Running Jobs ===

Jobs can be run directly from the Jobs Page, or from a Job View Page. (For more about these pages, see: [[Creating jobs#The Jobs List and Job View pages]].)

You can select some options prior to running the Job, or you can choose to run the Job immediately without changing any options.

==== Set Options and Run ====

To Run a Job from the Jobs List, click on the &quot;Run Job&amp;hellip;&quot; button for the Job you want to run:

[[Image:jc-jobslist-run-button.png|Run Job button]]

You will be presented with the &quot;Choose Execution Options&quot; form:

[[Image:jc-choose-options-form.png|Choose Execution Options form]]

If there are any Command Options for the Command being run, you can change them here.

[[Image:jc-choose-options-cmd-options.png|Command Options in the Choose Execution Options form]]

Options for commands can use an embedded Datestamp, which will automatically be updated with the date/time at the time of execution. Simply use a string like &quot;${DATE:XXX}&quot; replacing XXX with any of the [http://java.sun.com/j2se/1.4.2/docs/api/java/text/SimpleDateFormat.html Java SimpleDateFormat characters].


=== Seeing what Jobs are Running ===

Go to the [[View events]] page to view current executions.

=== Seeing Previously Run Jobs ===

In the Jobs List view, you can see the outcome of previous executions of Jobs by expanding the &quot;More Information&quot; section for the Job.  You can click on any execution in the list to see the full execution state.

The Now Running Page will also list executions that have completed within the last hour.

To view the complete list of executions for a particular job, go to the Job View Page for the Job (click on its name in the Jobs List).  Then click on the &quot;Executions&quot; link to show the list of previous executions:

[[Image:jc-jobview-executions.png|Executions for a Job]]

The browser will be directed to the Events page with a listing of executions for that Job.

[[Image:Jc-jobview-executions-events.png|Execution events for Job]]

=== Killing Jobs ===

Jobs that are currently running can be Killed immediately.

:'''WARNING''': This feature should be used with caution, as it forcibly kills the Java Thread that the Job is running on.  It may result in the CTL Center server becoming flaky.  It is a deprecated feature of Java that is not recommended to be used, so do so only when extremely necessary.

From the [[Events view]] Now Running section, or in the Jobs List view, click on the &quot;Kill Job Now&quot; button for the running Job:

[[Image:jc-kill-job-button.png|Kill Job Now button]]

When prompted &quot;Really kill this job?&quot;  Click the &quot;Yes&quot; button.

[[Image:jc-kill-job-prompt.png|Really kill this job?]]

This feature should be used with caution.

=== Following Running Jobs ===

Once you have started running a Job, you can follow the output of the job in the Execution Follow page.

In the Jobs List View, click on the Execution you want to follow from the &quot;More information&quot; section of a Job.

From the Now Running page, click on the &quot;output &amp;raquo;&quot; link for the running execution.  [[Image:jc-execution-output-link.png|output link]]

You will see the Execution Follow Page:

[[Image:jc-follow-page.png|Follow page]]

There are three &quot;follow&quot; modes which you can use to watch the progress of a Job:

# Tail Output - this is the default mode.  It will update the view with the last 20 lines of output from the Job.  The number of output lines can be changed.  (This is equivalent to a unix &lt;code&gt;tail -f&lt;/code&gt; command.) 
#* [[Image:jc-tail-view-mode.png|300px|||Tail View Mode]] 
# Browse Output - This view groups the output messages into the context in which they were produced, allowing you to get a higher-level view of the various Commands that might be running.  This is useful for viewing Workflow commands, or any commands that dispatch other commands.  Each context can be expanded to show the output it produced, or completely collapsed to hide the textual detail.
#* [[Image:jc-browse-view-mode.png|300px|||Browse View mode]]
# Process View - This view shows a hierarchical representation of the Command and the Workflow or Dispatch commands that it invokes.  It can give a better sense of how the command is being executed in relation to the data Model that governs the [[Model-driven_command_dispatching|command dispatching]] mechanism. 
#* [[Image:jc-process-view-mode.png|300px|||Process View mode]]

=== Downloading Job Output ===

Once a Job has finished executing, the output log can be downloaded from CTL Center.  

From the Jobs List page or the Now Running page, click on the File icon shown next to the completed Job execution:

[[Image:jc-joblist-output-button.png|Download log button]]

From the Execution Follow page for the execution, click on the &quot;Download&quot; link on the right side:

[[Image:jc-followpage-download-output.png|Download output link]]

This file will contain the full text output from the Command execution.

==Using the CLI==
Shell utilities are provided to enable a command line interface to Job control.

===Starting jobs===
The [[ctl-run]] command provides a shell interface to starting a Job in CTL Center. 

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ ctl-run -j apps/web/restart
Job execution started:
[51] restart &lt;http://strongbad:8080/ctlcenter/execution/follow/51&gt;
&lt;/syntaxhighlight&gt;
	
===Seeing what Jobs are running===
The [[ctl-queue]] command lists currently executing jobs.

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ ctl-queue 
Queue: 2 items
[58] workflow: Workflow:(threadcount:1){ [command( scriptfile: /Users/alexh/bin/pushdeploy.sh scriptargs: 30 10 8088)] } &lt;http://strongbad:8080/ctlcenter/execution/follow/58&gt;
[57] workflow: Workflow:(threadcount:1){ [command( scriptfile: /Users/alexh/bin/checkagain.sh scriptargs: 30 10 8081)] } &lt;http://strongbad:8080/ctlcenter/execution/follow/57&gt;
&lt;/syntaxhighlight&gt;

===Killing running jobs===
The &lt;code&gt;ctl-queue&lt;/code&gt; also provides an action to kill running jobs. To kill a running command, use  &lt;code&gt;ctl-queue kill&lt;/code&gt; and specify the execution id.

Here both jobs listed in the above section are killed:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ ctl-queue kill -e 58
ctl-queue kill: success. [58] Job status: killed

$ ctl-queue kill -e 57
ctl-queue kill: success. [57] Job status: killed
&lt;/syntaxhighlight&gt;

{{Guide/navbox}}

[[Category:CTL Center]]
[[Category:Jobs]]</text>
    </revision>
  </page>
  <page>
    <title>Runtime.properties</title>
    <id>1313</id>
    <revision>
      <id>13001</id>
      <timestamp>2010-07-09T15:10:16Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <comment>add blurb about credentials</comment>
      <text xml:space="preserve">The &lt;code&gt;runtime.properties&lt;/code&gt; file is a [[Workbench]] configuration file. Most of the time this file can be left alone, but you may need to change the dav.user and dav.password properties in it if you change the default user's credentials. (See [[Managing users]] for details.)

* Location: $JETTY_HOME/webapps/itnav/WEB-INF/classes
{{stub}}</text>
    </revision>
  </page>
  <page>
    <title>SSH configuration</title>
    <id>1672</id>
    <revision>
      <id>14767</id>
      <timestamp>2010-11-23T01:47:20Z</timestamp>
      <contributor>
        <username>Raj</username>
        <id>113</id>
      </contributor>
      <comment>ssh</comment>
      <text xml:space="preserve">&lt;noinclude&gt;&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Configuration&lt;/categorytree&gt;&lt;/noinclude&gt;

{{SSH/setup/intro}}


&lt;noinclude&gt;
{{Installation/navbox}}
[[Category:Configuration]]
&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>SSH configuration (windows)</title>
    <id>1704</id>
    <redirect />
    <revision>
      <id>11509</id>
      <timestamp>2009-12-15T16:07:04Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>moved [[SSH configuration (windows)]] to [[CopSSH (windows)]]</comment>
      <text xml:space="preserve">#REDIRECT [[CopSSH (windows)]]</text>
    </revision>
  </page>
  <page>
    <title>Sandbox</title>
    <id>2174</id>
    <revision>
      <id>15221</id>
      <timestamp>2011-04-09T21:02:37Z</timestamp>
      <contributor>
        <username>Chuck</username>
        <id>13</id>
      </contributor>
      <comment>Blanked the page</comment>
      <text xml:space="preserve" />
    </revision>
  </page>
  <page>
    <title>Sandbox/navbox</title>
    <id>1356</id>
    <revision>
      <id>8316</id>
      <timestamp>2009-09-26T00:31:25Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">* from http://en.wikipedia.org/wiki/Template:Navbox#No_image
** Notice the lack of the hide/show link functionality

{{Navbox
| name  = Navbox/doc
| title = [[Multimedia Super Corridor|MSC Malaysia]]
| group1 = Centre
| list1  = [[Cyberjaya]]

| group2 = Area
| list2  = [[Klang Valley]]

| group3 = Major landmarks
| list3  = [[Petronas Twin Towers]]{{·}} [[Kuala Lumpur Tower]]{{·}}
  [[Kuala Lumpur Sentral]]{{·}} [[Technology Park Malaysia]]{{·}}
  [[Putrajaya]]{{·}} [[Cyberjaya]]{{·}}
  [[Kuala Lumpur International Airport]]

| group4 = Infrastructure
| list4  = [[Express Rail Link]]{{·}} [[KL-KLIA Dedicated Expressway]]

| group5 = Prime applications
| list5  = [[EGovernment]]{{·}} [[MyKad]]
}}</text>
    </revision>
  </page>
  <page>
    <title>Screencast: Configuring a Service with your start and stop scripts</title>
    <id>416</id>
    <revision>
      <id>14164</id>
      <timestamp>2010-11-10T16:02:18Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;ctl-depot&quot; to &quot;ctl-project&quot;</comment>
      <text xml:space="preserve">=Overview=

: ''See the [http://open.controltier.com/media/tutorial-Service-object-scripts.swf screencast]''

This page accompanies the screencast showing how to configure startup and shutdown control scripts for an instance of the [[Service]] type.

=Hooking in your scripts=

You can attach your scripts to a Service by registering them as a setting of your Service resource. The XML file below describes a Service named &quot;tomcat1&quot; and four scripts (hypothetically) residing in $HOME/bin.

Each script is registered as a setting that exports an attribute used by the Service commands to look up the location of your script.
&lt;pre&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE project PUBLIC &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; 
    &quot;project.dtd&quot;&gt;
&lt;project&gt;
  &lt;!--
      **
      ** Defines path to the Service control scripts metadata
      **
  --&gt;
  &lt;setting type=&quot;ServiceStartScript&quot; name=&quot;tomcat1&quot; 
           description=&quot;The script used by startService&quot; 
           settingValue=&quot;${env.HOME}/bin/tomcat-start.sh&quot; settingType=&quot;script&quot;/&gt;
  &lt;setting type=&quot;ServiceStopScript&quot; name=&quot;tomcat1&quot; 
           description=&quot;The script used by stopService&quot; 
           settingValue=&quot;${env.HOME}/bin/tomcat-stop.sh&quot; settingType=&quot;script&quot;/&gt;
  &lt;setting type=&quot;ServiceIsUpScript&quot; name=&quot;tomcat1&quot; 
           description=&quot;The script used by assertServicesIsUp&quot; 
           settingValue=&quot;${env.HOME}/bin/tomcat-isup.sh&quot; settingType=&quot;script&quot;/&gt;
  &lt;setting type=&quot;ServiceIsDownScript&quot; name=&quot;tomcat1&quot; 
           description=&quot;The script used by assertServicesIsDown&quot; 
           settingValue=&quot;${env.HOME}/bin/tomcat-isdown.sh&quot; settingType=&quot;script&quot;/&gt;
  &lt;!--
      **
      ** Defines the Service metadata
      **
  --&gt;
  &lt;deployment 
      type=&quot;Service&quot;
      name=&quot;tomcat1&quot; 
      description=&quot;The Tomcat deployment.&quot; 
      installRoot=&quot;/demo/apache-tomcat-5.5.26&quot; 
      basedir=&quot;/demo/apache-tomcat-5.5.26&quot;&gt;

      &lt;!-- 
        **
        ** References the scripts to be run by the Service lifecycle commands 
	      **
	    --&gt;
     &lt;resources&gt;
      &lt;resource name=&quot;tomcat1&quot; type=&quot;ServiceStopScript&quot; /&gt;
      &lt;resource name=&quot;tomcat1&quot; type=&quot;ServiceStartScript&quot; /&gt;
      &lt;resource name=&quot;tomcat1&quot; type=&quot;ServiceIsDownScript&quot; /&gt;
      &lt;resource name=&quot;tomcat1&quot; type=&quot;ServiceIsUpScript&quot; /&gt;
     &lt;/resources&gt;
  &lt;/deployment&gt;

&lt;/project&gt;
&lt;/pre&gt;

The bold text represents your procedure defined insinde a script. The italicized text shows a convention that uses the Service's name (&quot;tomcat1&quot;) as a the setting object's name. This acts as a visual key to help show the association between them.

The graphic above describes the mapping of Service resource to the settings that represent the four scripts.

=Load Resources=

The resource definitions can be loaded via ProjectBuilder using the load-resources command:
&lt;pre&gt;
ctl -p project -m ProjectBuilder -c load-resources -- -filename /path/to/metadata.xml
&lt;/pre&gt;

With the resources registered to the repository, the last step is to prepare CTL via ctl-project.
&lt;pre&gt;
ctl-exec -- ctl-project -a install
&lt;/pre&gt;

=Execute the service control commands=
==CLI execution==

To run a command from your utility you'll use the following form:
&lt;pre&gt;
ctl -p project -t Service -r tomcat1 -c command
&lt;/pre&gt;
To run the &quot;assertServiceIsUp&quot; command for the &quot;tomcat1&quot; Tomcat server on the local host run:
&lt;pre&gt;
ctl -p demo -t Service -r tomcat1 -c assertServiceIsUp
&lt;/pre&gt;

...or to run the &quot;assertServiceIsUp&quot; command on nodes tagged &quot;tomcats&quot; in the project named &quot;default&quot; run:

&lt;pre&gt;
ctl -I tags=tomcats -p demo -t Service -r tomcat1 -c assertServiceIsUp
&lt;/pre&gt;

You might recall that assertServiceIsUp command is actually used by higher level workflow commands. You can call assertServiceIsUp via the Status command like so:

&lt;pre&gt;
ctl -p demo -t Service -r tomcat1 -c Status
&lt;/pre&gt;

{{Manual/navbox}}

[[Category:Service]]
[[Category:Screencasts]]</text>
    </revision>
  </page>
  <page>
    <title>Screencasts</title>
    <id>411</id>
    <revision>
      <id>14696</id>
      <timestamp>2010-11-19T08:14:40Z</timestamp>
      <contributor>
        <username>Damonedwards</username>
        <id>7</id>
      </contributor>
      <comment>added notice that screencasts were made with 3.4</comment>
      <text xml:space="preserve">&lt;noinclude&gt;&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Screencasts&lt;/categorytree&gt;&lt;/noinclude&gt;

{{Caution|The screencasts were made using older versions of ControlTier (3.4 or prior). Many of the concepts are still applicable to 3.6 but some may not be.}}


'''Here are of the ControlTier Wiki pages that have associated Screencasts:'''

* [[ControlTier|ControlTier introduction]]
** [http://www.screencast.com/t/JMHfmQsVL7m Introducing Jobcenter, ctl, and the command dispatcher] ([[File:Why_ctier_slides1.pdf‎|slides]])
** [http://www.screencast.com/t/EcfQ1268Mh Scripting with ControlTier] ([[File:Why ctier slides2.pdf|slides]])
* [[Running ad hoc commands]]: ctl-exec introduction
** [http://www.screencast.com/t/OI1fWpXFq ctl-exec basics]''
* [[Examples]]
** [[Setting up a Package for import]]
** [[Deploying Packages to a Service]] 
** Define a Service
*** [[Screencast: Configuring a Service with your start and stop scripts|Use custom control scripts with a generic Service Object]] 
*** [[Service Subtype Control Scripts|Use custom control scripts with a Service sub-type]] 
* [[Dukes Bank J2EE examples|Sample J2EE deployment automation (Duke's Bank)]]
**[[Dukes Bank Provisioning JBoss instances|Automated provisioning of JBoss instances]] 
**[[Dukes Bank Checkout and Build|Automated checkout, build, and staging of application packages]] 
**[[Dukes Bank Provisioning JBoss applications|Automated updating of applications]]
**[[Dukes Bank Build and Provisioning JBoss applications|Automated end-to-end build and deployment]]
**[[Dukes Bank Migrating a Release from Development to Staging|Migrating a Release from Development to Staging]] 
**[[Dukes Bank and Self Service|Using Jobcenter as a management console]] 
* [[Workflow Development Guide]]
** [[First CTL module]] 
** [[Define a command]]

&lt;noinclude&gt;
{{Manual/navbox}}
[[Category:Screencasts]]
&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Script-driven Use Guide</title>
    <id>1198</id>
    <redirect />
    <revision>
      <id>6827</id>
      <timestamp>2009-07-10T14:01:53Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>[[Script-driven Use Guide]] moved to [[Script-driven approach]]</comment>
      <text xml:space="preserve">#REDIRECT [[Script-driven approach]]</text>
    </revision>
  </page>
  <page>
    <title>Script-driven approach</title>
    <id>1027</id>
    <revision>
      <id>16375</id>
      <timestamp>2012-02-20T10:05:24Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <comment>Reverted SPAM bot edits</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Methodology&lt;/categorytree&gt;
{{script-driven approach}} This is in contrast to the [[How_to_use_ControlTier#Model-driven_approach|model-driven approach]].

The CTL command and control dispatching framework supports a procedural scripting model that lets you automate your management procedures in a distributed environment using a familiar script-driven approach. The [[CTL_architecture#Node_Dispatch|node dispatch]] feature in the ControlTier command dispatcher also lets you execute your scripts and commands across sets of [[Use_node_filtering_options|logically grouped nodes]]. Via the command dispatcher, you can also [[Running ctl|execute commands]] pre-defined in CTL modules. 

You can write scripts that take advantage of the command dispatcher and modules in a number of ways. Your scripts can leverage various aspects of the ControlTier infrastructure such as the WebDAV, resource model data, job management and reporting. Your scripts can also build on a set of [[Base_Type_Guide|base]] and [[Utility_Type_Guide |utilities]] modules and use them as a tool kit  to help reduce complexity from your scripts, save implementation time and let you focus on the core management logic.

The [[Scripters cookbook]] contains a wide range of solutions for users following the script-driven approach.

==Execute Commands==
===Scripting with ctl-exec===

The [[ctl-exec]] command provides a convenient method to execute a locally defined script across a set of hosts. In this mode, &lt;code&gt;ctl-exec&lt;/code&gt; first copies the script to the remote host and then executes it. The script can be defined in a file or read from [http://en.wikipedia.org/wiki/Stdin#Standard_input_.28stdin.29 standard input]. The &lt;code&gt;ctl-exec&lt;/code&gt; command supports several other useful features for executing commands across a set of hosts including: filtering logic, parallelism, and error handling.

Rather than require you to list nodes explicitly, the &lt;code&gt;ctl-exec&lt;/code&gt; command lets you dispatch to a set of nodes through filter-based lookup options. Each node registered to a ControlTier project includes a standard set of [[nodes.properties|node metadata]] that you can use in your filter specification. Node ''tags'' are useful to create a symbolic name for a group of nodes that share a characteristic, like a particular application they might all have resident or a role they play within the infrastructure.

You can run any script from the ControlTier server host across a set of tagged nodes using &lt;code&gt;ctl-exec&lt;/code&gt; with this usage format:

&lt;code&gt;ctl-exec -p &lt;/code&gt;''project'' &lt;code&gt; -I tags=&lt;/code&gt;''tagname'' &lt;code&gt; -s &lt;/code&gt;''script''

Or you can have &lt;code&gt;ctl-exec&lt;/code&gt; read the script code from stdin. Here's an example using the Unix [http://en.wikipedia.org/wiki/Heredoc here doc] form:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl-exec -p project -I tags=tagname -S &lt;&lt;EOS
script statement 1;
script statement 2;
EOS	
&lt;/syntaxhighlight&gt;	

Letting &lt;code&gt;ctl-exec&lt;/code&gt; do the dispatching for you, reduces complexity from the script writing. With &lt;code&gt;ctl-exec&lt;/code&gt; as a front end, you avoid writing iteration and remote command dispatch logic inside your scripts (see [[Replace your SSH loop script]]). This lets you write scripts from the point of view of a single target node and thus they become easier to test and trouble shoot. 

The diagram below illustrates &lt;code&gt;ctl-exec&lt;/code&gt; executing a script file called &quot;simpleTomcat.sh&quot; across nodes that have been tagged &quot;simpleTomcat&quot;:

[[Image:example-ctl-exec-scripts-screenshot.png]]

The specific ctl-exec usage to support the scenario shown in the diagram above is shown here:

&lt;code&gt;ctl-exec -p demo -I tags=simpleTomcat -s simpleTomcat.sh&lt;/code&gt;



==Putting it all together==

The preceding sections described a number of features that, individually, might be useful to a script writer. Their usefulness increase when you combine them. Of course, your scripts drive the tasks that make up your process and so there is no hard and fast rule about the &quot;best&quot; way to utilize the ControlTier framework. Instead, you can consider a number of design patterns that you can adapt to your needs. Here are a few general patterns:
* Use tags to describe the roles your machines play and define logical groups
* Extract the SSH loops from your scripts and use [[ctl-exec]]
* Refactor scripts that drive multi-step processes into smaller building block scripts. 
* Structure your large multi-step scripts so that any individual step can be called directly via command line options. 
* Expose your scripts to others by exposing them via [[Jobcenter]]

The [[Scripted appserver war deployment example]] walks through many of these patterns over a series of iterations and can give you an idea how you might transform your scripts and approach.

{{Guide/navbox}}
[[Category:Methodology]]</text>
    </revision>
  </page>
  <page>
    <title>Script-driven automation</title>
    <id>1058</id>
    <redirect />
    <revision>
      <id>6829</id>
      <timestamp>2009-07-10T14:01:55Z</timestamp>
      <contributor>
        <username>Redirect fixer</username>
        <id>9</id>
      </contributor>
      <comment>[[Script-driven Use Guide]] has been moved, it is now a redirect to [[Script-driven approach]]</comment>
      <text xml:space="preserve">#REDIRECT [[Script-driven approach]]</text>
    </revision>
  </page>
  <page>
    <title>Script-driven examples</title>
    <id>1112</id>
    <revision>
      <id>14253</id>
      <timestamp>2010-11-10T21:52:06Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">[[Image:Crystal_Clear_app_display.png|right|150]]

''These docs are only compatible with [[ControlTier 3.4.3]] or later''

These examples show [[How_to_use_ControlTier#Script-driven_solutions|script-driven solutions]]. {{script-driven approach}}
The easiest way to start using ControlTier is to walk through an example. Click a link below to learn how to get up and running with that example. Most of these examples take about 10 minutes and are a quick way to see ControlTier in action. 

See the [[Scripters cookbook]] for a wide range of solutions useful for those following the script-driven approach.

==Running the Examples==

Be sure you have completed all the instructions in [[Installation|Installing ControlTier]] before you attempt to run the example.

Please read: [[Using the Examples]]

==Available Examples==

{| cellpadding=&quot;3&quot; cellspacing=&quot;1&quot; border=&quot;1&quot; style=&quot;border: 1px solid #aaa; border-collapse:collapse;&quot;
|-
! Example !! Operating System !! Description
|-
| [[Replace your SSH loop script]]
| Linux/Unix
| Shows how to avoid combining looping and ssh calls in your script by using [[ctl-exec]] 
|-
| [[Scripted_appserver_war_deployment_example|Scripted appserver and war deployment]]
| Linux/Unix
| This example shows how the ControlTier framework can provide a useful set of features that can make the scripting you create for application deployment simpler, more flexible, and ultimately more accessible.
|-
|}

== Downloading the Example code ==

* ''Since 3.4.3'' all of the Example code is available in the CTIER_ROOT directory in a directory named &quot;examples&quot;.

However, you can also download the example code using Subversion:

&lt;pre&gt;
 cd $CTIER_ROOT
 svn export http://controltier.svn.sourceforge.net/svnroot/controltier/branches/controltier-3-4-support/examples
&lt;/pre&gt;

== Troubleshooting ==

If you have problems with the examples, you should look at the [[Troubleshooting the Examples]] document to see if it addresses your problems.

Otherwise, please feel free to [[Community|Contact Us]] via [[IRC Channel|IRC]], or email to the [mailto:controltier@googlegroup.com Mailing List].

{{Guide/navbox}}

[[Category:Scripting Examples]]</text>
    </revision>
  </page>
  <page>
    <title>Script-exec</title>
    <id>1708</id>
    <redirect />
    <revision>
      <id>11559</id>
      <timestamp>2009-12-15T17:47:53Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[Script-exec Task Reference]]</comment>
      <text xml:space="preserve">#REDIRECT [[Script-exec Task Reference]]</text>
    </revision>
  </page>
  <page>
    <title>Script-exec Task Reference</title>
    <id>1305</id>
    <revision>
      <id>13479</id>
      <timestamp>2010-11-10T01:41:49Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;entity.&quot; to &quot;resource.&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Tasks&lt;/categorytree&gt;
This task allows the user to execute a script  on a machine. The script can be specified as a file or an expression. The script-exec task takes an optional ''executable'' attribute used to execute the script but defaults based on the file name extension and os-family type (ie, unix or windows). This task is meant as a convenience to executing scripts of different kinds supporting the typical idioms seen in CTL use cases.  For more exact control see [[shell-exec Task Reference|shell-exec]].

{{version|3.4.7}}

==Parameters==

===Attributes===

These attributes are unique to shell-exec:

&lt;table border=&quot;1&quot;&gt;
&lt;tr&gt;&lt;th&gt;attribute&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;th&gt;required&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;executable&lt;/td&gt;&lt;td&gt;the program to execute. If unspecified, executable will be set to &quot;/bin/sh&quot; on Unix and &quot;cmd.exe&quot; on Windows hosts. See also ''script'' attribute for more information on defaulting based on file extension&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;script&lt;/td&gt;&lt;td&gt;The script file or script expression. If a file path is specified and it exists, then it is executed using the executable. Otherwise it is interpreted as a script expression. There are three script file extensions supporting the defaulting of the executable: &quot;.sh&quot; for bourne shell, &quot;.bat&quot; for Windows cmd.exe and &quot;.xml&quot; for Ant. If the URL uses [[Dav://_prefix|dav://]] as a prefix the script is interpreted as a WebDAV URL.&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;exportproperties&lt;/td&gt;&lt;td&gt;Regular expression for properties to export to called script. For shell scripts, the properties are mapped to environment variables. Default &quot;^$&quot; (none).&lt;/td&gt;&lt;td&gt;No &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;failonerror&lt;/td&gt;&lt;td&gt;Fail if an script error occurs. Default &quot;true&quot;&lt;/td&gt;&lt;td&gt;No &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;spawn&lt;/td&gt;&lt;td&gt;Spawn the process. If spawn is set true, the ''failonerror'' attribute will be reset to false. Default &quot;false&quot;&lt;/td&gt;&lt;td&gt;No &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;ignoremalformed&lt;/td&gt;&lt;td&gt;Ignore values for ''script'' and ''executable'' that appear to be unset properties. Default &quot;false&quot;&lt;/td&gt;&lt;td&gt;No &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

==Examples==
A hello world example script. Executes &quot;echo hello&quot; defaulting to the &quot;/bin/sh&quot; for the executable.
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
   &lt;script-exec script=&quot;echo hello&quot; /&gt;
&lt;/syntaxhighlight&gt;

''output''

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;hello&lt;/syntaxhighlight&gt;

Run a script file named &quot;/tmp/hello.sh&quot;. The contents of the script file are &quot;echo hello&quot;. The executable is defaulted to &quot;/bin/sh&quot; because the script file ends with &quot;.sh&quot;.
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
   &lt;script-exec scriptfile=&quot;/tmp/hello.sh&quot;/&gt;
&lt;/syntaxhighlight&gt;

''output''

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;hello&lt;/syntaxhighlight&gt;

Ant build files can be executed as a scriptfile. The ''executable'' option will be defaulted to use Ant. 

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;project name=&quot;hello&quot; default=&quot;all&quot;&gt;
   &lt;target name=&quot;all&quot;&gt;
     &lt;echo&gt;hello&lt;/echo&gt;
   &lt;/target&gt;
&lt;/project&gt;
&lt;/syntaxhighlight&gt;

Execute the hello.xml Ant build file. 

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
   &lt;script-exec scriptfile=&quot;/tmp/hello.xml&quot;/&gt;
&lt;/syntaxhighlight&gt;

''output''

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;hello&lt;/syntaxhighlight&gt;


If ''exportproperties'' attribute is set then those properties are exported to the executed script. For .sh and .bat scripts the properties are mapped to environment variables. Each mapped property will be exported as a variable whose name is capitalized and any dots in the name are replaced with underscores (eg, resource.a &amp;rarr; RESOURCE_A). For example:
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
     &lt;!-- set some properties --&gt;
    &lt;property name=&quot;resource.a&quot; value=&quot;A&quot;/&gt;
    &lt;property name=&quot;resource.b&quot; value=&quot;B&quot;/&gt;
    &lt;property name=&quot;resource.c&quot; value=&quot;C&quot;/&gt;
    &lt;property name=&quot;opts.foo&quot; value=&quot;foo&quot;/&gt;
    &lt;property name=&quot;opts.bar&quot; value=&quot;bar&quot;/&gt;

    &lt;!-- Run a shell printing out the environment variables that have been generated --&gt;

    &lt;script-exec  exportproperties=&quot;^(?:entity|opts).*&quot;&gt;env|egrep 'ENTITY|OPTS'&lt;/shell-exec&gt;
&lt;/syntaxhighlight&gt;

''output''
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
RESOURCE_A=A
RESOURCE_B=A
RESOURCE_C=C
OPTS_FOO=foo
OPTS_BAR=bar
&lt;/syntaxhighlight&gt;

==See also==
* [[shell-exec Task Reference]]

&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Command Dispatcher Ant Tasks]]</text>
    </revision>
  </page>
  <page>
    <title>Scripted appserver war deployment example</title>
    <id>2129</id>
    <redirect />
    <revision>
      <id>15057</id>
      <timestamp>2010-12-13T02:13:16Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>moved [[Scripted appserver war deployment example]] to [[Automate deployment with ctl-exec]]</comment>
      <text xml:space="preserve">#REDIRECT [[Automate deployment with ctl-exec]]</text>
    </revision>
  </page>
  <page>
    <title>Scripted examples</title>
    <id>1191</id>
    <redirect />
    <revision>
      <id>6742</id>
      <timestamp>2009-07-08T17:06:06Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>[[Scripted examples]] moved to [[Script-driven examples]]</comment>
      <text xml:space="preserve">#REDIRECT [[Script-driven examples]]</text>
    </revision>
  </page>
  <page>
    <title>Scripters cookbook</title>
    <id>1196</id>
    <revision>
      <id>14451</id>
      <timestamp>2010-11-11T19:08:58Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">This page is under development but the intention is to offer a set of short useful examples that cover common scripting solutions.
The cookbook would be useful to those using the [[Script-driven approach]]. The first goal is to outline the kinds of tips that would be useful and then to flesh each of them out as a separate wiki page all linked (possibly transcluded) into this page.

==Strategies==

===Use tags to define logical node groups===
Use tags to describe the roles your machines play to define logical groups. This lets you target command execution by functional group rather than having to specify individual hosts. Both &lt;code&gt;[[CTL-EXEC Command Reference|ctl-exec]]&lt;/code&gt; and &lt;code&gt;[[CTL Command Reference|ctl]]&lt;/code&gt; shell commands as well as Jobcenter allow commands to be executed against tagged nodes.

Here's a ctl-exec command example that executes a unix command pipeline.

First you can list what nodes are tagged &quot;simpleTomcat&quot;

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ ctl-exec -I tags=simpleTomcat
centos2 ubuntu
&lt;/syntaxhighlight&gt;

The &quot;-S&quot; flag causes ctl-exec to dispatch an inline script read from STDIN. 
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ ctl-exec -I tags=simpleTomcat -S
ps auxww|grep http
^D
&lt;/syntaxhighlight&gt;

You can add and remove tags anytime using ProjectBuilder's add-tag and remove-tag commands.
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ ctl -p demo -m ProjectBuilder -c add-tag -- -type Node -name centos2 -tag test
$ ctl-exec -v -I centos2
centos2:
  hostname: centos2
  os-arch: i386
  os-family: unix
  os-name: Linux
  os-version: 2.6.9-34.EL
  tags: [simpleTomcat, test]
&lt;/syntaxhighlight&gt;

Use remove-tag  to remove the tag 

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ ctl -p demo -m ProjectBuilder -c remove-tag -- -type Node -name centos2 -tag test
$ ctl-exec -v -I centos2
centos2:
  hostname: centos2
  os-arch: i386
  os-family: unix
  os-name: Linux
  os-version: 2.6.9-34.EL
  tags: [simpleTomcat]
&lt;/syntaxhighlight&gt;

* See [[Bulk Node registration]] for information on using [[project.xml]] to register multiple nodes from a single definition file.
* See [[modelutil]]#add-tag for a command line tool.

===Eliminate SSH loops from your scripts===
Here's a typical script executing commands across a set of nodes:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
for node in $SOMENODES; do
  ssh $node command1
  [ $? != 0 ] do error-mgt statement
  ...
  ssh $node another command
  [ $? != 0 ] do error-mgt statement
  ... and so on
done
&lt;/syntaxhighlight&gt;

A few down sides to this style of scripting include:
# Remote command execution (a form of dispatching) and individual deployment tasks are intermingled
# Due to #1, this approach is harder to debug because you can't run the procedure locally on just one node
# Evaluating conditions is tricky when using SSH. Relies on non-zero SSH result code processing
# Must be conscious of quoting when executing multipart command strings over SSH (eg, when having to do things in relative directories)

An alternative would be to eliminate the looping and ssh calls from that script and use ctl-exec.

Here's the script with the &lt;code&gt;for&lt;/code&gt; loop and ssh calls removed:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
command1
[ $? != 0 ] do error-mgt statement
  ...
another command
[ $? != 0 ] do error-mgt statement
  ... and so on
&lt;/syntaxhighlight&gt;

Rather than manage explicit lists of nodes in a shell variable, use node tags to loggically group the hosts in &quot;$SOMENODES&quot;. 
Then call the script via ctl-exec :

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl-exec -I tags=SOMENODES -s scriptfile
&lt;/syntaxhighlight&gt;

Benefits to this approach include:
* Separate the SSH logic from the functional steps by introducing ctl-exec
* Make all the steps work more atomically
* Enable easier debugging

===Refactor scripts into reusable building blocks===

Often times a script implements a cycle of steps. The implicit design of the script is done in two layers
# task specific steps
# coordination layer that calls the task specific steps that comprise the procedure

In pseudo code the script structure might look like this
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
# script: do_procedure

# do step1 stuff
step1_part1
step1_part2
...
step1_partN

# do step2 stuff
step2_part1
step2_part2
...
step2_partN

...and so on
&lt;/syntaxhighlight&gt;

If such a script becomes a normal part of operation, the script would be easier maintained if it was decomposed into a set of scripts. 
Each logical step in the cycle would become its own script (eg, scripts named: &quot;step1&quot;, &quot;step2&quot;, &quot;stepN&quot;) while the original script would call out to these external scripts. Here's the pseudo code refactored.
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
# script: do_cycle

# do step1 stuff
call script step1

# do step2 stuff
call script step2
&lt;/syntaxhighlight&gt;

The task specific steps would be isolated in their own scripts. Eg:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
# script: step1
step1_part1
step1_part2
...
step1_partN
&lt;/syntaxhighlight&gt;

This style of design is preferable because it facilitates better reuse, flexibility and testing and supports [[#Model life cycles|modeling life cycles]].

This design does incur the requirement for distributing multiple script files rather than just the one. To offset this, there are a couple of ControlTier facilities useful for distributing the scripts:
# Stage the scripts to the WebDAV repository. They can be executed  via shellutil: [[Scripters_cookbook#Execute_a_script_file_stored_in_the_WebDAV|Execute a script file stored in the WebDAV]]
# Deploy the scripts inside a utility module: See [[First CTL module]].

===Use WebDAV for pull-based file distribution===
A common solution for file distribution is to copy the files to a central server and then distribute them out by remotely copying them to the target hosts. For example a preparatory step might stage the files to repository through remote copy:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
# file: stage.sh
scp file1 server:/path/to/staging/dir/file1
scp file2 server:/path/to/staging/dir/file2
...
scp fileN server:/path/to/staging/dir/fileN
&lt;/syntaxhighlight&gt;

A second script then distributes the files to the target hosts. 
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
FILES=&quot;file1 file2 ... fileN&quot;
NODES=&quot;host1 host2 ... hostN&quot;
for node in $NODES
do
  for file in $FILES
  do
     scp /path/to/staging/dir/$file $node:/path/to/target/dir/$file
  done
done
&lt;/syntaxhighlight&gt;
This example uses the SCP command but RSYNC is a popular choice for remote file copying, too.

There are a few of scaling disadvantages to the push-model of file distribution in a distributed environment. 
* Puts all processing on the server making it a single bottleneck
* In order to support a fan out, need to introduce intermediate staging servers and custom logic to relay file copies 
* If a remote host is down during the push and comes up later the client will not pull the file on its own

The ControlTier server includes a WebDAV repository that facilitates a pull-based file distribution model. There are a number of advantages to using WebDAV as a repository.
# Openness of HTTP. Most networks allow HTTP access across subnets.
# Offers the PUT method allowing remote to storage of files on the repository. 
# Any web client can retrieve files from the WebDAV. Uses normal HTTP &quot;GET&quot; method.
# Access to the WebDAV can be scaled up using normal web scaling practices including proxies and caching servers.
# Files in the WebDAV are referenced as URLs

Here's an example script that uses [[davutil]]#[http://controltier.sourceforge.net/docs/latest/core/reference/user/davutil/commands/put.html put] to store files onto the repository. (Note: the  [[Scripters_cookbook#dav:.2F.2F_prefix|dav://]] prefix is a shorthand.)
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
# file: stage.sh
ctl -m davutil -c put -- -file file1 -url dav://file1
ctl -m davutil -c put -- -file file2 -url dav://file2
...
ctl -m davutil -c put -- -file fileN -url dav://fileN
&lt;/syntaxhighlight&gt;

A second script then distributes the files to the target hosts. Here a ctl-exec script is used to call the [[davutil]]#[http://controltier.sourceforge.net/docs/latest/core/reference/user/davutil/commands/copy.html copy] command for all the files:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl-exec -I tags=targets --stdin &lt;&lt;EOS
&gt; FILES=&quot;file1 file2 ... fileN&quot;
&gt; for file in $FILES
&gt; do
&gt;   ctl -m davutil -c copy -- -dest $file -src dav://$file
&gt; done
EOS
&lt;/syntaxhighlight&gt;

===Script with utility modules===
When scripting procedures for deployment management one often faces similar scenarios requiring testing a condition, manipulating files and their content, executing commands and other scripts, etc. These individual tasks are often just a means to an end and are part of the drudgery along the way to implementing the actual business logic purpose for the procedure at hand.

For example, here's a common situation faced during for startup of a long running process.
# A startup command or script is invoked to bring up the long running process
# The startup time is not immediate since it takes time for the process to boot up the application and acquire system resources
# To check successful startup, it therefore requires some wait time before the status check should be performed
# Need to implement retry logic in case startup is longer than anticipated

The script code below shows the startup of Tomcat along with the status check with that logic in mind:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
# run the startup script
$CATALINA_HOME/bin/startup.sh || exit $?; # exit because startup script failed for some reason
#
# give 10 seconds time to start up the webapp's listening process on port 28080
sleep 10;
#
# Check if it binds to the 28080 port 
netstat -an|grep 28080|grep -q LISTEN 
if [ $? = 0 ] 
then
    echo &quot;Tomcat listening (port=28080). Startup successful&quot;
else 
     sleep 10; # give it another 10 seconds
     netstat -an|grep 28080|grep -q LISTEN 
     if [ $? = 0 ] 
     then
        echo &quot;Tomcat listening (port=28080). Startup successful&quot;
     else 
         echo &quot;Waited 20 seconds and the server did not listen on 28080&quot; ; exit 1 ; # exit with an error. time exceeded
     fi
fi
&lt;/syntaxhighlight&gt;

There are a few issues to point out in this scripting approach:
# Verbose logic to check and then recheck the port listening status. Could have also implemented a loop that checked every one second but that would be verbose, too.
# A more rigorous check to for the listening process would be to connect to the port and see if the webapp actually responds.
# Have to wait full wait period to find out if check should be retried again. 

This example is representative of the myriad conditions the deployment management scripter faces. A preferable solution would be to implement these kinds of solutions in a utility module that can be shared by all scripts. The utility modules act like a tool kit your scripts build on letting you focus on the main logic of the procedure at hand. The dirty work can be isolated in the utilities.

Here's the same scenario but using the [[netutil]] &lt;code&gt;[http://controltier.sourceforge.net/docs/latest/core/reference/user/netutil/commands/listening.html listening]&lt;/code&gt; command:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$CATALINA_HOME/bin/startup.sh || exit $?; # startup script failed for some reason
# give 20 seconds time to start up the webapp's listening process on port 28080 but check every half second
ctl -m netutil -c listening -- -port 28080 -checkevery  500 -maxwait  20000 -maxwaitunit  millisecond
&lt;/syntaxhighlight&gt;

The netutil &lt;code&gt;listening&lt;/code&gt; command checks every half second up to 20 seconds. That means if the webapp begins to respond to the 28080 port in 1 second the check will complete in that much time.  The script became much less verbose since that part of the code is avoided and taken care of by the utility command. Utility modules are beneficial since they provide a standard scripting API to common solutions. 

ControlTier includes a number of [[Utility Type Guide|utility types]] but you can create your own, too.

===Model life cycles===
Often times a script implements a cycle of steps. The implicit design of the script is done in two layers
# task specific steps
# coordination logic that calls the task specific steps in the order that reflects the normal cycle

In pseudo code the script structure might look like this
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
# script: do_cycle

# do step1 stuff
step1_part1
step1_part2
...
step1_partN

# do step2 stuff
step2_part1
step2_part2
...
step2_partN

...and so on
&lt;/syntaxhighlight&gt;

If such a script becomes a normal part of operation, the script would be more useful if the cycle and the individual steps were explicitly defined.  Here's the pseudo code refactored.
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
# script: do_cycle &lt;action&gt;

Step1() {
# do step1 stuff
step1_part1
step1_part2
...
step1_partN
}

Step2() {
# do step2 stuff
step2_part1
step2_part2
...
step2_partN
}

Cycle() {
  Step1;
  Step2;
}

# Do the user specified action
case $1 in
   Step1) Step1;
    ;;
   Step2) Step2;
    ;;
   Cycle) Cycle;
    ;;
esac
&lt;/syntaxhighlight&gt;

===Exiting the script===
{{Scripting/exit code}}

===Define a Job for your script===
{{main|Creating jobs}}

You can allow others to run your script by defining it as a job in [[Jobcenter]]. You can define a job to call a script defined in the job itself or refer to a script that you maintain on the server. 

[[Image:Jc-created-job.png]]

You can define the job graphically via the Jobcenter UI or you can define the job using an XML file and upload it to Jobcenter.

===Maintain script files in an SCM===
Any script used to perform management procedures in the operational environment should be stored in a source code repository. This practice is beneficial for a number of reasons including, auditing, change management, collaboration, etc.

Scripts can be checked out and staged to a distribution server for later use in the distributed environment.

===Stage script files in the WebDAV===
Scripts don't always start off with the intention of becoming implementations to perform routine procedures. Sometimes they begin as a short term time saver to avoid manual repetition. Many of these scripts must be distributed to remote nodes where they need to run. Due to the uncertain permanent nature of these scripts they are often distributed on an ad-hoc basis using commands like SCP or RSYNC.
Over time it is even difficult to know what copy is the authoritative one. Of course, scripts should be versioned in a source code repository.

Once scripts do become part of the operation, it is best to treat them like any other kind of release artifact and store them in an operational repository. The WebDAV is a suitable and convenient facility to stage and distribute script files. You can create an structure in the WebDAV, creating a directory namespace to organize the scripts by their role.

Here's an example usage of the [[davutil]]#[http://controltier.sourceforge.net/docs/latest/core/reference/user/davutil/commands/put.html put] that uploads a directory of scripts into the WebDAV repository:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -z -p demo -m davutil -c put --\
   -file /home/demo/simpleTomcat/scripts \
    -url dav://simpleTomcat/scripts
&lt;/syntaxhighlight&gt;

===Create a utility type to formalize routine scripted procedures===

Routine scripted procedures can be formalized into a set of defined commands in a utility type. Executing scripts inside a type has several benefits:
* User interface: Defined commands have a standard syntax. This avoids teaching users script-specific usage rules
* Programming interface: All your scripts are callable using the CTL dispatcher
* Distribution: Defined commands are packaged into a module Jar file and distributed using CTL administrative tools

Create a utility type by sub typing [[Managed-Entity]]. A sub type can be defined using either [[ProjectBuilder]] or the [[Graphical type editor]].

Imagine a directory named &quot;scripts&quot; containing several bourne shell scripts:
&lt;pre&gt;
scripts
|-- a.sh
|-- b.sh
`-- c.sh
&lt;/pre&gt;

Using [[ProjectBuilder]]#[http://controltier.sourceforge.net/docs/latest/core/reference/user/ProjectBuilder/commands/create-type.html create-type]  a new utility type named &quot;myapputil&quot; is created with three commands defined, one for each of the scripts:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m ProjectBuilder  -c create-type --\
      -supertype Managed-Entity -type myapputil -initialize -scriptdir /path/to/scripts
&lt;/syntaxhighlight&gt;

The next step is to use ProjectBuilder#[http://controltier.sourceforge.net/docs/latest/core/reference/user/ProjectBuilder/commands/build-type.html build-type] to create the module:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl  -m ProjectBuilder  -c build-type --\
      -type myapputil -upload -deploy
&lt;/syntaxhighlight&gt;

Each script in &lt;code&gt;/path/to/scripts&lt;/code&gt; will be used to create a new command in the module with the same name as the script.

List the commands in the now deployed myapputil:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m myapputil
&lt;/syntaxhighlight&gt;

==Files==
Most application management processes involve interacting with files. This section describes a number of common place scenarios a scripter is likely to face. 

===Check if a file exists===

In unix shell typically you check the existence of a file using the test operator (Windows does not have a built-in function):

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
if [ -f file ] 
then   
   echo true
else
   echo false 
fi
&lt;/syntaxhighlight&gt;

Doing that check across a set of hosts via ssh might look like this:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
for node in $NODES
do
 ssh node &quot;if [ -f /etc/motd ]; then echo true; else echo false; fi&quot;
done
&lt;/syntaxhighlight&gt;

Here's an alternative using [[fileutil]]#[http://controltier.sourceforge.net/docs/latest/core/reference/user/fileutil/commands/available.html available]:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m fileutil -c available -- -file /etc/motd
&lt;/syntaxhighlight&gt;
Will return &quot;true&quot; or &quot;false&quot;. You can cause the command to exit non-zero  with the -failonerror flag.

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m fileutil -c available -- -file /etc/bogus -failonerror
&lt;/syntaxhighlight&gt;

===Copy a file===

Copy a file with [[fileutil]]#[http://controltier.sourceforge.net/docs/latest/core/reference/user/fileutil/commands/copy.html copy]:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m fileutil -c copy -- -file file1  -target file2 
&lt;/syntaxhighlight&gt;

===Copy a  local file but backup pre-existing===
Here is unix bourne shell script that will conditionally backup a file before a copy is created:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
# create a backup if necessary
if [ -f file2 ]
then
   cp file2 file2.backup
fi

# copy the file
cp file1 file2
&lt;/syntaxhighlight&gt;
Doing those same steps remotely would be a bit inconvenient.

Here's an example using [[fileutil]]#[http://controltier.sourceforge.net/docs/latest/core/reference/user/fileutil/commands/copy.html copy]:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m fileutil -c copy -- -file file1  -target file2 -backup
&lt;/syntaxhighlight&gt;

===Check if a file is executable===
In unix shell typically you check if a file is set executable using the test operator (Windows does not have a built-in function):

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
if [ -x file ] 
then   
   echo true
else
   echo false 
fi
&lt;/syntaxhighlight&gt;

Doing that check across a set of hosts via ssh might look like this:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
for node in $NODES
do
 ssh node &quot;if [ -x file ]; then echo true; else echo false; fi&quot;
done
&lt;/syntaxhighlight&gt;

Here's an alternative using [[fileutil]]#[http://controltier.sourceforge.net/docs/latest/core/reference/user/fileutil/commands/executable.html executable]:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m fileutil -c executable -- -file /bin/sh
&lt;/syntaxhighlight&gt;

Use the &quot;-failonerror&quot; option to have the command exit with a non-zero code if it is not executable.
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m fileutil -c executable -- -file /etc/motd -failonerror
&lt;/syntaxhighlight&gt;

===Create a symbolic link===
Use [[fileutil]]#[http://controltier.sourceforge.net/docs/latest/core/reference/user/fileutil/commands/link.html link]. Similar to: &lt;code&gt;ln -s file1 file&lt;/code&gt;
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m fileutil -c link -- -file file1 -target file2
&lt;/syntaxhighlight&gt;

Only works on Unix OS family hosts.

===List directory contents===
Imagine a directory structure like below:
&lt;pre&gt;
/tmp/test
|-- file1
|-- file2
|-- file3
`-- subdir
    |-- file1
    `-- file2
&lt;/pre&gt;

To list the contents on Unix you could use the &lt;code&gt;ls&lt;/code&gt; or &lt;code&gt;find&lt;/code&gt; commands. Windows has the &lt;code&gt;dir&lt;/code&gt; command.

You can use the [[fileutil]]#[http://controltier.sourceforge.net/docs/latest/core/reference/user/fileutil/commands/ls.html ls] command. To list just files inside the first dir run:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -p demo -m fileutil -c ls -- -dir /tmp/test
/tmp/test/file1
/tmp/test/file2
/tmp/test/file3
&lt;/syntaxhighlight&gt;

Or to do a recursive list run:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -p demo -m fileutil -c ls -- -dir /tmp/test -recursive
/tmp/test/file1
/tmp/test/file2
/tmp/test/file3
/tmp/test/subdir/file1
/tmp/test/subdir/file2
&lt;/syntaxhighlight&gt;

===Create a directory===

Use [[fileutil]]#[http://controltier.sourceforge.net/docs/latest/core/reference/user/fileutil/commands/mkdir.html mkdir]:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -p demo -m fileutil -c mkdir -- -dir /tmp/newdir
&lt;/syntaxhighlight&gt;

===Move a file===

Move a file with [[fileutil]]#[http://controltier.sourceforge.net/docs/latest/core/reference/user/fileutil/commands/move.html move]:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -p demo -m fileutil -c move -- -file file1 -target file2
&lt;/syntaxhighlight&gt;

===Check if one file is newer than another===
Checking if one file is newer than another is a bit cumbersome and can be one in a number of ways. One could use long directory listings and parse the output for the last-modification time and compare the values. On unix, one might also use the &lt;code&gt;find&lt;/code&gt; command.

For example, assume there are two files with different modification times (file1 is older than file2)
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
demo@ubuntu:/tmp/test/subdir$ ls -l
total 0
-rw-r--r-- 1 demo demo 0 2009-07-12 09:42 file1
-rw-r--r-- 1 demo demo 0 2009-07-12 09:52 file2
&lt;/syntaxhighlight&gt;
The &lt;code&gt;find&lt;/code&gt; command could be used to check if one is newer than the other. If file2 is newer then file2 will be written to stdout:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ cd /tmp/test/subdir
$ find . -name file2 -newer file1
./file2
&lt;/syntaxhighlight&gt;
If the opposite is tried, 
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ find . -name file1 -newer file2
&lt;/syntaxhighlight&gt;
... then no output will be written to stdout.

Doing that kind of check across a set of  hosts would be cumbersome.

Alternatively, one can use the [[fileutil]]#[http://controltier.sourceforge.net/docs/latest/core/reference/user/fileutil/commands/newer.html newer] command like so:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m fileutil -c newer -- -file file2 -target file1
&lt;/syntaxhighlight&gt;
The string &quot;true&quot; will be written to stdout if file2 is newer, &quot;false&quot; otherwise.

The &quot;-failonerror&quot; flag can be used to cause the command to exit non-zero if the file is not newer.

===Check if one file is older than another===
Use [[fileutil]]#[http://controltier.sourceforge.net/docs/latest/core/reference/user/fileutil/commands/older.html older]:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m fileutil -c older -- -file file1 -target file2
&lt;/syntaxhighlight&gt;

===Check if a file is readable===
In unix shell typically you check if a file is set readable using the test operator (Windows does not have a built-in function):

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
if [ -r file ] 
then   
   echo true
else
   echo false 
fi
&lt;/syntaxhighlight&gt;

Doing that check across a set of hosts via ssh might look like this:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
for node in $NODES
do
 ssh node &quot;if [ -r file ]; then echo true; else echo false; fi&quot;
done
&lt;/syntaxhighlight&gt;

Here's an alternative using [[fileutil]]#[http://controltier.sourceforge.net/docs/latest/core/reference/user/fileutil/commands/readable.html readable]:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m fileutil -c readable -- -file file
&lt;/syntaxhighlight&gt;

Use the &quot;-failonerror&quot; option to have the command exit with a non-zero code if it is not readable.
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m fileutil -c readable -- -file /etc/motd -failonerror
&lt;/syntaxhighlight&gt;

===Check if a file is writeable===
In unix shell typically you check if a file is set writeable using the test operator (Windows does not have a built-in function):

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
if [ -w file ] 
then   
   echo true
else
   echo false 
fi
&lt;/syntaxhighlight&gt;

Doing that check across a set of hosts via ssh might look like this:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
for node in $NODES
do
 ssh node &quot;if [ -w file ]; then echo true; else echo false; fi&quot;
done
&lt;/syntaxhighlight&gt;

Here's an alternative using [[fileutil]]#[http://controltier.sourceforge.net/docs/latest/core/reference/user/fileutil/commands/writeable.html writeable]:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m fileutil -c writeable -- -file file
&lt;/syntaxhighlight&gt;

Use the &quot;-failonerror&quot; option to have the command exit with a non-zero code if it is not writeable.
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m fileutil -c writeable -- -file /etc/motd -failonerror
&lt;/syntaxhighlight&gt;

===Remove a file===
Remove a file with [[fileutil]]#[http://controltier.sourceforge.net/docs/latest/core/reference/user/fileutil/commands/remove.html remove]:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m fileutil -c remove -- -file file1 
&lt;/syntaxhighlight&gt;

===Remove a directory===
Remove a directory with [[fileutil]]#[http://controltier.sourceforge.net/docs/latest/core/reference/user/fileutil/commands/rmdir.html rmdir]:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m fileutil -c rmdir -- -dir mydir
&lt;/syntaxhighlight&gt;

===Touch a file===

Create a file and set its last modified time using [[fileutil]]#[http://controltier.sourceforge.net/docs/latest/core/reference/user/fileutil/commands/touch.html touch]:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m fileutil -c touch -- -datetime &quot;'06/28/2000 2:02 pm'&quot; -file file1 
&lt;/syntaxhighlight&gt;

==Network==

===Check if a port is listening===
There are a number of methods useful to check if a port is open and listening. On unix hosts one might use the &lt;code&gt;netstat&lt;/code&gt; command and grep:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
netstat -an | grep 8080 | grep LISTENING
&lt;/syntaxhighlight&gt;
On windows, one might use the &lt;code&gt;telnet&lt;/code&gt; command and attempt to connect to it
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
telnet host 8080
&lt;/syntaxhighlight&gt;

An alternative would be to use the [[netutil]]#[http://controltier.sourceforge.net/docs/latest/core/reference/user/netutil/commands/listening.html listening] command:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m netutil -c listening  -- -port 8080
&lt;/syntaxhighlight&gt;

===Check if a port is listening up to a max wait time===
Sometimes you are checking if a process that is starting has bound to the port but it takes some time. Do this using [[netutil]]#[http://controltier.sourceforge.net/docs/latest/core/reference/user/netutil/commands/listening.html listening].

This example checks every half second up to 60 seconds:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m netutil -c listening  -- -port 8080 -maxwait 60 -maxwaitunit second -checkevery 500
&lt;/syntaxhighlight&gt;

===Check if a web server is up===
To check if a web server is reachable, one might connect to it's listening port and attempt a page request using tools like &lt;code&gt;wget&lt;/code&gt;, &lt;code&gt;curl&lt;/code&gt; or even a simple network port check. Using one of these methods, the scripter will then need to parse and intepret the results to determine if the web server is up.

An alternative, is to use [[netutil]]l#[http://controltier.sourceforge.net/docs/latest/core/reference/user/netutil/commands/reachable.html reachable]. This command returns &quot;true&quot; or &quot;false&quot; depending on the web server being reachable.
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m netutil -c reachable -- -timeout 10 -url http://someaddress:80
&lt;/syntaxhighlight&gt;
The &quot;-failonerror&quot; flag can be added to cause the command to exit non-zero.

==Shell==

===Get environment information===
Depending on the login shell, there is a method to obtain environment variable values. Unix hosts also include the &lt;code&gt;env&lt;/code&gt; command that will print all currently exported environment variables. You can combine it with the &lt;code&gt;grep&lt;/code&gt; command to lookup just one value:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
env | grep VAR
&lt;/syntaxhighlight&gt;

One can also use the [[shellutil]]#[http://controltier.sourceforge.net/docs/latest/core/reference/user/shellutil/commands/env.html env] command to access one or more environment variable settings:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m shellutil -c env -- -key CTL_BASE
CTL_BASE=/Users/alexh/ctier/ctl
 &lt;/syntaxhighlight&gt;

The &quot;key&quot; parameter can use a regular expression to look up multiple variables:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -p demo -m shellutil -c env -- -key 'CTL_.*'
CTL_HOME=/Users/alexh/ctier/pkgs/ctl-1.4.6
CTL_CLI_TERSE=true
CTL_BASE=/Users/alexh/ctier/ctl
&lt;/syntaxhighlight&gt;

===Execute a command===

Execute an arbitrary command by invoking the executable and passing it arguments using [[shellutil]]#[http://controltier.sourceforge.net/docs/latest/core/reference/user/shellutil/commands/exec.html exec]:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m shellutil -c exec -- -executable /bin/echo -argline hello
&lt;/syntaxhighlight&gt;

===Execute a script expression===

Call an executable and pass it a script expression using [[shellutil]]#[http://controltier.sourceforge.net/docs/latest/core/reference/user/shellutil/commands/exec.html exec]:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ ctl -m shellutil -c exec -- -executable /bin/sh -script 'echo hello me'
&lt;/syntaxhighlight&gt;

===Execute a script file===

Execute script file using [[shellutil]]#[http://controltier.sourceforge.net/docs/latest/core/reference/user/shellutil/commands/exec.html exec]:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m shellutil -c exec -- -executable /bin/sh -scriptfile scriptfile.sh
&lt;/syntaxhighlight&gt;

The &lt;code&gt;exec&lt;/code&gt; command will default the executable to several interpreters depending on the file's extension. 
For example files that end in &quot;.sh&quot; are assumed to be bourne shell scripts so the &quot;/bin/sh&quot; is the default value used for the &quot;-executable&quot; option.

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m shellutil -c exec -- -scriptfile scriptfile.sh
&lt;/syntaxhighlight&gt;

Other default mappings  include: .bat &amp;rarr; cmd.exe, .xml &amp;rarr; Ant.

===Execute a script file stored in the WebDAV===
Maintaining script files in the WebDAV provides a centralized location to get them and use them wherever needed in the distributed environment. The [[shellutil]]#[http://controltier.sourceforge.net/docs/latest/core/reference/user/shellutil/commands/exec.html exec] command supports this model.

This example shows a trivial script that is first placed in the WebDAV and then executed.

Script file: hi.sh
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
#!/bin/sh
echo hi there $@
&lt;/syntaxhighlight&gt;

Put it into the repository
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m davutil -c put -- -file hi.sh -url dav://hi.sh
&lt;/syntaxhighlight&gt;

Execute the script. 
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m shellutil -c exec -- -executable /bin/sh -scripturl dav://hi.sh
&lt;/syntaxhighlight&gt;
The file is downloaded and then executed.

===Execute a command or script with a timeout===
Use the shellutil#exec command and the &quot;-timeout&quot; option.

Give the script 300 seconds to finish. If it exceeds the allowed time limit then terminate it.
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m shellutil -c exec -- -executable /bin/sh -scriptfile longrunning.sh -timeout 300
&lt;/syntaxhighlight&gt;

===Kill system processes by name===
Kill all the processes named java using [[shellutil]]#[http://controltier.sourceforge.net/docs/latest/core/reference/user/shellutil/commands/pkill.html pkill]:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m shellutil -c pkill -- -pname java -sig TERM
&lt;/syntaxhighlight&gt;

==Text==

===Checksum a file===
Use [[textutil]]#[http://controltier.sourceforge.net/docs/latest/core/reference/user/textutil/commands/checksum.html checksum] to generate a checksum for a file:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m textutil -c checksum -- -file file1
d41d8cd98f00b204e9800998ecf8427e
&lt;/syntaxhighlight&gt;

This time save the checksum to file:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ ctl -m textutil -c checksum -- -file file1 -createfile
$ ls
file1  file1.MD5  file2
$ cat file1.MD5 
d41d8cd98f00b204e9800998ecf8427e
&lt;/syntaxhighlight&gt;

===Check if a file contains a pattern===

It is often necessary to check the content of a file to see if it contains a particular string. On unix hosts, the &lt;code&gt;grep&lt;/code&gt; command is the immediate tool to consider for the task. Windows users might use QGREP.

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
grep PATTERN file&lt;/syntaxhighlight&gt;

The [[textutil]]#[http://controltier.sourceforge.net/docs/latest/core/reference/user/textutil/commands/contains.html contains] command can  also be used:

&lt;pre lang=&quot;bash&quot;&gt;
ctl -m textutil -c contains -- -file &lt;&gt; -pattern &lt;&gt;
&lt;/pre&gt;

===Check if a file contains a pattern and retry up to maximum wait time===

Sometimes it is necessary to retry checking a file to see if it contains a particular string. This might be due to a process that is starting and has not reached the point where it has printed that line.

An example unix shell script that accomplishes the objective is shown below. It loops up until a maximum wait time (20s) and retries every 1 second. If the pattern is not found then the script exits with a non-zero exit code:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
elapsed=0
while [ $elapsed -lt 20 ]
do
  grep Started example.log &amp;&amp; exit 0
  sleep 1
  elapsed=`expr $elapsed + 1`
done

exit 1
&lt;/syntaxhighlight&gt;

The [[textutil]]#[http://controltier.sourceforge.net/docs/latest/core/reference/user/textutil/commands/contains.html contains] command provides a &quot;-maxwait&quot; flag that can be used to continuously retry the check:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m textutil -c contains -file example.log  -pattern Started -maxwait 20
&lt;/syntaxhighlight&gt;

===Show file content with line numbers===

Use the [[textutil]]#[http://controltier.sourceforge.net/docs/latest/core/reference/user/textutil/commands/nl.html nl] command.

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ ctl -m textutil -c nl -- -file /etc/motd
1 Linux ubuntu 2.6.27-7-generic #1 SMP Fri Oct 24 06:42:44 UTC 2008 i686
2 
3 The programs included with the Ubuntu system are free software;
4 the exact distribution terms for each program are described in the
5 individual files in /usr/share/doc/*/copyright.
6 
7 Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by
8 applicable law.
9 
10 To access official Ubuntu documentation, please visit:
11 http://help.ubuntu.com/
&lt;/syntaxhighlight&gt;

===Replace a string in a file with a different string===

Use the [[textutil]]#[http://controltier.sourceforge.net/docs/latest/core/reference/user/textutil/commands/replace.html replace] command
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m textutil -c replace -- -basedir /path/to/conf/dir -exts .conf -filebase * -token ORIG -value NEW
&lt;/syntaxhighlight&gt;

===Print the last lines of a file===

Use the [[textutil]]#[http://controltier.sourceforge.net/docs/latest/core/reference/user/textutil/commands/tail.html tail] command
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m textutil -c tail [-count &lt;10&gt;] -file &lt;&gt;
&lt;/syntaxhighlight&gt;

==WebDAV==

===dav:// prefix===
{{:Dav://_prefix}}

===Copy WebDAV resource to a local file ===

Copy the resource accessible as the URL http://strongbad:8080/jackrabbit/repository/controltier/projects/junk/fun to a local file named /tmp/fun/file1 :

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m davutil -c copy -- \
	  -src http://strongbad:8080/jackrabbit/repository/controltier/projects/junk/fun \
	  -dest /tmp/fun/file1 
&lt;/syntaxhighlight&gt;

===Copy WebDAV resource to a local file but backup pre-existing===

You can use the &quot;-backup&quot; option to make a backup of the existing file.
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m davutil -c copy -- \
	  -src http://strongbad:8080/jackrabbit/repository/controltier/projects/junk/fun \
	  -dest /tmp/fun/file1 -backup
&lt;/syntaxhighlight&gt;

By default the backup file name will be suffixed with &quot;.backup&quot;. Eg file1.backup

The suffix can be overridden using the &quot;suffix&quot; option.Eg. file1.orig

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m davutil -c copy -- \
	  -src http://strongbad:8080/jackrabbit/repository/controltier/projects/junk/fun \
	  -dest /tmp/fun/file1 -backup -suffix &quot;.orig&quot;
&lt;/syntaxhighlight&gt;

===Copy local file to the the WebDAV===

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m davutil -c copy -- \
	  -src /tmp/fun/file1 \
	  -dest http://strongbad:8080/jackrabbit/repository/controltier/projects/junk/fun
&lt;/syntaxhighlight&gt;

''OR''

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m davutil -c copy -- \
	  -src /tmp/fun/file1 \
	  -dest dav://junk/fun
&lt;/syntaxhighlight&gt;

===Retrieve an archived WebDAV resource and extract it===
Retrieving and extracting an archived resource from the WebDAV is usually done in two main step:
# using a web client like curl or wget, providing to it URL output file name and possibly user/pass info
# tool suitable to extract the archive depending on its type

Here's an example using &lt;code&gt;curl&lt;/code&gt; and &lt;code&gt;unzip&lt;/code&gt;:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
# get the file
curl -s --user default:default http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/apache-tomcat-5.5.27.zip \
    -r /usr/local/apache-tomcat-5.5.27.zip 
if [ $? != 0 ]
then
   echo &quot;Download failed: apache-tomcat-5.5.27.zip&quot;; exit 1
fi

# extract the archive
unzip -q /usr/local/apache-tomcat-5.5.27.zip 
if [ $? != 0 ]
then
   echo &quot;Extract failed: apache-tomcat-5.5.27.zip&quot;; exit 1;
fi
&lt;/syntaxhighlight&gt;

Alternatively, the [[davutil]]#[http://controltier.sourceforge.net/docs/latest/core/reference/user/davutil/commands/extract.html extract] command can be used to do this in a single step.
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m davutil -c extract -- -dir /usr/local -url dav://pkgs/demo/zip/zips/apache-tomcat-5.5.27.zip  -type zip
&lt;/syntaxhighlight&gt;

Note: The [[#dav:.2F.2F_prefix|dav://]] prefix is a convenient shorthand to the URL to the root of the WebDAV.

===Create a WebDAV resource copy===
You can use [[davutil]]#[http://controltier.sourceforge.net/docs/latest/core/reference/user/davutil/commands/copy.html copy] to copy one resoure in the dav to another:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m davutil -c copy -- \
	  -src http://strongbad:8080/jackrabbit/repository/controltier/projects/junk/fun \
	  -dest http://strongbad:8080/jackrabbit/repository/controltier/projects/junk/fun_copy
&lt;/syntaxhighlight&gt;

===Delete a WebDAV resource===

Remove a resource from the WebDAV using [[davutil]]#[http://controltier.sourceforge.net/docs/latest/core/reference/user/davutil/commands/remove.html remove]:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m davutil -c remove -- \
      -url http://strongbad:8080/jackrabbit/repository/controltier/projects/junk/fun_copy
&lt;/syntaxhighlight&gt;

===Create a WebDAV collection===

Create a new collection (similar in concept to a directory) using [[davutil]]#[http://controltier.sourceforge.net/docs/latest/core/reference/user/davutil/commands/mkcol.html mkcol]:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m davutil -c mkcol -- \
      -url http://strongbad:8080/jackrabbit/repository/controltier/projects/junk/new_collection
&lt;/syntaxhighlight&gt;

===Rename a WebDAV resource===

Use [[davutil]]#[http://controltier.sourceforge.net/docs/latest/core/reference/user/davutil/commands/move.html move] to rename a resource in the WebDAV:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m davutil -c move -- \
      -url http://strongbad:8080/jackrabbit/repository/controltier/projects/junk/old_name
      -dest http://strongbad:8080/jackrabbit/repository/controltier/projects/junk/new_name
&lt;/syntaxhighlight&gt;

===Put a file in the WebDAV===

Upload a file to the repository using [[davutil]]#[http://controltier.sourceforge.net/docs/latest/core/reference/user/davutil/commands/put.html put]:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m davutil -c put -- \
      -file /etc/motd
      -dest http://strongbad:8080/jackrabbit/repository/controltier/projects/junk/motd
&lt;/syntaxhighlight&gt;

===Put a directory in the WebDAV===

Use [[davutil]]#[http://controltier.sourceforge.net/docs/latest/core/reference/user/davutil/commands/put.html put] a directory of files into the WebDAV:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m davutil -c put -- \
      -file /etc
      -dest http://strongbad:8080/jackrabbit/repository/controltier/projects/junk/etc
&lt;/syntaxhighlight &gt;

{{Guide/navbox}}

[[Category:Command execution]]
[[Category:Scripting Examples]]</text>
    </revision>
  </page>
  <page>
    <title>Select Type Reference</title>
    <id>160</id>
    <revision>
      <id>11359</id>
      <timestamp>2009-12-14T23:00:01Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Types&lt;/categorytree&gt;
=Description=
      &lt;p&gt;
	The select type specifies how the &lt;link href=&quot;sortby.html&quot;&gt;SortBy&lt;/link&gt; tag should sort the
	matched input.
      &lt;/p&gt;

=Attributes=
      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	  &lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;by&lt;/td&gt;&lt;td&gt;specifies weather to sort by property name
	  or by property value&lt;/td&gt;&lt;td&gt;Yes. defaults to name&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;order&lt;/td&gt;&lt;td&gt;specifies sort order. Can be
	  &lt;code&gt;ascending&lt;/code&gt; or &lt;code&gt;descending&lt;/code&gt;.
	  &lt;/td&gt;&lt;td&gt;Yes. defaults to ascending&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;name&lt;/td&gt;&lt;td&gt;specifies the matchgroup name. 
	  &lt;/td&gt;&lt;td&gt;Yes if by=name&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;

=Parameters specified as nested elements=
      &lt;p&gt;
	None
      &lt;/p&gt;
    
=Examples=
     
      &lt;pre&gt;
	&amp;lt;propertiesquery
	    select=&quot;dType,dObject&quot;
	    from=&quot;deployment\.([^\.]*)\.(.*)\.runlevel&quot;&amp;gt;
	  &amp;lt;sortby&amp;gt;
	    &amp;lt;select by=&quot;value&quot; order=&quot;ascending&quot;/&amp;gt;
	  &amp;lt;/sortby&amp;gt;
	&amp;lt;/propertiesquery&amp;gt;
      &lt;/pre&gt;
&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Command Dispatcher Ant Types]]</text>
    </revision>
  </page>
  <page>
    <title>Self-contained Directory Convention</title>
    <id>1011</id>
    <redirect />
    <revision>
      <id>5814</id>
      <timestamp>2009-06-22T23:01:46Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <comment>[[Self-contained Directory Convention]] moved to [[Self-contained directory convention]]: capitalization</comment>
      <text xml:space="preserve">#REDIRECT [[Self-contained directory convention]]</text>
    </revision>
  </page>
  <page>
    <title>Self-contained directory convention</title>
    <id>14</id>
    <revision>
      <id>10754</id>
      <timestamp>2009-12-12T21:20:45Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;noinclude&gt;&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Installation&lt;/categorytree&gt;
&lt;/noinclude&gt;
The following layout is the best-practice convention that has been adopted as the standard installation layout:
&lt;pre&gt;
 CTIER_ROOT                                 Defaults to $HOME/ctier on *nix and C:\ctier on Windows, but is relocatable
      ctl                                   CTL_BASE
         src                                   Module library source code
      demo                                  Optional directory of demonstration applications
      jobcenter                             JOBCENTER_BASE
      reportcenter                          REPORTCENTER_BASE
      workbench                             Workbench runtime files
      jackrabbit                            Apache Jackrabbit file repository data
      pkgs                                  Software installations to support the ControlTier installation
        ControlTier-3.x                     Staging directory for the ControlTier installer
        ctl-1.x.x                           CTL_HOME
        apache-forrest-0.8                  FORREST_HOME
        graphviz-2.xx.x                     GRAPHVIZ_HOME for a Windows installer install
        j2sdk1.5.0_xx                       JAVA_HOME for the ControlTier installation
        jetty-6.x.x                         JETTY_HOME
&lt;/pre&gt;
&lt;noinclude&gt;
Some benefits of this layout are:
# All package dependencies (beyond the OS installation) are contained within the ControlTier root
# The layout consistently separates package software installs from runtime files (HOME vs BASE) facilitating easier upgrade.
# There's room for multiple demos to be staged (e.g. DukesBank, or PioneerCycling), and the demo directory can be omitted completely to save space.
# Appropriate parts of the hierarchy can be culled to produce a minimum client-only install with the same basic structure (e.g. no Jetty, Forrest or Graphviz)
# There's a single well-known location for ProjectBuilder source code (modules, jobs, objects, and documentation).


{{Installation/navbox}}
[[Category:Installation requirements]]
&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Self-contained process definition example (pview style)</title>
    <id>1496</id>
    <revision>
      <id>11654</id>
      <timestamp>2009-12-16T16:32:17Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">File listing: &quot;process.xml&quot;
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;

&lt;!-- A process defines a resource model and a set of tasks to execute--&gt;
&lt;process id=&quot;TomcatDeployer&quot;&gt;

  &lt;!--resources defines resource model --&gt;
  &lt;resources&gt;
    
    &lt;!--a setting declares a named key/value pair--&gt;
    &lt;setting type=&quot;Port&quot; name=&quot;defaultListen&quot; value=&quot;8080&quot;/&gt;
    &lt;setting type=&quot;Port&quot; name=&quot;prodListen&quot; value=&quot;8181&quot;/&gt;
    &lt;setting type=&quot;FilePath&quot; name=&quot;simpleTomcat&quot; value=&quot;/usr/local/tomcat&quot;/&gt;
    &lt;setting type=&quot;FilePath&quot; name=&quot;dbDir&quot; value=&quot;file:///app/db&quot;/&gt;

    &lt;!-- Import resource model data from an external source--&gt;
    &lt;import source=&quot;file:///nodes.xml&quot;/&gt;
    &lt;!-- declares several CTL hosts:

      &lt;node name=&quot;strongbad&quot; tags=&quot;admin&quot;/&gt;
      &lt;node name=&quot;centos54&quot; tags=&quot;centos,web&quot;/&gt;
      &lt;node name=&quot;centos43&quot; tags=&quot;centos,web&quot;/&gt;
      &lt;node name=&quot;ubuntu9&quot; tags=&quot;ubuntu,tomcat&quot;/&gt;
      &lt;node name=&quot;ubuntu-opejdk&quot; tags=&quot;ubuntu,tomcat&quot;/&gt;
    --&gt;
    
    &lt;!-- Hypothetical methods to lookup resource model values (eg, &quot;file:///app/db&quot;):           --&gt;
    &lt;!-- The intent is to let process steps reference resource model data defined earlier   --&gt;
    &lt;!--                                                                              --&gt;
    &lt;!-- xpath: //process/resources/setting[@type='Port' @name='dbDir']/@value         --&gt;
    &lt;!-- gpath: process.resources.setting.find{ it['@name'] == 'dbDir' }.value.text() --&gt;
    &lt;!-- property: setting.FilePath.dbDir.value                                       --&gt;

  &lt;/resources&gt;

  &lt;!--The tasks element defines a process. 
      Tasks contain task and errorhandler elements--&gt;  
  &lt;tasks&gt;

    &lt;!-- Conceptually, a task defines a process step --&gt;
    &lt;task id=&quot;TomcatUpdate&quot;&gt;

      &lt;!-- The nodefilters enable and restrict nodedispatch execution --&gt;
      &lt;!-- all subordinate tasks will execute here unless overridden--&gt;
      &lt;nodefilters&gt;
	&lt;include&gt;
	  &lt;!-- execute on all nodes tagged &quot;tomcats&quot;--&gt;
	  &lt;tags&gt;tomcats&lt;/tags&gt;
	&lt;/include&gt;
      &lt;/nodefilters&gt;
      &lt;!-- Additional dispatcher paramaters--&gt;
      &lt;dispatch&gt;
	&lt;!-- these are default--&gt;
	&lt;threadcount&gt;1&lt;/threadcount&gt;
	&lt;keepgoing&gt;false&lt;/keepgoing&gt;
      &lt;/dispatch&gt;

      &lt;!--A task can define an errorhandler--&gt;
      &lt;errorhandler&gt;

	&lt;!--Call the report action if an error occurs--&gt;
	&lt;report&gt;Update faild&lt;/report&gt;
      &lt;/errorhandler&gt;
      
      &lt;!--The tasks element used here to define a subprocess--&gt;
      &lt;tasks&gt;

	&lt;!--Subprocess: Stop,Packages-Install,Configure,Start--&gt;
	&lt;task id=&quot;Stop&quot;&gt;
	  
	  &lt;!--The ctl element specifies a defined command to execute--&gt;
	  &lt;ctl&gt;
	    &lt;command name=&quot;listening&quot; module=&quot;netutil&quot;/&gt;
	    
	    &lt;!-- options and option tag specify the command line arguments--&gt;
	    &lt;options&gt;
	      &lt;option name=&quot;port&quot; value=&quot;${setting.Port.defaultListen.value}&quot;/&gt;
	      &lt;option name=&quot;assert&quot; value=&quot;true&quot;/&gt;
	    &lt;/options&gt;
	  &lt;/ctl&gt;

	  &lt;!-- an errorhandler calling an adhoc command--&gt;
	  &lt;errorhandler&gt;
	    
	    &lt;!-- ctl-exec element specifies and adhoc command to execute--&gt;
	    &lt;ctl-exec&gt;
	      &lt;exec&gt;${setting.FilePath.simpleTomcat.value}/bin/shutdown.sh&lt;/exec&gt;
	      
	    &lt;/ctl-exec&gt;
	  &lt;/errorhandler&gt;
	&lt;/task&gt;

	&lt;task id=&quot;Packages-Install&quot;&gt;
	  
	  &lt;!--Subprocess: InstallTomcat,InstallWar--&gt;
	  &lt;tasks&gt;
	    &lt;task id=&quot;InstallTomcat&quot;&gt;
	      &lt;ctl&gt;
		&lt;command name=&quot;extract&quot; module=&quot;davutil&quot;/&gt;
		&lt;options&gt;
		  &lt;option name=&quot;url&quot; value=&quot;dav://pkgs/apache-tomcat-5.5.28.zip&quot;/&gt;
		  &lt;option name=&quot;type&quot; value=&quot;zip&quot;/&gt;
		  &lt;option name=&quot;dir&quot; value=&quot;${setting.FilePath.simpleTomcat.value}&quot;/&gt;
		&lt;/options&gt;
	      &lt;/ctl&gt;
	    &lt;/task&gt;
	    &lt;task id=&quot;InstallWar&quot;&gt;
	      &lt;ctl&gt;
		&lt;command name=&quot;extract&quot; module=&quot;davutil&quot;/&gt;
		&lt;options&gt;
		  &lt;option name=&quot;url&quot; value=&quot;dav://pkgs/simple.war&quot;/&gt;
		  &lt;option name=&quot;type&quot; value=&quot;war&quot; /&gt;
		  &lt;option name=&quot;dir&quot; value=&quot;${setting.FilePath.simpleTomcat.value}/webapps/simple&quot;/&gt;
		&lt;/options&gt;
	      &lt;/ctl&gt;
	    &lt;/task&gt;
	  &lt;/tasks&gt;
	&lt;/task&gt;

	&lt;task id=&quot;Configure&quot;&gt;

	  &lt;!--Subprocess: RewriteServerConf,RewriteAppConf--&gt;
	  &lt;tasks&gt;
	    &lt;task id=&quot;RewriteServerConf&quot;&gt;
	      &lt;ctl&gt;
		&lt;command name=&quot;replace&quot; module=&quot;textutil&quot;/&gt;
		&lt;options&gt;
		  &lt;option name=&quot;basedir&quot; value=&quot;${setting.FilePath.simpleTomcat.value}/conf&quot;/&gt;
		  &lt;option name=&quot;filebase&quot; value=&quot;server.xml&quot;/&gt;
		  &lt;option name=&quot;token&quot; value=&quot;${setting.Port.defaultListen.value}&quot;/&gt;
		  &lt;option name=&quot;value&quot; value=&quot;${setting.Port.prodListen.value}&quot;/&gt;
		&lt;/options&gt;	
	      &lt;/ctl&gt;
	    &lt;/task&gt;
	    &lt;task id=&quot;RewriteAppConf&quot;&gt;
	      &lt;ctl-exec&gt;
		&lt;!-- adhoc command calling an inline script --&gt;
		&lt;script&gt;&lt;![CDATA[
		cd ${setting.FilePath.simpleTomcat.value}/webapps/simple/WEB-INF/classes;
		/usr/bin/perl -p -i -e &quot;s/@dbDir@/${setting.FilePath.dbDir.value}/g&quot; *.properties
		]]&gt;&lt;/script&gt;
		
	      &lt;/ctl-exec&gt;
	    &lt;/task&gt;
	  &lt;/tasks&gt;
	&lt;/task&gt;

	&lt;task id=&quot;Start&quot;&gt;
	  &lt;!--Subprocess:startService,assertServiceIsUp--&gt;
	  &lt;tasks&gt;
	    &lt;task id=&quot;startService&quot;&gt;	    
	      &lt;ctl&gt;
		&lt;command name=&quot;listening&quot; module=&quot;netutil&quot;/&gt;
		&lt;options&gt;
		  &lt;option name=&quot;port&quot; value=&quot;${setting.Port.defaultListen.value}&quot;/&gt;
		  &lt;option name=&quot;assert&quot; value=&quot;false&quot;/&gt;
		&lt;/options&gt;
		
	      &lt;/ctl&gt;
	      &lt;errorhandler&gt;
		&lt;ctl&gt;
		  &lt;command name=&quot;exec&quot; module=&quot;shellutil&quot;/&gt;
		  &lt;options&gt;
		    &lt;option name=&quot;script&quot; value=&quot;${setting.FilePath.simpleTomcat.value}/bin/startup.sh&quot;/&gt;
		  &lt;/options&gt;
		  &lt;nodefilters&gt;
		    &lt;include&gt;
		      &lt;tags&gt;tomcats&lt;/tags&gt;
		    &lt;/include&gt;
		  &lt;/nodefilters&gt;
		&lt;/ctl&gt;
	      &lt;/errorhandler&gt;
	    &lt;/task&gt;
	    &lt;task id=&quot;assertServiceIsUp&quot;&gt;	    
	      &lt;ctl&gt;
		&lt;command name=&quot;listening&quot; module=&quot;netutil&quot;/&gt;
		&lt;options&gt;
		  &lt;option name=&quot;port&quot; value=&quot;${setting.Port.defaultListen.value}&quot;/&gt;
		  &lt;option name=&quot;assert&quot; value=&quot;true&quot;/&gt;
		  &lt;option name=&quot;maxwait&quot; value=&quot;10000&quot;/&gt;
		&lt;/options&gt;	
	      &lt;/ctl&gt;	     
	    &lt;/task&gt;
	  &lt;/tasks&gt;
	&lt;/task&gt;
      &lt;/tasks&gt;
    &lt;/task&gt;

  &lt;/tasks&gt;
&lt;/process&gt;

&lt;/syntaxhighlight&gt;

[[Category:Self-contained Process Definition]]</text>
    </revision>
  </page>
  <page>
    <title>Self-contained process definition example (relation style)</title>
    <id>1497</id>
    <revision>
      <id>11652</id>
      <timestamp>2009-12-16T16:31:28Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">file listing: process.xml

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;!-- A process defines a resource model and a set of tasks to execute--&gt;
&lt;process id=&quot;TomcatDeployer&quot;&gt;
  
  &lt;!--this section defines resource model --&gt;
  &lt;resource name=&quot;TomcatDeployer&quot; type=&quot;Controller&quot;&gt;

    &lt;relations&gt;
      &lt;!-- the &quot;as&quot; attribute gives a label to reference the resource--&gt;
      &lt;resource type=&quot;Service&quot; name=&quot;tomcat1&quot; as=&quot;svc1&quot;&gt;
	&lt;property name=&quot;listenPort&quot; value=&quot;8080&quot;/&gt;	
	&lt;property name=&quot;catalinaHome&quot; value=&quot;/usr/local/tomcat&quot;/&gt;
	&lt;property name=&quot;dbDir&quot; value=&quot;file:///app/db&quot;/&gt;

	&lt;!-- here the &quot;svc2&quot; label is used  to get the deployment-basedir--&gt;
	&lt;!-- resource.relations.svc2.deployment-basedir --&gt;
	&lt;property name=&quot;deployment-startup-rank&quot; value=&quot;1&quot;/&gt;
	&lt;!-- resource.relations.svc2.startup-rank --&gt;

	&lt;!-- an optional way to import node info. The includes attribute selects a subset--&gt;
	&lt;import source=&quot;file:///${env}.xml&quot; include=&quot;nodes&quot;/&gt;

      &lt;/resource&gt;
      &lt;!--  another child resource relation--&gt;

      &lt;resource type=&quot;Service&quot; name=&quot;tomcat2&quot;&gt;
	&lt;!-- here &quot;Service.tomcat2&quot; is used to reference the property--&gt;
	&lt;!-- resource.relations.Service.tomcat2.deployment-basedir --&gt;

	&lt;property name=&quot;deployment-startup-rank&quot; value=&quot;2&quot;/&gt;
	&lt;property name=&quot;listenPort&quot; value=&quot;8080&quot;/&gt;
	&lt;property name=&quot;catalinaHome&quot; value=&quot;/usr/local/tomcat&quot;/&gt;
	&lt;property name=&quot;dbDir&quot; value=&quot;file:///app/db&quot;/&gt;
	&lt;import source=&quot;file://${env}.xml&quot; include=&quot;nodes&quot;/&gt;
      &lt;/resource&gt;
    &lt;/relations&gt;
    &lt;nodes&gt;
      &lt;!-- Import resource model data from an external source--&gt;
      &lt;import source=&quot;file:///nodes.xml&quot;/&gt;
      &lt;!-- declares several CTL hosts:
	   
	   &lt;node name=&quot;strongbad&quot; tags=&quot;admin&quot;/&gt;
	   &lt;node name=&quot;centos54&quot; tags=&quot;centos,web&quot;/&gt;
	   &lt;node name=&quot;centos43&quot; tags=&quot;centos,web&quot;/&gt;
	   &lt;node name=&quot;ubuntu9&quot; tags=&quot;ubuntu,tomcat&quot;/&gt;
	   &lt;node name=&quot;ubuntu-opejdk&quot; tags=&quot;ubuntu,tomcat&quot;/&gt;
      --&gt;
    &lt;/nodes&gt;
    
    &lt;!-- Hypothetical methods to lookup resource model values (eg, &quot;file:///app/db&quot;):             --&gt;
    &lt;!-- The intent is to let process steps reference resource model data defined earlier         --&gt;
    &lt;!--                                                                                          --&gt;
    &lt;!-- xpath: //process/resource/relations/resource[as='svc1']/property[@name='listPort'/@value --&gt;
    &lt;!-- gpath: process.resource.relations..find{ it['@name'] == 'tomcat2' }.property.value.text() --&gt;
    &lt;!-- ant:   ${svc2.dbDir}                                                                      --&gt;

    
  &lt;/resource&gt;
  
  &lt;!--The sequence element defines a process subsection and is similar to a WorkflowCommand. 
      Sequence can contain &quot;call&quot; and &quot;errorhandler&quot; or other sequence elements--&gt;  
  &lt;sequence id=&quot;Update&quot;&gt;
    
    &lt;!--A sequence can define an errorhandler--&gt;
    &lt;errorhandler&gt;
      
      &lt;!--Call the report action if an error occurs--&gt;
      &lt;report&gt;Update failed&lt;/report&gt;
    &lt;/errorhandler&gt;      
    
    &lt;!--Subprocess: Stop,Packages-Install,Configure,Start--&gt;
    &lt;sequence id=&quot;Stop&quot;&gt;
      
      &lt;!--The call element specifies a defined command to execute--&gt;
      &lt;!-- This element is conceptually similar to the &quot;controller&quot; Ant task--&gt;
      &lt;call id=&quot;assertServiceIsDown&quot;&gt;
	&lt;command name=&quot;listening&quot; module=&quot;netutil&quot;/&gt;
	
	&lt;!-- options and option tag specify the command line arguments--&gt;
	&lt;options&gt;
	  &lt;option name=&quot;port&quot; value=&quot;${svc1.listenPort}&quot;/&gt;
	  &lt;option name=&quot;assert&quot; value=&quot;true&quot;/&gt;
	&lt;/options&gt;
      &lt;/call&gt;
      
      &lt;!-- Stop's errorhandler calling an adhoc command--&gt;
      &lt;errorhandler&gt;
	
	&lt;!-- exec element specifies and adhoc command to execute--&gt;
	&lt;call id=&quot;stop&quot;&gt;
	  &lt;exec&gt;
	    &lt;executable&gt;/bin/bash&lt;/executable&gt;
	    &lt;scriptfile&gt;${svc1.catalinaHome}/bin/shutdown.sh&lt;/scriptfile&gt;
	  &lt;/exec&gt;
	  
	&lt;/call&gt;
      &lt;/errorhandler&gt;
      
      &lt;!-- check to see if Tomcat is running --&gt;
      &lt;call id=&quot;assertServiceIsUp&quot;&gt;
	&lt;command name=&quot;listening&quot; module=&quot;netutil&quot;/&gt;
	&lt;options&gt;
	  &lt;option name=&quot;port&quot; value=&quot;8080&quot;/&gt;
	  &lt;option name=&quot;assert&quot; value=&quot;true&quot;/&gt;
	&lt;/options&gt;
      &lt;/call&gt;      
    &lt;/sequence&gt;
    
    
    &lt;!--Subprocess: InstallTomcat,InstallWar--&gt;
    &lt;sequence id=&quot;Packages-Install&quot;&gt;
      &lt;call id=&quot;install-TomcatZip&quot;&gt;
	&lt;command name=&quot;extract&quot; module=&quot;davutil&quot;/&gt;
	&lt;options&gt;
	  &lt;option name=&quot;url&quot; value=&quot;dav://pkgs/apache-tomcat-5.5.28.zip&quot;/&gt;
	  &lt;option name=&quot;type&quot; value=&quot;zip&quot;/&gt;
	  &lt;option name=&quot;dir&quot; value=&quot;${svc1.catalinaHome}&quot;/&gt;
	&lt;/options&gt;
      &lt;/call&gt;

      &lt;call id=&quot;install-SimpleWar&quot;&gt;
	&lt;command name=&quot;extract&quot; module=&quot;davutil&quot;/&gt;
	&lt;options&gt;
	  &lt;option name=&quot;url&quot; value=&quot;dav://pkgs/simple.war&quot;/&gt;
	  &lt;option name=&quot;type&quot; value=&quot;war&quot; /&gt;
	  &lt;option name=&quot;dir&quot; value=&quot;${svc1.catalinaHome}/webapps/simple&quot;/&gt;
	&lt;/options&gt;
      &lt;/call&gt;
    &lt;/sequence&gt;
    
    
    &lt;!--Subprocess: rewriteServerConf,rewriteAppConf--&gt;
    &lt;sequence id=&quot;Configure&quot;&gt;

      &lt;call id=&quot;rewriteServerConf&quot;&gt;
	&lt;command name=&quot;replace&quot; module=&quot;textutil&quot;/&gt;
	&lt;options&gt;
	  &lt;option name=&quot;basedir&quot; value=&quot;${svc1.catalinaHome}/conf&quot;/&gt;
	  &lt;option name=&quot;filebase&quot; value=&quot;server.xml&quot;/&gt;
	  &lt;option name=&quot;token&quot; value=&quot;${svc1.listenPort}&quot;/&gt;
	  &lt;option name=&quot;value&quot; value=&quot;${setting.Port.prodListen.value}&quot;/&gt;
	&lt;/options&gt;	
      &lt;/call&gt;

      &lt;call id=&quot;rewriteAppConf&quot;&gt;
	&lt;exec&gt;
	  &lt;executable&gt;/bin/sh&lt;/executable&gt;
	  &lt;!-- adhoc command calling an inline script --&gt;
	  &lt;script&gt;&lt;![CDATA[
	  cd ${svc1.catalinaHome}/webapps/simple/WEB-INF/classes;
	  /usr/bin/perl -p -i -e &quot;s/@dbDir@/${svc1.dbDir}/g&quot; *.properties
	  ]]&gt;&lt;/script&gt;
	  
	&lt;/exec&gt;
      &lt;/call&gt;
    &lt;/sequence&gt;

    

    &lt;!--Subprocess:startService,assertServiceIsUp--&gt;
    &lt;sequence id=&quot;Start&quot;&gt;
      &lt;call id=&quot;startService&quot;&gt;	    
	&lt;command name=&quot;listening&quot; module=&quot;netutil&quot;/&gt;
	&lt;options&gt;
	  &lt;option name=&quot;port&quot; value=&quot;${svc1.listenPort}&quot;/&gt;
	  &lt;option name=&quot;assert&quot; value=&quot;false&quot;/&gt;
	&lt;/options&gt;
      &lt;/call&gt;
      &lt;errorhandler&gt;
	&lt;call&gt;
	  &lt;command name=&quot;exec&quot; module=&quot;shellutil&quot;/&gt;
	  &lt;options&gt;
	    &lt;option name=&quot;script&quot; value=&quot;${svc1.catalinaHome}/bin/startup.sh&quot;/&gt;
	  &lt;/options&gt;
	  &lt;nodefilters&gt;
	    &lt;include&gt;
	      &lt;tags&gt;tomcats&lt;/tags&gt;
	    &lt;/include&gt;
	  &lt;/nodefilters&gt;
	&lt;/call&gt;
      &lt;/errorhandler&gt;
      &lt;call id=&quot;assertServiceIsUp&quot;&gt;	    
	&lt;command name=&quot;listening&quot; module=&quot;netutil&quot;/&gt;
	&lt;options&gt;
	  &lt;option name=&quot;port&quot; value=&quot;${svc1.listenPort}&quot;/&gt;
	  &lt;option name=&quot;assert&quot; value=&quot;true&quot;/&gt;
	  &lt;option name=&quot;maxwait&quot; value=&quot;10000&quot;/&gt;
	&lt;/options&gt;	
      &lt;/call&gt;	     
    &lt;/sequence&gt;

  &lt;/sequence&gt;
  &lt;!--End: Update--&gt;
&lt;/process&gt;
&lt;/syntaxhighlight&gt;

[[Category:Self-contained Process Definition]]</text>
    </revision>
  </page>
  <page>
    <title>Self-directed quick start</title>
    <id>1012</id>
    <revision>
      <id>14165</id>
      <timestamp>2010-11-10T16:02:19Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;ctl-depot&quot; to &quot;ctl-project&quot;</comment>
      <text xml:space="preserve">:''In-progress documentation. May be incomplete. Refer to [[Installation]] for current documentation.''

This is a step-by-step tutorial to installing, configuring and running ControlTier as well as setting up a simple project.

For this tutorial, please use a recent UNIX or Linux system and a ''bash'' shell. (CentOS/RHEL 5 is a common choice.) Create a new UNIX user for this tutorial. A sensible role-based user name would be ''deploy'', although it can be any name. Root access is not required. ControlTier uses about 1.2 GB of space, so have at least 3GB available; more is always helpful so that you can store more packages in the repository.

== Preparations ==

Before we proceed to the installation, we need to create the install location, download the packages, and make sure dependencies are available.

{{:Supported browsers}}

Please make sure you have one of these browsers available.


=== Step 1: Create install location ===

{{main|Self-contained directory convention}}

By convention, the install location on UNIX is &lt;code&gt;~/ctier&lt;/code&gt;. This location is stored in an environment variable called $CTIER_ROOT. Under $CTIER_ROOT, there will be a &lt;code&gt;pkgs&lt;/code&gt; directory where the various ControlTier components and their dependencies will reside.

Set this up with the following commands:

 mkdir -p ~/ctier/pkgs
 export CTIER_ROOT=~/ctier


=== Step 2: Download and install Java ===

ControlTier requires Sun Java 5. '''As of ControlTier 3.4.4, Java 6 is not supported.'''

Download the latest Java 5 JDK from [http://java.sun.com/javase/downloads/index_jdk5.jsp the Java 5 website]. Look for the Download button next to the heading &quot;JDK 5.0 Update 19&quot; (or latest version). This requires email registration.

:'''Note:''' You may use a system-installed Java, but generally, we encourage you to install a separate instance of Java to avoid version conflicts, especially on Linux. To use a system-installed Java, simply set the JAVA_HOME environment variable.

Choose the appropriate JDK for your hardware. (For example, use the 64-bit JDK if on a 64-bit Linux.) Save this file (e.g. ''jdk-1_5_0_19-linux-i586.bin'') to ''~/ctier/pkgs''.

Install the Java package into the pkgs directory:

 cd ~/ctier/pkgs
 sh jdk-1_5_0_19-linux-i586.bin     # replace with your JDK package

Type &quot;q&quot; to skip the license agreement and then type &quot;yes&quot; to agree.

After this is finished, set the $JAVA_HOME environment variable.

 export JAVA_HOME=~/ctier/pkgs/jdk1.5.0_19


=== Step 3: Install Graphviz (optional) ===

{{main|Dependencies}}

[http://graphviz.org Graphviz] is a visualization software package that the [[Workbench]] web application uses to generate graphs (command workflows, object relationships, etc.). Please consult your OS or distribution documentation on how to install it. This package is not strictly necessary; you'll just see broken image links for graphs if it's not available.

To quickly check if Graphviz is installed, use the command &lt;code&gt;which dot&lt;/code&gt;. If a binary is found, you are set.

For Red Hat or CentOS, this package is available in [https://rpmrepo.org/RPMforge RPMforge] and elsewhere. Look for the ''graphviz'' package, or add the RPMforge repositories to yum and then issue &lt;code&gt;yum install graphviz&lt;/code&gt; as root.

For Debian or Ubuntu, this package is available in main. Issue &lt;code&gt;apt-get install graphviz&lt;/code&gt; as root.

If you do not have root access, you may download and install the graphviz package into a location in your home directory. Just be sure that the &lt;code&gt;dot&lt;/code&gt; binary is in your PATH.


=== Step 4: Download and unpack ControlTier ===

{{main|Download}}
{{:Download}}

In this tutorial, we will use the [[ZIP installer]]. Download the zip package from the link above and save it into ''~/ctier/pkgs''. Then unzip the installer into this directory.

 cd ~/ctier/pkgs
 unzip ControlTier-*.zip

== Installation ==

{{main|Installation}}

At this point, you are ready to install ControlTier. Installation involves running the install script, configuring your shell profile, and starting the server.

:'''Note''': ControlTier uses ports 8080 for jetty and 1105 for log4j. If these ports are in use, refer to [[ZIP installer#Specifying and overriding defaults]] on how to customize the ports.


=== Step 1: Run install script ===

Change into the unpacked installer directory and run the installer.

 cd ~/ctier/pkgs/ControlTier-3.4.4   # replace with correct version if necessary

You can use the following command verbatim if &lt;code&gt;hostname&lt;/code&gt; returns a fully-qualified domain name.

 sh install.sh -Dserver.jetty.hostname=`hostname`

Otherwise, specify the fully qualified domain name manually.

 sh install.sh -Dserver.jetty.hostname=ctier.example.com

The install script takes about a minute to run.

=== Step 2: Configure bash profile ===

At the end of the installer output, you'll see that there needs to be a snippet of code added to your shell profile in order to set up the environment that ControlTier requires. This snippet is reproduced below for convenience. Add it to the end of your &lt;code&gt;~/.bash_profile&lt;/code&gt;.

 if [ -f ~/.ctierrc ]; then
   . ~/.ctierrc
 else
   echo ~/.ctierrc not found 1&gt;&amp;2
 fi

After you have done this, log out and log back in so that this change takes effect. Verify that the &lt;code&gt;.ctierrc&lt;/code&gt; has been sourced:

 env | grep CTL_HOME

You should see output along these lines:

 [deploy@ctvm1 ~]$ '''env|grep CTL_HOME'''
 CTL_HOME=/home/deploy/ctier/pkgs/ctl-1.4.4


=== Step 3: Start the ControlTier server ===

{{main|Server startup and shutdown}}

ControlTier uses the [http://www.mortbay.org/jetty/ Jetty application server] and its standard startup script. JETTY_HOME will be in your path since it is defined in &lt;code&gt;.ctierrc&lt;/code&gt;.

Start the server:

 jetty.sh start

Output:

 [deploy@ctvm1 ~]$ '''jetty.sh start'''
 Starting Jetty: STARTED Jetty Mon Jun 22 07:55:24 PDT 2009
 [deploy@ctvm1 ~]$ 2009-06-22 07:55:24.682::INFO:  Logging to STDERR via org.mortbay.log.StdErrLog
 2009-06-22 07:55:24.872::INFO:  Redirecting stderr/stdout to /home/deploy/ctier/pkgs/jetty-6.1.14/logs/2009_06_22.stderrout.log

The server takes a few moments to start up. You may tail the log above until you see this line (or just wait a few moments):

 2009-06-22 07:55:59.09::INFO:  Started SelectChannelConnector@0.0.0.0:8080

To verify the server is running, browse to port 8080 on your server: http://ctier.example.com:8080/

The server home page will appear. You should see a screen similar to this, with general installation information:

[[Image:Landingpage.png]]

== Creating a new project ==

{{main|Creating a project}}

[[Workbench]] is ControlTier's main web interface. It encompasses the functions of visualization tool, automation designer, and metadata repository.

We will create a project to store a collection of objects representing nodes, packages, services, and processes.


=== Step 1: Log in to Workbench ===

From the ControlTier server home page, click the ''Workbench'' link. Alternatively, you may browse directly to Workbench: http://ctier.example.com:8080/itnav

The out-of-box credentials are username ''default'' and password ''default''.

[[Image:Workbench login.png]]

Click Login to continue.

=== Step 2: Create the project ===

From the screen that follows, click ''New Project'' on the right hand side. (This functionality is also available in the [[Admin page]], even after the initial project has been created.) You will see this:

[[Image:workbench-create-project-form.png]]

For this tutorial, use the project name ''demo''. Optionally, you may fill in the description and organization fields.

The project creation process takes a few minutes. During project creation, Workbench sets up the metadata repository and unpacks a copy of the standard modules into it.

[[Image:workbench-create-project-progress.png]]

=== Alternate project creation methods ===

There are two other ways to create your project:
* You can [[Creating_a_project#Option_2:_Create_a_project_via_the_command_line|create the project on the command line]] using the [[ctl-project]] command.
* You can have the [[CLI Installer#Option to automatically create a default project|install script create an initial project on your first login]].

[[Category:Incomplete]]</text>
    </revision>
  </page>
  <page>
    <title>SelfContainedDirectory</title>
    <id>33</id>
    <redirect />
    <revision>
      <id>5815</id>
      <timestamp>2009-06-22T23:01:46Z</timestamp>
      <contributor>
        <username>Redirect fixer</username>
        <id>9</id>
      </contributor>
      <comment>[[Self-contained Directory Convention]] has been moved, it is now a redirect to [[Self-contained directory convention]]</comment>
      <text xml:space="preserve">#REDIRECT [[Self-contained directory convention]]</text>
    </revision>
  </page>
  <page>
    <title>Self Contained Directory Convention</title>
    <id>841</id>
    <redirect />
    <revision>
      <id>5816</id>
      <timestamp>2009-06-22T23:06:49Z</timestamp>
      <contributor>
        <username>Redirect fixer</username>
        <id>9</id>
      </contributor>
      <comment>[[Self-contained Directory Convention]] has been moved, it is now a redirect to [[Self-contained directory convention]]</comment>
      <text xml:space="preserve">#REDIRECT [[Self-contained directory convention]]</text>
    </revision>
  </page>
  <page>
    <title>Server-setup.sh</title>
    <id>1934</id>
    <redirect />
    <revision>
      <id>13011</id>
      <timestamp>2010-07-09T15:29:53Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[Server-setup Command Reference]]</comment>
      <text xml:space="preserve">#REDIRECT [[Server-setup_Command_Reference]]</text>
    </revision>
  </page>
  <page>
    <title>Server-setup Command Reference</title>
    <id>1932</id>
    <revision>
      <id>13014</id>
      <timestamp>2010-07-09T15:43:40Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Command-line utilities&lt;/categorytree&gt;
== Synopsis ==
&lt;pre&gt;
usage: server-setup [options]
options:
 -D &lt;property=value&gt;   property=value pair used during software setup
 -f,--defaults         default.properties file
 -h,--help             print this message
 -v,--verbose          verbose mode
Examples:
server-setup -f defaults.properties -Dkey=val
server-setup -Dserver.jetty.hostname=development
&lt;/pre&gt;

== Overview ==

The server-setup.sh command is used after installing the ControlTier software distribution to reconfigure server configuration.

== Options ==

&lt;table border=&quot;1&quot;&gt;
&lt;tr&gt;
&lt;th&gt;Option&lt;/th&gt;&lt;th&gt;alternate&lt;/th&gt;&lt;th&gt;argument&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-D&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;key=val&lt;/td&gt;&lt;td&gt;Specifies a key/value pair that overrides a property in the installer's defaults.properties file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-f&lt;/td&gt;&lt;td&gt;--defaults&lt;/td&gt;&lt;td&gt; file&lt;/td&gt;&lt;td&gt;Specifies a key/value pair that overrides a property in the installer's defaults.properties file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-h&lt;/td&gt;&lt;td&gt;--help&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;Prints command usage info to the console&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-v&lt;/td&gt;&lt;td&gt;--verbose&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;Verbose mode provides more output from the installer&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

== Default properties file ==

The [[ZIP_installer|Zip installer]] installs the ControlTier software using configuration data located in the &quot;default.properties&quot; file at the root of the package extraction directory. The [[RPM_installer|Rpm installer]] places it in: $CTIER_ROOT/pkgs/configure/default.properties.

The default.properties file contains several dozen configuration settings governing everything such as: install directories, network ports, smtp, hostname, user names, passwords, and project settings.

You can edit this file and customize any of the settings. When you run the installer, it loads the settings and then begins the installation process.

== Reconfiguration ==

{{server-setup/reconfiguration}}

== See also ==
* For client reconfiguration see [[CTL-SETUP Command Reference]]

&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Installers]]
[[Category:Command-line utilities]]</text>
    </revision>
  </page>
  <page>
    <title>Server Startup and Shutdown</title>
    <id>1014</id>
    <redirect />
    <revision>
      <id>5827</id>
      <timestamp>2009-06-23T00:01:24Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <comment>[[Server Startup and Shutdown]] moved to [[Server startup and shutdown]]: cap</comment>
      <text xml:space="preserve">#REDIRECT [[Server startup and shutdown]]</text>
    </revision>
  </page>
  <page>
    <title>Server data storage</title>
    <id>1321</id>
    <revision>
      <id>14047</id>
      <timestamp>2010-11-10T15:32:14Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;/jackrabbit/repository/workbench&quot; to &quot;/jackrabbit/repository/controltier/projects&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Configuration&lt;/categorytree&gt;

This page provides an overview to the ControlTier server's data storage scheme. See also [[High availability and large scale configuration]].

The ControlTier server is comprised of several webapps, each of which can be individually configured to manage their own storage needs. ControlTier is built on several other popular open source projects that we hope will make ControlTier configuration options very transparent. 

The diagram below describes the server webapps and their configuration to the back end storage layers. Asterisks denote non-default options that a user can substitute.

[[Image:server-datastorage-overview.png]]

ControlTier uses a blend of relational database and file system storage to maintain server data. The choice of this combination was driven by this concern: out of the box ease of use. For users requiring high availability and performance scale the ControlTier server can be configured to take advantage of alternative storage mechanisms.


==Considerations==
Besides the obvious requirement to reliably maintain a consistent set of data, several other considerations should be kept in mind when planning for production:

===Availability===
Firstly, ControlTier itself should not be operationally critical to the runtime of the services it manages. In other words, application runtime should not be affected if the server goes down. What would be affected is your ability to manage the application. Secondly, there are two primary resources that CTL typically needs to carry out its actions:
# [[WebDAV]] resources: Deployment artifacts like packages or other files. Except for dynamic model lookups, access is to the WebDAV.
# [[Project]] model: Information about the resource model. The data service within Workbench provides dynamic access to any model data.
Out of the box, ControlTier assumes a &quot;pull-based&quot; distribution scheme therefore stock components expect to get files from the server. It is possible to institute a &quot;push-based&quot; distribution scheme where files needed by the target host are pre-staged and URLs and paths address local resources.

To increase availability two general approaches can be utilized
* VIP addressing: Configure the clients to use a VIP (or managed CNAME). This provides a hook to change what is the master server
* Override core type command hooks to build in custom fail over. The [[Deployment]]#Get-Properties and [[Package]]#get commands are the two primary points where the server is accessed. These commands can be overridden to contain specialized logic to lookup and find an alternative server or graceful failure.

===Replication===
To provide a timely failure recovery process, a data replication scheme entails making regular and consistent copies of the operational data in the server.
Each of the webapps in the ControlTier server is configured out of the box to use a storage mechanism that balances ease of use and performance. This led to a configuration where model and webdav resources are stored on the file system, while job and report data is stored in relational databases. There are several choices to replicate the data:
* Default configuration: Using the default configuration that assumes HSQLDB and file system, copy the data to a remote location.
* Shared RDB: Each of the webapps support a relational database configuration. One might configure each of the webapps to use a common RDB and then institute RDB replication. [[Image:server-datastorage-common-rdb.png|thumb|Shared RDB]]

* WebDAV: WebDAV content can be replicated using caching proxies (eg [http://www.squid-cache.org squid])

===Model sources===

We emphatically recommend production users to maintain model data via source files stored in a source code repository. See [[ProjectBuilder]] for a utility type that assists in the checkout, build and upload of model definition and instance data.

===Backup===

Besides a replication scheme, a production ControlTier server should be regularly backed up (see [[Backing up ControlTier]]).

==Server webapps==
Specifics about the server webapps are discussed separately in the following sections.

===Jobcenter and Reportcenter===
Both [[Jobcenter]], and [[Reportcenter]] are [http://www.grails.org Grails] based web applications. Each in turn store their data to relational databases via GORM. Grails GORM is based on the Hibernate object/relational mapping framework and thus, both Reportcenter and Jobcenter database configuration boils down to a Hibernate datasource.

Out of the box, ControlTier configures [http://hsqldb.org/ HSQLDB] as the relational database but many other choices are supported via DataSource configuration.

See the following links for more info: 
* http://docs.codehaus.org/display/GRAILS/DataSources+New
* http://hsqldb.org/web/hsqlDocsFrame.html

===Workbench===
Workbench provides a repository to maintain resource model definitions and data. Command execution is driven by views of the resource model. This resource model is obtained via &quot;pull-based&quot; HTTP/GET from clients to the server. See [[High availability_and large scale configuration]] for information about packaging the model data to pre-stage it to support a &quot;push-based&quot; approach.

The model uses RDF as the representation format and [http://jena.sourceforge.net/documentation.html Jena] as the API to manage the RDF data. Jena supports both file system and RDB model storage backends:
* fs: Store the model as a set of files in the file system
* rdb: Store the model in a relational database
** MySQL, Oracle, PostgreSQL

The following Workbench configuration files specify the data storage mechanism. These configurations can be found in JETTY_HOME/webapps/itnav/WEB-INF/classes:
* bootstrap.properties: Defines the type of Jena backend and their settings
** &lt;syntaxhighlight lang=&quot;javascript&quot;&gt;ngps.workbench.backend.type = &quot;fs&quot;&lt;/syntaxhighlight&gt;
* runtime.properties: Defines the path to the working set of RDF files if the &quot;fs&quot; backend was configured.
** &lt;syntaxhighlight lang=&quot;javascript&quot;&gt;server.rdfdata.path = ${env.ctier_root}/workbench/rdfdata&lt;/syntaxhighlight&gt;

===WebDAV===
All deployment artifacts are stored in the [[WebDAV]] repository. Out of the box, the &quot;FileDataStore&quot; type is configured in Apache Jackrabbit.

The default location for the stored files is here:
&lt;syntaxhighlight lang=&quot;javascript&quot;&gt;${env.ctier_root}/jackrabbit/repository/controltier/projects&lt;/syntaxhighlight&gt;

The Apache Jackrabbit project documentation describes how to use alternative storage mechanisms: [http://wiki.apache.org/jackrabbit/DataStore], [http://jackrabbit.apache.org/jackrabbit-configuration.html#JackrabbitConfiguration-Persistenceconfiguration].

See also 
*  [[WebDAV performance]] wiki page comparing Jackrabbit and Apache/mod_dav
* [[High_availability_and_large_scale_configuration#Package_artifact]] for more information on a configuration that uses caching proxy servers.

[[Category:Configuration]]</text>
    </revision>
  </page>
  <page>
    <title>Server landing page</title>
    <id>52</id>
    <revision>
      <id>14210</id>
      <timestamp>2010-11-10T17:28:41Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;noinclude&gt;&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Installation&lt;/categorytree&gt;&lt;/noinclude&gt;

{{Caution| Be sure the ControlTier server is installed and running before trying to access the webapps. If you installed or manage the ControlTier server, then see [[Status ControlTier]] to check if it is running.}}

After [[Installation]] and start up, you should be able to access the ControlTier server landing page.
Your administrator should tell you the URL. If you have installed ControlTier yourself on your local machine, the default URL is http://localhost:8080/ .

[[Image:landingpage.png]]

The landing page contains a number of links to the various server applications. Click the link to the desired application. 

You will be prompted for a user name and password to login. Ask the administrator who installed the server to give you a login. The default installation will have created a user called &quot;default&quot; (password &quot;default&quot;) which you should change. Once logged into the first server application, you will see a menu that lets you change to any other ControlTier server application.


&lt;noinclude&gt;
{{Installation/navbox}}
[[Category:Installation]]
&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Server logs</title>
    <id>378</id>
    <revision>
      <id>14209</id>
      <timestamp>2010-11-10T17:28:27Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Installation&lt;/categorytree&gt;
This page describes the log files produced by the [[ControlTier server]].

For CTL command logging see: [[Command logging]].

==Jetty Logs==

Jetty logs are located in the typical location, JETTY_HOME/logs. The JETTY_HOME environment variable will have been set in the $HOME/.ctierrc file.
As of 3.2, log files are found in the directory: $CTIER_ROOT/pkgs/jetty-6.1.10/logs

eg:
&lt;pre&gt;
ls $JETTY_HOME/logs
2009_01_21.request.log  2009_01_21.stderrout.log  jetty.pid  workbench.log
&lt;/pre&gt;

===request.log===
Contains information about each HTTP request. This is like a web access log.
You will see the JackRabbit WebDAV requests here.

Request log file name is prefixed with the date: YYYY_MM_DD (eg, 2009_01_21.request.log)

===stderrout.log===

Contains all standard error and output messages. This contains messages from all the webapps.

Error log file name is prefixed with the date: YYYY_MM_DD (eg, 2009_01_21.stderrout.log)

===workbench.log===
This contains messages produced by the Workbench application

&lt;noinclude&gt;
{{Installation/navbox}}
[[Category:Logging]]
&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Server migration</title>
    <id>1863</id>
    <revision>
      <id>14268</id>
      <timestamp>2010-11-10T21:58:14Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">A situation may arise where you need to migrate to a different machine to serve as your ControlTier server. There are three main approaches to a migration of this sort:
* '''Move your entire installation wholesale:''' The quickest way, assuming that you do not plan to upgrade ControlTier versions and your old and new boxes are sufficiently similar.
* '''Migrate individual projects using project archive (PAR) files:''' Recommended if you're upgrading versions as well as migrating.
* '''Reload your entire project from ProjectBuilder source files:''' Cleanest, but most time-consuming method. Recommended if you are also making significant model changes at the same time.

== Move your entire installation wholesale ==
{{caution|This method is recommended only if you used the zip install and the self-contained installation convention.}}
# Back up $CTIER_ROOT on the old server.
# Unpack $CTIER_ROOT on the new server.
# Copy &lt;code&gt;.ctierrc&lt;/code&gt; and &lt;code&gt;.bashrc&lt;/code&gt; from your old server to your new server.
# Repoint the DNS name of your ctier server to the new server.

=== Caveats ===
* Java must be in the same location on both systems, or be installed inside the $CTIER_ROOT.
* The user running ControlTier needs to be the same on both boxes.

== Migrate individual projects using project archive files ==
=== Step 1: Create project archive (PAR) file(s) ===
Go to (old server's) Workbench and open your project. Click the Admin button on the right hand side. Then pick the '''Create Archive''' command. In the screen that follows, use these options:
* Where should the Archive file be saved? '''Save to DAV share'''
* Which Module Jars should be included? '''All Module Jars'''
Repeat for each project.
=== Step 2: Install new server ===
* Temporarily add an /etc/hosts entry on your new box pointing the DNS hostname of the server (e.g. &lt;code&gt;ctier.example.com&lt;/code&gt;) to itself.
** You may want to go as far as adding an iptables rule to block connectivity between your new server and your production server.
* Go through the normal [[Installation]] process for the new server. Override the server name to be the eventual name of the server, for which you just added the entry in /etc/hosts.
{{caution|If you used the RPM install, there is a bug in &lt;code&gt;ctl-setup.sh&lt;/code&gt; in 3.4.10 where the client's hostname will not be changed. This may manifest itself as inconsistent behavior of ctl-project and the message &quot;Unauthorized jobs not shown&quot; in Jobcenter. '''You will need to update the hostname manually by using sed or perl to replace all instances of the old hostname with the new hostname for all files in &lt;code&gt;$CTL_BASE/etc&lt;/code&gt;.'''}}

=== Step 3: Copy the WebDAV repository ===
In this step, you need to copy the contents of the old WebDAV repository into the new.
* On Windows or MacOS, you can use Web Folders client, or any other WebDAV client, to drag and drop all the files from the old WebDAV to the new.
* On Linux, use the davfs2 filesystem to mount the old and new WebDAV and copy the files from the old WebDAV to the new one. Use &lt;code&gt;rsync -av&lt;/code&gt; if you plan on doing this more than once. Otherwise, &lt;code&gt;cp&lt;/code&gt; should suffice.
** [http://savannah.nongnu.org/cookbook/?group=davfs2 Davfs2 Project home page]
** [http://packages.sw.be/davfs2/ Davfs2 RPM packages for RHEL/CentOS]
=== Step 4: Import the PAR file(s) ===
* Go to your new Workbench and click the Admin button. Then click &quot;Unarchive&quot;. The PAR file that you saved in step 1 should be available. Pick that and proceed.
* Optionally, if you installed a newer version of ctier on your new server, you should also update the module library:
*# Locate the controltier-seed.jar archive from the installer directory: (e.g. &lt;code&gt;ControlTier-3.4.5/pkgs/ctl-1.4.5/lib/extensions/commander/jars/controltier-seed-3.4.5.jar&lt;/code&gt;)
*# Load the new seed jar from the installer using either ProjectBuilder or Workbench into each project:
*#* ProjectBuilder: Run the [http://controltier.sourceforge.net/docs/latest/core/reference/user/ProjectBuilder/commands/load-library.html load-library] command: &lt;syntaxhighlight lang=&quot;bash&quot;&gt;ctl -m ProjectBuilder -c load-library -- -jar /path/to/controltier-seed-3.x.x.jar&lt;/syntaxhighlight&gt;
*#*  Workbench: Go to the Admin page (eg, http://strongbad:8080/itnav/do/menu/Admin) and press the &quot;Import Seed&quot; button and upload the jar file.  Check the box &quot;Restage all submodules of imported modules after import&quot;.
*# Remove the old seed from the WebDAV: &lt;syntaxhighlight lang=&quot;bash&quot;&gt;ctl -m davutil -c delete -- -url dav://seeds/controltier-seed.jar&lt;/syntaxhighlight&gt;
Repeat this procedure if you have more than one project.
=== Step 5: Copy Jobcenter and Reportcenter databases ===
Copy the files &lt;code&gt;$CTIER_ROOT/jobcenter/grailsdb.*&lt;/code&gt; and &lt;code&gt;$CTIER_ROOT/reportcenter/grailsdb.*&lt;/code&gt; from the old box to the new box.

=== Step 6: Repoint clients ===
* Repoint DNS to point to your new server and remove the temporary /etc/hosts entry.
* If you upgraded ControlTier in this process, you also need to upgrade the clients. Use the regular client-only installation procedures. Then, afterwards, run &lt;code&gt;ctl-project -p project -a install&lt;/code&gt; for each project on each node. (You can use [[ctl-exec]] for this.)

=== Caveats ===
Be careful that you make sure /etc/hosts on your new server points your server hostname to itself during the migration. Otherwise, it may cause production issues by connecting to the old server instead of the new.

== Reload your entire project from ProjectBuilder source files ==
# Temporarily add an /etc/hosts entry on your new box pointing the DNS hostname of the server (e.g. &lt;code&gt;ctier.example.com&lt;/code&gt;) to itself. Or, you can choose to skip this step and just use the real name of the new server.
# Go through the normal [[Installation]] process for the new server. Override the server name to the the eventual name of the box that you just added to /etc/hosts, if needed.
# Recreate your node objects, either from node.xml or by re-registering each node from the node itself using &lt;code&gt;ctl-project -p create&lt;/code&gt;. If you choose the latter option, you need to add an /etc/hosts entry on those nodes as well, so that the nodes talk to the correct server.
# Recreate your project, adding ProjectBuilder objects and rebuilding modules as necessary. Reload all your objects and jobs from your ProjectBuilder source base.
# Remove and recreate the depot on each node using the ctl-project actions remove, create and install, in that order. You can use [[ctl-exec]] to do this.
# Repoint DNS to your new server, if needed.
=== Caveats ===
* If you're keeping your server name, be careful that you make sure /etc/hosts on your new server points your server hostname to itself during the migration. Otherwise, it may cause production issues by connecting to the old server instead of the new.
* This method does not preserve any state information that you may have had in your old project, such as package files or package assignments. It is, in effect, starting over from before you ever built or deployed anything.

{{Guide/navbox}}
{{Installation/navbox|state=uncollapsed}}
{{Manual/navbox}}
{{Reference/navbox}}

[[Category:Installation]]</text>
    </revision>
  </page>
  <page>
    <title>Server startup and shutdown</title>
    <id>22</id>
    <revision>
      <id>13025</id>
      <timestamp>2010-07-28T23:29:27Z</timestamp>
      <contributor>
        <username>Milind.khandekarAtmotorola.com</username>
        <id>91</id>
      </contributor>
      <minor/>
      <comment>Wow, another instance of same word repeated, twice twice in a day :)</comment>
      <text xml:space="preserve">&lt;noinclude&gt;
&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Installation&lt;/categorytree&gt;

The [[ControlTier server]] applications run inside a common Jetty instance. Unix installations use the &lt;code&gt;jetty.sh&lt;/code&gt; command to manage startup and shutdown. See the [http://docs.codehaus.org/display/JETTY/Jetty+Wiki Jetty Wiki] for authoritative information on Jetty management.

''' Assumptions '''

# You have installed the ControlTier server and are on that host. See [[Installation]].
# ControlTier environment variables have been set. See [[ControlTier Environment Variables]].
&lt;/noinclude&gt;
{{Server/startup and shutdown}}

&lt;noinclude&gt;
{{Installation/navbox}}
[[Category:Installation]]
&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Service</title>
    <id>373</id>
    <redirect />
    <revision>
      <id>10093</id>
      <timestamp>2009-12-11T15:50:16Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[Category:Service]]</comment>
      <text xml:space="preserve">#REDIRECT [[:Category:Service]]</text>
    </revision>
  </page>
  <page>
    <title>Service Concepts</title>
    <id>1645</id>
    <redirect />
    <revision>
      <id>11154</id>
      <timestamp>2009-12-14T02:28:25Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>moved [[Service Concepts]] to [[Service design pattern]]</comment>
      <text xml:space="preserve">#REDIRECT [[Service design pattern]]</text>
    </revision>
  </page>
  <page>
    <title>Service Object Control Scripts</title>
    <id>935</id>
    <redirect />
    <revision>
      <id>5127</id>
      <timestamp>2009-05-04T14:34:50Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>[[Service Object Control Scripts]] moved to [[Screencast: Configuring a Service with your start and stop scripts]]</comment>
      <text xml:space="preserve">#REDIRECT [[Screencast: Configuring a Service with your start and stop scripts]]</text>
    </revision>
  </page>
  <page>
    <title>Service Package Deployment Example</title>
    <id>2085</id>
    <redirect />
    <revision>
      <id>14909</id>
      <timestamp>2010-11-30T16:27:39Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <comment>moved [[Service Package Deployment Example]] to [[Service package deployment example]]: Make consistent with Windows naming</comment>
      <text xml:space="preserve">#REDIRECT [[Service package deployment example]]</text>
    </revision>
  </page>
  <page>
    <title>Service Settings and Attributes</title>
    <id>744</id>
    <revision>
      <id>10336</id>
      <timestamp>2009-12-11T22:10:25Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">= Overview =

This document describes the predefined Setting subtypes and their declared Attribute names that are associated with the [[Core Type Guide#Service|Service]] type.

Complete reference documentation for these related types are here:

* [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Service.html#related_types Service Reference - related types]

= Settings =

{| border=&quot;1px solid #aaa&quot; cellpadding=&quot;5&quot; cellspacing=&quot;0&quot;
    ! Setting !! attribute !! purpose
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Service.html#type_Port Port] || ''port'' || A network port
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Service.html#type_ServiceIsDownExecutable ServiceIsDownExecutable] || ''service-isdown-executable'' || The executable used during assertServiceIsDown
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Service.html#type_ServiceIsDownScript ServiceIsDownScript] || ''service-isdown-script'' || The script used during assertServiceIsDown
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Service.html#type_ServiceIsUpExecutable ServiceIsUpExecutable] || ''service-isup-executable'' || The executable used during assertServiceIsUp
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Service.html#type_ServiceIsUpScript ServiceIsUpScript] || ''service-isup-script'' || The script used during assertServiceIsUp
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Service.html#type_ServiceStartExecutable ServiceStartExecutable] || ''service-start-executable'' || The executable used during startService
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Service.html#type_ServiceStartScript ServiceStartScript] || ''service-start-script'' || The script used during startService
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Service.html#type_ServiceStopExecutable ServiceStopExecutable] || ''service-stop-executable'' || The executable used during stopService
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Service.html#type_ServiceStopScript ServiceStopScript] || ''service-stop-script'' || The script used during stopService
|}
{{Attributes Reference Footer}}

[[Category:Service]]</text>
    </revision>
  </page>
  <page>
    <title>Service Subtype Control Scripts</title>
    <id>1879</id>
    <redirect />
    <revision>
      <id>12553</id>
      <timestamp>2010-04-19T18:51:54Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <comment>moved [[Service Subtype Control Scripts]] to [[Service subtype control scripts]]</comment>
      <text xml:space="preserve">#REDIRECT [[Service subtype control scripts]]</text>
    </revision>
  </page>
  <page>
    <title>Service Type Guide</title>
    <id>1185</id>
    <redirect />
    <revision>
      <id>6702</id>
      <timestamp>2009-07-08T00:18:49Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>[[Service Type Guide]] moved to [[Deployment Type Guide]]</comment>
      <text xml:space="preserve">#REDIRECT [[Deployment Type Guide]]</text>
    </revision>
  </page>
  <page>
    <title>Service design pattern</title>
    <id>708</id>
    <revision>
      <id>11153</id>
      <timestamp>2009-12-14T02:28:25Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>moved [[Service Concepts]] to [[Service design pattern]]</comment>
      <text xml:space="preserve">&lt;noinclude&gt;&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Service&lt;/categorytree&gt;&lt;/noinclude&gt;
= Intent =

* Define an object that encapsulates the lifecycle of a software service.
* Abstract the startup and shutdown methods to control the runtime state of a service.

= Problem =

We want to control the runtime state of application services, but each service must be controlled through proprietary or operating specific interfaces, and often must be invoked differently depending on application environment context.    

= Discussion =

While the [[Core Type Guide#Deployment|Deployment]] type provides a standard interface and properties to manage the life cycle of a software configuration, it does not assume the software has runtime state. For example, imagine that following the installation and configuration of a Deployment, a file must be executed to start a long running process to handle requests. One would need to know how to check if the process was already running to avoid starting multiple processes which may cause undesirable conflicts. Likewise, if one had to shut down the service, one might need to consider what to do if the normal stop operation fails.

When one considers the common details and requirements for services they can be organized into different categories:

* parameters: these are key attributes that describe the service 
* state management: these are the sequence of procedures needed to start,
stop and check status of the service.

Because service implementations vary widely and do not present a consistent management interface, the administrator must often possess either intimate knowledge of the application code or operating system features to control a service&amp;apos;s runtime state.

[[Image:service-discussion-problem.png|problem]]

Compounding the need to have a consistent approach to starting and stopping a wide variety of services, the administrator must also adjust for environmental differences; varying command line options or running commands in different directories.

A preferred option would be to define an abstraction that builds on the Deployment type which already includes support for coordinating the installation and configuration of a software component but to add to that, standard strategies for managing the runtime state of a service.

Using this model, a generic logical skeleton for starting up and shutting down a service can be embodied yet the details for interfacing with the underlying service executables and or operating system can be provided by classes derived from the generic abstraction.    

[[Image:service-discussion-solution.png|solution]]

This approach is particularly useful because it separates the variant and invariant behavior, minimizing the amount of code to be written.

= Structure =

The Service type inherits the capabilities and relationships from [[Core Type Guide#Deployment|Deployment]] incorporating startup and shutdown logic to the deployment update sequence.

[[Image:service-structure.png|structure]]

The essential service properties are:

&lt;table&gt;
&lt;caption&gt;Properties&lt;/caption&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;startup-rank&lt;/td&gt;&lt;td&gt;A value specifying a level relative to other services.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

= Example =

The Service type defines an object that provides methods to manage the runtime state and deployment of a software service.

The diagram below describes the startup of an Apache web server managed via the Service abstraction. One can begin integrating the Service&amp;apos;s procedural interfaces using the provided &lt;code&gt;apachectl&lt;/code&gt; command. For example, startService can be defined as &lt;code&gt;apachectl start&lt;/code&gt; and stopService as &lt;code&gt;apachectl stop&lt;/code&gt;. But one might find themselves in the situation where they are unable to use the standard apachectl command due to the way Apache was installed or must be invoked. In these cases, the Service runtime state management commands can be defined to meet the specific needs yet the administrator can still rely on the standard management interfaces: &lt;code&gt;Stop&lt;/code&gt;, &lt;code&gt;Start&lt;/code&gt; and &lt;code&gt;Status&lt;/code&gt;

[[Image:service-example.png|example]]

= Check List =

# Identify the procedures for starting and stopping the application service
# Define the assertServiceIsUp, assertServiceIsDown, startService and stopService commands using the identified procedures.

= Rules of Thumb =
= Commands =

[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Service.html#Commands Service Commands Reference]

==assertServiceIsDown==

Confirm the service process is down.

This command is invoked by [[#Stop]], and is configured via the ''service-isdown-script'' [[Service Settings and Attributes|attribute]].

* [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Service.html#cmd_assertServiceIsDown Reference]

==assertServiceIsUp==

Confirm the service process is running.

This command is invoked by [[#Start]] and [[#Status]], and should be configured via the ''service-isup-script'' [[Service Settings and Attributes|attribute]].

* [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Service.html#cmd_assertServiceIsUp Reference]

== Prepare ==
Prepare the service for the update. 

This workflow executes the ''Install'' command inherited from [[Core Type Guide#Deployment|Deployment]].

* [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Service.html#cmd_Prepare Reference]

== Restart==
Restart the service process.

Runs the workflow:

# [[#Stop|Stop]]
# [[#Start|Start]]

* [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Service.html#cmd_Restart Reference]

==Start == 
Start the service process.

Runs the workflow:

# [[#assertServiceIsUp|assertServiceIsUp]]

* [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Service.html#cmd_Start Reference]

==startService==

Start the service process.  

This command is invoked by [[#Start]] and should configured via the ''service-start-script'' [[Service Settings and Attributes|attribute]].

* [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Service.html#cmd_startService Reference]

==Status==
Get the status of the service.

Runs the workflow:

# [[#assertServiceIsUp|assertServiceIsUp]]

* [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Service.html#cmd_Status Reference]

==Stop==
Stop the service process.

Runs the workflow:

# [[#assertServiceIsDown|assertServiceIsDown]]

* [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Service.html#cmd_Stop Reference]

==stopService==

Stop the service process. 

This command is invoked by [[#Stop]] and should be configured via the ''service-stop-script'' [[Service Settings and Attributes|attribute]].

* [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Service.html#cmd_stopService Reference]

= Related Types =

*  [[Core Type Guide#Site|Site]]

Supertype:

*  [[Core Type Guide#Deployment|Deployment]]

{{Core Type Guide Linkback}}

[[Category:Service]]</text>
    </revision>
  </page>
  <page>
    <title>Service package deployment example</title>
    <id>779</id>
    <revision>
      <id>14908</id>
      <timestamp>2010-11-30T16:27:39Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <minor/>
      <comment>moved [[Service Package Deployment Example]] to [[Service package deployment example]]: Make consistent with Windows naming</comment>
      <text xml:space="preserve">&lt;noinclude&gt;&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Examples&lt;/categorytree&gt;&lt;/noinclude&gt;
{{Version Required|3.4.3}}

:''Note:'' this document describes how to run the example on Unix. for Windows instructions, see [[Windows service package deployment example]].

This example shows the basics of using an object of the [[Core_Type_Guide#Service|Service]] type to manage the deploy life cycle of a long running application Service. The [[Core_Type_Guide#Service|Service]] type defines several commands useful for managing the package installation, and startup shutdown cycle of a software service.

This example shows you how to do the following things:
# upload a Zip file containing the Apache Tomcat distribution to the repository
# use a finish script to customize the Zip post-installation step
# use the &lt;code&gt;Deploy&lt;/code&gt; life cycle command 
# use the &lt;code&gt;Start&lt;/code&gt;,  &lt;code&gt;Stop&lt;/code&gt;, and &lt;code&gt;Status&lt;/code&gt; life cycle commands
# customize the implementation of these commands using your shell scripts to perform the logic
# use the [[project.xml]] resource model format to define a Service resource

This example provides a working set of scripts to implement the logic to manage a Tomcat application deployment. Both the Tomcat software itself along with a simple webapp application will be deployed using the Service. 

The &lt;code&gt;Deploy&lt;/code&gt; life cycle command provides a consistent interface to managing the normal steps of software deployment to a Service. The Service type defines it as a workflow command that calls &lt;code&gt;Stop, Packages-Install, Configure, Start&lt;/code&gt;. 

Services can be configured to deploy one or more software packages, coordinated by the &lt;code&gt;Packages-Install&lt;/code&gt; command. &lt;code&gt;Packages-Install&lt;/code&gt; iterates over each package, invoking the [[Core_Type_Guide#Package|Package]] type's &lt;code&gt;Install&lt;/code&gt; command on each package that has been associated as a resource to a Service. The [[Core_Type_Guide#Package|Package]] type's &lt;code&gt;Install&lt;/code&gt; command provides a consistent interface to manage the normal steps of a package deployment.

The life cycle commands &lt;code&gt;Start&lt;/code&gt; and &lt;code&gt;Stop&lt;/code&gt; work in a similar way.  Each one runs another command designed to &quot;assert&quot; that the run-state of the process is as expected. For example, the &lt;code&gt;Start&lt;/code&gt; command runs &lt;code&gt;assertServiceIsUp&lt;/code&gt;.  This &quot;assert&quot; command does one thing: it checks that the service is in the state specified (running or not running), and if it doesn't meet that expectation, it fails.  If it succeeds, then the &lt;code&gt;Start/Stop&lt;/code&gt; command knows it doesn't have to do anything else, and the entire command succeeds.  However, if the &quot;assert&quot; command fails, then the &lt;code&gt;Start/Stop&lt;/code&gt; command has to change the state of the service.  It does this by subsequently invoking the &lt;code&gt;startService&lt;/code&gt; or &lt;code&gt;stopService&lt;/code&gt; command.  These commands are meant to perform whatever action is necessary to start or stop the underlying service.  If this command succeeds, then the &lt;code&gt;Start/Stop&lt;/code&gt; command has succeeded, otherwise it has failed.

This mechanism separates the logic of managing the run-state of a service into discrete tasks that have clear semantics, allowing this abstract pattern to apply to the wide range of software services that need to be managed.

This example will use a set of simple shell scripts to plug in to each of these discrete tasks, allowing us to demonstrate the behavior of the life cycle commands while only simulating an actual running service.  You will see that the implementation of each of these tasks is simple and easy to customize for your own service management needs.

* For more information, see the [[Service Concepts]] and [[Package Concepts]] documents.

==Dependencies==
This demo depends on these dependencies.
* ControlTier &amp;mdash; 3.4.3
** Meet the prerequisites and install ControlTier according to the [[Installation|Installing ControlTier]] instructions.
* Tomcat &amp;mdash; 5.5.28 
** Download Zip: [http://tomcat.apache.org/download-55.cgi http://tomcat.apache.org/download-55.cgi] or [http://archive.apache.org/dist/tomcat/tomcat-5/v5.5.28/bin v5.5.28]
** Copy the downloaded Zip to &lt;code&gt;$CTIER_ROOT/examples/service-package-deployment/pkgs/apache-tomcat-5.5.28.zip&lt;/code&gt;

Note: A WAR file included in the $CTIER_ROOT/examples/service-package-deployment/pkgs directory so there is no external dependency for that.

==Building the Example==

Follow the instructions in this section to setup the example code into your environment.  

'''Note''': Don't worry about what these commands do, as they just bootstrap the example code to work in your environment and to pre-load the resource model for you. (For complete detail about how to use the [[Examples]] see [[Using the Examples]]):

Execute these bootstrap steps:

# &lt;pre&gt;cd $CTIER_ROOT/examples/service-package-deployment&lt;/pre&gt;
#* Navigate to the &lt;code&gt;examples/service-package-deployment&lt;/code&gt; directory under your &lt;code&gt;$CTIER_ROOT&lt;/code&gt; directory.
# &lt;pre&gt;ctl -p demo -m ProjectBuilder -c Register -- -xml projectbuilder.xml -install&lt;/pre&gt;	
#* This loads a ProjectBuilder object definition into the ControlTier Server.
# &lt;pre&gt;ctl -p demo -m zip -c upload -- -filename pkgs/apache-tomcat-5.5.28.zip -xml templates/apache-tomcat-5.5.28.zip.xml&lt;/pre&gt;
#* Upload the &quot;apache-tomcat-5.5.28.zip&quot; file to the package repository. Remember you had to obtain this from the Apache Tomcat project download page mentioned in the [[#Dependencies]] section above!
# &lt;pre&gt;ctl -p demo -t ProjectBuilder -r service-package-deployment -c Build&lt;/pre&gt;
#* Builds a working example based on template files and your working environment. Later see [[Using_the_Examples#Further_Customization|Further Customization]]

The result of these bootstrap steps results in a Service resource named &quot;simpleTomcat&quot; that you can use to control the deploy life cycle of a Tomcat instance via CTL commands.

You are now ready to run the examples.

==Running the Example==
You can run any of the Service commands like so: ctl -p demo -t Service -r simpleTomcat -c ''&lt;command-name&gt;''

If you run the command without the &quot;-c ''&lt;command-name&gt;''&quot; parameter you will see a listing of commands.

===Run Deploy===

The &lt;code&gt;[[Service_Concepts#Deploy|Deploy]]&lt;/code&gt; command executes the entire deployment life cycle for a Service stopping it, installing configured package resources, configuring the service and then running startup.
&lt;pre&gt;
ctl -p demo -t Service -r simpleTomcat -c Deploy
&lt;/pre&gt;

Once the command completes you should be able to access the deployed Tomcat and &quot;simple&quot; application. Visit the link like so (eg, [http://localhost:18080/simple/ http://localhost:18080/simple/]):

[[Image:simple-tomcat-webapp-screenshot.png]]

You should see the current date and time displayed in the browser page.

====What the Example Shows====
You saw a lot of output from the &lt;code&gt;Deploy&lt;/code&gt; but what did it do? The nitty gritty is explained in the [[#How it Works]] and [[#The Output]] sections but here's what occurred at a high level:

# The resource model describing the simpleTomcat Service was synchronized to the CTL framework. This resource model drives all the automation commands.
#* This resource model described where the Tomcat instance runs, what packages it uses, what listening port it binds to, as well as, the scripts to use to drive various steps of the end-to-end process.
# Deploy calls the Stop command to shutdown the running Tomcat instance in case it had already been running. The shutdown procedure used scripts that are configured for this step.
#* One of these scripts used information from the resource model to lookup the Tomcat connector port to see if it was listening on that socket.
# Deploy's next step handled the package installation workflow. This step downloads, extracts and installs two packaged software artifacts: a War and Zip, also part of the resource model.
#* During the installation phase of the Zip, a &quot;finish&quot; script was called to customize the Tomcat server.xml file so it will run on non-standard ports. It also changed execution bits for the CATALINA_HOME/bin/*.sh files.
# The final step called by Deploy was to run the Start command which handles the Tomcat startup.
#* This used two scripts named in the resource model to check if the Tomcat was already up and if not to call the Tomcat startup.sh script.

==How it Works==

The diagram below describes the resource model for this example. The model describes a Service deployed to one Node. The Service is configured to install two Packages one with a finish script. The service uses several script settings to control stop/start actions. Lastly, a setting is used to describe a network port value.

[[Image:simple-tomcat-service-model.png|Example's Resource Model]]

From Workbench you can see the simpleTomcat Service's resource model in the &quot;Service Manager&quot; page:

[[Image:simple-tomcat-service-screenshot.png]]

You can see two Packages defined along with one Node, the host where simpleTomcat is deployed.

The simpleTomcat Service resource model is defined in a [[project.xml|project XML]] file generated into the &lt;code&gt;$CTIER_ROOT/examples/service-package-deployment&lt;/code&gt;. directory. The following sections walk through the XML definition files used to define the simpleTomcat resource model. Each type of resource has an associated set of metadata. First the metadata describing the packages are reviewed and then the metadata for the Service.

===The Package definitions===

Two packages were defined for this example: apache-tomcat.5.5.28.zip and simple-123.war.

Package metadata is defined using the &lt;code&gt;[[Project-v10.xml#package|package]]&lt;/code&gt; tag. This tag uses a set of attributes to define the various bits of information describing each package. 

Below you can see metadata about the apache-tomcat.5.5.28.zip file includes information like build time, install root directory, version among other properties. This metadata defines a package named &quot;apache-tomcat.5.5.28.zip&quot; that is of type, &quot;zip&quot;. The normal naming convention for a package is to use its filename as the resource name. The type name (in this case &quot;zip&quot;) specifies which Package subtype to use. Package subtypes can provide their own install life cycle implementations. For example, the &quot;zip&quot; type defines an &lt;code&gt;[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_zip.html#cmd_extract extract]&lt;/code&gt; command that understands how to extract Zip archives.

Along with the metadata describing the apache-tomcat.5.5.28.zip[zip] package, there is also a ''PackageFinishScript'' setting used to define a &quot;finish&quot; script for it. This script will be called by the &lt;code&gt;finish&lt;/code&gt; command at the end of the apache-tomcat.5.5.28.zip installation to customize a configuration file. The &lt;code&gt;resources&lt;/code&gt; tag is used to associate the PackageFinishScript as a package resource.

''File listing: &lt;code&gt;$CTIER_ROOT/examples/service-package-deployment/apache-tomcat-5.5.28.zip.xml&lt;/code&gt;''
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
 &lt;setting type=&quot;PackageFinishScript&quot; name=&quot;apache-tomcat-5.5.28.zip&quot; 
           description=&quot;The script used during finish&quot; 
           settingValue=&quot;${env.CTIER_ROOT}/examples/service-package-deployment/finish.xml&quot; settingType=&quot;script&quot;/&gt;
  &lt;package 
      arch=&quot;noarch&quot;
      base=&quot;apache-tomcat-5.5.28&quot; 
      buildtime=&quot;2008061570109&quot; 
      description=&quot;The Tomcat application server.&quot; 
      filename=&quot;apache-tomcat-5.5.28.zip&quot; 
      filetype=&quot;zip&quot; 
      installroot=&quot;${env.CTIER_ROOT}/examples/service-package-deployment/apache-tomcat-5.5.28&quot;
      installrank=&quot;1&quot; 
      name=&quot;apache-tomcat-5.5.28.zip&quot; 
      release=&quot;&quot;
      releasetag=&quot;&quot;
      repoUrl=&quot;/zip/zips/apache-tomcat-5.5.28.zip&quot; 
      restart=&quot;false&quot;
      type=&quot;zip&quot;
      vendor=&quot;&quot;
      version=&quot;5.5.28&quot;      
     &gt;
    &lt;resources&gt;
      &lt;resource type=&quot;PackageFinishScript&quot; name=&quot;apache-tomcat-5.5.28.zip&quot;/&gt;
    &lt;/resources&gt;
  &lt;/package&gt;

&lt;/syntaxhighlight&gt;

The next package defined here describes the WAR file that will be deployed into the Tomcat container.  This metadata defines a package named &quot;simple-123.war&quot; that is of type, &quot;war&quot;. 

No extra finish step is needed for the WAR deployment so no ''PackageFinishScript'' setting is defined.
The metadata describing the &quot;simple-123.war&quot; war object is shown in the file listing below:

''File listing: &lt;code&gt;$CTIER_ROOT/examples/service-package-deployment/simple-123.war.xml&lt;/code&gt;''
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;package 
    arch=&quot;noarch&quot;
    base=&quot;simple&quot; 
    buildtime=&quot;123&quot; 
    description=&quot;A simple webapp&quot;
    filename=&quot;simple-123.war&quot; 
    filetype=&quot;war&quot; 
    installroot=&quot;${env.CTIER_ROOT}/examples/service-package-deployment/apache-tomcat-5.5.28/webapps&quot;
    installrank=&quot;2&quot; 
    name=&quot;simple-123.war&quot; 
    release=&quot;&quot;
    releasetag=&quot;&quot;
    repoUrl=&quot;/war/wars/simple-123.war&quot; 
    restart=&quot;false&quot;
    type=&quot;war&quot;
    vendor=&quot;&quot;
    version=&quot;123&quot;      
    /&gt;
&lt;/syntaxhighlight&gt;

Review the two package XML definitions again and notice the &lt;code&gt;installrank&lt;/code&gt; property. The apache-tomcat-5.5.28.zip had &lt;code&gt;installrank=1&lt;/code&gt; while simple-123.war definition has &lt;code&gt;installrank=2&lt;/code&gt;. The ''installrank'' property provides a relative ordering to package installation. The install rank values are sorted in ascending order, ensuring packages with lower ''installrank'' will before those with higher values.

Both the package metadata and archive files were loaded into your project by the steps in the [[#Building the Example]] section. Had you uploaded the packages your self you would have run these commands:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -p demo -m zip -c upload -- -filename pkgs/apache-tomcat-5.5.28.zip -xml templates/apache-tomcat-5.5.28.zip.xml
ctl -p demo -m war -c upload -- -filename pkgs/simple-123.war -xml simple-123.war.xml
&lt;/syntaxhighlight&gt;

The &lt;code&gt;[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Package.html#cmd_upload upload]&lt;/code&gt; command uploads the specified file to the repository and registers it. The &lt;code&gt;upload&lt;/code&gt; command is shown with two arguments: &lt;code&gt;-filename&lt;/code&gt; and &lt;code&gt;-xml&lt;/code&gt;. The filename references the archive file you want to upload while the -xml option specifies the file containing the package metadata. You'll also notice that the different arguments to the &lt;code&gt;-m&lt;/code&gt; option ([http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_war.html war] vs [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_zip.html zip]). The -m option specifies the Package type you want to use to upload the package. The &quot;zip&quot; type is used to upload Zip files while the &quot;war&quot; type is used to upload War files.

The [[Core Type Guide#ProjectBuilder|ProjectBuilder]] &lt;code&gt;[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Builder.html#cmd_repoFind repoFind]&lt;/code&gt; command can be used to query the package repository at any time. Below is an example that shows how to lookup the two files that were uploaded and registered:
&lt;pre&gt;
ctl -p demo -t ProjectBuilder -r service-package-deployment -c repoFind --\
 -packagename '(?:simple-.*|apache-tomcat.*)' -packagetype Package
&lt;/pre&gt;
The output shows both packages in the repository.
&lt;pre&gt;
Querying model for matching package objects ...
|
|--(zip) apache-tomcat-5.5.28.zip
|
|--(war) simple-123.war
&lt;/pre&gt;
The &lt;code&gt;-packagename&lt;/code&gt; option used a regex argument to specify a filter pattern to limit the search to just packages that have names matching that pattern. The &lt;code&gt;-packagetype&lt;/code&gt; option specifies to look for packages of any subtype of &quot;Package&quot;.

===The Service definition===
This section describes the definition of the Service resource. One Service was defined for this example: &quot;simpleTomcat&quot; of type Service. The Service definition is broken into two parts: one for script settings and the other for the Service itself. The section will walk through the XML definition found in the file listing contained in &lt;code&gt;$CTIER_ROOT/examples/service-package-deployment/default-object.xml&lt;/code&gt;.

====Settings====

The Service type defines a set of standard workflows to drive the startup and shutdown processes. The resource model provides a set of setting types that let you configure the commands called by these workflows to call your scripts. The table below shows each command has a particular setting type where you declare the path to your script you want called by the command. Additionally, the ServiceSpawn setting value of &lt;code&gt;false&lt;/code&gt; indicates that the script called by &lt;code&gt;startService&lt;/code&gt; should not spawn in a separate process.

{| cellspacing=&quot;1&quot; cellpadding=&quot;4&quot; border=&quot;1&quot; style=&quot;border: 1px solid #aaa; border-collapse:collapse;&quot;
|-
!Setting 
!Command
!Example Script/value
|-
|ServiceStartScript
|startService
|start.sh
|-
|ServiceStopScript
|stopService
|stop.sh
|-
|ServiceIsUpScript
|assertServiceIsUP
|isup.xml
|-
|ServiceIsDownScript
|assertServiceIsDown
|isdown.xml
|-
|ServiceSpawn
|startService
|&lt;code&gt;false&lt;/code&gt;
|}

Below is the XML used to define these settings for the simpleTomcat Service resource model.
The &lt;code&gt;[[Project-v10.xml#setting|setting]]&lt;/code&gt; tag is used to define the each setting type and corresponding script. You can see that each setting specifies the script to call using the &lt;code&gt;settingValue&lt;/code&gt; tag, and the ServiceSpawn setting specifies &quot;false&quot; as the &lt;code&gt;settingValue&lt;/code&gt;.

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;setting type=&quot;ServiceStartScript&quot; name=&quot;simpleTomcat&quot; 
   description=&quot;The script used by startService&quot; 
   settingValue=&quot;${env.CTIER_ROOT}/examples/service-package-deployment/start.sh&quot; settingType=&quot;shell&quot;/&gt;
&lt;setting type=&quot;ServiceStopScript&quot; name=&quot;simpleTomcat&quot; 
   description=&quot;The script used by stopService&quot; 
   settingValue=&quot;${env.CTIER_ROOT}/examples/service-package-deployment/stop.sh&quot; settingType=&quot;shell&quot;/&gt;
&lt;setting type=&quot;ServiceIsUpScript&quot; name=&quot;simpleTomcat&quot; 
   description=&quot;The script used by assertServicesIsUp&quot; 
   settingValue=&quot;${env.CTIER_ROOT}/examples/service-package-deployment/isup.xml&quot; settingType=&quot;ant&quot;/&gt;
&lt;setting type=&quot;ServiceIsDownScript&quot; name=&quot;simpleTomcat&quot; 
   description=&quot;The script used by assertServicesIsDown&quot; 
   settingValue=&quot;${env.CTIER_ROOT}/examples/service-package-deployment/isdown.xml&quot; settingType=&quot;ant&quot;/&gt;
&lt;setting type=&quot;ServiceSpawn&quot; name=&quot;simpleTomcat&quot; 
   description=&quot;Whether to spawn separate process for the start script&quot;
   settingValue=&quot;false&quot; /&gt;
&lt;/syntaxhighlight&gt;

Settings can be used to describe any kind of information that is essentially a named key/value pair.
Here is a setting that captures the port number Tomcat uses to accept client connections. 
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;setting type=&quot;Port&quot; name=&quot;simpleTomcat-connector&quot; 
   description=&quot;The connector port used by Tomcat&quot; 
   settingValue=&quot;18080&quot; settingType=&quot;TCP&quot;/&gt;
&lt;/syntaxhighlight&gt;
Setting information like this is accessible to all the commands for the Service. In this case, the connector port value can be referenced from inside the Service commands as: &lt;code&gt;${setting.Port.simpleTomcat-connector.settingValue}&lt;/code&gt;

====Service====
This section describes how to put the Service resource model all together. The resource model describing the example Service entails referencing the setting information just described as well as referencing the packages that should be installed during deployment. For the simpleTomcat service that means referencing the five settings and the two packages.

A service is defined using a &lt;code&gt;[[Project-v10.xml#deployment|deployment]]&lt;/code&gt; tag. The &lt;code&gt;deployment&lt;/code&gt; tag uses a set of attributes to name and specify the type of resource (eg &lt;code&gt;name=&quot;simpleTomcat&quot; type=&quot;Service&quot;&lt;/code&gt;). The &lt;code&gt;installRoot&lt;/code&gt; and &lt;code&gt;basedir&lt;/code&gt; attributes declare the location of the Tomcat installation (c.f., CATALINA_HOME/CATALINA_BASE).

The settings and packages are referenced as &lt;code&gt;[[Project-v10.xml#resource|resource]]&lt;/code&gt; elements inside the &lt;code&gt;[[Project-v10.xml#resources|resources]]&lt;/code&gt; element. The node where this Service is to be deployed is referenced in the &lt;code&gt;[[Project-v10.xml#referrers|referrers]]&lt;/code&gt; element.

Here's the XML that ties the information together:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
&lt;deployment 
     type=&quot;Service&quot;
     name=&quot;simpleTomcat&quot; 
     description=&quot;The Tomcat deployment.&quot; 
     installRoot=&quot;${env.CTIER_ROOT}/examples/service-package-deployment/apache-tomcat-5.5.28&quot; 
     basedir=&quot;${env.CTIER_ROOT}/examples/service-package-deployment/apache-tomcat-5.5.28&quot;&gt;

   &lt;resources&gt;
	   &lt;!-- 
	  **
	  ** References the scripts to be run by the Service lifecycle commands 
	  **
	   --&gt;
     &lt;resource name=&quot;simpleTomcat&quot; type=&quot;ServiceStopScript&quot; /&gt;
     &lt;resource name=&quot;simpleTomcat&quot; type=&quot;ServiceStartScript&quot; /&gt;
     &lt;resource name=&quot;simpleTomcat&quot; type=&quot;ServiceIsDownScript&quot; /&gt;
     &lt;resource name=&quot;simpleTomcat&quot; type=&quot;ServiceIsUpScript&quot; /&gt;
     &lt;resource name=&quot;simpleTomcat&quot; type=&quot;ServiceSpawn&quot; /&gt;
     &lt;!-- 
    **
    ** References the Tomcat connector port setting
    **
     --&gt;
     &lt;resource name=&quot;simpleTomcat-connector&quot; type=&quot;Port&quot; /&gt;
     &lt;!-- 
    **
    ** References the zip and war Packages
    **
     --&gt;
     &lt;resource name=&quot;apache-tomcat-5.5.28.zip&quot; type=&quot;zip&quot; /&gt;
     &lt;resource name=&quot;simple-123.war&quot; type=&quot;war&quot; /&gt;

   &lt;/resources&gt;

   &lt;!--
 **
 ** Define a parent dependency to the node where you are running this example. 
 **
   --&gt;
   &lt;referrers replace=&quot;false&quot;&gt;
     &lt;!--
   ** Change this line to one that matches your node name:
     --&gt;
     &lt;resource type=&quot;Node&quot; name=&quot;strongbad&quot;/&gt;
   &lt;/referrers&gt;

 &lt;/deployment&gt;
&lt;/syntaxhighlight&gt;

This concludes the explanation of the example's resource model. The next section describes the Service commands that support the deploy and startup/shutdown cycles.

===Command dispatching===

The Service type defines a set of standard workflow commands that support the typical steps of deployment and startup/shutdown. The idea is to define a resource model that drives these commands, letting you configure the model to tie in calls to your scripts or expose environment information (like the Tomcat connector port) to the commands.

The startup and shutdown processes are managed via two Service workflow commands: [[Service_Concepts#Start|Start]] and [[Service_Concepts#Stop|Stop]].
Both workflows share a common design. Each check for a condition and if the condition is not met, an action is performed. Let's look at each of these workflows.

Service provides a program skeleton supporting a generic start up procedure that first checks if the service is up and if not, to then run a command to start the service. 

[[Image:Idempotent-start.png]]

You can see in the diagram that Start calls &lt;code&gt;[[Service_Concepts#assertServiceIsUp|assertServiceIsUp]]&lt;/code&gt; first. If it fails because the service is not running, then &lt;code&gt;[[Service_Concepts#startService|startService]]&lt;/code&gt; is executed.

Service also provides a program skeleton supporting a generic shutdown procedure that first checks if the service is down and if not, to then run a command to stop the service. 

[[Image:Idempotent-stop.png]]

You can see in the diagram that Stop calls &lt;code&gt;[[Service_Concepts#assertServiceIsDown|assertServiceIsDown]]&lt;/code&gt; first. If it fails because the service is running, then &lt;code&gt;[[Service_Concepts#stopService|stopService]]&lt;/code&gt; is executed.

Underlying these Service commands are the scripts that were configured via the setting definitions discussed above. All the service life cycle commands that call scripts assume a basic convention. If the script exits with a non-zero exit code, the command will fail otherwise it's interpreted as successful.

The scripts called by our simpleTomcat Service are trivial but are representative of how you can incorporate your own procedures via scripts attached to Service commands. The four hook commands can be configured to call shellscript, Windows batch or Ant build files. Let's look at each of the four scripts used in this example.

The &quot;isdown.xml&quot; is an Ant build file called by &lt;code&gt;assertServiceIsDown&lt;/code&gt;. This command checks to see if the Service is down. In this case, the isdown.xml checks if Tomcat is listening on its connector socket. If it is, a &lt;code&gt;fail&lt;/code&gt; is thrown. Notice the &lt;code&gt;${setting.Port.simpleTomcat-connector.settingValue}&lt;/code&gt; setting value is used to lookup the port to check. It's advantageous to expose resource model information like the Tomcat port value  to scripts since it makes them inherently more reusable across environments.

''File listing: &lt;code&gt;$CTIER_ROOT/examples/service-package-deployment/isdown.xml&lt;/code&gt;''
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;project default=&quot;execute&quot;&gt;
  &lt;!--
  **
  ** Check the listening port to see if Tomcat is running
  **
  --&gt;
  &lt;target name=&quot;execute&quot;&gt;
    &lt;!--
    ** Fail if it IS listening
    --&gt;
    &lt;fail message=&quot;Service is UP (Listening on port: ${setting.Port.simpleTomcat-connector.settingValue})&quot;&gt;
      &lt;condition&gt;
	  &lt;!--
	  **
	  ** This hook command has access to the context data of the
	  ** calling object. The Setting referenced via this property: 
	  **   setting.Port.simpleTomcat-connector.settingValue
	  ** contains the port value
	  --&gt;
	&lt;socket port=&quot;${setting.Port.simpleTomcat-connector.settingValue}&quot; server=&quot;localhost&quot;/&gt;
      &lt;/condition&gt;
    &lt;/fail&gt;
    &lt;echo&gt;DOWN&lt;/echo&gt;
  &lt;/target&gt;

&lt;/project&gt;
&lt;/syntaxhighlight&gt;

The &quot;isup.xml&quot; file is called by &lt;code&gt;assertServiceIsUp&lt;/code&gt;. This command checks if the service is running. In this case, if the Tomcat server is not listening on the connector port, a &lt;code&gt;fail&lt;/code&gt; is thrown.

''File listing: &lt;code&gt;$CTIER_ROOT/examples/service-package-deployment/isup.xml&lt;/code&gt;''
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
&lt;project name=&quot;isup.xml&quot; default=&quot;execute&quot;&gt;
  &lt;!--
  **
  ** Check the listening port to see if Tomcat is running
  **
  --&gt;
  &lt;target name=&quot;execute&quot;&gt;
    &lt;!--
    ** Fail if it is not listening
    --&gt;
    &lt;fail message=&quot;Service is DOWN&quot;&gt;
      &lt;condition&gt;
	&lt;not&gt;
	  &lt;!--
	  **
	  ** This hook command has access to the context data of the
	  ** calling object. The Setting referenced via this property: 
	  **   setting.Port.simpleTomcat-connector.value
	  ** contains the port value
	  --&gt;
	  &lt;socket port=&quot;${setting.Port.simpleTomcat-connector.value}&quot; server=&quot;localhost&quot;/&gt;
	&lt;/not&gt;
      &lt;/condition&gt;
    &lt;/fail&gt;
    &lt;!--
    ** The service is running so print an informative message
    --&gt;
    &lt;echo&gt;UP (Listening on port: ${setting.Port.simpleTomcat-connector.value})&lt;/echo&gt;
  &lt;/target&gt;
&lt;/project&gt;
&lt;/syntaxhighlight&gt;

The &quot;start.sh&quot; script is called by the &lt;code&gt;startService&lt;/code&gt; command. The &quot;start.sh&quot; file is a shell script and wraps the Tomcat &lt;code&gt;startup.sh&lt;/code&gt; script included in the Tomcat distribution.

''File listing: &lt;code&gt;$CTIER_ROOT/examples/service-package-deployment/start.sh&lt;/code&gt;''
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
#!/bin/bash
export CATALINA_HOME=$CTIER_ROOT/examples/service-package-deployment/apache-tomcat-5.5.28
export CATALINA_BASE=$CATALINA_HOME;
$CATALINA_HOME/bin/startup.sh;
&lt;/syntaxhighlight&gt;

The &quot;stop.sh&quot; script is called by the &lt;code&gt;stopService&lt;/code&gt; command. The &quot;stop.sh&quot; shell script wraps the Tomcat &lt;code&gt;shutdown.sh&lt;/code&gt; script included in the Tomcat distribution.

''File listing: &lt;code&gt;$CTIER_ROOT/examples/service-package-deployment/stop.sh&lt;/code&gt;''
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
#!/bin/bash
export CATALINA_HOME=$CTIER_ROOT/examples/service-package-deployment/apache-tomcat-5.5.28
export CATALINA_BASE=$CATALINA_HOME;
$CATALINA_HOME/bin/shutdown.sh;
&lt;/syntaxhighlight&gt;

These four scripts cover the Tomcat startup and shutdown procedures and will be called via the &lt;code&gt;Start&lt;/code&gt; and &lt;code&gt;Stop&lt;/code&gt; workflow commands. 

Besides managing the runtime state of the deployed Tomcat instance, there is one more requirement for this example. We need to customize the Tomcat installation to not use its default set of ports. This is accomplished by hooking a script to the Package &lt;code&gt;[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Package.html#cmd_finish finish]&lt;/code&gt; command. You may recall that a ''PackageFinishScript'' setting declared for the apache-tomcat-5.5.28.zip Package referenced an Ant build file called &quot;finish.xml&quot;.

There are actually several steps carried out in the finish.xml:
# Set the execute bit on the Tomcat scripts in $CATALINA_HOME/bin. 
# Create a backup of the $CATALINA_BASE/conf/server.xml
# Re-write the $CATALINA_BASE/conf/server.xml to replace the standard ports with ones that won't conflict with our environment.
These steps are implemented in the &quot;finish.xml&quot; Ant build file. The &lt;code&gt;finish&lt;/code&gt; command provides access to the resource model for the &quot;finish.xml&quot; as a set of Ant properties. Notice in the file below that the &lt;code&gt;resource.package-install-root&lt;/code&gt; is used to locate the installation root directory. Using resource model data from inside commands makes them data driven and hence more flexible and reusable. 

''File listing: &lt;code&gt;$CTIER_ROOT/examples/service-package-deployment/finish.xml&lt;/code&gt;''
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;project name=&quot;finish.xml&quot; default=&quot;execute&quot;&gt;
  &lt;!--
      ** The &quot;finish&quot; command can access metadata about the package it is processing.
	  ** One piece of information used here is &quot;resource.package-install-root&quot;. This
	  ** is the directory where the package archive is extracted.
	  ** For this example it is also synonymous with the Tomcat install root (ie, CATALINA_HOME)
  --&gt;

  &lt;!--
      **
      ** Customize the Tomcat install
      **
  --&gt;
  &lt;target name=&quot;execute&quot;&gt;
    &lt;echo level=&quot;info&quot;&gt;Finishing tomcat installation ...&lt;/echo&gt;

    &lt;tstamp/&gt;
    &lt;!-- set start/stop scripts execute bit--&gt;
    &lt;chmod dir=&quot;${resource.package-install-root}/bin&quot; perm=&quot;ugo+rx&quot; 
	   includes=&quot;**/*.sh&quot;/&gt;
    &lt;!-- backup the current config file--&gt;
    &lt;copy file=&quot;${resource.package-install-root}/conf/server.xml&quot; 
	  tofile=&quot;${resource.package-install-root}/conf/server.xml.${DSTAMP}${TSTAMP}&quot;/&gt;
    &lt;!-- global replace the stock port values --&gt;
    &lt;replace dir=&quot;${resource.package-install-root}&quot;
	     token=&quot;8005&quot; 
	     value=&quot;18105&quot;&gt;
      &lt;include name=&quot;conf/server.xml&quot;/&gt;
    &lt;/replace&gt;
    &lt;replace dir=&quot;${resource.package-install-root}&quot;
	     token=&quot;8009&quot; 
	     value=&quot;18009&quot;&gt;
      &lt;include name=&quot;conf/server.xml&quot;/&gt;
    &lt;/replace&gt;
    &lt;replace dir=&quot;${resource.package-install-root}&quot;
	     token=&quot;8080&quot; 
	     value=&quot;18080&quot;&gt;
      &lt;include name=&quot;conf/server.xml&quot;/&gt;
    &lt;/replace&gt;
    &lt;echo level=&quot;info&quot;&gt;Customized ${resource.package-install-root}/conf/server.xml&lt;/echo&gt;
  &lt;/target&gt;
&lt;/project&gt;
&lt;/syntaxhighlight&gt;

===The Output===
The &lt;code&gt;Deploy&lt;/code&gt; command is a workflow that calls a sequence of four commands: &lt;code&gt;Stop, Packages-Install, Configure, Start&lt;/code&gt;.

You can preview the actions of the Deploy workflow from Workbench. Navigate to the simpleTomcat[Service] object in the &quot;Service Manager&quot; and press the &quot;Commands&quot; tab. Locate the &quot;Deploy&quot; workflow and press the yellow button to right.

You will see the Process Flow view display workflow structure across the commands that are dispatched by Deploy.

[[Image:simple-tomcat-service-deploy-flow.png]]

Since there's quite a lot of output messages from Deploy we'll call each command in turn and examine output from each.

First let's look at the &lt;code&gt;Stop&lt;/code&gt; command.
&lt;pre&gt;ctl -p demo -t Service -r simpleTomcat -c Stop&lt;/pre&gt;
Stop calls &lt;code&gt;assertServiceIsDown&lt;/code&gt; command which is configured to call our &quot;isdown.xml&quot; Ant file.
&lt;pre&gt;
begin workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot; ...
Executing ant file: /Users/alexh/ctier/examples/service-package-deployment/isdown.xml
DOWN
end workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot;
&lt;/pre&gt;
The isdown.xml detected the Tomcat instance was already down so Stop just exits. Had it been running, Stop would have called &lt;code&gt;stopService&lt;/code&gt; which is configured to run the &quot;stop.sh&quot; shell script.
	
Next let's look at the &lt;code&gt;Packages-Install&lt;/code&gt; command.
&lt;pre&gt;ctl -p demo -t Service -r simpleTomcat -c Packages-Install&lt;/pre&gt;
This command is a workflow that iterates over each of the assigned Package resources and for each calls its &lt;code&gt;Install&lt;/code&gt; command. The &lt;code&gt;Install&lt;/code&gt; command is a Package type workflow that kicks off each step in the package installation life cycle.

It's easiest to break up this output and discuss each step.

The first line shows there are two Packages to install for the simpleTomcat Service (ie, simple-123.war[war],  apache-tomcat-5.5.28.zip[zip]):

&lt;pre&gt;
Start: &quot;Install the configured package dependencies for the deployment.&quot; Beginning installation for packages:   simple-123.war[war],  apache-tomcat-5.5.28.zip[zip] ...
Dispatching command 'assertPackageIsVerified' to objects: apache-tomcat-5.5.28.zip[zip], simple-123.war[war] ...
starting: apache-tomcat-5.5.28.zip[zip]-&gt;assertPackageIsVerified ...
starting: simple-123.war[war]-&gt;assertPackageIsVerified ...
&lt;/pre&gt;

The first step in the package installation cycle is &lt;code&gt;assertPackageIsVerified&lt;/code&gt; which wraps each of the package installation cycles to ensure a verified result. It begins with apache-tomcat-5.5.28.zip because it had &lt;code&gt;installrank=1&lt;/code&gt;:

&lt;pre&gt;
Getting: http://strongbad:8080/jackrabbit/repository/controltier/projects/demo/publish/modules/zip-head.jar
To: /Users/alexh/ctier/ctl/var/tmp/downloads/demo/zip-head.jar
Not modified - so not downloaded
zip up to date
Attempting to get Package-head.jar ...
Getting: http://strongbad:8080/jackrabbit/repository/controltier/projects/demo/publish/modules/Package-head.jar
To: /Users/alexh/ctier/ctl/var/tmp/downloads/demo/Package-head.jar
Not modified - so not downloaded
Package up to date
Packages-Install invoking: apache-tomcat-5.5.28.zip[zip]-&gt;Install -installroot
 /Users/alexh/ctier/examples/service-package-deployment/apache-tomcat-5.5.28
&lt;/pre&gt;

The Package &lt;code&gt;[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Package.html#cmd_Install Install]&lt;/code&gt; command does a couple things:
* downloads the needed command module jar files that contains the Zip specific install cycle commands (eg zip-head.jar). 
* checks if the package was previously installed and then calls &lt;code&gt;[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Package.html#cmd_installPackage installPackage]&lt;/code&gt; which does all the work of getting, extracting and finishing the installation (ie, steps 1-5).

&lt;pre&gt;
Start: &quot;Install object and run the package installation cycle.&quot; commands: assertPackageIsInstalled
begin workflow command (1/1) -&gt; &quot;assertPackageIsInstalled -installroot /Users/alexh/ctier/examples/service-package-deployment/apache-tomcat-5.5.28&quot; ...
Executing ant file: /Users/alexh/ctier/ctl/projects/demo/modules/Package/bin/is-installed.xml
Running handler command: installPackage
begin workflow command (1/5) -&gt; &quot;installDependencies -filename apache-tomcat-5.5.28.zip -installroot /Users/alexh/ctier/examples/service-package-deployment/apache-tomcat-5.5.28 
    -url http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/apache-tomcat-5.5.28.zip&quot; ...
Dispatching command 'Install' to objects:  ...
end workflow command (1/5) -&gt; &quot;installDependencies -filename apache-tomcat-5.5.28.zip -installroot /Users/alexh/ctier/examples/service-package-deployment/apache-tomcat-5.5.28 
    -url http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/apache-tomcat-5.5.28.zip&quot;
begin workflow command (2/5) -&gt; &quot;prepare -filename apache-tomcat-5.5.28.zip -installroot /Users/alexh/ctier/examples/service-package-deployment/apache-tomcat-5.5.28 
    -url http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/apache-tomcat-5.5.28.zip&quot; ...
end workflow command (2/5) -&gt; &quot;prepare -filename apache-tomcat-5.5.28.zip -installroot /Users/alexh/ctier/examples/service-package-deployment/apache-tomcat-5.5.28 
    -url http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/apache-tomcat-5.5.28.zip&quot;
begin workflow command (3/5) -&gt; &quot;get -filename apache-tomcat-5.5.28.zip -installroot /Users/alexh/ctier/examples/service-package-deployment/apache-tomcat-5.5.28 
    -url http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/apache-tomcat-5.5.28.zip&quot; ...
Created dir: /Users/alexh/ctier/examples/service-package-deployment/apache-tomcat-5.5.28
Getting: http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/apache-tomcat-5.5.28.zip
To: /Users/alexh/ctier/examples/service-package-deployment/apache-tomcat-5.5.28/apache-tomcat-5.5.28.zip
end workflow command (3/5) -&gt; &quot;get -filename apache-tomcat-5.5.28.zip -installroot /Users/alexh/ctier/examples/service-package-deployment/apache-tomcat-5.5.28 
    -url http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/apache-tomcat-5.5.28.zip&quot;
begin workflow command (4/5) -&gt; &quot;extract -filename apache-tomcat-5.5.28.zip -installroot /Users/alexh/ctier/examples/service-package-deployment/apache-tomcat-5.5.28 
    -url http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/apache-tomcat-5.5.28.zip&quot; ...
Expanding: /Users/alexh/ctier/examples/service-package-deployment/apache-tomcat-5.5.28/apache-tomcat-5.5.28.zip 
    into /Users/alexh/ctier/examples/service-package-deployment/apache-tomcat-5.5.28
end workflow command (4/5) -&gt; &quot;extract -filename apache-tomcat-5.5.28.zip -installroot /Users/alexh/ctier/examples/service-package-deployment/apache-tomcat-5.5.28 
    -url http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/apache-tomcat-5.5.28.zip&quot;
&lt;/pre&gt;

Here is our &quot;finish.xml&quot; called by the &lt;code&gt;finish&lt;/code&gt; command. You can see the messages about the server.xml file being backed up and customized. Recall that the finish.xml used the property &lt;code&gt;resource.package-install-root&lt;/code&gt; to locate the install root directory.

&lt;pre&gt;
begin workflow command (5/5) -&gt; &quot;finish -filename apache-tomcat-5.5.28.zip -installroot /Users/alexh/ctier/examples/service-package-deployment/apache-tomcat-5.5.28 
    -url http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/apache-tomcat-5.5.28.zip&quot; ...
Executing ant build file
finishing tomcat installation ...
Copying 1 file to /Users/alexh/ctier/examples/service-package-deployment/apache-tomcat-5.5.28/conf
Customized /Users/alexh/ctier/examples/service-package-deployment/apache-tomcat-5.5.28/conf/server.xml
Deleting: /Users/alexh/ctier/examples/service-package-deployment/apache-tomcat-5.5.28/apache-tomcat-5.5.28.zip
end workflow command (5/5) -&gt; &quot;finish -filename apache-tomcat-5.5.28.zip -installroot /Users/alexh/ctier/examples/service-package-deployment/apache-tomcat-5.5.28 
    -url http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/apache-tomcat-5.5.28.zip&quot;
end workflow command (1/1) -&gt; &quot;assertPackageIsInstalled -installroot /Users/alexh/ctier/examples/service-package-deployment/apache-tomcat-5.5.28&quot;
[command.timer.demo.Package.Install: 17.937 sec]
Workflow completed. execution time: 17.937 sec
Executing script: /Users/alexh/ctier/ctl/projects/demo/modules/Package/bin/is-verified.xml ...
Package is VERIFIED
&lt;/pre&gt;

The apache-tomcat-5.5.28 installation completed and was verified. Next, the simple-123.war package goes through the same sequence. It had &lt;code&gt;installrank=2&lt;/code&gt; and thus follows after apache-tomcat-5.5.28.zip.

&lt;pre&gt;
Getting: http://strongbad:8080/jackrabbit/repository/controltier/projects/demo/publish/modules/war-head.jar
To: /Users/alexh/ctier/ctl/var/tmp/downloads/demo/war-head.jar
Not modified - so not downloaded
war up to date
Attempting to get Package-head.jar ...
Getting: http://strongbad:8080/jackrabbit/repository/controltier/projects/demo/publish/modules/Package-head.jar
To: /Users/alexh/ctier/ctl/var/tmp/downloads/demo/Package-head.jar
Not modified - so not downloaded
Package up to date
Packages-Install invoking: simple-123.war[war]-&gt;Install -installroot /Users/alexh/ctier/examples/service-package-deployment/apache-tomcat-5.5.28/webapps
Start: &quot;Install object and run the package installation cycle.&quot; commands: assertPackageIsInstalled
begin workflow command (1/1) -&gt; &quot;assertPackageIsInstalled -installroot /Users/alexh/ctier/examples/service-package-deployment/apache-tomcat-5.5.28/webapps&quot; ...
Executing ant file: /Users/alexh/ctier/ctl/projects/demo/modules/Package/bin/is-installed.xml
Running handler command: installPackage
begin workflow command (1/5) -&gt; &quot;installDependencies -filename simple-123.war -installroot /Users/alexh/ctier/examples/service-package-deployment/apache-tomcat-5.5.28/webapps 
    -url http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/war/wars/simple-123.war&quot; ...
Dispatching command 'Install' to objects:  ...
end workflow command (1/5) -&gt; &quot;installDependencies -filename simple-123.war -installroot /Users/alexh/ctier/examples/service-package-deployment/apache-tomcat-5.5.28/webapps 
    -url http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/war/wars/simple-123.war&quot;
begin workflow command (2/5) -&gt; &quot;prepare -filename simple-123.war -installroot /Users/alexh/ctier/examples/service-package-deployment/apache-tomcat-5.5.28/webapps 
    -url http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/war/wars/simple-123.war&quot; ...
end workflow command (2/5) -&gt; &quot;prepare -filename simple-123.war -installroot /Users/alexh/ctier/examples/service-package-deployment/apache-tomcat-5.5.28/webapps 
    -url http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/war/wars/simple-123.war&quot;
begin workflow command (3/5) -&gt; &quot;get -filename simple-123.war -installroot /Users/alexh/ctier/examples/service-package-deployment/apache-tomcat-5.5.28/webapps 
    -url http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/war/wars/simple-123.war&quot; ...
Getting: http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/war/wars/simple-123.war
To: /Users/alexh/ctier/examples/service-package-deployment/apache-tomcat-5.5.28/webapps/simple-123.war
end workflow command (3/5) -&gt; &quot;get -filename simple-123.war -installroot /Users/alexh/ctier/examples/service-package-deployment/apache-tomcat-5.5.28/webapps 
    -url http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/war/wars/simple-123.war&quot;
begin workflow command (4/5) -&gt; &quot;extract -filename simple-123.war -installroot /Users/alexh/ctier/examples/service-package-deployment/apache-tomcat-5.5.28/webapps 
    -url http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/war/wars/simple-123.war&quot; ...
Created dir: /Users/alexh/ctier/examples/service-package-deployment/apache-tomcat-5.5.28/webapps/simple
Expanding: /Users/alexh/ctier/examples/service-package-deployment/apache-tomcat-5.5.28/webapps/simple-123.war into
    /Users/alexh/ctier/examples/service-package-deployment/apache-tomcat-5.5.28/webapps/simple
end workflow command (4/5) -&gt; &quot;extract -filename simple-123.war -installroot /Users/alexh/ctier/examples/service-package-deployment/apache-tomcat-5.5.28/webapps 
    -url http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/war/wars/simple-123.war&quot;
begin workflow command (5/5) -&gt; &quot;finish -filename simple-123.war -installroot /Users/alexh/ctier/examples/service-package-deployment/apache-tomcat-5.5.28/webapps 
    -url http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/war/wars/simple-123.war&quot; ...
Deleting: /Users/alexh/ctier/examples/service-package-deployment/apache-tomcat-5.5.28/webapps/simple-123.war
end workflow command (5/5) -&gt; &quot;finish -filename simple-123.war -installroot /Users/alexh/ctier/examples/service-package-deployment/apache-tomcat-5.5.28/webapps 
    -url http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/war/wars/simple-123.war&quot;
end workflow command (1/1) -&gt; &quot;assertPackageIsInstalled -installroot /Users/alexh/ctier/examples/service-package-deployment/apache-tomcat-5.5.28/webapps&quot;
[command.timer.demo.Package.Install: 17.937 sec]
Workflow completed. execution time: 17.937 sec
Executing script: /Users/alexh/ctier/ctl/projects/demo/modules/Package/bin/is-verified.xml ...
Package is VERIFIED
&lt;/pre&gt;

The last line shows both packages were installed successfully.

&lt;pre&gt;
Completed: Installed packages:   simple-123.war[war],  apache-tomcat-5.5.28.zip[zip]
&lt;/pre&gt;

After the &lt;code&gt;Packages-Install&lt;/code&gt; command, the next command in the Deploy sequence is &lt;code&gt;Configure&lt;/code&gt; 

&lt;pre&gt;ctl -p demo -t Service -r simpleTomcat -c Configure&lt;/pre&gt;

The Configure workflow calls &lt;code&gt;Docs-Generate&lt;/code&gt; which generates any registered configuration documents from templates. Our simpleTomcat example does not do this so it's just an empty step here. See [[Generating_Configuration_Files]] for information about using &lt;code&gt;Docs-Generate&lt;/code&gt;.
&lt;pre&gt;
begin workflow command (1/1) -&gt; &quot;Docs-Generate &quot; ...
end workflow command (1/1) -&gt; &quot;Docs-Generate &quot;
&lt;/pre&gt;

The  last step in the Deploy workflow is the &lt;code&gt;Start&lt;/code&gt; command.
&lt;pre&gt;
ctl -p demo -t Service -r simpleTomcat -c Start
&lt;/pre&gt;

The Start workflow calls &lt;code&gt;assertServiceIsUp&lt;/code&gt; which is configured to call our &quot;isup.xml&quot; Ant file.
The &quot;isup.xml&quot; detects the Tomcat instance is down so &lt;code&gt;Start&lt;/code&gt; calls the &lt;code&gt;startService&lt;/code&gt; command which is in turn, configured to execute our &quot;start.sh&quot; shell script.
&lt;pre&gt;
begin workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot; ...
Executing ant file: /Users/alexh/ctier/examples/service-package-deployment/isup.xml
Running handler command: startService
Executing bourne shell script: /Users/alexh/ctier/examples/service-package-deployment/start.sh
end workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot;
&lt;/pre&gt;

The &quot;start.sh&quot; script calls Tomcat $CATALINA_HOME/bin/startup.sh. 

You can verify the Tomcat runtime state is UP via the &lt;code&gt;Status&lt;/code&gt; command:
&lt;pre&gt;
$ ctl -p demo -t Service -r simpleTomcat -c Status
begin workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot; ...
Executing ant file: /Users/alexh/ctier/examples/service-package-deployment/isup.xml
UP (Listening on port: 18080)
end workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot;
&lt;/pre&gt;

==Stopping the Example==

You can run the &quot;Stop&quot; command for the Service, to stop the running tomcat server:

''Execute:''
&lt;pre&gt;
ctl -p demo -t Service -r simpleTomcat -c Stop
&lt;/pre&gt;

The &quot;isdown.xml&quot; script will check if the service is running.  If so, then the &lt;code&gt;stopService&lt;/code&gt; command will execute. This will run our &lt;code&gt;stop.sh&lt;/code&gt; script, which finally invokes the Tomcat &quot;shutdown.sh&quot; script and the server will stop.

''output:''
&lt;pre&gt;
begin workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot; ...
Executing ant file: /Users/alexh/ctier/examples/service-package-deployment/isdown.xml
Running handler command: stopService
Executing windows batch file: /Users/alexh/ctier/examples/service-package-deployment/stop.bat
Using CATALINA_BASE:   /Users/alexh/ctier/examples/service-package-deployment/apache-tomcat-5.5.28
Using CATALINA_HOME:   /Users/alexh/ctier/examples/service-package-deployment/apache-tomcat-5.5.28
Using CATALINA_TMPDIR: /Users/alexh/ctier/examples/service-package-deployment/apache-tomcat-5.5.28/temp
Using JRE_HOME:        /Library/Java/Home
end workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot;
&lt;/pre&gt;

==Related Topics==

* [[Mock Unix Service Example]] explains the very basic essentials to manage the runtime state of a long running application service.
* [[Prepare Finish Scripts]] describes how to hook in your own scripts to the Package &lt;code&gt;prepare&lt;/code&gt; and &lt;code&gt;finish&lt;/code&gt; commands.
* The [[Generating_Configuration_Files]] document explains several methods to generate configuration files for a Service.
* See more about the Service type in the [[Core Type Guide#Service|Core Type Guide]]

{{Manual/navbox}}

[[Category:Service Examples]]
[[Category:Package Examples]]</text>
    </revision>
  </page>
  <page>
    <title>Service subtype control scripts</title>
    <id>417</id>
    <revision>
      <id>14166</id>
      <timestamp>2010-11-10T16:02:28Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;ctl-depot&quot; to &quot;ctl-project&quot;</comment>
      <text xml:space="preserve">{{mergeto|Creating your own Service type}}
&lt;noinclude&gt;&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Service&lt;/categorytree&gt;&lt;/noinclude&gt;
: ''See a [http://open.controltier.com/media/tutorial-Service-subtype.swf screencast]''

[[File:Icon-ServiceObject.png|align=left]]This page describes how you can define a custom Service sub-type and include your own control scripts in a control Module.

In this example we create TomcatController, a sub-type of [[Service]], with which we can control an installation of Apache Tomcat.

{{notice|ControlTier 3.4+ comes pre-installed with many useful control modules, including one called [[TomcatServer]], which can be used as-is to control Apache Tomcat.  If you are looking for a solution for controlling Tomcat, you should start with TomcatServer. The example TomcatController module is merely to illustrate the way in which a custom Service sub-type could be created and used.}}

==Making your own service controllers==

The Service Type establishes a working set of commands that govern the runtime state of application deployments with long running processes. Service provides a ready means to hook your scripts into that life cycle control structure. There are times though where you may wish to create your own service controller.

For example, sometimes it is advantageous to package your scripts so control operations are self-sufficient (eg., not rely on external scripts being present, they may be missing or they may be the wrong version).

You might also prefer to implement your procedures directly inside CTL, or you might even want to invent your own life cycle control structure. In addition, you might want to establish a set of defaults that fit with the assumptions of your local environment.

CTL modules are the vehicle for packaging your scripts, defining defaults, and customizing the Service control lifecycle commands. Writing a module is a simple process facilitated by ProjectBuilder. Each procedure will be formalized as a command in a module. You can declare and assign defaults in the form of attributes of your new module type.

==Make a new Service control module==
=== Create a new module===

Module creation is done via the &quot;ProjectBuilder&quot; module's create-type command. For this example, a module called &quot;TomcatController&quot; is created to control the runtime state of Tomcat. TomcatController will be a subtype of Service and inherit the default control commands.
&lt;syntaxhighlight language=&quot;bash&quot;&gt;
ctl -m ProjectBuilder -c create-type -- -supertype Service -type TomcatController
&lt;/syntaxhighlight&gt;
After running create-type, the initial source code for the new module is generated. In this example, the source is found at: $CTL_BASE/src/modules/TomcatController.

Modules have a standard directory structure with standard subdirectories where you can store files.
&lt;pre&gt;
module_name
  |
  |--- type.xml            // file containing module definition
  |
  +--- bin/                // location to store your control scripts.
  |
  +--- commands/           // contains generated command files
  |
  +--- lib/                // optional resource files used by your commands
&lt;/pre&gt;
      
By convention, the bin directory is where scripts called by service control commands can be located. In the lib subdirectory, ancillary files like templates, or data files can be stored.

===Declare your procedures===

As mentioned earlier, your procedures may already be in the form of scripts, while others might be an accepted manual set of steps.

The first exmple shows how to package existing scripts in a module. This makes the module self sufficent and avoids problems due dependencies on external scripts (eg, they are missing, out of date).

Imagine a set of existing scripts existed: status.sh, start.sh, isup.sh, isdown.sh. These would be copied to the bin/ subdirectory of the module source (e.g, $CTL_BASE/src/modules/TomcatController/bin). These scripts can then be referred to as ${modules.dir}/TomcatController/bin/script-name. The ${modules.dir}/TomcatController/bin path represents the module directory's bin/ path after the module has been installed.

You then define defaults for the module establishing the new script locations. The attribute-default definitions below map each script to their appropriate attribute.

Edit the generated type.xml file and modify the attribute definitions (eg, edit $CTL_BASE/src/modules/TomcatController/type.xml). Locate the attributes tags and introduce your attribute defaults between them using the attribute-default tag:

&lt;syntaxhighlight language=&quot;xml&quot;&gt;
   &lt;attributes&gt;
      &lt;attribute-default name=&quot;service-start-script&quot; 
          value=&quot;${modules.dir}/TomcatController/bin/start.sh&quot;&gt;
        &lt;doc&gt;script to execute for startService command&lt;/doc&gt;
      &lt;/attribute-default&gt;
      &lt;attribute-default name=&quot;service-stop-script&quot; 
          value=&quot;${modules.dir}/TomcatController/bin/stop.sh&quot;&gt;
        &lt;doc&gt;script to execute for stopService command&lt;/doc&gt;
      &lt;/attribute-default&gt;
      &lt;attribute-default name=&quot;service-isup-script&quot; 
          value=&quot;${modules.dir}/TomcatController/bin/isup.sh&quot;&gt;
        &lt;doc&gt;script to execute for assertServiceIsUp command&lt;/doc&gt;
      &lt;/attribute-default&gt;
      &lt;attribute-default name=&quot;service-isdown-script&quot; 
          value=&quot;${modules.dir}/TomcatController/bin/isdown.sh&quot;&gt;
        &lt;doc&gt;script to execute for assertServiceIsDown command&lt;/doc&gt;
      &lt;/attribute-default&gt;

      ...
    &lt;/attributes&gt;
&lt;/syntaxhighlight&gt;

The bold text shows each of the scripts relative to their location in the module. No assumption is made about what these scripts are called.

===Build the the module===

The last step before you can use your module is to build and upload it to the repository. Use the build-type command in ProjectBuilder and specify your module name and the -upload flag.
&lt;syntaxhighlight language=&quot;bash&quot;&gt;
ctl -m ProjectBuilder -c build-type -- -type TomcatController -upload
&lt;/syntaxhighlight&gt;

The new module is ready for use.

===Preparations for use===

To begin using the TomcatController type, an instance of it must be defined. TomcatController objects can then be mapped to the Nodes on which they will be deployed.

Because attributes were used to define the control script locations, the definition of a new service object is very simple in XML using a deployment tag:
&lt;syntaxhighlight language=&quot;xml&quot;&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
    &lt;!DOCTYPE project PUBLIC &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; 
        &quot;project.dtd&quot;&gt;
    &lt;project&gt;

  &lt;!--
      **
      ** Defines a TomcatController resource named &quot;tomcat1&quot;
      **
  --&gt;
  &lt;deployment 
      type=&quot;TomcatController&quot;
      name=&quot;tomcat1&quot; 
      description=&quot;The Tomcat deployment.&quot; 
      installRoot=&quot;${env.CTIER_ROOT}/demo&quot; 
      basedir=&quot;${env.CTIER_ROOT}/demo&quot; &gt;

     &lt;!--
      **
      ** References the localhost node where the Tomcat server will run
      **
      --&gt;
    &lt;referrers replace=&quot;false&quot;&gt;
      &lt;resource type=&quot;Node&quot; name=&quot;localhost&quot;/&gt;
    &lt;/referrers&gt;
  &lt;/deployment&gt;

&lt;/project&gt;
&lt;/syntaxhighlight&gt;

Notice because attributes were used to default the location of the scripts (now also inside the module) no additional settings were required to define their locations.

In this case, the script locations won't change but it is possible that some of the Tomcat configuration settings might change. Maybe Tomcat server port is different in QA.

This example also shows the &quot;tomcat1&quot; server will run on the Node &quot;localhost&quot;.

These resource definitions can be loaded via ProjectBuilder using the load-resources command:
&lt;syntaxhighlight language=&quot;bash&quot;&gt;
ctl -p project -m ProjectBuilder -c load-resources -- -filename /path/to/metadata.xml
&lt;/syntaxhighlight&gt;

With the resources registered to the repository, the last step is to prepare CTL via ctl-project.
&lt;syntaxhighlight language=&quot;bash&quot;&gt;
ctl-exec -- ctl-project -a install
&lt;/syntaxhighlight&gt;

==Execute the service control commands==
===CLI execution===

To run a command from your utility you'll use the following form:
&lt;syntaxhighlight language=&quot;bash&quot;&gt;
ctl -p project -t TomcatController -r resource -c command
&lt;/syntaxhighlight&gt;
To run the &quot;assertServiceIsUp&quot; command for the &quot;tomcat1&quot; Tomcat server on the local host run:
&lt;syntaxhighlight language=&quot;bash&quot;&gt;
ctl -p demo -t TomcatController -r tomcat1 -c assertServiceIsUp
&lt;/syntaxhighlight&gt;

...or to run the &quot;assertServiceIsUp&quot; command on nodes tagged &quot;tomcats&quot; in the project named &quot;default&quot; run:

&lt;syntaxhighlight language=&quot;bash&quot;&gt;
ctl -I tags=tomcats -p demo -t TomcatController -r tomcat1 -c assertServiceIsUp
&lt;/syntaxhighlight&gt;

You might recall that assertServiceIsUp command is actually used by higher level workflow commands. You can call assertServiceIsUp via the Status command like so:

&lt;syntaxhighlight language=&quot;bash&quot;&gt;
ctl -p demo -t TomcatController -r tomcat1 -c Status
&lt;/syntaxhighlight&gt;

{{Manual/navbox}}
[[Category:Service]]
[[Category:Screencasts]]</text>
    </revision>
  </page>
  <page>
    <title>SessionQuery Type Reference</title>
    <id>1693</id>
    <revision>
      <id>11465</id>
      <timestamp>2009-12-15T00:31:40Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Tasks&lt;/categorytree&gt;
{{stub}}
Queries session data. See [[Session Task Reference]].
==Examples==

&lt;syntaxhighlight&gt;
&lt;target&gt;

  &lt;macrodef name=&quot;doTest&quot;&gt;
    &lt;attribute name=&quot;k1&quot;/&gt;
    &lt;attribute name=&quot;k2&quot;/&gt;
    &lt;sequential&gt;
      &lt;property
	  name=&quot;test.@{k1}.@{k2}&quot;
	  value=&quot;1&quot;/&gt;
      &lt;echo level=&quot;error&quot;&gt;test.@{k1}.@{k2}&lt;/echo&gt;
    &lt;/sequential&gt;
  &lt;/macrodef&gt;

  &lt;session-getinstance session=&quot;test3&quot;/&gt;
  &lt;session-put session=&quot;test3&quot; 
	       key=&quot;field1.key1a.field2.key1b&quot; 
	       value=&quot;value1.limon.value2.callee&quot;/&gt;
  &lt;session-put session=&quot;test3&quot; 
	       key=&quot;field1.key2a.field2.key2b&quot; 
	       value=&quot;value1.polly.value2.amee&quot;/&gt;

  &lt;apply-macro macro=&quot;doTest&quot;&gt;
    &lt;errorhandler&gt;
      &lt;fail/&gt;
    &lt;/errorhandler&gt;
    &lt;session-query
	session=&quot;test3&quot;
	select=&quot;k1,k2&quot;
	match=&quot;value&quot;
	pattern=&quot;value1.(.*).value2.(.*)&quot;&gt;
      &lt;where select=&quot;k2&quot; op=&quot;eq&quot; value=&quot;callee&quot;/&gt;
    &lt;/session-query&gt;
  &lt;/apply-macro&gt;

  &lt;fail unless=&quot;test3.success&quot;&gt;
    &lt;condition property=&quot;test3.success&quot;&gt;
      &lt;and&gt;
	&lt;isset property=&quot;test.limon.callee&quot;/&gt;
	&lt;not&gt;
	  &lt;isset property=&quot;test.polly.amee&quot;/&gt;
	&lt;/not&gt;
      &lt;/and&gt;

    &lt;/condition&gt;
  &lt;/fail&gt;

&lt;/target&gt;
&lt;/syntaxhighlight&gt;

{{Reference/navbox}}
[[Category:Command Dispatcher Ant Types]]</text>
    </revision>
  </page>
  <page>
    <title>Session Task Reference</title>
    <id>153</id>
    <revision>
      <id>12290</id>
      <timestamp>2010-01-13T21:57:57Z</timestamp>
      <contributor>
        <username>Anthony</username>
        <id>42</id>
      </contributor>
      <comment>/* General usage */</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Tasks&lt;/categorytree&gt;
=Description=

      &lt;p&gt;
	The session tasks provide a convenient programmatic interface to minupulating
	key/value pairs. These tasks also facilitate sharing data across commands within
	a module.
      &lt;/p&gt;

=General usage=

      &lt;pre&gt;
	&amp;lt;session-getinstance session=&quot;my.session&quot;/&amp;gt;
        &amp;lt;session-put session=&quot;my.session&quot; key=&quot;key1&quot; value=&quot;value1&quot;/&amp;gt;
        &amp;lt;session-put session=&quot;my.session&quot; key=&quot;key2&quot; value=&quot;value2&quot;/&amp;gt;
        &amp;lt;session-get session=&quot;my.session&quot; key=&quot;key1&quot; resultproperty=&quot;get.result&quot;/&amp;gt;
        &amp;lt;session-remove session=&quot;my.session&quot; key=&quot;key2&quot; /&amp;gt;
        &amp;lt;session-store session=&quot;my.session&quot; file=&quot;my.session&quot; /&amp;gt;
      &lt;/pre&gt;

In lieu of complete documentation refer to this unit test file: http://controltier.svn.sourceforge.net/viewvc/ctl-dispatch/branches/ctl-dispatch-1-4-support/src/test/com/controltier/ctl/tasks/session/session-all.xml?content-type=text%2Fplain for example usage.

&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Command Dispatcher Ant Tasks]]</text>
    </revision>
  </page>
  <page>
    <title>Setting</title>
    <id>865</id>
    <redirect />
    <revision>
      <id>10993</id>
      <timestamp>2009-12-13T16:19:21Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[Category:Setting]]</comment>
      <text xml:space="preserve">#REDIRECT [[:Category:Setting]]</text>
    </revision>
  </page>
  <page>
    <title>Setting-info Task Reference</title>
    <id>171</id>
    <revision>
      <id>13524</id>
      <timestamp>2010-11-10T01:45:43Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;depot.&quot; to &quot;project.&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Tasks&lt;/categorytree&gt;

=Description=
      &lt;p&gt;
	Looks up info from a [[SettingGet Task Reference|setting-get]] query.
      &lt;/p&gt;
    
=Parameters=

      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;depot&lt;/td&gt;&lt;td&gt;The project to update&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;resultproperty&lt;/td&gt;&lt;td&gt;Property to set with
	  success/fail value. If the decrypt attribute is not true
	  but the value is encrypted then no result property is set.&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;field&lt;/td&gt;&lt;td&gt;The field value to retrieve. Field names
	  are: name, maprefuri,description, type, encrypted,
	  value. The encrypted field value will either be true or false.&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;decrypt&lt;/td&gt;&lt;td&gt;If set true, Workbench is queried for
	  the decrypted value.
	  &lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;refid&lt;/td&gt;&lt;td&gt;The reference id name.
	  &lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;

=Examples=

      &lt;p&gt;
	Queries about a setting and then use setting-info to
	lookup from the value field. See [[ObjectMaprefUri|object-mapref]] task to lookup an setting mapref.
      &lt;/p&gt;
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
     &lt;setting-get
            id=&quot;setting.id&quot;
            depot=&quot;${project.name}&quot;
            resultproperty=&quot;empty&quot;
            comment=&quot;nocomment&quot;
            maprefuri=&quot;${setting.mapref}&quot;/&gt;

        &lt;!-- setting-info task can retrieve the field values from the metadata.
            field names are:
            name, maprefuri, description, type, encrypted, value
        --&gt;

        &lt;echo&gt;Now Calling setting-info:&lt;/echo&gt;
        &lt;setting-info
            refid=&quot;setting.id&quot;
            decrypt=&quot;true&quot;
            field=&quot;value&quot;
            comment=&quot;nocomment&quot;
            resultproperty=&quot;setting.value&quot;/&gt;
        &lt;echo&gt;Setting value decrypted is: ${setting.value}&lt;/echo&gt;
&lt;/syntaxhighlight&gt;

&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Resource model Ant Tasks]]
[[Category:Setting]]</text>
    </revision>
  </page>
  <page>
    <title>SettingGet Task Reference</title>
    <id>170</id>
    <revision>
      <id>13525</id>
      <timestamp>2010-11-10T01:45:51Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;depot.&quot; to &quot;project.&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Tasks&lt;/categorytree&gt;

==Description==
      &lt;p&gt;
	Queries info about the specified setting and stores result in specified reference &quot;id&quot;.
      &lt;/p&gt;

==Parameters==
      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;depot&lt;/td&gt;&lt;td&gt;The project to update&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;resultproperty&lt;/td&gt;&lt;td&gt;Property to set with
	  success/fail value&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;comment&lt;/td&gt;&lt;td&gt;Text describing purpose of update&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;maprefuri&lt;/td&gt;&lt;td&gt;The mapref-uri of the object in Workbench.
	  &lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;id&lt;/td&gt;&lt;td&gt;The reference id name.
	  &lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;
    
==Examples==
      &lt;p&gt;
	Queries about a setting and then use [[SettingInfo Task Reference|setting-info]] to
	lookup from the value field. See [[ObjectMaprefUri|object-mapref]] task to lookup an setting mapref.
      &lt;/p&gt;
        &lt;syntaxhighlight lang=&quot;xml&quot;&gt;
    &lt;setting-get
            id=&quot;setting.id&quot;
            depot=&quot;${project.name}&quot;
            resultproperty=&quot;empty&quot;
            comment=&quot;nocomment&quot;
            maprefuri=&quot;${setting.mapref}&quot;/&gt;
        &lt;!-- setting-info task can retrieve the field values from the metadata.
            field names are:
            name, maprefuri, description, type, encrypted, value
        --&gt;
        &lt;echo&gt;Now Calling setting-info:&lt;/echo&gt;
        &lt;setting-info
            refid=&quot;setting.id&quot;
            field=&quot;value&quot;
            comment=&quot;nocomment&quot;
            resultproperty=&quot;setting.value&quot;/&gt;
        &lt;echo&gt;Setting value is: ${setting.value}&lt;/echo&gt;
    &lt;/syntaxhighlight&gt;

&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Resource model Ant Tasks]]
[[Category:Setting]]</text>
    </revision>
  </page>
  <page>
    <title>SettingInfo Task Reference</title>
    <id>1860</id>
    <redirect />
    <revision>
      <id>12357</id>
      <timestamp>2010-02-04T00:08:28Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <comment>moved [[SettingInfo Task Reference]] to [[Setting-info Task Reference]]:&amp;#32;task is named with dash</comment>
      <text xml:space="preserve">#REDIRECT [[Setting-info Task Reference]]</text>
    </revision>
  </page>
  <page>
    <title>Setting Concepts</title>
    <id>729</id>
    <revision>
      <id>7039</id>
      <timestamp>2009-07-16T21:23:57Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">{{stub}}

==Intent==
* describes a configuration setting.

== Problem==
== Discussion==
== Structure==

[[Image:Setting-structure.png]]


See also [[Attributes]]

== Example==
==Check List==
== Rules of Thumb==
== Related Types==

*  [[Core Type Guide#Assembly|Assembly]]

Supertype:

*  [[Core Type Guide#Resource|Resource]]

{{Core Type Guide Linkback}}


[[Category:Setting]]</text>
    </revision>
  </page>
  <page>
    <title>Setting Type Reference</title>
    <id>191</id>
    <revision>
      <id>13818</id>
      <timestamp>2010-11-10T15:13:52Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;object name&quot; to &quot;resource name&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Resource model Ant Types&lt;/categorytree&gt;

      &lt;p&gt;
	The Setting Ant data type represents an object of a Setting base type.
      &lt;/p&gt;
 
==Attributes==

      &lt;table class=&quot;wikitable&quot;&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;name&lt;/td&gt;&lt;td&gt;The resource name.&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;type&lt;/td&gt;&lt;td&gt;The object type name.&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;maprefuri&lt;/td&gt;&lt;td&gt;The maprefUri&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;description&lt;/td&gt;&lt;td&gt;The object description.&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;settingValue&lt;/td&gt;&lt;td&gt;The setting value.&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;settingType&lt;/td&gt;&lt;td&gt;The setting type.&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;
 
==Examples==

     &lt;p&gt;
       Shows Setting data type used in the [[ObjectUpdate Task Reference|object-update]] Ant
       task. 
      &lt;/p&gt;
      &lt;pre&gt;
	&amp;lt;object-update depot=&quot;${context.depot}&quot;
                       resultproperty=&quot;result&quot;
                       comment=&quot;Updated aSetting resource.&quot;&amp;gt;
          &amp;lt;setting maprefUri=&quot;${maprefUri}&quot;
                   name=&quot;aSetting&quot;
                   type=&quot;SettingSubtype&quot;
                   description=&quot;this is a setting object&quot;
                   settingValue=&quot;myValue&quot;
                   settingType=&quot;myUserType&quot;/&amp;gt;
	&amp;lt;/object-update&amp;gt;

      &lt;/pre&gt;
&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;
[[Category:Resource model Ant Types]]
[[Category:Setting]]</text>
    </revision>
  </page>
  <page>
    <title>Setting Up A ControlTier CentOS VM</title>
    <id>2043</id>
    <revision>
      <id>14861</id>
      <timestamp>2010-11-29T21:55:16Z</timestamp>
      <contributor>
        <username>Raj</username>
        <id>113</id>
      </contributor>
      <comment>/* Create a project */ 1</comment>
      <text xml:space="preserve">This page documents setting up a VMware virtual machine (VM) based CentOS OS ControlTier development environment. It covers all the steps from creating the system image from a downloaded ISO to installing the ControlTier RPM and setting up a user account to do ControlTier module development.

== Description ==
This section starts with installing VMWare and then setting up and configuring a CentOS OS on the Virtual machine. After successfully setting up the VM, we will discuss about modifying system settings to allow seamless ssh connection to the VM from the host machine. Once the CentOS VM is ready, we will go ahead and install ControlTier 3.6 in the VM and set a complete ControlTier development environment.

== Install VMWare ==
For training purpose you can install a trial version of VMWare from http://www.vmware.com/

You can also purchase a full version of VMWare fusion for enhanced features and support.

== CentOS setup ==
Once you have installed VMWare in your machine you need to follow the steps mentioned below to set up a CentOS Virtual Machine.

* Download an image ISO of the latest version of CentOS OS from the following URLs and save it in your real machine. This will be an ISO file that will be used while setting up the VM.
   For 32 bit    http://isoredirect.centos.org/centos/5/isos/i386/
   For 64 bit http://isoredirect.centos.org/centos/5/isos/x86_64/ 
* Open VMWare and select 'New' under file menu. Hit 'Continue without Disc' which will take you to the following screen. Select the ISO image file that you downloaded as shown in the screen below.
    [[File:SelectISO.png]]
* Choose the Operating System as shown below.
    [[File:SelectOS.png]]
* Uncheck 'Use easy Install' option in the next Linux easy install screen and continue.
* When you have done all these, you will see a finish screen with default memory and disc space allocated to the VM. But, here we will use the customize settings button to customize our VM settings.
* During customization, you need to provide a name for the VM that you are setting up. In this example, we will use the name 'democentos54' as the VM name.
* When you hit Save after setting the name of the VM, you will see the following customization screen.
[[File:VMWare.centos.customize.png]]
    {{notice| For minimal use of ControlTier, the system should have 512 MB of memory and 16 GB of disc space}}
* Now lets change the memory from 1024 MB to 512 MB by clicking the 'Processor and Ram' icon under system settings in the above screen.
* After modifying the memory, we can use the Hard Discs icon to change the hard disc space to 16 GB in the VM.
   {{caution| Please note  that you will not be able to change the disc space after you have saved this setting in your VM}}
* Now use the Network icon to set the appropriate network setting as shown in the screen below.
[[File:VMWare.centos.network.png]]
    {{notice|This setting is used so that this VM can be directly connected from anywhere in the network}}
* Now that we have completed the CentOS machine set up, we can start the VM from the VMWare's Virtualmachine menu. This will start the VM and start the OS installation in the VM.
* During the OS installation select appropriate options like Language.
* When you see a warning window about partitioning, please choose 'YES' and continue.
[[File:VM.democentos54.partitionWarning.png]]
* When you get to the network devices screen, choose as shown below.
[[File:VMWare.centos.networkdevices.png]]
* Select 'YES' to remove partition of Linux.
[[File:VM.democentos54.removeLXpartition.png]]
* De-select the desktop-Gnome for minimal usage of the VM's memory as we just need the console to work with the VM.
[[File:VM.democentos54.deselectGnome.png]]
* Continue further until CentOS OS is installed in the VM. After install reboot the VM.
[[File:VM.democentos54.reboot.png]]
* Now, you have a CentOS linux with 512MB and 16 GB ready to use.
* During the reboot, use the following setting for firewall during firewall configuration
[[File:VM.centos.Firewell1.png]]

== Login to VM ==


* After rebooting the VM, type the following command in the new CentOS VM to find the IP of the VM.
[[File:VMWare.centos.ifconfig.png]]
* Now, open a terminal from your real machine and connect to the VM using the following command where the IP address was obtained 
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
Pushparajan-Salethaiyans-MacBook-Pro-15:~ raj$ ssh root@192.168.7.103
The authenticity of host '192.168.7.103 (192.168.7.103)' can't be established.
RSA key fingerprint is dd:ed:63:44:26:58:eb:bd:1e:77:2b:2f:d1:68:d2:35.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '192.168.7.103' (RSA) to the list of known hosts.
root@192.168.7.103's password: 
Last login: Fri Nov 19 04:10:15 2010
[root@localhost ~]# '
&lt;/syntaxhighlight&gt;

Now you have successfully logged-in as 'root' user to the new VM from your real machine.

== Changing the hostname ==
The host name of the VM needs to have a reasonable hostname so that ControlTier uses this host name as the name of the default node after installation. This hostname can also be used to connect to this VM with a qualified name in the network without using the IP address.

* We need to make some modifications in a few system files to have the alias name in the ControlTier installation.
* As a root user in the VM add an appropriate alias name in the VM's hosts file. The hosts file will be available in /etc directory.
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[root@democentos54 ~]$ cat /etc/hosts
# Do not remove the following line, or various programs
# that require network functionality will fail.
127.0.0.1               localhost.localdomain localhost democentos54
::1             localhost6.localdomain6 localhost6
&lt;/syntaxhighlight&gt;

* Edit the HOSTNAME variable in /etc/sysconfig/network file so that this alias name gets registered as the hostname. Here, demcentos54 is used instead of localhost.localdomain
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[root@democentos54 ~]$ cat /etc/sysconfig/network
NETWORKING=yes
NETWORKING_IPV6=no
HOSTNAME=democentos54
&lt;/syntaxhighlight&gt;

* Remember that any machine trying to connect to this VM using the alias/DNS name should have this name added to its hosts file.
* Inorder for these changes to take effect, use the following command to restart the remote machine without logging out.
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
 [root@democentos54 ~]$ service network restart
&lt;/syntaxhighlight &gt;

{{notice| All the above operations should be done as the root user}}

* After adding the host name, the new host name can be confirmed by typing the following command.
&lt;syntaxhighlight lang =&quot;bash&quot;&gt;
[root@democentos54 etc]# uname -n
democentos54
&lt;/syntaxhighlight&gt;

== ControlTier installation ==

* Follow the standard [[RPM installer]] instructions to install the ControlTier server, alternatively for direct rpm installation of controlTier 3.6 , run the following commands at the terminal.
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
  rpm -i http://repo.controltier.org/controltier-repo36-3.6-0.noarch.rpm
  yum install ctier-server
   &lt;/syntaxhighlight&gt;
  
{{notice|Please follow the link for further info http://repo.controltier.org}}

Once you have installed the ControlTier 3.6 server you will see that the installation was done under a user named ctier. This user is used to install and configure ControlTier alone. The best practice is to not use this user for any other purpose. For using or developing ControlTier we need to create another user who can use the installed ControlTier without disturbing ctier user settings. Lets discuss about create a new user in the next section.

== Adding new user ==
* As discussed above create a new user to be able to use/develop ControlTier modules without mosifying ctier user settings.
{{notice| A new user can be added only as a root user}}
* Use the following commands to add a user and set password for the new user.
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[root@democentos54 ~]$ useradd raj
[root@democentos54 ~]$ passwd raj
&lt;/syntaxhighlight&gt;

The above commands will add a new user named 'raj' and sets a password for the user.

* For the new user to be able to enjoy the sudo privilege, the new user should be added in the 'wheels' group and the users in 'wheels' group should be allowed to execute all commands. 
* The new user should be allowed to execute all ControlTier commands, hence the new user should be added to the ctier user group as well. After adding them to the ~/etc/group file the difference between the original group file and the new group file should look like what is shown below
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
  [root@democentos54 etc]# diff group.orig group
11c11
&lt; wheel:x:10:root
---
&gt; wheel:x:10:root,raj
42c42
&lt; ctier:x:103:
---
&gt; ctier:x:103:raj
&lt;/syntaxhighlight&gt;

* Inorder for the wheel group members be able to execute all commands without password, we need to edit the file ~/etc/sudoers as shown below.
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
 [root@democentos54 etc]# diff sudoers.orig sudoers
86c86
&lt; #%wheel       ALL=(ALL)       NOPASSWD: ALL
---
&gt; %wheel        ALL=(ALL)       NOPASSWD: ALL
&lt;/syntaxhighlight&gt;

Now, the new user has all the privilege to run all commands.
* Also, the user should be added to 'ctier' group to be able to run ControlTier commands.
* Inorder to make ControlTier completely available for the new user, copy the 'User specific aliases and functions' from .bashrc file of 'ctier' user to .bashrc file of the 'new user'. 
* 'ctier' user's .bashrc file looks like this.
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
# Source global definitions
if [ -f /etc/bashrc ]; then
        . /etc/bashrc
fi

# User specific aliases and functions

if [ -f /opt/ctier/etc/ctierrc ]; then
        . /opt/ctier/etc/ctierrc
else
        echo /opt/ctier/etc/ctierrc not found 1&gt;&amp;2
fi 
&lt;/syntaxhighlight&gt;

* Copy the # User specific aliases and functions alone into the new user's .bashrc file and save.
* Now, the new user (raj, for example) has been added to the wheel and ctier group and can now execute all commands as root and ctier user. To confirm this use the following command to see the new user's group information. You need to be logged in as the new user
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
 [root@democentos54 etc]# su - raj
[raj@democentos54 etc]$ id
uid=500(raj) gid=500(raj) groups=10(wheel),103(ctier),500(raj) context=root:system_r:unconfined_t:SystemLow-SystemHigh
&lt;/syntaxhighlight&gt;

* Execute the following commands to see that the new user has ControlTier available.
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[raj@democentos54 etc]$ echo $CTIER_ROOT
/opt/ctier

[raj@democentos54 etc]$ ctl -?
textutil: various text utilities
commands: [Properties, cat, checksum, contains, head, nl, replace, resource-install, sort, tail, uniq, wc]

netutil: various network utilities
commands: [Properties, email, listening, reachable, resource-install, traceroute]
.
.
.
Node: A machine hosting application deployments
commands: [Get-Properties, Properties, dispatchCmd, resource-install]
resources: [democentos54]

tgz: A tgz package
commands: [Get-Properties, Install, Properties, assertPackageIsInstalled, assertPackageIsUnInstalled, assertPackageIsVerified, create, extract, finish, get, installDependencies, installPackage, prepare, purge, register, remove, resource-install, upload]


[raj@democentos54 etc]$ 
&lt;/syntaxhighlight&gt;

== SSH Configuration ==

Refer to the [[SSH_configuration#Configuring_remote_machine_for_SSH|Configuring remote machine for SSH]] section of the standard instructions to get a general idea of how ControlTier uses ssh public key authentication.

In general, it's convenient to use public key authentication in this way to allow your host machine's user account to login to the working account on the virtual machine without supplying a password.

== Working with ControlTier 3.6 ==
* Now we have set up a CentOS linux machine that has ControlTier 3.6 installed in it. We can now start working on ControlTier module development.
* Since ControlTier uses svn as the SCM we need to install svn to be able to checkout source code from the repository.
* Use the following command as a root user to download and install subversion in your VM. Run this command as root user
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
  [root@democentos54 etc]# yum install subversion
Loaded plugins: fastestmirror
Loading mirror speeds from cached hostfile
 * addons: mirror.5ninesolutions.com
 * base: centos.eecs.wsu.edu
 * extras: centos.promopeddler.com
 * updates: mirrors.usc.edu
Setting up Install Process
.
.
.
&lt;/syntaxhighlight&gt;

* Create a directory named 'src' in the user home directory.
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[raj@democentos54 ~]$ pwd
/home/raj
[raj@democentos54 ~]$ mkdir src
&lt;/syntaxhighlight&gt;

* Check out controltier source from the repository https://moduleforge.svn.sourceforge.net/svnroot/moduleforge/controltier/branches/controltier-3-6-support  into the src directory. Execute the following command to check out source code from the repository.
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
  [raj@democentos54 ~] svn co https://moduleforge.svn.sourceforge.net/svnroot/moduleforge/controltier/branches/controltier-3-6-support  
&lt;/syntaxhighlight&gt;

This will check out the core, atg and element modules that can be used for further development in this VM.

== Create a project ==
{{notice| Since, we have created a new user to work with ControlTier, we have to be logged in as the new user for ControlTier development}}
* Now that we have the source code for basic ControlTier development, we can create a new project through command line to use this as our development environment.
* Use the following command to create a project in your workbench.
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
 [raj@democentos54 etc]$ ctl-project -a create -p myproject
Project structure created: /opt/ctier/ctl/projects/myproject
Invoking external setup script: /opt/ctier/pkgs/ctl-3.6.0/bin/commander-ctl-project.xml
Beginning client setup ...
Running CTL project setup: /opt/ctier/pkgs/ctl-3.6.0/lib/ant/controllers/ctl/projectsetupCmd.xml ...
Trying to override old definition of task document-property
CTL project setup procedure completed.
Creating Workbench project 'myproject'. This may take several minutes ...
Workbench project created.
Beginning node registration ...
Workbench client host &quot;democentos54[Node]&quot; already registered, updating...
Completed client side project setup. Node democentos54 registered in project: &quot;myproject&quot;.
&lt;/syntaxhighlight&gt;

Now, lets use a sample project.xml to include in the new project that will be used for further development. Lets call this xml 'builders.centos54.xml'. Create this xml in the src directory.

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE project PUBLIC &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; &quot;project.dtd&quot;&gt;

&lt;project&gt;
  &lt;deployment type=&quot;ProjectBuilder&quot; name=&quot;elements-3-6-support&quot; description=&quot;3.6 support branch Elements library project builder&quot; basedir=&quot;${user.home}/src/controltier-3-6-support/elements&quot; installRoot=&quot;${user.home}/target/controltier-3-6-support/elements&quot; startuprank=&quot;&quot;&gt;
    &lt;referrers replace=&quot;false&quot;&gt;
      &lt;resource name=&quot;democentos54&quot; type=&quot;Node&quot;/&gt;
    &lt;/referrers&gt;
  &lt;/deployment&gt;
  &lt;deployment type=&quot;ProjectBuilder&quot; name=&quot;atg-3-6-support&quot; description=&quot;3.6 support branch ATG Solution Library project builder&quot; basedir=&quot;${user.home}/src/controltier-3-6-support/atg&quot; installRoot=&quot;${user.home}/target/controltier-3-6-support/atg&quot; startuprank=&quot;&quot;&gt;
    &lt;referrers replace=&quot;false&quot;&gt;
      &lt;resource name=&quot;democentos54&quot; type=&quot;Node&quot;/&gt;
    &lt;/referrers&gt;
  &lt;/deployment&gt;
  &lt;deployment type=&quot;ProjectBuilder&quot; name=&quot;core-3-6-support&quot; description=&quot;3.6 support branch core modules project builder&quot; basedir=&quot;${user.home}/src/controltier-3-6-support/core&quot; installRoot=&quot;${user.home}/target/controltier-3-6-support/core&quot; startuprank=&quot;&quot;&gt;
    &lt;referrers replace=&quot;false&quot;&gt;
      &lt;resource name=&quot;democentos54&quot; type=&quot;Node&quot;/&gt;
    &lt;/referrers&gt;
  &lt;/deployment&gt;
  &lt;deployment type=&quot;ProjectBuilder&quot; name=&quot;development&quot; description=&quot;Development project builder&quot; basedir=&quot;${user.home}/src/development&quot; installRoot=&quot;${user.home}/target/development&quot; startuprank=&quot;&quot;&gt;
    &lt;referrers replace=&quot;false&quot;&gt;
      &lt;resource name=&quot;democentos54&quot; type=&quot;Node&quot;/&gt;
    &lt;/referrers&gt;
  &lt;/deployment&gt;
&lt;/project&gt;
&lt;/syntaxhighlight&gt;

{{notice| Please make a note of the 'basedir' in the xml that points to the latest version checked out from SVN.}}
{{notice| Please make a note of the resource name in the referrers tag in the xml. This name should be the node resource name as created in the ControlTier workbench as shown below}}
[[File:VM.democentos54.nodeName.png]]

* Now lets load this xml resource in our project so that this can be used to instantiate ProjectBuilder. Use the following command to load this resource.
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
  [raj@democentos54 src]$ ctl -p myproject -m ProjectBuilder -c load-resources -- -filename builders.centos54.xml
Loading &quot;/home/raj/src/builders.centos54.xml&quot; ...
1 file(s) have been successfully validated.
Processing /home/raj/src/builders.centos54.xml to /opt/ctier/ctl/var/tmp/projectxml-173893842.xml
Loading stylesheet /opt/ctier/ctl/projects/myproject/modules/ProjectBuilder/lib/load-resources/projectxml/project.xsl
Mapping XML to properties ...
[timer: 0.594 sec]
Batching new object creation requests ...
[timer: 1.471 sec]
No new objects to be created ...
[timer: 1.475 sec]
Batching object attribute update requests ...
[timer: 2.012 sec]
Batching resource and referrer updates ...
[timer: 2.093 sec]
Executing 8 batched object updates ...
[timer: 7.669 sec]
Adding document transforms to deployments ...
[timer: 7.753 sec]
&lt;/syntaxhighlight&gt;

* Now install these ProjectBuilder types in the project using the following command
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[raj@democentos54 src]$ ctl-project -p myproject -a install 
&quot;resource-install&quot; command running for resource: elements-3-6-support[ProjectBuilder]
&quot;resource-install&quot; command running for resource: core-3-6-support[ProjectBuilder]
&quot;resource-install&quot; command running for resource: development[ProjectBuilder]
&quot;resource-install&quot; command running for resource: atg-3-6-support[ProjectBuilder]
&lt;/syntaxhighlight&gt;

The above output is because of the four ProjectBuilder types that we had included in 'builders.centos54.xml'.
* If you do a resource search in workbench now, it should show these four resources added to the project.

== Building and uploading core and element modules ==

* Inorder to create and upload the element modules use the following command.
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
   [raj@democentos54 modules]$ ctl -p myproject -t ProjectBuilder -r elements-3-6-support -c build-library -- -upload 
Building library from modules in opts.basedir: /home/raj/src/controltier-3-6-support/elements/modules
setting property seed.build.name to elements-3-6-support-seed
processing modules in directory: /home/raj/src/controltier-3-6-support/elements/modules
converting type.xml for module: ActiveMQ
generating handlers...
packaging module: ActiveMQ
.
.
.
.
Deleting: /home/raj/src/controltier-3-6-support/elements/modules/ZipBuilder/module.properties.temp
Building jar: /home/raj/target/controltier-3-6-support/elements/modules/ZipBuilder-1.jar
 seed.build.name=elements-3-6-support-seed
 generating elements-3-6-support-seed.jar
Building jar: /home/raj/target/controltier-3-6-support/elements/elements-3-6-support-seed.jar
Uploading module jar: &quot;/home/raj/target/controltier-3-6-support/elements/elements-3-6-support-seed.jar&quot; ...
Imported types defined in library: /home/raj/target/controltier-3-6-support/elements/elements-3-6-support-seed.jar
&lt;/syntaxhighlight&gt;

* Inorder to create and upload the core modules use the following command.

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[raj@democentos54 src]$ ctl -p myproject -t ProjectBuilder -r core-3-6-support -c build-library -- -upload 
Created dir: /home/raj/target/controltier-3-6-support/core
Building library from modules in opts.basedir: /home/raj/src/controltier-3-6-support/core/modules
setting property seed.build.name to core-3-6-support-seed
Created dir: /home/raj/target/controltier-3-6-support/core/modules
processing modules in directory: /home/raj/src/controltier-3-6-support/core/modules
converting type.xml for module: Builder
generating handlers...
packaging module: Builder
Copying 1 file to /home/raj/src/controltier-3-6-support/core/modules/Builder
.
.
.
Deleting: /home/raj/src/controltier-3-6-support/core/modules/zip/module.properties.temp
Building jar: /home/raj/target/controltier-3-6-support/core/modules/zip-1.jar
 seed.build.name=core-3-6-support-seed
 generating core-3-6-support-seed.jar
Building jar: /home/raj/target/controltier-3-6-support/core/core-3-6-support-seed.jar
Uploading module jar: &quot;/home/raj/target/controltier-3-6-support/core/core-3-6-support-seed.jar&quot; ...
Imported types defined in library: /home/raj/target/controltier-3-6-support/core/core-3-6-support-seed.jar
[raj@democentos54 src]$ 
&lt;/syntaxhighlight&gt;

Now, we have a CentOS linux Virtual machine that has ControlTier 3.6 installed and we have a project named 'myproject' that has all the basic types and resources available.</text>
    </revision>
  </page>
  <page>
    <title>Setting Up A ControlTier Windows VM</title>
    <id>2066</id>
    <revision>
      <id>15034</id>
      <timestamp>2010-12-01T21:10:35Z</timestamp>
      <contributor>
        <username>Raj</username>
        <id>113</id>
      </contributor>
      <minor/>
      <comment>/* Windows Set-up */</comment>
      <text xml:space="preserve">This page documents setting up a VMware virtual machine (VM) based Windows OS ControlTier development environment. It covers all the steps from creating the system image from a downloaded ISO to installing ControlTier  and setting up a user account to do ControlTier module development.

==Description==
This page will provide a step by step procedure to set up a ControlTier Windows development environment. If you using Mac you might consider following [http://doc36.controltier.org/wiki/Setting_Up_A_ControlTier_CentOS_VM#Install_VMWare install VMWare] to install VMWare fusion.

==Windows Set-up==

Since Windows OS is a commercial product, we assume you have a licensed version of the image ISO that can be used to set up a windows VM.

* Open VMWare and select 'New' under file menu. Hit 'Continue without Disc' which will take you to the following screen. Select the Windows ISO image file that you purchased.
[[File:Win.SelectISO.png]]

* Choose the right OS as shown below.
[[File:VM.Win.ChooseOS.png]]

* Uncheck, 'Windows Easy Install' and continue to the customization screen. In the customize screen set the following.
* The minimum memory on the VM should be 768MB for optimal use of ControlTier..
[[File:VM.Win.memory.png]]
* The minimum disc space to install ControlTier should be 16GB.
[[File:VM.Win.Disc.png]]
* Choose the following setting for Network.
[[File:VM.Win.Network.png]]

* Now, start the VM. You will see Windows being installed in the VM after selecting the language settings.
* Provide the product key when prompted.
  [[File:VM.Win.ProductKey.png]]
* Select the Windows version you purchased and hit 'Next'.
[[File:VM.Win.WinEdition.png]]
* Use the following option during install.
[[File:VM.Win.NewInstall.png]]
* Continue until installation completes and the system restarts.
[[File:VM.Win.InstallProg.png]]

==Configuration==

* After restart, configure your Windows machine by setting the appropriate timezone (Usually this is set automatically).
* In the 'Initial Configuration Tasks' screen, click 'Provide Computer Name and domain' and rename the Computer Full Name.
[[File:VM.Win.CompName.png]]
* Enable automatic update for windows.
[[File:VM.Win.EnableUpdates.png]]
* Check for updates and install updates from the 'Download and Install updates' option.
[[File:VM.Win.UpdatesInstall.png]]
* To be able to add features, restart the machine now so that all these changes get reflected.
* Install windows power shell feature if you want to use power shell in future. For basic ControlTire module development, we do not need this feature.
[[File:VM.Win.Features.png]]
* Enable remote desk top for this machine
[[File:VM.Win.RemoteDeskTop.png]]
* Disable windows firewall as we will use this for ControlTier development only.
[[File:VM.WIn.Firewall.png]]
* Now, close the configuration tasks screen.
{{notice| Now the windows machine is ready with basic windows set-up for ControlTier installation}}

==Remove IE security setting==
* When you open Internet explorer and try to open any website, you will see security warning as shown below.
[[File:VM.Win.IESecurity.png]]
* In order to avoid this security warning every time, turn off the Enhanced Security Configuration(ESC) in the Server Manager as shown below.
 [[File:VM.Win.ECSLink.png]]
 [[File:VM.Win.ESCoff.png]]


==Install Java==
* As a pre-requisite for ControlTier, we need to have java installed in the server machine. Download the latest version of java and install.
{{notice| Make sure to install java in C:\java directory to avoid issues arising from having spaces in directory names (e.g. &quot;Program Files&quot;) while installing ControlTier}}
[[File:VM.Win.JavaJDK.png]]
[[File:VM.Win.JavaJRE.png]]

== Install Eclipse IDE ==
If you're happy using tools like TortoiseSVN and Notepad/Wordpad you can avoid installing a full IDE:

* Inorder to use this machine for module development (e.g. work with an SCM and edit XML files), we need to install an IDE. Lets install eclipse IDE in this machine.
* Download Eclipse Classic 3.6.1 from http://www.eclipse.org/downloads.
* Unzip the downloaded archive into c:\Program Files directory

== Install Subclipse ==
Some sort of Subversion client is necessary since the ControlTier Sourceforge repositories use Subversion:
 
* Subclipse is a subversion plug-in that can be used to connect to the SCM.
* Open eclipse and install subclipse by going to 'help-&gt;Install new software' in the Eclipse menu.
[[File:VM.Win.Subclipse.png]]
* Use the following options during the installation and complete the installation.
[[File:VM.Win.SubChoose.png]]

==Create ctier group==
* Before installing ControlTier, create a 'ctier' group. Any user using ControlTier will be added to this group
* Create ctier group from  'Server Manager -&gt;Configuration-&gt;groups-&gt;new group'
[[File:VM.Win.createGroup.png]]

==Create new user==
* Let's create a new user called ControlTier who will have admin rights in the machine to be able to install the ControlTier server as a Windows service.
* As an admin, create a new user from the 'Server Manager-&gt;Configuration-&gt;Local users and groups'
 [[File:VM.Win.ControlTierUserCreate.png]]
* Add this ControlTier user to the 'ctier' user group.
* After creating the user, set the new user's local path to c:\ctier as shown below.
  [[File:VM.Win.LocalPath.png]]
* To provide admin rights to the ControlTier user, go to ControlPanel-&gt;user accounts -&gt;Manage another account -&gt;ControlTier user -&gt; Change account type.
* Now, change the account type for ControlTier user to 'Administrator' as shown below.
 [[File:VM.Win.ChangeAcctType.png]]
* Now, the ControlTier user has administrator right.
* It is safe to turn off user account control from 'ControlPanel-&gt;User accounts -&gt; Turn on/off User account control' since we will be using this machine for ControlTier development only.
 [[File:VM.Win.UserAccountControl.png]]

==Install ControlTier==
* Log in as ControlTier user to the windows machine.
* Follow instructions in [http://doc36.controltier.org/wiki/ZIP_installer zip installer] to install ControlTier for windows.
* Open a command prompt to set JAVA_HOME and CTIER_ROOT directories. Execute the following commands.
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
c:\ctier&gt;set JAVA_HOME=c:\java\jdk1.6.0_22
c:\ctier&gt;set CTIER_ROOT=c:\ctier
&lt;/syntaxhighlight&gt;

* To check if these variables have been set, execute the following commands.
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
c:\ctier&gt;echo %JAVA_HOME%
c:\java\jdk1.6.0_22
c:\ctier&gt;echo %CTIER_ROOT%
c:\ctier
&lt;/syntaxhighlight&gt;

* Now execute install.bat available in c:\ctier\pkgs\ControlTier-3.6.0, this will install ControlTier in the windows machine.
  [[File:VM.Win.ControlTierInstall.png]]
* ControlTier has been successfully installed in the machine.

==Providing access rights to ctier user group==
* Now that ControlTier has been installed, provide the following access to the ctier user group. These access rights will be applied to all the users added to the 'ctier' user group.
[[File:VM.Win.CtierAcces.png]]
[[File:VM.Win.Ctier_ProjectsAccess.png]]
[[File:VM.Win.Ctier_VarAccess.png]]

==ControlTier as windows service==
* To configure ControlTier as a windows service, follow this [http://doc36.controltier.org/wiki/Configuring_ControlTier_to_run_as_a_Windows_Service ControlTier as windows service]
* Having logged in as ControlTier user, go to 'Server Manager-&gt;Configuration-&gt;Services-&gt;Jetty6-ControlTier-&gt;properties'  provide the user account name and password as show below and then start the service.
 [[File:VM.Win.LogOnJetty.png]]
* This will allow ControlTier to run as windows service started as a ControlTier user.

==Create normal user==
* Since we have configured ControlTier to run as a windows service, the next step will be to create a normal user who can use ControlTier for module development.
* Log-in as an admin and create a new user named 'raj' for example from ''
[[File:VM.Win.rajUserCreate.png]]
* Add this user to the 'ctier' user group.
[[File:VM.Win.addrajtoctier.png]]

{{notice| As this 'raj' user has been adde to the 'ctier' user group, this user will have all the access rights of the 'ctier' user group.}}

==Environment Variables for normal user==
* For the normal user to be able to use ControlTier for module development, the following User environment variables should be set after switching to the normal user. This can be done from 
''''Control Panel-&gt;User Accounts -&gt;Change my environment variable''''
{{notice|If this system is exclusively for ControlTier development, these variables can be set as system variables instead of user variables}}
  &lt;syntaxhighlight lang=&quot;bash&quot;&gt;
   CTL_ROOT,CTL_HOME,CTL_BASE,Path
    &lt;/syntaxhighlight&gt;
[[File:VM.Win.userVariables.png]]

==Working with ControlTier==
*Log-in as the normal user(raj).
* Check out ControlTier-3.6 modules from https://moduleforge.svn.sourceforge.net/svnroot/moduleforge/controltier/branches/controltier-3-6-support as a new project in Eclipse into the user workspace.
[[File:VM.Win.SVNCheckOut.png]]
* Create a new project using the following command.
[[File:VM.Win.CreateProject.png]]

Now, lets use a sample project.xml to include in the new project that will be used for further development. Lets call this xml 'builders_windows.xml'. Create this xml in {userhome}\workspace directory.
* Note the user home specified in the xml. &quot;env.homepath &quot; provides the user home in windows.

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE project PUBLIC &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; &quot;project.dtd&quot;&gt;

&lt;project&gt;
  &lt;deployment type=&quot;ProjectBuilder&quot; name=&quot;elements-3-6-support&quot; description=&quot;3.6 support branch Elements library project builder&quot; basedir=&quot;${env.HOMEPATH}\workspace\controltier-3-6-support\elements&quot; installRoot=&quot;${env.HOMEPATH}\target\controltier-3-6-support\elements&quot; startuprank=&quot;&quot;&gt;
    &lt;referrers replace=&quot;false&quot;&gt;
      &lt;resource name=&quot;DemoWin2008&quot; type=&quot;Node&quot;/&gt;
    &lt;/referrers&gt;
  &lt;/deployment&gt;
  &lt;deployment type=&quot;ProjectBuilder&quot; name=&quot;atg-3-6-support&quot; description=&quot;3.6 support branch ATG Solution Library project builder&quot; basedir=&quot;${env.HOMEPATH}\workspace\controltier-3-6-support\atg&quot; installRoot=&quot;${user.HOMEPATH}/target/controltier-3-6-support/atg&quot; startuprank=&quot;&quot;&gt;
    &lt;referrers replace=&quot;false&quot;&gt;
      &lt;resource name=&quot;DemoWin2008&quot; type=&quot;Node&quot;/&gt;
    &lt;/referrers&gt;
  &lt;/deployment&gt;
  &lt;deployment type=&quot;ProjectBuilder&quot; name=&quot;core-3-6-support&quot; description=&quot;3.6 support branch core modules project builder&quot; basedir=&quot;${env.HOMEPATH}workspace\controltier-3-6-support\core&quot; installRoot=&quot;${env.HOMEPATH}\target\controltier-3-6-support\core&quot; startuprank=&quot;&quot;&gt;
    &lt;referrers replace=&quot;false&quot;&gt;
      &lt;resource name=&quot;DemoWin2008&quot; type=&quot;Node&quot;/&gt;
    &lt;/referrers&gt;
  &lt;/deployment&gt;
  &lt;deployment type=&quot;ProjectBuilder&quot; name=&quot;development&quot; description=&quot;Development project builder&quot; basedir=&quot;${env.HOMEPATH}\workspace\development&quot; installRoot=&quot;${env.HOMEPATH}\target\development&quot; startuprank=&quot;&quot;&gt;
    &lt;referrers replace=&quot;false&quot;&gt;
      &lt;resource name=&quot;DemoWin2008&quot; type=&quot;Node&quot;/&gt;
    &lt;/referrers&gt;
  &lt;/deployment&gt;
&lt;/project&gt;
&lt;/syntaxhighlight&gt;

{{notice| Please make a note of the 'basedir' in the xml that points to the latest version checked out from SVN.}}
{{notice| Please make a note of the resource name in the referrers tag in the xml. This name should be the node resource name as created in the ControlTier workbench as shown below}}
[[File:VM.Win.NodeName.png]]

* Now lets load this xml resource in our project so that this can be used to instantiate ProjectBuilder. Use the following command to load this resource.
[[File:VM.Win.LoadXml.png]]

*Now install these ProjectBuilder types in the project using the following command
[[File:VM.Win.Install.png]]

The above output is because of the four ProjectBuilder types that we had included in 'builders_windows.xml'.
*If you do a resource search in workbench now, it should show these four resources added to the project.

==Building and uploading core and element modules==
*Inorder to create and upload the element modules use the following command.
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
c:\Users\raj\workspace&gt;ctl -p myproject -t ProjectBuilder -r elements-3-6-support -c build-library -- -upload 
Building library from modules in opts.basedir: Users\raj\workspace\controltier-3-6-support\elements\modules
setting property seed.build.name to elements-3-6-support-seed
processing modules in directory: Users\raj\workspace\controltier-3-6-support\elements\modules
converting type.xml for module: ActiveMQ
generating handlers...
packaging module: ActiveMQ
.
.
.
.
Deleting: Users\raj\workspace\controltier-3-6-support\elements\modules\ZipBuilder\module.properties.temp
Building jar: Users\raj\workspace\target\controltier-3-6-support\elements\modules\ZipBuilder-1.jar
 seed.build.name=elements-3-6-support-seed
 generating elements-3-6-support-seed.jar
Building jar: \home\raj\target\controltier-3-6-support\elements\elements-3-6-support-seed.jar
Uploading module jar: &quot;Users\raj\workspace\target\controltier-3-6-support\elements\elements-3-6-support-seed.jar&quot; ...
Imported types defined in library: Users\raj\workspace\target\controltier-3-6-support\elements\elements-3-6-support-seed.jar
&lt;/syntaxhighlight

* Inorder to create and upload the core modules use the following command.

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
c:\Users\raj\workspace&gt; ctl -p myproject -t ProjectBuilder -r core-3-6-support -c build-library -- -upload 
Created dir: Usera\raj\workspace\target\controltier-3-6-support/core
Building library from modules in opts.basedir: Usera\raj\workspace\controltier-3-6-support\core\modules
setting property seed.build.name to core-3-6-support-seed
Created dir: Users\raj\workspace\target\controltier-3-6-support\core\modules
processing modules in directory: Users\raj\workspace\controltier-3-6-support\core\modules
converting type.xml for module: Builder
generating handlers...
packaging module: Builder
Copying 1 file to Users\raj\workspace\controltier-3-6-support\core\modules\Builder
.
.
.

 generating core-3-6-support-seed.jar
Building jar: Users\rajworkspace\target\controltier-3-6-support\core\core-3-6-support-seed.jar
Uploading module jar: &quot;Users\raj\workspace\target\controltier-3-6-support\core\core-3-6-support-seed.jar&quot; ...
Imported types defined in library: Users\raj\workspace\target\controltier-3-6-support\core\core-3-6-support-seed.jar
&lt;/syntaxhighlight&gt;

Now, we have a Windows Virtual machine that has ControlTier 3.6 installed and we have a project named 'myproject' that has all the basic types and resources available.</text>
    </revision>
  </page>
  <page>
    <title>Setting up a Builder for package imports</title>
    <id>63</id>
    <revision>
      <id>14167</id>
      <timestamp>2010-11-10T16:02:28Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;ctl-depot&quot; to &quot;ctl-project&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Builder&lt;/categorytree&gt;

This document describes how to import build artifacts into the ControlTier repository. It describes how to setup a Builder to run the [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Builder.html#cmd_repoImport repoImport] command.

The &lt;code&gt;repoImport&lt;/code&gt; command  looks in the target directory for matching files and loads them into the repository. Part of the import process is to not only upload the file to the repository but to also register it along with pertinent metadata.

The next sections describe how buildstamps, package types and repoImport options are used to identify and register package files to the repository.

=Buildstamps=
A buildstamp is a user-defined build identifier. Depending on local convention a buildstamp might be defined using:

* Date-time stamp: YYYYMMDD (20080630), YYYMMDDhhmm (20080630), YYYYMMDD.# (20060630.1)
* Revision id: Revision id maintained by the source code repository.
* Product version: This might be a major.minor number.
* Rolling build number: A counter incremented for every build.

From the perspective of a Builder, these are just aribitrary strings but most of the Builder commands accept the -buildstamp option.

=Package types=
Normally, one Builder uploads one or more package files of the same type.

ControlTier provides a set of package control module types, any of which can be used to manage the creation and installation life cycle for your build artifacts: bin, ear, jar, pkg, rpm, tgz, war, zip. Each of these package control module types corresponds to files with the same file extension. For example, the a file named &quot;simple.war&quot; has the &quot;war&quot; extension and is manageable using the &quot;war&quot; control module.

When the need arises, you can create subtypes of these package modules, as well. This might be necessary if you want to override standard behavior or prescribe your own dependency or property constraints.

=repoImport command=
The basic strategy used by the &lt;code&gt;repoImport&lt;/code&gt; command is to recursively look for matching files starting from the specified target directory, specified by the -targetdir option.

Because &lt;code&gt;repoImport&lt;/code&gt; must support a wide range of conventions, the command has a many arguments. For the most part though the following options drive file matching:

* -filebase: This is the filename minus the buildstamp and extension. For example, given the filename simple-123.war, &quot;simple&quot; is the filebase.
* -separator: This string separates the filebase from the buildstamp. By default the dash character (&quot;-&quot;) is used but your local convention might use something else. The &quot;-&quot; between &quot;simple&quot; and &quot;123&quot; is the separator in our example.
* -buildstamp: This is the build identifer and is the string following the separator. For example, &quot;123&quot; is the buildstamp for simple-123.war. The buildstamp often corresponds to the package version.
* -extension: This is the suffix of the filename. For the filename simple-123.war, &quot;war&quot; is the extension.

Each of these parameters can accept Java-style regular expressions though in normal practice, using a regex makes sense mostly to specify the -filebase argument.

Besides these options, the -installroot option is also often necessary. This option specifies the directory where the package should be extracted.

Here is a complete listing of the &lt;code&gt;repoImport&lt;/code&gt; command options:
&lt;pre&gt;
repoImport [-- command-options]
-buildstamp               build identifier
-requirebuildstamp        true/false. if true buildstamp option required
-separator                string separating basename from buildstamp
-extension                file extension
-filebase                 file basename minus the buildstamp and extension
-type                     the Package module type name
-installroot              directory where package will be installed
-installrank              relative ranking order
-version                  package version identifier
-propfile                 package metadata properties file
-targetdir                directory where import will begin looking for files
-min                      minimum package files to import
-max                      maximum package files to import
&lt;/pre&gt;

=Builder configuration=
Because it is cumbersome to type in so many repoImport command options, you can configure a Builder to default these options.

The following XML example shows how to configure a Builder with settings that default the &lt;code&gt;repoImport&lt;/code&gt; options.

File listing: builder-metadata.xml
&lt;pre&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE project PUBLIC &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; 
    &quot;project.dtd&quot;&gt;
&lt;project&gt;
  &lt;!--
      **
      ** Defines Builder repoImport defaulting settings
      **
  --&gt;

  &lt;!-- 
    ** defaults option: -separator  
    --&gt;
  &lt;setting type=&quot;BuilderPackageSeparator&quot; name=&quot;builder1&quot; 
           description=&quot;String separating package base from version or buildstamp.
	   Dash is default&quot; 
           settingValue=&quot;string&quot;/&gt;
  &lt;!-- 
    ** defaults option: -extension  
    --&gt;
  &lt;setting type=&quot;BuilderPackageExtension&quot; name=&quot;builder1&quot; 
           description=&quot;File extension. Regex '.*' is default&quot; 
           settingValue=&quot;string&quot;/&gt;
  &lt;!-- 
    ** defaults option: -packagetype  
    --&gt;
  &lt;setting type=&quot;BuilderPackageType&quot; name=&quot;builder1&quot; 
           description=&quot;An existing Package subtype module. Package is default&quot; 
           settingValue=&quot;type&quot;/&gt;
  &lt;!-- 
    ** defaults option: -min  
    --&gt;
  &lt;setting type=&quot;BuilderImportMin&quot; name=&quot;builder1&quot; 
           description=&quot;Minimum packages to import. 1 is default&quot; 
           settingValue=&quot;integer&quot;/&gt;
  &lt;!-- 
    ** defaults option: -max  
    --&gt;
  &lt;setting type=&quot;BuilderImportMax&quot; name=&quot;builder1&quot; 
           description=&quot;Maximum packages to import. 1 is default&quot; 
           settingValue=&quot;integer&quot;/&gt;
  &lt;!-- 
    ** defaults option: -installroot  
    --&gt;
  &lt;setting type=&quot;BuilderPackageInstallroot&quot; name=&quot;builder1&quot; 
           description=&quot;Installation root directory&quot; 
           settingValue=&quot;path&quot;/&gt;
  &lt;!-- 
    ** defaults option: -filebase  
    --&gt;
  &lt;setting type=&quot;BuilderPackageFilebase&quot; name=&quot;builder1&quot; 
           description=&quot;The file base name. Regex '.*?' is default&quot; 
           settingValue=&quot;string&quot;/&gt;

  &lt;!--
      **
      ** Defines Builder resource and its settings
      **
  --&gt;
  &lt;deployment 
      type=&quot;Builder&quot;
      name=&quot;builder1&quot; 
      description=&quot;A builder object.&quot; 
      installRoot=&quot;target_directory&quot; 
      basedir=&quot;source_directory&quot;&gt;

   &lt;resources&gt;
      &lt;resource type=&quot;BuilderPackageSeparator&quot;   name=&quot;builder1&quot;/&gt;
      &lt;resource type=&quot;BuilderPackageExtension&quot;   name=&quot;builder1&quot;/&gt;
      &lt;resource type=&quot;BuilderPackageType&quot;        name=&quot;builder1&quot;/&gt;
      &lt;resource type=&quot;BuilderImportMin&quot;          name=&quot;builder1&quot;/&gt;
      &lt;resource type=&quot;BuilderImportMax&quot;          name=&quot;builder1&quot;/&gt;
      &lt;resource type=&quot;BuilderPackageInstallroot&quot; name=&quot;builder1&quot;/&gt;
      &lt;resource type=&quot;BuilderPackageFilebase&quot;    name=&quot;builder1&quot;/&gt;
   &lt;/resources&gt;
   &lt;referrers&gt;
      &lt;resource type=&quot;Node&quot; name=&quot;localhost&quot;/&gt;
   &lt;/referrers&gt;

  &lt;/deployment&gt;
&lt;/project&gt;
&lt;/pre&gt;

To load this XML data use the [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_ProjectBuilder.html#cmd_load-resources load-resources] command:
&lt;pre&gt;
ctl -m ProjectBuilder -c load-resources -- -filename builder-metadata.xml
&lt;/pre&gt;
To then deploy the builder object the first time to the localhost node, be sure to run the [[CTL-DEPOT_Command_Reference|ctl-project]] command:
&lt;pre&gt;
ctl-project -p default -a install
&lt;/pre&gt;

The output will show the new object being installed:
&lt;pre&gt;
        &quot;Install&quot; command running for resource: (Builder) moduleA
&lt;/pre&gt;

{{Manual/navbox}}

[[Category:Builder Examples]]
[[Category:Package Examples]]</text>
    </revision>
  </page>
  <page>
    <title>Setting up a Package for import</title>
    <id>332</id>
    <revision>
      <id>13985</id>
      <timestamp>2010-11-10T15:27:28Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;-objects&quot; to &quot;-resources&quot;</comment>
      <text xml:space="preserve">&lt;noinclude&gt;&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Package&lt;/categorytree&gt;&lt;/noinclude&gt;
: ''See a [http://open.controltier.com/media/tutorial-Package-import.swf short screencast]''

      &lt;p&gt;This document describes how to store packages
      in the ControlTier repository. ControlTier provides a set of
      package control modules, any of which can be used to manage
      the creation and installation life cycle for your packaging artifacts: 
      &lt;/p&gt;
      &lt;ul&gt;
	&lt;li&gt;bin: A self extracting shar package
	&lt;/li&gt;
	&lt;li&gt;ear: An EAR package
	&lt;/li&gt;
	&lt;li&gt;jar: An JAR package
	&lt;/li&gt;
	&lt;li&gt;pkg: A SVR4 package
	&lt;/li&gt;
	&lt;li&gt;rpm: An RPM package
	&lt;/li&gt;
	&lt;li&gt;tgz: A GZip compressed TAR package
	&lt;/li&gt;
	&lt;li&gt;war: A WAR package
	&lt;/li&gt;
	&lt;li&gt;zip: A Zip package
	&lt;/li&gt;
      &lt;/ul&gt;
      &lt;p&gt;Each of these control modules can create and 
      extract the packaged files of its archive format. You can also
      override the behavior of any of the life cycle steps through
      subtyping. If you have an archive format or set of life cycle
      steps that is not covered by one of these, then subtype the
      Package control module but be sure to implement the
      &lt;code&gt;[http://controltier.sourceforge.net/docs/latest/core/reference/user/Package/commands/create.html create]&lt;/code&gt; and &lt;code&gt;[http://controltier.sourceforge.net/docs/latest/core/reference/user/Package/commands/extract.html extract]&lt;/code&gt; commands.
      &lt;/p&gt;

==Uploading an existing file as a package==

      &lt;p&gt;You can store an existing file as a package in the repository. This is 
      done in two steps:
      &lt;/p&gt;

      &lt;p&gt;&lt;strong&gt;1. Define the package metdata file&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;Create a [[project.xml]] file similar to the example below. This example
      represents the zip distribution of  Apache Tomcat 5.5 downloaded from
      here: http://tomcat.apache.org/download-55.cgi.
      For this example, imagine the file was downloaded as
      /tmp/apache-tomcat-5.5.26.zip and an XML file called /tmp/package.xml
      contains the package metadata:
      &lt;/p&gt;
 &lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE project PUBLIC &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; 
    &quot;project.dtd&quot;&gt;
&lt;project&gt;
  &lt;package 
      arch=&quot;noarch&quot;
      base=&quot;apache-tomcat-5.5.26&quot; 
      buildtime=&quot;2008061570109&quot; 
      description=&quot;The Tomcat application server.&quot; 
      filename=&quot;apache-tomcat-5.5.26.zip&quot; 
      filetype=&quot;zip&quot; 
      installroot=&quot;${resource.deployment-basedir}&quot; 
      installrank=&quot;&quot; 
      name=&quot;apache-tomcat-5.5.26.zip&quot; 
      release=&quot;&quot;
      releasetag=&quot;&quot;
      repoUrl=&quot;/zip/zips/apache-tomcat-5.5.26.zip&quot; 
      restart=&quot;false&quot;
      type=&quot;zip&quot;
      vendor=&quot;&quot;
      version=&quot;5.5.26&quot;      
      /&gt;
&lt;/project&gt;	
&lt;/syntaxhighlight&gt;

      &lt;p&gt;Of course, for your metadata file you will change the details from
      the one in the example. The table below gives a brief description for
      each of the attributes in the package metdata file. The ones with
      an asterisk are required during the deployment cycle.
      &lt;/p&gt;
      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	  &lt;th&gt;attribute&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;arch&lt;/td&gt;&lt;td&gt;Hardware architecture.&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;base*&lt;/td&gt;&lt;td&gt;Package base.&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;buildtime&lt;/td&gt;&lt;td&gt;Build identifier&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;description&lt;/td&gt;&lt;td&gt;Description of the package.&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;filename*&lt;/td&gt;&lt;td&gt;Name of the file.&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;filetype&lt;/td&gt;&lt;td&gt;Archive format..&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;installroot*&lt;/td&gt;&lt;td&gt;Directory where archive will be extracted.&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;installrank*&lt;/td&gt;&lt;td&gt;Relative ordering.&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;name*&lt;/td&gt;&lt;td&gt;Name of the package. Usually, the same as filename&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;release&lt;/td&gt;&lt;td&gt;Version release.&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;releasetag&lt;/td&gt;&lt;td&gt;Release identifier.&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;repoUrl*&lt;/td&gt;&lt;td&gt;URL to the file in the repository.&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;restart&lt;/td&gt;&lt;td&gt;Signifies if the service should restart after installation.&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;type&lt;/td&gt;&lt;td&gt;Name of control module&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;vendor&lt;/td&gt;&lt;td&gt;Organization that created the package&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;version*&lt;/td&gt;&lt;td&gt;Package version&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;


      &lt;p&gt;&lt;strong&gt;2. Upload the file to the repository&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;The next step is to upload the file to the repository using
      the metadata defined in the xml file above.
      &lt;/p&gt;
      &lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -p demo -m zip -c upload -- \
   -xml /tmp/package.xml
   -filename /tmp/apache-tomcat-5.5.26.zip 
      &lt;/syntaxhighlight &gt;

      &lt;p&gt;Output from the upload should resemble the text below:
      &lt;/p&gt;

      &lt;syntaxhighlight lang=&quot;bash&quot;&gt;
Uploading to: http://strongbad:8080/webdav/pkgs/demo/zip/zips/apache-tomcat-5.5.26.zip
Uploading: apache-tomcat-5.5.26.zip
Puted 1 file to http://strongbad:8080/webdav/pkgs/demo/zip/zips/apache-tomcat-5.5.26.zip
Loading metadata from XML file: '/tmp/package.xml' ...
Loading &quot;/tmp/package.xml&quot; ...
1 file(s) have been successfully validated.
Mapping XML to properties ...
Collecting object attributes ...
Batching object attribute updates ...
Batching resource and referrer updates ...
Executing batch update ...
      &lt;/syntaxhighlight&gt;
      &lt;p&gt;After the package has been registered you can query the repository
      and now see it listed:
      &lt;/p&gt;
      &lt;syntaxhighlight lang=&quot;bash&quot;&gt;
	$ ctl -p demo -m ProjectBuilder -c find-resources -- -type zip
	|
	|--(zip) apache-tomcat-5.5.26.zip
      &lt;/syntaxhighlight&gt;
      &lt;p&gt;Alternatively, you can go to the PackageManager in Workbench and
      view it there. Go to Workbench &amp;rarr; PackageManager &amp;rarr; Package List.
      You will see it listed as a zip package.
      &lt;/p&gt;


[[Category:Package Examples]]
[[Category:Screencasts]]</text>
    </revision>
  </page>
  <page>
    <title>Setting up an OpenLDAP instance to support ControlTier</title>
    <id>418</id>
    <revision>
      <id>9809</id>
      <timestamp>2009-12-10T22:38:01Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Configuration&lt;/categorytree&gt;

{{Version Required 3.4.3}}

These notes describe how to setup an OpenLDAP instance to support switching the ControlTier framework from file to directory based authorization &amp; authentication.

ControlTier's default use of LDAP is pretty straightforward (it mimics the file based authentication/authorization setup by the standard installation):

&lt;pre&gt;
user - readonly access
admin - can create object
architect - can create objects and create types
build - role used to limit Jobcenter/Ctl commands
deploy - role used to limit Jobcenter/Ctl commands
&lt;/pre&gt;

Note that both administration and architect users should also be assigned the user role since some elements of the UI assume this (e.g. checks for user role membership are embedded in some of the JSPs).

Note also, that only users with assigned both the admin and architect roles can create new projects in Workbench.

Follow these steps to prepare your LDAP server:

* Designate an LDAP server instance for use with ControlTier. (Note that there is a ControlTier module for configuring and managing OpenLDAP: [[Setting up an OpenLDAP instance]]).

* Prepare the default set of directory entries for use with ControlTier:

&lt;pre&gt;
[[anthony@centos52 templates]$ cat default.ldif 
# Define top-level entry:
dn: dc=controltier,dc=com
objectClass: dcObject
objectClass: organization
o: ControlTier, Inc.
dc: controltier

# Define an entry to contain users:
dn: ou=users,dc=controltier,dc=com
objectClass: organizationalUnit
ou: users

# Define some users:
dn: cn=default, ou=users,dc=controltier,dc=com
userPassword: default
objectClass: person
sn: The default account for the ControlTier client to use
cn: default

dn: cn=build, ou=users,dc=controltier,dc=com
userPassword: build
objectClass: person
sn: The account to use to demonstrate managing builds only
cn: build

dn: cn=deploy, ou=users,dc=controltier,dc=com
userPassword: deploy
objectClass: person
sn: The account to use to demonstrate managing deployment only
cn: deploy

# Define an entry to contain roles:
dn: ou=roles, dc=controltier,dc=com
objectClass: organizationalUnit
ou: roles

# Define some roles and their membership:
dn: cn=architect, ou=roles,dc=controltier,dc=com
objectClass: groupOfUniqueNames
uniqueMember: cn=default,ou=users,dc=controltier,dc=com
cn: architect

dn: cn=admin, ou=roles,dc=controltier,dc=com
objectClass: groupOfUniqueNames
uniqueMember: cn=default,ou=users,dc=controltier,dc=com
cn: admin

dn: cn=user, ou=roles,dc=controltier,dc=com
objectClass: groupOfUniqueNames
uniqueMember: cn=default,ou=users,dc=controltier,dc=com
uniqueMember: cn=deploy,ou=users,dc=controltier,dc=com
uniqueMember: cn=build,ou=users,dc=controltier,dc=com
cn: user

dn: cn=build, ou=roles,dc=controltier,dc=com
objectClass: groupOfUniqueNames
uniqueMember: cn=default,ou=users,dc=controltier,dc=com
uniqueMember: cn=build,ou=users,dc=controltier,dc=com
cn: build

dn: cn=deploy, ou=roles,dc=controltier,dc=com
objectClass: groupOfUniqueNames
uniqueMember: cn=default,ou=users,dc=controltier,dc=com
uniqueMember: cn=deploy,ou=users,dc=controltier,dc=com
cn: deploy
&lt;/pre&gt;

* Load the directory:

&lt;pre&gt;
[anthony@centos52 templates]$ ldapadd -c -x -H ldap://localhost:3890/ -D &quot;cn=Manager,dc=controltier,dc=com&quot; -w secret -f default.ldif
adding new entry &quot;dc=controltier,dc=com&quot;

adding new entry &quot;ou=users,dc=controltier,dc=com&quot;

adding new entry &quot;cn=default, ou=users,dc=controltier,dc=com&quot;

adding new entry &quot;cn=build, ou=users,dc=controltier,dc=com&quot;

adding new entry &quot;cn=deploy, ou=users,dc=controltier,dc=com&quot;

adding new entry &quot;ou=roles, dc=controltier,dc=com&quot;

adding new entry &quot;cn=architect, ou=roles,dc=controltier,dc=com&quot;

adding new entry &quot;cn=admin, ou=roles,dc=controltier,dc=com&quot;

adding new entry &quot;cn=user, ou=roles,dc=controltier,dc=com&quot;

adding new entry &quot;cn=build, ou=roles,dc=controltier,dc=com&quot;

adding new entry &quot;cn=deploy, ou=roles,dc=controltier,dc=com&quot;

&lt;/pre&gt;

* Check the directory:

&lt;pre&gt;
[anthony@centos52 tmp]$ ldapsearch -wsecret -Dcn=Manager,dc=controltier,dc=com -x -H ldap://localhost:3890 -b dc=controltier,dc=com
# extended LDIF
#
# LDAPv3
# base &lt;dc=controltier,dc=com&gt; with scope subtree
# filter: (objectclass=*)
# requesting: ALL
#

.
.
.
&lt;/pre&gt;

Note that you can supplement OpenLDAP's command line interface with [http://www.mcs.anl.gov/~gawor/ldap/ LDAP Browser/Editor], an Open Source Java GUI client application.

Since ControlTier 3.2 the server web applications have been distributed with Jetty 6. This Jetty release includes a port of the Apache Geronimo LDAP JAAS login module called called [http://www.mortbay.org/apidocs/org/mortbay/jetty/plus/jaas/spi/LdapLoginModule.html LdapLoginModule].

Proceed to [[OpenLDAP integration32+]] in order to connect the ControlTier Jetty container to your LDAP server.
For backwards compatibility, instructions for version 3.1 see [[ControlTier 3.1 and OpenLDAP integration]]

[[Category:OpenLDAP]]</text>
    </revision>
  </page>
  <page>
    <title>Setup Guide</title>
    <id>1053</id>
    <redirect />
    <revision>
      <id>10192</id>
      <timestamp>2009-12-11T17:50:39Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[Installation]]</comment>
      <text xml:space="preserve">#REDIRECT [[Installation]]</text>
    </revision>
  </page>
  <page>
    <title>Shell-exec</title>
    <id>1842</id>
    <redirect />
    <revision>
      <id>12230</id>
      <timestamp>2009-12-22T15:56:35Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[Shell-exec Task Reference]]</comment>
      <text xml:space="preserve">#REDIRECT [[Shell-exec_Task_Reference]]</text>
    </revision>
  </page>
  <page>
    <title>Shell-exec Task Reference</title>
    <id>1208</id>
    <revision>
      <id>15142</id>
      <timestamp>2011-02-10T00:43:07Z</timestamp>
      <contributor>
        <username>Juddmaltin</username>
        <id>63</id>
      </contributor>
      <minor/>
      <comment>fixed Ant task Exec link.</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Tasks&lt;/categorytree&gt;

This task allows the user to execute a script against a particular shell program on a machine. It is an extension of the [http://ant.apache.org/manual/Tasks/exec.html exec] task, and as such, supports the same attributes. See the [http://ant.apache.org/manual ANT documentation] for a description of the &lt;exec&gt; task parameters.

{{version|3.4.6}}

==Parameters==

===Attributes===

These attributes are unique to shell-exec:

&lt;table border=&quot;1&quot;&gt;
&lt;tr&gt;&lt;th&gt;attribute&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;th&gt;required&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;argline&lt;/td&gt;&lt;td&gt;arguments to pass to executable or script&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;scriptfile&lt;/td&gt;&lt;td&gt;file containing script&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;script&lt;/td&gt;&lt;td&gt;script code expression&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;scripturl&lt;/td&gt;&lt;td&gt;URL to the script. Uses the [[Dav://_prefix|dav://]] prefix &lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;expand&lt;/td&gt;&lt;td&gt;expand the script doing token substitution. true or false&lt;/td&gt;&lt;td&gt;No, default is ''false''&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;propertyset&lt;/td&gt;&lt;td&gt;References a previously defined propertyset element&lt;/td&gt;&lt;td&gt;No &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

===Nested elements===
These nested elements are unique to shell-exec:

====propertyset====
If a &lt;code&gt;[http://ant.apache.org/manual/CoreTypes/propertyset.html propertyset]&lt;/code&gt; element is defined inside the shell-exec, then any
matching property will be exported as an environment variable. 
You can control the format of the generated environment variables using [http://ant.apache.org/manual/Types/mapper.html mappers].

====script====
If a &lt;code&gt;script&lt;/code&gt; element is defined its content is evaluated as a script expression. As of [[ControlTier 3.4.7|3.4.7]].

==Examples==
A hello world example script. Executes &quot;echo hello&quot; using the bourne shell.
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
   &lt;shell-exec executable=&quot;/bin/sh&quot; script=&quot;echo hello&quot; /&gt;
&lt;/syntaxhighlight&gt;

''output''

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;hello&lt;/syntaxhighlight&gt;

Run a script file named &quot;/tmp/hello.sh&quot;. The contents of the script file are &quot;echo hello&quot;.
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
   &lt;shell-exec executable=&quot;/bin/sh&quot; scriptfile=&quot;/tmp/hello.sh&quot;/&gt;
&lt;/syntaxhighlight&gt;

''output''

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;hello&lt;/syntaxhighlight&gt;

Use a propertyset to expand and capitalize the property data. Uses [[CapitalizeMapper_Type_Reference|capitalize mapper]]. Each mapped property will be exported as a variable whose name is capitalized and any dots in the name are replaced with underscores (eg, resource.a → RESOURCE_A). 

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
     &lt;!-- set some properties --&gt;
    &lt;property name=&quot;resource.a&quot; value=&quot;A&quot;/&gt;
    &lt;property name=&quot;resource.b&quot; value=&quot;B&quot;/&gt;
    &lt;property name=&quot;resource.c&quot; value=&quot;C&quot;/&gt;
    &lt;property name=&quot;opts.foo&quot; value=&quot;foo&quot;/&gt;
    &lt;property name=&quot;opts.bar&quot; value=&quot;bar&quot;/&gt;

    &lt;!-- Define a property set that will generate a set of environment variables from the property names.
             Each env var will be capitalized and dots replaced with underscores --&gt;
    &lt;propertyset id=&quot;props&quot;&gt;
      &lt;propertyref regex=&quot;^(?:opts|entity).*&quot;/&gt;
      &lt;chainedmapper&gt;
	&lt;filtermapper&gt;
	  &lt;replacestring from=&quot;.&quot; to=&quot;_&quot;/&gt;
	&lt;/filtermapper&gt;
	&lt;mapper classname=&quot;com.controltier.ctl.types.CapitalizeMapper&quot; /&gt;
      &lt;/chainedmapper&gt;
    &lt;/propertyset&gt;

    &lt;!-- Run a shell printing out the environment variables that have been generated --&gt;

    &lt;shell-exec executable=&quot;/bin/sh&quot; propertyset=&quot;props&quot; script=&quot;env|egrep 'ENTITY|OPTS'&quot;/&gt;
&lt;/syntaxhighlight&gt;

''output''
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
RESOURCE_A=A
RESOURCE_B=A
RESOURCE_C=C
OPTS_FOO=foo
OPTS_BAR=bar
&lt;/syntaxhighlight&gt;

==See also==
* [[try-exec Task Reference]]
* [[script-exec Task Reference]]

&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Command Dispatcher Ant Tasks]]</text>
    </revision>
  </page>
  <page>
    <title>Shell command</title>
    <id>85</id>
    <revision>
      <id>14414</id>
      <timestamp>2010-11-11T17:57:04Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Defined Commands&lt;/categorytree&gt;
This [[Module Development Guide]]  page describes how to wrap a shell command using the &quot;&lt;code&gt;Command&lt;/code&gt;&quot; [[Type-v10.xml#command|command-type]]. 

This command type is useful if you want to invoke an external script, or to define a shell script in line.

==Create or choose a type==

You can add the command to an existing type definition or you can create a new type. To create a new type run the [[ProjectBuilder]] &lt;code&gt;create-type&lt;/code&gt; command and follow the prompts: 
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ ctl -m ProjectBuilder -c create-type -- -type shellcommands
&lt;/syntaxhighlight&gt;

The create-type command will generate a [[type.xml]] file where you can define your command.

Alternatively, you can use the [[Graphical type editor]] to create a new type graphically.

==Edit type.xml==

If you are using ProjectBuilder commands to define the type, it will have generated a [[type.xml]] file inside the module's source directory. 
System shell scripts are simple to define and are made up of an &quot;executable&quot; and an &quot;argument string&quot; An easy one to define is a &quot;hello&quot; command. Add a new command to your type.xml file

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
      &lt;command name=&quot;hello&quot; description=&quot;hello command.&quot; 
               command-type=&quot;Command&quot; is-static=&quot;true&quot;&gt;
        &lt;execution-string&gt;bash&lt;/execution-string&gt;
        &lt;argument-string&gt;echo  Hello&lt;/argument-string&gt;
      &lt;/command&gt;
&lt;/syntaxhighlight&gt;

You can invoke your own script by specifying its path in the argument-string:

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
      &lt;command name=&quot;myscript&quot; description=&quot;call my script command.&quot; 
               command-type=&quot;Command&quot; is-static=&quot;true&quot;&gt;
        &lt;execution-string&gt;bash&lt;/execution-string&gt;
        &lt;argument-string&gt;/path/to/myscript&lt;/argument-string&gt;
      &lt;/command&gt;
&lt;/syntaxhighlight&gt;

==Build the type==

Use the &quot;build-type&quot; command to generate the command files.
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ ctl -m ProjectBuilder -c build-type -- -type shellcommands -upload -deploy
&lt;/syntaxhighlight&gt;

The -upload and -deploy flag cause the generated type to be uploaded to Workbench and then deployed to the local client.

if you are using the [[Graphical type editor]] this step is done by pressing the &quot;Package Commands&quot; button.

==Run the command==

The shellcommands type is now deployed and the new command run:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ ctl -m shellcommands -c hello
Hello
&lt;/syntaxhighlight&gt;

&lt;noinclude&gt;{{Manual/navbox}}&lt;/noinclude&gt;

[[Category:Defined Commands]]</text>
    </revision>
  </page>
  <page>
    <title>ShellscriptCondition Type Reference</title>
    <id>161</id>
    <revision>
      <id>11346</id>
      <timestamp>2009-12-14T22:52:06Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Types&lt;/categorytree&gt;

==Description==
      &lt;p&gt;
	The shellscriptcondition type is a [http://ant.apache.org/manual/CoreTypes/custom-programming.html#customconditions custom condition] that can be used
	in the [http://ant.apache.org/manual/CoreTasks/conditions.html condition] core Ant task.
      &lt;/p&gt;

==Attributes==
      &lt;p&gt;The shellscriptcondition is based on the ant-contrib task, shellscript,
	and uses the same attributes&lt;/p&gt;
    
==Examples==

      &lt;pre&gt;
     &amp;lt;condition property=&quot;shellscriptCondition.success&quot;&amp;gt;
         &amp;lt;shellscriptcondition executable=&quot;bash&quot;&amp;gt;
            exit 1
         &amp;lt;/shellscriptcondition&amp;gt;
      &amp;lt;/condition&amp;gt;
      &amp;lt;fail unless=&quot;doCondition.success&quot;&gt;FAIL&amp;lt;/fail&amp;gt;

      &lt;/pre&gt;
&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Ant Conditions]]</text>
    </revision>
  </page>
  <page>
    <title>Shellutil</title>
    <id>1022</id>
    <revision>
      <id>10225</id>
      <timestamp>2009-12-11T18:26:07Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Types&lt;/categorytree&gt;
[[File:Icon-AssemblyObject.png]]
[[shellutil]] is a utility containing commands useful for various shell and system related tasks. Commands support executing scripts and commands, killing process by name and accessing environment data.

==Reference==
*   [http://controltier.sourceforge.net/docs/latest/core/reference/user/shellutil/index.html shellutil reference].

{{Manual/navbox}}
[[Category:Managed-Entity]]
[[Category:coreutils]]</text>
    </revision>
  </page>
  <page>
    <title>Simplified deployment</title>
    <id>1010</id>
    <revision>
      <id>14250</id>
      <timestamp>2010-11-10T21:50:47Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;noinclude&gt;&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Examples&lt;/categorytree&gt;&lt;/noinclude&gt;
__NOTOC__
How do you check that Tomcat is running on a set of nodes?

&lt;pre&gt;
for node in $TOMCAT_NODES; do
    ssh $node netstat -an|grep 8080|grep -q LISTEN &amp;&amp; { 
	echo &quot;Tomcat listening ($node:8080).&quot;
    } || { 
        echo &quot;NOT listening: $node:8080&quot; ; 
    } 
done
&lt;/pre&gt;

''Isn't that error prone and difficult to maintain?''

==Simplify your scripts with ControlTier==


: &lt;span style=&quot;font-size:120%;font-family:monospace;&quot;&gt;ctl -I tags=tomcat -p demo -m netutil -c listening -- -port 8080 -maxwait 30&lt;/span&gt;


ControlTier includes a robust suite of core utility modules, the ''coreutils'' that you can use to enhance your deployment scripts.

==Dispatch any command to your Nodes using Tag filters==

: &lt;span style=&quot;font-size:120%; font-family:monospace;&quot;&gt;ctl-exec -I '''tags=web''' -- apachectl restart&lt;/span&gt;


ControlTier allows you to dispatch commands to remote nodes based on simple Node Filters: tags, OS name, OS type, processor architecture, and more.

==Offload your packages and scripts to the ControlTier repository==

Call a script on a set of nodes using the ''dav://'' protocol to retrieve it from the common WebDAV repository:

&lt;pre&gt;
ctl -I tags=tomcat -m shellutil -c exec --  -executable /bin/sh \
        -scripturl dav://scripts/tomcat/stop.sh -argline $CATALINA_HOME 
&lt;/pre&gt;

Download a package from the repository to multiple nodes:

&lt;pre&gt;
ctl -I tags=tomcat  -m davutil -c copy --\
    -src dav://pkgs/myapp/zip/zips/apache-tomcat-5.5.27.zip \
    -dest $INSTALL_DIR/apache-tomcat-5.5.27.zip
&lt;/pre&gt;

:''Tip:'' use the &lt;code&gt;-C [threadcount]&lt;/code&gt; option to do it in parallel on multiple nodes.

{{Guide/navbox}}
[[Category:Scripting Examples]]</text>
    </revision>
  </page>
  <page>
    <title>Site</title>
    <id>1070</id>
    <redirect />
    <revision>
      <id>10095</id>
      <timestamp>2009-12-11T15:51:14Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[Category:Site]]</comment>
      <text xml:space="preserve">#REDIRECT [[:Category:Site]]</text>
    </revision>
  </page>
  <page>
    <title>Site Concepts</title>
    <id>1646</id>
    <redirect />
    <revision>
      <id>11156</id>
      <timestamp>2009-12-14T02:28:40Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>moved [[Site Concepts]] to [[Site design pattern]]</comment>
      <text xml:space="preserve">#REDIRECT [[Site design pattern]]</text>
    </revision>
  </page>
  <page>
    <title>Site Coordination Models</title>
    <id>322</id>
    <revision>
      <id>14168</id>
      <timestamp>2010-11-10T16:02:31Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;ctl-depot&quot; to &quot;ctl-project&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Site&lt;/categorytree&gt;
==Overview==

It's unlikely you have just a few isolated Service deployments in your environment. It is more likely that you have sets of like services spread across multiple hosts. If you are running multi-tier applications, you will also have dependencies between some of those services.

Services can be grouped together so you can control them as one logical entity, through a Site. A Site is an object that aggregates a set of Services. You can also roll up multiple Site objects into a root Site object. This allows you to scale up your management and consolidate control into a single point.

This document describes several ways you can organize the services in your environment to help cope with large scale and coordinated control across homogeneous and heterogeneous sets of services.

===Command dispatching===
Sites really play the role of a logical control point, relaying the requested action to set of Services (or Sites). Sites and Services share a common set of workflows, including: Stop, Start, Status, Deploy. When a Site is asked to execute &quot;Status&quot;, it relays the Status command to each of its Service resources and invokes each of them to run Status.

===Topological Structures: Tier, Slice, Pool===
One can describe the way the constituent services of an application are interrelated and arranged comprise that software system's structure, or topology.

A Site object allows you to arrange any number of Service and Site objects. You are free to invent any arrangement to suit your environment but there three patterns that are commonplace:

* ''Tier'': A tier is a homogenous set of Services. Each instance of the service plays the same functional role and often share a similar pattern of configuration. Example: a set of Apache HTTPD server instances.
* ''Slice'': A slice is a heterogeneous set and possibly interrelated set of services. In a multi-tier application one might imagine a slice as a cross section. Example: A set of interconnected web→app→db server instances.
* ''Pool'': A pool is a grouping of tiers (homogeneous) or slices (heterogeneous) that consolidate control into a single common point.

[[Image:site-structures.png]]

Ultimately, Site objects allow you to provide the shape for how you want to manage sets of Services. Sites allow you define hierarchical control structures, important when you want to have activity governed by the application topology.

===Ordering===
Ordering the progression of action is important for controlling application deployments with runtime state. You can establish an ordering to the Site's control dispatching in one of several ways discussed below.

====Relative ranking====

Even among like Service resources it is sometimes desirable to have the Site dispatch commands in a particular order.

Both Service and Site objects have a property called &quot;startuprank&quot; that allow you assign a ranking position. By default, Sites use startuprank as a key to sort the Service resources in ascending order.

The graphic below depicts a set of Services that range from a startuprank of 1 through 3.

'''Note that this works as long as the thread count is 1'''

[[Image:service-ranking.png]]

Given that arrangement, the &quot;staging&quot; Site will dispatch first to rank=1, rank=2 and finally, to rank=3. For example, if &quot;Start&quot; command was called on the Site, it would first invoke Start on dev-catalog , next tomcat1, then apache1. This ensures that dev-catalog is up and running before tomcat1 starts, presumably because Tomcat will need to connect to a running dev-catalog database.

The &quot;Stop&quot; command is an notably different. It sorts by startuprank in descending order. This supports the assumption that you want to shut down in the reverse order of Start. It is best practice to shutdown clients before their servers to avoid hanging connections or cause transactional interruptions. So for this example, the Stop action will first stop apache1 (closing connections to tomcat1), then stop tomcat1 (closing connections to dev-catalog), finally stopping dev-catalog.

====Hierarchical====

The next manner in which actions can be ordered is based on the topology of the Site and Service resources. Using this approach, A top-level Site dispatches to intermediate Site objects, which in turn dispatch to their Services.

The graphic below describes an example showing how a set of services arranged as a tier, and another set arranged as a slice is managed via a top level Site.

[[Image:nested-sites.png]]

====Combined====

The two methods of ordering can be combined to first sort by relative ranking, and then via topological structure.

[[Image:pool-example1.png]]

==Setup==

The following sections provide examples of project XML files that define the various arrangements of Services and Sites.

===Tier===
The following [[project.xml]] defines two Apache HTTPD server instances grouped together in a Site.
&lt;pre&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE project PUBLIC &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; 
    &quot;project.dtd&quot;&gt;
&lt;project&gt;
  &lt;!--
      **
      ** Describes set of homogeneous Services mediated via a Site
      **
  --&gt;
  
  &lt;!--
      **
      ** Describes an Apache web server:
      **
  --&gt;
  &lt;deployment 
      type=&quot;Service&quot;
      name=&quot;apache1&quot; 
      description=&quot;The Apache server.&quot;
      startuprank=&quot;3&quot;/&gt;

 
  &lt;deployment 
      type=&quot;Service&quot;
      name=&quot;apache2&quot; 
      description=&quot;The Apache server.&quot;
      startuprank=&quot;3&quot;/&gt;

  &lt;!--
      **
      ** Describes the site:
      **
  --&gt;
  &lt;deployment 
      type=&quot;Site&quot;
      name=&quot;apacheTier&quot; 
      description=&quot;The integrated site in the staging environment.&quot; &gt;

     &lt;!--
      **
      ** References the services as child dependencies
      **
      --&gt;
     &lt;resources&gt;
      &lt;resource name=&quot;apache1&quot; type=&quot;Service&quot; /&gt;
      &lt;resource name=&quot;apache2&quot; type=&quot;Service&quot; /&gt;
     &lt;/resources&gt;
  &lt;/deployment&gt;

&lt;/project&gt;	
&lt;/pre&gt;

===Slice===
The following [[project.xml]] provides an example for defining a set of interrelated set of heterogeneous Services.
&lt;pre&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE project PUBLIC &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; 
    &quot;project.dtd&quot;&gt;
&lt;project&gt;
  &lt;!--
      **
      ** Describes an integrated set of Services mediated via a Site
      **
  --&gt;
  

  &lt;!--
      **
      ** Describes a Mysql relational database
      **
  --&gt;
  &lt;deployment 
      type=&quot;RdbService&quot;
      name=&quot;dev-catalog&quot; 
      description=&quot;The Mysql database.&quot; 
      startuprank=&quot;1&quot;/&gt;

  &lt;!--
      **
      ** Describes a Tomcat server
      **
  --&gt;
  &lt;deployment 
      type=&quot;Service&quot;
      name=&quot;tomcat1&quot; 
      description=&quot;The tomcat server.&quot; 
      startuprank=&quot;2&quot;&gt;
     &lt;!--
      **
      ** References the dev-catalog as a child dependency
      **
      --&gt;
     &lt;resources&gt;
      &lt;resource name=&quot;dev-catalog&quot; type=&quot;RdbService&quot; /&gt;
     &lt;resources&gt;
  &lt;/deployment&gt;

  &lt;!--
      **
      ** Describes an Apache web server:
      **
  --&gt;
  &lt;deployment 
      type=&quot;Service&quot;
      name=&quot;apache1&quot; 
      description=&quot;The Apache server.&quot;
      startuprank=&quot;3&quot;&gt;
     &lt;!--
      **
      ** References the tomcat as a child dependency
      **
      --&gt;
     &lt;resources&gt;
      &lt;resource name=&quot;tomcat1&quot; type=&quot;Service&quot; /&gt;
     &lt;resources&gt;
  &lt;/deployment&gt;


  &lt;!--
      **
      ** Describes the site:
      **
  --&gt;
  &lt;deployment 
      type=&quot;Site&quot;
      name=&quot;slice&quot; 
      description=&quot;The integrated site in the staging environment.&quot; &gt;

     &lt;!--
      **
      ** References the services as child dependencies
      **
      --&gt;
     &lt;resources&gt;
      &lt;resource name=&quot;apache1&quot; type=&quot;Service&quot; /&gt;
      &lt;resource name=&quot;tomcat1&quot; type=&quot;Service&quot; /&gt;
      &lt;resource name=&quot;dev-catalog&quot; type=&quot;RdbService&quot; /&gt;
     &lt;/resources&gt;
  &lt;/deployment&gt;

&lt;/project&gt;	
&lt;/pre&gt;

===Pool===
The following [[project.xml]] example shows two sets of Services arranged as tiers grouped together under a common Site.
&lt;pre&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE project PUBLIC &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; 
    &quot;project.dtd&quot;&gt;
&lt;project&gt;
  &lt;!--
      **
      ** Describes pool of Tiers
      **
  --&gt;
  
  &lt;!--
      **
      ** Describes tier 1
      **
  --&gt;
  &lt;deployment 
      type=&quot;Site&quot;
      name=&quot;webTier-evens&quot; 
      description=&quot;The even numbered apache web server instances .&quot;&gt;
     &lt;resources&gt;
      &lt;resource name=&quot;apache2&quot; type=&quot;Service&quot; /&gt;
      &lt;resource name=&quot;apache4&quot; type=&quot;Service&quot; /&gt;
      &lt;resource name=&quot;apache6&quot; type=&quot;Service&quot; /&gt;
     &lt;/resources&gt;
  &lt;/deployment&gt;

  &lt;!--
      **
      ** Describes tier 2
      **
  --&gt;
  &lt;deployment 
      type=&quot;Site&quot;
      name=&quot;webTier-odds&quot; 
      description=&quot;The odd numbered apache web server instances .&quot;&gt;
     &lt;resources&gt;
      &lt;resource name=&quot;apache1&quot; type=&quot;Service&quot; /&gt;
      &lt;resource name=&quot;apache3&quot; type=&quot;Service&quot; /&gt;
      &lt;resource name=&quot;apache5&quot; type=&quot;Service&quot; /&gt;
     &lt;/resources&gt;
  &lt;/deployment&gt;

  &lt;!--
      **
      ** Describes the pool
      **
  --&gt;
  &lt;deployment 
      type=&quot;Site&quot;
      name=&quot;webPool&quot; 
      description=&quot;Combines all the web slices into one pool .&quot;&gt;
     &lt;resources&gt;
      &lt;resource name=&quot;webTier-evens&quot; type=&quot;Site&quot; /&gt;
      &lt;resource name=&quot;webTier-odds&quot; type=&quot;Site&quot; /&gt;
     &lt;/resources&gt;
  &lt;/deployment&gt;

&lt;/project&gt;	
&lt;/pre&gt;
   
==Execution==

This section describes how to execute commands against Services via a Site.

The general usage to run a command via a Site is:
&lt;pre&gt;
ctl -p project -t Site -r resource -c command
&lt;/pre&gt;

Example: Dispatch the Status command to the Services in the webTier Site:
&lt;pre&gt;
ctl -p default -t Site webTier -c Status
&lt;/pre&gt;

===Service management===
Site objects can dispatch the following standard commands to Service resources: Prepare, Restart, Start, Status, Stop, Change-Dependencies, Configure, Deploy, Install, Properties, Update

===Ad-hoc filtered dispatching===
Besides using the standard Service management commands described above, you can also dispatch abitrarily via the command, dispatchCmd.

For example, if you want to tell each of the Service resources to run Status:
&lt;pre&gt;
ctl -p default -t Site -r webTier -c dispatchCmd -- -command Status
&lt;/pre&gt;

... which is equivalent to:
&lt;pre&gt;
ctl -p default -t Site webTier -c Status
&lt;/pre&gt;

A more interesting usage is to dispatch a command only to a subset of the Services using filtering. There are two options enabling filtering: -resourcename, to filter by the Service's name, and -resourcetype to filter by the Service's type. By default, these options are defaulted to wild card patterns to match all the Services.

Here's a couple examples showing off filtering. The first example dispatches to just the Services that have names starting with &quot;tomcat&quot;:
&lt;pre&gt;
ctl -p default -t Site -r webTier -c dispatchCmd -- -command Status \
	-resourcename &quot;tomcat.*&quot; 
&lt;/pre&gt;

This would match names like tomcat1 and tomcat2.

To match on the Service's type use the -resourcetype option:
&lt;pre&gt;
ctl -p default -t Site -r webTier -c dispatchCmd -- -command Status \
	-resourcetype RdbService 
&lt;/pre&gt;

Both options can be combined:
&lt;pre&gt;
ctl -p default -t Site -r webTier -c dispatchCmd -- -command Status \
	-resourcename &quot;.*&quot; -resourcetype &quot;.*&quot; 
&lt;/pre&gt;

In this case, all the Services are matched (the default).

You can order the execution via the -sortorder option:
&lt;pre&gt;
ctl -p default -t Site -r webTier -c dispatchCmd -- -command Status \
	-sortorder ascending 
&lt;/pre&gt;

That will sort the Service resources based on their startuprank in ascending order.

==Appendix==

File listing: coordinated-sites.xml

&lt;pre&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE project PUBLIC &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; 
&quot;project.dtd&quot;&gt;
&lt;project&gt;
  &lt;!--
      **
      ** Describes set of homogeneous Services mediated via a Site
      **
  --&gt;
  
  &lt;!--
      **
      ** Describes the services
      **
  --&gt;
  &lt;deployment 
      type=&quot;Service&quot;
      name=&quot;sc_svc1&quot; 
      description=&quot;The svc service.&quot;
      startuprank=&quot;1&quot;&gt;
    &lt;referrers replace=&quot;false&quot;&gt;
      &lt;resource type=&quot;Node&quot; name=&quot;strongmad&quot;/&gt;
    &lt;/referrers&gt;
  &lt;/deployment&gt;

  
  &lt;deployment 
      type=&quot;Service&quot;
      name=&quot;sc_svc2&quot; 
      description=&quot;The svc server.&quot;
      startuprank=&quot;2&quot;&gt;
    &lt;referrers replace=&quot;false&quot;&gt;
      &lt;resource type=&quot;Node&quot; name=&quot;strongmad&quot;/&gt;
    &lt;/referrers&gt;
  &lt;/deployment&gt;

  &lt;!--
      **
      ** Describes the site:
      **
  --&gt;
  &lt;deployment 
      type=&quot;Site&quot;
      name=&quot;sc_tier&quot; 
      description=&quot;The tier Site.&quot;
      startuprank=&quot;1&quot;&gt;

    &lt;!--
	**
	** References the services as child dependencies
	**
    --&gt;
    &lt;resources&gt;
      &lt;resource name=&quot;sc_svc1&quot; type=&quot;Service&quot; /&gt;
      &lt;resource name=&quot;sc_svc2&quot; type=&quot;Service&quot; /&gt;
    &lt;/resources&gt;
    &lt;referrers replace=&quot;false&quot;&gt;
      &lt;resource type=&quot;Node&quot; name=&quot;strongmad&quot;/&gt;
    &lt;/referrers&gt;
  &lt;/deployment&gt;



  &lt;!--
      **
      ** Describes the services
      **
  --&gt;
  &lt;deployment 
      type=&quot;Service&quot;
      name=&quot;sc_svc3&quot; 
      description=&quot;The svc service.&quot;
      startuprank=&quot;3&quot;&gt;
    &lt;referrers replace=&quot;false&quot;&gt;
      &lt;resource type=&quot;Node&quot; name=&quot;strongmad&quot;/&gt;
    &lt;/referrers&gt;
  &lt;/deployment&gt;

  
  &lt;deployment 
      type=&quot;Service&quot;
      name=&quot;sc_svc4&quot; 
      description=&quot;The svc server.&quot;
      startuprank=&quot;4&quot;&gt;
    &lt;referrers replace=&quot;false&quot;&gt;
      &lt;resource type=&quot;Node&quot; name=&quot;strongmad&quot;/&gt;
    &lt;/referrers&gt;
  &lt;/deployment&gt;

  &lt;!--
      **
      ** Describes the site:
      **
  --&gt;
  &lt;deployment 
      type=&quot;Site&quot;
      name=&quot;sc_slice&quot; 
      description=&quot;The slice Site.&quot;
      startuprank=&quot;2&quot;&gt;

    &lt;!--
	**
	** References the services as child dependencies
	**
    --&gt;
    &lt;resources&gt;
      &lt;resource name=&quot;sc_svc3&quot; type=&quot;Service&quot; /&gt;
      &lt;resource name=&quot;sc_svc4&quot; type=&quot;Service&quot; /&gt;
    &lt;/resources&gt;
    &lt;referrers replace=&quot;false&quot;&gt;
      &lt;resource type=&quot;Node&quot; name=&quot;strongmad&quot;/&gt;
    &lt;/referrers&gt;
  &lt;/deployment&gt;


  &lt;!--
      **
      ** Describes the site:
      **
  --&gt;
  &lt;deployment 
      type=&quot;Site&quot;
      name=&quot;sc_pool&quot; 
      description=&quot;The pool Site.&quot;&gt;

    &lt;!--
	**
	** References the services as child dependencies
	**
    --&gt;
    &lt;resources&gt;
      &lt;resource name=&quot;sc_slice&quot; type=&quot;Site&quot; /&gt;
      &lt;resource name=&quot;sc_tier&quot; type=&quot;Site&quot; /&gt;
    &lt;/resources&gt;
    &lt;referrers replace=&quot;false&quot;&gt;
      &lt;resource type=&quot;Node&quot; name=&quot;strongmad&quot;/&gt;
    &lt;/referrers&gt;
  &lt;/deployment&gt;

&lt;/project&gt;	
&lt;/pre&gt;

Run load-resources

&lt;pre&gt;
ctl -p demo -m ProjectBuilder -c load-resources -- \
    -filename coordinated-sites.xml
&lt;/pre&gt;

Run ctl-project
&lt;pre&gt;
ctl-project -p demo -a install --name 'sc_.*'
&lt;/pre&gt;
[[Category:Site]]</text>
    </revision>
  </page>
  <page>
    <title>Site design pattern</title>
    <id>710</id>
    <revision>
      <id>13760</id>
      <timestamp>2010-11-10T15:10:03Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;the objects&quot; to &quot;the resources&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Site&lt;/categorytree&gt;
= Intent =

* Define an object that encapsulates a set of related Services that comprise  an integrated software system.
* Provide a unified interface used to coordinate a set of Service resources to simplify the management of the software release process and runtime state control.
* Abstract the coordination of objects which may be distributed over a network hosts.
* Wrap a set of complicated procedures with a simple command.

= Problem =

We want to control the deployment and runtime state of distributed application services,
but each service must be updated and controlled individually, yet there is an implicit
procedural order. The procedural order should reflect the runtime dependency
hierarchy that is often inherent to sets of integrated software services.

= Discussion =

To an end user, the services of an application may appear to be supported by a single component, but often times this impression is really the result of a large set of diverse components interacting with one another. These interactions are defined in terms of a software configuration that describes the communication integration points. Upon startup, the application components connect to their colleagues. The implementations of the application service components dictate how they will behave if they fail to connect to their external dependency; sometimes logging error messages and other times, entering a hung state.

Because services can be distributed differently depending on environment, the procedures used to perform an orderly deployment and restart vary widely. For example, in a development or test environment, services might be installed on two machines, while in a staging or production environment, services might be spread over tens or even hundreds of machines.

Finally, depending on the task at hand, the administrator will sometimes need to perform actions that are isolated to a subset of the services while in other cases the administrator will have to act on all of the services.

The diagram below describes two scenarios. In the first scenario, the blue figure, admin 1, wants to stop just the web servers. This requires the admin knows which nodes the web servers reside, logging into each machine and executing the required command. In the second scenario, the orange user, admin 2, needs to update the deployments of all the servers. This requires the admin know which machines the deployments reside, and which order to stop servers after their software has been updated.

[[Image:site-discussion-problem.png|problem]]

These scenarios highlight the following considerations:

* network abstraction: a means to abstract the location of the resources deployed within the network
* sequencing: a means to describe the ordering of procedures that recognize the runtime state dependency of the software components.

An approach that accommodates these considerations would be an abstraction of a set of integrated software services that both hides the differences in how services are deployed in different environments and encapsulates the sequencing logic for each of the routine high level procedures.

This offers several advantages. Administrators can approach managing a set of services as a single entity, use the same procedures in different environments without knowing beforehand how services are deployed in the network, and not have to know the runtime dependencies of the underlying services.

[[Image:site-discussion-solution.png|solution]]

The diagram above illustrates the role the Site abstraction plays.

The Site object provides a standard encapsulation of routine procedures such as Stop, Start, Status and Update, leaving the details for how these procedures should be coordinated to implementations of derived classes.

Instead of each administrator invoking the correct succession of commands on each node (either locally or via a remote shell session), they request the Site object to perform those actions.

Lastly, because the Site object provides a unified higher-level interface to the set of related Services, it wraps a complicated set of actions with a simpler interface that makes the procedure easier to perform. Of course, it does not replace the procedures for the underlying Services, enabling the user to still manage objects individually when desired.

= Structure =
The Site type inherits the command dispatching capabilities from Mediator but defines standard operations for updating and managing the runtime state for a set of related Service resources.

[[Image:site-structure.png|structure]]

= Example =

== Runtime State Control ==

The Site type defines an object that provides methods to manage the runtime state and deployment of a set of related software services.

== Stop ==

Service resources contain a property called &lt;code&gt;startup-rank&lt;/code&gt; which can be utilized to order its set of services according to their startup-rank values. For example, one can assign smaller numeric values to services which should be started up before others that should be started afterwards.

The following pseudo code describes an algorithm that can be used by the Site&amp;apos;s Stop command; it finds all its services, sorts them in descending order, iterating over the results calling the Stop action on each Service resource.

&lt;pre&gt;
FOR each service in the result of sortByStartupRank(set: services, order: descending)
    DISPATCH-CALL Stop on service
END FOR
&lt;/pre&gt;

The diagram below describes a scenario where a Site object depends on two kinds of Service resources, web and app. The web objects have startup rank 2 while the app objects have startup rank 1. According to the algorithm above, this indicates that first the web services would be stopped and then the app services, since app services have a lower startup-rank value.

[[Image:site-example.png|example]]

The pseudo code, &lt;code&gt;DISPATCH-CALL Stop on service&lt;/code&gt;, implies that instead of directly calling the Stop action on the service object, to go through a dispatch process that provides a lookup determining where the object resides in the network. It is the DISPATCH-CALL mechanism that will then call Stop either locally or remotely depending on the location of the service object.

== Update == 

Because the structure of an integrated software system can take many forms, each with its own policies governing a consitent runtime state, two examples of the &lt;code&gt;Update&lt;/code&gt; command are discussed.

The default logic of the Update sequence for a Site does not assume that the Site remain functional during the update process. In this case, the Site object first instructs all the Services to stop, then install their software dependencies, configure themselves, and then start up. This approach matches the life cycle stages of the Service resource itself and is a simple mapping between the high level procedure offered by the Site object and its related Service resource dependencies.

[[Image:site-lifecycle-update1.png|update example 1]]

Some integrated software systems cannot be completely shutdown during the deployment process, they must remain functional, albeit in a reduced capacity. In this situation, the Site object&amp;apos;s Update workflow must be designed to iteratively update its underlying Service resources. How a set of services can be updated while not interrupting the utility of the application will, of course, depend on the architecture of the whole integrated software system.

The diagram below describes an &lt;code&gt;Update&lt;/code&gt; workflow that manages the deployment release process according to application tier. The &lt;code&gt;Update&lt;/code&gt; sequence begins by invoking the &lt;code&gt;Update&lt;/code&gt; action to the &amp;quot;App&amp;quot; tier, and then the &amp;quot;Web&amp;quot; tier, subsequently invoking the &lt;code&gt;Update&lt;/code&gt; action to the whole set of Service resources.

[[Image:site-lifecycle-update2.png|update example 2]] In this example, it is assumed that while each instance of the &amp;quot;App&amp;quot; Service is updated (i.e., stopped, its software installed and configured and then started), the Service resources in the &amp;quot;Web&amp;quot; tier continue to function by connecting to an alternate &amp;quot;App&amp;quot; Service resource.

= Check List =

* Establish the boundaries of what constitutes the integrated software system you wish to control as a single resource.
* Identify the types of Service resources that comprise the integrated software system.
* Determine the routine deployment and runtime state management procedures needed to maintain the set of Services as single operations.
* Understand the runtime state dependency requirements for updating a live Site. The generic method is the simple - Stop, Packages-Install, Configure, Start sequence. For sites that must remain functional during a deployment, it will be necessary to define a specialized sequence that may target subsets of Service types.

= Rules of Thumb =

The intent of Site is to capture the procedures that translate to calls to underlying Service resource commands.

= Related Types =

* [[Service Concepts]]

Supertype:

* [[Mediator Concepts]]

{{Core Type Guide Linkback}}

[[Category:Site]]</text>
    </revision>
  </page>
  <page>
    <title>Slides</title>
    <id>1446</id>
    <redirect />
    <revision>
      <id>8768</id>
      <timestamp>2009-11-04T21:21:33Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[Presentations]]</comment>
      <text xml:space="preserve">#REDIRECT [[Presentations]]</text>
    </revision>
  </page>
  <page>
    <title>Solution Libraries Guide</title>
    <id>977</id>
    <redirect />
    <revision>
      <id>11134</id>
      <timestamp>2009-12-14T02:14:55Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[Category:Libraries]]</comment>
      <text xml:space="preserve">#REDIRECT [[:Category:Libraries]]</text>
    </revision>
  </page>
  <page>
    <title>SortBy Type Reference</title>
    <id>162</id>
    <revision>
      <id>12582</id>
      <timestamp>2010-05-06T17:21:47Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <minor/>
      <comment>moved [[SortBy Type Referencel]] to [[SortBy Type Reference]]:&amp;#32;typo</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Types&lt;/categorytree&gt;
=Description=
      &lt;p&gt;
	The sortby type specifies sorting preference for an enclosing 
        [[PropertiesQuery Task Reference|propertiesquery]] task or 
        [[PropertiesQuery Type Reference|propertiesquery]] type.
      &lt;/p&gt;

=Attributes=
      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;name&lt;/td&gt;&lt;td&gt;the name of one of the select values specified in the enclosing propertiesquery&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;by&lt;/td&gt;&lt;td&gt;must be &amp;quot;name&amp;quot; or &amp;quot;value&amp;quot;.  name implies sorting by the name attribute value above.  If by=&amp;quot;name&amp;quot;, then name must be provided and will sort by this name.  If by=&amp;quot;value&amp;quot;, then name must not be provided and will sort by the value of the matching property&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;order&lt;/td&gt;&lt;td&gt;the sort order, must be &amp;quot;ascending&amp;quot; or &amp;quot;descending&amp;quot;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/table&gt;

    
=Examples=
     &lt;p&gt;
       see [[ApplyMacro Task Reference|apply-macro]] task.
      &lt;/p&gt;
&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;
[[Category:Command Dispatcher Ant Types]]</text>
    </revision>
  </page>
  <page>
    <title>Ssl</title>
    <id>1936</id>
    <revision>
      <id>13091</id>
      <timestamp>2010-08-11T17:34:43Z</timestamp>
      <contributor>
        <username>Chuck</username>
        <id>13</id>
      </contributor>
      <comment>/* Adjust Jetty Connector Configuration */</comment>
      <text xml:space="preserve">==Overview==
These instructions document how to convert an existing ControlTier installation to support SSL.   Both server and client configuration are documented since the client installations, including the instance bundled with the server, require ssl modifications.

==Prerequisites==

A standard installation exists on a server that is ready to be configured for SSL, if no such installation exists refer to [http://controltier.org/wiki/RPM_installer RPM installer wiki].

Familiarity with [http://docs.codehaus.org/display/JETTY/How+to+configure+SSL Jetty SSL Configuration]

Identify Local SSL Configuration such as the following which will be used for this example: 
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;SSL Port&lt;/b&gt;:  the desired SSL Server Port (e.g. &lt;i&gt;8443&lt;/i&gt;)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Server Alias&lt;/b&gt;:  the well known DNS Name of the ControlTier server (e.g. &lt;i&gt;ctier.controltier.org&lt;/i&gt;)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Organizational Unit&lt;/b&gt;:  the name of the internal organization (e.g. &lt;i&gt;dev2ops&lt;/i&gt;)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Organization&lt;/b&gt;:  the name of the organization (e.g. &lt;i&gt;ControlTier Project&lt;/i&gt;)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Location&lt;/b&gt;:  the name of the location (e.g. &lt;i&gt;San Mateo&lt;/i&gt;)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;State&lt;/b&gt;: (e.g. &lt;i&gt;California&lt;/i&gt;)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Country&lt;/b&gt;: (e.g. &lt;i&gt;US&lt;/i&gt;)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Key and Keystore Password&lt;/b&gt;:  password for both the private rsa key and the java keystore (e.g. &lt;i&gt;default&lt;/i&gt;, also see Assumptions in next section)&lt;/li&gt;
&lt;/ul&gt;

== Assumptions==

ControlTier Server Installed on Linux as per [[#Prerequisites|Prerequisites]] Above (&lt;b&gt;NOTE&lt;/b&gt;:  if a non rpm installation or non linux installation, these procedures should be valid) 

Currently logged into the &lt;i&gt;ctier&lt;/i&gt; account (or the user running the ControlTier server) with JETTY_HOME, CTL_BASE, and JAVA_HOME (as per standard install) are all defined, example:
&lt;pre&gt;
[ctier@ctier etc]$ echo $JETTY_HOME
/opt/ctier/pkgs/jetty-6.1.21
[ctier@ctier etc]$ echo $CTL_BASE
/opt/ctier/ctl
[ctier@centos-54-64-vm4 ~]$ echo $JAVA_HOME
/usr/lib/jvm/java-1.6.0-openjdk-1.6.0.0.x86_64
&lt;/pre&gt;

The keystore will be exclusive to jetty and therefore both the keystore password and the passphrase for the generated private key will be the same, see [http://java.sun.com/j2se/1.5.0/docs/guide/security/CryptoSpec.html#KeyManagement Java KeyManagement] for more information.

== Configuring the ControlServer Server Truststore ==

The following example is based on the example values shown in the prerequisite section, where applicable, unix style here docs are used for cut and paste examples: 

&lt;ol&gt;
   &lt;li&gt;Change working directory into the JETTY configuration directory&lt;pre&gt;[ctier@ctier] cd $JETTY_HOME/etc
     &lt;/pre&gt;
   &lt;li&gt;Generate the keystore file&lt;pre&gt;[ctier@ctier  ]$ keytool -keystore keystore -alias ctier.controltier.org -genkey -keyalg RSA -keypass default -storepass default  &lt;&lt;!
ctier.controltier.org
dev2ops
ControlTier Project
San Mateo
California
US
yes
!

What is your first and last name?
  [Unknown]:  What is the name of your organizational unit?
  [Unknown]:  What is the name of your organization?
  [Unknown]:  What is the name of your City or Locality?
  [Unknown]:  What is the name of your State or Province?
  [Unknown]:  What is the two-letter country code for this unit?
  [Unknown]:  Is CN=ctier.controltier.org, OU=dev2ops, O=&quot;ControlTier Project&quot;, L=San Mateo, ST=California, C=US correct?
  [no]:  
[ctier@ctier]$ 
      &lt;/pre&gt;
   &lt;/li&gt;
   &lt;li&gt;Generate the private rsa key, requires passphrase from terminal input&lt;pre&gt;[ctier@ctier etc]$ openssl genrsa -des3 -out ctier.controltier.org.key
Generating RSA private key, 512 bit long modulus
.................................++++++++++++
...++++++++++++
e is 65537 (0x10001)
Enter pass phrase for ctier.controltier.org.key:
Verifying - Enter pass phrase for ctier.controltier.org.key:
[ctier@ctier etc]$ 
      &lt;/pre&gt;
   &lt;li&gt;Generate the self signed certificate, also requires same passphrase from terminal input&lt;pre&gt;[ctier@ctier etc]$ openssl req -new -x509 -key ctier.controltier.org.key -out ctier.controltier.org.crt &lt;&lt;!
US
California
San Mateo
ControlTier Project
dev2ops
ctier.controltier.org
root@ctier.controltier.org
!

Enter pass phrase for ctier.controltier.org.key:
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [GB]:State or Province Name (full name) [Berkshire]:Locality Name (eg, city) [Newbury]:Organization Name (eg, company) [My Company Ltd]:Organizational Unit Name (eg, section) []:Common Name (eg, your name or your server's hostname) []:Email Address []:[ctier@ctier etc]$
[ctier@ctier etc]$ 
      &lt;/pre&gt;
  &lt;li&gt;Convert the public/private crt/key pair into a pkcs12 (x509) formatted file (&lt;b&gt;NOTE:&lt;/b&gt;  the same passphrase from previous steps is used for both opening the key and establishing the export password)&lt;pre&gt;[ctier@ctier etc]$ openssl pkcs12 -inkey ctier.controltier.org.key -in ctier.controltier.org.crt -export -out ctier.controltier.org.pkcs12
Enter pass phrase for ctier.controltier.org.key:
Enter Export Password:
Verifying - Enter Export Password:
[ctier@ctier etc]$ 
      &lt;/pre&gt;
   &lt;li&gt;Prior to importing the pkcs12 file, verify the following files exist:&lt;pre&gt;
[ctier@centos-54-64-vm4 etc]$ ls -1 keystore ctier.controltier.org.*
ctier.controltier.org.crt
ctier.controltier.org.key
ctier.controltier.org.pkcs12
keystore
      &lt;/pre&gt;
  &lt;/li&gt;
&lt;/ol&gt;

== Adjust Jetty Connector Configuration ==

&lt;ol&gt;
&lt;li&gt;Edit jetty.xml:
&lt;pre&gt;
[ctier@centos-54-64-vm4 etc]$cp  jetty.xml jetty.xml.sav 
[ctier@centos-54-64-vm4 etc]$vi  jetty.xml 
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Modify non-secure connector on port 8080 to listen exclusively to the loopback via '''host''' parameter:
&lt;pre&gt;
    &lt;Call name=&quot;addConnector&quot;&gt;
      &lt;Arg&gt;
          &lt;New class=&quot;org.mortbay.jetty.nio.SelectChannelConnector&quot;&gt;
&lt;!-- ensure this connectors binds to the loopback only --&gt;
            &lt;Set name=&quot;host&quot;&gt;&lt;SystemProperty name=&quot;jetty.host&quot; default=&quot;127.0.0.1&quot;/&gt;&lt;/Set&gt;
            &lt;Set name=&quot;port&quot;&gt;&lt;SystemProperty name=&quot;jetty.port&quot; default=&quot;8080&quot;/&gt;&lt;/Set&gt;
            &lt;Set name=&quot;maxIdleTime&quot;&gt;30000&lt;/Set&gt;
            &lt;Set name=&quot;Acceptors&quot;&gt;2&lt;/Set&gt;
            &lt;Set name=&quot;statsOn&quot;&gt;false&lt;/Set&gt;
            &lt;Set name=&quot;confidentialPort&quot;&gt;8443&lt;/Set&gt;
            &lt;Set name=&quot;headerBufferSize&quot;&gt;8192&lt;/Set&gt;
            &lt;Set name=&quot;lowResourcesConnections&quot;&gt;5000&lt;/Set&gt;
            &lt;Set name=&quot;lowResourcesMaxIdleTime&quot;&gt;5000&lt;/Set&gt;
            &lt;Call name=&quot;open&quot;/&gt;
          &lt;/New&gt;
      &lt;/Arg&gt;
    &lt;/Call&gt;
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Add additional secure connector on port 8443 with keystore and password parameters:
&lt;pre&gt;
    &lt;Call name=&quot;addConnector&quot;&gt;
     &lt;Arg&gt;
      &lt;New class=&quot;org.mortbay.jetty.security.SslSocketConnector&quot;&gt;
        &lt;Set name=&quot;Port&quot;&gt;8443&lt;/Set&gt;
        &lt;Set name=&quot;maxIdleTime&quot;&gt;30000&lt;/Set&gt;
        &lt;Set name=&quot;keystore&quot;&gt;&lt;SystemProperty name=&quot;jetty.home&quot; default=&quot;.&quot; /&gt;/etc/keystore&lt;/Set&gt;
        &lt;Set name=&quot;password&quot;&gt;default&lt;/Set&gt;
        &lt;Set name=&quot;keyPassword&quot;&gt;default&lt;/Set&gt;
        &lt;Set name=&quot;truststore&quot;&gt;&lt;SystemProperty name=&quot;jetty.home&quot; default=&quot;.&quot; /&gt;/etc/keystore&lt;/Set&gt;
        &lt;Set name=&quot;trustPassword&quot;&gt;default&lt;/Set&gt;
      &lt;/New&gt;
     &lt;/Arg&gt;
    &lt;/Call&gt;
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Adjust the Workbench/Jetty webapp's runtime properties configuration:
&lt;pre&gt;
[ctier@centos-54-64-vm4 etc]$ cp $JETTY_HOME/webapps/itnav/WEB-INF/classes/runtime.properties $JETTY_HOME/webapps/itnav/WEB-INF/classes/runtime.properties.sav
[ctier@centos-54-64-vm4 etc]$ vi $JETTY_HOME/webapps/itnav/WEB-INF/classes/runtime.properties
[ctier@centos-54-64-vm4 etc]$ diff $JETTY_HOME/webapps/itnav/WEB-INF/classes/runtime.properties $JETTY_HOME/webapps/itnav/WEB-INF/classes/runtime.properties.sav
23c23
&lt; app.external.uri = https://centos-54-64-vm4.local:8443
---
&gt; app.external.uri = http://localhost:8080
155c155
&lt; dav.baseUrl = http://localhost:8080/jackrabbit/repository/controltier
---
&gt; dav.baseUrl = http://centos-54-64-vm4.local:8080/jackrabbit/repository/controltier
191c191
&lt; order.package.defaults.packageRepoURL.template=http://localhost:8080/jackrabbit/repository/controltier/pkgs/@project@/@resourceType@/@defaults.packageFiletype@s/FILENAME
---
&gt; order.package.defaults.packageRepoURL.template=http://centos-54-64-vm4.local:8080/jackrabbit/repository/controltier/pkgs/@project@/@resourceType@/@defaults.packageFiletype@s/FILENAME
&lt;/pre&gt;
&lt;/li&gt;
 &lt;li&gt;(Re)start Jetty&lt;pre&gt;
[ctier@centos-54-64-vm4 etc]$ jetty.sh stop 
[ctier@centos-54-64-vm4 etc]$ jetty.sh start
&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ol&gt;

== Configuring CTL Client(s) for SSL ==


Configure the server node's ctl framework properties file for SSL:
&lt;pre&gt;
[ctier@ctier etc]$ cp framework.properties framework.properties.sav
[ctier@ctier etc]$ vi framework.properties
[ctier@ctier etc]$ diff framework.properties framework.properties.sav 
240,241c240,241
&lt; framework.server.port = 8443
&lt; framework.server.url = https://ctier.local:8443/itnav
---
&gt; framework.server.port = 8080
&gt; framework.server.url = http://ctier.local:8080/itnav
243c243
&lt; framework.webdav.uri = https://ctier.local:8443/jackrabbit/repository/controltier
---
&gt; framework.webdav.uri = http://ctier.local:8080/jackrabbit/repository/controltier
248c248
&lt; framework.pkgRepo.uri = https://ctier.local:8443/jackrabbit/repository/controltier/pkgs
---
&gt; framework.pkgRepo.uri = http://ctier.local:8080/jackrabbit/repository/controltier/pkgs
250c250
&lt; framework.pkgRepo.upload-url = https://ctier.local:8443/jackrabbit/repository/controltier/pkgs
---
&gt; framework.pkgRepo.upload-url = http://ctier.local:8080/jackrabbit/repository/controltier/pkgs
260c260
&lt; framework.moduleRepo.url = https://ctier.local:8443/jackrabbit/repository/controltier/artifacts/modules
---
&gt; framework.moduleRepo.url = http://ctier.local:8080/jackrabbit/repository/controltier/artifacts/modules
265c265
&lt; framework.ctlcenter.url = https://ctier.local:8443/ctlcenter
---
&gt; framework.ctlcenter.url = http://ctier.local:8080/ctlcenter
&lt;/pre&gt;

On the Server machine, copy jetty's keystore to ctl's truststore:
&lt;pre&gt;
[ctier@ctier etc]$ cp $JETTY_HOME/etc/keystore $CTL_BASE/etc/truststore   
&lt;/pre&gt;

Distribute $CTL_BASE/etc/truststore to and adjust $CTL_BASE/etc/framework.properties on other ctl clients if necessary.</text>
    </revision>
  </page>
  <page>
    <title>Start</title>
    <id>867</id>
    <revision>
      <id>10374</id>
      <timestamp>2009-12-11T22:29:37Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">{{stub}}

The '''Start''' workflow is a command in the [[Service]] type and subtypes. It is generally implemented as the command [[assertServiceIsUp]] with a fail handler of [[startService]].

[[Category:Service]]
[[Category:Commands]]</text>
    </revision>
  </page>
  <page>
    <title>Start ControlTier</title>
    <id>114</id>
    <revision>
      <id>10853</id>
      <timestamp>2009-12-12T23:52:49Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;noinclude&gt;
''See [[Installation]] for information about downloading and installing the server software distribution.''

The ControlTier applications run in a Jetty instance running in $JETTY_HOME (as of 3.2 this is $CTIER_ROOT/pkgs/jetty-6.1.10). 
The JETTY_HOME environment variable is set by shell profile (see [[ControlTier_Environment_Variables]]).
&lt;/noinclude&gt;
====Unix Start====
Within the Jetty install is a &quot;jetty.sh&quot; script used to manage the Jetty process. This should already be set in your PATH. (ie, PATH=$PATH:$JETTY_HOME/bin)

Use the &quot;start&quot; sub-command:
&lt;pre&gt;
$ jetty.sh start
Starting Jetty: STARTED Jetty Tue Dec 23 16:07:29 PST 2008
2008-12-23 16:07:30.659::INFO:  Logging to STDERR via org.mortbay.log.StdErrLog
2008-12-23 16:07:30.726::INFO:  Redirecting stderr/stdout to /Users/alexh/ctier/pkgs/jetty-6.1.10/logs/2008_12_24.stderrout.log
&lt;/pre&gt;

====Windows Start====
Within the Jetty install is a &quot;start.bat&quot; script used to start the Jetty process. You'll find it as %JETTY_HOME%\bin\start.bat. 
&lt;pre&gt;
start
&lt;/pre&gt;

The install also includes a Jetty-Service.exe documented here [http://docs.codehaus.org/display/JETTY/Win32Wrapper Win32Wrapper].

====Troubleshooting====

=====Already Running=====
You might see this error even if there is no JVM process:
&lt;pre&gt;
$ jetty.sh start
Starting Jetty: Already Running!!
&lt;/pre&gt;

Just run the [[Stop ControlTier|&quot;stop&quot; command]] and then run the &quot;start&quot; command again.

=====Solaris:start-stop-daemon: command not found =====

Running &quot;jetty.sh start&quot; you might see this error on Solaris:
&lt;pre&gt;
Starting Jetty: /export/home/alexh/ctier/pkgs/jetty-6.1.10/bin/jetty.sh: line 497: whoami: command not found
/export/home/alexh/ctier/pkgs/jetty-6.1.10/bin/jetty.sh: line 499: start-stop-daemon: command not found
&lt;/pre&gt;
This is due to the Solaris &quot;&lt;code&gt;which&lt;/code&gt;&quot; command. The hack work around is to make the following change in jetty.sh:
&lt;pre&gt;
494c494
&lt; 	if which start-stop-daemon &gt; /dev/null 2&gt;&amp;1 
---
&gt; 	if false
&lt;/pre&gt;</text>
    </revision>
  </page>
  <page>
    <title>Status</title>
    <id>922</id>
    <revision>
      <id>10375</id>
      <timestamp>2009-12-11T22:29:46Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">{{stub}}

The '''Status''' workflow is a command in the [[Service]] type and subtypes. It is generally implemented as the command [[assertServiceIsUp]].

[[Category:Service]]
[[Category:Commands]]</text>
    </revision>
  </page>
  <page>
    <title>Status ControlTier</title>
    <id>112</id>
    <revision>
      <id>11253</id>
      <timestamp>2009-12-14T19:22:24Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;noinclude&gt;
The ControlTier applications run in a Jetty instance running in $JETTY_HOME (as of 3.2 this is $CTIER_ROOT/pkgs/jetty-6.1.10). 
The JETTY_HOME environment variable is set by shell profile (see [[ControlTier Environment Variables]]).

If the server is running, you should be able to access the [[server landing page]].

&lt;/noinclude&gt;
====Unix Status====
Within the Jetty install is a &quot;jetty.sh&quot; script used to manage the Jetty process. This should already be set in your PATH. (ie, PATH=$PATH:$JETTY_HOME/bin)

Use the &quot;check&quot; sub-command:

&lt;pre&gt;
jetty.sh check
$ jetty.sh
Usage: /Users/alexh/ctier/pkgs/jetty-6.1.10/bin/jetty.sh {start|stop|run|restart|check|supervise} [ CONFIGS ... ] 
strongbad:~/3-2-dev/controltier [499]
$ jetty.sh check
Checking arguments to Jetty: 
JETTY_HOME     =  /Users/alexh/ctier/pkgs/jetty-6.1.10
JETTY_CONF     =  
JETTY_RUN      =  /Users/alexh/ctier/pkgs/jetty-6.1.10/logs
JETTY_PID      =  /Users/alexh/ctier/pkgs/jetty-6.1.10/logs/jetty.pid
JETTY_PORT     =  
JETTY_LOGS     =  /Users/alexh/ctier/pkgs/jetty-6.1.10/logs
CONFIGS        =  /Users/alexh/ctier/pkgs/jetty-6.1.10/etc/jetty-logging.xml /Users/alexh/ctier/pkgs/jetty-6.1.10/etc/jetty.xml
JAVA_OPTIONS   =  -XX:MaxPermSize=128m -Xmx1024m -Xms256m -Djobcenter.config.location=
/Users/alexh/ctier/jobcenter/jobcenter-config.properties -Dreportcenter.config.location=
/Users/alexh/ctier/reportcenter/reportcenter-config.properties -Djetty.logs=
/Users/alexh/ctier/pkgs/jetty-6.1.10/logs -Djetty.home=/Users/alexh/ctier/pkgs/jetty-6.1.10 
-Djava.io.tmpdir=/Users/alexh/ctier/pkgs/jetty-6.1.10/work
JAVA           =  /usr/bin/java
CLASSPATH      =  
RUN_CMD        =  /usr/bin/java -XX:MaxPermSize=128m -Xmx1024m -Xms256m 
-Djobcenter.config.location=/Users/alexh/ctier/jobcenter/jobcenter-config.properties 
-Dreportcenter.config.location=/Users/alexh/ctier/reportcenter/reportcenter-config.properties 
-Djetty.logs=/Users/alexh/ctier/pkgs/jetty-6.1.10/logs -Djetty.home=/
Users/alexh/ctier/pkgs/jetty-6.1.10 -Djava.io.tmpdir=
/Users/alexh/ctier/pkgs/jetty-6.1.10/work -jar /Users/alexh/ctier/pkgs/jetty-6.1.10/start.jar 
 /Users/alexh/ctier/pkgs/jetty-6.1.10/etc/jetty-logging.xml /Users/alexh/ctier/pkgs/jetty-6.1.10/etc/jetty.xml

Jetty running pid=7440
&lt;/pre&gt;

====Windows Status====

If you are using the Windows Service Wrapper see [http://docs.codehaus.org/display/JETTY/Win32Wrapper Win32Wrapper].</text>
    </revision>
  </page>
  <page>
    <title>Steps to configure a JBoss cluster</title>
    <id>1855</id>
    <revision>
      <id>12370</id>
      <timestamp>2010-02-16T20:39:36Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <minor/>
      <comment>move stuff around</comment>
      <text xml:space="preserve">This describes the steps to take in order to cluster JBoss instances together for ATG deployment.

== References ==

* Ports to configure [http://community.jboss.org/wiki/TwoClustersontheSameNetwork]
* Two Cluster on Same Network [http://community.jboss.org/wiki/TwoClustersontheSameNetwork]
* Mod-jk sticky session [http://www.redhat.com/docs/manuals/jboss/jboss-eap-4.2/doc/Clustering_Guide/clustering-http-nodes.html]

== Change server instance to be copied from &quot;all&quot; ==
First thing we need to do is change the deploy folder in each instance to have the files from the &quot;all&quot; server configuration.  By default ControlTier deploys the &quot;default&quot; configuration. The &quot;all&quot; configuration supports clustering out of the box, which is disabled in &quot;default&quot;.
* Default deploy folder: ~/jboss-eap-4.2/jboss-as/server/default
* All deploy folder with clustering: ~/jboss-eap-4.2/jboss-as/server/all

Define the type AtgJBossDefaultInstance with a settingValue in your object.xml, and assign the setting to your AtgJBossServer objects.
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;setting type=&quot;AtgJBossDefaultInstance&quot; name=&quot;acmeStage&quot; description=&quot;Jboss Deploy set to ALL&quot; settingValue=&quot;all&quot;/&gt;
&lt;/syntaxhighlight&gt;

For clustering purposes, the server binding cannot be 0.0.0.0 (which is ControlTier's default), so we need to declare the JBossHost's ip.

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;setting type=&quot;JBossHost&quot; name=&quot;acmeStage&quot; description=&quot;Defines the interface JBoss binds to&quot; settingValue=&quot;172.555.22.11&quot;/&gt;
&lt;/syntaxhighlight&gt;

== Additional configuration if two clusters are on the same network ==
Next we need to add the Java arguments that define the Cluster's partition name, hapartition port and web partition port.  Defining these arguments is needed when you have two different clusters on the same network. For example acmeStage and looneyStage in one subnet.

Add these options to your Java options to set these parameters.
* -Djboss.partition.name=acmeStage 
* -Djboss.hapartition.mcast_port=45666
*-Djboss.webpartition.mcast_port=45677

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;setting type=&quot;AtgJBossJavaOpts&quot; name=&quot;acmeStage&quot; description=&quot;Stage Java Options&quot; settingValue=&quot;-Xms2048m
               -Xmx2048m-XX:MaxPermSize=512m -XX:MaxNewSize=512m -Dsun.rmi.dgc.client.gcInterval=3600000
              -Dsun.rmi.dgc.server.gcInterval=3600000-Dsun.lang.ClassLoader.allowArraySyntax=true -Djboss.partition.name=acmeStage 
              -Djboss.hapartition.mcast_port=45666-Djboss.webpartition.mcast_port=45677&quot;/&gt;
&lt;/syntaxhighlight&gt;

== Finishing up ==

Check that your mod-jk ‘worker.properties’ has sticky session active. If not add to “Load-balancing behaviour”

 worker.loadbalancer.sticky_session=1
 
Load your modified objects. Blow away your old JBoss instances and deploy.

== ATG Configuration additional steps ==

These settings will need to be set to make session replication work.

'''PDF:  9_1_ATGInstall3PAS.pdf - page 87'''

* Set the distruibutable flag in your assembler in your build:  “The –distributable flag is required to enable JBoss session failover”

'''PDF:  9_1_ATGInstall3PAS.pdf – page 95'''

* “To enable ATG’s backup, set the backingUpSessions property to true in the
/atg/dynamo/Configuration.properties file in the localconfig layer.
backingUpSessions=true”</text>
    </revision>
  </page>
  <page>
    <title>Stop</title>
    <id>921</id>
    <revision>
      <id>10376</id>
      <timestamp>2009-12-11T22:29:56Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">{{stub}}

The '''Stop''' workflow is a command in the [[Service]] type and subtypes. It is generally implemented as the command [[assertServiceIsDown]] with a fail handler of [[stopService]].

[[Category:Service]]
[[Category:Commands]]</text>
    </revision>
  </page>
  <page>
    <title>Stop ControlTier</title>
    <id>113</id>
    <revision>
      <id>10855</id>
      <timestamp>2009-12-12T23:53:12Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;noinclude&gt;
The ControlTier applications run in a Jetty instance running in $JETTY_HOME (as of 3.2 this is $CTIER_ROOT/pkgs/jetty-6.1.10). 
The JETTY_HOME environment variable is set by shell profile (see [[ControlTier_Environment_Variables]]).
&lt;/noinclude&gt;
====Unix Stop====
Within the Jetty install is a &quot;jetty.sh&quot; script used to manage the Jetty process. This should already be set in your PATH. (ie, PATH=$PATH:$JETTY_HOME/bin)

Use the &quot;stop&quot; sub-command:
&lt;pre&gt;
$ jetty.sh stop
Stopping: OK
&lt;/pre&gt;

====Windows Stop====
Apart from stopping Jetty with a &lt;code&gt;cntrl-c&lt;/code&gt; in the same terminal window as you started it, you can 
start Jetty so that it listens on a local port for stop commands:
&lt;pre&gt;
java -DSTOP.PORT=8079 -DSTOP.KEY=secret -jar start.jar
&lt;/pre&gt;
The server can then be stopped using a different terminal window on the same machine:
&lt;pre&gt;
java -DSTOP.PORT=8079 -DSTOP.KEY=secret -jar start.jar --stop
&lt;/pre&gt;

If the STOP.KEY property is ommitted from the start command, then a random key is printed on standard out. If the STOP.PORT is set to 0, a random available port is assigned and printed on stdout.


If you are using the Windows Service Wrapper see: [http://docs.codehaus.org/display/JETTY/Win32Wrapper Jetty docs].</text>
    </revision>
  </page>
  <page>
    <title>Strawman resource model definition</title>
    <id>1717</id>
    <redirect />
    <revision>
      <id>11642</id>
      <timestamp>2009-12-16T16:27:03Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>moved [[Strawman resource model definition]] to [[CTIP - Simplified Resource Model Definition]]</comment>
      <text xml:space="preserve">#REDIRECT [[CTIP - Simplified Resource Model Definition]]</text>
    </revision>
  </page>
  <page>
    <title>Strawman roadmap wishlist</title>
    <id>1669</id>
    <redirect />
    <revision>
      <id>16511</id>
      <timestamp>2012-02-23T15:01:02Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Undo revision 15448 by [[Special:Contributions/Woolerystixmaker|Woolerystixmaker]] ([[User talk:Woolerystixmaker|talk]]) Reverted SPAM bot edits</comment>
      <text xml:space="preserve">#REDIRECT [[Roadmap wishlist]]</text>
    </revision>
  </page>
  <page>
    <title>Strawman self contained process definition</title>
    <id>1718</id>
    <redirect />
    <revision>
      <id>11645</id>
      <timestamp>2009-12-16T16:29:02Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>moved [[Strawman self contained process definition]] to [[CTIP - Self-contained Process Definition]]</comment>
      <text xml:space="preserve">#REDIRECT [[CTIP - Self-contained Process Definition]]</text>
    </revision>
  </page>
  <page>
    <title>Strawman self contained process definition example (pview style)</title>
    <id>1719</id>
    <redirect />
    <revision>
      <id>11648</id>
      <timestamp>2009-12-16T16:30:21Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>moved [[Strawman self contained process definition example (pview style)]] to [[Self-contained process definition example (pview style)]]</comment>
      <text xml:space="preserve">#REDIRECT [[Self-contained process definition example (pview style)]]</text>
    </revision>
  </page>
  <page>
    <title>Strawman self contained process definition example (relation style)</title>
    <id>1720</id>
    <redirect />
    <revision>
      <id>11651</id>
      <timestamp>2009-12-16T16:30:54Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>moved [[Strawman self contained process definition example (relation style)]] to [[Self-contained process definition example (relation style)]]</comment>
      <text xml:space="preserve">#REDIRECT [[Self-contained process definition example (relation style)]]</text>
    </revision>
  </page>
  <page>
    <title>Strawman system architecture</title>
    <id>1716</id>
    <redirect />
    <revision>
      <id>11639</id>
      <timestamp>2009-12-16T16:23:13Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>moved [[Strawman system architecture]] to [[Architecture (TNG)]]</comment>
      <text xml:space="preserve">#REDIRECT [[Architecture (TNG)]]</text>
    </revision>
  </page>
  <page>
    <title>String-list Task Reference</title>
    <id>154</id>
    <revision>
      <id>14389</id>
      <timestamp>2010-11-11T17:30:14Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Tasks&lt;/categorytree&gt;

==Description==

      &lt;p&gt;
	The string-list ant task takes a delimited string, and provides
	various list actions.
      &lt;/p&gt;

==General syntax==

&lt;syntaxhighlight lang=&quot;xml&gt;
	&lt;string-list list=&quot;e1,e2,e3&quot; delimiter=&quot;,&quot; resultproperty=&quot;result&quot;&gt;
 	  &lt;add&gt;e4&lt;/add&gt;
	&lt;/string-list&gt;
 &lt;/syntaxhighlight&gt;

==Parameters==

      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;list&lt;/td&gt;&lt;td&gt;Value containing list&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;resultproperty&lt;/td&gt;&lt;td&gt;Property name to store result.
	  &lt;/td&gt;&lt;td&gt;No. defaults to &amp;quot;result&amp;quot;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;delimiter&lt;/td&gt;&lt;td&gt;String delimiting elements in the list value&lt;/td&gt;&lt;td&gt;No. defaults to &amp;quot;,&amp;quot; (comma)&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;
    
==Parameters specified as nested elements==

      &lt;p&gt;The string-list task takes one &lt;em&gt;action&lt;/em&gt; element.&lt;/p&gt;

      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	  &lt;th&gt;action&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;th&gt;input data&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;contains&lt;/td&gt;&lt;td&gt;Checks if list contains value. If the value is
	found resultproperty is set true, otherwise the property is not set.&lt;/td&gt;
	&lt;td&gt;value to find&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;get&lt;/td&gt;&lt;td&gt;Retrieves element from list. Takes an index number or
	optionally a regex pattern if regex=true.&lt;/td&gt;
	&lt;td&gt;an integer or a regex pattern if regex attribute is set true&lt;/td&gt;
	&lt;/tr&gt;

	&lt;tr&gt;
	  &lt;td&gt;add&lt;/td&gt;&lt;td&gt;Adds element to list&lt;/td&gt;&lt;td&gt;value to add&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;remove&lt;/td&gt;&lt;td&gt;Removes element from list&lt;/td&gt;&lt;td&gt;value to remove&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;reverse&lt;/td&gt;&lt;td&gt;Reverses elements in list.&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;size&lt;/td&gt;&lt;td&gt;Counts elements in list&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;
   
==Examples==

      &lt;p&gt;
	The examples below show off a variety of string-list actions.
      &lt;/p&gt;

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
 &lt;!-- count the elements --&gt;
  &lt;string-list list=&quot;one,two,three&quot;
	       delimiter=&quot;,&quot;
	       resultproperty=&quot;list.size&quot;&gt;
    &lt;size/&gt;
  &lt;/string-list&gt;

  &lt;!-- check if the list contains the value, one --&gt;
  &lt;string-list list=&quot;one,two,three&quot; resultproperty=&quot;contains.one&quot;&gt;
    &lt;contains&gt;one&lt;/contains&gt;
  &lt;/string-list&gt;

  &lt;!-- get the first element --&gt;
  &lt;string-list list=&quot;one,two,three&quot; resultproperty=&quot;list.zeroth&quot;&gt;
    &lt;get&gt;0&lt;/get&gt;
  &lt;/string-list&gt;

  &lt;!-- retreive the element by a regex pattern --&gt;
  &lt;string-list list=&quot;one,two,three&quot; resultproperty=&quot;list.get.regex&quot;&gt;
    &lt;get regex=&quot;true&quot;&gt;on.&lt;/get&gt;
  &lt;/string-list&gt;
  
  &lt;!-- add an element --&gt;
  &lt;string-list list=&quot;one,two,three&quot; resultproperty=&quot;list.added&quot;&gt;
    &lt;add&gt;four&lt;/add&gt;
  &lt;/string-list&gt;

  &lt;!-- remove an element --&gt;
  &lt;string-list list=&quot;one,two,three&quot; resultproperty=&quot;list.removed&quot;&gt;
    &lt;remove&gt;three&lt;/remove&gt;
  &lt;/string-list&gt;


  &lt;echo&gt;
    number elements: ${list.size}
    contains one?: ${contains.one}
    first num: ${list.zeroth}
    get pattern.: ${list.get.regex}
    reversed: ${list.reversed}
    add an element: ${list.added}
    remove an element: ${list.removed}
  &lt;/echo&gt;
&lt;/syntaxhighlight&gt;

      &lt;p&gt;results would look like:&lt;/p&gt;
      &lt;pre&gt;
	  number elements: 3
	  contains one?: true
          first num: one
	  get pattern: one
	  reversed: two,three,one
	  add an element: one,two,three,four
	  remove an element: one,two
      &lt;/pre&gt;
&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Utility Ant Tasks]]</text>
    </revision>
  </page>
  <page>
    <title>StringList</title>
    <id>1694</id>
    <redirect />
    <revision>
      <id>11441</id>
      <timestamp>2009-12-14T23:46:54Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>moved [[StringList]] to [[StringList Type Reference]]</comment>
      <text xml:space="preserve">#REDIRECT [[StringList Type Reference]]</text>
    </revision>
  </page>
  <page>
    <title>StringList Task Reference</title>
    <id>967</id>
    <redirect />
    <revision>
      <id>5299</id>
      <timestamp>2009-05-22T19:51:18Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>[[StringList Task Reference]] moved to [[String-list Task Reference]]</comment>
      <text xml:space="preserve">#REDIRECT [[String-list Task Reference]]</text>
    </revision>
  </page>
  <page>
    <title>StringList Type Reference</title>
    <id>1692</id>
    <revision>
      <id>11440</id>
      <timestamp>2009-12-14T23:46:54Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>moved [[StringList]] to [[StringList Type Reference]]</comment>
      <text xml:space="preserve">{{stub}}
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;property name=&quot;dependency.moduleX&quot; value=&quot;1,2,3&quot;/&gt;

&lt;stringlist value=&quot;${dependency.moduleX}&quot;  delimiter=&quot;,&quot;  param=&quot;num&quot;/&gt;
&lt;/syntaxhighlight&gt;

[[Category:ApplyMacro Ant Type]]</text>
    </revision>
  </page>
  <page>
    <title>String option</title>
    <id>97</id>
    <revision>
      <id>11530</id>
      <timestamp>2009-12-15T16:27:35Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>/* See also */</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Command Options&lt;/categorytree&gt;

This page describes how to use the &quot;option&quot; tag to define a string type option. A string type option is a named parameter that accepts an argument.

==Choose a command==
You can add the option to an existing command definition. To create a new type with an example command that takes an option run:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m ProjectBuilder -c create-type -- -type optioncommands
&lt;/syntaxhighlight&gt;

== Edit type.xml==

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
   &lt;command name=&quot;print&quot; description=&quot;print a message.&quot; 
               command-type=&quot;AntCommand&quot; is-static=&quot;true&quot;&gt;
        &lt;implementation&gt;
	  &lt;echo message=&quot;${opts.message}&quot;/&gt;
        &lt;/implementation&gt;
        &lt;!--
	  ** Define an option called &quot;-message&quot;.
	  ** The command line will be parsed and set the 
	  ** value to the property named opts.message
	  --&gt;
        &lt;opts&gt;
          &lt;opt parameter=&quot;message&quot; description=&quot;option name&quot; required=&quot;true&quot;
	       property=&quot;opts.message&quot; type=&quot;string&quot; /&gt;
        &lt;/opts&gt;
      &lt;/command&gt;      
&lt;/syntaxhighlight&gt;

==Build the type==
Use the &quot;build-type&quot; command to generate the command files.
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
 ctl -m ProjectBuilder -c build-type -- -type optioncommands -upload -deploy
&lt;/syntaxhighlight&gt;
The -upload and -deploy flag cause the generated type to be uploaded to Workbench and then deployed to the local client.

==Run the command==

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m optioncommands -c print -- -message Hello
Hello
&lt;/syntaxhighlight&gt;

Without the required argument the command will fail:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ ctl -p default -m optioncommands -c print
Option usage error for command: 'print'. 

Command failed: 
usage: -message  &lt;&gt; 
&lt;/syntaxhighlight&gt;

If the argument contains whitespace it is necessary to double quote the value:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m optioncommands -c print -- -message &quot;'Hello my name is Earl'&quot;
Hello my name is Earl
&lt;/syntaxhighlight&gt;
... otherwise it won't be parsed correctly:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m optioncommands -c print -- -message 'Hello my name is Earl'
Hello 
&lt;/syntaxhighlight&gt;

Note:
* Remember that user specified options are typed after the &quot;--&quot; (double dash) characters.


&lt;noinclude&gt;{{Manual/navbox}}&lt;/noinclude&gt;

[[Category:Command Options]]</text>
    </revision>
  </page>
  <page>
    <title>Stringlist</title>
    <id>1869</id>
    <redirect />
    <revision>
      <id>12461</id>
      <timestamp>2010-04-01T14:44:51Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[StringList Type Reference]]</comment>
      <text xml:space="preserve">#REDIRECT [[StringList Type Reference]]</text>
    </revision>
  </page>
  <page>
    <title>Supported Browsers</title>
    <id>925</id>
    <redirect />
    <revision>
      <id>5035</id>
      <timestamp>2009-05-03T19:10:58Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>[[Supported Browsers]] moved to [[Supported browsers]]</comment>
      <text xml:space="preserve">#REDIRECT [[Supported browsers]]</text>
    </revision>
  </page>
  <page>
    <title>Supported browsers</title>
    <id>842</id>
    <revision>
      <id>13686</id>
      <timestamp>2010-11-10T15:05:28Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;noinclude&gt;&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Installation&lt;/categorytree&gt;&lt;/noinclude&gt;

Currently, these are the supported browsers for the web applications:
* Firefox 2.0 or higher
* Safari 3 or higher
* Internet Explorer 7 or 8

''Note: Internet Explorer 6 is not supported and is known to cause a number of visible problems.''&lt;noinclude&gt;
[[Category:Installation requirements]]
&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>SystemService</title>
    <id>866</id>
    <revision>
      <id>10294</id>
      <timestamp>2009-12-11T19:05:57Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Service&lt;/categorytree&gt;
[[File:Icon-ServiceObject.png]]

'''SystemService''' is a module that integrates the standard UNIX sysvinit service scripts, and can execute [[Start]], [[Stop]], [[Status]] and other service-related commands using the script in ''/etc/init.d/''.

{{Manual/navbox}}

[[Category:Service]]
[[Category:Elements]]</text>
    </revision>
  </page>
  <page>
    <title>System requirements</title>
    <id>376</id>
    <revision>
      <id>16403</id>
      <timestamp>2012-02-20T13:11:31Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Undo revision 15661 by [[Special:Contributions/Huberlivingston1|Huberlivingston1]] ([[User talk:Huberlivingston1|talk]]) Reverted SPAM bot edits</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Installation&lt;/categorytree&gt;

This page describes the '''system requirements''' for ControlTier.

==Operating System Versions==
* Linux - recent distributions are likely to work. Most often tested are:
** Red Hat Enterprise Linux 4 update 2 or CentOS 4.2 or later
** Red Hat Enterprise Linux 5 update 2 or CentOS 5.2 or later
* Windows XP or Windows Server 2003 or later
* Mac OS X 10.4 or later
* Solaris 10 or OpenSolaris

==Operating System Tuning==

Note that on certain variants of Windows (e.g. Windows XP) it is necessary to increase the number of ephemeral ports available for socket connections in order to run the ControlTier server stably (see http://support.microsoft.com/kb/196271).

==Permissions==
Root (or Administrator on Windows) is not required or recommended. We recommend using a dedicated user account such as ''deploy''.

If there is need for root access, please set up the ControlTier user to have access via '''sudo'''.

==Java==
ControlTier requires Java 5 or Java 6. For Java 5, only the Sun JDK is supported; for Java 6, the Sun JDK and OpenJDK are supported. We recommend that you set up a separate instance of the JDK for ControlTier. On UNIX, the recommended location is: ''$CTIER_ROOT/pkgs/jdk1.x.x_xx''. You may use a system-installed Java, but generally, we encourage you to install a separate instance of Java to avoid version conflicts, especially on older distributions of Linux. To use a system-installed Java, simply set the JAVA_HOME environment variable.

For Java 5, download the latest Java 5 JDK from [http://java.sun.com/javase/downloads/index_jdk5.jsp the Java 5 website]. Look for the Download button next to the heading &quot;JDK 5.0 Update 19&quot; (or latest version). This requires email registration.

==Server resources==
* Core / Athlon 64 / PowerPC G5 class processor or better recommended
* 1.5GB disk space, plus free space for your package repository (4GB recommended)
* 1GB of memory, 2GB recommended

==Client resources==
* 200MB disk space (500MB recommended)
* 256-512MB of memory

==Network access==
Clients should be set up to allow the ControlTier server user to connect to the clients using SSH via public-key authentication. It should not prompt for a password. There are various ways of installing SSH on Windows; we recommend [[Cygwin]].

TCP ports 8080 (jetty) and 1055 (log4j) need to be open on the server. In addition, TCP port 22 needs to be open on the clients for SSH.


&lt;noinclude&gt;
{{Installation/navbox}}
[[Category:Installation requirements]]
&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>TemplateCreate Task Reference</title>
    <id>172</id>
    <revision>
      <id>13484</id>
      <timestamp>2010-11-10T01:42:04Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;entity.&quot; to &quot;resource.&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Tasks&lt;/categorytree&gt;
=Description=

      &lt;p&gt;
	This Ant Task creates a template file on the server's DAV share, uploading
	the contents of a &amp;quot;bootstrap&amp;quot; file as the content of the template.
      &lt;/p&gt;
    
=Parameters=

      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;depot&lt;/td&gt;&lt;td&gt;The project to update&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;resultproperty&lt;/td&gt;&lt;td&gt;Property to set with
	  success/fail value&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;comment&lt;/td&gt;&lt;td&gt;Text describing purpose of update&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;passfile&lt;/td&gt;&lt;td&gt;File containing authentication info to
	  server. If passfile is not specified, information from the
	    [[framework.properties]]
	  file is used instead.&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;

=Parameters specified as nested elements=
      &lt;p&gt;&lt;strong&gt;template&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
	A [[Template Type Reference|template]].
      &lt;/p&gt;

=Examples=

      &lt;p&gt;
	Load the file, myFile.template, as a new template in the
	current Workbench project.
      &lt;/p&gt;
      &lt;pre&gt;
	&amp;lt;template-create
	   depot=&quot;${resource.depot}&quot;
           resultproperty=&quot;rs&quot;
           comment=&quot;Initial load of config&quot;&amp;gt;
          &amp;lt;template
             file=&quot;myFile.template&quot;
             dir=&quot;/${resource.depot}/templates&quot;
             type=&quot;xpath&quot;
             bootstrapfile=&quot;myFile&quot;
             /&amp;gt;
        &amp;lt;/template-create&amp;gt;

      &lt;/pre&gt;
[[Category:Resource model Ant Tasks]]
[[Category:Transforms]]</text>
    </revision>
  </page>
  <page>
    <title>Template Type Reference</title>
    <id>173</id>
    <revision>
      <id>13485</id>
      <timestamp>2010-11-10T01:42:05Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;entity.&quot; to &quot;resource.&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Types&lt;/categorytree&gt;
=Description=
      &lt;p&gt;
	The Template data type describes a template in the DAV store.
      &lt;/p&gt;

=Attributes=
      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;file&lt;/td&gt;&lt;td&gt;The file name.&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;dir&lt;/td&gt;&lt;td&gt;Directory name.&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;type&lt;/td&gt;&lt;td&gt;Type of template. Valid types are:
	  &amp;quot;xsl&amp;quot;, &amp;quot;simple&amp;quot;&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;
    
=Examples=

     &lt;p&gt;
       Shows the template data type used within a transform-create
       task, specifying the template to use in the transform definition.
      &lt;/p&gt;
      &lt;pre&gt;
	&amp;lt;transform-create serverurl=&quot;${viewdoc.server}&quot; depot=&quot;${resource.depot}&quot;
                resultproperty=&quot;rs&quot;
                comment=&quot;something re this update&quot;&amp;gt;
                &amp;lt;context direction=&quot;internal&quot; proximity=&quot;1&quot; maprefuri=&quot;${resource.mapref-uri}&quot;/&amp;gt;
                &amp;lt;document file=&quot;haha.txt&quot; dir=&quot;/${resource.depot}/publish&quot; type=&quot;text-plain&quot;/&amp;gt;
                &amp;lt;template file=&quot;${templateFile}&quot; dir=&quot;/${resource.depot}/templates&quot; type=&quot;simple&quot;/&amp;gt;
        &amp;lt;/transform-create&amp;gt;

      &lt;/pre&gt;
&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Resource model Ant Types]]
[[Category:Transforms]]</text>
    </revision>
  </page>
  <page>
    <title>Template method pattern</title>
    <id>81</id>
    <revision>
      <id>15138</id>
      <timestamp>2011-02-03T15:56:39Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Object-orientation&lt;/categorytree&gt;

ControlTier uses the template method pattern to define several key workflows. It's useful to understand how template method pattern is implemented in the solution libraries. It's also useful if you want to employ the pattern for your own processes.  Wikipedia uses the following description:

  &quot;A template method defines the program skeleton of an algorithm. 
  'The algorithm itself is made abstract, and the subclasses override 
  the abstract methods to provide concrete behavior.&quot; (link)

As the figure below shows, an AbstractClass declares a method which structures a series of other method calls in that class. The methods that are called can be overridden in sub classes.

[[Image:Template_Method_UML.png]]

==ControlTier Example==
An example of Template method pattern is shown in the Package#installPackage workflow. You can see in the following diagram that the installPackage  workflow calls several primitive operations: installDependencies, prepare, get, extract, and finish. 

[[Image:Package-installPackage.png]]

The subtype, &quot;zip&quot;, overrides just two operations, &quot;create&quot; and &quot;extract&quot;  as these operations vary across package subtypes.

==Defining your own==

These are the steps to implement the template method design pattern in a ControlTier type:

# Define primitive operations as commands in the Supertype. These primitive commands might be hooks to be be overridden in subtypes.
# In the Supertype, define a workflow to act as the template method. The workflow should invoke the primitive operations in the order desired. 
# Override one or more of the primitive operations in a Subtype. Doing so will maintain the protocol of the template method but allows subtypes to very behavior.

= Create or choose a type =

* Create a new type called AbstractClass:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m ProjectBuilder -c create-type -- -type AbstractClass
&lt;/syntaxhighlight&gt;

* Create a new type called ConcreteClass:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m ProjectBuilder -c create-type -- -type ConcreteClass  -supertype AbstractClass
&lt;/syntaxhighlight&gt;

== Edit type.xml==

'''AbstractClass'''

This example shows a supertype establishing several primitive operations representing individual steps as well as a workflow representing the template method:

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;type name=&quot;AbstractClass&quot; role=&quot;abstract&quot;
        uniqueInstances=&quot;true&quot;&gt;
 &lt;description&gt;Shows template method pattern&lt;/description&gt;
 &lt;supertype&gt;
      &lt;typereference name=&quot;Managed-Entity&quot;/&gt;
 &lt;/supertype&gt;
   &lt;command-settings&gt;
      &lt;notification notify=&quot;false&quot;/&gt;
      &lt;template-directory&gt;&lt;/template-directory&gt;
      &lt;dependency-view parents=&quot;false&quot; children=&quot;true&quot; proximity=&quot;1&quot;/&gt;
      &lt;logger name=&quot;AbstractClass&quot;/&gt;
    &lt;/command-settings&gt;
 &lt;commands&gt;
  &lt;command name=&quot;PrimitiveOperation1&quot; description=&quot;a primitive&quot;
           command-type=&quot;AntCommand&quot;&gt;
   &lt;implementation&gt;
      &lt;fail&gt;PrimitiveOperation2 must be overridden by a subtype&lt;/fail&gt;
   &lt;/implementation&gt;
  &lt;/command&gt;
  &lt;command name=&quot;PrimitiveOperation2&quot; description=&quot;a primitive&quot;
           command-type=&quot;AntCommand&quot;&gt;
   &lt;implementation&gt;
      &lt;fail&gt;PrimitiveOperation2 must be overridden by a subtype&lt;/fail&gt;
   &lt;/implementation&gt;
  &lt;/command&gt;
  &lt;command name=&quot;doSomething&quot; description=&quot;a primitive&quot;
           command-type=&quot;AntCommand&quot;&gt;
     &lt;implementation&gt;
      &lt;echo&gt;Doing something&lt;/echo&gt;
     &lt;/implementation&gt;
  &lt;/command&gt;
  &lt;command name=&quot;TemplateMethod&quot; description=&quot;worfklow to embody template method&quot;
           command-type=&quot;WorkflowCommand&quot; error-handler-type=&quot;FAIL&quot; is-static=&quot;true&quot;&gt;
       &lt;workflow threadcount=&quot;1&quot;&gt;
	  &lt;command name=&quot;PrimitiveOperation1&quot;/&gt;
	  &lt;command name=&quot;PrimitiveOperation2&quot;/&gt;
	  &lt;command name=&quot;doSomething&quot;/&gt;
        &lt;/workflow&gt;
  &lt;/command&gt;
 &lt;/commands&gt;
&lt;/type&gt;
&lt;/syntaxhighlight&gt;

Note
* The type.xml does not currently support the notion of an abstract command for the primitive operations. So in place of that, this example uses a &quot;fail&quot; task to cause the command to throw a runtime exception. 

'''ConcreteClass'''

The concrete class overrides just the primitive operations:
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;type name=&quot;ConcreteClass&quot; role=&quot;concrete&quot; 
        uniqueInstances=&quot;true&quot;&gt;
 &lt;description&gt;Overrides primitive operations&lt;/description&gt;
 &lt;supertype&gt;
      &lt;typereference name=&quot;AbstractClass&quot;/&gt;
 &lt;/supertype&gt;
   &lt;command-settings&gt;
      &lt;notification notify=&quot;false&quot;/&gt;
      &lt;template-directory&gt;&lt;/template-directory&gt;
      &lt;dependency-view parents=&quot;false&quot; children=&quot;true&quot; proximity=&quot;1&quot;/&gt;
      &lt;logger name=&quot;ConcreteClass&quot;/&gt;
    &lt;/command-settings&gt;
 &lt;commands&gt;
  &lt;command name=&quot;PrimitiveOperation1&quot; description=&quot;a primitive&quot;
           command-type=&quot;AntCommand&quot;&gt;
   &lt;implementation&gt;
     &lt;echo&gt;Doing operation 1&lt;/echo&gt;
   &lt;/implementation&gt;
  &lt;/command&gt;
  &lt;command name=&quot;PrimitiveOperation2&quot; description=&quot;a primitive&quot;
           command-type=&quot;AntCommand&quot;&gt;
   &lt;implementation&gt;
     &lt;echo&gt;Doing operation 2&lt;/echo&gt;
   &lt;/implementation&gt;
  &lt;/command&gt;
 &lt;/commands&gt;
&lt;/type&gt;
&lt;/syntaxhighlight&gt;

== Build the types ==

Use the &quot;build-type&quot; command to generate the command files.

* Build the the SuperClass
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m ProjectBuilder -c build-type -- -type AbstractClass -upload -deploy
&lt;/syntaxhighlight&gt;

* Build the type ConcreteClass
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -m ProjectBuilder -c build-type -- -type ConcreteClass -upload -deploy
&lt;/syntaxhighlight&gt;

The -upload and -deploy flag cause the types to be uploaded to Workbench and then deployed to the local client.

== Run the commands ==

After these steps are done and the types built and deployed, you can call the TemplateMethod command on the ConcreteClass type. You will find that the workflow command is inherited from AbstractClass  but the overriden PrimitiveOperation commands of ConcreteClass are called.

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ ctl  -m ConcreteClass -c TemplateMethod
Start: &quot;worfklow to embody template method&quot; commands: PrimitiveOperation1,PrimitiveOperation2,doSomething
begin workflow command (1/3) -&gt; &quot;PrimitiveOperation1 &quot; ...
Doing operation 1
end workflow command (1/3) -&gt; &quot;PrimitiveOperation1 &quot;
begin workflow command (2/3) -&gt; &quot;PrimitiveOperation2 &quot; ...
Doing operation 2
end workflow command (2/3) -&gt; &quot;PrimitiveOperation2 &quot;
begin workflow command (3/3) -&gt; &quot;doSomething &quot; ...
Doing something
end workflow command (3/3) -&gt; &quot;doSomething &quot;
Workflow completed. execution time: 0.461 sec
&lt;/syntaxhighlight&gt;

Try running one of the primitive operation commands in the AbstractClass:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ ctl  -m AbstractClass -c PrimitiveOperation1

Command failed: PrimitiveOperation2 must be overridden by a subtype
&lt;/syntaxhighlight&gt;
The command fails with a runtime exception.

&lt;noinclude&gt;{{Manual/navbox}}&lt;/noinclude&gt;

[[Category:Object-orientation]]</text>
    </revision>
  </page>
  <page>
    <title>TestPage</title>
    <id>2890</id>
    <revision>
      <id>16368</id>
      <timestamp>2012-02-08T15:32:56Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <comment>Blanked the page</comment>
      <text xml:space="preserve" />
    </revision>
  </page>
  <page>
    <title>Textutil</title>
    <id>1023</id>
    <revision>
      <id>10226</id>
      <timestamp>2009-12-11T18:26:30Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Types&lt;/categorytree&gt;
[[File:Icon-AssemblyObject.png]]
[[textutil]] is a utility containing commands useful for manipulating text. 

==Reference==
* [http://controltier.sourceforge.net/docs/latest/core/reference/user/textutil/index.html textutil reference].
  
{{Manual/navbox}}
[[Category:Managed-Entity]]
[[Category:coreutils]]</text>
    </revision>
  </page>
  <page>
    <title>Tgz</title>
    <id>1659</id>
    <revision>
      <id>11191</id>
      <timestamp>2009-12-14T16:18:28Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Created page with '&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Package&lt;/categorytree&gt; [[File:Icon-Packa…'</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Package&lt;/categorytree&gt;
[[File:Icon-PackageObject.png]]
The [[tgz]] type represents a Gzipped Tar archive


==Reference==

{{Package/reference|tgz}}

==Definition==
[[File:Core-type-model.png|thumb|Core type model]]

===Metadata===

The table below gives a brief description for each of the attributes of the package type. The ones with an asterisk are required during the deployment cycle.
{{Package/type/properties}}

===Project XML===
{{Package/projectxml |example|123|tgz}}

===Querying===

{{Package/querying|example|123|tgz}}

{{Manual/navbox}}
[[Category:Package]]</text>
    </revision>
  </page>
  <page>
    <title>Tomcat</title>
    <id>831</id>
    <revision>
      <id>13916</id>
      <timestamp>2010-11-10T15:22:48Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot; -o &quot; to &quot; -r &quot;</comment>
      <text xml:space="preserve">{{Version Required|3.4.4}}

Manage an Apache-Tomcat server, with multiple contexts and war deployments.  Organize multiple Apache-Tomcat servers into a Site to manage as a group.

''Before delving into ControlTier usage, be sure to read [[How to use ControlTier]].''

Also see the [[Using Libraries]] document for some getting-started instructions.

== Overview ==

The Tomcat Library provides Types to help you:

* [[#Manage an Apache-Tomcat server instance|Manage an Apache-Tomcat server instance]]
** using [[#TomcatServer|TomcatServer]], and [[#TomcatZip|TomcatZip]], and a [[#war|war]] package
* [[#Manage multiple web application contexts|Manage multiple web application contexts on a single Apache-Tomcat server]]
** use a single [[#TomcatServer|TomcatServer]], and multiple [[#TomcatContext|TomcatContext]] objects
** Use a [[#TomcatSite|TomcatSite]] to manage the TomcatContext and TomcatServer objects as a group
* [[#Manage multiple Apache-Tomcat servers|Manage multiple Apache-Tomcat servers]] 
** Use a normal [[#Site|Site]] object to manage multiple [[#TomcatSite|TomcatSite]]s
* [[#Build war packages to deploy to the server|Build war packages to deploy to the server]] 
** Use any Builder subtype to produce a [[#war|war]] package, and deploy it to the TomcatContext, or TomcatServer.
* [[#Build software with Ant that depends on Apache-Tomcat|Build software with Ant that depends on Apache-Tomcat]] 
** Use a [[#TomcatAntBuilder|TomcatAntBuilder]]
* [[#Deploy WAR packages to an Apache-Tomcat server|Deploy WAR packages to an Apache-Tomcat server]]
** Use the [[#war|war]] core type

These Types are designed with the following object composition model:

[[Image:Tomcat-composition.png|Tomcat Library Composition Model]]

A single [[#TomcatServer|TomcatServer]] object represents an instance of the running Apache-Tomcat server. A TomcatServer object depends on a [[#TomcatZip|TomcatZip]] package object to hold the Apache-Tomcat server software for automatic deployment.  TomcatServer can also use a single [[#war|war]] object to deploy a web application to the server.

Multiple web application contexts can be managed using the [[#TomcatContext|TomcatContext]] type. Each object of this type represents a single web application.  It depends on a [[#war|war]], and all of the TomcatContext objects should be children of a [[#TomcatSite|TomcatSite]] object. The TomcatSite also has a single TomcatServer object child dependency.

TomcatSite is a [[Core Type Guide#Site|Site]] subtype, which dispatches lifecycle commands (Start, Stop, etc.) to all of the contexts on the server.

You can use the [[Core Type Guide#Site|Site]] type to manage a set of multiple [[#TomcatSite|TomcatSite]]s, or managing a single TomcatServer on multiple Nodes.

==Dependencies==
Works with Tomcat 4.1, 5.x, and 6.x.  The particular release should be specified in the TomcatZip object's &quot;release&quot; property.

==Limitations==

* Database datasource generation is supported only when using Apache-Tomcat release '''6.x'''.

==Development Process==

The following sections will guide you in developing your Tomcat management model by use of the Types defined in this library.

Use one or more [[project.xml]] files to manage the model definitions, and use a ProjectBuilder object to load and operate on the model. 

* Refer to the [[Using Libraries]] instructions to begin.

==Usage==

The Tomcat Library provides several Types that can be used for managing a Apache-Tomcat server and its related web-applications and configurations in various ways.  The parts of this section will guide you to the appropriate Types to use for each particular purpose.

These sections are ordered in a way that should let you start simply and move on to more advanced usages.  If you have already created some management components you will probably skip to the section you are interested in.

===Manage an Apache-Tomcat server instance===

[[#TomcatServer|Define a TomcatServer to manage an Apache-Tomcat server]].  The TomcatServer type manages a single Apache-Tomcat server installation.

The Apache-Tomcat server can be managed in two modes:

# ''Single web-application mode''
#* In this mode, simply [[#Deploy WAR packages to an Apache-Tomcat server|deploy a war to the TomcatServer object]]
# ''Multiple web-application mode''
#* In this mode, [[#Manage multiple web application contexts|deploy a war to each TomcatContext, and each TomcatContext and the TomcatServer to a TomcatSite object]] (see next section.)

===Deploy WAR packages to an Apache-Tomcat server===

After defining and uploading a [[#war|war]] object (see [[#Upload a war|below]]), add the war as a child-dependency of the [[#TomcatServer|TomcatServer]] object.

===Manage multiple web application contexts===

[[#TomcatContext|Use the TomcatContext type to define multiple web application contexts]]. Each TomcatContext should have the same ''deployment-basedir'' property as the [[#TomcatServer|TomcatServer]], and should have a single [[#war|war]] child dependency. 

[[#TomcatSite|Use the TomcatSite Type to manage multiple contexts for a single server]]. The TomcatSite Type is a Site subtype, and it dispatches commands to all of the TomcatContext/TomcatServers attached to it.  It serves as the control point of the TomcatServer when doing multi-application management.

===Upload Packages===

====Upload the TomcatZip====

First you should [[#TomcatZip|define a TomcatZip Object, and upload the package definition]].  The TomcatZip package object holds the Apache-Tomcat server software in a zip file, and is used by [[#TomcatServer|TomcatServer]].

====Upload a war====

Next you should [[#war|define a war for use by TomcatServer, or TomcatContext]]. The war package object can be deployed to either [[#TomcatServer|TomcatServer]] in single-application mode, or to a [[#TomcatContext|TomcatContext]] in multi-application mode.

If you want to [[#Configure a Builder|build a war package using a Builder]], continue to the next section.
 
===Build war packages to deploy to the server===

Any Builder can be used to produce a [[#war|war]] package object.  See the [[Use Builder]] Document for the generic instructions for doing software Builds using the Builder type.  

Specifically if your build process produces a war file, you should configure your Builder with the following [[Use_Builder#Define_the_import_info|Import Attributes]]:

* BuilderPackageType: ''war''
* BuilderPackageExtension: ''war''
* BuilderPackageInstallroot: ''${resource.attribute.catalinaBase}/webapps''

However, when using the multiple-context method of configuring your Apache-Tomcat server, you should instead use this installroot.  See the [[#TomcatContext|TomcatContext usage for more info]]:

* BuilderPackageInstallroot: ''${resource.attribute.catalinaBase}/myapps''

More information about Builder Settings are here: [[Builder Settings and Attributes]].

====Build software with Ant that depends on Apache-Tomcat====

[[#TomcatAntBuilder|Use a TomcatAntBuilder to use Ant to build a war]].  This will allow your Ant-based build script to use the Tomcat dependency to produce a [[#war|war]].

===Manage multiple Apache-Tomcat servers===

[[#TomcatSite|Define a TomcatSite to manage multiple Apache-Tomcat servers as a group]].  This Site subtype dispatches management commands to its children.  You will configure the TomcatSite to have each  TomcatContext and the TomcatServer as child dependencies.

===Generate Configuration===

Configuration of a TomcatServer is handled by the Docs-Generate command, which uses the Setting resources attached to the TomcatServer to expand templates for the specific Apache-Tomcat software release that is being used.  Refer to the [[#Settings|Settings]] for specific configuration values.
 
Additional configuration of TomcatServer can be done in two ways:

# Define Document Transforms for the TomcatServer object: see [[Generating Configuration Files]]
# Define [[#Settings|Settings]] of type TomcatProperty and TomcatPropertyFile

Each TomcatContext object also knows how to generate a &quot;context.xml&quot; file for itself based on the war file that is assigned to it.

====Integrate Databases====

Database Datasource information can be generated for the web applications, by using the GenerateDefaultTomcatContext Setting type with a value of &quot;true&quot;, and attaching an object of type [[Rdb]] to the TomcatServer. (6.x release only).

===Deployment===

Deployment is done by the standard &lt;code&gt;Deploy&lt;/code&gt; command.

To deploy a TomcatServer in ''single-application mode'':

''execute the Deploy command for the TomcatServer:''

&lt;pre&gt;
ctl -p PROJECT -t TomcatServer -r myserver -c Deploy
&lt;/pre&gt;

To deploy a TomcatSite in ''multiple-applicatin mode'':

''execute the Deploy command for the TomcatSite:''

&lt;pre&gt;
ctl -p PROJECT -t TomcatSite -r myserver -c Deploy
&lt;/pre&gt;

To deploy the entire Site for multiple servers:

''execute the Deploy command for the Site:''

&lt;pre&gt;
ctl -p PROJECT -t Site -r mysite -c Deploy
&lt;/pre&gt;

==Types==

The Types below from the Tomcat Library (and some from the [[Core Type Guide|Core Library]]) are designed to compose in the fashion described in the [[#Overview|Overview]].  When using these types, it is useful to reference the [[#Usage|Usage]] section.

===TomcatServer===

''Description'': Apache Tomcat server deployment.

* {{Elements Type Reference|TomcatServer}}

====Sample Definition====

This sample file shows a ''single-application mode'' definition.

* A single TomcatServer is used, with a TomcatZip to deploy the Apache-Tomcat software
* A JavaBin package is defined to deploy a Linux Java platform
* A war is defined to deploy a web application
* Settings for the TomcatServer are defined to configure port values, and startup behavior
* Settings for the TomcatServer are defined to generate a custom property file for the web application

* [http://moduleforge.svn.sourceforge.net/viewvc/moduleforge/controltier/branches/controltier-3-4-support/elements/modules/TomcatServer/objects/sample.xml?content-type=text%2Fplain TomcatServer/objects/sample.xml] - Single-application mode sample

====Properties====

''basedir'': This is the path that will be where the Apache Tomcat zip will be installed, and must correspond to the [[#TomcatZip|TomcatZip]] &quot;package-base&quot; property.  This is the &quot;CATALINA_BASE&quot; path.

Examples:

* ''${resource.instance.dir}/apache-tomcat-4.1.39''
** This value installs it in the specific deployment directory (the ${resource.instance.dir}) for the TomcatServer object, and will be within the Node's $CTL_BASE directory.
* ''/opt/server/apache-tomcat-4.1.39''
** This value is absolute and will thus be the same on all Nodes that the TomcatServer is on.

''installroot'': This is the &quot;CATALINA_HOME&quot; path.  It is often set to the same value as the ''basedir'', but may be different.

====Settings====

See the {{Elements Type Reference|TomcatServer}} for the complete list of Settings available for TomcatServer.

====Packages====

* [[#TomcatZip|TomcatZip]] can be added as a child dependency to automatically deploy the Apache-Tomcat software.  If it is not used, then a TomcatRelease setting should be configured for the TomcatServer to specify the correct release of the pre-installed Apache-Tomcat software that is being managed.
* [[#war|war]] may be added when in ''single-application mode''.
* {{Elements Type Reference|ConfigZip|ConfigZip}} can be added as a way of managing a set of hardcoded configuration documents if necessary.
* {{Elements Type Reference|JavaBin|JavaBin}} can be added to allow automatic deployment of a unix self extracting Sun Java installer.
* {{Elements Type Reference|PlatformJar|PlatformJar}} allows deployment of external Jar dependencies to the server. Set the ''installroot'' of the PlatformJar

===TomcatZip===

''Description'': Zip archive of Apache Tomcat

* {{Elements Type Reference|TomcatZip}}

Since the TomcatServer implementation supports multiple releases, it is important to be precise about which Tomcat release version is in use. The TomcatZip package type represents the zip package containing the Apache Tomcat software, and we must define a package for the appropriate Apache Tomcat release that we want to use.

Supported Releases: ''4.1'', ''5.x'', ''6.x''.  The &quot;release&quot; property must be one of these values, and must correspond to the actual version number, e.g. version &quot;4.1.39&quot; is release &quot;4.1&quot;, and version &quot;5.5.26&quot; is release &quot;5.x&quot;, etc.

When creating your definition, make note of the specific ''version'' (e.g. &quot;4.1.39&quot;), and the corresponding ''release'' (e.g. &quot;4.1&quot;).

Define the project.xml for the TomcatZip package.  It is the convention to name the project file exactly as the package file, with an added &quot;.xml&quot; extension. For the &quot;apache-tomcat-4.1.39.zip&quot; file, this project file would be named &quot;apache-tomcat-4.1.39.zip.xml&quot;.

====Sample Definition====

Sample definitions of the three major release packages are available in this file:

* [http://moduleforge.svn.sourceforge.net/viewvc/moduleforge/controltier/branches/controltier-3-4-support/elements/modules/TomcatZip/objects/sample.xml?content-type=text%2Fplain TomcatZip/objects/sample.xml]

:'''Note''': The &quot;base&quot; property must match the base name of the &quot;installroot&quot; property.  I.e. if the package base is &quot;apache-tomcat-4.1&quot;, then the installroot should be something like: &quot;/path/to/apache-tomcat-4.1&quot;.  By convention, the installroot is set to the ''catalinaHome'' attribute, which is the ''basedir'' property of a TomcatServer object.  Just note that this basedir must be named according to the ''base'' property of the TomcatZip.

* See [[Using Libraries#Uploading packages|Uploading packages]] to upload the package.

===TomcatContext===

''Description'': Tomcat web application service (extended to support a custom context and an &quot;external&quot; property file).

* {{Elements Type Reference|TomcatContext}}

A TomcatContext object describes an Apache Tomcat &quot;Context Container&quot;, that is, a web application (deployed as a war archive) and its associated &quot;context.xml&quot; file.

* See the Apache Tomcat documentation here: [http://tomcat.apache.org/tomcat-6.0-doc/config/context.html]

Support for deploying multiple web applications to a single TomcatServer is implemented by the TomcatContext and TomcatSite modules.

Each TomcatContext object supports deployment of a single web application, but sets of them can be combined and associated with a single TomcatServer instance via a TomcatSite object; thus a set of one TomcatSite, a TomcatServer and one or more TomcatContext objects (all deployed to the same Node(s)) models multi-application deployment.

Here's how to configure and deploy an application to a single context in this manner:

# Define a TomcatServer object ([[#TomcatServer|shown above]]), or choose an existing one to work with.
# Define a TomcatContext object and a TomcatContextFile setting. 
# Define a war deployment to the TomcatContext.

====Sample Definition====

This sample file shows how to use TomcatContext in a ''multiple-application mode'' scenario:

* Two TomcatContext Objects, named &quot;web&quot; and &quot;backoffice&quot;, model two web applications
* A single TomcatServer is defined to auto-deploy the Apache-Tomcat software with a TomcatZip, and the Java platform with a JavaBin
* A single TomcatSite object manages the TomcatServer and TomcatContexts
* A single Site object provides centralized management of the TomcatSite
* Two Updater objects for independently updating the TomcatContext objects

The application level objects (TomcatServer, TomcatContext, TomcatSite) are deployed on one node named &quot;dev01.example.com&quot;.  The management level objects (Site, Updater) are deployed on a central ControlTier management node &quot;ctier.example.com&quot;.

* [http://moduleforge.svn.sourceforge.net/viewvc/moduleforge/controltier/branches/controltier-3-4-support/elements/modules/TomcatContext/objects/sample.xml?content-type=text%2Fplain TomcatContext/objects/sample.xml] - Multiple-application mode sample

====Properties====

''basedir'': Set the &quot;Basedir&quot; of the TomcatContext to be the same as that of the TomcatServer, i.e. the CATALINA_HOME path ending with a directory with the same name as the TomcatZip's package-base.  (See the [[#Properties|TomcatServer - Properties]] section above.)

:Since the TomcatServer exports its deployment-basedir property as the ''catalinaHome'' attribute, you can set the basedir for the TomcatContext to &quot;${resource.attribute.catalinaHome}&quot; to correspond exactly to the value set for the TomcatServer.

''startup-rank'': The &quot;startup rank&quot; Property of the TomcatContext must be greater than that of its associated TomcatServer to ensure deployment proceeds in the correct order.

====Settings====

See the {{Elements Type Reference|TomcatContext}} for the list of all Setting types available.

Notes about Settings:

* The {{Elements Type Reference|TomcatContext}} name follows defined rules (http://tomcat.apache.org/tomcat-6.0-doc/config/context.html). In this case calling the context file &quot;myapp.xml&quot; and using a war file with a package base of &quot;myapp&quot; (matching the context file name) results in no URL mapping. 
* The {{Elements Type Reference|TomcatContext}} setting allows you to automatically restart the TomcatServer object when a TomcatContext is redeployed.  You must attach the TomcatServer as a child dependency of the TomcatContext, and set this setting to a value of &quot;container&quot;.
* The {{Elements Type Reference|TomcatContext}} boolean setting allows you to use a PackedWar package (which is not extracted at deploy time), and have the context for the web-app be implicitly defined by the war.

====Notes====

* The Tomcat Library types follow the Apache project's convention of unpacking war files and enabling autoDeploy per this excerpt from server.xml:
&lt;pre&gt;
   &lt;Host name=&quot;localhost&quot;  appBase=&quot;webapps&quot;
            unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;
            xmlValidation=&quot;false&quot; xmlNamespaceAware=&quot;false&quot;&gt;
&lt;/pre&gt;

* In order to avoid unwanted interactions, the convention is to specify context docBases outside of this host appBase. The war package objects used with TomcatContext deployments should have package install roots that are not &quot;$CATALINA_BASE/webapps&quot;. A convention is to create a peer directory such as &quot;${resource.attribute.catalinaBase}/myapps&quot; in order to avoid warning messages like this:

&lt;pre&gt;
WARNING: A docBase /home/anthony/ctier/demo/elements/helloworld/apache-tomcat-6.0.14/webapps/myapp inside the host appBase has been specified, and will be ignored
&lt;/pre&gt;

===TomcatSite===

''Description'': Centralized management for a set of Tomcat based application server instances and contexts.

* {{Elements Type Reference|TomcatSite}}

Define a TomcatSite object that ties the TomcatServer and TomcatContext objects into a single manageable component, ensuring all objects are deployed to the same node (or set of nodes). Note that TomcatSite has a dispatchExecutionStrategy strategy of &quot;localdispatch&quot; limiting it to operating on co-deployed resources.  If you want to manage Apache-Tomcat software deployed on multiple Nodes as a single unit, use the [[#Site|Site]] type.

====Sample Definition====

This sample shows a simple TomcatSite child dependencies of a single TomcatServer and a TomcatContext.

* [http://moduleforge.svn.sourceforge.net/viewvc/moduleforge/controltier/branches/controltier-3-4-support/elements/modules/TomcatSite/objects/sample.xml?content-type=text%2Fplain TomcatSite/objects/sample.xml]

====Deployment====

The TomcatSite, TomcatServer and TomcatContexts should all be assigned to the specific Node(s) that they will be running on.

To manage more than one TomcatServer on different Nodes, use the [[#Site|Site]] base type, which may be deployed on a central management server.

===TomcatAntBuilder===
''Description'': Ant builder with specialized defaults for Tomcat applications

* {{Elements Type Reference|TomcatAntBuilder}}

This AntBuilder subtype provides some customization to facilitate building &quot;war&quot; packages using Ant that depend on the Apache-Tomcat software.

* ''See the [[Core Type Guide#Builder|Builder wiki docs]] for more information about Builders.''

====Sample Definition====

This sample TomcatAntBuilder definition shows a basic Builder definition, using a TomcatZip and AntZip dependencies to provide the Ant building ability and Apache-Tomcat dependency to the build.

* [http://moduleforge.svn.sourceforge.net/viewvc/moduleforge/controltier/branches/controltier-3-4-support/elements/modules/TomcatAntBuilder/objects/sample.xml?content-type=text%2Fplain TomcatAntBuilder/objects/sample.xml]

===Site===
''Description'': An interface to a set of related application services.

* {{Core Type Reference|Site}}

You can define a Site object, and add the TomcatSite objects as child dependencies.  You can then use management commands on the Site to control them all.

* ''See the [[Core Type Guide#Site|Site wiki docs]] for information about using Sites.''

====Sample Definition====

This is a simple Site sample definition, aggregating two Service resources for management.

* [http://moduleforge.svn.sourceforge.net/viewvc/moduleforge/controltier/branches/controltier-3-4-support/core/modules/Site/objects/sample.xml?content-type=text%2Fplain Site/objects/sample.xml]

===war===

''Description'': A war package

* {{Core Type Reference|war}}

If your war deployment is not produced by the Builder, you should define it via another project.xml file.

====Sample Definition====

This is a basic war package object definition, for a war named &quot;myapp-1.0.war&quot;.

* [http://moduleforge.svn.sourceforge.net/viewvc/moduleforge/controltier/branches/controltier-3-4-support/core/modules/war/objects/sample.xml?content-type=text%2Fplain war/objects/sample.xml]

* See [[Using Libraries#Uploading packages|Uploading packages]] to upload the package.

==Related Libraries==

* [[JBoss Library]]
* [[Apache Library]]
* [[Maven Library]]
* [[Ant Library]]

[[Category:Libraries]]</text>
    </revision>
  </page>
  <page>
    <title>TomcatServer</title>
    <id>1461</id>
    <revision>
      <id>14169</id>
      <timestamp>2010-11-10T16:02:32Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;ctl-depot&quot; to &quot;ctl-project&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Service&lt;/categorytree&gt;
[[File:Icon-ServiceObject.png]]
{{Version Required|3.4.9}}

This module automates the configuration and deployment of an  [http://tomcat.apache.org Apache Tomcat] JSP/Servlet application server instance.

The module is part of the [[Tomcat_Library|Tomcat Library]] and  works in tandem with the [[TomcatContext]] and [[Tomcat]] modules to implement a full multi-context configuration, but can also be used on its own to model a simple default or single context use case.

__TOC__

== Limitations ==

Note that while the module contains templates for the 4.x, 5.x and 6.x Tomcat versions some of its functionality is only implemented for one release or another. For example, data source support is only available in the 6.x templates.

Note that while, in general, JNDI data sources can be added with various scopes across the set of Tomcat [http://tomcat.apache.org/tomcat-6.0-doc/config/context.html contexts], the TomcatServer module currently only supports setting datasources in the $CATALINA_BASE/conf/[enginename]/[hostname]/context.xml.default file (i.e. the datasource will be loaded by all webapps of that host).

== Examples ==

=== Configuring a JNDI datasource ===

This example is based on the [http://tomcat.apache.org/tomcat-6.0-doc/jndi-datasource-examples-howto.html JNDI datasource HOW-TO] which is part of the Apache Tomcat documentation.

The basic idea is to configure a standalone Tomcat Server instance to connect to the system's MySQL installation as an example of the general purpose datasource generation built into the TomcatServer module's &quot;6.x&quot; templates and the [http://controltier.sourceforge.net/docs/latest/elements/reference/user/TomcatServer/commands/Docs-Generate.html Docs-Generate] command.

{{caution|This example has only been verified on a Linux system running ControlTier 3.4.9 and requires the use of some version of Tomcat 6.0}}

==== Prepare a MySQL database ====

Naturally, you &lt;i&gt;could&lt;/i&gt; use any MySQL instance on your network (or even one setup on the local system using the ControlTier [http://controltier.sourceforge.net/docs/latest/elements/reference/developer/type_MysqlRdb.html MysqlRdb] module).  Whichever database instance you choose, you'll need a hostname, port and the username and password of an administrative user.

* Make sure that MySQL is installed and running and that you can connect to it using an administrative account:

&lt;pre&gt;
[root@centos54 ~]# service mysqld status
mysqld (pid 13714) is running...
[root@centos54 ~]# mysql -hlocalhost -p8306 -uroot -ppassword
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 13
Server version: 5.0.77 Source distribution

Type 'help;' or '\h' for help. Type '\c' to clear the buffer.

mysql&gt; 
&lt;/pre&gt;

* Follow the &quot;MySQL configuration&quot; setup in the &quot;MySQL DBCP Example&quot; of the  [http://tomcat.apache.org/tomcat-6.0-doc/jndi-datasource-examples-howto.html JNDI datasource HOW-TO].

* Make sure the &quot;javauser&quot; can connect to the database and select the test data:

&lt;pre&gt;
[anthony@centos54 ~]$ mysql -hlocalhost -p8306 -ujavauser -pjavadude -Djavatest
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A

Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 17
Server version: 5.0.77 Source distribution

Type 'help;' or '\h' for help. Type '\c' to clear the buffer.

mysql&gt; select * from testdata;
+----+-------+-------+
| id | foo   | bar   |
+----+-------+-------+
|  1 | hello | 12345 | 
+----+-------+-------+
1 row in set (0.00 sec)

mysql&gt; quit
Bye
&lt;/pre&gt;

==== Download or prepare required packages ====

* [http://tomcat.apache.org/download-60.cgi Download] the latest Tomcat 6.0 core Zip binary distribution. 
* [http://dev.mysql.com/downloads/connector/j/5.1.html Download] the latest MySQL Connector/J source and binaries Zip file, and extract the pre-built JDBC driver Jar:

&lt;pre&gt;
[anthony@centos54 ~]$ unzip /tmp/mysql-connector-java-5.1.10.zip  mysql-connector-java-5.1.10/mysql-connector-java-5.1.10-bin.jar
Archive:  /tmp/mysql-connector-java-5.1.10.zip
  inflating: mysql-connector-java-5.1.10/mysql-connector-java-5.1.10-bin.jar  
[anthony@centos54 ~]$ ls -l mysql-connector-java-5.1.10/mysql-connector-java-5.1.10-bin.jar
-rw-r--r-- 1 anthony anthony 724225 Sep 22 16:01 mysql-connector-java-5.1.10/mysql-connector-java-5.1.10-bin.jar
&lt;/pre&gt;

* Follow the instructions in steps 3 &amp; 4 of the MySQL DBCP Example section of the [http://tomcat.apache.org/tomcat-6.0-doc/jndi-datasource-examples-howto.html JNDI datasource HOW-TO] to prepare the example application's web archive package (basically done by copying the provided web.xml and test.jsp files into the correct relative locations and adding a couple of jars pulled from the Tomcat distribution itself):

&lt;pre&gt;
[anthony@centos54 DBTest]$ cp ~/apache-tomcat-6.0.20/webapps/examples/WEB-INF/lib/jstl.jar WEB-INF/lib
[anthony@centos54 DBTest]$ cp ~/apache-tomcat-6.0.20/webapps/examples/WEB-INF/lib/standard.jar WEB-INF/lib
[anthony@centos54 DBTest]$ jar cf ../DBTest.war .
[anthony@centos54 DBTest]$ jar tvf ../DBTest.war 
     0 Sat Nov 14 14:13:16 PST 2009 META-INF/
    68 Sat Nov 14 14:13:16 PST 2009 META-INF/MANIFEST.MF
     0 Sat Nov 14 07:33:08 PST 2009 WEB-INF/
   500 Sat Nov 14 07:32:32 PST 2009 WEB-INF/web.xml
     0 Sat Nov 14 07:34:44 PST 2009 WEB-INF/lib/
 16905 Sat Nov 14 14:11:36 PST 2009 WEB-INF/lib/jstl.jar
293750 Sat Nov 14 14:11:46 PST 2009 WEB-INF/lib/standard.jar
   432 Sat Nov 14 07:32:54 PST 2009 test.jsp
&lt;/pre&gt;

==== Create the ControlTier objects ====

The sample object XML for this example is included with the TomcatServer module in the Elements library on [http://moduleforge.svn.sourceforge.net/viewvc/moduleforge Moduleforge], and is also include with the copy of the module distributed with ControlTier.

* Checkout a copy to your local system (e.g. here's the [http://moduleforge.svn.sourceforge.net/viewvc/moduleforge/controltier/branches/controltier-3-4-support/elements/modules/TomcatServer/objects/sample60.xml?view=markup version on the 3.4 support branch]), or download a copy from the TomcatServer's type page's file tab in your Workbench project:

&lt;pre&gt;
[anthony@centos54 modules]$ ls -l TomcatServer/objects/sample60.xml 
-rw-r--r-- 1 anthony anthony 6232 Nov 14 14:25 TomcatServer/objects/sample60.xml
&lt;/pre&gt;

* Load the resources into your Workbench project as follows:

&lt;pre&gt;
[anthony@centos54 objects]$ ctl -p Development -m ProjectBuilder -c load-resources -- -filename sample60.xml 
Loading &quot;/mnt/hgfs/anthony/src/controltier-3-4-support/elements/modules/TomcatServer/objects/sample60.xml&quot; ...
1 file(s) have been successfully validated.
Processing /mnt/hgfs/anthony/src/controltier-3-4-support/elements/modules/TomcatServer/objects/sample60.xml to /opt/ctier/ctl/var/tmp/projectxml-2060112167.xml
Loading stylesheet /opt/ctier/ctl/projects/Development/modules/ProjectBuilder/lib/load-resources/projectxml/project.xsl
Mapping XML to properties ...
Collecting object attributes ...
Batching object attribute updates ...
Batching resource and referrer updates ...
Executing batch update ...
&lt;/pre&gt;

* Use Workbench to add the &quot;sample60&quot; TomcatServer deployment to one or more nodes of your project:

[[Image:TomcatServerSample60Add.jpg|800px]]

* Use Workbench to upload each of the three required packages to the repository. e.g:

[[Image:TomcatServerSample60Upload.jpg|800px]]

====Deploy Tomcat====

* Update your node's Ctl depot to install the &quot;sample60&quot; TomcatServer object:

&lt;pre&gt;
[anthony@centos54 tmp]$ ctl-project -p Development -a install 
&quot;Install&quot; command running for resource: core-3-4-services[ProjectBuilder]
&quot;Install&quot; command running for resource: sampleWwwRpmBuilder[RpmBuilder]
&quot;Install&quot; command running for resource: elements-3-4-services[ProjectBuilder]
&quot;Install&quot; command running for resource: sampleJBoss510GA[JBossServer]
&quot;Install&quot; command running for resource: sampleRpmBuilder[RpmBuilder]
&quot;Install&quot; command running for resource: atg-3-4-services[ProjectBuilder]
&quot;Install&quot; command running for resource: sample60[TomcatServer]
&quot;Install&quot; command running for resource: elements-3-4-support[ProjectBuilder]
&quot;Install&quot; command running for resource: atg-3-4-support[ProjectBuilder]
&quot;Install&quot; command running for resource: core-3-4-support[ProjectBuilder]
&lt;/pre&gt;

* Run the deploy command to install the packages, configure Tomcat (including the generated datasource) and start the server:

&lt;pre&gt;
[anthony@centos54 ~]$ ctl -p Development -t TomcatServer -r sample60 -c Deploy 
begin workflow command (1/4) -&gt; &quot;Stop &quot; ...
begin workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot; ...
assertServiceIsDown: /home/anthony/apache-tomcat-6.0.20/temp/catalina.pid not found. sample60 TomcatServer on centos54 is down.
end workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot;
end workflow command (1/4) -&gt; &quot;Stop &quot;
begin workflow command (2/4) -&gt; &quot;Packages-Install &quot; ...
Start: &quot;Install the configured package dependencies for the deployment.&quot; Beginning installation for packages:   apache-tomcat-6.0.20.zip[TomcatZip],  DBTest.war[war],  mysql-connector-java-5.1.10-bin.jar[PlatformJar] ...
.
.
.
Running handler command -&gt; &quot;startService &quot;
startService: sample60 TomcatServer on centos54 started.
end workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot;
end workflow command (4/4) -&gt; &quot;Start &quot;
&lt;/pre&gt;

* Navigate to the sample application:

[[Image:TomcatServerSample60Test.png|800px]]

* Check the generated datasource:

&lt;pre&gt;
[anthony@centos54 ~]$ cat apache-tomcat-6.0.20/conf/Catalina/localhost/context.xml.default 
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;Context&gt;
   

   

   &lt;Resource name=&quot;jdbc/TestDB&quot;
              auth=&quot;Container&quot;
              type=&quot;javax.sql.DataSource&quot;
              driverClassName=&quot;com.mysql.jdbc.Driver&quot;
              url=&quot;jdbc:mysql://localhost:3306/javatest?autoReconnect=true&quot;
              username=&quot;javauser&quot;
              password=&quot;javadude&quot;
              maxActive=&quot;100&quot; 
              maxIdle=&quot;30&quot;
              maxWait=&quot;10000&quot;/&gt;

   


&lt;/Context&gt;
&lt;/pre&gt;

{{Manual/navbox}}

[[Category:Service]]
[[Category:Elements]]</text>
    </revision>
  </page>
  <page>
    <title>Tomcat Library</title>
    <id>1852</id>
    <redirect />
    <revision>
      <id>12331</id>
      <timestamp>2010-01-22T15:03:46Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <comment>moved [[Tomcat Library]] to [[Tomcat]]:&amp;#32;no page named &quot;Tomcat&quot;, &quot;Library&quot; redundant</comment>
      <text xml:space="preserve">#REDIRECT [[Tomcat]]</text>
    </revision>
  </page>
  <page>
    <title>Training</title>
    <id>994</id>
    <revision>
      <id>12105</id>
      <timestamp>2009-12-20T17:35:24Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;noinclude&gt;
&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Help&lt;/categorytree&gt;
&lt;/noinclude&gt;
''Looking for instructor led training? Have one of the ControlTier engineers provide hands on training. Send an email to [mailto:training@dtosolutions.com?Subject=ControlTier%20Training training@dtosolutions.com]'' or go to the [http://www.dtosolutions.com/controltier/ ControlTier Training and Support] page. [http://www.dtosolutions.com DTO Solutions] is the primary provider of ControlTier training and support services. 

==Training Programs==
{{:Training Programs}}

&lt;noinclude&gt;
{{Help/navbox}}
[[Category:Help]]
&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Training Course Template</title>
    <id>424</id>
    <redirect />
    <revision>
      <id>2636</id>
      <timestamp>2009-02-06T18:16:14Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>[[Training Course Template]] moved to [[Learning Course Template]]</comment>
      <text xml:space="preserve">#REDIRECT [[Learning Course Template]]</text>
    </revision>
  </page>
  <page>
    <title>Training Programs</title>
    <id>999</id>
    <revision>
      <id>12392</id>
      <timestamp>2010-03-13T01:35:17Z</timestamp>
      <contributor>
        <username>Damonedwards</username>
        <id>7</id>
      </contributor>
      <comment>changed 1/2 day training to 3 hours</comment>
      <text xml:space="preserve">We have several standard training packages on offer that will help your team become self sufficient and productive ControlTier users. We can also customize a training program covering the [[Training Topics]] to suit your needs. 

; '''[[Half Day Training]]''' 
: A three hour course that orients new users to the ControlTier project and platform. A quick way to get started as a ControlTier user!
; '''[[One Week Foundation Training]]''' 
: A five day course covering, introductory concepts, installation, project setup, package management, service management and continuous deployment.
; '''[[Architect Training]]''' 
: A three day course covering automation essentials, extending the ControlTier types, and workflow design.

[[Category:Training Programs]]</text>
    </revision>
  </page>
  <page>
    <title>Training Topics</title>
    <id>420</id>
    <revision>
      <id>16669</id>
      <timestamp>2012-02-27T16:47:46Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Setting sort key</comment>
      <text xml:space="preserve">''Looking for instructor led training? Have one of the ControlTier engineers provide hands on [[Training Programs]]. Send an email to [mailto:info@controltier.com?Subject=ControlTier%20Training info@controltier.com] or go to the [http://www.controltier.com/services/training.htm ControlTier Training] page.''

==Role Based Learning==
We suggest tailoring ControlTier learning around each user's role:

*[[#System Administrator|System Administrator]] - maintains the ControlTier system. Installs CTL, Workbench, Jetty, upgrades, connects to LDAP, maintains repository, purging old stuff, scaling. Registering Nodes. Managing user roles.
** ctl-exec scripter:  scripts system actions across nodes using built-in tools/coreutils = regular scripter
* [[#Package Manager|Package Manager]] - interface the build and manage/populate the repository (build/release engineer, SCM guy)
* [[#Service Manager|Service Manager]] - end-user, doesn't create automation, needs to manage configurations to support deployment.  project.xml for defining new deployments.  manage objects. invoke deployments.  &quot;Application Administrator&quot;. 
* [[#Architect| Architect]] - For management integration (Integrator) System Engineer who knows how to script the deployment process. type model/code. &quot;Architect&quot;
** ctl scripter (&quot;learn ctl to create workflows&quot;) = workflow developer

==Topics==
The following topics are organized by user roles (as defined in the previous section):

===General Foundation (the basics for all roles)===
The following course, describes:
* Fundamentals
** Roles
** Responsibilities 
** Activities
* User interfaces and Orientation
* Architecture Concepts and Design Principles
* Dukes Bank Demo
See: [[Course - ControlTier Intro|Course - ControlTier Introduction]]

===System Administrator===

====System Administration: Foundation====
* ControlTier Client and Server 
* SSH configuration
* ControlTier server startup/shutdown
* Installing multiple clients in a multi-Node environment
* Logging and reporting
* Distributed administration

See: [[Course - System Administration: Part 1]]

====System Administration: Advanced====
* Bulk node installation
* Setting up nodes for different users
* Distributed administration
* Security administration
* LDAP integration
* Access control lists
* Project data persistent store management
* High availability and large scale configuration

====System Administration: Windows====

* Cygwin Installation and Setup
* SSH Server configuration
* Enabling SSH for the ControlTier user
* Environment setup

===Package Manager: Foundation===
* Repository Overview
** Uses
** WebDAV integration
** CMDB integration
* Workbench Package Manager 
* The Package and Builder Types
** Overview and life cycle commands
* Importing Packages
** WIth and without automatic registration
** Use of XML metadata definition file
* Using a Builder
** Defining and setting up
** Querying the repository
** The Build workflow
* Creating Packages from scratch
* Testing the Install
* Other Builder examples
* Maintenance

See: [[Course - Package Manager]]

===Service Manager===

====Service Manager: Foundation ====
* Introduction to Services and management interfaces
* The Deploy cycle workflow
* The Update cycle workflow
* The Startup and Shutdown cycle workflow
* Running commands from the shell via &quot;ctl&quot;
* Running Jobs and Scheduling Jobs via &quot;Jobcenter&quot;
* Controlling individual Service tiers
* Controlling logical sets of Services via Sites and Updaters

See: [[Course - Service Life cycle Management]]

====Service Manager: Advanced====
*Creating projects to manage new business application services
**Project introduction: Scoping and content, creation and setup
**Using ProjectBuilder and &quot;[[project.xml]]&quot; templates to generate application models. 
*Exploring the ControlTier solution library
* Service management models (eg, [[Site Coordination Models]])
*Archiving and backup of project data
* using ProjectBuilder to query and create Jobs
* Using attributes to drive Change-Dependencies, and dispatching
* Using Updaters that are customized for each kind of update
* Implementing the Configure workflow [[Generating_Configuration_Files]]

====Reportcenter ====
* Introduction to the ReportCenter service and architecture
* Customizing report message and content
* Create your own custom report templates with BIRT designer
* Stage report templates to ReportCenter for broad use

=== Architect ===

==== Automation Development Foundation====
* Concepts and Architecture
** Solution Library
** Projects: Project model, Types, Objects, Modules, Depots
* CTL Framework under the hood
** Command dispatching mechanism
* Introducing ProjectBuilder for module development
** ProjectBuilder Setup
** Creating new types
** Using the type.xml
** Command definition
** Building the module 
** Reference context data
* Define an object for context data
** Using project.xml
* Object scoped command execution

See: [[Course - Automation Development Essentials]]

====Architect: Part 1====

''Prerequisite: [[Course - Automation Development Essentials|Automation Development Essentials]]''

Developing Commands and Workflows

* Developing Basic Commands
** Basic implementations using scripting languages: shell, ant, bsf
** The command life cycle
** Command options
*** Implement String, Boolean
*** Default options with an attribute and literals: Option defaulting with an attribute, Option defaulting with a literal and attribute
** Using CTL and Workbench Ant Tasks

* Developing Workflows
** Sequential command structure and model: Learn command sequences, thread count, error and success handlers
** First workflow
** Error-handling design
** Reporting and notification
** Using workflows for idempotent actions

See: [[Course - Architect: Commands and Workflows]]

====Architect: Part 2====
Dispatch commands and solution libraries
* Developing Dispatch commands
**Dispatch command structure and model: Learn how to dispatch commands over a set of objects
**Dispatch command to dependencies
**Dispatch command and macro
**Graph process flow
** Error-handling design
** Reporting and notification

* Solution library development
** Distribution models
** Creating libraries with ProjectBuilder
** Creating a documentation site
** Packaging and archiving object data



== Course Documentation structure ==

See the [[Learning Course Template]]

* &quot;What you will learn&quot;
** ''Summary of course goal''
* &quot;Learn To:&quot; 
** ''Bullet list of items''
* Audience
** ''Who will benefit from this course''
* Prereqs
** required
** suggested
* Course Objectives
** ''Things that will be accomplished during the course''
* Course Topics
** ''Detail of each topic and the points it will cover''
* Suggested Next Courses

[[Category:Training Topics|100]]</text>
    </revision>
  </page>
  <page>
    <title>TransformCreate Task Reference</title>
    <id>175</id>
    <revision>
      <id>13487</id>
      <timestamp>2010-11-10T01:42:07Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;entity.&quot; to &quot;resource.&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Tasks&lt;/categorytree&gt;

=Description=
      &lt;p&gt;
	TransformCreate defines a Transform in the model. Typically
	this task is preceded with a call to 
	[[TemplateCreate Task Reference|template-create]] task to
	upload the template to the DAV share.
      &lt;/p&gt;
   
=Parameters=

      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;depot&lt;/td&gt;&lt;td&gt;The project to update&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;resultproperty&lt;/td&gt;&lt;td&gt;Property to set with
	  success/fail value&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;comment&lt;/td&gt;&lt;td&gt;Text describing purpose of update&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;passfile&lt;/td&gt;&lt;td&gt;File containing authentication info to
	  server. If passfile is not specified, information from the
	    [[framework.properties]]
	  file is used instead.&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;

      &lt;/table&gt;
   
=Parameters specified as nested elements=

      &lt;p&gt;&lt;strong&gt;template&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
	A [[Template Type Reference|template]].
      &lt;/p&gt;
      &lt;p&gt;&lt;strong&gt;context&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
	A resource [[Context Type Reference|context]].
      &lt;/p&gt;
      &lt;p&gt;&lt;strong&gt;document&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
	A [[Document Type Reference|document]].
      &lt;/p&gt;

=Examples=

     &lt;p&gt;
       Create the transform definition.
      &lt;/p&gt;
      &lt;pre&gt;
       &amp;lt;transform-create serverurl=&quot;${viewdoc.server}&quot; depot=&quot;${resource.depot}&quot;
                resultproperty=&quot;rs&quot;
                comment=&quot;something re this update&quot;&amp;gt;
                &amp;lt;context direction=&quot;internal&quot; proximity=&quot;1&quot; maprefuri=&quot;${resource.mapref-uri}&quot;/&amp;gt;
                &amp;lt;document file=&quot;haha.txt&quot; dir=&quot;/${resource.depot}/publish&quot; type=&quot;text-plain&quot;/&amp;gt;
                &amp;lt;template file=&quot;${templateFile}&quot; dir=&quot;/${resource.depot}/templates&quot; type=&quot;simple&quot;/&amp;gt;
        &amp;lt;/transform-create&amp;gt;

      &lt;/pre&gt;

&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;


[[Category:Resource model Ant Tasks]]
[[Category:Transforms]]
[[Category:Resource]]</text>
    </revision>
  </page>
  <page>
    <title>TransformDelete Task Reference</title>
    <id>1753</id>
    <revision>
      <id>13488</id>
      <timestamp>2010-11-10T01:42:09Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;entity.&quot; to &quot;resource.&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Tasks&lt;/categorytree&gt;

=Description=
      &lt;p&gt;
	TransformDelete task removes a document definition.
      &lt;/p&gt;

=Parameters=
{|border=&quot;1&quot;
!Attribute!!Description!!Required
|-
|depot||The project to update||Yes
|-
|resultproperty||Property to set with success/fail value||Yes
|-
|comment||Text describing purpose of update||Yes
|-
|passfile
|File containing authentication info to server. If passfile is not specified, information from the [[framework.properties]]  file is used instead.
|No
|-
|removeall
|If true, then all Transforms for the Object will be deleted, and a 'document' element is not required. (default is false) 
{{version|3.4.10}}
|No
|}

=Parameters specified as nested elements=

      &lt;p&gt;&lt;strong&gt;context&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
	A resource [[Context Type Reference|context]], which must specify the &quot;maprefUri&quot; attribute.
      &lt;/p&gt;
      &lt;p&gt;&lt;strong&gt;document&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
	A [[Document Type Reference|document]], which requires only &quot;file&quot; and &quot;dir&quot; attributes.  This element is not required if the &quot;removeall&quot; attribute is &quot;true&quot;.
      &lt;/p&gt;

=Examples=

Delete a transform definition.

   &lt;transform-delete depot=&quot;${resource.depot}&quot; resultproperty=&quot;rs&quot;  comment=&quot;something re this update&quot;&gt;
     &lt;context maprefuri=&quot;${resource.mapref-uri}&quot;/&gt;
     &lt;document file=&quot;haha.txt&quot; dir=&quot;/${resource.depot}/publish&quot; /&gt;
   &lt;/transform-delete&gt;

Delete all transforms for the specified context object. 

: {{version|3.4.10}}

   &lt;transform-delete depot=&quot;${resource.depot}&quot; resultproperty=&quot;rs&quot;  comment=&quot;something re this update&quot; 
         removeall=&quot;true&quot;&gt;
     &lt;context maprefuri=&quot;${resource.mapref-uri}&quot;/&gt;
   &lt;/transform-delete&gt;


&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;


[[Category:Resource model Ant Tasks]]
[[Category:Transforms]]
[[Category:Resource]]</text>
    </revision>
  </page>
  <page>
    <title>TransformGet Task Reference</title>
    <id>177</id>
    <revision>
      <id>13489</id>
      <timestamp>2010-11-10T01:42:09Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;entity.&quot; to &quot;resource.&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Tasks&lt;/categorytree&gt;

=Description=
      &lt;p&gt;
	TransformGet task retrieves the definition and content
	of a Transform and the generated file.
      &lt;/p&gt;

=Parameters=
      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;depot&lt;/td&gt;&lt;td&gt;The project to update&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;resultproperty&lt;/td&gt;&lt;td&gt;Property to set with
	  success/fail value&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;comment&lt;/td&gt;&lt;td&gt;Text describing purpose of update&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;passfile&lt;/td&gt;&lt;td&gt;File containing authentication info to
	  server. If passfile is not specified, information from the
	    [[framework.properties]]
	  file is used instead.&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;

      &lt;/table&gt;
    
=Parameters specified as nested elements=

      &lt;p&gt;&lt;strong&gt;entityreference&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
	A resource [[EntityReference Type Reference|entityreference]].
      &lt;/p&gt;
      &lt;p&gt;&lt;strong&gt;document&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
	A [[Document Type Reference|document]].
      &lt;/p&gt;

=Examples=

     &lt;p&gt;
       Get the transform definition.
      &lt;/p&gt;
      &lt;pre&gt;
        &amp;lt;transform-get serverUrl=&quot;${viewdoc.server}&quot;
                       depot=&quot;${resource.depot}&quot;
                       resultproperty=&quot;rs&quot;
                       comment=&quot;none&quot;&amp;gt;
          &amp;lt;entityreference maprefuri=&quot;${resource.mapref-uri}&quot;/&amp;gt;
          &amp;lt;document file=&quot;something.conf&quot; dir=&quot;/${resource.depot}/publish&quot; type=&quot;text-plain&quot;/&amp;gt;
        &amp;lt;/transform-get&amp;gt;
      &lt;/pre&gt;

&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;


[[Category:Resource model Ant Tasks]]
[[Category:Transforms]]
[[Category:Resource]]</text>
    </revision>
  </page>
  <page>
    <title>Transform Task Reference</title>
    <id>174</id>
    <revision>
      <id>13490</id>
      <timestamp>2010-11-10T01:44:13Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;entity.&quot; to &quot;resource.&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Tasks&lt;/categorytree&gt;

=Description=
      &lt;p&gt;

 Transform dynamically performs a transformation for some [[Resource]] in the
 model using a template and context constraints specified.
&lt;/p&gt;
&lt;p&gt;
 The Transform element may contain a [[Template Type Reference|template]] element
 to have the document dynamically generated via that template.  Otherwise, if
 no Template element is present, the generated document will be the XML view
 representation for the specified [[Context Type Reference|context]] element.
&lt;/p&gt;
&lt;p&gt;
 The &amp;quot;destdir&amp;quot; and &amp;quot;destfile&amp;quot; attributes specify where the downloaded content
 should be written to.
      &lt;/p&gt;

=Parameters=
      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;depot&lt;/td&gt;&lt;td&gt;The project to update&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;resultproperty&lt;/td&gt;&lt;td&gt;Property to set with
	  success/fail value&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;comment&lt;/td&gt;&lt;td&gt;Text describing purpose of update&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;passfile&lt;/td&gt;&lt;td&gt;File containing authentication info to
	  server. If passfile is not specified, information from the
	    [[framework.properties]]
	  file is used instead.&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;destdir&lt;/td&gt;&lt;td&gt;Directory where destfile
	  should be stored.&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;destfile&lt;/td&gt;&lt;td&gt;File where transform results should be stored.&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;
    
=Parameters specified as nested elements=

      &lt;p&gt;&lt;strong&gt;template&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
	A [[Template Type Reference|template]].
      &lt;/p&gt;
      &lt;p&gt;&lt;strong&gt;context&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
	A [[Context Type Reference|context]].
      &lt;/p&gt;

=Examples=

      &lt;p&gt;
	Run a transform on the fly.
      &lt;/p&gt;
      &lt;pre&gt;
	&amp;lt;transform
           serverurl=&quot;${viewdoc.server}&quot;
           depot=&quot;${resource.depot}&quot;
           resultproperty=&quot;rs&quot;
           comment=&quot;something re this update&quot;
           destdir=&quot;${resource.instance.dir}/&quot;
           destfile=&quot;something.test.out&quot;
           &amp;gt;
          &amp;lt;context direction=&quot;internal&quot; proximity=&quot;1&quot; maprefuri=&quot;${resource.mapref-uri}&quot;/&amp;gt;
          &amp;lt;template file=&quot;${templateFile}&quot; dir=&quot;/pkgs&quot; type=&quot;simple&quot;/&amp;gt;
        &amp;lt;/transform&amp;gt;

      &lt;/pre&gt;

     &lt;p&gt;
	Run a transform with no template specified. This returns a
	view in an XML document.
      &lt;/p&gt;
      &lt;pre&gt;
	&amp;lt;transform
           serverurl=&quot;${viewdoc.server}&quot;
           depot=&quot;${resource.depot}&quot;
           resultproperty=&quot;rs&quot;
           comment=&quot;something re this update&quot;
           destdir=&quot;${resource.instance.dir}/&quot;
           destfile=&quot;something.test.out&quot;
           &amp;gt;
          &amp;lt;context direction=&quot;internal&quot; proximity=&quot;1&quot; maprefuri=&quot;${resource.mapref-uri}&quot;/&amp;gt;
        &amp;lt;/transform&amp;gt;

      &lt;/pre&gt;

&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Resource model Ant Tasks]]
[[Category:Transforms]]
[[Category:Resource]]</text>
    </revision>
  </page>
  <page>
    <title>Transform documents</title>
    <id>1335</id>
    <revision>
      <id>12116</id>
      <timestamp>2009-12-20T17:46:18Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Transforms&lt;/categorytree&gt;

{{Workbench/Document Transforms}}

{{Manual/navbox}}

[[Category:Transforms]]</text>
    </revision>
  </page>
  <page>
    <title>Troubleshooting the Examples</title>
    <id>781</id>
    <revision>
      <id>14242</id>
      <timestamp>2010-11-10T19:59:55Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;noinclude&gt;&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Examples&lt;/categorytree&gt;&lt;/noinclude&gt;
= Overview =

If you have problems running one of the [[Examples]], try one of these solutions.

Otherwise, please feel free to [[Community|Contact Us]] via [[IRC Channel|IRC]], or email to the [http://groups.google.com/group/controltier Mailing List].

= Problems =

== load-resources command fails: no object exists ==

When running ''load-resources'' you get this message:

 ctl -p demo -m ProjectBuilder -c load-resources -- -filename projectbuilder.xml
 ...
 
 Command failed: The following error occurred while executing this line:
 ...
 /Users/greg/ctier2/ctl/projects/demo/modules/ProjectBuilder/lib/load-resources/projectxml/antlib.xml:62: \
   Error performing server request: no object exists by that name and type: type: Node, name: somenode
 
This is caused when the name of the node specified in ''projectbuilder.xml'' doesn't match the default Node named for your project.

* See: [[#Using a different Node name]] to fix this issue.

== load-resources command fails: project not found ==

 ctl -p demo -m ProjectBuilder -c load-resources -- -filename projectbuilder.xml
 project not found: 'demo'

You need to create a new project named 'demo' in the ControlTier Server.

See: [[Using the Examples#Create a New Project]] for instructions.

= Solutions =
== Using a different Node name ==

To change the Node name that is used from the default of &quot;localhost&quot;, you should edit this file:

# ''projectbuilder.xml''

Change the &amp;lt;referrers&amp;gt; section:

 &lt;referrers&gt;
 &lt;resource type=&quot;Node&quot; name=&quot;localhost&quot;/&gt;
 &lt;/referrers&gt;

Replace &quot;localhost&quot; with your Node name.

Double-check the file ''templates/defaults.xml''.

This file should specify the default node name using the one configured for your ControlTier installation.  The value will be &quot;${framework.node.name}&quot;.

You should not find it necessary to change this, but if so you can change it here:

 &lt;?xml version=&quot;1.0&quot;?&gt;
 &lt;defaults&gt;
   &lt;default&gt;
  &lt;!-- The default node is the framework node of the Ctl client invoking the --&gt;
  &lt;!-- generate-resources command. (For the default installation this will be  --&gt;
  &lt;!-- &quot;localhost&quot;).               --&gt;
  &lt;node&gt;
    &lt;name&gt;''${framework.node.name}''&lt;/name&gt;
    &lt;type&gt;${framework.node.type}&lt;/type&gt;
  &lt;/node&gt;

Change &quot;${framework.node.name}&quot; to the name of your Node.

[[Category:Examples]]</text>
    </revision>
  </page>
  <page>
    <title>Try-exec Task Reference</title>
    <id>1209</id>
    <revision>
      <id>13785</id>
      <timestamp>2010-11-10T15:11:01Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;project depot&quot; to &quot;project name&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Tasks&lt;/categorytree&gt;

{{version|3.4.6}}

==Parameters==
===Nested elements===

The task can take one of each of these elements:
* try
* catch
* finally

Each element accepts these attributes

&lt;table border=&quot;1&quot;&gt;
&lt;tr&gt;&lt;th&gt;attribute&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;script&lt;/td&gt;&lt;td&gt;script expression&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;scriptfile&lt;/td&gt;&lt;td&gt;script file&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;command&lt;/td&gt;&lt;td&gt;defined command. Commands are specified as: ''type''#''command'' (eg, [[fileutil]]#available)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;argline&lt;/td&gt;&lt;td&gt;argument string&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;expand&lt;/td&gt;&lt;td&gt;expand flag&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;executable&lt;/td&gt;&lt;td&gt;executable program&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;failonerror&lt;/td&gt;&lt;td&gt;fail if an error occurs&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;output&lt;/td&gt;&lt;td&gt;output file&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;depot&lt;/td&gt;&lt;td&gt;project name name (needed if command specified)&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

==Examples==

Execute a script that succeeds
&lt;pre&gt;
       &lt;try-exec&gt;
            &lt;try executable=&quot;/bin/sh&quot; script=&quot;echo SUCCESS&quot;/&gt;
        &lt;/try-exec&gt;
&lt;/pre&gt;

Catch an error
&lt;pre&gt;
       &lt;tempfile property=&quot;output&quot;/&gt;
        &lt;try-exec&gt;
            &lt;try executable=&quot;/bin/bogus&quot; script=&quot;echo blah&quot;/&gt;
            &lt;catch executable=&quot;/bin/sh&quot; script=&quot;echo CAUGHT &gt;${output}&quot;/&gt;
        &lt;/try-exec&gt;
        &lt;fail message=&quot;catch script did not run&quot;&gt;
            &lt;condition&gt;
                &lt;not&gt;&lt;available file=&quot;${output}&quot;/&gt;&lt;/not&gt;
            &lt;/condition&gt;
        &lt;/fail&gt;
&lt;/pre&gt;

Use a finally block
&lt;pre&gt;
       &lt;try-exec&gt;
            &lt;try executable=&quot;/bin/false&quot; script=&quot;echo TRY&quot;/&gt;            
            &lt;catch executable=&quot;/bin/sh&quot; script=&quot;echo CAUGHT&quot;/&gt;
            &lt;finally executable=&quot;/bin/sh&quot; script=&quot;echo FINALLY&quot;/&gt;
        &lt;/try-exec&gt;
&lt;/pre&gt;

==See also==
* [[shell-exec Task Reference]]

&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Command Dispatcher Ant Tasks]]</text>
    </revision>
  </page>
  <page>
    <title>Tutorials</title>
    <id>44</id>
    <redirect />
    <revision>
      <id>10387</id>
      <timestamp>2009-12-11T22:37:32Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[Examples]]</comment>
      <text xml:space="preserve">#REDIRECT [[Examples]]</text>
    </revision>
  </page>
  <page>
    <title>Type</title>
    <id>1638</id>
    <redirect />
    <revision>
      <id>11122</id>
      <timestamp>2009-12-14T01:52:44Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[Core Type Guide]]</comment>
      <text xml:space="preserve">#REDIRECT [[Core Type Guide]]</text>
    </revision>
  </page>
  <page>
    <title>Type-v10.xml</title>
    <id>103</id>
    <revision>
      <id>14425</id>
      <timestamp>2010-11-11T18:04:26Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;XML&lt;/categorytree&gt;
This document describes the XML tags used to define a ControlTier type. See the [[Core Type Guide]] for existing types.
Use [[ProjectBuilder]] or the [[Graphical type editor]] to create and manage a type definition.

{{Caution|This is a demonstration document using all possible elements in the current ControlTier &lt;code&gt;type-v10.dtd&lt;/code&gt;}}
&lt;br/&gt;
=types=

      &lt;p&gt;The root (aka &quot;top-level&quot;) element of the &lt;code&gt;type.xml&lt;/code&gt; file.
      Contains a set of [[#type]] elements.
      Any kind of type can be specified in any order.
      &lt;/p&gt;
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;

&lt;types xmlns:cmd=&quot;http://open.controltier.com/base/Modules/Commands#&quot; 
       xmlns:module=&quot;http://open.controltier.com/base/Modules#&quot; 
       xmlns:type=&quot;http://open.controltier.com/base/Types#&quot;&gt;     

       &lt;type ...&gt;
          ...
        &lt;/type&gt;
  &lt;/types&gt;
&lt;/syntaxhighlight&gt;

=type=

      &lt;p&gt;The type element defines a Type and command module.
    If the &quot;order&quot; attribute is &quot;Setting&quot; or &quot;Assembly&quot;, then the elements required to define the command Module are not required.&lt;/p&gt;
      &lt;table border=&quot;1&quot; class=&quot;wikitable&quot;&gt;
	&lt;caption&gt;attributes&lt;/caption&gt;
	&lt;tr&gt;
	  &lt;th&gt;attribute&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;th&gt;values&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;name&lt;/td&gt;&lt;td&gt;Name of the type&lt;/td&gt;&lt;td&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;role&lt;/td&gt;&lt;td&gt;Specifies the role of the type. Concrete means it can be instatiated as objects. Abstract specifies it cannot be instantiated.&lt;/td&gt;&lt;td&gt;&quot;concrete&quot; or &quot;abstract&quot;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;order&lt;/td&gt;&lt;td&gt;Name of a well known base type.&lt;/td&gt;&lt;td&gt;Setting, Assembly, Deployment, Service, Mediator&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;uniqueInstances&lt;/td&gt;&lt;td&gt;A boolean signifying if each instance of the type must have a unique name.
	  &quot;false&quot; is default.&lt;/td&gt;&lt;td&gt;true or false&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;

      &lt;p&gt;&amp;nbsp;&lt;/p&gt;

      &lt;table border=&quot;1&quot; class=&quot;wikitable&quot;&gt;
	&lt;caption&gt;nested elements&lt;/caption&gt;
	&lt;tr&gt;
	  &lt;th&gt;element&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;description&lt;/td&gt;&lt;td&gt;Text content describing the type&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;[[#supertype]]&lt;/td&gt;&lt;td&gt;Reference to the parent type&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;[[#command-settings]]&lt;/td&gt;&lt;td&gt;Properties of the command module&lt;/td&gt;
	&lt;/tr&gt;
     &lt;/table&gt;

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;type
        name=&quot;TypeName&quot;
        role=&quot;concrete&quot;
        order=&quot;TypeName&quot;
        uniqueInstances=&quot;true&quot;&gt;

        &lt;description&gt;describe the type&lt;/description&gt;

        &lt;supertype&gt;
            &lt;typereference name=&quot;TypeName&quot;/&gt;
        &lt;/supertype&gt;

	...
   &lt;/type&gt;
&lt;/syntaxhighlight&gt;

=doc=

      &lt;p&gt;A documentation block. Can contain any valid 
      [http://forrest.apache.org/dtdx/document-v20.dtdx.html Apache Forrest xdoc] tag.
      The &lt;code&gt;doc&lt;/code&gt; tags can be used just about anywhere in the type.xml.
      When ProjectBuilder's generate-forrest-docs command is run, the doc
      tags are expanded into the generated forrest xdocs.
      &lt;/p&gt;
See [[Generating Forrest Sites]] for more information.

=supertype=

      &lt;p&gt;A sub-element of [[#type]], supertype specifies the parent type of this type. A &lt;code&gt;typereference&lt;/code&gt; tag is used to specify the supertype by name.
      &lt;/p&gt;
      &lt;table border=&quot;1&quot; class=&quot;wikitable&quot;&gt;
	&lt;caption&gt;nested elements&lt;/caption&gt;
	&lt;tr&gt;
	  &lt;th&gt;element&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;[[#typereference]]&lt;/td&gt;&lt;td&gt;Text content describing the type&lt;/td&gt;
	&lt;/tr&gt;
 &lt;/table&gt;
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
  &lt;supertype&gt;
            &lt;typereference name=&quot;TypeName&quot;/&gt;
  &lt;/supertype&gt;
&lt;/syntaxhighlight&gt;

=typereference=

       &lt;p&gt;Specifies a type.
       &lt;/p&gt;
      &lt;table border=&quot;1&quot; class=&quot;wikitable&quot;&gt;
	&lt;caption&gt;attributes&lt;/caption&gt;
	&lt;tr&gt;
	  &lt;th&gt;attribute&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;th&gt;values&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;name&lt;/td&gt;&lt;td&gt;Name of the type&lt;/td&gt;&lt;td&gt;Any existing type.&lt;/td&gt;
	&lt;/tr&gt;
   &lt;/table&gt;

=command-settings=

       &lt;p&gt;Properties of the command module
       &lt;/p&gt;
      &lt;table border=&quot;1&quot; class=&quot;wikitable&quot;&gt;
	&lt;caption&gt;nested elements&lt;/caption&gt;
	&lt;tr&gt;
	  &lt;th&gt;elements&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;th&gt;values&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;notification&lt;/td&gt;&lt;td&gt;Advisory setting stating if notofications are enabled.
	  Specify the &lt;code&gt;notify&lt;/code&gt; attribute with a boolean value.&lt;/td&gt;&lt;td&gt;&quot;true&quot; or &quot;false&quot;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;template-directory&lt;/td&gt;&lt;td&gt;path to template directory&lt;/td&gt;&lt;td&gt;Any valid path. By convention it is &lt;code&gt;${module.dir}/templates&lt;/code&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;[[#dependency-view]]&lt;/td&gt;&lt;td&gt;Paramaters to used when retrieving resource model view&lt;/td&gt;&lt;td&gt;See [[#dependency-view]]&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;logger&lt;/td&gt;&lt;td&gt;Name used by log calls&lt;/td&gt;&lt;td&gt;By convention, the type name&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;
     &lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;command-settings&gt;
         &lt;notification notify=&quot;false&quot;/&gt;
         &lt;template-directory&gt;&lt;/template-directory&gt;
         &lt;dependency-view parents=&quot;false&quot; children=&quot;true&quot; proximity=&quot;1&quot;/&gt;
         &lt;logger name=&quot;TypeName&quot;/&gt;
     &lt;/command-settings&gt;
&lt;/syntaxhighlight&gt;

=dependency-view=

       &lt;p&gt;Paramaters used as defaults for the Get-Properties command options&lt;/p&gt;
      &lt;table border=&quot;1&quot; class=&quot;wikitable&quot;&gt;
	&lt;caption&gt;attributes&lt;/caption&gt;
	&lt;tr&gt;
	  &lt;th&gt;attribute&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;th&gt;values&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;parents&lt;/td&gt;&lt;td&gt;Include parent dependency info&lt;/td&gt;&lt;td&gt;&quot;true&quot; or &quot;false&quot;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;children&lt;/td&gt;&lt;td&gt;Include children dependency info&lt;/td&gt;&lt;td&gt;&quot;true&quot; or &quot;false&quot;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;proximity&lt;/td&gt;&lt;td&gt;Number of levels away from the source object&lt;/td&gt;&lt;td&gt;1, 2, 3, 4&lt;/td&gt;
	&lt;/tr&gt;
   &lt;/table&gt;
  
=attributes=

       &lt;p&gt;define attributes of the Type here. type-property values are the names of properties in the depo: namespace
       &lt;/p&gt;
      &lt;table border=&quot;1&quot; class=&quot;wikitable&quot;&gt;
	&lt;caption&gt;nested elements&lt;/caption&gt;
	&lt;tr&gt;
	  &lt;th&gt;elements&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;[[#attribute]]&lt;/td&gt;&lt;td&gt;Attribute declaration&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;[[#attribute-default]]&lt;/td&gt;&lt;td&gt;These will be generated into type.properties&lt;/td&gt;
	&lt;/tr&gt;
     &lt;/table&gt;
   &lt;syntaxhighlight lang=&quot;xml&quot;&gt;
 &lt;attributes&gt;
       &lt;attribute name=&quot;attr_name&quot; type-property=&quot;property-name&quot;/&gt;
       &lt;attribute-default name=&quot;attr_name&quot; value=&quot;VALUE&quot;/&gt;
    &lt;/attributes&gt;
&lt;/syntaxhighlight&gt;

=attribute=
Declares an attribute.
      &lt;table border=&quot;1&quot; class=&quot;wikitable&quot;&gt;
	&lt;caption&gt;attributes&lt;/caption&gt;
	&lt;tr&gt;
	  &lt;th&gt;attribute&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;th&gt;values&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;name&lt;/td&gt;&lt;td&gt;Attribute's name&lt;/td&gt;&lt;td&gt;Any name. (avoid whitespace)&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;type-property&lt;/td&gt;&lt;td&gt;Associated [[#RDF-props|RDF property]]&lt;/td&gt;&lt;td&gt;See [[#RDF-props]] for a list&lt;/td&gt;
	&lt;/tr&gt;
       &lt;/table&gt;

=attribute-default=
Defines a default value for a declared attribute via the [[#attribute]] element.
      &lt;table border=&quot;1&quot; class=&quot;wikitable&quot;&gt;
	&lt;caption&gt;attributes&lt;/caption&gt;
	&lt;tr&gt;
	  &lt;th&gt;attribute&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;th&gt;values&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;name&lt;/td&gt;&lt;td&gt;Attribute's name&lt;/td&gt;&lt;td&gt;Name of declared attribute&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;value&lt;/td&gt;&lt;td&gt;Attribute's default value.&lt;/td&gt;&lt;td&gt;Any string value&lt;/td&gt;
	&lt;/tr&gt;
       &lt;/table&gt;

=constraints=

       &lt;p&gt;A sub-element of [[#type]]. Type constraints are used to control the allowed kinds of
       dependencies (both parent and child). Also controls the allowed
       values for its RDF properties.
       &lt;/p&gt;

      &lt;table border=&quot;1&quot; class=&quot;wikitable&quot;&gt;
	&lt;caption&gt;nested elements&lt;/caption&gt;
	&lt;tr&gt;
	  &lt;th&gt;elements&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;[[#allowedvalue-constraint]]&lt;/td&gt;&lt;td&gt;Contains any number of [[#allowedvalue]] elements&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;[[#dependency-constraint&quot;]]&lt;/td&gt;&lt;td&gt;Specifies [[#allowedtypes]] and [[#singletontypes]]&lt;/td&gt;
	&lt;/tr&gt;
     &lt;/table&gt;
&lt;br/&gt;
Several examples of constraints: allowed-value, dependency-constraint:
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;constraints&gt;
            &lt;allowedvalue-constraint
                enforced=&quot;true/false&quot;
                type-property=&quot;depo-property-name&quot;&gt;
                &lt;allowedvalue value=&quot;&lt;SOME VALUE&gt;&quot; default=&quot;true/false&quot;/&gt;
                &lt;allowedvalue value=&quot;&lt;SOME VALUE&gt;&quot; default=&quot;true/false&quot;/&gt;
            &lt;/allowedvalue-constraint&gt;

            &lt;dependency-constraint kind=&quot;parent/child&quot; enforced=&quot;true/false&quot;&gt;
                &lt;allowedtypes&gt;
                    &lt;typereference name=&quot;&lt;TYPE NAME&gt;&quot;/&gt;
                    &lt;typereference name=&quot;&lt;TYPE NAME&gt;&quot;/&gt;
                &lt;/allowedtypes&gt;
                &lt;singletontypes&gt;
                    &lt;typereference name=&quot;&lt;TYPE NAME&gt;&quot;/&gt;
                    &lt;typereference name=&quot;&lt;TYPE NAME&gt;&quot;/&gt;
                &lt;/singletontypes&gt;
            &lt;/dependency-constraint&gt;
&lt;/constraints&gt;
&lt;/syntaxhighlight&gt;

=allowedvalue-constraint=

       &lt;p&gt;Contains any number of allowed values.
       &lt;/p&gt;
      &lt;table border=&quot;1&quot; class=&quot;wikitable&quot;&gt;
	&lt;caption&gt;attributes&lt;/caption&gt;
	&lt;tr&gt;
	  &lt;th&gt;attribute&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;th&gt;values&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;enforced&lt;/td&gt;&lt;td&gt;Specifies if the constraint should be enforced&lt;/td&gt;&lt;td&gt;&quot;true&quot; or &quot;false&quot;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;type-property&lt;/td&gt;&lt;td&gt;Name of RDF property. &lt;/td&gt;&lt;td&gt;See [[#RDF-props]] for a listing.&lt;/td&gt;
	&lt;/tr&gt;
       &lt;/table&gt;
     
      &lt;table border=&quot;1&quot; class=&quot;wikitable&quot;&gt;
	&lt;caption&gt;nested elements&lt;/caption&gt;
	&lt;tr&gt;
	  &lt;th&gt;elements&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;[[#allowedvalue]]&lt;/td&gt;&lt;td&gt;An &lt;code&gt;allowedvalue&lt;/code&gt; element&lt;/td&gt;
	&lt;/tr&gt;
     &lt;/table&gt;
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;allowedvalue-constraint
                enforced=&quot;false&quot;
                type-property=&quot;package-install-root&quot;&gt;
     &lt;allowedvalue value=&quot;/opt/foo&quot;/&gt;
     &lt;allowedvalue value=&quot;/usr/local/foo&quot;/&gt;
     &lt;allowedvalue value=&quot;/usr/share/foo&quot; default=&quot;true&quot;/&gt;
&lt;/allowedvalue-constraint&gt;
&lt;/syntaxhighlight&gt;

=allowedvalue=

       &lt;p&gt;An allowed value.
       &lt;/p&gt;
      &lt;table border=&quot;1&quot; class=&quot;wikitable&quot;&gt;
	&lt;caption&gt;attributes&lt;/caption&gt;
	&lt;tr&gt;
	  &lt;th&gt;attribute&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;th&gt;values&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;value&lt;/td&gt;&lt;td&gt;An allowed value&lt;/td&gt;&lt;td&gt;Any string&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;default&lt;/td&gt;&lt;td&gt;Specifies if it should be the default value.&lt;/td&gt;&lt;td&gt;&quot;true&quot; or &quot;false&quot;&lt;/td&gt;
	&lt;/tr&gt;
       &lt;/table&gt;

=dependency-constraint=

       &lt;p&gt;Defines relationship constraints for the type.
       &lt;/p&gt;

      &lt;table border=&quot;1&quot; class=&quot;wikitable&quot;&gt;
	&lt;caption&gt;attributes&lt;/caption&gt;
	&lt;tr&gt;
	  &lt;th&gt;attribute&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;th&gt;values&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;kind&lt;/td&gt;&lt;td&gt;Kind of dependency.&lt;/td&gt;&lt;td&gt;&quot;parent&quot; or &quot;child&quot;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;enforced&lt;/td&gt;&lt;td&gt;Specifies if the constraint should be enforced&lt;/td&gt;&lt;td&gt;&quot;true&quot; or &quot;false&quot;&lt;/td&gt;
	&lt;/tr&gt;
       &lt;/table&gt;
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
 &lt;dependency-constraint kind=&quot;child&quot; enforced=&quot;true&quot;&gt;
                &lt;allowedtypes&gt;
                    &lt;typereference name=&quot;TypeA&quot;/&gt;
                    &lt;typereference name=&quot;TypeB&quot;/&gt;
                &lt;/allowedtypes&gt;
&lt;/dependency-constraint&gt;
&lt;/syntaxhighlight&gt;

      &lt;table border=&quot;1&quot; class=&quot;wikitable&quot;&gt;
	&lt;caption&gt;nested elements&lt;/caption&gt;
	&lt;tr&gt;
	  &lt;th&gt;elements&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;[[#allowedtypes]]&lt;/td&gt;&lt;td&gt;Set of allowable types&lt;/td&gt;
	&lt;/tr&gt;
           &lt;tr&gt;
	  &lt;td&gt;[[#singletontypes]]&lt;/td&gt;&lt;td&gt;Set of allowable singleton types&lt;/td&gt;
	&lt;/tr&gt;
     &lt;/table&gt;

=allowedtypes=
       &lt;p&gt;Specifies which types are allowed to have a dependency relationship.
       &lt;/p&gt;
      &lt;table border=&quot;1&quot; class=&quot;wikitable&quot;&gt;
	&lt;caption&gt;nested elements&lt;/caption&gt;
	&lt;tr&gt;
	  &lt;th&gt;elements&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;[[#typereference]]&lt;/td&gt;&lt;td&gt;&lt;/td&gt;
	&lt;/tr&gt;
     &lt;/table&gt;

=singletontypes=

    &lt;p&gt;Specifies which types are allowed to have a singleton dependency relationship (i.e., cardinality is 0 or 1).

       &lt;/p&gt;
      &lt;table border=&quot;1&quot; class=&quot;wikitable&quot;&gt;
	&lt;caption&gt;nested elements&lt;/caption&gt;
	&lt;tr&gt;
	  &lt;th&gt;elements&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;[[#typereference]]&lt;/td&gt;&lt;td&gt;&lt;/td&gt;
	&lt;/tr&gt;
     &lt;/table&gt;


=commands=

A sub-element of [[#type|type]], the &lt;code&gt;commands&lt;/code&gt; element contains the command definitions for this type. See the [[Workflow Development Guide]] for more information about developing commands for types.
 
 &lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;commands&gt;
       &lt;command name=&quot;&lt;COMMAND NAME&gt;&quot;
                description=&quot;&lt;COMMAND DESCRIPTION&gt;&quot;
                 command-type=&quot;{Command|AntCommand|BsfCommand|WorkflowCommand|DispatchCommand}&quot;&gt;
             &lt;opts&gt;
                &lt;opt parameter=&quot;&lt;OPT NAME&gt;&quot;
                     description=&quot;&lt;OPT DESCRIPTION&gt;&quot;
                     required=&quot;{true|false}&quot;
                     property=&quot;opts.&lt;OPT NAME&gt;&quot;
                     type=&quot;{string|boolean}&quot;
                     default=&quot;&lt;DEFAULT STRING VALUE&gt;&quot;/&gt;
               &lt;/opts&gt;
           &lt;/command&gt;
	 &lt;/commands&gt;
&lt;/syntaxhighlight&gt;

=command=

Defines a command for the type.

{|  class=&quot;wikitable&quot; border=&quot;1&quot;
	&lt;caption&gt;attributes&lt;/caption&gt;
! attribute!!description!!values
|-
|name||The command's name||Any string
|-
|description||Breifly describe the command purpose.||Any string
|-
|command-type||The type of command implementation||See [[#command-type]] for a list of known command types
|-
|is-static||A static command is one that can run outsidef of an object context||&quot;true&quot; or &quot;false&quot;
|-
|daemonized||Should the executable be launched in daemon mode?||&quot;true&quot; or &quot;false&quot;
|-
|is-private||A private command is not inherited by sub types (since [[ControlTier 3.4.7]])||&quot;true&quot; or &quot;false&quot;  
|}

{| border=&quot;1&quot; class=&quot;wikitable&quot;
	&lt;caption&gt;nested elements&lt;/caption&gt;
!elements!!description
|-
|[[#opts]]||Specifies the commands options
|-
|[[#execution-string]]||Specifies the file to execute for a &quot;Command&quot; command-type
|-
|[[#argument-string]]||Specifies the arguments for a &quot;Command&quot; command-type
|-
|[[#implementation]]||Specifies the implementation for an &quot;AntCommand&quot; command-type
|-
|[[#script]]||Specifies the implementation for a &quot;BsfCommand&quot; command-type
|-
|[[#workflow]]||Specifies command sequence for a &quot;WorkflowCommand&quot; command-type
|-
|[[#error-handler]]||Specifies an error handler. Only &quot;WorkflowCommand&quot; and &quot;DispatchCommand&quot; command-type.
|-
|[[#success-handler]]||Specifies a success handler. Only &quot;WorkflowCommand&quot; and &quot;DispatchCommand&quot; command-type
|}

==command-type==
An attribute for the [[#command]] element that specifies the type of command implementation.
* [[Shell command|Command]]: A command implemented as a shell execution
* [[BSF command|BsfCommand]]: A command implemented using the BeanShell Scripting Framework
* [[Ant command|AntCommand]]: A command implemented using Ant tasks
* [[Workflow command|WorkflowCommand]]: A sequence of defined commands
* [[Dispatch command|DispatchCommand]]: Relays a command to matching resources.

=execution-string=

       &lt;p&gt;File to execute. Used by command-type &lt;code&gt;Command&lt;/code&gt;. See: [[Shell command]] in the [[Workflow Development Guide]].
       &lt;/p&gt;

=argument-string=

       &lt;p&gt;Arguments to pass to executable.
	 If the execution-string specifies an interpreter
	 that can read script from stdin, the value of argument-string 
	 can be script code. See: [[Shell command]] in the [[Workflow Development Guide]].
       &lt;/p&gt;

=implementation=

       &lt;p&gt;Ant tasks to execute. See: [[Ant command]] in the [[Workflow Development Guide]].
       &lt;/p&gt;

=script=

       &lt;p&gt;BSF script to execute. See: [[BSF command]] in the [[Workflow Development Guide]].
       &lt;/p&gt;

=workflow=

       &lt;p&gt;Command sequence to execute.
	 Takes one more more command elements. See: [[Workflow command]] in the [[Workflow Development Guide]].
       &lt;/p&gt;
      &lt;table border=&quot;1&quot; class=&quot;wikitable&quot;&gt;
	&lt;caption&gt;attributes&lt;/caption&gt;
	&lt;tr&gt;
	  &lt;th&gt;attribute&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;th&gt;values&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;threadcount&lt;/td&gt;&lt;td&gt;Number of threads to execute the workflow&lt;/td&gt;&lt;td&gt;Any integer greater than 0&lt;/td&gt;
	&lt;/tr&gt;
        &lt;tr&gt;
&lt;td&gt;error-handler-type&lt;/td&gt;
&lt;td&gt; Type of error handler to invoke when a subcommand fails &lt;/td&gt;
&lt;td&gt; One of: &quot;IGNORE&quot;, &quot;HANDLER&quot;, or &quot;FAIL&quot;&lt;/td&gt;
&lt;/tr&gt;
      &lt;/table&gt;
      &lt;p&gt;&amp;nbsp;&lt;/p&gt;
      &lt;table border=&quot;1&quot; class=&quot;wikitable&quot;&gt;
	&lt;caption&gt;nested elements&lt;/caption&gt;
	&lt;tr&gt;
	  &lt;th&gt;elements&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;command&lt;/td&gt;&lt;td&gt;Name of the command. Command must be in the same module.
	  &lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
 &lt;command name=&quot;&lt;WORKFLOW COMMAND NAME&gt;&quot;
                  description=&quot;&lt;WORKFLOW COMMAND DESCRIPTION&gt;&quot;
                  command-type=&quot;WorkflowCommand&quot;
                  error-handler-type=&quot;HANDLER | IGNORE | FAIL&quot;
                  &gt;
           &lt;error-handler quiet=&quot;true/false&quot;&gt;
             &lt;prompt&gt;PROMPT MESSAGE&lt;/prompt&gt;
             &lt;command name=&quot;&lt;ERROR HANDLER COMMAND NAME&gt;&quot;/&gt;
             &lt;notify email=&quot;NAME@HOST&quot;&gt;
               &lt;subject&gt;SUBJECT&lt;/subject&gt;
               &lt;message-file&gt;PATH&lt;/message-file&gt;
             &lt;/notify&gt;
             &lt;report&gt;REPORT MESSAGE&lt;/report&gt;
           &lt;/error-handler&gt;
           &lt;success-handler notify-email=&quot;NAME@HOST&quot;&gt;
             &lt;notify-subject&gt;SUBJECT&lt;/notify-subject&gt;
             &lt;notify-message-file&gt;PATH&lt;/notify-message-file&gt;
           &lt;/success-handler&gt;
           &lt;workflow threadcount=&quot;&lt;INTEGER&gt;&quot;&gt;
             &lt;command name=&quot;&lt;COMMAND NAME&gt;&quot;/&gt;
             &lt;command name=&quot;&lt;COMMAND NAME&gt;&quot;/&gt;
           &lt;/workflow&gt;
         &lt;/command&gt;
&lt;/syntaxhighlight&gt;

=dispatch-command=

       &lt;p&gt;Dispatch commands to the selected contexts.
	 Takes one more more command elements. See: [[Dispatch command]] in the [[Workflow Development Guide]].
       &lt;/p&gt;
      &lt;table border=&quot;1&quot; class=&quot;wikitable&quot;&gt;
	&lt;caption&gt;attributes&lt;/caption&gt;
	&lt;tr&gt;
	  &lt;th&gt;attribute&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;th&gt;values&lt;/th&gt;
	&lt;/tr&gt;
	
	&lt;tr&gt;
	  &lt;td&gt;name&lt;/td&gt;&lt;td&gt;Workflow name&lt;/td&gt;&lt;td&gt;defaults to command.name&lt;/td&gt;
	&lt;/tr&gt;

	&lt;tr&gt;
	  &lt;td&gt;requirematch&lt;/td&gt;&lt;td&gt;Requires one or more matches&lt;/td&gt;&lt;td&gt;true (default)&lt;/td&gt;
	&lt;/tr&gt;

	&lt;tr&gt;
	  &lt;td&gt;strategy&lt;/td&gt;&lt;td&gt;Execution strategy&lt;/td&gt;&lt;td&gt;&quot;localdispatch&quot; or &quot;nodedispatch&quot;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;threadcount&lt;/td&gt;&lt;td&gt;Number of threads to execute the workflow&lt;/td&gt;&lt;td&gt;Any integer greater than 0&lt;/td&gt;
	&lt;/tr&gt;
        &lt;tr&gt;
&lt;td&gt;error-handler-type&lt;/td&gt;
&lt;td&gt; Type of error handler to invoke when a subcommand fails &lt;/td&gt;
&lt;td&gt; One of: &quot;IGNORE&quot;, &quot;HANDLER&quot;, or &quot;FAIL&quot;&lt;/td&gt;
&lt;/tr&gt;
      &lt;/table&gt;
      &lt;p&gt;&amp;nbsp;&lt;/p&gt;
      &lt;table border=&quot;1&quot; class=&quot;wikitable&quot;&gt;
	&lt;caption&gt;nested elements&lt;/caption&gt;
	&lt;tr&gt;
	  &lt;th&gt;elements&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;[[#arg]]&lt;/td&gt;&lt;td&gt;The argument line.&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;[[#command]]&lt;/td&gt;&lt;td&gt;The command to dispatch.&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;[[#contexts]]&lt;/td&gt;&lt;td&gt;The object contexts to execute the command. Can contain one of  [[#select-dependencies]], [[#select-deployments]], [[#select-resources]]&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;
 &lt;syntaxhighlight lang=&quot;xml&quot;&gt;
 &lt;command name=&quot;name&quot;
                  description=&quot;description&quot;
                  command-type=&quot;DispatchCommand&quot;
                  error-handler-type=&quot;HANDLER&quot;
                  &gt;
           &lt;error-handler quiet=&quot;false&quot;&gt;
             ...
           &lt;/error-handler&gt;

           &lt;dispatch-command threadcount=&quot;1&quot; 
	                     requirematch=&quot;true&quot;
             &gt;
             &lt;command name=&quot;dispatchedCommand&quot;/&gt;
             &lt;arg line=&quot;argLine&quot;/&gt;
             &lt;contexts&gt;
	       &lt;select-deployments sortkey=&quot;name&quot; sortorder=&quot;ascending&quot; depot=&quot;${context.depot}&quot;&gt;
	         &lt;include name=&quot;.*&quot; type=&quot;[^\.]*&quot;/&gt;
	       &lt;/select-deployments&gt;
             &lt;/contexts&gt;
           &lt;/dispatch-command&gt;
         &lt;/command&gt;
&lt;/syntaxhighlight&gt;

=include=
	 &lt;p&gt;Object include filter
	 &lt;/p&gt;
      &lt;table border=&quot;1&quot; class=&quot;wikitable&quot;&gt;
	   &lt;caption&gt;attributes&lt;/caption&gt;
	   &lt;tr&gt;
	     &lt;th&gt;attribute&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;th&gt;values&lt;/th&gt;
	   &lt;/tr&gt;
	   &lt;tr&gt;
	     &lt;td&gt;name&lt;/td&gt;&lt;td&gt;Object name&lt;/td&gt;&lt;td&gt;regex&lt;/td&gt;
	   &lt;/tr&gt;
	   &lt;tr&gt;
	     &lt;td&gt;type&lt;/td&gt;&lt;td&gt;Object type&lt;/td&gt;&lt;td&gt;regex&lt;/td&gt;
	   &lt;/tr&gt;
	 &lt;/table&gt;

=select-dependencies=
	 &lt;p&gt;Object include filter based on object dependencies declared in properties. Accepts one [[#include]] nested element.
	 &lt;/p&gt;
      &lt;table border=&quot;1&quot; class=&quot;wikitable&quot;&gt;
	   &lt;caption&gt;attributes&lt;/caption&gt;
	   &lt;tr&gt;
	     &lt;th&gt;attribute&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;th&gt;values&lt;/th&gt;
	   &lt;/tr&gt;
	   &lt;tr&gt;
	     &lt;td&gt;relationtype&lt;/td&gt;&lt;td&gt;Object's base type&lt;/td&gt;&lt;td&gt;regex&lt;/td&gt;
	   &lt;/tr&gt;
	   &lt;tr&gt;
	     &lt;td&gt;sortkey&lt;/td&gt;&lt;td&gt;Object property used as sort key&lt;/td&gt;&lt;td&gt;&lt;/td&gt;
	   &lt;/tr&gt;
	   &lt;tr&gt;
	     &lt;td&gt;sortorder&lt;/td&gt;&lt;td&gt;Sort order&lt;/td&gt;&lt;td&gt; &quot;descending&quot; or &quot;ascending&quot; (default)&lt;/td&gt;
	   &lt;/tr&gt;
	   &lt;tr&gt;
	     &lt;td&gt;source&lt;/td&gt;&lt;td&gt;Data source to read property data&lt;/td&gt;&lt;td&gt;&quot;file&quot; or &quot;context&quot; (default)&lt;/td&gt;
	   &lt;/tr&gt;
	 &lt;/table&gt;
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;select-dependencies sortkey=&quot;startup-rank&quot;
 			     sortorder=&quot;descending&quot;
 			     relationtype=&quot;deployment&quot; source=&quot;context&quot;&gt;
 	  &lt;include name=&quot;me[12]&quot; type=&quot;Managed-.*&quot;/&gt;
 	&lt;/select-dependencies&gt;
&lt;/syntaxhighlight&gt;

=select-deployments=

	 &lt;p&gt;Looks up dispatch targets from the [[resources.properties]] file. Accepts one [[#include]] nested element.
	 &lt;/p&gt;
      &lt;table border=&quot;1&quot; class=&quot;wikitable&quot;&gt;
	   &lt;caption&gt;attributes&lt;/caption&gt;
	   &lt;tr&gt;
	     &lt;th&gt;attribute&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;th&gt;values&lt;/th&gt;
	   &lt;/tr&gt;
	   &lt;tr&gt;
	     &lt;td&gt;depot&lt;/td&gt;&lt;td&gt;project name name&lt;/td&gt;&lt;td&gt;an existing project&lt;/td&gt;
	   &lt;/tr&gt;
	   &lt;tr&gt;
	     &lt;td&gt;sortkey&lt;/td&gt;&lt;td&gt;Object property used as sort key&lt;/td&gt;&lt;td&gt;&lt;/td&gt;
	   &lt;/tr&gt;
	   &lt;tr&gt;
	     &lt;td&gt;sortorder&lt;/td&gt;&lt;td&gt;Sort order&lt;/td&gt;&lt;td&gt; &quot;descending&quot; or &quot;ascending&quot; (default)&lt;/td&gt;
	   &lt;/tr&gt;
	 &lt;/table&gt;
	 &lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;select-deployments sortkey=&quot;startup-rank&quot;
 			     sortorder=&quot;descending&quot;
 			     depot=&quot;${context.depot}&quot;&gt;
 	  &lt;include name=&quot;me[12]&quot; type=&quot;Managed-.*&quot;/&gt;
 	&lt;/select-deployments&gt;
&lt;/syntaxhighlight&gt;

=select-resources=

	 &lt;p&gt;Looks up dispatch targets from the specified project. Accepts one [[#include]] nested element.
	 &lt;/p&gt;
      &lt;table border=&quot;1&quot; class=&quot;wikitable&quot;&gt;
	   &lt;caption&gt;attributes&lt;/caption&gt;
	   &lt;tr&gt;
	     &lt;th&gt;attribute&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;th&gt;values&lt;/th&gt;
	   &lt;/tr&gt;
	   &lt;tr&gt;
	     &lt;td&gt;depot&lt;/td&gt;&lt;td&gt;project name name&lt;/td&gt;&lt;td&gt;an existing project&lt;/td&gt;
	   &lt;/tr&gt;
	   &lt;tr&gt;
	     &lt;td&gt;sortkey&lt;/td&gt;&lt;td&gt;Object property used as sort key&lt;/td&gt;&lt;td&gt;&lt;/td&gt;
	   &lt;/tr&gt;
	   &lt;tr&gt;
	     &lt;td&gt;sortorder&lt;/td&gt;&lt;td&gt;Sort order&lt;/td&gt;&lt;td&gt; &quot;descending&quot; or &quot;ascending&quot; (default)&lt;/td&gt;
	   &lt;/tr&gt;
	   &lt;tr&gt;
	     &lt;td&gt;source&lt;/td&gt;&lt;td&gt;Data source to read property data&lt;/td&gt;&lt;td&gt;&quot;file&quot; or &quot;context&quot; (default)&lt;/td&gt;
	   &lt;/tr&gt;
	 &lt;/table&gt;
	 &lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;select-resources sortkey=&quot;startup-rank&quot;
 			     sortorder=&quot;descending&quot;
 			     depot=&quot;${context.depot}&quot;&gt;
 	  &lt;include name=&quot;me[12]&quot; type=&quot;Managed-.*&quot;/&gt;
 	&lt;/select-resources&gt;
&lt;/syntaxhighlight&gt;

=error-handler=

       &lt;p&gt;Handles an error if one occurs
       &lt;/p&gt;
      &lt;table border=&quot;1&quot; class=&quot;wikitable&quot;&gt;
	&lt;caption&gt;attributes&lt;/caption&gt;
	&lt;tr&gt;
	  &lt;th&gt;attribute&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;th&gt;values&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;quiet&lt;/td&gt;&lt;td&gt;Log a message if an error is caught?&lt;/td&gt;&lt;td&gt;&quot;true&quot; or &quot;false&quot;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;errorproperty&lt;/td&gt;&lt;td&gt;Name of property to set error message&lt;/td&gt;&lt;td&gt;string &lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;
      &lt;p&gt;&amp;nbsp;&lt;/p&gt;
      &lt;table border=&quot;1&quot; class=&quot;wikitable&quot;&gt;
	&lt;caption&gt;nested elements&lt;/caption&gt;
	&lt;tr&gt;
	  &lt;th&gt;elements&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;prompt&lt;/td&gt;&lt;td&gt;Prompt user if an error occurs&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;command&lt;/td&gt;&lt;td&gt;Run the specified command. Must be in the same module.&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;notify&lt;/td&gt;&lt;td&gt;Send an email.&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;report&lt;/td&gt;&lt;td&gt;Call the &lt;code&gt;report&lt;/code&gt; task with the error message.&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;
      &lt;p&gt;Example&lt;/p&gt;
   &lt;syntaxhighlight lang=&quot;xml&quot;&gt;
 &lt;error-handler quiet=&quot;true&quot;&gt;
             &lt;prompt&gt;PROMPT MESSAGE&lt;/prompt&gt;
             &lt;command name=&quot;aCommand&quot;/&gt;
             &lt;notify email=&quot;NAME@HOST&quot;&gt;
               &lt;subject&gt;SUBJECT&lt;/subject&gt;
               &lt;message-file&gt;PATH&lt;/message-file&gt;
             &lt;/notify&gt;
             &lt;report&gt;REPORT MESSAGE&lt;/report&gt;
 &lt;/error-handler&gt;
&lt;/syntaxhighlight&gt;

=opts=

       &lt;p&gt;Specifies the commands options&lt;/p&gt;
      &lt;table border=&quot;1&quot; class=&quot;wikitable&quot;&gt;
	&lt;caption&gt;nested elements&lt;/caption&gt;
	&lt;tr&gt;
	  &lt;th&gt;elements&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;[[#opt]]&lt;/td&gt;&lt;td&gt;Defines one option for the command&lt;/td&gt;
	&lt;/tr&gt;
     &lt;/table&gt;
      &lt;syntaxhighlight lang=&quot;xml&quot;&gt;
                &lt;opt parameter=&quot;&lt;OPT NAME&gt;&quot;
                     description=&quot;&lt;OPT DESCRIPTION&gt;&quot;
                     required=&quot;{true|false}&quot;
                     property=&quot;opts.&lt;OPT NAME&gt;&quot;
                     type=&quot;{string|boolean}&quot;
                     default=&quot;&lt;DEFAULT STRING VALUE&gt;&quot;
                     defaultproperty=&quot;&lt;PROPERTY NAME&gt;&quot;
                  /&gt;
&lt;/syntaxhighlight&gt;

=opt=

       &lt;p&gt;Specifies one command option.
       &lt;/p&gt;
      &lt;table border=&quot;1&quot; class=&quot;wikitable&quot;&gt;
	&lt;caption&gt;attributes&lt;/caption&gt;
	&lt;tr&gt;
	  &lt;th&gt;attribute&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;th&gt;values&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;parameter&lt;/td&gt;&lt;td&gt;The option's name&lt;/td&gt;&lt;td&gt;Any string&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;description&lt;/td&gt;&lt;td&gt;Breifly describe the option's purpose.&lt;/td&gt;&lt;td&gt;Any string&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;required&lt;/td&gt;&lt;td&gt;Breifly describe the option's purpose.&lt;/td&gt;&lt;td&gt;&quot;true&quot; or &quot;false&quot;&lt;/td&gt;
	&lt;/tr&gt;

	&lt;tr&gt;
	  &lt;td&gt;property&lt;/td&gt;&lt;td&gt;Name to set the option value&lt;/td&gt;&lt;td&gt;By convention it is opts.&lt;em&gt;parameter&lt;/em&gt;&lt;/td&gt;
	&lt;/tr&gt;

	&lt;tr&gt;
	  &lt;td&gt;type&lt;/td&gt;&lt;td&gt;Type of parameter. A string option is one that takes an argument. A boolean option does not.&lt;/td&gt;&lt;td&gt;&quot;string&quot; or &quot;boolean&quot;&lt;/td&gt;
	&lt;/tr&gt;

	&lt;tr&gt;
	  &lt;td&gt;default&lt;/td&gt;&lt;td&gt;Literal value to use if the option is not specified.&lt;/td&gt;&lt;td&gt;Any string&lt;/td&gt;
	&lt;/tr&gt;
&lt;tr&gt;
	  &lt;td&gt;defaultproperty&lt;/td&gt;&lt;td&gt;Property name to use if the option is not specified.&lt;/td&gt;&lt;td&gt;Any property that may exist at execution time.&lt;/td&gt;
	&lt;/tr&gt;
       &lt;/table&gt;

=RDF-props=
      &lt;p&gt;Attribute constraints can control the allowed values
	and defaults for the RDF properties of base types.
	The following is a listing of ones that can 
	have constraints applied.
      &lt;/p&gt;
      &lt;table border=&quot;1&quot; class=&quot;wikitable&quot;&gt;
	&lt;tr&gt;
	  &lt;th&gt;name&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;th&gt;domain&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;deployment-basedir&lt;/td&gt;&lt;td&gt; Deployment base directory&lt;/td&gt;&lt;td&gt;Deployment&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;deployment-install-root&lt;/td&gt;&lt;td&gt;Deployment installation root directory &lt;/td&gt;&lt;td&gt;Deployment&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;deployment-startup-rank&lt;/td&gt;&lt;td&gt;Deployment startup rank &lt;/td&gt;&lt;td&gt;Deployment&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;os-arch&lt;/td&gt;&lt;td&gt;Operating system architecture &lt;/td&gt;&lt;td&gt;Node&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;os-family&lt;/td&gt;&lt;td&gt;Operating system family (windows, unix) &lt;/td&gt;&lt;td&gt;Node&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;os-name&lt;/td&gt;&lt;td&gt;Operating system name &lt;/td&gt;&lt;td&gt;Node&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;os-version&lt;/td&gt;&lt;td&gt;Operating system version &lt;/td&gt;&lt;td&gt;Node&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;package-arch&lt;/td&gt;&lt;td&gt;Package architecture &lt;/td&gt;&lt;td&gt;Package&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;package-base&lt;/td&gt;&lt;td&gt;Package base name &lt;/td&gt;&lt;td&gt;Package&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;package-buildtime&lt;/td&gt;&lt;td&gt;Package build time &lt;/td&gt;&lt;td&gt;Package&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;package-filename&lt;/td&gt;&lt;td&gt;Package file name &lt;/td&gt;&lt;td&gt;Package&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;package-filetype&lt;/td&gt;&lt;td&gt;Package file type &lt;/td&gt;&lt;td&gt;Package&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;package-install-rank&lt;/td&gt;&lt;td&gt;Package install rank&lt;/td&gt;&lt;td&gt;Package&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;package-install-root&lt;/td&gt;&lt;td&gt;Package install directory &lt;/td&gt;&lt;td&gt;Package&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;package-release&lt;/td&gt;&lt;td&gt;Package release identifier &lt;/td&gt;&lt;td&gt;Package&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;package-release-tag&lt;/td&gt;&lt;td&gt; Package release tag&lt;/td&gt;&lt;td&gt;Package&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;package-repo-url&lt;/td&gt;&lt;td&gt;URL to the package in the repo &lt;/td&gt;&lt;td&gt;Package&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;package-restart&lt;/td&gt;&lt;td&gt;Boolean flag specifying if a restart is required (true,false) &lt;/td&gt;&lt;td&gt;Package&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;package-version&lt;/td&gt;&lt;td&gt;Package version&lt;/td&gt;&lt;td&gt;Package&lt;/td&gt;
	&lt;/tr&gt;


	&lt;tr&gt;
	  &lt;td&gt;settingValue&lt;/td&gt;&lt;td&gt;Holds the setting value&lt;/td&gt;&lt;td&gt;Setting&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;settingType&lt;/td&gt;&lt;td&gt;User defined type definition of the setting value&lt;/td&gt;&lt;td&gt;Setting&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;
&lt;br/&gt;
Set the allowedvalue-constraints for the RDF properties &lt;code&gt;package-restart&lt;/code&gt; and &lt;code&gt;package-install-root&lt;/code&gt;:
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;constraints&gt;
       &lt;allowedvalue-constraint
                enforced=&quot;true&quot;
                type-property=&quot;package-restart&quot;&gt;
                &lt;allowedvalue value=&quot;true&quot;/&gt;
                &lt;allowedvalue value=&quot;false&quot; default=&quot;true&quot;/&gt;
        &lt;/allowedvalue-constraint&gt;
       &lt;allowedvalue-constraint
                enforced=&quot;false&quot;
                type-property=&quot;package-install-root&quot;&gt;
                &lt;allowedvalue value=&quot;/opt/foo&quot;/&gt;
                &lt;allowedvalue value=&quot;/usr/local/foo&quot;/&gt;
                &lt;allowedvalue value=&quot;/usr/share/foo&quot; default=&quot;true&quot;/&gt;
        &lt;/allowedvalue-constraint&gt;
&lt;/constraints&gt;
&lt;/syntaxhighlight&gt;

&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Resource model]]
[[Category:Modules]]
[[Category:XML]]
[[Category:Types]]</text>
    </revision>
  </page>
  <page>
    <title>Type.properties</title>
    <id>134</id>
    <revision>
      <id>9731</id>
      <timestamp>2009-12-10T21:17:13Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">=Overview=
      &lt;p&gt;This file contains the metadata describing the type. 
      &lt;/p&gt;
      &lt;p&gt;It is typically read by a command via a statement like so:&lt;/p&gt;
      &lt;code&gt;&amp;lt;property file=&amp;quot;${module.dir}/type.properties&amp;quot;/&amp;gt;&lt;/code&gt;

      &lt;p&gt;&lt;strong&gt;Common&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;The table below lists the properties defined for any type&lt;/p&gt;
      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	  &lt;th&gt;Property&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;type.name&lt;/td&gt;&lt;td&gt;Name of the type
	   &lt;/td&gt;
	&lt;/tr&gt;

	&lt;tr&gt;
	  &lt;td&gt;types.description&lt;/td&gt;&lt;td&gt;Description of the type and its use.
	 &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;type.role&lt;/td&gt;&lt;td&gt;Declares it concrete or abstract.
	   &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;type.supertype&lt;/td&gt;&lt;td&gt;The type's supertype
	   &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;type.unique-instance-names&lt;/td&gt;&lt;td&gt;Boolean value specifying if objects should be uniquely named.
	   &lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;
      &lt;p&gt;Example&lt;/p&gt;
      &lt;pre&gt;type.name=Apache
type.description=Module for controlling apache deployments
type.role=concrete
type.supertype=Managed-Entity
type.unique-instance-names=true&lt;/pre&gt;

[[Category:CTL properties]]</text>
    </revision>
  </page>
  <page>
    <title>Type.xml</title>
    <id>202</id>
    <redirect />
    <revision>
      <id>10351</id>
      <timestamp>2009-12-11T22:18:35Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[Type-v10.xml]]</comment>
      <text xml:space="preserve">#REDIRECT [[Type-v10.xml]]</text>
    </revision>
  </page>
  <page>
    <title>TypeCreate Task Reference</title>
    <id>178</id>
    <revision>
      <id>13491</id>
      <timestamp>2010-11-10T01:44:13Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;entity.&quot; to &quot;resource.&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Tasks&lt;/categorytree&gt;

=Description=
      &lt;p&gt;
	Creates a new [[Resource]] type. Task will fail if type already exists
	in model. See [[TypeUpdate Task Reference]]
	task to update an existing type.
      &lt;/p&gt;
    
=Parameters=
      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;depot&lt;/td&gt;&lt;td&gt;The project to update&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;resultproperty&lt;/td&gt;&lt;td&gt;Property to set with
	  success/fail value&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;comment&lt;/td&gt;&lt;td&gt;Text describing purpose of update&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;passfile&lt;/td&gt;&lt;td&gt;File containing authentication info to
	  server. If passfile is not specified, information from the
	   [[framework.properties]]
	  file is used instead.&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;
    
=Parameters specified as nested elements=
      &lt;p&gt;&lt;strong&gt;typeentity&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
	A [[TypeEntity Type Reference|typeentity]]
	specifying type to create.
      &lt;/p&gt;
 
=Examples=

      &lt;p&gt;
	Create a new sub-type of the current type in context.
      &lt;/p&gt;
      &lt;pre&gt;
	&amp;lt;type-create
	   depot=&quot;${resource.depot}&quot;
	   resultproperty=&quot;rs&quot;
	   comment=&quot;Updating from ${ant.project.name} ant task.&quot;
	   passfile=&quot;${ctl.base}/etc/framework.properties&quot;&amp;gt;
	  &amp;lt;typeentity
             superclass=&quot;${context.type}&quot;
             name=&quot;MyType&quot;
             description=&quot;my special type&quot;
             /&amp;gt;
	&amp;lt;/type-create&amp;gt;
      &lt;/pre&gt;

&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Resource model Ant Tasks]]
[[Category:Resource]]</text>
    </revision>
  </page>
  <page>
    <title>TypeEntity Type Reference</title>
    <id>179</id>
    <revision>
      <id>13492</id>
      <timestamp>2010-11-10T01:44:23Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;entity.&quot; to &quot;resource.&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Resource model Ant Types&lt;/categorytree&gt;
=Description=
      &lt;p&gt;
	The TypeEntity data type refers to a map type.
      &lt;/p&gt;

=Attributes=
      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;name&lt;/td&gt;&lt;td&gt;The type name.&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;superclass&lt;/td&gt;&lt;td&gt;The parent type.&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;description&lt;/td&gt;&lt;td&gt;The type description.&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;abstract&lt;/td&gt;&lt;td&gt;Specifies type as abstract.
	  &lt;/td&gt;&lt;td&gt;No. Defaults to false.&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;allowedTypes&lt;/td&gt;&lt;td&gt;Specifies a set of type names
to be used as the allowedTypes resources constraint.
	  &lt;/td&gt;&lt;td&gt;No.&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;

=Examples=

     &lt;p&gt;
       Shows TypeEntity data type used in the [[TypeUpdate Task Reference|type-update]] Ant
       task. 
      &lt;/p&gt;
      &lt;pre&gt;
	&amp;lt;type-update
	   depot=&quot;${resource.depot}&quot;
	   resultproperty=&quot;rs&quot;
	   comment=&quot;Updating from ${ant.project.name} ant task.&quot;
	   passfile=&quot;${ctl.base}/etc/framework.properties&quot;&amp;gt;
	  &amp;lt;typeentity
             superclass=&quot;${context.type}&quot;
             name=&quot;MyType&quot;
             description=&quot;my special type&quot;
             /&amp;gt;
	&amp;lt;/type-update&amp;gt;
      &lt;/pre&gt;
&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Resource model Ant Types]]</text>
    </revision>
  </page>
  <page>
    <title>TypeExists Task Reference</title>
    <id>181</id>
    <revision>
      <id>13493</id>
      <timestamp>2010-11-10T01:44:24Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;entity.&quot; to &quot;resource.&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Tasks&lt;/categorytree&gt;

=Description=
      &lt;p&gt;
	Determines if type exists in model.
      &lt;/p&gt;
    
=Parameters=
      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;depot&lt;/td&gt;&lt;td&gt;The project to update&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;resultproperty&lt;/td&gt;&lt;td&gt;Property to set with
	  success/fail value&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;comment&lt;/td&gt;&lt;td&gt;Text describing purpose of update&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;passfile&lt;/td&gt;&lt;td&gt;File containing authentication info to
	  server. If passfile is not specified, information from the
	  	[[framework.properties]]
	  file is used instead.&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;
    
=Parameters specified as nested elements=

      &lt;p&gt;&lt;strong&gt;typereference&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
	A [[TypeReference Type Reference|typereference]]
	specifying type to check.
      &lt;/p&gt;
 
=Examples=
      &lt;p&gt;
	Fail the command unless type, MyType, exists.
      &lt;/p&gt;
      &lt;pre&gt;
	&amp;lt;type-exists
	   depot=&quot;${resource.depot}&quot;
	   resultproperty=&quot;rs&quot;
	   comment=&quot;&quot;&amp;gt;
	  &amp;lt;typereference name=&quot;MyType&quot;/&amp;gt;
	&amp;lt;/type-exists&amp;gt;
	&amp;lt;condition property=&quot;typeExists&quot;&amp;gt;
	  &amp;lt;equals arg1=&quot;0&quot; arg2=&quot;${rs}&quot;/&amp;gt;
	&amp;lt;/condition&amp;gt;
	&amp;lt;fail unless=&quot;typeExists&quot;&amp;gt;Type 'MyType' does not exist in map
	for project '${resource.depot}'&amp;lt;/fail&amp;gt;

      &lt;/pre&gt;
&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;
[[Category:Resource]]
[[Category:Resource model Ant Tasks]]</text>
    </revision>
  </page>
  <page>
    <title>TypeReference Type Reference</title>
    <id>182</id>
    <revision>
      <id>13494</id>
      <timestamp>2010-11-10T01:44:26Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;entity.&quot; to &quot;resource.&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Types&lt;/categorytree&gt;
=Description=
      &lt;p&gt;
	The TypeReference data type refers to a map type.
      &lt;/p&gt;
    
=Attributes=
      &lt;table&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;name&lt;/td&gt;&lt;td&gt;The type name.&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;
  
=Examples=

     &lt;p&gt;
       Shows TypeReference data type used in the [[TypeExists Task Reference|type-exists]]
       task. 
      &lt;/p&gt;
      &lt;pre&gt;
	&amp;lt;type-exists
	   depot=&quot;${resource.depot}&quot;
	   resultproperty=&quot;rs&quot;
	   comment=&quot;&quot;&amp;gt;
	  &amp;lt;typereference name=&quot;MyType&quot;/&amp;gt;
	&amp;lt;/type-exists&amp;gt;
      &lt;/pre&gt;
&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Resource model Ant Types]]</text>
    </revision>
  </page>
  <page>
    <title>TypeUpdate Task Reference</title>
    <id>180</id>
    <revision>
      <id>13495</id>
      <timestamp>2010-11-10T01:44:26Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;entity.&quot; to &quot;resource.&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Tasks&lt;/categorytree&gt;

=Description=
      &lt;p&gt;
	Updates an existing type. Task will fail if type does not already exist
	in model. See [[TypeCreate Task Reference]]
	task to create a new type.
      &lt;/p&gt;

=Parameters=
      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;depot&lt;/td&gt;&lt;td&gt;The project to update&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;resultproperty&lt;/td&gt;&lt;td&gt;Property to set with
	  success/fail value&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;comment&lt;/td&gt;&lt;td&gt;Text describing purpose of update&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;passfile&lt;/td&gt;&lt;td&gt;File containing authentication info to
	  server. If passfile is not specified, information from the
	    [[framework.properties]]
	  file is used instead.&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;

=Parameters specified as nested elements=

      &lt;p&gt;&lt;strong&gt;typeentity&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
	A [[TypeEntity Type Reference|typeentity]]
	specifying type to update.
      &lt;/p&gt;
 
=Examples=

      &lt;p&gt;
	Update an existing type &amp;apos;MyType&amp;apos;.
      &lt;/p&gt;
      &lt;pre&gt;
	&amp;lt;type-update
	   depot=&quot;${resource.depot}&quot;
	   resultproperty=&quot;rs&quot;
	   comment=&quot;Updating from ${ant.project.name} ant task.&quot;
	   passfile=&quot;${ctl.base}/etc/framework.properties&quot;&amp;gt;
	  &amp;lt;typeentity
             superclass=&quot;${context.type}&quot;
             name=&quot;MyType&quot;
             description=&quot;my special type&quot;
             /&amp;gt;
	&amp;lt;/type-update&amp;gt;
      &lt;/pre&gt;

&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;
[[Category:Resource]]
[[Category:Resource model Ant Tasks]]</text>
    </revision>
  </page>
  <page>
    <title>Type modeling</title>
    <id>585</id>
    <revision>
      <id>14049</id>
      <timestamp>2010-11-10T15:32:20Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;/jackrabbit/repository/workbench&quot; to &quot;/jackrabbit/repository/controltier/projects&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Resource model&lt;/categorytree&gt;

This document describes the Type Modeling system used in ControlTier.  The Type system in use is similar in many ways to some Object Oriented programming languages (such as Java), and borrows concepts from them.  It is also built on top of the Resource Description Format (RDF), and so its behavior also depends on some underlying concepts used by RDF.  Understanding RDF is not required to understand the Type system, but some concepts may come up.

== Description ==

ControlTier uses a class based Type system to allow you to create a data model to represent the various components of your '''Business Service'''. 

Each Object in your model is a member of a particular class, called a Type.  Each Type has a set of [[#Properties]] and [[#Commands]], that govern how Objects can be used and what they can do.  You can modify some of these features, such as add [[Constraints]] to Properties or override Commands, but you cannot add new Properties to the Types or change all behaviors.

Every Type in the system also belongs to a meta-class called an &quot;Order&quot;.  Think of an Order as a secondary classification of the Types.  The Order of a Type determines which Properties are defined for the Type, and some of its behavior. (See [[#Orders]])

You can create subclasses of the Types, and each Subtype initially duplicates the behavior and property constraints of the Supertype, but can be altered to extend or restrict those features. (See [[#Subtypes]])

When using the Type Modeling system to refine your model, it is the best practice to create Subtypes and override commands and constraints, rather than modifying any of the Types that come installed with ControlTier.  This is so that in the future when you may upgrade your ControlTier server, those builtin Types which have been upgraded will not affect your existing Object model.

== The Type System ==

Types and Objects in the ControlTier system have some features that may be recognizable to you if you have done Object Oriented Programming (OOP): Commands (i.e. methods), inheritance, properties (similar to members), instantiation, constraints (similar to type safety). However this system is limited in many places and is not meant to be a full featured &quot;programming&quot; model.

It is designed as a way to model a dataset as a collection of related Resources and their Properties, and it is built on RDF, and the RDFS schema system.  The RDFS Schema allows our Typing system to have inheritance, and on top of that have been added the OOP constructs.

In this system we have some nomenclature which should be defined:

; Type : A member of the hierarchical classification system
; Class : Synonymous with Type, but not typically used except in reference to OOP
; Object : An instance of a Type
; Resource : Typically synonymous with Object, it is also the name of the Base Type

== Basics of Modeling ==

The modeling system of ControlTier is complex, and it needs to be in order to accurately represent complex systems and also to be functionally useful.

However, at the basic level there are only three important concepts in the modeling system:

# Resources
# Relationships
# Properties

[[Image:dispatching-modeling-basics.png|Basics of modeling]]

;Resources : Every resource that we want to represent in the system is called a Resource.  

;Relationships : Every Resource can have multiple other Resources as &quot;parents&quot; (also known as the property, &quot;referrers&quot;).  Some Resources can have multiple other Resources as &quot;children&quot; (also known as the property, &quot;resources&quot;).

;Properties : Every Resource can have literal values attached to it which are identified by a name

These basics allow you to model things in your environment, as well as relationships between them and some of the pertinent data about them. In addition to these concepts, the only other important concept to add is that of Types.

;Type : A class of Resources, which confers on its members the ability to have certain Properties, Relationships, and other specific traits.

You can see that for example, there is a need to differentiate between the concept of a Node and a software Service, and that Resources of each of those Types will have different needs: different Properties will be necessary, as well as the ability to have only certain other Types of Resources as children. 

== Types ==
Each Type has the following features:

* A Supertype, from which all other features are initially inherited
* An Order Type, which may be inherited, or may be equivalent to the Type itself
** Each Order Type may add features to itself and its subtypes
* A unique name
* A description
* A set of configuration values, which determine some of its behaviors
* A set of Object Properties, which define data that Objects can hold
** Each Property has a name and a type, which is either a String-type (literal string values), or Instance-type (Object values)
** All Types have the 'referrers' Instance-type Property
* A set of Constraints on the Properties, which may be empty or may default to certain values

Each Type ''may'' have the following features:

* A set of Commands, and associated command-handler files and directory structure
** These files are packaged as a Java JAR file when creating a [[#Modules|Module]]
* A set of Subtypes

=== Core Types ===
{{main|Core Type Guide}}

ControlTier comes with a set of [[Core Type Guide|Core Types]], which provide a framework for modeling a Business Service.  It also comes with a number of additional Types which extend the Core Types to provide specific uses or solve specific problems, such as managing an installation of the JBoss or Tomcat servers.

This screenshot lays out all of the Core Types that are included in the ControlTier system 
(except &quot;Tomcat&quot; which is not a Core Type):

[[Image:Typemodel-base-types.png|The Core Types]]

As you can see, the Type system is hierarchical.  And almost each different icon you see for the Core Types represents a different one of the [[#Orders]].  

''Resource'' is the top-most Type in the system, and it has very few features of its own.  The other Core Types each add unique features (Commands, Properties, or behaviors) that are available to all of their subtypes:

* ''Assembly'' - This type adds a &quot;resources&quot; property, allowing it to have Resource objects as Child Dependendencies.
** ''[[Managed-Entity]]'' - This type adds Commands, allowing it to be packaged as a Module and deployed to a host. (See [[#Modules]])
*** ''[[Deployment]]'' - This Type adds properties for configuring deployed Objects, facilitating software or file deployments.
**** ''[[Builder]]'' - This Type provides a basis for executing software builds and creating Packages
**** ''[[Mediator]]'' - This Type adds commands, associated Settings, and constraints, to support coordinating the actions of multiple Objects
***** ''[[Site]]'' - This Type represents a cohesive Business Service 
***** ''[[Updater]]'' - This Type dynamically changes the object model for a Site
**** ''[[Service]]'' - This Type represents a stateful software service 
*** ''[[Node]]'' - This Type represents computer hosts in the system that are registered with ControlTier, and allows modeling their relationships with the other Objects.
*** ''[[Package]]'' - This Type represents a discrete computer file or archive.
* ''[[Setting]]'' - This type adds properties allowing a simple value to be set
* ''Statistic'' - Not commonly used, this Type adds properties to hold some measurement value

==== Orders ====

Orders are the secondary classification system of Types (some refer to these as meta types).  You will usually not need to worry about Orders, but it is useful to recognize why certain Core Types are different from each other.

The Types which are also Orders are highlighted in the below screenshot:

[[Image:Typemodel-orders.png|The Order Types]]

New Subtypes will gain the Order of their Supertype, meaning they gain all of the features that that Order provides.

=== Properties ===

Properties of Types come in two types:

* string
* instance

String-type properties allow objects to have a literal string value.  Below is the &quot;deployment-basedir&quot; property of the Deployment type:

[[Image:Typemodel-string-property.png|A String Property]]

[[Image:Typemodel-string-property-object.png|A String Property for an Object]]

Instance-type properties allow Objects to add other Objects as dependencies.  There are only two commonly used Instance-type properties: 'resources', and 'referrers'.  

[[Image:Typemodel-instance-property.png|An Instance Property]]

[[Image:Typemodel-instance-property-object.png|An Instance Property for an Object]]


See [[Attributes]] for the equivalent to user-defined properties for a Type.

==== Property View ====

Each Object that is defined in the ControlTier system has a Property View file.  The file is called &quot;resource.properties&quot; and is generated by the server when an Object is stored or updated in the model.  This file is distributed to CTL clients, and contains all of the information about the Object and its Properties.

The file is in the Java &quot;Properties&quot; format, which simply means it is a set of key,value pairs.  Here when we refer to a Java Property, we simply mean the key name used in the file, as opposed to a Type Property used in the model.

For each Type Property, there is at least one Java Property stored in the resource.properties file.

For example, the &quot;deployment-basedir&quot; Property of the Deployment type is stored as the &quot;resource.deployment-basedir&quot; Java Property:

&lt;pre&gt;
resource.deployment-basedir=/usr/opts/myservice
&lt;/pre&gt;

In addition to containing entries for the Object itself, this file may contain entries for Child or Parent Dependencies, or both.

==== Constraints ====
{{main|Constraints}}
For each Property, a Type can define Constraints on the property. For String-type properties, this can either restrict which values are allowed, or provide a default set of values.  For Instance-type properties, this can restrict the Types of Objects that are allowed to be set on the property, whether there can be only one or more than one Object of that Type set, and they can be used to set a collection of defaults for new Objects.

==== Attributes ====
{{main|Attributes}}
Each String-type property can also have an Attribute name assigned to it.  This provides a customizable way of referring to Property values inside scripts or command options.  The Property value is added to the Java Properties (See [[#Property View]]) using the attribute name as well, in the form &lt;code&gt;resource.attribute.ATTRIBUTE&lt;/code&gt;.

This is useful when you have Child or Parent Dependencies of an Object and want to refer to a particular property value that is imported by them, or when you have Setting dependencies.

=== Type configurations ===

Each Type has a set of configuration values:

[[Image:Typemodel-type-configuration.png|Type configuration]]

Each Type has two Object Creation Settings:

* Creation role: either &quot;concrete&quot;, or &quot;abstract&quot;.  If &quot;abstract&quot;, then the Type is not allowed to have Objects created for it.
* Unique Object Names: true/false.  If &lt;code&gt;True&lt;/code&gt;, then all Objects of this Type must have a unique name.

To change the Object Creation Settings, choose the &quot;Edit Type&quot; link (Pencil icon) on the Type View page.  Under the Advanced Options you can see options to change these values:

[[Image:Typemodel-type-object-settings.png|Type Object settings]]

The Types also have a set of Command Module Settings:

* Logger Name: a string,  unused.
* Transforms Directory: A path, used by the Documents feature. (optional)
* Failure Notifications: true/false.  If True, then command failure notifications are sent to the Notification Email.
* Notification Email: An email address where failure notifications are sent.
* Dependencies View: Either Children, Parents, or both.
* View Degrees away: An integer from 1-4

To change the Command Module Settings, click the Pencil icon next to the list of Command Module Settings in the Type View.

[[Image:Typemodel-edit-module-settings.png|Type module settings]]

You will see this form:

[[Image:Typemodel-type-module-settings.png|Type module settings]]

The Dependencies View and View Degrees determine what Objects' data are included in the [[#Property View]].


=== Commands ===
{{main|Workflow Development Guide}}
Sub-types of the Managed-Entity Base Type gain the ability to have Commands.

Types inherit all of their Supertype's Commands.  They can also redefine, or ''override'' any inherited command.  This allows Subtypes to implement hooks, or just add or modify the actions performed by the Supertype's commands.

Every Command is of a certain type:

* [[Shell command]] - use a shell interpreter, such as bash, or cmd.exe, to execute a script
* [[Ant command]] - use the Ant XML-based language to implement a script
* [[BSF command]] (Bean Scripting Framework) - use a variety of languages, such as Python, Groovy, Ruby, etc. to execute a script
* [[Workflow command]] - Execute a sequence of other Commands, and handle errors
* [[:Category:Dispatch commands|Dispatch command]] - Execute a Command on a set of Objects

Commands are defined in either a [[type.xml]] file, or in the [[Graphical type editor]].  When the Type's [[#Modules|Module]] is generated, those commands are converted into &quot;handler&quot; files.  Each handler is actually an Ant handler script.  When the Command is executed on the commandline or in [[Jobcenter]], then the Ant handler is executed.

Commands are also either defined as &quot;Static&quot; or &quot;Instance&quot; commands.  A Static Command can be executed in a Static Context, without requiring that an Object of the Type exists.

=== Modules ===
{{:Modules}}

== Create Types ==

You can create and develop new Types using two methods:

# the Workbench GUI
#* Use the web interface to modify your Types and create Modules
# Source based development
#* Use a text editor to edit files, and the ProjectBuilder Type's commands via the command-line CTL tool to build the source into a usable Module.

Using the GUI is a simple way to get started, but prolonged or complex development is best done using established software development practices, such as checking in your code to a SCM repository (such as CVS or Subversion), and as such the source-based method is preferable.

You can start out using the GUI and if you want to switch to using Source based development, you can follow the instructions here: [[Converting Workbench modules for use with ProjectBuilder]]

=== Pick a Supertype ===

However you decide to develop, the first question you should ask is &quot;What Supertype should I use?&quot;

ControlTier's Core Types, and all of the other Builtin Types offer a variety of solutions and features.  You should examine them to determine what best suits your needs.

In the examples below we have decided to use Service as the Supertype.  This is a good point to start from if you are implementing a Type to control some custom software service that does not already have a Type to control it.

=== Using Workbench ===

Workbench provides a full user interface for developing all facets of a Type.

To create a Type, first navigate to the Type you want as the Supertype.

Click the &quot;Create Subtype&quot; button the right side of the page:

[[Image:Typemodel-gui-create-subtype.png|Create Subtype button]]

Fill in the Name, Description, and optionally change the Object Creation Settings under the Advanced Settings section, then Click the &quot;Save Type&quot; button:

[[Image:Typemodel-gui-create-subtype-form.png|Create Subtype form]]

After your Type is created, it has not yet been &quot;staged&quot; as a Module.  Once you have made some changes to your Type, you can use the &quot;Package Commands&quot; button to generate the Module archive.

=== Using Source ===

Source based development makes use of a utility Type called ProjectBuilder.

Recall that the Builder [[#Base Types|Base Type]] is meant for &quot;executing software builds and creating Packages&quot;.  The ProjectBuilder Type is made to do exactly that for XML files called &quot;type.xml&quot;, which are built into Modules.  ProjectBuilder also has some commands that can help get you started with development.

First, execute the &lt;code&gt;create-type&lt;/code&gt; command on the commandline, using CTL:

&lt;pre&gt;
$ ctl -p demo -m ProjectBuilder -c create-type
&lt;/pre&gt;

This command will prompt you for several pieces of information, including the Name, Description, Supertype, and directory to store the source code in.

&lt;pre&gt;
Name of type: 
&lt;/pre&gt;
'''WidgetService'''
&lt;pre&gt;
Description of type: 
&lt;/pre&gt;
'''Controls the WidgetServer program'''
&lt;pre&gt;
Choose a supertype:  ([Managed-Entity], Package, Builder, Deployment, Service)
&lt;/pre&gt;
'''Service'''
&lt;pre&gt;
Directory where module files will be created:  [/Users/greg/ctier3/ctl/src]
&lt;/pre&gt;
[hit enter to accept the default location of $CTL_BASE/src]
&lt;pre&gt;
Creating module definition files in directory: /Users/greg/ctier3/ctl/src ...
Creating directory structure...
Created dir: /Users/greg/ctier3/ctl/src/modules/WidgetService
Created dir: /Users/greg/ctier3/ctl/src/modules/WidgetService/bin
Created dir: /Users/greg/ctier3/ctl/src/modules/WidgetService/commands
Created dir: /Users/greg/ctier3/ctl/src/modules/WidgetService/objects
Created dir: /Users/greg/ctier3/ctl/src/modules/WidgetService/templates
Initializing type module from template dir: /Users/greg/ctier3/ctl/modules/ProjectBuilder/templates/boilerplate ...
Copying 2 files to /Users/greg/ctier3/ctl/src/modules/WidgetService
Define commands and attributes in this file: /Users/greg/ctier3/ctl/src/modules/WidgetService/type.xml
&lt;/pre&gt;

You can see that the command created some directories, based at the path &quot;$CTL_BASE/src/WidgetService&quot;, and a file called &quot;type.xml&quot; there.

type.xml is the main source code for your Type.  You can edit it with your preferred text editor, and it is recommended that for important code you check the entire &quot;$CTL_BASE/src&quot; directory into a Source Code Management repository like Subversion.

Once you have developed your Type to a point that you want to test, you can use the ProjectBuilder &lt;code&gt;build-type&lt;/code&gt; command:

&lt;pre&gt;
$ ctl -p demo -m ProjectBuilder -c build-type -- -type WidgetService
Base directory where module source files reside [/Users/greg/ctier3/ctl/src]
&lt;/pre&gt;
[hit enter for default, or type the path to your src dir]
&lt;pre&gt;
Target directory where build files are generated [/Users/greg/ctier3/target]
&lt;/pre&gt;
[hit enter for default, or type a path to store the build artifacts in]
&lt;pre&gt;
Building type using the buildmodule.xml via classloader
converting type.xml for module: WidgetService
generating handlers...
packaging module: WidgetService
Copying 1 file to /Users/greg/ctier3/ctl/src/modules/WidgetService
Copying 1 file to /Users/greg/ctier3/ctl/src/modules/WidgetService
Deleting: /Users/greg/ctier3/ctl/src/modules/WidgetService/module.properties.temp
Building jar: /Users/greg/ctier3/target/modules/WidgetService-1.jar
&lt;/pre&gt;

This has generated the WidgetService-1.jar file.  This is the Module archive that contains all of the files needed to define your Type in the Type Model, as well as execute the Commands that you may have defined.

At this point you could manually upload the Module to Workbench to install it in the server, but it is easier to just add the &lt;code&gt;-upload&lt;/code&gt; option to the &lt;code&gt;build-type&lt;/code&gt; command.  Further, by adding the &lt;code&gt;-deploy&lt;/code&gt; option you will also deploy the Module to your local CTL installation, allowing you to use the Commands in the Module right away.

Enter the same input values you provided earlier when you run this command:

&lt;pre&gt;$ ctl -p demo -m ProjectBuilder -c build-type -- -type WidgetService -upload -deploy&lt;/pre&gt;

You will see this additional output:

&lt;pre&gt;
...
Uploading built module to server ...
processing files in directory: /Users/greg/ctier3/target/modules
scanning for files matching pattern: (WidgetService)-([0-9]+)\.jar
Uploading jar: /Users/greg/ctier3/target/modules/WidgetService-1.jar to server: 'localhost' ...
Installing new build of &quot;WidgetService&quot; module from server ...
Getting: http://localhost:8080/jackrabbit/repository/controltier/projects/demo/publish/modules/WidgetService-head.jar
To: /Users/greg/ctier3/ctl/var/tmp/downloads/demo/WidgetService-head.jar
Created dir: /Users/greg/ctier3/ctl/projects/demo/modules/WidgetService
Expanding: /Users/greg/ctier3/ctl/var/tmp/downloads/demo/WidgetService-head.jar into /Users/greg/ctier3/ctl/projects/demo/modules/WidgetService
Attempting to get Service-head.jar ...
Getting: http://localhost:8080/jackrabbit/repository/controltier/projects/demo/publish/modules/Service-head.jar
To: /Users/greg/ctier3/ctl/var/tmp/downloads/demo/Service-head.jar
Not modified - so not downloaded
Service up to date
Attempting to get Deployment-head.jar ...
Getting: http://localhost:8080/jackrabbit/repository/controltier/projects/demo/publish/modules/Deployment-head.jar
To: /Users/greg/ctier3/ctl/var/tmp/downloads/demo/Deployment-head.jar
Not modified - so not downloaded
Deployment up to date
&lt;/pre&gt;

You can see that the module was uploaded to the Server, and that it was subsequently downloaded and then deployed.

If you now look at the Workbench GUI, you will find that the WidgetService Type is shown in the Type hierarchy as a Subtype of Service.

[[Image:Typemodel-service-subtype.png|WidgetService is a subtype of Service]]

{{Manual/navbox}}

[[Category:Resource model]]</text>
    </revision>
  </page>
  <page>
    <title>Types</title>
    <id>1569</id>
    <redirect />
    <revision>
      <id>9905</id>
      <timestamp>2009-12-11T00:18:54Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[Category:Types]]</comment>
      <text xml:space="preserve">#REDIRECT [[:Category:Types]]</text>
    </revision>
  </page>
  <page>
    <title>Understand CTL OO terminology</title>
    <id>1603</id>
    <redirect />
    <revision>
      <id>10551</id>
      <timestamp>2009-12-12T16:23:38Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>moved [[Understand CTL OO terminology]] to [[Object-oriented programming terminology]]</comment>
      <text xml:space="preserve">#REDIRECT [[Object-oriented programming terminology]]</text>
    </revision>
  </page>
  <page>
    <title>Understand CTL dispatching mechanism</title>
    <id>1576</id>
    <redirect />
    <revision>
      <id>10035</id>
      <timestamp>2009-12-11T04:06:35Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <comment>moved [[Understand CTL dispatching mechanism]] to [[CTL dispatching mechanism]]</comment>
      <text xml:space="preserve">#REDIRECT [[CTL dispatching mechanism]]</text>
    </revision>
  </page>
  <page>
    <title>Understanding Commands and Command Dispatching</title>
    <id>749</id>
    <revision>
      <id>10669</id>
      <timestamp>2009-12-12T20:09:41Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">{{under construction}}

The goal of this page is to provide an introduction to the concept of Commands and Command Dispatching as they relate to the ControlTier platform.

=What problems do Commands and a Command Dispatcher solve?=
'''For an overview of what ControlTier is all about, check out the [[What_is_ControlTier]]? page.'''

When automating application management tasks, there are a variety of issues that complicate matters:
* Coordination/ordering (n-tier apps)
* Lookup (server farms)
* Cross platform and often tool specific
* Inflexibility (Ball-of-mud anti-pattern, Scale differences)
* Packaging, distributing, documenting
* Hard to administrate centrally


=The basics=
==The Command abstraction==
Standardizes management procedures

Commands are the end points 

Establish a consistent interface to end users

Lets developers hide mixed language implementations 

==Command Dispatcher abstracts the physical node infrastructure==
Resolves to target nodes

Hides local vs remote execution

Uses a logical model describing nodes

==Dispatched execution==
Looping for command execution across multiple nodes

Filtering based on node features

Threading to support concurrent or sequential execution

Error management logic to continue or fail 

Execution management for single commands, shell scripts,and also data context

==Example: ad-hoc command dispatch==
Register some nodes to the model

Run some commands using nodedispatch

Can run in Jobcenter

=Beyond the basics=
==Defined commands: Command dispatcher modules==
Data driven and composable

Resolves to a command handler in a module

Creates a data binding &quot;context&quot;: consistent data model

Provides an interface that separates from implementation

Local-execution point of view

Way of creating a standardized function library

Modular and flexible: Plugin your existing scripts

Commands combine as Workflows: Have Process Flow View

Package-centric: versioned and distributed

==Objects: Finer grained control points targeted by the Dispatcher==
Describe components residing across nodes (new level of network abstraction in nodedispatch)

Objects provide an encapsulated data context

Objects can collaborate by calling commands defined in other objects

Mediator provides a logical collection describing whole-part  hierarchies

DispatchCommand handler type provides hierarchical control model (useful for controlling an aggregated set of objects from one control point)

Can also define a management procedure for object commands in Jobcenter

==Example: Defined commands==
Nodes registered already, now register some Services and a Site

Execute a command to all Services via nodedispatch

Execute a command to all Services via a Site

Setup a Job in JobCenter

=Why this is cool=
Not monolithic and now modular and composable for reuse

Simplifies centralized administration from network abstraction. Use across environments

Hide complex implementations behind command interfaces

Standardizing framework</text>
    </revision>
  </page>
  <page>
    <title>Understanding ControlTier's virtualized administration</title>
    <id>116</id>
    <redirect />
    <revision>
      <id>810</id>
      <timestamp>2008-12-29T20:23:46Z</timestamp>
      <contributor>
        <username>Redirect fixer</username>
        <id>9</id>
      </contributor>
      <comment>[[Understanding the virtualized administration paradigm]] has been moved, it is now a redirect to [[Understanding the abstracted administration paradigm]]</comment>
      <text xml:space="preserve">#REDIRECT [[Understanding the abstracted administration paradigm]]</text>
    </revision>
  </page>
  <page>
    <title>Understanding ControlTier's virtualized administration paradigm</title>
    <id>120</id>
    <redirect />
    <revision>
      <id>811</id>
      <timestamp>2008-12-29T20:23:55Z</timestamp>
      <contributor>
        <username>Redirect fixer</username>
        <id>9</id>
      </contributor>
      <comment>[[Understanding the virtualized administration paradigm]] has been moved, it is now a redirect to [[Understanding the abstracted administration paradigm]]</comment>
      <text xml:space="preserve">#REDIRECT [[Understanding the abstracted administration paradigm]]</text>
    </revision>
  </page>
  <page>
    <title>Understanding the abstracted administration paradigm</title>
    <id>1566</id>
    <redirect />
    <revision>
      <id>9892</id>
      <timestamp>2009-12-10T23:19:20Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <comment>moved [[Understanding the abstracted administration paradigm]] to [[Abstracted administration]]:&amp;#32;way too long and not searchable</comment>
      <text xml:space="preserve">#REDIRECT [[Abstracted administration]]</text>
    </revision>
  </page>
  <page>
    <title>Understanding the client</title>
    <id>591</id>
    <revision>
      <id>13593</id>
      <timestamp>2010-11-10T01:48:48Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;depots&quot; to &quot;projects&quot;</comment>
      <text xml:space="preserve">&lt;noinclude&gt;&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Architecture&lt;/categorytree&gt;&lt;/noinclude&gt;
:''Note'': This document is not yet complete

= Overview = 

This document describes how integration occurs between the ControlTier Server and the ControlTier Client (CTL).  It describes how the ControlTier Data Model is shared between the Server and Client in a pull-based mechanism, and how that data is installed for the Client. It covers the directory structure and files in the Client installation.

The Client and Server both hinge on a special Type called &quot;Node&quot;, which plays a crucial role in determining what Objects are installed in a client.

More Information:

* [[CTL architecture]]
* [[Architecture]]

= Key Concepts =

* Server - this is the ControlTier server software, which consists of the Workbench GUI, a WebDAV file repository, and a HTTP-based API which is used by the Client  
* Client - this is an installation of the CTL software.  It consists of two directories, the CTL_HOME where the CTL software itself is stored, and a CTL_BASE which is the working directory for the software. (Similar to the way that the Apache Tomcat software separates CATALINA_HOME and CATALINA_BASE directories.)
* Node - this is a computer or VM on which the Server or Client software is installed
** This is also the name of a Type in the ControlTier Type Model that represents an instance of the Client installed on a computer or VM (See: [[Type modeling]])
* Project/Depot - this is a top-level container of model data on the Server.  To use ControlTier, you must have at least one Project. (See [[#Depots and Projects|below]])
** '''&quot;Depot&quot; is often used synonymously with &quot;Project&quot;.'''
** In the Client installation, the &quot;projects&quot; directory contains one directory for each Project that the Client has registered with.

== Depots and Projects ==

When you install ControlTier, your server holds all of the data and models in what is called a Project. In most simple use cases, you only need a single Project (but if desired you can create more than one.) 

When you install the CTL client software, you register it to the Server in the context of a particular Project, which you provide by name.  For each Project that you register the client with, a corresponding directory is created in the &lt;code&gt;CTL_BASE/projects&lt;/code&gt; directory of the client installation. This &quot;Depot directory&quot; contains all of the working files and installed objects that the Client uses for that particular Project/Depot.

= Description =

The ControlTier Server contains a data model for the Types and Objects that you define.  Each Object is of a certain Type and has a set of string properties and may have Object resources. Each Type has some configuration data, some defaults and constraints for its Objects, and some Commands.  It also has some files which are generated from this metadata and other files which may be added by the developer.

In order for a Type to be installed into a Client, the Type's metadata and other files must be packaged up into a single archive, called a Module.  This Module archive contains the metadata for the Type, stored in several Java Properties files, the Command handler files in XML format, and any templates or other resources added by the developer.

In order for an Object to be installed into a Client, only a single file is required, which is a Java Properties file called the Entity Data file, named &quot;resource.properties&quot;, which is generated to contain all of the metadata about the Object, including its property values, imported Attribute values, and information about its Dependencies.

These two artifacts, the Type's Module archive, and the Object's Entity Data, are both required by the ControlTier Client in order to perform the actions and commands that the Object can do.

= Exported Data =

The Data Model in the ControlTier Server is a RDF-based model.  When the data from this model is &quot;exported&quot; for use by Clients, it is typically written to text files using the simple key/value format Java Properties format.  This is true for both the Types in the model, and the Objects.


= Nodes and Clients =

A Node Object in the ControlTier Server represents a ''single registered installation of the ControlTier Client''.  Every Client installation should be registered with the Server in order to take part in the system, and it will be represented as a Node Object.

[[Image:integration-clients-on-hosts.png|ControlTier Clients on hosts]]

When you install the server (See [[Installation]]), the various server components are installed, as well as an instance of the Client which is sometimes called the Manager Client.  

[[Image:integration-server-on-host.png|ControlTier Server on a host]]

When you create a new Project in the server you will see that a new Node object will be created for you representing the Manager Client installation that is in place on the same host as the Server.

[[Image:integration-manager-node.png|The initial Manager Node]]

When you install the ControlTier Client on a new host, you will configure it to know the hostname of the Server.  Then when you first execute the &quot;ctl-install&quot; command, the Client installation will ''register'' itself to the Server, and a new Node will be created.

[[Image:integration-multiple-nodes.png|Registered nodes]]

= Client installation directories =

When you install the ControlTier Client (CTL), two important directories are created:

;''CTL_HOME'': The location of the CTL client scripts and support files
;''CTL_BASE'': The location of the client workspace and Node Integration files

For example, if you install the entire Server suite, you will have a set of directories as shown below:

[[Image:integration-client-directories.png|Installed client directories]]

''CTL_BASE'' contains these directories:

[[Image:integration-client-ctl-base-dirs.png|Contents of CTL_BASE]]

* projects/ - contains the workspaces for each project that the Node is registered to
** Underneath &quot;projects&quot; is one directory for each project
* etc/ - contains configuration files for the CTL client
* modules/ - contains the initial installed Modules
* src/ - a space to store user source code
* var/ - directory containing logs, and other temporary or miscellaneous files.

== Type Modules ==

The contents of the Module archive generated for a Type can be easily viewed.  In Workbench, click on the &quot;Files&quot; tab to see the entire set of files which will be included in the Module.

[[Image:integration-type-files.png|Type files used in a Module]]
 
A Type is made up of several Java Properties files:

* type.properties - describes the 
* module.properties
* commands.properties


(... TODO: complete page)
{{Manual/navbox}}</text>
    </revision>
  </page>
  <page>
    <title>Understanding the virtualized administration paradigm</title>
    <id>121</id>
    <redirect />
    <revision>
      <id>809</id>
      <timestamp>2008-12-29T20:23:46Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>[[Understanding the virtualized administration paradigm]] moved to [[Understanding the abstracted administration paradigm]]</comment>
      <text xml:space="preserve">#REDIRECT [[Understanding the abstracted administration paradigm]]</text>
    </revision>
  </page>
  <page>
    <title>Undocumented Ant Typedefs</title>
    <id>1699</id>
    <revision>
      <id>12351</id>
      <timestamp>2010-01-30T00:49:00Z</timestamp>
      <contributor>
        <username>Gschueler</username>
        <id>8</id>
      </contributor>
      <comment>/* Ant Types */</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant&lt;/categorytree&gt;
This page contains a list of Ant tasks and types which have not yet been documented on this Wiki. The majority of them are used by commands defined in the Core Types but may be useful outside of them.

==Ant Tasks==
* [[add-batch-operation Task Reference]]
* [[add-batch-parameters Task Reference]]
* [[create-batch-operation Task Reference]]
* [[create-batch-request Task Reference]]
* get-process-view
* jobcenter-find-jobs
* jobcenter-upload-jobs
* [[LatestVersionCheck Task Reference]]
* [[ObjectAddResource Task Reference]]
* [[ObjectAddTags Task Reference]]
* [[perform-batch-request Task Reference]]
* [[CreateProject Task Reference]]
* list-projects
* [[ImportPar Task Reference]]
* import-lib
* [[ProjectExists Task Reference]]
* [[SetTypeConstraint Task Reference]]
* module-uploadjar

==Ant Types==
* [[AllowedParents Type Reference]]
* [[AllowedTypes Type Reference]]
* [[AllowedValue Type Reference]]
* [[BaseRestriction Type Reference]]
* [[batch-operation Type Reference]]
* [[CanValidate Type Reference]]
* [[DateRestriction Type Reference]]
* [[EntityParameter Type Reference]]
* [[ObjectGetAllowedTypes Type Reference]]
* [[PropertiesParameter Type Reference]]
* [[Query Type Reference]]
* [[RelationRestriction Type Reference]]
* [[ResourceRestriction Type Reference]]
* [[RestrictionProducer Type Reference]]
* [[SingletonTypes Type Reference]]
* [[StringParameter Type Reference]]
* [[TextRestriction Type Reference]]
* [[VersionEntityReference Type Reference]]

{{Reference/navbox}}

[[Category:Ant]]</text>
    </revision>
  </page>
  <page>
    <title>Updater</title>
    <id>1071</id>
    <redirect />
    <revision>
      <id>10097</id>
      <timestamp>2009-12-11T15:52:15Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[Category:Updater]]</comment>
      <text xml:space="preserve">#REDIRECT [[:Category:Updater]]</text>
    </revision>
  </page>
  <page>
    <title>Updater Concepts</title>
    <id>1647</id>
    <redirect />
    <revision>
      <id>11158</id>
      <timestamp>2009-12-14T02:28:54Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>moved [[Updater Concepts]] to [[Updater design pattern]]</comment>
      <text xml:space="preserve">#REDIRECT [[Updater design pattern]]</text>
    </revision>
  </page>
  <page>
    <title>Updater Settings and Attributes</title>
    <id>745</id>
    <revision>
      <id>10301</id>
      <timestamp>2009-12-11T19:10:22Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Updater&lt;/categorytree&gt;

= Overview =

This document describes the predefined Setting subtypes and their declared Attribute names that are associated with the [[Core Type Guide#Updater|Updater]] type.

Complete reference documentation for these related types are here:

* [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Updater.html#related_types Updater Reference - related types]

= Settings =

{| border=&quot;1px solid #aaa&quot; cellpadding=&quot;5&quot; cellspacing=&quot;0&quot;
    ! Setting !! attribute !! purpose
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Updater.html#type_UpdaterDefaultPackageName UpdaterDefaultPackageName] || ''defaultPackageName'' || An Updater setting to configure a default package name used by Change-Dependencies
|-
| [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Updater.html#type_UpdaterNotificationList UpdaterNotificationList] || ''updaterNotificationList'' || Comma-separate list of notification email addresses
|}
{{Attributes Reference Footer}}

[[Category:Updater]]</text>
    </revision>
  </page>
  <page>
    <title>Updater design pattern</title>
    <id>728</id>
    <revision>
      <id>11157</id>
      <timestamp>2009-12-14T02:28:54Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>moved [[Updater Concepts]] to [[Updater design pattern]]</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Updater&lt;/categorytree&gt;
==Intent==
* Define an abstract process flow that coordinates the build and deployment process (on a continuous basis if need be)
* Encapsulate the main stages of the process in a way that allows them to span multiple build and deployment targets
* Support the need to manage the process for multi-tier integrated application systems in distributed environments

See [[Methodology]] for an in depth explanation on using ControlTier's core types to integrate the entire build and deployment process.

== Problem==
We want to coordinate an end-to-end build and deploy process but applications often have multiple packaged artifacts produced by different build tools and configurations. Additionally, the correct set of versions for these artifacts must be distributed to the proper destinations, installed, then configured, all of them unique to their type of runtime environment. Furthermore, long running application processes typically need to be restarted for the new versions of the packaged artifacts to take effect. Finally, it should also be possible to run testing procedures to verify the functionality of the build and operational quality of the service.

Due to obstacles brought on by heterogeneous tools, runtime environments, packaged artifact types, etc, build and deployment are usually managed as separate processes, each run independently. Often, it is left to the release manager to manually join the two.

==Discussion==
Often during the later development phases and into testing, it is desirable to run a fully automated release that begins with code checkout and completes with functional testing and use. (See [http://www.startuplessonslearned.com/2009/06/why-continuous-deployment.html]).

The connected build and deployment cycle breaks down to several rough stages:
* Building: Check out source materials, compile them into executable form, verify them, package the products into a distributable form and then publish it to a repository.
* Modifying package dependencies: Query the repository for the newly produced artifacts from the build stage above, analyze the current packages in use by the running application targets, and then configure the deployment model to use the new packages and drop the old ones.
* Deployment: Execute the deployment steps &amp;mdash; shutdown, package distribution and installation, post install configuration, and startup &amp;mdash; across all the application targets.
* Testing: Execute black box functional tests that verify the changes running within the integrated software system.

Ultimately, the goal of the unified build and deploy cycle is to have a single fully-automated procedure that will produce a functioning application service that can be verified by QA testers and/or end users.

The figure below describes the different aspects to the build and deploy process:

[[Image:Updater-discussion-problem.png]]

The complexities impacting efforts that attempt to standardize build and deployment processes can be reviewed [[Builder Concepts|here]] and [[Service Concepts|here]]. A new dimension of complexity comes into play when trying to standardize a higher level process that spans and coordinates the build and deployment processes for a multi-tier application system. Those scenarios typically include the need to run multiple builds to produce all of the needed artifacts used by the application components. The build configurations are also typically driven by project management concerns. For example, sets of build artifacts may be associated based on some project milestone or regular schedule (some people refer to these as &quot;release trains&quot;). Of course, each build may use a different branch of source code and or use a different repository. There may also be an implicit order to the builds. In any case, once the builds have been prepared the resulting artifacts must be identified and collected in preparation for their deployment.

Like the build process, the deployment process is complicated by a multi-tier application system. Often a &quot;release&quot; for an integrated software system entails the installation of matched sets of packaged artifacts of code, content, configuration and data. It is common that each of these artifacts have an implicit relationship to each other based on compatibility and also project management control. They also have a particular place to be installed and sometimes need local customization. The task of choosing the &quot;right&quot; packaged artifacts many times becomes a manual one, where the release engineer draws from their knowledge (and the knowledge from the developers) to select the appropriate ones based on their understanding of the application itself and the environment to which it will run.

The chief motivation to establish a connected build and deployment process stems from the desire to facilitate immediate use of the application once the changes have been committed to the source code repository. This enables early testing (a best practice method that avoids surprises in production environments where problem resolution is very expensive) and in some cases immediate use by the end users (the &quot;[[Continuous_deployment|continuous deployment]]&quot; model wherein customers can provide instant feedback).

An alternative approach to joining the build and deployment process into a connected one comes through the introduction of an abstraction called &quot;Updater&quot; that provides an interface to the build process and the deployment process. The role of the Updater abstraction is based on the [[Mediator]], an abstraction that coordinates among a set of process abstractions. The Updater interface defines a standard structure to execute multiple builds via the [[Builder]] abstraction while the deployment of artifacts to a set of application components can be done via the [[Service]] abstraction. Deployment to sets of Services can be centralized via the [[Site]] abstraction (Sites reflect the structure of the integrated software system). The packaged artifacts &amp;mdash; the common currency between both halves of the process &amp;mdash; are controllable via the [[Package]] abstraction. Using this approach the release engineer can model each step of the process in terms of these abstractions and connect them into a hierarchy that reflects the overall structure of the process.

[[Image:Builder-structure.png|thumb]]
This approach offers several advantages: The process is broken into several layers. 
* Build process: Each build is driven by the configuration of a Builder. Builders interface with the source code repository client and underlying build tool. When the Builder is invoked, code is checked out, the build tool run and the products are stored in a repository and registered as Packages. 
* Dependency modification process: With a new set of packages stored in the repository, the Updater executes a step to analyze the model to determine how to change the package dependencies used by the deployed Services.
* Deployment process: Each deployment is driven by the configuration of a Service. Each Service installs Packages based on registered Package child dependencies. Services roll up to Sites for centrally controlled deployment.
* Coordination layer: Each of the task specific steps can be delegated to one of the abstractions above leaving the Updater to only play the role of orchestrator across the Builder and Sites/Services.

Each layer of the process can be handled by a specific workflow. These workflows can be composed into a higher level workflows to provide simpler procedures. The graphic shown below describes how the build and deployment workflow decompose into separate Build and Deployment workflows, each of which breaks down to manage the lower level processes.

[[Image:Coordinated-process.png]]

==Structure==
The Updater abstraction breaks down into a common design pattern comprised of the following core types:
* Updater: Provides operations that govern the coordination of build subprocesses, deployment and test. Each of these three phases is handled by a specific workflow.
* Builder: The Updater will invoke the &quot;Build&quot; workflow for any Builder that is associated as a child dependency.
* Site: The Updater invokes the &quot;Update&quot; workflow of any Site that is associated as a child dependency. The &quot;Update&quot; workflow breaks down to a call to &quot;Change-Dependencies&quot; workflow wherein the model is modified to use the set of Packages produced and staged by the Builder. After, the &quot;Deploy&quot; command is dispatched to any Services that are associated with the Site as child resources.

[[Image:Updater-structure.png]]

The Updater type inherits the command dispatching capabilities from Mediator but defines standard operations for coordinating actions across [[Core Type Guide#Builder|Builder]] and [[Core Type Guide#Site|Site]] objects.

[[Image:Updater-structure-example.png]]

==Example==
==Check List==
==Rules of Thumb==
==Commands==

Primary Commands:
* [[#BuildAndUpdate]] &amp;mdash;
* [[#Build]] &amp;mdash; 
* [[#Update]] &amp;mdash; 
* [[#Test]] &amp;mdash;

{{Core Type User Reference|Updater}}

===Build===

A Dispatch Command, that dispatches the [[Builder Concepts#Build|Build]] command to all Builder dependencies.

* {{Core Type Command Reference|Updater|Build|Reference}}

===Update===

A Dispatch Command, that dispatches the [[Site Concepts#Update|Update]] command to all Site dependencies.

* {{Core Type Command Reference|Site|Update|Reference}}

===Test===

A Workflow Command, that dispatches the [[Updater Concepts#Test|Test]] command.

* {{Core Type Command Reference|Updater|Test|Reference}}

===BuildAndUpdate===

A Workflow, that executes:

# [[#Build|Build]]
# [[Mediator Concepts#Update|Update]]

* {{Core Type Command Reference|Updater|BuildAndUpdate|Reference}}


==Related Types==

*  [[Builder Concepts]]
*  [[Node Concepts]]
*  [[Site Concepts]]

Supertype:

*  [[Mediator Concepts]]

{{Core Type Guide Linkback}}

[[Category:Updater]]</text>
    </revision>
  </page>
  <page>
    <title>Upgrade</title>
    <id>1275</id>
    <redirect />
    <revision>
      <id>7421</id>
      <timestamp>2009-07-23T20:39:20Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <comment>moved [[Upgrade]] to [[Upgrading]]:&amp;#32;Use action form of verbs in pages</comment>
      <text xml:space="preserve">#REDIRECT [[Upgrading]]</text>
    </revision>
  </page>
  <page>
    <title>Upgrading</title>
    <id>1273</id>
    <revision>
      <id>15284</id>
      <timestamp>2011-06-16T19:02:54Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <comment>fix core seed location</comment>
      <text xml:space="preserve">These are the steps needed to upgrade to a new ControlTier point release.

{{caution|This will not work if you are upgrading major versions. This procedure is for point releases only.}}

==Upgrade procedure==

# '''Shut down all ControlTier processes. Things will break if you do not shut all the processes down.'''
#* Make sure there are no ctl commands running on the clients
#* [[Server startup and shutdown|Shut down the server]]: &lt;code&gt;jetty.sh stop&lt;/code&gt;
# Run the [[installer]] against both server and clients.
# Start the server. Watch the logs and make sure the server started properly. You can also use &lt;code&gt;jetty.sh check&lt;/code&gt; ([[Server_startup_and_shutdown#Check_status|Check status]])
# Locate the controltier-seed.jar archive from the installer directory: (e.g. &lt;code&gt;ControlTier-3.6.1/pkgs/ctl-3.6.1/lib/extensions/commander/jars/core-seed-3.6.1.jar&lt;/code&gt;)
# Load the new seed jar from the installer using either ProjectBuilder or Workbench '''for each project''':
#* Option 1: ProjectBuilder: Run the [http://controltier.sourceforge.net/docs/latest/core/reference/user/ProjectBuilder/commands/load-library.html load-library] command: &lt;syntaxhighlight lang=&quot;bash&quot;&gt;ctl -m ProjectBuilder -c load-library -- -jar /path/to/core-seed-3.x.x.jar&lt;/syntaxhighlight&gt; '''OR'''
#* Option 2: Workbench: Go to the Admin page (eg, http://strongbad:8080/itnav/do/menu/Admin) and press the &quot;Import Seed&quot; button and upload the jar file.  Check the box &quot;Restage all submodules of imported modules after import&quot;.
# If you are using the elements library, also similarly load the new seed for that library (e.g. &lt;code&gt;ControlTier-3.6.1/pkgs/ctl-3.6.1/lib/extensions/commander/jars/elements-seed-3.6.1.jar&lt;/code&gt;).
# Replace the old seed in the WebDAV with the new one: &lt;syntaxhighlight lang=&quot;bash&quot;&gt;ctl -p anyProject -m davutil -c put -- -file /path/to/core-seed-3.x.x.jar -overwrite -url dav://seeds/core-seed.jar&lt;/syntaxhighlight&gt;
# On all clients run [[ctl-project]] &quot;install&quot; action. Do it via [[ctl-exec]]:
#* &lt;syntaxhighlight lang=&quot;bash&quot;&gt;ctl-exec -p project -- ctl-project -p project -a install&lt;/syntaxhighlight&gt;
#* Optionally, you can do a clean re-creation of the CTL projects running through [[ctl-project]] (remove, create, install) to get a new baseline. 
{{Guide/navbox}}
{{Installation/navbox|state=uncollapsed}}
{{Manual/navbox}}
{{Reference/navbox}}

[[Category:Installation]]</text>
    </revision>
  </page>
  <page>
    <title>Use Builder</title>
    <id>1297</id>
    <redirect />
    <revision>
      <id>7797</id>
      <timestamp>2009-07-31T19:38:07Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <comment>moved [[Use Builder]] to [[Using Builder]]:&amp;#32;use gerund form in page titles</comment>
      <text xml:space="preserve">#REDIRECT [[Using Builder]]</text>
    </revision>
  </page>
  <page>
    <title>Use Deployment exec command</title>
    <id>738</id>
    <revision>
      <id>13918</id>
      <timestamp>2010-11-10T15:22:52Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot; -o &quot; to &quot; -r &quot;</comment>
      <text xml:space="preserve">&lt;noinclude&gt;&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Deployment&lt;/categorytree&gt;&lt;/noinclude&gt;
The [[Deployment]]
[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Deployment.html#cmd_exec exec] command
is a useful command to execute scripts and script files via the specified executable.
Running scripts in the context of a Deployment lets you target actions towards specific instances of things on Nodes and offers finer granularity of control than scripts executed by &lt;code&gt;[[CTL-EXEC_Command_Reference|ctl-exec]]&lt;/code&gt;.

Furthermore, the &lt;code&gt;exec&lt;/code&gt; command enables all objects of the Deployment type and its subtypes (eg, [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Service.html Service]) an open-ended way to execute user specified scripts without having to create sub-types.

For users that are developing their own sub-types, you can define [[Workflow command|Workflow]] wrapper commands around &lt;code&gt;exec&lt;/code&gt;, defaulting the scripts and its parameters via object model data.

==Execute==		
The &lt;code&gt;exec&lt;/code&gt; command can execute either a script or a script file.
===Script===

Execute a simple echo script with bash:
&lt;pre&gt;
ctl -p demo -t DukesBankProjectBuilder -r dukesbank -c exec -- \
  -executable bash -script &quot;'echo HI'&quot;
&lt;/pre&gt;
&lt;pre&gt;
HI
&lt;/pre&gt;

The script can reference context data:
&lt;pre&gt;
ctl -p demo -t DukesBankProjectBuilder -r dukesbank -c exec -- \
  -executable bash -script &quot;'echo this is project name: \${context.depot}'&quot;
&lt;/pre&gt;
&lt;pre&gt;
this is project name: demo
&lt;/pre&gt;
Here the &quot;${context.depot}&quot; property is substituted for the value of the project name name.
* The backslash character (&quot;\&quot;) is used to escape the variable so it is not evaluated by the invoking shell.

===Script file===
The &lt;code&gt;exec&lt;/code&gt; command can also execute script contained in files.

File listing: /home/deploy/bin/checkpid.sh
&lt;pre&gt;
[ -f $HOME/logs/pid ] &amp;&amp; { echo OK ; } || { echo FAIL ; exit 1 ;}	
&lt;/pre&gt;
Execute the &quot;checkpid.sh&quot; script file:
&lt;pre&gt;
ctl -p demo -t Deployment -c exec -- \
  -executable bash -scriptfile /home/deploy/bin/checkpid.sh
&lt;/pre&gt;
&lt;pre&gt;
OK
&lt;/pre&gt;
The $HOME/logs/pid file existed so &quot;OK&quot; was printed to the console.

==Exec Command Options==	
The &lt;code&gt;exec&lt;/code&gt; command takes several options shown with brief examples below.
===Option: -strategy===	

By default the Deployment type is configured to use the 
[http://controltier.sourceforge.net/docs/latest/coreutils/reference/modules/type_shellutil.html shellutil]
[http://controltier.sourceforge.net/docs/latest/coreutils/reference/modules/type_shellutil.html#cmd_exec exec] command to
perform the action.

If the shellutil &lt;code&gt;exec&lt;/code&gt; command does not offer the desired behavior you can create your own strategy and specify it via the 
&quot;-strategy&quot; option. If you create your own strategy implementation, be sure to support all the options of Deployment's &lt;code&gt;exec&lt;/code&gt;.

Note:
* The examples in this document assume the default &quot;shellutil&quot; implementation.

===Option: -executable===
The -executable option specifies what shell script interpreter to use. 

Run a perl script:
&lt;pre&gt;
$ ctl -p demo -m Deployment -c exec -- -executable perl -script &quot;'print \&quot;HI\&quot;'&quot; 
HI
&lt;/pre&gt;

Run a tcl script:
&lt;pre&gt;
$ ctl -p demo -m Deployment -c exec -- -executable tclsh -script &quot;'puts \&quot;HI\&quot;'&quot; 
HI
&lt;/pre&gt;

===Option: -argline===

The &quot;-argline&quot; option can be used to specify command line arguments to the program specified via the &quot;-executable&quot; option.

Here's the content of a script file called &quot;stuff.sh&quot;:
&lt;pre&gt;
$ cat /tmp/stuff.sh 
[ -f $HOME/.bashrc ] &amp;&amp; { foundbashrc=true ; } ;
[ -f $HOME/.bash_profile ] &amp;&amp; { foundbashprofile=true ; } ;
[ -n &quot;$foundbashrc&quot; -a -n &quot;$foundbashprofile&quot; ] &amp;&amp; { echo everything is good ; } || { echo things not so good ; } ;
&lt;/pre&gt;

Execute the script without the '-argline' option with the executable, &quot;sh&quot;:
&lt;pre&gt;
$ ctl -p demo -m Deployment -c exec -- -executable sh -scriptfile /tmp/stuff.sh
everything is good
&lt;/pre&gt;
Now set the -argline value to &quot;-vx&quot; to pass those args to the -executable, &quot;sh&quot;:
&lt;pre&gt;
$ ctl -p demo -m Deployment -c exec -- -executable sh -scriptfile /tmp/stuff.sh -argline -vx
[ -f $HOME/.bashrc ] &amp;&amp; { foundbashrc=true ; } ;[ -f $HOME/.bash_profile ] &amp;&amp; { foundbashprofile=true ; } ;[ -n &quot;$foundbashrc&quot; -a -n &quot;$foundbashprofile&quot; ] &amp;&amp; { echo everything is good ; } || { echo things not so good ; } ;
everything is good
+ '[' -f /Users/alexh/.bashrc ']'
+ foundbashrc=true
+ '[' -f /Users/alexh/.bash_profile ']'
+ foundbashprofile=true
+ '[' -n true -a -n true ']'
+ echo everything is good
&lt;/pre&gt;

This example is equivalent to: &quot;&lt;code&gt;sh -vx /tmp/stuff&lt;/code&gt;&quot;

===Option: -failonerror===

The &quot;-failonerror&quot; option specifies if the &lt;code&gt;ctl&lt;/code&gt; command should exit with a failure if the script exits with a non-zero exit code.

Execute a script that will exit with a non-zero exit code:
&lt;pre&gt;
$ ctl -p demo -m Deployment -c exec -- -executable bash -script &quot;'exit 1'&quot;
Command failed: The following error occurred while executing this line:
/Users/alexh/ctier/ctl/modules/shellutil/commands/exec.xml:22: shellscript returned: 1
&lt;/pre&gt;
Check the exit code returned by &lt;code&gt;ctl&lt;/code&gt;:
&lt;pre&gt;
$ echo $?
1
&lt;/pre&gt;

Now set the &lt;code&gt;-failonerror&lt;/code&gt; option to &quot;false&quot;:
&lt;pre&gt;
$ ctl -p demo -m Deployment -c exec -- -executable bash -script &quot;'exit 1'&quot; -failonerror false
Result: 1
&lt;/pre&gt;
Check the exit code returned by &lt;code&gt;ctl&lt;/code&gt;:
&lt;pre&gt;
$ echo $?
0
&lt;/pre&gt;
The &lt;code&gt;exec&lt;/code&gt; caught the error and did not cause &lt;code&gt;ctl&lt;/code&gt; to fail.

===Option: -os===
The &quot;-os&quot; option defines the name of OS where it is acceptable to execute the script.
&lt;pre&gt;
$ ctl -p demo -m Deployment -c exec -- -executable bash -script &quot;'echo \${os.name}'&quot; 
Mac OS X
&lt;/pre&gt;
This host is running Mac OS X. Now set the &quot;-os&quot;  to &quot;Linux&quot;:
&lt;pre&gt;
$ ctl -p demo -m Deployment -c exec -- -executable bash -script &quot;'echo \${os.name}'&quot; -os &quot;Linux&quot;
&lt;/pre&gt;
The echo script does not execute because this host is running Mac OS X.

===Option: -output===
The &quot;-output&quot; option specifies a file path to save the script output.
&lt;pre&gt;
$ ctl -p demo -m Deployment -c exec -- -executable bash -script &quot;'echo \${os.name}'&quot; -output /tmp/echo.out
&lt;/pre&gt;
Check the output:
&lt;pre&gt;
$ cat /tmp/echo.out
Mac OS X
&lt;/pre&gt;

==Called by Workflow==

If you are sub-typing Deployment or one of its subtypes (eg, Service) you can call &lt;code&gt;exec&lt;/code&gt; from a [[Workflow command]].
The Workflow command can specify the [[Workflow and options|same arguments]] to &lt;code&gt;exec&lt;/code&gt; via [[Option_defaulting_with_a_literal_and_attribute|option defaulting]].

For example, if you wanted to call &lt;code&gt;exec&lt;/code&gt; with these arguments, 
&lt;pre&gt;-executable bash -scriptfile /tmp/stuff.sh -output /tmp/echo.out&lt;/pre&gt;
you would define the workflow command to have those two options (ie, scriptfile and output).
The argument values &quot;/tmp/stuff.sh&quot; and &quot;/tmp/echo.out&quot; can be configured via the defaults of the workflow command options either as literal or properties.

==Combined with Nodedispatch Options==
Just like any &lt;code&gt;ctl&lt;/code&gt; defined command, you can execute &lt;code&gt;exec&lt;/code&gt; across the network, targeting just the hosts where this Deployment object is assigned.

To do this, [[Use_node_filtering_options]].

For example, to execute a script across all hosts (ie, -I '.*') where the object is assigned run:
&lt;p&gt;
ctl -I '.*' -p ''project'' -t ''Deployment'' -r ''name'' -c exec -- -executable bash -script &quot;'echo \${os.name}'&quot;
&lt;/p&gt;

[[Category:Deployment]]</text>
    </revision>
  </page>
  <page>
    <title>Use ProjectBuilder</title>
    <id>1487</id>
    <redirect />
    <revision>
      <id>9287</id>
      <timestamp>2009-11-25T18:25:18Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <comment>moved [[Use ProjectBuilder]] to [[Using ProjectBuilder]]:&amp;#32;use gerund form in titles</comment>
      <text xml:space="preserve">#REDIRECT [[Using ProjectBuilder]]</text>
    </revision>
  </page>
  <page>
    <title>Use node filtering options</title>
    <id>1488</id>
    <redirect />
    <revision>
      <id>9289</id>
      <timestamp>2009-11-25T18:25:43Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <comment>moved [[Use node filtering options]] to [[Using node filtering options]]</comment>
      <text xml:space="preserve">#REDIRECT [[Using node filtering options]]</text>
    </revision>
  </page>
  <page>
    <title>Use your existing scripts with ControlTier</title>
    <id>1937</id>
    <revision>
      <id>14307</id>
      <timestamp>2010-11-10T22:49:02Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>/* See also */</comment>
      <text xml:space="preserve">&lt;noinclude&gt;&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Examples&lt;/categorytree&gt;&lt;/noinclude&gt;
==Scenario==

You've [[installation|installed]] ControlTier and have run through the [[Getting_Started|Getting Started]] page and want to start taking advantage of the [[Command_dispatcher|command dispatcher]] to run your existing scripts across your systems in the simplest and quickest way. You probably want to take advantage of [[CTL-EXEC_Command_Reference|ctl-exec]]'s ability to run scripts across a selection of systems in parallel.

Consider the following: 

* You have a set of working scripts that you really don't want to change too much.
* ctl-exec requires a list of nodes to operate against, but ...
* ... you want to avoid installing the ControlTier client on all your systems, or ...
* ... at least defer installing it until you're ready to use &quot;named&quot; commands more broadly, or ...
* ... better still, set things up to use ControlTier itself to install its client!

==Alternatives==
Here are some alternatives that allow you to use [[CTL-EXEC_Command_Reference|ctl-exec]] directly with your existing scripts.

===Avoid installing the ControlTier client on all your systems===
You can avoid installing the ControlTier client on all your systems (the default way to register them as nodes with a project), by creating the node list on the server using a [[Node#Project_XML|node project XML]] file and the [[Using_ProjectBuilder|ProjectBuilder module]].

This is quickest way to get going with [[CTL-EXEC_Command_Reference|ctl-exec]] to execute your existing scripts controlled from the ControlTier server. 

Assuming you've just completed the ControlTier server installation you'll have a node list with a single entry. For example:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[anthony@centos54 ~]$ ctl-exec -p Development -v
centos54:
   hostname: centos54
   os-arch: amd64
   os-family: unix
   os-name: Linux
   os-version: 2.6.18-164.el5
   tags: []
   ---- Attributes ---- 
   dirlist: bin,logs,var
&lt;/syntaxhighlight&gt;

Of course, you ''could'' add extra nodes to your project using Workbench or by installing the client on them and running [[ctl-project]], but a quicker way is to prepare a project XML file:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[anthony@centos54 tmp]$ cat nodes.xml 
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE project PUBLIC &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; &quot;project.dtd&quot;&gt;

&lt;project&gt;
  &lt;node type=&quot;Node&quot; name=&quot;node1&quot; description=&quot;ControlTier managed node&quot; ctlUsername=&quot;user1&quot; ctlPassword=&quot;password&quot; osFamily=&quot;unix&quot; osName=&quot;Linux&quot; osArch=&quot;amd64&quot; osVersion=&quot;2.6.18-164.el5&quot; hostname=&quot;node1&quot; tags=&quot;development,webserver&quot;/&gt;
  &lt;node type=&quot;Node&quot; name=&quot;node2&quot; description=&quot;ControlTier managed node&quot; ctlUsername=&quot;user2&quot; osFamily=&quot;unix&quot; osName=&quot;Linux&quot; osArch=&quot;amd64&quot; osVersion=&quot;2.6.18-164.el5&quot; hostname=&quot;node2&quot; tags=&quot;development,appserver&quot;/&gt;
  &lt;node type=&quot;Node&quot; name=&quot;node3&quot; description=&quot;ControlTier managed node&quot; ctlUsername=&quot;user3&quot; osFamily=&quot;unix&quot; osName=&quot;Linux&quot; osArch=&quot;amd64&quot; osVersion=&quot;2.6.18-164.el5&quot; hostname=&quot;node3&quot; tags=&quot;staging,webserver&quot;/&gt;
  &lt;node type=&quot;Node&quot; name=&quot;node4&quot; description=&quot;ControlTier managed node&quot; ctlUsername=&quot;user4&quot; osFamily=&quot;unix&quot; osName=&quot;Linux&quot; osArch=&quot;amd64&quot; osVersion=&quot;2.6.18-164.el5&quot; hostname=&quot;node4&quot; tags=&quot;staging,appserver&quot;/&gt;
  &lt;node type=&quot;Node&quot; name=&quot;node5&quot; description=&quot;ControlTier managed node&quot; ctlUsername=&quot;user5&quot; osFamily=&quot;unix&quot; osName=&quot;Linux&quot; osArch=&quot;amd64&quot; osVersion=&quot;2.6.18-164.el5&quot; hostname=&quot;node5&quot; tags=&quot;production,webserver&quot;/&gt;
  &lt;node type=&quot;Node&quot; name=&quot;node6&quot; description=&quot;ControlTier managed node&quot; ctlUsername=&quot;user6&quot; osFamily=&quot;unix&quot; osName=&quot;Linux&quot; osArch=&quot;amd64&quot; osVersion=&quot;2.6.18-164.el5&quot; hostname=&quot;node6&quot; tags=&quot;production,appserver&quot;/&gt;
&lt;/project&gt;
&lt;/syntaxhighlight&gt;

{{Caution|Note that each node's name and hostname attributes are set to the resolvable hostname to which you want to dispatch commands. Since the ctl-exec command ''reports'' node names, but ''uses'' the hostname values to evaluate inclusion/exclusion this convention eliminates the potential for confusion.}}
{{Caution|Setting only the &quot;ctlUsername&quot; attribute assumes that you have setup SSH key-based authentication between the ControlTier server and that user on all the nodes you wish to manage. Of course, you can also set a password for each node by using the &quot;ctlPassword&quot; attribute (as in node1.mydomain.com above). If you ''have'' to use passwords, you can avoid including them in plain text in your project XML by using Workbench to add the password later (either way, it is stored in a hashed form in the resource model).}}

... and load it into your project using ProjectBuilder:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[anthony@centos54 tmp]$ ctl -p Development -m ProjectBuilder -c load-resources -- -filename nodes.xml 
Loading &quot;/home/anthony/tmp/nodes.xml&quot; ...
1 file(s) have been successfully validated.
Processing /home/anthony/tmp/nodes.xml to /opt/ctier/ctl/var/tmp/projectxml-888217455.xml
Loading stylesheet /opt/ctier/ctl/projects/Development/modules/ProjectBuilder/lib/load-resources/projectxml/project.xsl
Mapping XML to properties ...
[timer: 0.605 sec]
Batching new object creation requests ...
[timer: 2.460 sec]
No new objects to be created ...
[timer: 2.461 sec]
Batching object attribute update requests ...
[timer: 3.080 sec]
Batching resource and referrer updates ...
[timer: 3.124 sec]
Executing 6 batched object updates ...
[timer: 7.292 sec]
Adding document transforms to deployments ...
[timer: 7.446 sec]
&lt;/syntaxhighlight&gt;

With the nodes loaded you're ready to use ctl-exec (and Jobcenter) to run your existing scripts from the ControlTier server. e.g.:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
[ctier@centos54 ~]$ ctl-exec -I '.*' -- id
number of nodes to dispatch to: 7, (threadcount=1)
uid=101(ctier) gid=103(ctier) groups=103(ctier)
Connecting to node1.mydomain.com:22
cmd : id
uid=504(user1) gid=504(user1) groups=103(ctier),504(user1)
Connecting to node2.mydomain.com:22
cmd : id
uid=508(user2) gid=508(user2) groups=508(user2)
Connecting to node3.mydomain.com:22
cmd : id
uid=509(user3) gid=509(user3) groups=509(user3)
Connecting to node4.mydomain.com:22
cmd : id
uid=510(user4) gid=510(user4) groups=510(user4)
Connecting to node5.mydomain.com:22
cmd : id
uid=511(user5) gid=511(user5) groups=511(user5)
Connecting to node6.mydomain.com:22
cmd : id
uid=512(user6) gid=512(user6) groups=512(user6)
&lt;/syntaxhighlight&gt;

Whether or not you subsequently install the ControlTier client on all your systems, maintaining the nodes.xml provides somewhere to keep node descriptions and the set of tags you'll be exploiting to selectively run commands.


{{Guide/navbox}}

[[Category:Scripting Examples]]</text>
    </revision>
  </page>
  <page>
    <title>User Guide</title>
    <id>1051</id>
    <revision>
      <id>16734</id>
      <timestamp>2012-05-16T03:44:40Z</timestamp>
      <contributor>
        <username>Ella19</username>
        <id>1789</id>
      </contributor>
      <minor/>
      <comment>sdasd</comment>
      <text xml:space="preserve">[[Image:Crystal_Clear_app_display.png|right|150]]

This is the place to come [http://www.cavite-housing.com/ house and lot for sale in cavite] if you want help using the [[ControlTier]] software.  All the content in this section assumes that you have access to a fully [[Installation|set up and working]] version of ControlTier and are looking for help using it to run commands.

{{hubs/disclaimer}}

{{Installation/navbox}}
{{Guide/navbox|state=uncollapsed}}
{{Manual/navbox}}
{{Reference/navbox}}

[[Category:Help]]</text>
    </revision>
  </page>
  <page>
    <title>User Index</title>
    <id>1133</id>
    <redirect />
    <revision>
      <id>10516</id>
      <timestamp>2009-12-12T01:14:20Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[User Guide]]</comment>
      <text xml:space="preserve">#REDIRECT [[User Guide]]</text>
    </revision>
  </page>
  <page>
    <title>User hub</title>
    <id>1285</id>
    <redirect />
    <revision>
      <id>7487</id>
      <timestamp>2009-07-25T00:18:15Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>moved [[User hub]] to [[User Guide]]:&amp;#32;New canonical name</comment>
      <text xml:space="preserve">#REDIRECT [[User Guide]]</text>
    </revision>
  </page>
  <page>
    <title>Using Builder</title>
    <id>479</id>
    <revision>
      <id>14173</id>
      <timestamp>2010-11-10T16:05:07Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;ctl-depot&quot; to &quot;ctl-project&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Builder&lt;/categorytree&gt;

This page describes how to use the generic [[Core_Type_Guide#Builder| Builder]] to coordinate a build process for a simple web application.
This document will describe how to configure the Builder to
* integrate with a CVS repository for code checkout
* call an Ant build script that is part of the checked out sources
* import the produced build artifact to the repository

&lt;p&gt;In this example, you will automate a very trivial build process for a web application project named
      &quot;simple&quot;. It is a simple JSP based app, that will be built using an Ant. The build will create a WAR
	that will be uploaded to the repository.
      &lt;/p&gt;

==Preparing the application source==
      &lt;p&gt;
      The next steps will describe how to setup the source tree for the &quot;simple&quot; webapp.
      &lt;/p&gt;

===Create a source tree===

	&lt;p&gt;The first step will be to create the application sources.
	&lt;/p&gt;
	&lt;p&gt;For this example, the application source files will reside in the &lt;code&gt;$HOME/simple/src/&lt;/code&gt; directory.
	Create the following directory strucure:
	&lt;/p&gt;
	&lt;pre&gt;
mkdir -p $HOME/simple/src
mkdir -p $HOME/simple/src/jsp
mkdir -p $HOME/simple/src/WEB-INF
	&lt;/pre&gt;

	&lt;p&gt;The source files implement a trivial webapp. There will be two main source files:
	a JSP and a web.xml. The JSP will print the date and time.
	&lt;/p&gt;

	&lt;p&gt;Edit $HOME/simple/src/jsp/index.jsp and insert the following text:&lt;/p&gt;
	&lt;pre&gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;Simple&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;p&amp;gt;Hello!  The time is now &amp;lt;%= new java.util.Date() %&amp;gt;&amp;lt;/p&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
	&lt;/pre&gt;

	&lt;p&gt;Edit $HOME/simple/src/WEB-INF/web.xml&lt;/p&gt;
	&lt;pre&gt;
&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;!DOCTYPE web-app PUBLIC
  '-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN'
  'http://java.sun.com/dtd/web-app_2_3.dtd'&amp;gt;
&amp;lt;web-app&amp;gt;
  &amp;lt;servlet&amp;gt;
    &amp;lt;servlet-name&amp;gt;Simple&amp;lt;/servlet-name&amp;gt;
    &amp;lt;jsp-file&amp;gt;/index.jsp&amp;lt;/jsp-file&amp;gt;
  &amp;lt;/servlet&amp;gt;
&amp;lt;/web-app&amp;gt;
	&lt;/pre&gt;

===Create a build.xml===
	&lt;p&gt;Create an Ant build.xml file to build and
	package the release artifact. 
	&lt;/p&gt;
	&lt;p&gt;Edit $HOME/simple/src/build.xml and insert the following content:&lt;/p&gt;
&lt;pre&gt;
&lt;project name=&quot;simple&quot; default=&quot;all&quot;&gt;
    &lt;target name=&quot;all&quot;&gt;
      &lt;mkdir dir=&quot;${opts.targetdir}&quot;/&gt;
      &lt;war 
	  destfile=&quot;${opts.targetdir}/simple-${opts.buildstamp}.war&quot; 
	  webxml=&quot;${opts.basedir}/WEB-INF/web.xml&quot;&gt;
	&lt;fileset dir=&quot;${opts.basedir}/jsp&quot;/&gt;		
      &lt;/war&gt;	    
    &lt;/target&gt;
&lt;/project&gt;
&lt;/pre&gt;

Notice the embedded properties  &lt;code&gt;${opts.basedir}, ${opts.targetdir}&lt;/code&gt; and &lt;code&gt;${opts.buildstamp}&lt;/code&gt;.
These properties will be passed in via the Builder's &quot;runBuildscript&quot; command and be replaced with the values of the configured settings.

===Create CVS repo===
* ''Note'':  If the CVS binary is not available on your machine,  download and install the CVS package. Several binaries for different OS and architectures, as well as source code can be found at [http://www.nongnu.org/cvs/#downloading www.nongnu.org/cvs].  Once installed, be sure to add it to your &lt;code&gt;PATH&lt;/code&gt;.

	&lt;p&gt;The source files will be maintained in a local CVS repository. Run
	the following commands to create the CVS instance and import the sources:
	&lt;/p&gt;
	&lt;pre&gt;
export CVSROOT=$HOME/simple/cvsroot; # local CVS repo path
cvs -d $CVSROOT init;                # create the repository
cd $HOME/simple/src;                 # change directory and import the sources
cvs import -m &quot;Importing Simple example&quot; src tutorial start; 
cd ..; rm -r $HOME/simple/src;       # remove the original copy.
cvs co src;                          # check out the src dir
	&lt;/pre&gt;

===Noteworthy settings===
	&lt;p&gt;Reviewing the steps taken in preparing the simple application's source tree
	a few noteworthy details should be highlighted:
	&lt;/p&gt;

	&lt;table border=&quot;1&quot;&gt;
	  &lt;tr&gt;
	  &lt;th&gt;Setting &lt;/th&gt;
	  &lt;th&gt;Example&lt;/th&gt;
	  &lt;th&gt;Description&lt;/th&gt;
	  &lt;/tr&gt;
	  &lt;tr&gt;
	  &lt;td&gt;SCM connection &lt;/td&gt;
	  &lt;td&gt;$HOME/simple/cvsroot&lt;/td&gt;
	  &lt;td&gt;path to the source in the source code repository. (used by scmCheckout) &lt;/td&gt;
	  &lt;/tr&gt;
	  &lt;tr&gt;
	  &lt;td&gt;SCM module&lt;/td&gt;
	  &lt;td&gt;src&lt;/td&gt;
	  &lt;td&gt;module to checkout of the repository (used by scmCheckout) &lt;/td&gt;
	  &lt;/tr&gt;
	  &lt;tr&gt;
	  &lt;td&gt;source base directory&lt;/td&gt;
	  &lt;td&gt;$HOME/simple/src&lt;/td&gt;
	  &lt;td&gt;directory where checked out source resides (used by scmCheckout and runBuildScript) &lt;/td&gt;
	  &lt;/tr&gt;
	  &lt;tr&gt;
	  &lt;td&gt;build file path &lt;/td&gt;
	  &lt;td&gt;$HOME/simple/src/build.xml&lt;/td&gt;
	  &lt;td&gt;the build file to invoke (used by runBuildScript) &lt;/td&gt;
	  &lt;/tr&gt;
	&lt;/table&gt;
	&lt;p&gt;
	  Each of these setting details will be recorded in the Builder's definition declared in the next section.
	&lt;/p&gt;

==Setting up a Builder==

      &lt;p&gt;With the application sources prepared, we are ready to proceed to  defining a Builder for simple. 
      &lt;/p&gt;

===Define the Builder Deployment===
The first step is to define basic deployment information about the Builder. 
This entails noting:
# The name and type: We're using the generic Builder type. Call the instance &quot;simple&quot; to correspond with the app name.
# The basedir directory: This is the directory where the sources will checked out.
# The installroot directory: This is where build artifacts will be written.
# Node referrer: This is the Node(s) where the Builder will be assigned.

	&lt;p&gt;File listing: $HOME/simple/src/Builder.simple.xml&lt;/p&gt;
	&lt;pre&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE project PUBLIC &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; 
    &quot;project.dtd&quot;&gt;
&lt;project&gt;
  &lt;deployment 
      name=&quot;simple&quot; type=&quot;Builder&quot;
      description=&quot;A Builder to build and package the simple app&quot;
      basedir=&quot;${user.home}/simple/src&quot;
      installRoot=&quot;${user.home}/simple/target&quot;      
      &gt;
     &lt;!--
      **
      ** References where the builder is hosted: 
      **       (replace localhost with the name of your node)
      --&gt;
    &lt;referrers replace=&quot;false&quot;&gt;
      &lt;resource type=&quot;Node&quot; name=&quot;strongbad&quot;/&gt;
    &lt;/referrers&gt;
   &lt;/deployment&gt;
&lt;/project&gt;
	&lt;/pre&gt;

The XML file is uses the [[project.xml]] format and a &quot;deployment&quot; tag to define
the Builder deployment. The deployment tag has attributes for the items described in the
numbered bullet list. 
The Node reference is done via the &quot;referrers&quot; and &quot;resource&quot; tag. This example specifies
a host named &quot;strongbad&quot; but you will replace that with the host name of your Node.

===Define SCM info===

Next, define the SCM info about the CVS instance that was just setup.

* The &lt;code&gt;scmCheckout&lt;/code&gt; command is determined by the Builder's &quot;BuilderScmBinding&quot; setting
* The connection string is determined by the Builder's &quot;BuilderScmConnection&quot; setting
* The code module is set by the &quot;BuilderScmModule&quot; setting.

Here they are as setting definitions in XML:

&lt;pre&gt;
  &lt;setting type=&quot;BuilderScmModule&quot; name=&quot;simple&quot; description=&quot;The simple app surce module&quot; 
	   settingValue=&quot;src&quot;/&gt;
  &lt;setting type=&quot;BuilderScmBinding&quot; name=&quot;simple&quot;
	   description=&quot;The simple app is configured to use CVS&quot;
	   settingValue=&quot;cvs&quot;/&gt;
  &lt;setting type=&quot;BuilderScmConnection&quot; name=&quot;simple&quot;
	   description=&quot;The simple app source code&quot; 
	   settingValue=&quot;${user.home}/simple/cvsroot&quot;/&gt;
&lt;/pre&gt;

These will be added to the XML file created above.

===Define version info===

After checkout, the Builder needs to know how the produced artifact will be versioned.

* The &quot;setBuildstamp&quot; command generates a buildstamp
* Provides an open-ended strategy to define the packaged artifacts version information

Builder Settings:
* Like scmCheckout it uses BuilderScmBinding and BuilderScmConnection 
* Additionally uses: BuilderBuildstamp , BuilderVersionTag, BuilderVersionMajor, BuilderVersionMinor, and BuilderVersionRelease
** These are later used for package registration too

Here they are as setting definitions in XML:

&lt;pre&gt;
  &lt;setting type=&quot;BuilderBuildstamp&quot; name=&quot;simple&quot; 
	   description=&quot;The initial simple appbuildstamp value&quot;
	   settingValue=&quot;0&quot;/&gt;
  &lt;setting type=&quot;BuilderVersionTag&quot; name=&quot;simple&quot; 
	   description=&quot;The initial simple app build tag&quot; 
	   settingValue=&quot;trunk&quot;/&gt;
  &lt;setting type=&quot;BuilderVersionMajor&quot; name=&quot;simple&quot;
	   description=&quot;The simple app major version number&quot; 
	   settingValue=&quot;1&quot;/&gt;
  &lt;setting type=&quot;BuilderVersionMinor&quot; name=&quot;simple&quot; 
	   description=&quot;The simple app minor version number&quot; 
	   settingValue=&quot;2&quot;/&gt;
  &lt;setting type=&quot;BuilderVersionRelease&quot; name=&quot;simple&quot;
	   description=&quot;The simple app release version number&quot; 
	   settingValue=&quot;3&quot;/&gt;
&lt;/pre&gt;

These can be added after the SCM settings.

===Define the build script info===
The third phase of the Build life cycle is to invoke the build procedure.

* The &quot;runBuildscript&quot; invokes the configured build tool and build script with specified target.
* Execution relative to &quot;basedir&quot;
* Artifacts generated to &quot;targetdir&quot;
* By default can execute an Ant build file
* You might want to override it to invoke your build procedure
** Check for existing types before overriding it
**  For example these other Builder types exist: AntBuilder, MavenBuilder, BatBuilder, RpmBuilder, ZipBuilder, etc

Here they are as setting definitions in XML:

&lt;pre&gt;
  &lt;setting type=&quot;BuilderBuildFile&quot; name=&quot;simple&quot; 
	   description=&quot;Name of the simple app build file&quot; 
	   settingValue=&quot;${user.home}/simple/src/build.xml&quot;/&gt;
  &lt;setting type=&quot;BuilderBuildTarget&quot; name=&quot;simple&quot; 
	   description=&quot;simple app build target&quot; 
	   settingValue=&quot;all&quot;/&gt;
&lt;/pre&gt;

Add these settings below the others.

===Define the import info===

The last step in the Build life cycle is to find the produced artifacts and import them to the repository.

* The &lt;code&gt;repoImport&lt;/code&gt; command searches from the targetdir directory and imports matching files.
* The BuilderPackageType, BuilderPackageFilebase, BuilderPackageExtension, BuilderPackageInstallroot configure &lt;code&gt;repoImport&lt;/code&gt;
* Used as metadata for package registration

Here they are as setting definitions in XML:

&lt;pre&gt;
 &lt;setting type=&quot;BuilderPackageType&quot; name=&quot;simple&quot; 
	   description=&quot;Web archive file extension&quot; 
	   settingValue=&quot;war&quot;/&gt;
  &lt;setting type=&quot;BuilderPackageFilebase&quot; name=&quot;simple&quot;
	   description=&quot;Web archive file base name&quot; 
	   settingValue=&quot;simple&quot;/&gt;
  &lt;setting type=&quot;BuilderPackageExtension&quot; name=&quot;simple&quot;
	   description=&quot;Enterprise archive file extension&quot; 
	   settingValue=&quot;war&quot;/&gt;
  &lt;setting type=&quot;BuilderPackageInstallroot&quot; name=&quot;simple&quot;
	   description=&quot;Enterprise archive file installation directory&quot;
	   settingValue=&quot;${resource.attribute.jetty_basedir}/webapps/simple&quot;/&gt;
&lt;/pre&gt;

These are the last of the settings.

===The whole definition===
 
The following XML combines all the definitions into one file for convenient copying.

Cut and paste this content into your $HOME/simple/src/Builder.simple.xml file

&lt;pre&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE project PUBLIC &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; &quot;project.dtd&quot;&gt;
&lt;project&gt;
  &lt;!--
      **
      ** Builder settings definitions go here:
      ** 
  --&gt;
  &lt;setting type=&quot;BuilderScmModule&quot; name=&quot;simple&quot; description=&quot;The simple app surce module&quot; 
	   settingValue=&quot;src&quot;/&gt;
  &lt;setting type=&quot;BuilderScmBinding&quot; name=&quot;simple&quot;
	   description=&quot;The simple app is configured to use CVS&quot;
	   settingValue=&quot;cvs&quot;/&gt;
  &lt;setting type=&quot;BuilderScmConnection&quot; name=&quot;simple&quot;
	   description=&quot;The simple app source code&quot; 
	   settingValue=&quot;${user.home}/simple/cvsroot&quot;/&gt;
  &lt;setting type=&quot;BuilderBuildstamp&quot; name=&quot;simple&quot; 
	   description=&quot;The initial simple app buildstamp value&quot;
	   settingValue=&quot;0&quot;/&gt;

  &lt;setting type=&quot;BuilderVersionTag&quot; name=&quot;simple&quot; 
	   description=&quot;The initial simple app build tag&quot; 
	   settingValue=&quot;trunk&quot;/&gt;
  &lt;setting type=&quot;BuilderVersionMajor&quot; name=&quot;simple&quot;
	   description=&quot;The simple app major version number&quot; 
	   settingValue=&quot;1&quot;/&gt;
  &lt;setting type=&quot;BuilderVersionMinor&quot; name=&quot;simple&quot; 
	   description=&quot;The simple app minor version number&quot; 
	   settingValue=&quot;2&quot;/&gt;
  &lt;setting type=&quot;BuilderVersionRelease&quot; name=&quot;simple&quot;
	   description=&quot;The simple app release version number&quot; 
	   settingValue=&quot;3&quot;/&gt;

  &lt;setting type=&quot;BuilderBuildFile&quot; name=&quot;simple&quot; 
	   description=&quot;Name of the simple app build file&quot; 
	   settingValue=&quot;${user.home}/simple/src/build.xml&quot;/&gt;
  &lt;setting type=&quot;BuilderBuildTarget&quot; name=&quot;simple&quot; 
	   description=&quot;simple app build target&quot; 
	   settingValue=&quot;all&quot;/&gt;
  &lt;setting type=&quot;BuilderPackageType&quot; name=&quot;simple&quot; 
	   description=&quot;Web archive file extension&quot; 
	   settingValue=&quot;war&quot;/&gt;
  &lt;setting type=&quot;BuilderPackageFilebase&quot; name=&quot;simple&quot;
	   description=&quot;Web archive file base name&quot; 
	   settingValue=&quot;simple&quot;/&gt;
  &lt;setting type=&quot;BuilderPackageExtension&quot; name=&quot;simple&quot;
	   description=&quot;Enterprise archive file extension&quot; 
	   settingValue=&quot;war&quot;/&gt;
  &lt;setting type=&quot;BuilderPackageInstallroot&quot; name=&quot;simple&quot;
	   description=&quot;Enterprise archive file installation directory&quot;
	   settingValue=&quot;${resource.attribute.jetty_basedir}/webapps/simple&quot;/&gt;

  &lt;!--
      **
      ** Define the simple Builder deployment :
      **
  --&gt;
  &lt;deployment 
      name=&quot;simple&quot; type=&quot;Builder&quot;
      description=&quot;A Builder to build and package the simple app&quot;
      basedir=&quot;${user.home}/simple/src&quot;
      installRoot=&quot;${user.home}/simple/target&quot;      
      &gt;
    &lt;!--
	**
	** References where the builder is hosted: 
	**       (replace strongbad with the name of your node)
    --&gt;
    &lt;referrers replace=&quot;false&quot;&gt;
      &lt;resource type=&quot;Node&quot; name=&quot;strongbad&quot;/&gt;
    &lt;/referrers&gt;

    &lt;!--
	**
	** Setting references go here:
	** 
    --&gt;
    &lt;resources replace=&quot;true&quot;&gt;
      &lt;resource type=&quot;BuilderScmBinding&quot; name=&quot;simple&quot;/&gt;
      &lt;resource type=&quot;BuilderScmConnection&quot; name=&quot;simple&quot;/&gt;
      &lt;resource type=&quot;BuilderVersionTag&quot; name=&quot;simple&quot;/&gt;
      &lt;resource type=&quot;BuilderVersionMajor&quot; name=&quot;simple&quot;/&gt;
      &lt;resource type=&quot;BuilderVersionMinor&quot; name=&quot;simple&quot;/&gt;
      &lt;resource type=&quot;BuilderVersionRelease&quot; name=&quot;simple&quot;/&gt;
      &lt;resource type=&quot;BuilderBuildFile&quot; name=&quot;simple&quot;/&gt;
      &lt;resource type=&quot;BuilderBuildTarget&quot; name=&quot;simple&quot;/&gt;
      &lt;resource type=&quot;BuilderBuildstamp&quot; name=&quot;simple&quot;/&gt;
      &lt;resource type=&quot;BuilderPackageType&quot; name=&quot;simple&quot;/&gt;
      &lt;resource type=&quot;BuilderPackageFilebase&quot; name=&quot;simple&quot;/&gt;
      &lt;resource type=&quot;BuilderPackageExtension&quot; name=&quot;simple&quot;/&gt;
      &lt;resource type=&quot;BuilderPackageInstallroot&quot; name=&quot;simple&quot;/&gt;      
    &lt;/resources&gt;

  &lt;/deployment&gt;
&lt;/project&gt;
&lt;/pre&gt;

===Load the data===

The &lt;code&gt;load-resources&lt;/code&gt; command takes the input from the XML file and registers an instance of Builder in the project model. 

&lt;pre&gt;
ctl -p default -m ProjectBuilder -c load-resources --   -filename $HOME/simple/src/Builder.simple.xml
&lt;/pre&gt;
&lt;pre&gt;
Loading &quot;/Users/alexh/simple/src/Builder.simple.xml&quot; ...
1 file(s) have been successfully validated.
Processing /Users/alexh/simple/src/Builder.simple.xml to /Users/alexh/ctier/ctl/var/tmp/projectxml-585025491.xml
Loading stylesheet /Users/alexh/ctier/ctl/projects/demo/modules/ProjectBuilder/lib/load-resources/projectxml/project.xsl
Mapping XML to properties ...
Collecting object attributes ...
Batching object attribute updates ...
Batching resource and referrer updates ...
Executing batch update ...
&lt;/pre&gt;

You can view the Builder definition in Workbench. 
Go to Package Manager &gt; Builder List.

==Deploy the Builder==

Before you can run Builder commands, first install it to the local CTL instance via [[CTL-DEPOT_Command_Reference|ctl-project]].

===Run ctl-project===
&lt;pre&gt;
ctl-project -p demo -a install
&quot;Install&quot; command running for resource: (Builder) simple
&lt;/pre&gt;

The &lt;code&gt;ctl-project&lt;/code&gt; command  deploys it to the CTL instance. 

You can run any of the Builder commands via CTL like so:
&lt;pre&gt;
ctl -p demo -t Builder -r simple -c &lt;command-name&gt;
&lt;/pre&gt;

If you run the command without the &quot;-c &lt;command-name&gt;&quot; parameter you will see a listing of commands.

===Examine the Builder properties===
With the Builder configuration loaded via &lt;code&gt;load-resources&lt;/code&gt;, and installed via &lt;code&gt;ctl-project&lt;/code&gt;,
you can examine the Builder configuration attributes via CTL.

Run the &lt;code&gt;Get-Properties&lt;/code&gt; CTL command to look at the  information about the new object:
&lt;pre&gt;
ctl -p default -t Builder -r simple -c Get-Properties -- -print
&lt;/pre&gt;
&lt;pre&gt;
[MULTI_LINE]
# simple [Builder] #

A Builder to build and package the simple app

## Attributes ##

*  basedir: &quot;/Users/alexh/simple/src&quot;
*  buildFile: &quot;/Users/alexh/simple/src/build.xml&quot;
*  buildTarget: &quot;all&quot;
*  buildstamp: &quot;trunk.1.2.3&quot;
*  defaultAllowMultiplePackageMatches: &quot;false&quot;
*  defaultDeploymentType: &quot;Builder&quot;
*  defaultFailIfPackageNotReplaced: &quot;true&quot;
*  defaultPackageName: &quot;.*&quot;
*  defaultPackageProximity: &quot;1&quot;
*  defaultPackageType: &quot;[^\.]*&quot;
*  dirlist: &quot;bin,logs,var&quot;
*  errorNotificationRecipient: &quot;${framework.admin.tolist}&quot;
*  importMax: &quot;1&quot;
*  importMin: &quot;1&quot;
*  packageBuildtimePattern: &quot;yyyymmddhhmmss&quot;
*  packageExtension: &quot;war&quot;
*  packageFilebase: &quot;simple&quot;
*  packageInstallRank: &quot;0&quot;
*  packageInstallroot: &quot;${resource.attribute.jetty_basedir}/deploy&quot;
*  packagePurgeRegex: &quot;^(?!^trunk.1.2.3$).*$&quot;
*  packageSeparator: &quot;-&quot;
*  packageType: &quot;war&quot;
*  packageVersion: &quot;${opts.buildstamp}&quot;
*  requireBuildstamp: &quot;false&quot;
*  scmBinding: &quot;cvs&quot;
*  scmConnection: &quot;/Users/alexh/simple/cvsroot&quot;
*  scmLabel: &quot;&quot;
*  scmModule: &quot;src&quot;
*  scmQuiet: &quot;false&quot;
*  scmUser: &quot;alexh&quot;
*  successNotificationRecipient: &quot;${framework.admin.tolist}&quot;
*  targetdir: &quot;/Users/alexh/simple/target&quot;
*  versionMajor: &quot;1&quot;
*  versionMinor: &quot;2&quot;
*  versionRelease: &quot;3&quot;
*  versionTag: &quot;trunk&quot;

.
.
.
- - -
[/MULTI_LINE]
&lt;/pre&gt;

&lt;p&gt;If you go to Workbench, and navigate back to the
Builder type, you will see the new object in the &quot;Objects&quot; tab.
&lt;/p&gt;

==Running the Build process==      
===The Build workflow command===

To run the whole build cycle, use the Builder's &lt;code&gt;Build&lt;/code&gt; workflow command. The Build command will execute the sequence of commands that comprise each step of the build life cycle. 

The &quot;Build&quot; command takes an optional parameter, &quot;-buildstamp&quot;. The &quot;buildstamp&quot; represents the build identifier is also used during package registration in the repository import step. If no -buildstamp parameter is specified, one will be automatically generated.

If you are curious what commands will run in the Build workflow view the &quot;process flow view&quot; in Workbench.
Navigate to the &quot;simple&quot; Builder object in Workbench, select it and then click the &quot;Commands&quot; tab.
Scroll to the &quot;Build&quot; command and press the icon to the right.

[[Image:workbench-Builder-simple-Build-pview.png]]

The image shows the sequence of commands Build will run and on which Node the command can be run.

====Automatic buildstamp generation====

Without the &quot;-buildstamp&quot; option, the Build command will generate a buildstamp to identify the produced artifact.
&lt;pre&gt;
ctl -p demo -t Builder -r simple -c Build
&lt;/pre&gt;

* &lt;code&gt;Build&lt;/code&gt; begins by running the &lt;code&gt;scmCheckout&lt;/code&gt; command which runs the CVS checkout of simple's src directory. 
* Next, the &lt;code&gt;setBuildstamp&lt;/code&gt; command generates and stores a buildstamp used in later steps of the workflow
* The &lt;code&gt;runBuildScript&lt;/code&gt; command is then run to invoke the build procedure.
* Finally, the &lt;code&gt;repoImport&lt;/code&gt; command looks in the target directory for matching artifacts and then puts them into the repository, recording information about the package in the model.

After the command completes, go to the Package Manager in Workbench and list all the packages. You should see a package named &quot;simple-trunk.1.2.3.war&quot;.

====User specified buildstamp====

You can also run the Build command and pass in an arbitrary buildstamp value.  
This lets a user define their own build identifier via the command option.

The example below passes in &quot;Mar15&quot; as the buildstamp value.
&lt;pre&gt;
ctl -p demo -t Builder -r simple -c Build -- -buildstamp Mar15
.
.
. 
&lt;output omitted&gt;
&lt;/pre&gt;

Notice how the &quot;Mar15&quot; buildstamp is used through out the steps of the workflow.

Go back to the Package Manager package list and you should now see a packaged named &quot;simple-Mar15.war&quot;.

===Walking through the Build output messages===

It's helpful to walk through the output of the Build workflow to understand what happened at each step. 
Each step in the workflow is demarcated with a begin/end message.

====Step 1: scmCheckout====
The scmCheckout command invokes the &quot;cvs checkout&quot; command passing in the needed parameters. 
You can see these in the second line as &quot;scmCheckout parameters&quot;:
&lt;pre&gt;
begin workflow command (1/4) -&gt; &quot;scmCheckout &quot; ...
scmCheckout parameters: {basedir=&quot;/Users/alexh/simple/src&quot;, connection=&quot;/Users/alexh/simple/cvsroot&quot;, module=&quot;src&quot;, label=&quot;&quot;, scmcommand=&quot;checkout&quot; }
cvs -d/Users/alexh/simple/cvsroot checkout src
[command.timer.Builder.scmCheckout: 0.044 sec]
end workflow command (1/4) -&gt; &quot;scmCheckout &quot;
&lt;/pre&gt;

Because this Builder's specified &quot;cvs&quot; for the BuilderScmBinding, the cvs client was invoked.
The cvs client implementation then formats the correct set of arguments for the cvs command.
For example, you can see this command in the message:
&lt;code&gt;cvs -d/Users/alexh/simple/cvsroot checkout src&lt;/code&gt;

====Step 2: setBuildstamp====

The setBuildstamp command conditionally generates a buildstamp if one is not supplied. It also stores it so the last used buildstamp is known.
&lt;pre&gt;
begin workflow command (2/4) -&gt; &quot;setBuildstamp &quot; ...
CVS does not support automatic change number generation, skipping ...
Automatically set buildstamp to &quot;trunk.1.2.3&quot;
[command.timer.Builder.setBuildstamp: 0.685 sec]
end workflow command (2/4) -&gt; &quot;setBuildstamp &quot;
&lt;/pre&gt;

Notice in the third line, &quot;trunk.1.2.3&quot; is the generated buildstamp.

====Step 3: runBuildscript====

The runBuildscript command is responsible for running the build tool, script and target. 
The second line shows the parameters used.
&lt;pre&gt;
begin workflow command (3/4) -&gt; &quot;runBuildScript &quot; ...
runBuildScript parameters: {basedir=&quot;/Users/alexh/simple/src&quot;, targetdir=&quot;/Users/alexh/simple/target&quot;, buildstamp=&quot;trunk.1.2.3&quot;, buildfile=&quot;/Users/alexh/simple/src/build.xml&quot;, target=&quot;all&quot; }
[command.timer.Builder.runBuildScript: 0.426 sec]
end workflow command (3/4) -&gt; &quot;runBuildScript &quot;
&lt;/pre&gt;

Note also, any of the &quot;simple&quot; Builder's property data can be referenced within the build.xml file.

====Step 4: repoImport====
The last step in the generic Build workflow is to call &lt;code&gt;repoImport&lt;/code&gt;.
The repoImport command looks for artifacts to upload to the repository.
It looks for files in the &quot;targetdir&quot; recursively, searching for files that match the configured filebase pattern and file extension.
&lt;pre&gt;
begin workflow command (4/4) -&gt; &quot;repoImport &quot; ...
Created dir: /Users/alexh/ctier/ctl/projects/demo/resources/Builder/simple/tmp/Builder-repoImport-20090228121114
Condition: isProcessableWithoutExistingPropfile result: true
opts.propfile set to: autogenerated-builder.properties
Creating new property file: /Users/alexh/ctier/ctl/projects/demo/resources/Builder/simple/tmp/Builder-repoImport-20090228121114/import-count.properties
processing files in directory: '/Users/alexh/simple/target' matching: '(simple)(?:-trunk.1.2.3)?\.(war)$' ...
processing matched file: simple-trunk.1.2.3.war
Deleting: /Users/alexh/simple/target/autogenerated-builder.properties
Auto-generated builder properties file created: /Users/alexh/simple/target/autogenerated-builder.properties...
Copying 1 file to /Users/alexh/simple/target
Copying 1 file to /Users/alexh/ctier/ctl/projects/demo/modules/Builder/commands
Getting: http://strongbad:8080/jackrabbit/repository/controltier/projects/demo/publish/modules/war-head.jar
To: /Users/alexh/ctier/ctl/var/tmp/downloads/demo/war-head.jar
Not modified - so not downloaded
war up to date
Attempting to get Package-head.jar  ...
Getting: http://strongbad:8080/jackrabbit/repository/controltier/projects/demo/publish/modules/Package-head.jar
To: /Users/alexh/ctier/ctl/var/tmp/downloads/demo/Package-head.jar
Not modified - so not downloaded
Package up to date
uploading file: /Users/alexh/simple/target/simple-trunk.1.2.3.war to: http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/war/wars/simple-trunk.1.2.3.war...
Uploading to: http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/war/wars/simple-trunk.1.2.3.war
Uploading: simple-trunk.1.2.3.war
Puted 1 file to http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/war/wars/simple-trunk.1.2.3.war
Creating new property file: /Users/alexh/ctier/ctl/projects/demo/resources/Builder/simple/tmp/Builder-repoImport-20090228121114/import-list.properties
Package &quot;simple-trunk.1.2.3.war (war)&quot; already registered. Updating object info.
Deleting: /Users/alexh/ctier/ctl/projects/demo/modules/Builder/commands/entity469576543.properties
Updating property file: /Users/alexh/ctier/ctl/projects/demo/resources/Builder/simple/tmp/Builder-repoImport-20090228121114/import-count.properties
Current count: 1
Batch request performed successfully.
Current count: 1
[command.timer.Builder.repoImport: 8.086 sec]
end workflow command (4/4) -&gt; &quot;repoImport &quot;
&lt;/pre&gt;

Notice on line 6 of the output 
&lt;code&gt;processing files in directory: '/Users/alexh/simple/target' matching: '(simple)(?:-trunk.1.2.3)?\.(war)$' ...&lt;/code&gt;

This line shows that repoImport begins looking for files in the target dir &quot;/Users/alexh/simple/target&quot;.
It looks for files that match the pattern '(simple)(?:-trunk.1.2.3)?\.(war)$'.
Breaking down that regular expression into the parameters: 
* filebase + buildstamp + extension.

{{Manual/navbox}}
[[Category:Builder]]</text>
    </revision>
  </page>
  <page>
    <title>Using ControlTier</title>
    <id>632</id>
    <revision>
      <id>14359</id>
      <timestamp>2010-11-11T16:34:44Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Methodology&lt;/categorytree&gt;
The [[ControlTier]] includes a number of facilities, libraries, tools and webapps each of which might be useful to manage applications and their infrastructure within your organization. Because applications differ so much and range in scale and complexity there is no one-size-fits-all management solution. Beyond the application differences, there are also a range of approaches, existing tools, scripts and procedures that you currently use or prefer. 

ControlTier is designed as a framework to accommodate these differences in application architectures and management approaches and preferences.

__NOTOC__

==Common activities==

Despite the differences noted above there are several activities that are common to most implementations that use ControlTier.

; Execute Commands
: CTL, ControlTier's [[Command dispatcher]] offers two ways to execute procedures in a distributed environment. [[CTL-EXEC_Command_Reference|ctl-exec]] lets you execute any [[Running ad hoc commands|ad hoc]] procedure be it a command or script. [[CTL_Command_Reference|ctl]] is used to execute [[Running defined commands|defined commands]]. The [[Utility Type Guide]] describes a number of useful utilities as a library of defined commands. Use the [[Jobcenter]] webapp to define jobs to run these ad hoc commands and scripts, as well as, defined commands declared in types. See [[Creating jobs]]. The [[Scripters cookbook]] contains lots of helpful tips.
; Publish Artifacts
: The ControlTier server includes a WebDAV repository useful for staging artifacts that will later be distributed during application updates or routine management. See the [[WebDAV Guide]] for information on accessing and using the WebDAV repository.
; Manage Deployment Cycle
: Each application component that has runtime state has a similar sequence of steps undertaken during deployment. They all need to be installed, started, stopped, and configured.
; Extending ControlTier
: ControlTier provides a number of extension points where you can plug in your own logic to control management actions. See the [[Workflow Development Guide]] for information on creating new types and defining your own commands.

==Approaches for building solutions==
ControlTier supports two approaches for creating solutions. We refer to these approaches as &quot;script-driven&quot; and &quot;model-driven&quot;. While it's easiest to begin with the script driven approach and later move on to the model-driven one, they are not mutually exclusive and we often see a blending.

===Script-driven approach===

{{main|Script-driven approach}}

{{script-driven approach}}

Most application deployment and management is automated via shell scripts. Often these scripts start simple and grow in size, number and complexity as new requirements arise. You can simplify, and scale up your management scripts by tapping into the ControlTier infrastructure and toolbox. This approach is appropriate for when the process is still being worked out since it is easy to change inside the script.

===Model-driven approach===

{{main|Model-driven approach}}

{{model-driven approach}}

ControlTier includes a number of pre-defined processes that you can configure to implement your application life cycle management. These processes are formally defined in the ControlTier type model as command workflows. The type model contains core abstractions for managing collections of long running services, as well as, concrete implementations. You can extend the ControlTier type model through creating subtypes, overriding or adding commands. This approach is useful to manage a well defined process using an established structure.

{{Manual/navbox}}
[[Category:Methodology]]</text>
    </revision>
  </page>
  <page>
    <title>Using Libraries</title>
    <id>975</id>
    <revision>
      <id>14431</id>
      <timestamp>2010-11-11T18:15:09Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">Here are some instructions for getting started with one of the ControlTier Libraries.

==Dependencies== 

* [[Installation|Install ControlTier]] with at least the specified ControlTier software version.

After installation, make sure you have:

# Created a new project in the ControlTier server
#* In the examples below, the project is named &quot;demo&quot;
# Make sure your local node is registered.
#* In the examples below, the Node is named &quot;localhost&quot;.

==Getting Started==

Define a ProjectBuilder object, and a directory for your files.  We will call the ProjectBuilder object &quot;demo&quot;, and the location will be &quot;$CTL_BASE/src/demo&quot;:

''Execute:''

 mkdir $CTL_BASE/src/demo
 cd $CTL_BASE/src/demo
 ctl -p demo -m ProjectBuilder -c Register -- -type ProjectBuilder -name demo -basedir $CTL_BASE/src/demo -installroot $CTL_BASE/src/demo/target -install

Now create a &quot;templates&quot; directory and an &quot;objects&quot; directory:

''Execute:''

 mkdir $CTL_BASE/src/demo/templates
 mkdir $CTL_BASE/src/demo/objects

You can store any [[project.xml]] formatted object model definition files in the &quot;objects&quot; directory.  If you want to create a templatized one, store it in the &quot;templates&quot; directory and define a &quot;defaults.xml&quot; file in there as well.

===Generate Objects from a Template===
To generate object models from the templates, use the &lt;code&gt;generate-resources&lt;/code&gt; command.

''Execute:''

 ctl -p demo -t ProjectBuilder -r demo -c generate-resources -- -templateDir $CTL_BASE/src/demo/templates

===Load Object Definitions===

To load the resources to the server, use the &lt;code&gt;load-resources&lt;/code&gt; command, and specify a file using the &lt;code&gt;-filename&lt;/code&gt; option.

''Execute:''

 ctl -p demo -t ProjectBuilder -r demo -c load-resources -- -filename objects/project.xml

==Uploading Packages==
 
You can combine the uploading of a package file with the loading of the Object definition XML file at the same time, using the [[Core Type Guide#Package|Package]] Types's static [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Package.html#cmd_upload upload] command with the &lt;code&gt;-xml&lt;/code&gt; option.

The convention is to name the object definition XML file to the same thing as the actual package itself, with an &quot;.xml&quot; extension appendend.

For example:

* file: ''apache-tomcat-4.1.39.zip''
* object XML: ''apache-tomcat-4.1.39.zip.xml''

You should specify the correct ''Type Name'' of the Package Object when doing the &lt;code&gt;upload&lt;/code&gt; command.

For example, if the ''apache-tomcat-4.1.39.zip'' is to be uploaded as a [[Tomcat Library#TomcatZip|TomcatZip]] object, use a command like the following: 

''execute:''

 ctl -p demo -m TomcatZip -c upload -- -filename apache-tomcat-4.1.39.zip -xml $CTL_BASE/src/demo/objects/apache-tomcat-4.1.39.zip.xml

: ''See [[Creating packages]] for more information.''


{{Manual/navbox}}
[[Category:Libraries]]</text>
    </revision>
  </page>
  <page>
    <title>Using ProjectBuilder</title>
    <id>42</id>
    <revision>
      <id>14185</id>
      <timestamp>2010-11-10T16:13:13Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>/* Establish Source Structure */</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;ProjectBuilder&lt;/categorytree&gt;
== Overview ==

: ''Watch a [http://open.controltier.com/media/tutorial-Use-ProjectBuilder.swf short screencast] on how to get started!''

[[Core_Type_Guide#ProjectBuilder|ProjectBuilder]] is a [[Core_Type_Guide#Builder|Builder]] used to manage [[Project Content]] for users that prefer to maintain the project as a set of text-based source files maintained in an SCM repository. You can use ProjectBuilder to define types and build module libraries, load resource data, even generate a Forrest documentation site. 

For type and module development, ProjectBuilder supports a typical edit, build, test methodology familiar to most developers wherein, a set of source files maintained in a source code repository are developed using familiar text editing tools, and ProjectBuilder builds and deploys them, so that the results can be distributed and used.

Note: 
* The [[Workbench]] application still serves as a useful tool along side ProjectBuilder. Since it manages the active model for the project, it allows a user to get an integrated view of the types and resource model. Besides offering a visualization layer to the active model, Workbench can also assist in the code development process. A developer can let Workbench do some code generation and then copy those generated files back into the source directory. 

The diagram below shows ProjectBuilder in the context of an SCM repository and the [[ControlTier server]]. By issuing the Build command to the ProjectBuilder resource, a developer drives the project build life cycle: sources for model artifacts are checked out of the SCM, they are compiled, packaged and uploaded to the server, and finally are deployed to a working context where the artifacts can be used.

[[Image:pb-overview.png]]

ProjectBuilder is designed to support iterative development, where there are cycles of revision to the types and resource model of the project.

Since resource definition dominates the project development process, you will become most familiar with ProjectBuilder's {{corecmd|ProjectBuilder|load-resources}} command. This command reads an XML file containing resource definitions and processes it into a set of CTL resource definitions.

The project development cycle is undertaken in several rough steps:
# Choose or create a project. (See: [[Project setup]])
# Source directory structure created. The ProjectBuilder commands work relative to this base directory.
# Define resources. Each type module can contain files that define type instances. resources can be defined in XML ([[project.xml]]) and uploaded to the server via  {{corecmd|ProjectBuilder|load-resources}}.
# Optionally, create and build a type. Types can be defined in XML ([[type.xml]]) and built, uploaded to the server and locally deployed via the  {{corecmd|ProjectBuilder|build-type}} command. 
# Build the whole project. Process all the type and resource definitions using the &lt;code&gt;Build&lt;/code&gt; workflow command.

==Setting up==

With the essential terms and concepts out of the way, this section turns to a practical discussion about setting up ProjectBuilder to develop an example project. The setup begins after the ControlTier server and client software have been installed and you can login to Workbench. 

''Note''
* Specific user input is shown in bold. The &quot;\&quot; (backslash) character is used for line continuation.

===Choose or create a project===

For these examples, let us assume we'll create a project called &quot;demo&quot;.

''Note''
* Your ControlTier installation may already have the &quot;demo&quot; project created.

See the [[Project setup]] page for instructions to create the project.

===Establish Source Structure===

Project source files should be organized in a standard structure. Below is a diagram showing the typical convention:

&lt;pre&gt;
src
 |
 |--doc      ;# Populated by the ProjectBuilder &quot;generate-forrest-docs&quot; command
 |--jobs     ;# Job sources go here 
 |--modules  ;# Module sources go here and are organized by Type name
 `--resources  ;# resource definition files reside here (see Resource Naming Convention below)
&lt;/pre&gt;

Make the directory hierarchy:
&lt;pre&gt;
mkdir -p $HOME/tutorial/src 
mkdir $HOME/tutorial/src/doc
mkdir $HOME/tutorial/src/jobs;
mkdir $HOME/tutorial/src/modules;
mkdir $HOME/tutorial/src/resources;
mkdir -p $HOME/tutorial/target;
&lt;/pre&gt;

Once completed you should have a structure like so:
&lt;pre&gt;
tutorial
|-- src
|   |-- doc
|   |-- jobs
|   |-- modules
|   `-- resources
`-- target
&lt;/pre&gt;

'''Resource Naming Convention Tips'''
* It is a good idea to establish an resource naming convention early on. See: [[Resource naming convention]]

'''ProjectBuilder Directories'''

Most of the ProjectBuilder commands work relative to a directory that contains the source files of the project. This directory is referred to as ''basedir''. A second directory must be identified where the ProjectBuilder's build artifacts will be written. That directory is referred to as ''targetdir''.

===Setup the SCM repo===

Setup for the SCM involves:
* creating (or choosing) the repository
* importing the sources
* cleanup and checkout

This example uses cvs for the source code repository.

* ''Note'':  If the CVS binary is not available on your machine, you can download and install the CVS package. Several binaries for different OS and architectures, as well as source code can be found at [http://www.nongnu.org/cvs/#downloading www.nongnu.org/cvs].  Once installed, be sure to add it to your &lt;code&gt;PATH&lt;/code&gt; environment variable.

The source files will be maintained in a local CVS repository. 
Run the following commands to create the CVS instance and import the sources created above:

&lt;pre&gt;
export CVSROOT=$HOME/tutorial/cvsroot; # local CVS repo path
cvs -d $CVSROOT init;                  # create the repository
cd $HOME/tutorial/src;                 # change directory and import the sources
cvs import -m &quot;Importing tutorial example&quot; src tutorial start; 
cd ..; rm -r $HOME/tutorial/src;       # remove the original copy.
cvs co src;                            # check out the src dir
&lt;/pre&gt;

===Define the ProjectBuilder resource===

There are important details about the ProjectBuilder that you can define in an XML file, details like
the directories mentioned above, source code management configuration, build setup, etc.

The file listing below describes the ProjectBuilder resource using this XML format. Cut and paste its
content and save it in &lt;code&gt;$HOME/tutorial/src/resources/ProjectBuilder.tutorial.xml&lt;/code&gt;.

File listing: $HOME/tutorial/src/resources/ProjectBuilder.tutorial.xml
&lt;pre&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE project PUBLIC &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; &quot;project.dtd&quot;&gt;
&lt;project&gt;
  &lt;!--
      **
      ** Builder settings definitions go here:
      ** 
  --&gt;
  &lt;setting type=&quot;BuilderScmModule&quot; name=&quot;tutorial&quot; 
	   description=&quot;The tutorial project source module&quot; 
	   settingValue=&quot;src&quot;/&gt;
  &lt;setting type=&quot;BuilderScmBinding&quot; name=&quot;tutorial&quot;
	   description=&quot;This is configured to use CVS&quot;
	   settingValue=&quot;cvs&quot;/&gt;
  &lt;setting type=&quot;BuilderScmConnection&quot; name=&quot;tutorial&quot;
	   description=&quot;The project source repository connection string&quot; 
	   settingValue=&quot;${user.home}/tutorial/cvsroot&quot;/&gt;	
  &lt;setting type=&quot;BuilderBuildstamp&quot; name=&quot;tutorial&quot; 
	   description=&quot;The initial buildstamp value&quot;
	   settingValue=&quot;0&quot;/&gt;
  &lt;!--
      **
      ** Define the tutorial ProjectBuilder deployment :
      **
  --&gt;
  &lt;deployment 
      name=&quot;tutorial&quot; type=&quot;ProjectBuilder&quot;
      description=&quot;A ProjectBuilder to maintain the project&quot;
      basedir=&quot;${user.home}/tutorial/src&quot;
      installRoot=&quot;${user.home}/tutorial/target&quot;      
      &gt;
    &lt;!--
	**
	** References where the ProjectBuilder is hosted: 
	**       (replace strongbad with the name of your node)
    --&gt;
    &lt;referrers replace=&quot;false&quot;&gt;
      &lt;resource type=&quot;Node&quot; name=&quot;strongbad&quot;/&gt;
    &lt;/referrers&gt;

    &lt;!--
	**
	** Setting references go here:
	** 
    --&gt;
    &lt;resources replace=&quot;true&quot;&gt;
      &lt;resource type=&quot;BuilderBuildstamp&quot; name=&quot;tutorial&quot;/&gt;
      &lt;resource type=&quot;BuilderScmBinding&quot; name=&quot;tutorial&quot;/&gt;
      &lt;resource type=&quot;BuilderScmModule&quot; name=&quot;tutorial&quot;/&gt;
      &lt;resource type=&quot;BuilderScmConnection&quot; name=&quot;tutorial&quot;/&gt;
    &lt;/resources&gt;

  &lt;/deployment&gt;
&lt;/project&gt;
&lt;/pre&gt;
	
Now load the definition using &lt;code&gt;load-resources&lt;/code&gt; as shown below.	
&lt;pre&gt;	
ctl -p demo -m ProjectBuilder -c load-resources -- \
  -filename $HOME/tutorial/src/resources/ProjectBuilder.tutorial.xml
&lt;/pre&gt;

You have just run one of the most common ProjectBuilder commands used to maintain projects!

As a best practice, add and commit this file to the SCM:
&lt;pre&gt;
cd $HOME/tutorial/src/resources
cvs add ProjectBuilder.tutorial.xml
cvs commit -m &quot;new ProjectBuilder definition&quot; ProjectBuilder.tutorial.xml 
&lt;/pre&gt;

===Define a job===

Part of any project, will be the definition of various jobs. This is done in XML via [[job.xml]].
The listing below describes a very trivial example that calls the &lt;code&gt;who&lt;/code&gt; command.

Save the content to: $HOME/tutorial/src/jobs/job.xml

File listing: $HOME/tutorial/src/jobs/job.xml
&lt;pre&gt;
&lt;joblist&gt;
  &lt;job&gt;
    &lt;name&gt;who's logged in?&lt;/name&gt;
    &lt;description&gt;Run the unix who command&lt;/description&gt;
    &lt;additional/&gt;
    &lt;group&gt;sysadm/users&lt;/group&gt;
    &lt;context&gt;
      &lt;depot&gt;demo3&lt;/depot&gt;
    &lt;/context&gt;
    &lt;exec&gt;who&lt;/exec&gt;
    &lt;dispatch&gt;
      &lt;threadcount&gt;1&lt;/threadcount&gt;
      &lt;keepgoing&gt;true&lt;/keepgoing&gt;
    &lt;/dispatch&gt;
  &lt;/job&gt;
&lt;/joblist&gt;
&lt;/pre&gt;

Add and commit this file to the SCM:
&lt;pre&gt;
cd $HOME/tutorial/src/jobs
cvs add job.xml
cvs commit -m &quot;new job definition&quot; job.xml
&lt;/pre&gt;

===Define a type===
You might develop your own custom types to override or add to one of the existing ones supplied in the ControlTier solution library. 
Though not shown here you would use {{corecmd|ProjectBuilder|create-type}}   to define a new one.
The &lt;code&gt;create-type&lt;/code&gt; command generates sources files into the &quot;modules&quot; directory: ''basedir''/modules/''type''.

If you choose to create types, be sure you add them to the SCM repository, as well.

See: [[First CTL module]] for examples on creating your own custom type.

==Install the ProjectBuilder resource==

With the initial project source files created and the ProjectBuilder instance defined, you are ready to install the ProjectBuilder resource to CTL so you can run the ProjectBuilder commands.

Use the &quot;&lt;code&gt;install&lt;/code&gt;&quot; action in [[CTL-DEPOT_Command_Reference|ctl-project]] as shown below to install the ProjectBuilder resource:
&lt;pre&gt;
ctl-project -p demo -a install
.
.
.
&quot;Install&quot; command running for resource: (ProjectBuilder) tutorial
&lt;/pre&gt;
The &lt;code&gt;ctl-project&lt;/code&gt; command installs all the resources assigned to this Node.

You can now run its commands via the shell like so:
ctl -p demo -t ProjectBuilder -r tutorial -c ''command''

==Noteworthy settings==
	&lt;p&gt;Reviewing the steps taken in preparing this source tree
	a few noteworthy details should be highlighted:
	&lt;/p&gt;

	&lt;table border=&quot;1&quot;&gt;
	  &lt;tr&gt;
	  &lt;th&gt;Setting &lt;/th&gt;
	  &lt;th&gt;Example&lt;/th&gt;
	  &lt;th&gt;Description&lt;/th&gt;
	  &lt;/tr&gt;
	  &lt;tr&gt;
	  &lt;td&gt;SCM connection &lt;/td&gt;
	  &lt;td&gt;$HOME/tutorial/cvsroot&lt;/td&gt;
	  &lt;td&gt;path to the source in the source code repository. (used by scmCheckout) &lt;/td&gt;
	  &lt;/tr&gt;
	  &lt;tr&gt;
	  &lt;td&gt;SCM module&lt;/td&gt;
	  &lt;td&gt;src&lt;/td&gt;
	  &lt;td&gt;module to checkout of the repository (used by scmCheckout) &lt;/td&gt;
	  &lt;/tr&gt;
	  &lt;tr&gt;
	  &lt;td&gt;source base directory (aka ''basedir'')&lt;/td&gt;
	  &lt;td&gt;$HOME/tutorial/src&lt;/td&gt;
	  &lt;td&gt;directory where checked out source resides (used by scmCheckout and runBuildScript) &lt;/td&gt;
	  &lt;/tr&gt;	 
	&lt;/table&gt;

==The project build cycle==

The ProjectBuilder &lt;code&gt;Build&lt;/code&gt; command runs the normal Builder command workflow that includes the &lt;code&gt;{{corecmd|Builder|runBuildScript}}&lt;/code&gt;
command to invoke the build tool, build file and build target. ProjectBuilder provides a basic build that will process  the source artifacts you maintain under ''basedir''.

ProjectBuilder contains an Ant build.xml file that defines the following targets:
* clean: Cleans out any files in the ''targetdir'' directory
* types: Runs the &lt;code&gt;{{corecmd|ProjectBuilder|build-library}}  &lt;/code&gt; command to build all types in ''basedir''/modules and uploads them as a library to the server
* docs: Runs the &lt;code&gt; {{corecmd|ProjectBuilder|generate-forrest-docs}}&lt;/code&gt; command to generate Forrest documentation for the types found in ''basedir''/modules
* resources: Runs the &lt;code&gt; {{corecmd|ProjectBuilder|load-resources}}&lt;/code&gt; command for all matching files under ''basedir''/resources loading them into the server
* jobs: Runs the &lt;code&gt; {{corecmd|ProjectBuilder|load-jobs}}&lt;/code&gt; command for all matching files under ''basedir''/jobs and loading them into the server
* all: Runs all the targets named above in the order given.

ProjectBuilder is configured by default to call the &quot;all&quot; target which ensures all the targets are called.
You can customize the project build cycle, by creating your own build.xml file and specify your own buildTarget.

ProjectBuilder build tool configuration is done via these settings:
* BuilderBuildFile: This setting  defines a path to the build file to be invoked by &lt;code&gt;runBuildScript&lt;/code&gt;
* ProjectBuilderBuildTarget: This setting defines the target to execute

===Customized build===
ProjectBuilder defines defaults for the build.xml and target but you can specify your own in the project.xml you use to define your ProjectBuilder resource.
Below is an XML snippet for the needed Setting definitions:
&lt;pre&gt;
&lt;setting type=&quot;BuilderBuildFile&quot; name=&quot;tutorial&quot; 
	   description=&quot;The path to the build file&quot;
	   settingValue=&quot;/path/to/my/ProjectBuilder/build.xml&quot;/&gt;
&lt;setting type=&quot;ProjectBuilderBuildTarget&quot; name=&quot;tutorial&quot; 
	   description=&quot;The build target to call&quot;
	   settingValue=&quot;all&quot;/&gt;	
&lt;/pre&gt;

==Run the Build cycle==

The project build cycle is driven by the &lt;code&gt;{{corecmd|Builder|Build}}&lt;/code&gt; workflow command. This command goes through the normal set of steps: checking out the project sources, recording the buildstamp, calling the build script and then import the produced artifacts to the repository.

The example below shows the &lt;code&gt;Build&lt;/code&gt; command called with &quot;123&quot; as the specified buildstamp:

&lt;pre&gt;
ctl -p demo -t ProjectBuilder -r tutorial -c Build -- -buildstamp 123
&lt;/pre&gt;
You should see output like below. The output messages show each step of the workflow command:
&lt;pre&gt;
Start: &quot;Run the build cycle.&quot; commands: scmCheckout,setBuildstamp,runBuildScript,repoImport
begin workflow command (1/4) -&gt; &quot;scmCheckout -buildstamp 123&quot; ...
scmCheckout parameters: {basedir=&quot;/Users/alexh/tutorial/src&quot;, connection=&quot;/Users/alexh/tutorial/cvsroot&quot;, module=&quot;src&quot;, label=&quot;&quot;, scmcommand=&quot;checkout&quot; }
cvs -d/Users/alexh/tutorial/cvsroot checkout src
[command.timer.Builder.scmCheckout: 0.093 sec]
end workflow command (1/4) -&gt; &quot;scmCheckout -buildstamp 123&quot;
begin workflow command (2/4) -&gt; &quot;setBuildstamp -buildstamp 123&quot; ...
Using provided buildstamp &quot;123&quot;
[command.timer.Builder.setBuildstamp: 0.235 sec]
end workflow command (2/4) -&gt; &quot;setBuildstamp -buildstamp 123&quot;
begin workflow command (3/4) -&gt; &quot;runBuildScript -buildstamp 123&quot; ...
runBuildScript parameters: {basedir=&quot;/Users/alexh/tutorial/src&quot;, targetdir=&quot;/Users/alexh/tutorial/target&quot;, buildstamp=&quot;123&quot;, buildfile=&quot;/Users/alexh/ctier/ctl/projects/demo/modules/ProjectBuilder/lib/build.xml&quot;, target=&quot;all&quot; }
Cleaning targetdir: /Users/alexh/tutorial/target
Deleting directory /Users/alexh/tutorial/target
Created dir: /Users/alexh/tutorial/target
Building type library ...
Building library from modules in opts.basedir: /Users/alexh/tutorial/src/modules
setting property seed.build.name to tutorial-seed
Created dir: /Users/alexh/tutorial/target/modules
processing modules in directory: /Users/alexh/tutorial/src/modules
converting type.xml for module: blah
generating handlers...
packaging module: blah
Copying 1 file to /Users/alexh/tutorial/src/modules/blah
Copying 1 file to /Users/alexh/tutorial/src/modules/blah
Deleting: /Users/alexh/tutorial/src/modules/blah/module.properties.temp
Building jar: /Users/alexh/tutorial/target/modules/blah-1.jar
 seed.build.name=tutorial-seed
 generating tutorial-seed.jar
Building jar: /Users/alexh/tutorial/target/tutorial-seed.jar
Uploading module jar: &quot;/Users/alexh/tutorial/target/tutorial-seed.jar&quot; ...
Imported types defined in library: /Users/alexh/tutorial/target/tutorial-seed.jar
Building docs ...
Defaulting filtersfile to: /Users/alexh/ctier/ctl/projects/demo/modules/ProjectBuilder/type.properties
opts{docbase=/Users/alexh/tutorial/src/doc, targetdir=/Users/alexh/tutorial/target, forresthome=/usr/local/apache-forrest-0.8}
.
.
.
Building zip: /Users/alexh/tutorial/target/site.zip
Site generation completed. Visit file:////Users/alexh/tutorial/src/doc/build/site/index.html
Loading resources located in /Users/alexh/tutorial/src/resources...
Loading &quot;/Users/alexh/tutorial/src/resources/ProjectBuilder.tutorial.xml&quot; ...
.
.
.
Executing batch update ...
Loading jobs located in /Users/alexh/tutorial/src/jobs...
Succeeded creating/updating 1 Jobs:
	1: who's logged in? [1] &lt;/jobcenter/scheduledExecution/show/1&gt;
end workflow command (3/4) -&gt; &quot;runBuildScript -buildstamp 123&quot;
begin workflow command (4/4) -&gt; &quot;repoImport -buildstamp 123&quot; ...
.
.
.
Uploading: tutorial-seed.jar
Puted 1 file to http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/demo/jar/jars/tutorial-seed-123.jar
.
.
.
Completed: execution time: 50.366 sec
&lt;/pre&gt;

Some of the output was left out for the sake of brevity but you should see output messages corresponding to each build target described in the section above.

==Summary==
ProjectBuilder supports users that want to maintain their project content using a set of text-based source files and a typical build life cycle methodology. 

ProjectBuilder provides a Build life cycle that supports processing and loading of the normal ControlTier artifacts: types, resources, and jobs.

You can extend the build process by defining your own build.xml file and configuring your ProjectBuilder resource to use it.
You can also subtype ProjectBuilder and define new commands and even define a different build life cycle process by [[Override_an_inherited_command|overriding]] the Build [[Workflow_command|workflow command]].

{{Manual/navbox}}

[[Category:ProjectBuilder]]
[[Category:Screencasts]]</text>
    </revision>
  </page>
  <page>
    <title>Using node filtering options</title>
    <id>1490</id>
    <redirect />
    <revision>
      <id>9293</id>
      <timestamp>2009-11-25T18:31:36Z</timestamp>
      <contributor>
        <username>Moses Lei</username>
        <id>10</id>
      </contributor>
      <comment>moved [[Using node filtering options]] to [[Node filtering options]]</comment>
      <text xml:space="preserve">#REDIRECT [[Node filtering options]]</text>
    </revision>
  </page>
  <page>
    <title>Using the Examples</title>
    <id>780</id>
    <revision>
      <id>14240</id>
      <timestamp>2010-11-10T19:59:14Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;noinclude&gt;&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Examples&lt;/categorytree&gt;&lt;/noinclude&gt;
The [[Examples]] provide working models and processes that you can easily load into your ControlTier server and see working.

Each example is designed to be self-contained, and uses the source-based development method to organize and store the necesary model definitions and templates. The examples roughly correspond to the structure described in the [[How to use ControlTier]].

== Troubleshooting ==

If you have any problems running the examples, a solution might be found here:
* [[Troubleshooting the Examples]] 

== Install ControlTier ==

Make sure you have met the prerequisites and installed ControlTier according to the [[Installation|Installing ControlTier]] instructions.

=== Create a New Project===
{{main|Creating a project}}
Create a Project in Workbench called &quot;demo&quot;.  You can do this in two ways:

* Navigate to the Workbench Admin page, and choose &quot;Create Project&quot;.  Enter the name &quot;demo&quot; and click Save.  (After a new installation, you can also do this from the Home page.)

''OR''

* On the command-line, execute the command &lt;code&gt;ctl-project -p demo -a create&lt;/code&gt;

:'''Note''': in all of the examples, the name of the Node used is assumed to be &quot;localhost&quot;.  If you have installed ControlTier using a different default Node name, you should follow the instructions in [[Troubleshooting the Examples#Using a different Node name]] before running each example.

== Running an Example ==

Once ControlTier is installed, you can get started with any of these projects using this sequence of steps, just replace the word ''EXAMPLE'' with one of the existing example directories:

# &lt;code&gt;ctl -p demo -m ProjectBuilder -c Register -- -xml $CTIER_ROOT/examples/''EXAMPLE''/projectbuilder.xml -install&lt;/code&gt; 
#* This loads a [[ProjectBuilder]] object definition into the ControlTier Server for the example named ''EXAMPLE''.
# &lt;code&gt;ctl -p demo -t ProjectBuilder -r ''EXAMPLE'' -c Build&lt;/code&gt;
#* This builds the code for the example named ''EXAMPLE'', and performs the necessary loading and deployment for the resources in the example.

Each example's object models are defined in the following way:

* A ''templates'' directory holds two files:
** ''defaults.xml''
*** Modify this file to change the directory paths used in the example, and to customize things like Port numbers, and your Node name.
** ''default-object.xml''
*** This is a template which uses the ''defaults.xml'' file to generate the actual object model loaded by the ProjectBuilder.  

When you run the &lt;code&gt;Build&lt;/code&gt; command, the templates are used to generate a file called ''default-object.xml''.  This is the concrete model loaded into the server.

Subsequent directions are included in each example.

== Further Customization ==

Feel free to modify the examples or copy them completely as a starting point for your own solutions.

Once you have modified the ''templates/default-object.xml'' file, re-run the &lt;code&gt;Build&lt;/code&gt; command to load the changes into the server:

 ctl -p demo -t ProjectBuilder -r ''EXAMPLE'' -c Build

(Replace ''Example'' with your resource name.)

If you want to modify the example model, be aware of these caveats:

You should modify the file ''templates/default-object.xml'' and not the top-level file named ''default-object.xml''.  

When you run the &lt;code&gt;Build&lt;/code&gt; command, the ''default-object.xml'' file will be regenerated from the template.

== Duplicating the Examples ==

If you want to complety duplicate an example and use it as a starting point, you may want to modify the ''projectbuilder.xml'' file to specify a new name for your code project.

Edit the file and change this:

 ...
 &lt;deployment 
    type=&quot;ProjectBuilder&quot;
    name=&quot;builder-simple&quot; 
    description=&quot;ProjectBuilder for the builder-simple example&quot;
    basedir=&quot;${env.CTIER_ROOT}/examples/builder-simple&quot;
    installRoot=&quot;${env.CTIER_ROOT}/examples/builder-simple/target&quot;      
    &gt;
 ...

# Change the &lt;code&gt;name=&quot;..&quot;&lt;/code&gt; attribute to the new name for your code project.  
# Change the &lt;code&gt;basedir=&quot;...&quot;&lt;/code&gt; and &lt;code&gt;installRoot=&quot;...&quot;&lt;/code&gt; directories, to point to the new project base and target dirs for your code project.

It is also useful if you do the same change in the ''templates/default-object.xml'' so that all of the Objects defined there will match the same name as your ProjectBuilder (and hence your entire code project).  You can of course use any names you wish, but it is a good idea to rename them from the values used for the example.

[[Category:Examples]]</text>
    </revision>
  </page>
  <page>
    <title>Utility Type Guide</title>
    <id>1088</id>
    <revision>
      <id>14346</id>
      <timestamp>2010-11-11T00:45:02Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Types&lt;/categorytree&gt;
[[Image:Edit-find.svg|left|86px|Technical documentation]]

{{Type guide/utils}}

==Usage==
Utility type commands are &quot;static&quot; and therefore are called outside of an object [[CTL_Command_Reference#Context|context]]. 

''Command line:''

All commands defined in Utility types are run like so:

&lt;code&gt;ctl -p ''project'' -m ''util'' -c ''command'' [-- command-args]&lt;/code&gt;

''Ant call:''

You can invoke utility type commands from your own defined commands via the [[Controller Task Reference|controller Ant task]].

&lt;syntaxhighlight lang=&quot;xml&gt;
&lt;controller&gt;
    &lt;execute&gt;
      &lt;context depot=&quot;${context.depot}&quot;/&gt;
      &lt;command name=&quot;&lt;command&gt;&quot; module=&quot;&lt;util&gt;&quot;/&gt;
      &lt;arg line=&quot;&lt;command-args&gt;&quot;/&gt;
    &lt;/execute&gt;
&lt;/controller&gt;
&lt;/syntaxhighlight&gt;

===Installation===
The utility types are included with the other [[Core Type Guide|core types]] and will exist on your server for each project. 
You can use the [[Managed-Entity]]#&lt;code&gt;Install-Module&lt;/code&gt; command to install it to the local client:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -p demo -m Managed-Entity -c Install-Module -- -module &lt;utiltype&gt;
&lt;/syntaxhighlight&gt;
For example, to load &quot;netutil&quot; into the local project name named &quot;demo&quot; run:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
ctl -p demo -m Managed-Entity -c Install-Module -- -module netutil
&lt;/syntaxhighlight&gt;

==Automation with utility modules==

Modules are libraries of executable commands that you can execute via the &lt;code&gt;[[Running ctl|ctl]]&lt;/code&gt; shell command. These commands can be executed locally or across a set of nodes by using the &lt;code&gt;-I,-X&lt;/code&gt; [[Use_node_filtering_options|node filtering options]]. The ControlTier distribution includes [[Utility Type Guide|coreutils]], a library of utilities containing a variety of useful commands that work across platforms as well as provide interfaces to the facilities within the ControlTier infrastructure.

Here are a few command examples from some of the [[coreutils]] modules:

''Example'': Use [[netutil]] &lt;code&gt;listening&lt;/code&gt; to check if something is responding to port &quot;8080&quot;. Wait up to 10 seconds:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;ctl -p project -m netutil -c listening -- -port 8080 -maxwait 10&lt;/syntaxhighlight&gt;

''Example'': Use [[fileutil]] &lt;code&gt;newer&lt;/code&gt; to check if file2 is newer than file1
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;ctl -p project -m fileutil -c newer -- -file file2 -target file1&lt;/syntaxhighlight&gt;

''Example'': Use [[textutil]] &lt;code&gt;replace&lt;/code&gt; to replace all occurrences of the  string 8080 with 28080 in all files in the basedir:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;ctl -p project -m textutil -c replace -- -basedir /basedir -token 8080 -value 28080&lt;/syntaxhighlight&gt;

''Example'': Use [[shellutil]] &lt;code&gt;pkill&lt;/code&gt; to kill all processes named &quot;myproc&quot;:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;ctl -p project -m shellutil -c pkill -- -pname myproc&lt;/syntaxhighlight&gt;

==Custom utilities==

Of course, you are not limited to using just the commands provided by the modules here. You can create your own utilities to formalize some of your routine procedures and share them with others as a module (see [[First type module]]).

{{Manual/navbox}}

[[Category:Utility types]]</text>
    </revision>
  </page>
  <page>
    <title>Utility type roadmap</title>
    <id>1190</id>
    <revision>
      <id>12475</id>
      <timestamp>2010-04-02T01:54:31Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">== generic datastore ==

a way of putting/getting data from the [[resource model]] in a generic fashion, using simple key=value pairs.  Ability to do bulk set/get as well as individual set/get.

=== set-data ===
&lt;pre&gt;
set-data [options]
[options]
  [-keys &lt;&gt;]  comma-separated keys to set
  [-values &lt;&gt;] comma-separated values, paired with each value in -keys
  [-filename &lt;&gt;] optional input file
  [-format &lt;&gt;] input file format. &lt;properties,yaml,xml,csv..&gt;
&lt;/pre&gt;

sets one or more key/value pairs into the datastore. Can use the -filename option to load data from a file, and -format to specify input format.

====examples====

&lt;pre&gt;
ctl -m datautil -c set-data -- -keys my.server.port -values 8080
⇒ sets the key &quot;my.server.port&quot; value to &quot;8080&quot;

ctl -m datautil -c set-data -- -keys my.app.name,my.app.host -values MyApp,app.example.com
⇒ sets two keys.  &quot;my.app.name&quot; value to &quot;MyApp&quot;, and &quot;my.app.host&quot; to &quot;app.example.com&quot;

ctl -m datautil -c set-data -- -filename somedata.properties -format properties
⇒ loads all data from somedata.properties file into the datastore
&lt;/pre&gt;

===get-data===
&lt;pre&gt;
get-data [options]
[options]
  [-keys &lt;&gt;] comma separated keys to retrieve
  [-format &lt;&gt;]  output format &lt;properties,shell,xml,csv...&gt;
  [-valueonly &lt;&gt;] if true, output only the data values and do not include the key names
  [-outfile &lt;&gt;]  optional file to store the output in. If -outfile is not specified, prints data to stdout.
&lt;/pre&gt;

Gets values for a set of input keys.  Outputs the data in a selected format, and optionally only produces the value instead of &quot;key=value&quot; (where this makes sense in the specified format). 

====examples====

&lt;pre&gt;
ctl -m datautil -c get-data -- -keys my.server.port -format properties
⇒ produces the output: &quot;my.server.port=8080&quot;

ctl -m datautil -c get-data -- -keys my.server.port -format shell
⇒ produces the output: &quot;export MY_SERVER_PORT=8080;&quot;

ctl -m datautil -c get-data -- -keys my.server.port -format xml
⇒ produces the output: &lt;dataset&gt;&lt;item id=&quot;my.server.port&quot;&gt;8080&lt;/item&gt;&lt;/dataset&gt;

ctl -m datautil -c get-data -- -keys my.server.port -valueonly
⇒ produces the output: &quot;8080&quot;

ctl -m datautil -c get-data -- -keys my.server.port,my.app.name,my.app.host -valueonly -format csv
⇒ produces the output: &quot;8080,MyApp,app.example.com&quot;

ctl -m datautil -c get-data -- -keys my.server.port,my.app.name,my.app.host -format shell -outfile serverenv.bash
⇒ writes a file named &quot;serverenv.bash&quot; containing the shell formatted values (e.g. for a Bash shell):
 export MY_SERVER_PORT=8080;
 export MY_APP_NAME=MyApp;
 export MY_APP_HOST=app.example.com;
&lt;/pre&gt;

== textutil template expansion ==

A command or commands that provide a simple way of expanding property references in a textfile.  By convention a template file &quot;/path/X.template&quot; is expanded into the file &quot;/path/X&quot; using ant property expansion.

=== expand-template ===

&lt;pre&gt;
expand-template [options]
[options]
 -template &lt;&gt; path to template file (required)
 [-outfile &lt;&gt;] optional path to store result. defaults to same dir as template if the template ends in &quot;.template&quot;
 [-syntax &lt;property,filter&gt;] template expansion syntax to use. Defaults to both ant property and filter expansion
 [-datafile &lt;&gt;] path to datafile for expanding template values, optional
 [-usedatastore &lt;true&gt;] if true, use the generic datastore to retrieve all values that should be substituted from the datastore
 [-failonunmatched &lt;true&gt;] if true, fail when unmatched filter keys are found
&lt;/pre&gt;

Expands the ant property references (&lt;code&gt;${property.name}&lt;/code&gt;) or filters (&lt;code&gt;@property.name@&lt;/code&gt;) in a template file, and stores the result in a new file.  By default expands the template in the same directory as the template, and uses a name based on the template file's name.  Can use a data file as input for the expanded values (or to supplement them), but by default retrieves values from the [[#generic_datastore]].

This command will use the [[#find-data-keys]] command internally to parse the pre-expanded keys from the template file, so that the datastore query can be made

==== examples ====
&lt;pre&gt;
ctl -m textutil -c expand-template -- -template /opt/server/config.xml.template 
⇒ expands the template to the path &quot;/opt/server/config.xml&quot;, getting all data from the datastore

ctl -m textutil -c expand-template -- -template /opt/server/config.xml.template -outfile /opt/server/myconfig.xml \
     -syntax filter -datafile /opt/data.properties -failonunmatched false
⇒ expands the template to the path &quot;/opt/server/config.xml&quot; to /opt/server/myconfig.xml.  
     Uses a data file for input and only expands Ant filters.  Does not fail if there are unmatched filter values.
&lt;/pre&gt;

===list-data-keys===
&lt;pre&gt;
list-data-keys [options]
[options]
  [-filename &lt;&gt;] file to extract key references from
  [-syntax &lt;property,filter&gt;]  expansion reference syntaxes to find. default to all ant property and filter references.
  [-format &lt;csv&gt;] format to produce list of output keys
&lt;/pre&gt;

Parses a file to find the key names for any Ant property or filter values.  Will be used by [[#expand-template]] to query datastore only for necessary keys.

====examples====
&lt;pre&gt;
ctl -m textutil -c list-data-keys -- -filename /opt/server/config.xml.template 
⇒ parses the template file to find all template keys for both Ant property and filter expansion.  
  Prints out the comma-separated keys found in the datafile, which can then be used by the [[#generic_datastore]] to retrieve the values:
  
  my.app.name,my.app.host,my.server.port
&lt;/pre&gt;

[[Category:Roadmap]]</text>
    </revision>
  </page>
  <page>
    <title>Version Required 3 4 3 Help</title>
    <id>788</id>
    <revision>
      <id>4164</id>
      <timestamp>2009-04-22T17:30:04Z</timestamp>
      <contributor>
        <username>Gschueler</username>
        <id>8</id>
      </contributor>
      <comment>New page: = Version 3.4.3 of the ControlTier Software is required=  The page you were on describes features of the software that require this version.  * [[Download]] the latest software  * Please c...</comment>
      <text xml:space="preserve">= Version 3.4.3 of the ControlTier Software is required=

The page you were on describes features of the software that require this version.

* [[Download]] the latest software 
* Please check out the [[FAQ]] for answers to frequently asked questions.
* [[Community|contact us]] if you are having trouble and need direct help
** [[IRC Channel]]: there is usually one or more ControlTier experts on hand in the IRC channel
** [http://groups.google.com/group/controltier Mailing List]: Send an email to the group with your question</text>
    </revision>
  </page>
  <page>
    <title>Version Required 3 4 4 Help</title>
    <id>941</id>
    <revision>
      <id>5201</id>
      <timestamp>2009-05-05T23:02:22Z</timestamp>
      <contributor>
        <username>Gschueler</username>
        <id>8</id>
      </contributor>
      <comment>New page: = Version 3.4.4 of the ControlTier Software is required=  The page you were on describes features of the software that require this version.  * [[Download]] the latest software  * Please c...</comment>
      <text xml:space="preserve">= Version 3.4.4 of the ControlTier Software is required=

The page you were on describes features of the software that require this version.

* [[Download]] the latest software 
* Please check out the [[FAQ]] for answers to frequently asked questions.
* [[Community|contact us]] if you are having trouble and need direct help
** [[IRC Channel]]: there is usually one or more ControlTier experts on hand in the IRC channel
** [http://groups.google.com/group/controltier Mailing List]: Send an email to the group with your question</text>
    </revision>
  </page>
  <page>
    <title>Version Required 3 4 9 Help</title>
    <id>1598</id>
    <revision>
      <id>10483</id>
      <timestamp>2009-12-12T00:29:30Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Created page with '= Version 3.4.9 of the ControlTier Software is required=  The page you were on describes features of the software that require this version.  * [[Download]] the latest software  …'</comment>
      <text xml:space="preserve">= Version 3.4.9 of the ControlTier Software is required=

The page you were on describes features of the software that require this version.

* [[Download]] the latest software 
* Please check out the [[FAQ]] for answers to frequently asked questions.
* [[Community|contact us]] if you are having trouble and need direct help
** [[IRC Channel]]: there is usually one or more ControlTier experts on hand in the IRC channel
** [http://groups.google.com/group/controltier Mailing List]: Send an email to the group with your question</text>
    </revision>
  </page>
  <page>
    <title>View events</title>
    <id>2028</id>
    <revision>
      <id>14684</id>
      <timestamp>2010-11-18T18:29:40Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;CTL Center&lt;/categorytree&gt;
{{Stub}}

The [[CTL Center]] Events page provides an interface to browse execution history. 
See the page [[CTL_Center#Using_the_GUI]] on instructions for general navigation and login.

==Description==

[[Image:jc-navigation-events.png|Events page]]

==Now running==

==History==

===Filtering events===

Listing can be further refined by using the filter form. Click the &quot;Filter&quot; link to reveal the form.

The filter form contains a number of fields to limit search:

* Within: Time range
* Title: Job title name
* Project: Project name. This may be set if the project menu was used
* Resource: Name of project resource
* Resource URI: ''Unsupported''
* Type: Resource type name
* Module: Module name
* Command: Command name
* User: User initiating action
* Node: Node name
* Tags: Event tag name
* Report ID: Report identifier
* Message: Message text
* Result: Success or failure status

Here the filter form is used to find just Events titled &quot;start&quot;:

[[Image:jc-events-filterform.png|Filter form]]

Pressing the &quot;Filter&quot; button generates a listing. The filtering criteria is summarized above the listing. 

[[Image:jc-events-filterresult.png|Filter result]]

Click the &quot;save this filter...&quot; link to save this filter configuration for later use. 

In this example, the &quot;start&quot; filter has been saved.

[[Image:jc-events-filtersaveform.png|Filter save form]]

Saved filters are added to a filter menu.

[[Image:jc-events-filtermenu.png|Filter menu ]]

===Event view===

[[Image:jc-event-view.png|Event view]]

==RSS==
[[Image:ReportCenter-using-step-3.png]]

{{Installation/navbox}}
{{Guide/navbox|state=uncollapsed}}
{{Manual/navbox}}
{{Reference/navbox}}

[[Category:CTL Center]]</text>
    </revision>
  </page>
  <page>
    <title>View resources</title>
    <id>2029</id>
    <revision>
      <id>14671</id>
      <timestamp>2010-11-18T17:57:57Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;CTL Center&lt;/categorytree&gt;

The [[CTL Center]] Resources page provides an interface to browse [[Node]] resources in [[Project]] resource models. 
See the page [[CTL_Center#Using_the_GUI]] on instructions for general navigation and login.

==Description==
The Resources page provides a read only interface to Node resources stored across Project resource models. 

From this page, you can list Nodes based on a configurable filter or view the details of an individual Node resource.

[[Image:jc-navigation-resources.png|Resources page]]

==Listing==

By default Node resources for all Projects are listed. To select Nodes to just one Project, use the Project menu next to the Resources tab in the top navigation bar.

Here the &quot;demo&quot; project is selected from the menu:

[[Image:jc-navigation-resources-projectmenu.png|Project menu]]

After selecting the project name, only Nodes belonging to that project are listed:

[[Image:jc-navigation-resources-list.png|Resources listing]]

===Filtering===

Listing can be further refined by using the filter form. CLick the &quot;Filter&quot; link to reveal the form.

Both include and exclude filters can be configured to select the desired Nodes.

Here the filter form is used to find just Nodes tagged with the label &quot;dev&quot;:

[[Image:jc-navigation-resources-filterform.png|Filter form]]

Pressing the &quot;Filter&quot; button generates a listing. The filtering criteria is summarized above the listing. 

[[Image:jc-navigation-resources-filterresult.png|Filter result]]

Click the &quot;save this filter...&quot; link to save this filter configuration for later use. 

In this example, the &quot;dev&quot; filter has been saved.

[[Image:jc-navigation-resources-filtersaveform.png|Filter save form]]

Saved filters are added to a filter menu.

[[Image:jc-navigation-resources-filtermenu.png|Filter menu ]]

==Node view==

Node detail can be displayed by pressing the triangular disclosure icon to the left of the Node name.

[[Image:jc-navigation-resource-view.png|Resource view]]


{{Installation/navbox}}
{{Guide/navbox|state=uncollapsed}}
{{Manual/navbox}}
{{Reference/navbox}}

[[Category:CTL Center]]</text>
    </revision>
  </page>
  <page>
    <title>War</title>
    <id>1660</id>
    <revision>
      <id>11192</id>
      <timestamp>2009-12-14T16:20:05Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Created page with '&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Package&lt;/categorytree&gt; [[File:Icon-Packa…'</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Package&lt;/categorytree&gt;
[[File:Icon-PackageObject.png]]
The [[war]] type represents a web application archive


==Reference==

{{Package/reference|war}}

==Definition==
[[File:Core-type-model.png|thumb|Core type model]]

===Metadata===

The table below gives a brief description for each of the attributes of the package type. The ones with an asterisk are required during the deployment cycle.
{{Package/type/properties}}

===Project XML===
{{Package/projectxml |example|123|war}}

===Querying===

{{Package/querying|example|123|war}}

{{Manual/navbox}}
[[Category:Package]]</text>
    </revision>
  </page>
  <page>
    <title>WebDAV</title>
    <id>1145</id>
    <revision>
      <id>14295</id>
      <timestamp>2010-11-10T22:39:31Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>/* ControlTier integration */</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;File share&lt;/categorytree&gt;
The [[WebDAV]] web application is hosted on the [[ControlTier server]] and serves as the [[File share]] supporting application deployment and maintenance processes. The [http://www.webdav.org WebDAV] protocol allows you to write to a web repository besides just getting its content. [http://jackrabbit.apache.org/ Apache Jackrabbit] is a WebDAV implementation and is included as part of the standard ControlTier distribution.

==Why WebDAV?==

{{WebDAV/Uses}}

==Using WebDAV==

===Browser access===
Firstly, you can access the WebDAV content from your browser. Go to the [[server landing page]] (eg, http://localhost:8080) and you will see a link named &quot;Apache Jackrabbit WebDAV Repository &quot;. Click that link and you will see a listing of the content root (you may need to login first).

[[Image:Webdav-browser-access.png|WebDAV browser access]]

===File system access===

Your operating system may include a WebDAV client and expose the repository as a disk volume. Once mounted you can access files as if they are local to your system. This can be useful to manage artifacts from a developer desktop.

===Command line access===

ControlTier includes the [[davutil]] command module that provides a number of methods for getting and putting files into the repository. 
* Put a file in the repository
*: &lt;pre&gt;ctl -m davutil -c copy -- -src file1  -dest http://server/webdav/file1&lt;/pre&gt;
* Get a file from the repository
*: &lt;pre&gt;ctl -m davutil -c copy -- -src http://server/webdav/file1 -dest file1 &lt;/pre&gt;
Of course you can also retrieve files from the WebDAV using any command line HTTP client. Here's an example using &lt;code&gt;curl&lt;/code&gt;. A user/password will need to be specified if authentication is required.
&lt;pre&gt;curl --user user:pass http://server/webdav/file1 -r file1&lt;/pre&gt;

You can find a list of open source and commercial tools supporting WebDAV access [http://www.webdav.org/projects/ here]. Some Linux users report successful use with [http://linux.die.net/man/1/cadaver cadaver].

The [[Scripters_cookbook#WebDAV|Scripters cookbook]] contains a number of recipes where WebDAV access is needed.

===ControlTier integration===
WebDAV is integrated with ControlTier at a number of levels and so sometimes its use is implicit. [[Workbench]] and [[Jobcenter]] both internally integrate with WebDAV storing files there. A number of the [[Core Type Guide|Core Types]] provide integration with WebDAV. For example, the [[davutil]] utility provides several commands to put and get files. The [[Package]] type provides commands to upload and get packaged artifacts. Finally, the [[Builder]] provides a bulk repository loading capability.


===Scripting and WebDAV===

{{WebDAV/Uses}}

[[Image:scripting-w-webdav.png]]

Administrators often have sets of shell script files that eventually need to be distributed among the nodes where they are used. A common approach uses tools like [http://en.wikipedia.org/wiki/Secure_copy SCP] or [http://en.wikipedia.org/wiki/Rsync rsync] to copy them to remote nodes so they are present when a person or another script needs to run them. Because administrators sometimes work independently, each writing their own utility scripts, distributing them where and when they need them, scripts can be become scattered across machines.
Alternatively, the administrators can use a WebDAV to store their scripts in an organizational scheme that best supports their work. These scripts can later be pulled and executed directly or from other scripts. The [[shellutil]] module supports this model and helps avoid ''tool sprawl''. Below is an example showing the [[shellutil]] &lt;code&gt;exec&lt;/code&gt; command executing a script stored in the WebDAV:

&lt;code&gt;ctl -p ''project'' -m shellutil -c exec -- -scripturl dav://scripts/myscript.sh&lt;/code&gt;

The &quot;dav://&quot; prefix is a convenient shorthand for WebDAV repository URL.

See also [[WebDAV Guide]]


{{Manual/navbox}}

[[Category:WebDAV]]</text>
    </revision>
  </page>
  <page>
    <title>WebDAV Guide</title>
    <id>1627</id>
    <redirect />
    <revision>
      <id>10894</id>
      <timestamp>2009-12-13T00:19:24Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>moved [[WebDAV Guide]] to [[WebDAV]]</comment>
      <text xml:space="preserve">#REDIRECT [[WebDAV]]</text>
    </revision>
  </page>
  <page>
    <title>WebDAV performance</title>
    <id>610</id>
    <revision>
      <id>13790</id>
      <timestamp>2010-11-10T15:11:27Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;project depot&quot; to &quot;project name&quot;</comment>
      <text xml:space="preserve">==Background==
As of version 3.4, the ControlTier server uses [http://jackrabbit.apache.org/ Apache Jackrabbit] as its WebDAV implementation. The first 3.4 release used a fairly vanilla configuration which seemed to be much slower than the old Slide-based WebDAV implementation. 

The ControlTier server uses WebDAV to store two kinds of content:
# Packaged artifacts: These are package files used during the deploy life cycle and typically are imported during the build process or may be directly imported if they are 3rd party software.
# Model artifacts: These fall into two categories
## Modules: These are the executables used by the CTL layer
## Data: This is metadata used to drive execution

Both artifacts are stored in the repository via WebDAV PUT and retrieved via WebDAV GET.

Each kind of artifact has its own workload pattern and performance impact.

* Size: Packages are usually larger (eg, 2mb - 2gb) while model artifacts are typically very small (eg, &lt; 2mb).
* Number: The number of packages vary based on number of Services being maintained, build configuration retention policy while model artifacts are driven directly from the size of the project model.
* Impact: Retrieval of either package or model artifact does not incur much impact as do file uploads.
* Frequency:  Packages are uploaded typically during the build process and retrieved during deployment. Model artifacts are stored during project model updating (eg once at project creation or during a library/seed upload) and do not necessarily correspond to operational build and deploy activity.

Because WebDAV performance is essential to the performance of the ControlTier server we have conducted some benchmarking.
These benchmarks compare the performance between Apache Jackrabbit in two configurations ([http://wiki.apache.org/jackrabbit/DataStore Datastore] vs Blobstore) and [http://httpd.apache.org/docs/2.0/mod/mod_dav.html Apache mod_dav].

===Assumptions===
We assume Apache mod_dav is more optimized for raw performance than Apache Jackrabbit. 
Apache Jackrabbit is a [http://jcp.org/aboutJava/communityprocess/final/jsr170/index.html JCR] implementation that provides many features (eg, indexing, versioning, etc) where the simple Apache mod_dav configuration does not.

===Summary Findings===
When Apache Jackrabbit is configured to use [http://wiki.apache.org/jackrabbit/DataStore DataStore], its performance is very close to Apache mod_dav.

==Package PUT==
The first test shows average times for PUT operations:

[[Image:average_dav_put_times.png]]

You can see there is a significant benefit to using the datastore configuration and in this configuration Jackrabbit performance is on par with Apache mod_dav.

This clearly justifies the use of datastore configuration in the ControlTier installer-based setup.

==Package GET==

The next test compares GET operations across the three configurations.

[[Image:average_dav_get_time.png]]

There isn't a significant difference between the configurations for the GET operation. Apache mod_dav is a bit faster than the Jackrabbit with datastore.

==Many Small PUTs==

The last test compares performance across the configurations during scenarios when many (ie., &gt; 1000) very small PUT operations are done in quick succession.

A typical scenario that results in many small PUT operations exists during [[Project setup|project name creation]] or project &quot;seed&quot; uploads.
Project creation involves extracting a project &quot;seed&quot; - an archive of type and module definitions - unpacking each of them into exploded directory hierarchies and then performing PUT operations for each of the resulting small files on to the WebDAV repository. The current project seed contains thousands (ie, &gt;3500) files.

[[Image:average_depo_create_time.png]]

You can see the chart reflects that Apache mod_dav is faster than Jackrabbit but not significantly.

This seems to imply that for scenarios where thousands of small PUT operations are performed, the overhead of WebDAV is the main factor.

''Note:'' It's important to point out that this scenario has not been found to exist anywhere except: project name creation, controltier-seed upload and re-staging all modules from within Workbench. These operations are also done rather infrequently.

==Future Considerations==

These tests bare evidence that performance did not vary widely between configurations for the &quot;many small PUT&quot; scenario.  

This scenario currently only occurs during project name creation or project seed uploads, two operations which are not frequently done.
It's worth pointing out that it is never anticipated to encourage nor allow end users from using PUT operations to directly update model artifacts. These operations should be done through Workbench server interfaces.
Given these points, performance improvement for project creation, and more generally model artifact storage, can be considered independently from package artifact storage and retrieval. 
An alternative arrangement to WebDAV PUT would be to have Workbench write model artifacts directly to the file system, and make these artifacts only available via normal HTTP GET. This approach would have two benefits:
* Avoid the WebDAV overhead for its unique workload pattern and thus significantly reduce time for operations like project name creation
* Avoid possible contention with Package artifact workload.
That said, there are other changes to the project create and seed library upload process that could also yield significant performance improvements.

==Appendix==

===Jackrabbit Datastore Configuration ===

Reference:
http://wiki.apache.org/jackrabbit/DataStore

&lt;pre&gt;
&lt;Repository&gt;
.
.
.
    &lt;PersistenceManager class=&quot;org.apache.jackrabbit.core.persistence.bundle.DerbyPersistenceManager&quot;&gt;
        &lt;param name=&quot;url&quot; value=&quot;jdbc:derby:${rep.home}/version/db;create=true&quot;/&gt;
        &lt;param name=&quot;schemaObjectPrefix&quot; value=&quot;version_&quot;/&gt;
      &lt;/PersistenceManager&gt;
  &lt;/Versioning&gt;
  &lt;DataStore class=&quot;org.apache.jackrabbit.core.data.FileDataStore&quot;&gt;
      &lt;param name=&quot;path&quot; value=&quot;${rep.home}/repository/datastore&quot;/&gt;
      &lt;param name=&quot;minRecordLength&quot; value=&quot;100&quot;/&gt;
  &lt;/DataStore&gt;
&lt;/Repository&gt;
&lt;/pre&gt;

===Test Configuration===
* OS:
&lt;pre&gt;
cat /etc/redhat-release 
Fedora Core release 6 (Zod)

uname -a
Linux demo 2.6.18-1.2798.fc6 #1 SMP Mon Oct 16 14:54:20 EDT 2006 i686 i686 i386 GNU/Linux
&lt;/pre&gt;

* System:
&lt;pre&gt;
-bash-3.1$ cat /proc/cpuinfo
processor	: 0
vendor_id	: GenuineIntel
cpu family	: 6
model		: 15
model name	: Intel(R) Xeon(R) CPU            3060  @ 2.40GHz
stepping	: 6
cpu MHz		: 2400.189
cache size	: 4096 KB
physical id	: 0
siblings	: 2
core id		: 0
cpu cores	: 2
fdiv_bug	: no
hlt_bug		: no
f00f_bug	: no
coma_bug	: no
fpu		: yes
fpu_exception	: yes
cpuid level	: 10
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe nx lm constant_tsc pni monitor ds_cpl vmx est tm2 cx16 xtpr lahf_lm
bogomips	: 4803.87

processor	: 1
vendor_id	: GenuineIntel
cpu family	: 6
model		: 15
model name	: Intel(R) Xeon(R) CPU            3060  @ 2.40GHz
stepping	: 6
cpu MHz		: 2400.189
cache size	: 4096 KB
physical id	: 0
siblings	: 2
core id		: 1
cpu cores	: 2
fdiv_bug	: no
hlt_bug		: no
f00f_bug	: no
coma_bug	: no
fpu		: yes
fpu_exception	: yes
cpuid level	: 10
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe nx lm constant_tsc pni monitor ds_cpl vmx est tm2 cx16 xtpr lahf_lm
bogomips	: 4800.50


-bash-3.1$ free -m
             total       used       free     shared    buffers     cached
Mem:          2023       1972         50          0        120       1221
-/+ buffers/cache:        630       1393
Swap:         2047          2       2045
&lt;/pre&gt;

Apache mod_dav: 
&lt;pre&gt;
-bash-3.1$  /opt/ctier/bin/httpd -V
Server version: Apache/2.0.59
Server built:   Mar 26 2007 20:04:38
Server's Module Magic Number: 20020903:12
Server loaded:  APR 0.9.12, APR-UTIL 0.9.12
Compiled using: APR 0.9.12, APR-UTIL 0.9.12
Architecture:   32-bit
Server compiled with....
 -D APACHE_MPM_DIR=&quot;server/mpm/prefork&quot;
 -D APR_HAS_SENDFILE
 -D APR_HAS_MMAP
 -D APR_HAVE_IPV6 (IPv4-mapped addresses enabled)
 -D APR_USE_SYSVSEM_SERIALIZE
 -D APR_USE_PTHREAD_SERIALIZE
 -D SINGLE_LISTEN_UNSERIALIZED_ACCEPT
 -D APR_HAS_OTHER_CHILD
 -D AP_HAVE_RELIABLE_PIPED_LOGS
 -D HTTPD_ROOT=&quot;/opt/ctier&quot;
 -D SUEXEC_BIN=&quot;/opt/ctier/bin/suexec&quot;
 -D DEFAULT_PIDLOG=&quot;logs/httpd.pid&quot;
 -D DEFAULT_SCOREBOARD=&quot;logs/apache_runtime_status&quot;
 -D DEFAULT_LOCKFILE=&quot;logs/accept.lock&quot;
 -D DEFAULT_ERRORLOG=&quot;logs/error_log&quot;
 -D AP_TYPES_CONFIG_FILE=&quot;conf/mime.types&quot;
 -D SERVER_CONFIG_FILE=&quot;conf/httpd.conf&quot;
&lt;/pre&gt;

* Apache Jackrabbit:
** Version 1.5.2
** Container Jetty: 6.1.14

The PUT operations was driven from the ControlTier {{Core Type Reference|davutil}} module to ensure it included the controltier environmental overhead typical of any CT action that would use dav PUT.

[[Category:WebDAV]]</text>
    </revision>
  </page>
  <page>
    <title>Weekly development meeting notes</title>
    <id>1440</id>
    <revision>
      <id>13598</id>
      <timestamp>2010-11-10T01:49:03Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;depots&quot; to &quot;projects&quot;</comment>
      <text xml:space="preserve">We often hold a weekly meeting to review current development and release activity. Often it's a review of bugs and feature requests but also includes longer term development planning and longer term goals.
&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Development&lt;/categorytree&gt;

==Dec 12 2009==
* Time: 4PM PST
* Agenda: Tracker issues and Roadmap
* Attendees: Alex, Moses, Greg, Chuck

Current activities
* 

Discussion
* 
* 
*

==Dec 11 2009==
* Time: 11AM PST
* Agenda: Tracker issues and Roadmap
* Attendees: Alex, Moses, Greg, Johnny, Chuck, Damon

Current activities
* 2010 development planning (alex,greg)

Discussion
* Node type command dispatching
* A &quot;Packages-Remove&quot; command (Johnny)
* Strawman architecture

==Dec 04 2009==
* Time: 11AM PST
* Agenda: Tracker issues and Roadmap
* Attendees: Alex, Anthony, Moses, Greg, Johhny

Tracker
* Discussed [http://sourceforge.net/tracker/?func=detail&amp;aid=2901016&amp;group_id=151079&amp;atid=779847 &quot;ctl-exec -s script_name&quot; permissions issue]. Could be based on a hybrid cygwin/windows configuration that might require os-family=cygwin
* Fix up the &quot;Node&quot; type to support command dispatching (Anthony)
* Have a command that will show what packages are deployed to what Nodes (Johnny)
* Idea of an API to call a job (moses)
* Idea of a &quot;Jobcenter mashup widget&quot; (anthony,greg)

Current activities
* 2010 development planning (alex,greg)

Discussion
* Idea allowing BuilderBuildstamp on Site (moses)
* [http://sourceforge.net/tracker/?func=detail&amp;aid=2898859&amp;group_id=151079&amp;atid=779850 Have WorkBench update projects on clients] (ahowchin)

TODO
* Review 2010 roadmap

==Nov 27 2009==
Holiday

==Nov 20 2009==
* Time: 11AM PST
* Agenda: 3.4.9 release debrief
* Attendees: Greg, Anthony, Alex-SF, mlei, Chuck

Current activities
* Discussed a few RPM installer related enhancements 
* Begin analysis for 2010 development

Discussion
* Discussed [[Strawman_roadmap_wishlist]]

==Nov 06 2009==
* Time: 11AM PST
* Agenda: [[Development_planning#Release_3.4.9|3.4.9]] Release preparation
* Attendees: Greg, Anthony, Alex-SF, mlei, Chuck

Current activities
* First trials of the client and server RPMS underway.
* Working through feedback and proposed tweaks discussed on the google group
* Found a new new bugs while doing Dukesbank refactoring work but have them in hand

Bug tracker review
* Updated priorities
* Still blocked on the email bug from workflow error handler
Feature enhancement review (tracker and CTIPs)
* Updated priorities

Discussion
* Debate over the server RPM should start Jetty during postinstall. There was a vote and the ayes had it.
* Possible Workbench object-view page improvements. The &quot;Search/Browse&quot; link opens the form is suboptimal when the attribute data is very wide.
* Still on track for Nov 11 release

TODOs
* Final integration and merges today. 
* QA verification starts Monday morning

==Oct 30 2009==
* Time: 11AM PST
* Agenda: [[Development_planning#Release_3.4.9|3.4.9]] Release preparation
* Attendees: Greg, Anthony, Alex

Current activities
* RPM build configuration set up. Built client-rpm on dev01. Shooting for a &quot;pre release&quot; of RPM distribution later today.
* Update dev01 builder code to standalone build script to mitigate older version handlers being included in newer version release
Bug tracker review
* Updated priorities
Feature enhancement review (tracker and CTIPs)
* Updated priorities

Discussion
* Reviewed RPM installation
* Reviewed CTL-CHECK

TODOs
* Create a enhancement request for init.d script
* Rename &quot;rcfile.sample&quot; to &quot;ctierrc.sample&quot;
* Change ctl-setup -a option to &quot;-N&quot; for a better mnemonic 


==Example meeting notes structure (draft):==
&lt;div style=&quot;background: #ddfbff;&quot;&gt;
{{Engineering/meeting notes}}
&lt;/div&gt;

{{CtDevelopment/navbox}}

[[Category:Development]]</text>
    </revision>
  </page>
  <page>
    <title>What is ControlTier</title>
    <id>958</id>
    <redirect />
    <revision>
      <id>5251</id>
      <timestamp>2009-05-15T00:44:43Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>[[What is ControlTier]] moved to [[ControlTier]]</comment>
      <text xml:space="preserve">#REDIRECT [[ControlTier]]</text>
    </revision>
  </page>
  <page>
    <title>What is the Control Tier</title>
    <id>426</id>
    <revision>
      <id>12042</id>
      <timestamp>2009-12-20T16:27:59Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">{{wikify}} {{cleanup}}
{{What is the Control Tier}}</text>
    </revision>
  </page>
  <page>
    <title>Who's who</title>
    <id>1332</id>
    <revision>
      <id>14191</id>
      <timestamp>2010-11-10T16:21:55Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>/* Other Important Developers */</comment>
      <text xml:space="preserve">&lt;noinclude&gt;&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Community&lt;/categorytree&gt;&lt;/noinclude&gt;
==Corporate Developers==
* [http://www.dtosolutions.com DTO Solutions]

==Corporate Users==
Companies which use (and support) ControlTier

* www.backcountry.com
* www.att.com
* www.intuit.com
* www.gazillion.com
* www.zinio.com
* www.yodlee.com
* www.restorationhardware.com
* www.sendmemobile.com
* www.alliancetime.com
* www.silverspringnetworks.com
* www.silverpop.com

==Developers and Projects==

; [[User:Ahonor|Alex Honor]] (ahonor at users dot sourceforge dot net, Alex-SF on irc)  
: Project founder, developer and group lead.

; [[User:Gschueler|Greg Schueler]] (gschueler at users dot sourceforge dot net, gschueler on irc)  
: Main developer for core projects.

; [[User:Anthony|Anthony Shortland]] (anthony at dtosolutions dot com, ashortland on irc)  
: Lead developer for the &quot;[[Elements]]&quot; library

; Chuck Scott (chuck at dtosolutions dot com)
: Active developer for the &quot;[[Elements]]&quot; library

; [[User:Moses Lei|Moses Lei]] (mlei at dtosolutions dot com, mlei on irc)  
: Committer for the &quot;[[Elements]]&quot; library

; [[User:damonedwards|Damon Edwards]] (damon at dtosolutions dot com, damonedwards on irc)  
: Assists with feature development and project organization

==Wiki managers==

; [[User:Ahonor|Alex Honor]] (ahonor at users dot sourceforge dot net)
: Doc writer

; [[User:Moses Lei|Moses Lei]]
: Wiki administrator and contributor

==Other Important Developers==

; Suresh Sastry (suresh at sastry dot net)
* Installer
* Reports
; Nalin Giri (girinalin at gmail dot com)
* Installer
* Reports

; Karan Bedi (bedi28 at gmail dot com)
* Documentation and testing

; Johnny Costello
* [[YumRpm]] and [[ApacheSystemService]]

==Community Members==
People you'll find on the #controltier IRC channel or the mailing list:


==Someone missing?==

Did we get all the information straight? If not please send your corrections in.
Did we miss you? Tell us what you are doing and how you would like to help in the ControlTier project. It's never too late to join the band...

&lt;noinclude&gt;[[Category:Community]]&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Why not build my own solution?</title>
    <id>1311</id>
    <revision>
      <id>11832</id>
      <timestamp>2009-12-17T04:29:03Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Introduction&lt;/categorytree&gt;
First of all, the ControlTier system is more than just an automation framework. The knowledge and best
practices that come as part of its infrastructure, built-in automation building blocks and workflows are what ultimately provide you with
the biggest time, stability, and efficiency gains. But putting that aside for now, let's examine what it would take to duplicate the functionality ControlTier provides.

So what does it take to build a ControlTier-like system that is  on the one hand, expressive enough for developers to declare and develop application control automation,  yet on the other hand, be  managed and operated by administrators who run complex large scale environments?
What does it take to satisfy enterprise requirements like scale, rollback, access control, version control, notifications, centralized logging, and auditing/reporting? How do you build it so your automation can be maintained and extended in a collaborative, controlled, and highly visible manner?

The diagram below describes the requirements we have acknowledged after years of living and breathing these problems. It would be hard to imagine a truly effective enterprise-grade solution that ignores any of them. 

[[Image:arch-needs-facilities.png]]

Each shaded box represents a set of requirements and capability that must be satisfied by  the solution. The table below describes why it is needed, what technologies that can be leveraged to satisfy it, and where the requirement is supported in ControlTier.

    &lt;table border=&quot;1&quot;&gt;
      &lt;tr&gt;
	&lt;th&gt;What&lt;/th&gt;&lt;th&gt;Why&lt;/th&gt;&lt;th&gt;Leverages&lt;/th&gt;&lt;th&gt;ControlTier&lt;/th&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
	&lt;td&gt;
	  Repository
	&lt;/td&gt;
	&lt;td&gt;
	  To function as the central depot of all release artifacts, automation
	  code, and deployment metadata. The repository should also a flexible organizational
	  system, allowing users to accomodate new repository elements and utilize
	  their own layout schemes. Because the repository elements must be accessible
	  to different tools, the repository should be exposed via scriptable interfaces.
	  While it is ideal that an
	  organization standardize on a single release archive format, it is often impossible due
	  to heterogeneous system and application platforms. Therefore, the system must allow
	  for the description of packages, their dependencies, and their distribution and
	  installation behavior be pluggable.
	&lt;/td&gt;

	&lt;td&gt;
	  [[WebDAV]]
	&lt;/td&gt;

	&lt;td&gt;[[Workbench]]
	&lt;/td&gt;
      &lt;/tr&gt;

      &lt;tr&gt;
	&lt;td&gt;
	  Visualization
	&lt;/td&gt;
	&lt;td&gt;
	  To graphically present the configuration and control model. Understanding an information
	  model is often easier, if it can be visualized. Further, because environments may have
	  many components with many inter-relationships, it should be possible to view subsets
	  of the model and select categories of information to display.
	&lt;/td&gt;
	&lt;td&gt;
	  [http://www.graphviz.org/ Graphviz], [http://xmlgraphics.apache.org/batik/ Batik]
	&lt;/td&gt;
	&lt;td&gt;[[Workbench]]
	&lt;/td&gt;
      &lt;/tr&gt;
 
      &lt;tr&gt;
	&lt;td&gt;
	  Reporting
	&lt;/td&gt;
	&lt;td&gt;
	  To track and audit activity. Any change made to a model or command execution 
	  should be logged. Further, the event should be correlated to the greater app
	  and environment context.
	&lt;/td&gt;

	&lt;td&gt;
	  [http://logging.apache.org/log4j/1.2/index.html log4j], [http://lucene.apache.org/java/docs/ lucene], [http://www.eclipse.org/birt/ BIRT]
	&lt;/td&gt;

	&lt;td&gt;
	  [[Reportcenter]]
	&lt;/td&gt;
      &lt;/tr&gt;
     &lt;tr&gt;
	&lt;td&gt;
	  Security
	&lt;/td&gt;
	&lt;td&gt;
	  To govern who can do what, where and when. Security should permeate through
	  all aspects of the solution. This ranges from authentication and authorization, as well
	  as, encryption, integrity and consistency.
	&lt;/td&gt;

	&lt;td&gt;
	 [http://java.sun.com/products/jndi/ JNDI]
	&lt;/td&gt;

	&lt;td&gt;CTL, JobCenter and Workbench all 
	have configurable ACL.
	&lt;/td&gt;
      &lt;/tr&gt;

      &lt;tr&gt;
	&lt;td&gt;
	  Model and Metadata
	&lt;/td&gt;
	&lt;td&gt;
	  To describe application resources, their environment, relations and procedures. A
	  model of an application should reflect three rough aspects, abstract configuration
	  of components (i.e., their logical structure), concrete deployment (i.e, how they fit in a
	  physical environment), and control (how to configure and manage their runtime state).
	  All models should be based on a generic metamodel from which users create higher level
	  models based on their own types and usage constraints. Data from the model should
	  also be accessible to external tools.

	  The model store should also maintain revision history of the model and automation code. 
	  Any change made to the model
	  should result in a new version of the model. Changes should be atomic and result
	  in a model revision that can be rolled back. It should be possible to compare
	  two revisions of a given model object.
	&lt;/td&gt;
	&lt;td&gt;
	  [http://www.w3.org/RDF/ RDF], [http://jena.sourceforge.net/ Jena]
	&lt;/td&gt;
	&lt;td&gt;[[Workbench]]
	[[type.xml]], [[project.xml]], [[job.xml]]&lt;/td&gt;
      &lt;/tr&gt;

      &lt;tr&gt;
	&lt;td&gt;
	  Collaboration
	&lt;/td&gt;
	&lt;td&gt;
	  To provide synchronized access for multiple users to develop, manage and execute 
	  configuration and control models. This should include the ability for teams
	  to work independently and pass modules between them.	 
	  The tool should encourage and facilitate knowledge sharing, allowing users
	  to describe key aspects of their management life cycle processes. This includes
	  generatation of documentation from the Model and Metadata.
	&lt;/td&gt;

	&lt;td&gt;
	  WebDAV, [http://forrest.apache.org/ Apache Forrest]
	&lt;/td&gt;

	&lt;td&gt;[[Workbench]], [[ProjectBuilder]],
	[[Reportcenter]]
	&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
	&lt;td&gt;
	  Config Generation
	&lt;/td&gt;
	&lt;td&gt;
	  To generate environment and release specific configuration files based on
	  templatized configurations bound to model views. Instead of creating a variation
	  of a config file due to environment or release differences, this strategy 
	  takes a file template that replaces hard coded settings that change over time with
	  references to a configuration Model and Metadata view.
	&lt;/td&gt;
	&lt;td&gt;
	  [http://www.w3.org/TR/xslt XSLT], [http://ant.apache.org Ant]
	&lt;/td&gt;
	&lt;td&gt;[[CTL architecture]]
	[[Workbench]]&lt;/td&gt;
      &lt;/tr&gt; 
      &lt;tr&gt;
	&lt;td&gt;
	  Automation Code Generation
	&lt;/td&gt;
	&lt;td&gt;
	  To generate templatized procedures bound to model views. Procedure declared in
	  the control model should be made executable via generated code modules. The
	  execution layer must provide a data binding capability that ties model references
	  in the generated code to a view of the model.
	&lt;/td&gt;
	&lt;td&gt;
	  Jena, XSLT
	&lt;/td&gt;
	&lt;td&gt;[[ProjectBuilder]] and [[Workbench]]&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
	&lt;td&gt;
	  Distributed Execution
	&lt;/td&gt;
	&lt;td&gt;
	  To provide centralized, coordinated sequencing and control of management tasks. 
	  Because application components
	  are distributed across machines, remote execution of commands, coordinated by
	  a higher level representation that understands dependency order, must be provided.
	  To make a procedure usable in different
	  environments, it must be abstracted from environment detail. Therefore, procedure
	  should be generated by and bound to a model of the abstracted environment. Procedures
	  should also be packaged in modules that can be plugged into a generic dispatching
	  framework to separate interface from implementation.
	&lt;/td&gt;

	&lt;td&gt;
	  Ssh, HTTP (dispatch).
	  [http://jakarta.apache.org/bsf/ Bean scripting framework], Ant
	&lt;/td&gt;

	&lt;td&gt;
	  [[CTL architecture]]
	&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
	&lt;td&gt;
	  Job Scheduler
	&lt;/td&gt;
	&lt;td&gt;
	  Allows web-based creation, scheduling and execution of key management tasks.
	  Enables the self delegation of administrative and operational activity
	  to less knowledgable staff or people in other groups, especially when
	  self-service is a requirement.
	&lt;/td&gt;
	&lt;td&gt;
	  [http://www.opensymphony.com/quartz/ Quartz]
	&lt;/td&gt;
	&lt;td&gt;[[Jobcenter]]&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/table&gt;

One last general requirement not mentioned in the table above is integration 
and interoperability with external tools and operating systems. The solution should
be capable of running on a wide range of system platforms and complement existing
toolsets.

After reflecting on this broad set of requirements, it becomes abundantly clear,
to solve this problem there are a number of difficult implementation challenges
and it is NOT a trivial development project. It's not unusual to hear about
multi-year efforts that do not achieve the ultimate goal and have cost organizations
thousands of hours of development only to end up with a home-grown solution
with high maintenance costs.

A common response to these challenges is to build
many disparate specialized tools to cope with each problem area (rather than a holistic solution). 
The greatest lesson we have learned is that these capabilities must seamlessly interoperate to
achieve the maximum benefits in efficiency. Not doing so often results in special tools
built and maintained by different groups, with a lot of elbow grease and email to make
it all work.


&lt;noinclude&gt;
{{Manual/navbox}}
&lt;/noinclude&gt;</text>
    </revision>
  </page>
  <page>
    <title>Windows service example</title>
    <id>950</id>
    <revision>
      <id>15282</id>
      <timestamp>2011-06-14T20:16:57Z</timestamp>
      <contributor>
        <username>Gtalton</username>
        <id>205</id>
      </contributor>
      <minor/>
      <comment>Building the Example</comment>
      <text xml:space="preserve">&lt;noinclude&gt;&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Examples&lt;/categorytree&gt;&lt;/noinclude&gt;
{{Version Required 3.4.4}}

This Windows Service example shows the basics of using an object of the JavaServiceWrapper type to manage the runtime lifecycle of a JBoss Application Server which is represented by the JBossServer type.  The JavaServiceWrapper type manages the use of [http://wrapper.tanukisoftware.org Tanuki Software's Java Service Wrapper facility] to control a java process as a Windows NT service.

This example shows you how to do the following things:

# Use the lifecycle commands, &lt;code&gt;Start&lt;/code&gt;, &lt;code&gt;Stop&lt;/code&gt; and &lt;code&gt;Status&lt;/code&gt; to manage the JavaServiceWrapper
# Use the commands &lt;code&gt;Add&lt;/code&gt;, and &lt;code&gt;Remove&lt;/code&gt;, to add and remove Windows NT services
# Use the JavaServiceWrapper Settings to configure the Tanuki Java Service Wrapper to properly manage the JBoss server
# use the [[project.xml]] resource model format to define and configure the Service resources

This example is built to using the [[JBossServer]] type, which has a [[JBossZip]] as a child dependency to allow deployment of the JBoss software zip package.  (Further customization would include deploying a [[ear]] or [[war]] package to the server, but is not within the scope of this example.)

We also define a [[JavaServiceWrapper]] service object which manages the JBossServer.  This JavaServiceWrapper has a [[JavaServiceWrapperZip]] child dependency to deploy the Java Service Wrapper software zip package.  It also has the JBossServer object as a child dependency.

Once the JBossServer is defined, it is set as a child dependency of the JavaServiceWrapper.  We use the &lt;code&gt;Deploy&lt;/code&gt; command to fully deploy and start the JavaServiceWrapper, which includes deploying the JBossServer that is its child dependency. The &lt;code&gt;Deploy&lt;/code&gt; command is a workflow that calls a sequence of other commands.  JavaServiceWrapper has extended the normal &lt;code&gt;Deploy&lt;/code&gt; workflow with the highlighted commands:

# Stop
# '''Remove'''
# Packages-Install
# '''Service-Install'''
# Configure
# '''Add'''
# Start

JavaServiceWrapper has the &lt;code&gt;Add&lt;/code&gt; and &lt;code&gt;Remove&lt;/code&gt; commands to perform the Windows service registration or removal.  It also has the &lt;code&gt;Service-Install&lt;/code&gt; command, which performs the installation of the dependent JBossServer object. Once the JavaServiceWrapper is deployed, we can run the standard lifecycle commands &lt;code&gt;Start&lt;/code&gt; and &lt;code&gt;Stop&lt;/code&gt; on the JavaServiceWrapper object to control the JBoss windows service itself rather than the normal JBossServer lifecycle commands.  Since the JavaServiceWrapper has registered a Windows Service definition to properly interface with the JBoss software, the lifecycle commands will simply act on the Windows Service using the normal system service control mechanism.

==Dependencies==
This demo has these dependencies.
* ControlTier &amp;mdash; 3.4.4
** Meet the prerequisites and install ControlTier according to the [[Installation|Installing ControlTier]] instructions.
* Windows
** ''This example is not compatible with Linux or Unix.''  It is compatible with x86 32-bit Windows XP or newer.
* Tanuki Software Java Service Wrapper &amp;mdash; 3.3.3 
** Download Zip: [http://wrapper.tanukisoftware.org/doc/english/download.jsp http://wrapper.tanukisoftware.org/doc/english/download.jsp]
** Copy the downloaded Zip to &lt;code&gt;%CTIER_ROOT%\examples\windows-service\pkgs\wrapper-windows-x86-32-3.3.3.zip&lt;/code&gt;
* JBoss Software &amp;mdash; 4.0.5.GA
** Download Zip: [https://sourceforge.net/project/showfiles.php?group_id=22866&amp;package_id=16942&amp;release_id=456223 JBoss-4.0.5.GA release]
** Copy the downloaded Zip to &lt;code&gt;%CTIER_ROOT%\examples\windows-service\pkgs\jboss-4.0.5.GA.zip&lt;/code&gt; 

==Building the Example==

Follow the instructions in this section to setup the example code into your environment.  

'''Note''': Don't worry about what these commands do, as they just bootstrap the example code to work in your environment and to pre-load the resource model for you. (For complete detail about how to use the [[Examples]] see [[Using the Examples]]):

Execute these bootstrap steps:

# &lt;pre&gt;cd %CTIER_ROOT%\examples\windows-service&lt;/pre&gt;
#* At the command line, navigate to the &lt;code&gt;examples\windows-service&lt;/code&gt; directory under your &lt;code&gt;%CTIER_ROOT%&lt;/code&gt; directory.
# Edit the file: &lt;code&gt;templates\defaults.xml&lt;/code&gt;
#* If you use a different node name that 'localhost', modify the file &lt;code&gt;templates\defaults.xml&lt;/code&gt; to set the value.
# &lt;pre&gt;ctl -p demo -m ProjectBuilder -c Register -- -xml projectbuilder.xml -install&lt;/pre&gt;    
#* This loads a ProjectBuilder object definition into the ControlTier Server.
# &lt;pre&gt;ctl -p demo -m Package -c upload -- -filename pkgs\wrapper-windows-x86-32-3.3.3.zip -xml templates\wrapper-windows-x86-32-3.3.3.zip.xml&lt;/pre&gt;
#* Upload the &quot;wrapper-windows-x86-32-3.3.3.zip&quot; file to the package repository. (See [[#Dependencies|Dependencies]] for download link.)
# &lt;pre&gt;ctl -p demo -m Package -c upload -- -filename pkgs\jboss-4.0.5.GA.zip -xml templates\jboss-4.0.5.GA.zip.xml&lt;/pre&gt;
#* Upload the &quot;jboss-4.0.5.GA.zip&quot; file to the package repository. (See [[#Dependencies|Dependencies]] for download link.)
# &lt;pre&gt;ctl -p demo -t ProjectBuilder -r windows-service -c Build&lt;/pre&gt;
#* Builds a working example based on template files and your working environment. Later see [[Using_the_Examples#Further_Customization|Further Customization]]

You are now ready to run the examples.

==Running the Example==

You can run any of the Service commands like so: ctl -p demo -t Service -r mock -c ''&lt;command-name&gt;''

If you run the command without the &quot;-c ''&lt;command-name&gt;''&quot; parameter you will see a listing of commands.

In the commands below, we will show the output of the command first, then an explanation of what occurred.

We will show how the JBoss server can be controlled using the JavaServiceWrapper object by doing a series of commands.  The first command we will run is &quot;Deploy&quot;, as this installs all of the necessary software packages and configures them.  As a result of this command, the JBoss server installed as a windows service, and started up.  

After the Deploy command, we will show how the service can be stopped, removed as a windows service, and finally re-added as a windows service, and started again using the individual commands.

===Run Deploy===
The &lt;code&gt;[[Service_Concepts#Deploy|Deploy]]&lt;/code&gt; command installs the dependent JavaServiceWrapperZip, installs the dependent JBossServer, configures the JavaServiceWrapper, and then starts it. When you execute it you should see that it in runs the sequence of commands in the Deploy workflow as shown in the [[#Overview|Overview]].

''execute:''

&lt;pre&gt;
ctl -p demo -t JavaServiceWrapper -r windows-service -c Deploy
&lt;/pre&gt;

''output:''

&lt;pre&gt;
Start: &quot;Run the service deployment cycle, stopping, unconfiguring, installing package dependencies, installing the dependent Service,\
    and configuring and the starting the service. .&quot; commands: Stop,Remove,Packages-Install,Service-Install,Configure,Add,Start
...
Running handler command: startService
wrapper  | Starting the JBoss 4.0.5 (windows-service) service...
wrapper  | JBoss 4.0.5 (windows-service) started.
Started the &quot;jbosswrapper&quot; Windows service.
end workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot;
end workflow command (7/7) -&gt; &quot;Start &quot;
[command.timer.demo.JavaServiceWrapper.Deploy: 1:05.078 sec]
Workflow completed. execution time: 1:05.078 sec
&lt;/pre&gt;

''What happened?''

The Deploy command executed the workflow sequence described above.

# the &lt;code&gt;Stop&lt;/code&gt; command is invoked, which in this case ends up doing nothing because the service is not yet installed. 
#* &lt;code&gt;The &quot;jbosswrapper&quot; Windows service is not running&lt;/code&gt;
# The &lt;code&gt;Remove&lt;/code&gt; command removes an existing windows service, but this first execution does not have to remove anything.
#* &lt;code&gt;The &quot;jbosswrapper&quot; Windows service is not installed&lt;/code&gt;
# The &lt;code&gt;Packages-Install&lt;/code&gt; command downloads and extracts the JavaServiceWrapperZip object (the Tanuki software zip package)
#* &lt;code&gt;Start: &quot;Install the configured package dependencies for the deployment.&quot; \&lt;/code&gt;
#* &lt;code&gt;    Beginning installation for packages:   wrapper-windows-x86-32-3.3.3.zip[JavaServiceWrapperZip] ...&lt;/code&gt;
# The &lt;code&gt;Service-Install&lt;/code&gt; workflow then dispatches three commands to the JBossServer object
## The &lt;code&gt;Install&lt;/code&gt; command, used to install the object definition to CTL
## The &lt;code&gt;Packages-Install&lt;/code&gt; command, which similarly installs the JBossServerZip 
## The &lt;code&gt;Configure&lt;/code&gt; command, which generates the JBoss configuration
# Next the &lt;code&gt;Configure&lt;/code&gt; command for the JavaServiceWrapper itself is executed, which generates the Tanuki software configuration file (wrapper.conf) via the Docs-Generate command.
#* &lt;code&gt;Copying 1 file to C:\ctier\examples\windows-service\install\wrapper-windows-x86-32-3.3.3\conf&lt;/code&gt;
# Then the &lt;code&gt;Add&lt;/code&gt; command registers a Windows Service definition using the Tanuki software and configuration
#* &lt;code&gt;wrapper  | JBoss 4.0.5 (windows-service) installed.&lt;/code&gt;
# Finally, the &lt;code&gt;Start&lt;/code&gt; command starts the Windows Service, causing the JBoss server to start.
#* &lt;code&gt;wrapper  | Starting the JBoss 4.0.5 (windows-service) service...&lt;/code&gt;
#* &lt;code&gt;wrapper  | JBoss 4.0.5 (windows-service) started.&lt;/code&gt;
#* &lt;code&gt;Started the &quot;jbosswrapper&quot; Windows service.&lt;/code&gt;

In this example, the JBossServer is configured to use the port 8180 to run, so you should now be able to visit the URL for JBoss ( http://localhost:8180 if your hostname is &quot;localhost&quot;) to see the JBoss server default page:

[[Image:win-jboss-example.png|JBoss running for the example]]

===Run Stop===
The &lt;code&gt;[[Service_Concepts#Stop|Stop]]&lt;/code&gt; command ensures the service is stopped.  When you execute it you should see that it in turn executes the &lt;code&gt;assertServiceIsDown&lt;/code&gt; command, which will stop the Windows Service for JBoss.

''execute:''

&lt;pre&gt;
ctl -p demo -t JavaServiceWrapper -r windows-service -c Stop
&lt;/pre&gt;

''output:''

&lt;pre&gt;
begin workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot; ...
wrapper  | The JBoss 4.0.5 (windows-service) Service is installed.
wrapper  | Unable to query the configuration of the JBoss 4.0.5 (windows-service) service - Access is denied. (0x5)
wrapper  |   Running: Yes
Result: 3
Exit code = 3, running bit = 2
Running handler command: stopService
wrapper  | Stopping the JBoss 4.0.5 (windows-service) service...
wrapper  | Waiting to stop...
wrapper  | JBoss 4.0.5 (windows-service) stopped.
Stopped the &quot;jbosswrapper&quot; Windows service.
end workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot;
&lt;/pre&gt;

''What happened?''

The Stop command invokes the shutdown sequence for the Service:

# the &lt;code&gt;assertServiceIsDown&lt;/code&gt; command is invoked, which uses the Tanuki wrapper to query the state of the service
#* &lt;code&gt;begin workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot; ...&lt;/code&gt;
#* ...
#* &lt;code&gt;wrapper  |   Running: Yes&lt;/code&gt;
# Since the service is running, the &lt;code&gt;stopService&lt;/code&gt; command is invoked, which uses the Tanuki wrapper to stop the service
#* &lt;code&gt;Running handler command: stopService&lt;/code&gt;
#* &lt;code&gt;wrapper  | Stopping the JBoss 4.0.5 (windows-service) service...&lt;/code&gt;
#* &lt;code&gt;wrapper  | Waiting to stop...&lt;/code&gt;
#* &lt;code&gt;wrapper  | JBoss 4.0.5 (windows-service) stopped.&lt;/code&gt;
#* &lt;code&gt;Stopped the &quot;jbosswrapper&quot; Windows service&lt;/code&gt;
# Finally, the &lt;code&gt;assertServiceIsDown&lt;/code&gt; succeeds because the &lt;code&gt;stopService&lt;/code&gt; command succeeded.
#* &lt;code&gt;end workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot;&lt;/code&gt;

===Run Remove===
The &lt;code&gt;Remove&lt;/code&gt; command will remove the definition of the JBoss server as a Windows Service.  This command first checks whether the service is already registered, and if so it runs the &lt;code&gt;removeService&lt;/code&gt; command.  

''execute:''

&lt;pre&gt;
ctl -p demo -t JavaServiceWrapper -r windows-service -c Remove
&lt;/pre&gt;

''output:''

&lt;pre&gt;
Start: &quot;Remove the Java Service Wrapper Windows service if it is installed.&quot; commands: assertServiceIsNotInstalled
begin workflow command (1/1) -&gt; &quot;assertServiceIsNotInstalled &quot; ...
wrapper  | The JBoss 4.0.5 (windows-service) Service is installed.
wrapper  | Unable to query the configuration of the JBoss 4.0.5 (windows-service) service - Access is denied. (0x5)
wrapper  |   Running: No
Result: 1
Exit code = 1
Running handler command: removeService
wrapper  | JBoss 4.0.5 (windows-service) removed.
end workflow command (1/1) -&gt; &quot;assertServiceIsNotInstalled &quot;
[command.timer.demo.JavaServiceWrapper.Remove: 3.797 sec]
Workflow completed. execution time: 3.797 sec
&lt;/pre&gt;

''What happened?''

The Remove command invokes service removal sequence for the JavaServiceWrapper:

# the &lt;code&gt;assertServiceIsNotInstalled&lt;/code&gt; command is invoked: 
#* &lt;code&gt;begin workflow command (1/1) -&gt; &quot;assertServiceIsNotInstalled &quot; ...&lt;/code&gt;
# The &lt;code&gt;assertServiceIsNotInstalled&lt;/code&gt; command uses the Tanuki wrapper to check whether the service is registered.  
#* &lt;code&gt;wrapper  | The JBoss 4.0.5 (windows-service) Service is installed.&lt;/code&gt;
# Since the service is installed, the &lt;code&gt;removeService&lt;/code&gt; command is invoked
#* &lt;code&gt;Running handler command: removeService&lt;/code&gt;
#* &lt;code&gt;wrapper  | JBoss 4.0.5 (windows-service) removed&lt;/code&gt;
# Finally, the &lt;code&gt;assertServiceIsNotInstalled&lt;/code&gt; command succeeds.
#* &lt;code&gt;end workflow command (1/1) -&gt; &quot;assertServiceIsNotInstalled &quot;&lt;/code&gt;


===Run Add===

Now that we've done automatic deployment, and manual stop and remove of the service, let's do a manual add and start of the service.

The &lt;code&gt;Add&lt;/code&gt; command will add the definition of the JBoss server as a Windows Service.  This command first checks whether the service is already registered, and if not it runs the &lt;code&gt;addService&lt;/code&gt; command.  

''execute:''

&lt;pre&gt;
ctl -p demo -t JavaServiceWrapper -r windows-service -c Add
&lt;/pre&gt;

''output:''

&lt;pre&gt;
Start: &quot;Add the Java Service Wrapper Windows service if it is not already installed.&quot; commands: assertServiceIsInstalled
begin workflow command (1/1) -&gt; &quot;assertServiceIsInstalled &quot; ...
wrapper  | The JBoss 4.0.5 (windows-service) Service is not installed.
Exit code = 0
Running handler command: addService
wrapper  | JBoss 4.0.5 (windows-service) installed.
end workflow command (1/1) -&gt; &quot;assertServiceIsInstalled &quot;
[command.timer.demo.JavaServiceWrapper.Add: 3.375 sec]
Workflow completed. execution time: 3.375 sec
&lt;/pre&gt;

''What happened?''

The Add command invokes service registration sequence for the JavaServiceWrapper:

# the &lt;code&gt;assertServiceIsInstalled&lt;/code&gt; command is invoked: 
#* &lt;code&gt;begin workflow command (1/1) -&gt; &quot;assertServiceIsInstalled &quot; ...&lt;/code&gt;
# The &lt;code&gt;assertServiceIsInstalled&lt;/code&gt; command uses the Tanuki wrapper to check whether the service is registered.  
#* &lt;code&gt;wrapper  | The JBoss 4.0.5 (windows-service) Service is not installed.&lt;/code&gt;
# Since the service is not installed, the &lt;code&gt;addService&lt;/code&gt; command is invoked
#* &lt;code&gt;Running handler command: addService&lt;/code&gt;
#* &lt;code&gt;wrapper  | JBoss 4.0.5 (windows-service) installed.&lt;/code&gt;
# Finally, the &lt;code&gt;assertServiceIsInstalled&lt;/code&gt; command succeeds.
#* &lt;code&gt;end workflow command (1/1) -&gt; &quot;assertServiceIsInstalled &quot;&lt;/code&gt;


===Run Start===
The &lt;code&gt;[[Service_Concepts#Start|Start]]&lt;/code&gt; command ensures the service is started.  When you execute it you should see that it in turn executes the &lt;code&gt;assertServiceIsUp&lt;/code&gt; command, which will start the Windows Service for JBoss.

''execute:''

&lt;pre&gt;
ctl -p demo -t JavaServiceWrapper -r windows-service -c Start
&lt;/pre&gt;

''output:''

&lt;pre&gt;
begin workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot; ...
wrapper  | The JBoss 4.0.5 (windows-service) Service is installed.
wrapper  | Unable to query the configuration of the JBoss 4.0.5 (windows-service) service - Access is denied. (0x5)
wrapper  |   Running: No
Result: 1
Exit code = 1, running bit = 0
Running handler command: startService
wrapper  | Starting the JBoss 4.0.5 (windows-service) service...
wrapper  | JBoss 4.0.5 (windows-service) started.
Started the &quot;jbosswrapper&quot; Windows service.
end workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot;
&lt;/pre&gt;

''What happened?''

The Stop command invokes the shutdown sequence for the Service:

# the &lt;code&gt;assertServiceIsUp&lt;/code&gt; command is invoked, which uses the Tanuki wrapper to query the state of the service
#* &lt;code&gt;begin workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot; ...&lt;/code&gt;
#* ...
#* &lt;code&gt;wrapper  |   Running: No&lt;/code&gt;
# Since the service is not running, the &lt;code&gt;startService&lt;/code&gt; command is invoked, which uses the Tanuki wrapper to start the service
#* &lt;code&gt;Running handler command: startService&lt;/code&gt;
#* ...
#* &lt;code&gt;wrapper  | JBoss 4.0.5 (windows-service) started.&lt;/code&gt;
# Finally, the &lt;code&gt;assertServiceIsUp&lt;/code&gt; succeeds because the &lt;code&gt;startService&lt;/code&gt; command succeeded.
#* &lt;code&gt;end workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot;&lt;/code&gt;

==How it Works==

From Workbench's &quot;Service Manager&quot; page you can see the JavaServiceWrapper's resource model in a graphical representation:

[[Image:windows-service-wrapper-object.png]]

You can see that the JavaServiceWrapper object has a JavaServiceWrapperZip and a JBossServer object, and a set of configuration Settings.

You can also view the JBossServer object's resource model:

[[Image:windows-jboss-object.png]]

It has a JBossZip object, and two Setting resources as child dependencies.

These objects are defined as a resource model in a [[project.xml|project XML]] file generated into the &lt;code&gt;%CTIER_ROOT%\examples\windows-service&lt;/code&gt;. directory. This section walks through the XML file used to define the Setting and Service resources.

Examine the contents of this file to see the full resource model definition excerpted below: 

&lt;code&gt;%CTIER_ROOT%\examples\windows-service\default-object.xml&lt;/code&gt;

===The JavaServiceWrapper Setting definitions===

The JavaServiceWrapper type defines a number of Setting subtypes which let you customize how the JavaServiceWrapper should control the underlying Java-based software service.  In this example we have configured it to work with the JBossServer which will also be described below.

These Settings are defined in the default-object.xml:

{| cellspacing=&quot;1&quot; cellpadding=&quot;4&quot; border=&quot;1&quot; style=&quot;border: 1px solid #aaa; border-collapse:collapse;&quot;
|-
!Setting Type
!Purpose
!Value
|-
|JavaServiceWrapperConsoleTitle
|Console title for service wrapper
|&lt;code&gt;JBoss 4.0.5 - service wrapper&lt;/code&gt;
|-
|JavaServiceWrapperNtServiceDescription
|NT Service description&quot; 
|&lt;code&gt;The Jboss server&lt;/code&gt;
|-
|JavaServiceWrapperNtServiceDisplayName
|NT Service display name
|&lt;code&gt;JBoss 4.0.5 (${resource.name})&lt;/code&gt;
|-
|JavaServiceWrapperNtServiceName
|NT Service name
|&lt;code&gt;jbosswrapper&lt;/code&gt;
|-
|JavaServiceWrapperJavaMainClass
|Java Main Class to invoke
|&lt;code&gt;org.tanukisoftware.wrapper.WrapperSimpleApp&lt;/code&gt;
|-
|JavaServiceWrapperJavaAdditional
|Java OPTS to use
| &lt;code&gt;-server -Dsession.serialization.jboss=true&lt;/code&gt;
|-
|JavaServiceWrapperAppParameters
|Wrapper service app parameters
|&lt;code&gt;org.jboss.Main -c ${resource.name}&lt;/code&gt;
|-
|JavaServiceWrapperJavaInitMemory
|JBoss initial memory
|&lt;code&gt;64&lt;/code&gt;
|-
|JavaServiceWrapperJavaMaxMemory
|JBoss max memory
|&lt;code&gt;96&lt;/code&gt;
|-
|JavaServiceWrapperJavaClassPath
|JBoss Class path components
|&lt;code&gt;${resource.attribute.jboss_install_root}/lib/*.jar,\
${resource.attribute.jboss_install_root}/lib/endorsed/*.jar,\
${resource.attribute.jboss_install_root}/bin/run.jar&lt;/code&gt;
|}

Below is the XML used to define these settings for the JavaServiceWrapper's resource model.
The &lt;code&gt;[[Project-v10.xml#setting|setting]]&lt;/code&gt; tag is used to define each setting and the corresponding script location.  Notice that the &lt;code&gt;type=&lt;/code&gt; attribute declares the appropriate Setting type, the &lt;code&gt;name&lt;/code&gt; attributes all match the name of the Service we will define, and that the &lt;code&gt;settingValue&lt;/code&gt; is the full path of the appropriate script for that management task.

&lt;pre&gt;
&lt;setting type=&quot;JavaServiceWrapperConsoleTitle&quot; name=&quot;windows-service&quot; 
    description=&quot;Console title for service wrapper&quot; 
    settingValue=&quot;JBoss 4.0.5 - service wrapper&quot; settingType=&quot;&quot;/&gt;
&lt;setting type=&quot;JavaServiceWrapperNtServiceDescription&quot; name=&quot;windows-service&quot; 
    description=&quot;NT Service description&quot; 
    settingValue=&quot;The Jboss server&quot; settingType=&quot;&quot;/&gt;
&lt;setting type=&quot;JavaServiceWrapperNtServiceDisplayName&quot; name=&quot;windows-service&quot; 
    description=&quot;NT Service display name&quot; 
    settingValue=&quot;JBoss 4.0.5 (${resource.name})&quot; settingType=&quot;&quot;/&gt;
&lt;setting type=&quot;JavaServiceWrapperNtServiceName&quot; name=&quot;windows-service&quot; 
    description=&quot;NT Service name&quot; 
    settingValue=&quot;jbosswrapper&quot; /&gt;
&lt;setting type=&quot;JavaServiceWrapperJavaMainClass&quot; name=&quot;windows-service&quot; 
    description=&quot;Java Main Class to invoke&quot; 
    settingValue=&quot;org.tanukisoftware.wrapper.WrapperSimpleApp&quot; /&gt;
&lt;setting type=&quot;JavaServiceWrapperJavaAdditional&quot; name=&quot;windows-service&quot; 
    description=&quot;Java OPTS to use&quot; 
    settingValue=&quot;-server -Dsession.serialization.jboss=true -Djava.naming.provider.url=jnp://localhost:1199&quot; /&gt;
&lt;setting type=&quot;JavaServiceWrapperAppParameters&quot; name=&quot;windows-service&quot;
    description=&quot;Wrapper service app parameters&quot;
    settingValue=&quot;org.jboss.Main -c ${resource.name}&quot; /&gt;
&lt;setting type=&quot;JavaServiceWrapperJavaInitMemory&quot; name=&quot;windows-service&quot;
    description=&quot;JBoss initial memory&quot;
    settingValue=&quot;64&quot; /&gt;
&lt;setting type=&quot;JavaServiceWrapperJavaMaxMemory&quot; name=&quot;windows-service&quot;
    description=&quot;JBoss max memory&quot;
    settingValue=&quot;96&quot; /&gt;
&lt;setting type=&quot;JavaServiceWrapperJavaClassPath&quot; name=&quot;windows-service&quot;
    description=&quot;JBoss Class path components&quot;
    settingValue=&quot;${resource.attribute.jboss_install_root}/lib/*.jar,${resource.attribute.jboss_install_root}/lib/endorsed/*.jar,\
    ${resource.attribute.jboss_install_root}/bin/run.jar&quot; /&gt;
&lt;/pre&gt;
===The JBossServer Setting Definitions===

The JBossServer type defines its own set of Setting types, which allow you to customize the type. (See [[JBoss]].)  In this example, we define only one Setting:

{| cellspacing=&quot;1&quot; cellpadding=&quot;4&quot; border=&quot;1&quot; style=&quot;border: 1px solid #aaa; border-collapse:collapse;&quot;
|-
!Setting Type
!Purpose
!Value
|-
|JBossPortConfig
|Port configuration for JBoss
|&lt;code&gt;ports-01&lt;/code&gt;
|}

This setting configures JBoss to listen on a particular set of ports, in this case &lt;code&gt;ports-01&lt;/code&gt; configures JBoss to use the main HTTP port of &quot;8180&quot;.

===The JavaServiceWrapper definition===

The JavaServiceWrapper is defined by a &lt;code&gt;[[Project-v10.xml#deployment|deployment]]&lt;/code&gt; tag. This element declares the name, type, and some paths (installRoot, basedir).  The installRoot and basedir are configured to point to a directory named &quot;install&quot;, inside the example folder.  This path will be where the JavaServiceWrapperZip software package will be installed (as well as the JBossServerZip as shown later.)

The settings defined above are referenced in the &lt;code&gt;[[Project-v10.xml#resources|resources]]&lt;/code&gt; element. The Node where this Service is to be deployed is referenced in the &lt;code&gt;[[Project-v10.xml#referrers|referrers]]&lt;/code&gt; element.

The Settings and the Node are reference using a ''Resource Reference'' element, which identifies the appropriate object via the &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;type&lt;/code&gt; attributes.

There are two other entries in the &lt;code&gt;&amp;lt;resources&amp;gt;&lt;/code&gt; section, one for the JBossServer object, and one for the JavaServiceWrapperZip.  The zip package is used to deploy the Tanuki software package, and the JBossServer is used to reference the install location defined in that service, and so that the JavaServiceWrapper can invoke the installation of the JBossServer.

&lt;pre&gt;
&lt;deployment 
     type=&quot;JavaServiceWrapper&quot;
     name=&quot;windows-service&quot; 
     description=&quot;Wrapper for the JBoss Server&quot; 
     installRoot=&quot;${env.CTIER_ROOT}/examples/windows-service/install&quot; 
     basedir=&quot;${env.CTIER_ROOT}/examples/windows-service/install&quot; 
     startuprank=&quot;1&quot;&gt;

   &lt;resources&gt;
     &lt;!--
      Setting resources
     --&gt;
     &lt;resource name=&quot;windows-service&quot; type=&quot;JavaServiceWrapperConsoleTitle&quot; /&gt;
     &lt;resource name=&quot;windows-service&quot; type=&quot;JavaServiceWrapperNtServiceDescription&quot; /&gt;
     &lt;resource name=&quot;windows-service&quot; type=&quot;JavaServiceWrapperNtServiceDisplayName&quot; /&gt;
     &lt;resource name=&quot;windows-service&quot; type=&quot;JavaServiceWrapperNtServiceName&quot; /&gt;
     &lt;resource name=&quot;windows-service&quot; type=&quot;JavaServiceWrapperJavaMainClass&quot; /&gt;
     &lt;resource name=&quot;windows-service&quot; type=&quot;JavaServiceWrapperJavaAdditional&quot; /&gt;
     &lt;resource name=&quot;windows-service&quot; type=&quot;JavaServiceWrapperAppParameters&quot; /&gt;
     &lt;resource name=&quot;windows-service&quot; type=&quot;JavaServiceWrapperJavaClassPath&quot; /&gt;
     &lt;resource name=&quot;windows-service&quot; type=&quot;JavaServiceWrapperJavaInitMemory&quot; /&gt;
     &lt;resource name=&quot;windows-service&quot; type=&quot;JavaServiceWrapperJavaMaxMemory&quot; /&gt;

  &lt;!-- the JBossServer --&gt;
     &lt;resource type=&quot;JBossServer&quot; name=&quot;windows-service&quot;/&gt;
     &lt;!--
       include the JavaServiceWrapperZip resource:
     --&gt;
     &lt;resource name=&quot;wrapper-windows-x86-32-3.3.3.zip&quot; type=&quot;JavaServiceWrapperZip&quot; /&gt;
   &lt;/resources&gt;

   &lt;!--
 Define a parent dependency to the node where you are running this example. 
   --&gt;
   &lt;referrers replace=&quot;false&quot;&gt;
     &lt;!--
   Use the default node name defined in defaults.xml
     --&gt;
     &lt;resource type=&quot;Node&quot; name=&quot;localhost&quot;/&gt;
   &lt;/referrers&gt;
&lt;/deployment&gt;
&lt;/pre&gt;

===JBossServer Definition===

The configuration of the JBossServer is fairly simple.  For simplicity, this example does not include any form of &lt;code&gt;ear&lt;/code&gt; or &lt;code&gt;war&lt;/code&gt; deployment, but that could be configured as described in other documents and examples.

The &lt;code&gt;&amp;lt;deployment&amp;gt;&lt;/code&gt; element defines the JBossServer's name, description and installRoot and basedir.  For JBoss, the installRoot is configured to be the path where the JBossServerZip will be expanded.  The basedir is the location of the specific service configuration path, underneath the installRoot, and in this example we name it using the object's name.

The JBossServer has a number of possible Setting subtyes which can be used to configure the JBoss software.  In this example we used only one Setting resources as shown in the &lt;code&gt;default-object.xml&lt;/code&gt; file, and a single &lt;code&gt;JBossZip&lt;/code&gt; subtype to configure the distribution software, which are added in the &lt;code&gt;&amp;lt;resources&amp;gt;&lt;/code&gt; section.

In the &lt;code&gt;&amp;lt;referrers&amp;gt;&lt;/code&gt; section, the Node to deploy the service is added, as well as the JavaServiceWrapper we have defined earlier.

&lt;pre&gt;
&lt;deployment 
     type=&quot;JBossServer&quot;
     name=&quot;windows-service&quot; 
     description=&quot;JBoss Server 4.0.5&quot; 
     installRoot=&quot;${env.CTIER_ROOT}/examples/windows-service/install/jboss-4.0.5.GA&quot; 
     basedir=&quot;${resource.attribute.jboss_install_root}/server/${resource.name}&quot;
     startuprank=&quot;1&quot;&gt;

   &lt;resources&gt;
     &lt;!--
    Setting resources
     --&gt;
      &lt;resource name=&quot;windows-service&quot; type=&quot;JBossPortConfig&quot;/&gt;
     &lt;!--
       include the JBossZip resource:
     --&gt;
     &lt;resource name=&quot;jboss-4.0.5.GA.zip&quot; type=&quot;JBossZip&quot; /&gt;
   &lt;/resources&gt;

   &lt;!--
 Define a parent dependency to the node where you are running this example. 
   --&gt;
   &lt;referrers replace=&quot;false&quot;&gt;
     &lt;!--
   Use the default node name defined in defaults.xml
     --&gt;
     &lt;resource type=&quot;Node&quot; name=&quot;localhost&quot;/&gt;
   &lt;/referrers&gt;
&lt;/deployment&gt;
&lt;/pre&gt;


==Related Topics==

* [[Windows service package deployment example]] shows how to configure a Service to manage the deployment of two packages, customize a configuration file, and manage of startup and shutdown
* [[Mock site example for windows]] shows the behavior of the core Site type and its ability to manage a set of related Services via command dispatching

Unix Examples:

* [[Mock Unix Service Example]] shows a basic Service example for Unix systems.
* [[Service Package Deployment Example]] shows the deployment of an application server container and webapp along with startup/shutdown and configuration file customization.

{{Manual/navbox}}

[[Category:Service Examples]] [[Category:Windows Examples]]</text>
    </revision>
  </page>
  <page>
    <title>Windows service package deployment example</title>
    <id>954</id>
    <revision>
      <id>15421</id>
      <timestamp>2011-07-08T18:11:05Z</timestamp>
      <contributor>
        <username>Aodennison</username>
        <id>213</id>
      </contributor>
      <minor/>
      <comment>typo</comment>
      <text xml:space="preserve">&lt;noinclude&gt;&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Examples&lt;/categorytree&gt;&lt;/noinclude&gt;
{{Version Required|3.4.4}}

:''Note:'' this document describes how to run the example on Windows. for Unix instructions, see [[Service Package Deployment Example]].

This example shows the basics of using an object of the [[Core_Type_Guide#Service|Service]] type to manage the deploy life cycle of a long running application Service. The [[Core_Type_Guide#Service|Service]] type defines several commands useful for managing the package installation, and startup shutdown cycle of a software service.

This example shows you how to do the following things:
# upload a Zip file containing the Apache Tomcat distribution to the repository
# use a finish script to customize the Zip post-installation step
# use the &lt;code&gt;Deploy&lt;/code&gt; life cycle command 
# use the &lt;code&gt;Start&lt;/code&gt;,  &lt;code&gt;Stop&lt;/code&gt;, and &lt;code&gt;Status&lt;/code&gt; life cycle commands
# customize the implementation of these commands using your shell or batch scripts to perform the logic
# use the [[project.xml]] resource model format to define a Service resource

This example provides a working set of scripts to implement the logic to manage a Tomcat application deployment. Both the Tomcat software itself along with a simple webapp application will be deployed using the Service. 

The &lt;code&gt;Deploy&lt;/code&gt; life cycle command provides a consistent interface to managing the normal steps of software deployment to a Service. The Service type defines it as a workflow command that calls &lt;code&gt;Stop, Packages-Install, Configure, Start&lt;/code&gt;. 

Services can be configured to deploy one or more software packages, coordinated by the &lt;code&gt;Packages-Install&lt;/code&gt; command. &lt;code&gt;Packages-Install&lt;/code&gt; iterates over each package, invoking the [[Core_Type_Guide#Package|Package]] type's &lt;code&gt;Install&lt;/code&gt; command on each package that has been associated as a resource to a Service. The [[Core_Type_Guide#Package|Package]] type's &lt;code&gt;Install&lt;/code&gt; command provides a consistent interface to manage the normal steps of a package deployment.

The life cycle commands &lt;code&gt;Start&lt;/code&gt; and &lt;code&gt;Stop&lt;/code&gt; work in a similar way.  Each one runs another command designed to &quot;assert&quot; that the run-state of the process is as expected. For example, the &lt;code&gt;Start&lt;/code&gt; command runs &lt;code&gt;assertServiceIsUp&lt;/code&gt;.  This &quot;assert&quot; command merely does one thing: it checks that the service is in the state specified (running or not running), and if it doesn't meet that expectation, it fails.  If it succeeds, then the &lt;code&gt;Start/Stop&lt;/code&gt; command knows it doesn't have to do anything else, and the entire command succeeds.  However, if the &quot;assert&quot; command fails, then the &lt;code&gt;Start/Stop&lt;/code&gt; command has to change the state of the service.  It does this by subsequently invoking the &lt;code&gt;startService&lt;/code&gt; or &lt;code&gt;stopService&lt;/code&gt; command.  These commands are meant to perform whatever action is necessary to start or stop the underlying service.  If this command succeeds, then the &lt;code&gt;Start/Stop&lt;/code&gt; command has succeeded, otherwise it has failed.

This mechanism separates the logic of managing the run-state of a service into discrete tasks that have clear semantics, allowing this abstract pattern to apply to the wide range of software services that need to be managed.

This example will use a set of simple shell scripts to plug in to each of these discrete tasks, allowing us to demonstrate the behavior of the life cycle commands while only simulating an actual running service.  You will see that the implementation of each of these tasks is simple and easy to customize for your own service management needs.

* For more information, see the [[Service Concepts]] and [[Package Concepts]] documents.

==Dependencies==
This demo depends on these dependencies.
* ControlTier &amp;mdash; 3.4.4
** Meet the prerequisites and install ControlTier according to the [[Installation|Installing ControlTier]] instructions.
* Tomcat &amp;mdash; 5.5.26 
** Download Zip: [http://tomcat.apache.org/download-55.cgi http://tomcat.apache.org/download-55.cgi]
** Copy the downloaded Zip to &lt;code&gt;%CTIER_ROOT%\examples\service-package-deployment\pkgs\apache-tomcat-5.5.26.zip&lt;/code&gt;

Note: A WAR file is included in the %CTIER_ROOT%\examples\service-package-deployment\pkgs directory so there is no external dependency for that.

==Building the Example==

Follow the instructions in this section to setup the example code into your environment.  

'''Note''': Don't worry about what these commands do, as they just bootstrap the example code to work in your environment and to pre-load the resource model for you. (For complete detail about how to use the [[Examples]] see [[Using the Examples]]):

Execute these bootstrap steps:

# &lt;pre&gt;cd %CTIER_ROOT%\examples\service-package-deployment&lt;/pre&gt;
#* Navigate to the &lt;code&gt;examples\service-package-deployment&lt;/code&gt; directory under your &lt;code&gt;%CTIER_ROOT%&lt;/code&gt; directory.
# Edit the file: &lt;code&gt;templates\defaults.xml&lt;/code&gt; (optional)
#* Update the file with your ''node name'' if it is not the default of &quot;localhost&quot;.
# &lt;pre&gt;ctl -p demo -m ProjectBuilder -c Register -- -xml projectbuilder.xml -install&lt;/pre&gt;	
#* This loads a ProjectBuilder object definition into the ControlTier Server.
# &lt;pre&gt;ctl -p demo -m zip -c upload -- -filename pkgs\apache-tomcat-5.5.26.zip -xml templates\apache-tomcat-5.5.26.zip.xml&lt;/pre&gt;
#* Upload the &quot;apache-tomcat-5.5.26.zip&quot; file to the package repository. Remember you had to obtain this from the Apache Tomcat project download page mentioned in the [[#Dependencies]] section above!
# &lt;pre&gt;ctl -p demo -t ProjectBuilder -r service-package-deployment -c Build&lt;/pre&gt;
#* Builds a working example based on template files and your working environment. Later see [[Using_the_Examples#Further_Customization|Further Customization]]

The result of these bootstrap steps results in a Service resource named &quot;simpleTomcat&quot; that you can use to control the deploy life cycle of a Tomcat instance via CTL commands.

You are now ready to run the examples.

==Running the Example==
You can run any of the Service commands like so: ctl -p demo -t Service -r simpleTomcat -c ''&lt;command-name&gt;''

If you run the command without the &quot;-c ''&lt;command-name&gt;''&quot; parameter you will see a listing of commands.

===Run Deploy===

The &lt;code&gt;[[Service_Concepts#Deploy|Deploy]]&lt;/code&gt; command executes the entire deployment life cycle for a Service stopping it, installing configured package resources, configuring the service and then running startup.
&lt;pre&gt;
ctl -p demo -t Service -r simpleTomcat -c Deploy
&lt;/pre&gt;

Once the command completes you should be able to access the deployed Tomcat and &quot;simple&quot; application. Visit the link like so (eg, [http://localhost:18080/simple/ http://localhost:18080/simple/]):

[[Image:simple-tomcat-webapp-screenshot-windows.png]]

You should see the current date and time displayed in the browser page.

====What the Example Shows====
You saw a lot of output from the &lt;code&gt;Deploy&lt;/code&gt; but what did it do? The nitty gritty is explained in the [[#How it Works]] and [[#The Output]] sections but here's what occurred at a high level:

# The resource model describing the simpleTomcat Service was synchronized to the CTL framework. This resource model drives all the automation commands.
#* This resource model described where the Tomcat instance runs, what packages it uses, what listening port it binds to, as well as, the scripts to use to drive various steps of the end-to-end process.
# Deploy calls the Stop command to shutdown the running Tomcat instance in case it had already been running. The shutdown procedure used scripts that are configured for this step.
#* One of these scripts used information from the resource model to lookup the Tomcat connector port to see if it was listening on that socket.
# Deploy's next step handled the package installation workflow. This step downloads, extracts and installs two packaged software artifacts: a War and Zip, also part of the resource model.
#* During the installation phase of the Zip, a &quot;finish&quot; script was called to customize the Tomcat server.xml file so it will run on non-standard ports.
# The final step called by Deploy was to run the Start command which handles the Tomcat startup.
#* This used two scripts named in the resource model to check if the Tomcat was already up and if not to call the Tomcat startup.bat script.

==How it Works==

The diagram below describes the resource model for this example. The model describes a Service deployed to one Node. The Service is configured to install two Packages one with a finish script. The service uses several script settings to control stop/start actions. Lastly, a setting is used to describe a network port value.

[[Image:simple-tomcat-service-model-windows.png|Example's Resource Model]]

From Workbench you can see the simpleTomcat Service's resource model in the &quot;Service Manager&quot; page:

[[Image:simple-tomcat-service-screenshot.png]]

You can see two Packages defined along with one Node, the host where simpleTomcat is deployed.

The simpleTomcat Service resource model is defined in a [[project.xml|project XML]] file generated into the &lt;code&gt;%CTIER_ROOT%\examples\service-package-deployment&lt;/code&gt;. directory. The following sections walk through the XML definition files used to define the simpleTomcat resource model. Each type of resource has an associated set of metadata. First the metadata describing the packages are reviewed and then the metadata for the Service.

===The Package definitions===

Two packages were defined for this example: apache-tomcat.5.5.26.zip and simple-123.war.

Package metadata is defined using the &lt;code&gt;[[Project-v10.xml#package|package]]&lt;/code&gt; tag. This tag uses a set of attributes to define the various bits of information describing each package. 

Below you can see metadata about the apache-tomcat.5.5.26.zip file includes information like build time, install root directory, version among other properties. This metadata defines a package named &quot;apache-tomcat.5.5.26.zip&quot; that is of type, &quot;zip&quot;. The normal naming convention for a package is to use its filename as the resource name. The type name (in this case &quot;zip&quot;) specifies which Package subtype to use. Package subtypes can provide their own install life cycle implementations. For example, the &quot;zip&quot; type defines an &lt;code&gt;[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_zip.html#cmd_extract extract]&lt;/code&gt; command that understands how to extract Zip archives.

Along with the metadata describing the apache-tomcat.5.5.26.zip[zip] package, there is also a ''PackageFinishScript'' setting used to define a &quot;finish&quot; script for it. This script will be called by the &lt;code&gt;finish&lt;/code&gt; command at the end of the apache-tomcat.5.5.26.zip installation to customize a configuration file. The &lt;code&gt;resources&lt;/code&gt; tag is used to associate the PackageFinishScript as a package resource.

''File listing: &lt;code&gt;%CTIER_ROOT%\examples\service-package-deployment\apache-tomcat-5.5.26.zip.xml&lt;/code&gt;''
&lt;pre&gt;
 &lt;setting type=&quot;PackageFinishScript&quot; name=&quot;apache-tomcat-5.5.26.zip&quot; 
           description=&quot;The script used during finish&quot; 
           settingValue=&quot;${env.CTIER_ROOT}/examples/service-package-deployment/finish.xml&quot; settingType=&quot;script&quot;/&gt;
  &lt;package 
      arch=&quot;noarch&quot;
      base=&quot;apache-tomcat-5.5.26&quot; 
      buildtime=&quot;2008061570109&quot; 
      description=&quot;The Tomcat application server.&quot; 
      filename=&quot;apache-tomcat-5.5.26.zip&quot; 
      filetype=&quot;zip&quot; 
      installroot=&quot;${env.CTIER_ROOT}/examples/service-package-deployment/apache-tomcat-5.5.26&quot;
      installrank=&quot;&quot; 
      name=&quot;apache-tomcat-5.5.26.zip&quot; 
      release=&quot;&quot;
      releasetag=&quot;&quot;
      repoUrl=&quot;/zip/zips/apache-tomcat-5.5.26.zip&quot; 
      restart=&quot;false&quot;
      type=&quot;zip&quot;
      vendor=&quot;&quot;
      version=&quot;5.5.26&quot;      
     &gt;
    &lt;resources&gt;
      &lt;resource type=&quot;PackageFinishScript&quot; name=&quot;apache-tomcat-5.5.26.zip&quot;/&gt;
    &lt;/resources&gt;
  &lt;/package&gt;

&lt;/pre&gt;

The next package defined here describes the WAR file that will be deployed into the Tomcat container.  This metadata defines a package named &quot;simple-123.war&quot; that is of type, &quot;war&quot;. 

No extra finish step is needed for the WAR deployment so no ''PackageFinishScript'' setting is defined.
The metadata describing the &quot;simple-123.war&quot; war object is shown in the file listing below:

''File listing: &lt;code&gt;%CTIER_ROOT%\examples\service-package-deployment\simple-123.war.xml&lt;/code&gt;''
&lt;pre&gt;
&lt;package 
    arch=&quot;noarch&quot;
    base=&quot;simple&quot; 
    buildtime=&quot;123&quot; 
    description=&quot;A simple webapp&quot;
    filename=&quot;simple-123.war&quot; 
    filetype=&quot;war&quot; 
    installroot=&quot;${env.CTIER_ROOT}/examples/service-package-deployment/apache-tomcat-5.5.26/webapps&quot;
    installrank=&quot;2&quot; 
    name=&quot;simple-123.war&quot; 
    release=&quot;&quot;
    releasetag=&quot;&quot;
    repoUrl=&quot;/war/wars/simple-123.war&quot; 
    restart=&quot;false&quot;
    type=&quot;war&quot;
    vendor=&quot;&quot;
    version=&quot;123&quot;      
    /&gt;
&lt;/pre&gt;

Review the two package XML definitions again and notice the &lt;code&gt;installrank&lt;/code&gt; property. The apache-tomcat-5.5.26.zip had &lt;code&gt;installrank=1&lt;/code&gt; while simple-123.war definition has &lt;code&gt;installrank=2&lt;/code&gt;. The ''installrank'' property provides a relative ordering to package installation. The install rank values are sorted in ascending order, ensuring packages with lower ''installrank'' will before those with higher values.

Both the package metadata and archive files were loaded into your project by the steps in the [[#Building the Example]] section. Had you uploaded the packages your self you would have run these commands:

&lt;pre&gt;
ctl -p demo -m zip -c upload -- -filename pkgs/apache-tomcat-5.5.26.zip -xml templates/apache-tomcat-5.5.26.zip.xml
ctl -p demo -m war -c upload -- -filename pkgs/simple-123.war -xml simple-123.war.xml
&lt;/pre&gt;

The &lt;code&gt;[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Package.html#cmd_upload upload]&lt;/code&gt; command uploads the specified file to the repository and registers it. The &lt;code&gt;upload&lt;/code&gt; command is shown with two arguments: &lt;code&gt;-filename&lt;/code&gt; and &lt;code&gt;-xml&lt;/code&gt;. The filename references the archive file you want to upload while the -xml option specifies the file containing the package metadata. You'll also notice that the different arguments to the &lt;code&gt;-m&lt;/code&gt; option ([http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_war.html war] vs [http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_zip.html zip]). The -m option specifies the Package type you want to use to upload the package. The &quot;zip&quot; type is used to upload Zip files while the &quot;war&quot; type is used to upload War files.

The [[Core Type Guide#ProjectBuilder|ProjectBuilder]] &lt;code&gt;[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Builder.html#cmd_repoFind repoFind]&lt;/code&gt; command can be used to query the package repository at any time. Below is an example that shows how to lookup the two files that were uploaded and registered:
&lt;pre&gt;
ctl -p demo -t ProjectBuilder -r service-package-deployment -c repoFind --^
 -packagename &quot;(?:simple-.*|apache-tomcat.*)&quot; -packagetype Package
&lt;/pre&gt;
The output shows both packages in the repository.
&lt;pre&gt;
Querying model for matching package objects ...
|
|--(zip) apache-tomcat-5.5.26.zip
|
|--(war) simple-123.war
&lt;/pre&gt;
The &lt;code&gt;-packagename&lt;/code&gt; option used a regex argument to specify a filter pattern to limit the search to just packages that have names matching that pattern. The &lt;code&gt;-packagetype&lt;/code&gt; option specifies to look for packages of any subtype of &quot;Package&quot;.

===The Service definition===
This section describes the definition of the Service resource. One Service was defined for this example: &quot;simpleTomcat&quot; of type Service. The Service definition is broken into two parts: one for script settings and the other for the Service itself. The section will walk through the XML definition found in the file listing contained in &lt;code&gt;%CTIER_ROOT%\examples\service-package-deployment\default-object-win.xml&lt;/code&gt;.

====Settings====

The Service type defines a set of standard workflows to drive the startup and shutdown processes. The resource model provides a set of setting types that let you configure the commands called by these workflows to call your scripts. The table below shows each command has a particular setting type where you declare the path to your script you want called by the command. Additionally, the ServiceSpawn setting value of &lt;code&gt;true&lt;/code&gt; indicates that the script called by &lt;code&gt;startService&lt;/code&gt; should spawn in a separate process.

{| cellspacing=&quot;1&quot; cellpadding=&quot;4&quot; border=&quot;1&quot; style=&quot;border: 1px solid #aaa; border-collapse:collapse;&quot;
|-
!Setting 
!Command
!Value
|-
|ServiceStartScript
|startService
|start.bat
|-
|ServiceStopScript
|stopService
|stop.bat
|-
|ServiceIsUpScript
|assertServiceIsUP
|isup.xml
|-
|ServiceIsDownScript
|assertServiceIsDown
|isdown.xml
|-
|ServiceSpawn
|startService
|&lt;code&gt;true&lt;/code&gt;
|}

Below is the XML used to define these settings for the simpleTomcat Service resource model.
The &lt;code&gt;[[Project-v10.xml#setting|setting]]&lt;/code&gt; tag is used to define the each setting type and corresponding script. You can see that each setting specifies the script to call using the &lt;code&gt;settingValue&lt;/code&gt; tag, and the ServiceSpawn setting specifies &quot;true&quot; as the &lt;code&gt;settingValue&lt;/code&gt;.

&lt;pre&gt;
&lt;setting type=&quot;ServiceStartScript&quot; name=&quot;simpleTomcat&quot; 
   description=&quot;The script used by startService&quot; 
   settingValue=&quot;${env.CTIER_ROOT}/examples/service-package-deployment/start.bat&quot; settingType=&quot;shell&quot;/&gt;
&lt;setting type=&quot;ServiceStopScript&quot; name=&quot;simpleTomcat&quot; 
   description=&quot;The script used by stopService&quot; 
   settingValue=&quot;${env.CTIER_ROOT}/examples/service-package-deployment/stop.bat&quot; settingType=&quot;shell&quot;/&gt;
&lt;setting type=&quot;ServiceIsUpScript&quot; name=&quot;simpleTomcat&quot; 
   description=&quot;The script used by assertServicesIsUp&quot; 
   settingValue=&quot;${env.CTIER_ROOT}/examples/service-package-deployment/isup.xml&quot; settingType=&quot;ant&quot;/&gt;
&lt;setting type=&quot;ServiceIsDownScript&quot; name=&quot;simpleTomcat&quot; 
   description=&quot;The script used by assertServicesIsDown&quot; 
   settingValue=&quot;${env.CTIER_ROOT}/examples/service-package-deployment/isdown.xml&quot; settingType=&quot;ant&quot;/&gt;
&lt;setting type=&quot;ServiceSpawn&quot; name=&quot;simpleTomcat&quot; 
   description=&quot;Whether to spawn separate process for the start script&quot;
   settingValue=&quot;true&quot; /&gt;
&lt;/pre&gt;

Settings can be used to describe any kind of information that is essentially a named key/value pair.
Here is a setting that captures the port number Tomcat uses to accept client connections. 
&lt;pre&gt;
&lt;setting type=&quot;Port&quot; name=&quot;simpleTomcat-connector&quot; 
   description=&quot;The connector port used by Tomcat&quot; 
   settingValue=&quot;18080&quot; settingType=&quot;TCP&quot;/&gt;
&lt;/pre&gt;
Setting information like this is accessible to all the commands for the Service. In this case, the connector port value can be referenced from inside the Service commands as: &lt;code&gt;${setting.Port.simpleTomcat-connector.settingValue}&lt;/code&gt;

====Service====
This section describes how to put the Service resource model all together. The resource model describing the example Service entails referencing the setting information just described as well as referencing the packages that should be installed during deployment. For the simpleTomcat service that means referencing the five settings and the two packages.

A service is defined using a &lt;code&gt;[[Project-v10.xml#deployment|deployment]]&lt;/code&gt; tag. The &lt;code&gt;deployment&lt;/code&gt; tag uses a set of attributes to name and specify the type of resource (eg &lt;code&gt;name=&quot;simpleTomcat&quot; type=&quot;Service&quot;&lt;/code&gt;). The &lt;code&gt;installRoot&lt;/code&gt; and &lt;code&gt;basedir&lt;/code&gt; attributes declare the location of the Tomcat installation (c.f., CATALINA_HOME/CATALINA_BASE).

The settings and packages are referenced as &lt;code&gt;[[Project-v10.xml#resource|resource]]&lt;/code&gt; elements inside the &lt;code&gt;[[Project-v10.xml#resources|resources]]&lt;/code&gt; element. The node where this Service is to be deployed is referenced in the &lt;code&gt;[[Project-v10.xml#referrers|referrers]]&lt;/code&gt; element.

Here's the XML that ties the information together:
&lt;pre&gt;
&lt;deployment 
     type=&quot;Service&quot;
     name=&quot;simpleTomcat&quot; 
     description=&quot;The Tomcat deployment.&quot; 
     installRoot=&quot;${env.CTIER_ROOT}/examples/service-package-deployment/apache-tomcat-5.5.26&quot; 
     basedir=&quot;${env.CTIER_ROOT}/examples/service-package-deployment/apache-tomcat-5.5.26&quot;&gt;

   &lt;resources&gt;
	   &lt;!-- 
	  **
	  ** References the scripts to be run by the Service lifecycle commands 
	  **
	   --&gt;
     &lt;resource name=&quot;simpleTomcat&quot; type=&quot;ServiceStopScript&quot; /&gt;
     &lt;resource name=&quot;simpleTomcat&quot; type=&quot;ServiceStartScript&quot; /&gt;
     &lt;resource name=&quot;simpleTomcat&quot; type=&quot;ServiceIsDownScript&quot; /&gt;
     &lt;resource name=&quot;simpleTomcat&quot; type=&quot;ServiceIsUpScript&quot; /&gt;
     &lt;resource name=&quot;simpleTomcat&quot; type=&quot;ServiceSpawn&quot; /&gt;
     &lt;!-- 
    **
    ** References the Tomcat connector port setting
    **
     --&gt;
     &lt;resource name=&quot;simpleTomcat-connector&quot; type=&quot;Port&quot; /&gt;
     &lt;!-- 
    **
    ** References the zip and war Packages
    **
     --&gt;
     &lt;resource name=&quot;apache-tomcat-5.5.26.zip&quot; type=&quot;zip&quot; /&gt;
     &lt;resource name=&quot;simple-123.war&quot; type=&quot;war&quot; /&gt;

   &lt;/resources&gt;

   &lt;!--
 **
 ** Define a parent dependency to the node where you are running this example. 
 **
   --&gt;
   &lt;referrers replace=&quot;false&quot;&gt;
     &lt;!--
   ** Change this line to one that matches your node name:
     --&gt;
     &lt;resource type=&quot;Node&quot; name=&quot;localhost&quot;/&gt;
   &lt;/referrers&gt;

 &lt;/deployment&gt;
&lt;/pre&gt;

This concludes the explanation of the example's resource model. The next section describes the Service commands that support the deploy and startup/shutdown cycles.

===Command dispatching===

The Service type defines a set of standard workflow commands that support the typical steps of deployment and startup/shutdown. The idea is to define a resource model that drives these commands, letting you configure the model to tie in calls to your scripts or expose environment information (like the Tomcat connector port) to the commands.

The startup and shutdown processes are managed via two Service workflow commands: [[Service_Concepts#Start|Start]] and [[Service_Concepts#Stop|Stop]].
Both workflows share a common design. Each check for a condition and if the condition is not met, an action is performed. Let's look at each of these workflows.

Service provides a program skeleton supporting a generic start up procedure that first checks if the service is up and if not, to then run a command to start the service. 

[[Image:Idempotent-start.png]]

You can see in the diagram that Start calls &lt;code&gt;[[Service_Concepts#assertServiceIsUp|assertServiceIsUp]]&lt;/code&gt; first. If it fails because the service is not running, then &lt;code&gt;[[Service_Concepts#startService|startService]]&lt;/code&gt; is executed.

Service also provides a program skeleton supporting a generic shutdown procedure that first checks if the service is down and if not, to then run a command to stop the service. 

[[Image:Idempotent-stop.png]]

You can see in the diagram that Stop calls &lt;code&gt;[[Service_Concepts#assertServiceIsDown|assertServiceIsDown]]&lt;/code&gt; first. If it fails because the service is running, then &lt;code&gt;[[Service_Concepts#stopService|stopService]]&lt;/code&gt; is executed.

Underlying these Service commands are the scripts that were configured via the setting definitions discussed above. All the service life cycle commands that call scripts assume a basic convention. If the script exits with a non-zero exit code, the command will fail otherwise it's interpreted as successful.

The scripts called by our simpleTomcat Service are trivial but are representative of how you can incorporate your own procedures via scripts attached to Service commands. The four hook commands can be configured to call shellscript, Windows batch or Ant build files. Let's look at each of the four scripts used in this example.

The &quot;isdown.xml&quot; is an Ant build file called by &lt;code&gt;assertServiceIsDown&lt;/code&gt;. This command checks to see if the Service is down. In this case, the isdown.xml checks if Tomcat is listening on its connector socket. If it is, a &lt;code&gt;fail&lt;/code&gt; is thrown. Notice the &lt;code&gt;${setting.Port.simpleTomcat-connector.settingValue}&lt;/code&gt; setting value is used to lookup the port to check. It's advantageous to expose resource model information like the Tomcat port value  to scripts since it makes them inherently more reusable across environments.

''File listing: &lt;code&gt;%CTIER_ROOT%\examples\service-package-deployment\isdown.xml&lt;/code&gt;''
&lt;pre&gt;
&lt;project default=&quot;execute&quot;&gt;
  &lt;!--
  **
  ** Check the listening port to see if Tomcat is running
  **
  --&gt;
  &lt;target name=&quot;execute&quot;&gt;
    &lt;!--
    ** Fail if it IS listening
    --&gt;
    &lt;fail message=&quot;Service is UP (Listening on port: ${setting.Port.simpleTomcat-connector.settingValue})&quot;&gt;
      &lt;condition&gt;
	  &lt;!--
	  **
	  ** This hook command has access to the context data of the
	  ** calling object. The Setting referenced via this property: 
	  **   setting.Port.simpleTomcat-connector.settingValue
	  ** contains the port value
	  --&gt;
	&lt;socket port=&quot;${setting.Port.simpleTomcat-connector.settingValue}&quot; server=&quot;localhost&quot;/&gt;
      &lt;/condition&gt;
    &lt;/fail&gt;
    &lt;echo&gt;DOWN&lt;/echo&gt;
  &lt;/target&gt;

&lt;/project&gt;
&lt;/pre&gt;

The &quot;isup.xml&quot; file is called by &lt;code&gt;assertServiceIsUp&lt;/code&gt;. This command checks if the service is running. In this case, if the Tomcat server is not listening on the connector port, a &lt;code&gt;fail&lt;/code&gt; is thrown.

''File listing: &lt;code&gt;%CTIER_ROOT%\examples\service-package-deployment\isup.xml&lt;/code&gt;''
&lt;pre&gt;
&lt;project name=&quot;isup.xml&quot; default=&quot;execute&quot;&gt;
  &lt;!--
  **
  ** Check the listening port to see if Tomcat is running
  **
  --&gt;
  &lt;target name=&quot;execute&quot;&gt;
    &lt;!--
    ** Fail if it is not listening
    --&gt;
    &lt;fail message=&quot;Service is DOWN&quot;&gt;
      &lt;condition&gt;
	&lt;not&gt;
	  &lt;!--
	  **
	  ** This hook command has access to the context data of the
	  ** calling object. The Setting referenced via this property: 
	  **   setting.Port.simpleTomcat-connector.value
	  ** contains the port value
	  --&gt;
	  &lt;socket port=&quot;${setting.Port.simpleTomcat-connector.value}&quot; server=&quot;localhost&quot;/&gt;
	&lt;/not&gt;
      &lt;/condition&gt;
    &lt;/fail&gt;
    &lt;!--
    ** The service is running so print an informative message
    --&gt;
    &lt;echo&gt;UP (Listening on port: ${setting.Port.simpleTomcat-connector.value})&lt;/echo&gt;
  &lt;/target&gt;
&lt;/project&gt;
&lt;/pre&gt;

The &quot;start.bat&quot; script is called by the &lt;code&gt;startService&lt;/code&gt; command. The &quot;start.bat&quot; file is a batch script and calls the Tomcat &lt;code&gt;startup.bat&lt;/code&gt; script included in the Tomcat distribution.

''File listing: &lt;code&gt;%CTIER_ROOT%\examples\service-package-deployment\start.bat&lt;/code&gt;''
&lt;pre&gt;
@echo off
setlocal

::
:: set the necessary environment variables
::
set CATALINA_HOME=%CTIER_ROOT%\examples\service-package-deployment\apache-tomcat-5.5.26
set CATALINA_BASE=%CATALINA_HOME%

::
:: call the tomcat startup script
::
call %CATALINA_HOME%\bin\startup.bat
&lt;/pre&gt;

''File listing: &lt;code&gt;%CTIER_ROOT%\examples\service-package-deployment\stop.bat&lt;/code&gt;''
&lt;pre&gt;
@echo off
setlocal

::
:: set the necessary environment variables
::
set CATALINA_HOME=%CTIER_ROOT%\examples\service-package-deployment\apache-tomcat-5.5.26
set CATALINA_BASE=%CATALINA_HOME%

::
:: call the tomcat startup script
::
call %CATALINA_HOME%\bin\shutdown.bat
&lt;/pre&gt;

These four scripts cover the Tomcat startup and shutdown procedures and will be called via the &lt;code&gt;Start&lt;/code&gt; and &lt;code&gt;Stop&lt;/code&gt; workflow commands. 

Besides managing the runtime state of the deployed Tomcat instance, there is one more requirement for this example. We need to customize the Tomcat installation to not use its default set of ports. This is accomplished by hooking a script to the Package &lt;code&gt;[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Package.html#cmd_finish finish]&lt;/code&gt; command. You may recall that a ''PackageFinishScript'' setting declared for the apache-tomcat-5.5.26.zip Package referenced an Ant build file called &quot;finish.xml&quot;.

There are actually several steps carried out in the finish.xml:
# Set the execute bit on the Tomcat scripts in %CATALINA_HOME%\bin. (This step is performed for the benefit of unix systems).
# Create a backup of the %CATALINA_BASE%\conf\server.xml
# Re-write the %CATALINA_BASE%\conf\server.xml to replace the standard ports with ones that won't conflict with our environment.
These steps are implemented in the &quot;finish.xml&quot; Ant build file. The &lt;code&gt;finish&lt;/code&gt; command provides access to the resource model for the &quot;finish.xml&quot; as a set of Ant properties. Notice in the file below that the &lt;code&gt;resource.package-install-root&lt;/code&gt; is used to locate the installation root directory. Using resource model data from inside commands makes them data driven and hence more flexible and reusable. 

''File listing: &lt;code&gt;%CTIER_ROOT%\examples\service-package-deployment\finish.xml&lt;/code&gt;''
&lt;pre&gt;
&lt;project name=&quot;finish.xml&quot; default=&quot;execute&quot;&gt;
  &lt;!--
      ** The &quot;finish&quot; command can access metadata about the package it is processing.
	  ** One piece of information used here is &quot;resource.package-install-root&quot;. This
	  ** is the directory where the package archive is extracted.
	  ** For this example it is also synonymous with the Tomcat install root (ie, CATALINA_HOME)
  --&gt;

  &lt;!--
      **
      ** Customize the Tomcat install
      **
  --&gt;
  &lt;target name=&quot;execute&quot;&gt;
    &lt;echo level=&quot;info&quot;&gt;Finishing tomcat installation ...&lt;/echo&gt;

    &lt;tstamp/&gt;
    &lt;!-- set start/stop scripts execute bit--&gt;
    &lt;chmod dir=&quot;${resource.package-install-root}/bin&quot; perm=&quot;ugo+rx&quot; 
	   includes=&quot;**/*.sh&quot;/&gt;
    &lt;!-- backup the current config file--&gt;
    &lt;copy file=&quot;${resource.package-install-root}/conf/server.xml&quot; 
	  tofile=&quot;${resource.package-install-root}/conf/server.xml.${DSTAMP}${TSTAMP}&quot;/&gt;
    &lt;!-- global replace the stock port values --&gt;
    &lt;replace dir=&quot;${resource.package-install-root}&quot;
	     token=&quot;8005&quot; 
	     value=&quot;18105&quot;&gt;
      &lt;include name=&quot;conf/server.xml&quot;/&gt;
    &lt;/replace&gt;
    &lt;replace dir=&quot;${resource.package-install-root}&quot;
	     token=&quot;8009&quot; 
	     value=&quot;18009&quot;&gt;
      &lt;include name=&quot;conf/server.xml&quot;/&gt;
    &lt;/replace&gt;
    &lt;replace dir=&quot;${resource.package-install-root}&quot;
	     token=&quot;8080&quot; 
	     value=&quot;18080&quot;&gt;
      &lt;include name=&quot;conf/server.xml&quot;/&gt;
    &lt;/replace&gt;
    &lt;echo level=&quot;info&quot;&gt;Customized ${resource.package-install-root}/conf/server.xml&lt;/echo&gt;
  &lt;/target&gt;
&lt;/project&gt;
&lt;/pre&gt;

===The Output===
The &lt;code&gt;Deploy&lt;/code&gt; command is a workflow that calls a sequence of four commands: &lt;code&gt;Stop, Packages-Install, Configure, Start&lt;/code&gt;.

You can preview the actions of the Deploy workflow from Workbench. Navigate to the simpleTomcat[Service] object in the &quot;Service Manager&quot; and press the &quot;Commands&quot; tab. Locate the &quot;Deploy&quot; workflow and press the yellow button to right.

You will see the Process Flow view display workflow structure across the commands that are dispatched by Deploy.

[[Image:simple-tomcat-service-deploy-flow.png]]

Since there's quite a lot of output messages from Deploy we'll call each command in turn and examine output from each.

First let's look at the &lt;code&gt;Stop&lt;/code&gt; command.
&lt;pre&gt;ctl -p demo -t Service -r simpleTomcat -c Stop&lt;/pre&gt;
Stop calls &lt;code&gt;assertServiceIsDown&lt;/code&gt; command which is configured to call our &quot;isdown.xml&quot; Ant file.
&lt;pre&gt;
begin workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot; ...
Executing ant file: /Users/alexh/ctier/examples/service-package-deployment/isdown.xml
DOWN
end workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot;
&lt;/pre&gt;
The isdown.xml detected the Tomcat instance was already down so Stop just exits. Had it been running, Stop would have called &lt;code&gt;stopService&lt;/code&gt; which is configured to run the &quot;stop.bat&quot; script.
	
Next let's look at the &lt;code&gt;Packages-Install&lt;/code&gt; command.
&lt;pre&gt;ctl -p demo -t Service -r simpleTomcat -c Packages-Install&lt;/pre&gt;
This command is a workflow that iterates over each of the assigned Package resources and for each calls its &lt;code&gt;Install&lt;/code&gt; command. The &lt;code&gt;Install&lt;/code&gt; command is a Package type workflow that kicks off each step in the package installation life cycle.

It's easiest to break up this output and discuss each step.

The first line shows there are two Packages to install for the simpleTomcat Service (ie, simple-123.war[war],  apache-tomcat-5.5.26.zip[zip]):

&lt;pre&gt;
Start: &quot;Install the configured package dependencies for the deployment.&quot; Beginning installation for packages:   simple-123.war[war],  apache-tomcat-5.5.26.zip[zip] ...
Dispatching command 'assertPackageIsVerified' to objects: apache-tomcat-5.5.26.zip[zip], simple-123.war[war] ...
starting: apache-tomcat-5.5.26.zip[zip]-&gt;assertPackageIsVerified ...
starting: simple-123.war[war]-&gt;assertPackageIsVerified ...
&lt;/pre&gt;

The first step in the package installation cycle is &lt;code&gt;assertPackageIsVerified&lt;/code&gt; which wraps each of the package installation cycles to ensure a verified result. It begins with apache-tomcat-5.5.26.zip because it had &lt;code&gt;installrank=1&lt;/code&gt;:

&lt;pre&gt;
Getting: http://localhost:8080/jackrabbit/repository/controltier/projects/demo/publish/modules/zip-head.jar
To: C:\ctier\ctl\var\tmp\downloads\demo\zip-head.jar
Not modified - so not downloaded
zip up to date
Attempting to get Package-head.jar ...
Getting: http://localhost:8080/jackrabbit/repository/controltier/projects/demo/publish/modules/Package-head.jar
To: C:\ctier\ctl\var\tmp\downloads\demo\Package-head.jar
Not modified - so not downloaded
Package up to date
Packages-Install invoking: apache-tomcat-5.5.26.zip[zip]-&gt;Install -installroot 
    C:\ctier/examples/service-package-deployment
&lt;/pre&gt;

The Package &lt;code&gt;[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Package.html#cmd_Install Install]&lt;/code&gt; command does a couple things:
* downloads the needed command module jar files that contains the Zip specific install cycle commands (eg zip-head.jar). 
* checks if the package was previously installed and then calls &lt;code&gt;[http://controltier.sourceforge.net/docs/latest/core/reference/modules/type_Package.html#cmd_installPackage installPackage]&lt;/code&gt; which does all the work of getting, extracting and finishing the installation (ie, steps 1-5).

&lt;pre&gt;
Start: &quot;Install object and run the package installation cycle.&quot; commands: assertPackageIsInstalled
begin workflow command (1/1) -&gt; &quot;assertPackageIsInstalled -installroot C:\ctier/examples/service-package-deployment&quot; ...
Executing ant file: C:/ctier/ctl/projects/demo/modules/Package/bin/is-installed.xml
Running handler command: installPackage
begin workflow command (1/5) -&gt; &quot;installDependencies -filename apache-tomcat-5.5.26.zip -installroot C:\ctier/examples/service-package-deployment 
    -url http://localhost:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/apache-tomcat-5.5.26.zip&quot; ...
Dispatching command 'Install' to objects:  ...
end workflow command (1/5) -&gt; &quot;installDependencies -filename apache-tomcat-5.5.26.zip -installroot C:\ctier/examples/service-package-deployment 
    -url http://localhost:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/apache-tomcat-5.5.26.zip&quot;
begin workflow command (2/5) -&gt; &quot;prepare -filename apache-tomcat-5.5.26.zip -installroot C:\ctier/examples/service-package-deployment 
    -url http://localhost:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/apache-tomcat-5.5.26.zip&quot; ...
end workflow command (2/5) -&gt; &quot;prepare -filename apache-tomcat-5.5.26.zip -installroot C:\ctier/examples/service-package-deployment 
    -url http://localhost:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/apache-tomcat-5.5.26.zip&quot;
begin workflow command (3/5) -&gt; &quot;get -filename apache-tomcat-5.5.26.zip -installroot C:\ctier/examples/service-package-deployment 
    -url http://localhost:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/apache-tomcat-5.5.26.zip&quot; ...
Getting: http://localhost:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/apache-tomcat-5.5.26.zip
To: C:\ctier\examples\service-package-deployment\apache-tomcat-5.5.26.zip
end workflow command (3/5) -&gt; &quot;get -filename apache-tomcat-5.5.26.zip -installroot C:\ctier/examples/service-package-deployment 
    -url http://localhost:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/apache-tomcat-5.5.26.zip&quot;
begin workflow command (4/5) -&gt; &quot;extract -filename apache-tomcat-5.5.26.zip -installroot C:\ctier/examples/service-package-deployment 
    -url http://localhost:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/apache-tomcat-5.5.26.zip&quot; ...
Expanding: C:\ctier\examples\service-package-deployment\apache-tomcat-5.5.26.zip into C:\ctier\examples\service-package-deployment
end workflow command (4/5) -&gt; &quot;extract -filename apache-tomcat-5.5.26.zip -installroot C:\ctier/examples/service-package-deployment 
    -url http://localhost:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/apache-tomcat-5.5.26.zip&quot;

&lt;/pre&gt;

Here is our &quot;finish.xml&quot; called by the &lt;code&gt;finish&lt;/code&gt; command. You can see the messages about the server.xml file being backed up and customized. Recall that the finish.xml used the property &lt;code&gt;resource.package-install-root&lt;/code&gt; to locate the install root directory.

&lt;pre&gt;
begin workflow command (5/5) -&gt; &quot;finish -filename apache-tomcat-5.5.26.zip -installroot C:\ctier/examples/service-package-deployment 
    -url http://localhost:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/apache-tomcat-5.5.26.zip&quot; ...
Executing ant build file
Finishing tomcat installation ...
Copying 1 file to C:\ctier\examples\service-package-deployment\apache-tomcat-5.5.26\conf
Customized C:\ctier/examples/service-package-deployment/apache-tomcat-5.5.26/conf/server.xml
Deleting: C:\ctier\examples\service-package-deployment\apache-tomcat-5.5.26.zip
end workflow command (5/5) -&gt; &quot;finish -filename apache-tomcat-5.5.26.zip -installroot C:\ctier/examples/service-package-deployment 
    -url http://localhost:8080/jackrabbit/repository/controltier/projects/pkgs/demo/zip/zips/apache-tomcat-5.5.26.zip&quot;
end workflow command (1/1) -&gt; &quot;assertPackageIsInstalled -installroot C:\ctier/examples/service-package-deployment&quot;
[command.timer.demo.Package.Install: 32.891 sec]
Workflow completed. execution time: 32.891 sec
Executing script: C:/ctier/ctl/projects/demo/modules/Package/bin/is-verified.xml ...
Package is VERIFIED
&lt;/pre&gt;

The apache-tomcat-5.5.26 installation completed and was verified. Next, the simple-123.war package goes through the same sequence. It had &lt;code&gt;installrank=2&lt;/code&gt; and thus follows after apache-tomcat-5.5.26.zip.

&lt;pre&gt;
Getting: http://localhost:8080/jackrabbit/repository/controltier/projects/demo/publish/modules/war-head.jar
To: C:\ctier\ctl\var\tmp\downloads\demo\war-head.jar
Not modified - so not downloaded
war up to date
Attempting to get Package-head.jar ...
Getting: http://localhost:8080/jackrabbit/repository/controltier/projects/demo/publish/modules/Package-head.jar
To: C:\ctier\ctl\var\tmp\downloads\demo\Package-head.jar
Not modified - so not downloaded
Package up to date
Packages-Install invoking: simple-123.war[war]-&gt;Install -installroot C:\ctier/examples/service-package-deployment/apache-tomcat-5.5.26/webapps
Start: &quot;Install object and run the package installation cycle.&quot; commands: assertPackageIsInstalled
begin workflow command (1/1) -&gt; &quot;assertPackageIsInstalled -installroot C:\ctier/examples/service-package-deployment/apache-tomcat-5.5.26/webapps&quot; ...
Executing ant file: C:/ctier/ctl/projects/demo/modules/Package/bin/is-installed.xml
Running handler command: installPackage
begin workflow command (1/5) -&gt; &quot;installDependencies -filename simple-123.war -installroot C:\ctier/examples/service-package-deployment/apache-tomcat-5.5.26/webapps 
    -url http://localhost:8080/jackrabbit/repository/controltier/projects/pkgs/demo/war/wars/simple-123.war&quot; ...
Dispatching command 'Install' to objects:  ...
end workflow command (1/5) -&gt; &quot;installDependencies -filename simple-123.war -installroot C:\ctier/examples/service-package-deployment/apache-tomcat-5.5.26/webapps
    -url http://localhost:8080/jackrabbit/repository/controltier/projects/pkgs/demo/war/wars/simple-123.war&quot;
begin workflow command (2/5) -&gt; &quot;prepare -filename simple-123.war -installroot C:\ctier/examples/service-package-deployment/apache-tomcat-5.5.26/webapps 
    -url http://localhost:8080/jackrabbit/repository/controltier/projects/pkgs/demo/war/wars/simple-123.war&quot; ...
end workflow command (2/5) -&gt; &quot;prepare -filename simple-123.war -installroot C:\ctier/examples/service-package-deployment/apache-tomcat-5.5.26/webapps 
    -url http://localhost:8080/jackrabbit/repository/controltier/projects/pkgs/demo/war/wars/simple-123.war&quot;
begin workflow command (3/5) -&gt; &quot;get -filename simple-123.war -installroot C:\ctier/examples/service-package-deployment/apache-tomcat-5.5.26/webapps 
    -url http://localhost:8080/jackrabbit/repository/controltier/projects/pkgs/demo/war/wars/simple-123.war&quot; ...
Getting: http://localhost:8080/jackrabbit/repository/controltier/projects/pkgs/demo/war/wars/simple-123.war
To: C:\ctier\examples\service-package-deployment\apache-tomcat-5.5.26\webapps\simple-123.war
end workflow command (3/5) -&gt; &quot;get -filename simple-123.war -installroot C:\ctier/examples/service-package-deployment/apache-tomcat-5.5.26/webapps 
    -url http://localhost:8080/jackrabbit/repository/controltier/projects/pkgs/demo/war/wars/simple-123.war&quot;

begin workflow command (4/5) -&gt; &quot;extract -filename simple-123.war -installroot C:\ctier/examples/service-package-deployment/apache-tomcat-5.5.26/webapps 
    -url http://localhost:8080/jackrabbit/repository/controltier/projects/pkgs/demo/war/wars/simple-123.war&quot; ...
Created dir: C:\ctier\examples\service-package-deployment\apache-tomcat-5.5.26\webapps\simple
Expanding: C:\ctier\examples\service-package-deployment\apache-tomcat-5.5.26\webapps\simple-123.war into C:\ctier\examples\service-package-deployment\apache-tomcat-5.5.26\webapps\simple
end workflow command (4/5) -&gt; &quot;extract -filename simple-123.war -installroot C:\ctier/examples/service-package-deployment/apache-tomcat-5.5.26/webapps 
    -url http://localhost:8080/jackrabbit/repository/controltier/projects/pkgs/demo/war/wars/simple-123.war&quot;
begin workflow command (5/5) -&gt; &quot;finish -filename simple-123.war -installroot C:\ctier/examples/service-package-deployment/apache-tomcat-5.5.26/webapps 
    -url http://localhost:8080/jackrabbit/repository/controltier/projects/pkgs/demo/war/wars/simple-123.war&quot; ...
Deleting: C:\ctier\examples\service-package-deployment\apache-tomcat-5.5.26\webapps\simple-123.war
end workflow command (5/5) -&gt; &quot;finish -filename simple-123.war -installroot C:\ctier/examples/service-package-deployment/apache-tomcat-5.5.26/webapps 
    -url http://localhost:8080/jackrabbit/repository/controltier/projects/pkgs/demo/war/wars/simple-123.war&quot;
end workflow command (1/1) -&gt; &quot;assertPackageIsInstalled -installroot C:\ctier/examples/service-package-deployment/apache-tomcat-5.5.26/webapps&quot;
[command.timer.demo.Package.Install: 32.891 sec]
Workflow completed. execution time: 32.891 sec
Executing script: C:/ctier/ctl/projects/demo/modules/Package/bin/is-verified.xml ...
Package is VERIFIED
&lt;/pre&gt;

The last line shows both packages were installed successfully.

&lt;pre&gt;
Completed: Installed packages:   simple-123.war[war],  apache-tomcat-5.5.26.zip[zip]
&lt;/pre&gt;

After the &lt;code&gt;Packages-Install&lt;/code&gt; command, the next command in the Deploy sequence is &lt;code&gt;Configure&lt;/code&gt; 

&lt;pre&gt;ctl -p demo -t Service -r simpleTomcat -c Configure&lt;/pre&gt;

The Configure workflow calls &lt;code&gt;Docs-Generate&lt;/code&gt; which generates any registered configuration documents from templates. Our simpleTomcat example does not do this so it's just an empty step here. See [[Generating_Configuration_Files]] for information about using &lt;code&gt;Docs-Generate&lt;/code&gt;.
&lt;pre&gt;
begin workflow command (1/1) -&gt; &quot;Docs-Generate &quot; ...
end workflow command (1/1) -&gt; &quot;Docs-Generate &quot;
&lt;/pre&gt;

The  last step in the Deploy workflow is the &lt;code&gt;Start&lt;/code&gt; command.
&lt;pre&gt;
ctl -p demo -t Service -r simpleTomcat -c Start
&lt;/pre&gt;

The Start workflow calls &lt;code&gt;assertServiceIsUp&lt;/code&gt; which is configured to call our &quot;isup.xml&quot; Ant file.
The &quot;isup.xml&quot; detects the Tomcat instance is down so &lt;code&gt;Start&lt;/code&gt; calls the &lt;code&gt;startService&lt;/code&gt; command which is in turn, configured to execute our &quot;start.bat&quot; script.
&lt;pre&gt;
begin workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot; ...
Executing ant file: C:\ctier/examples/service-package-deployment/isup.xml
Running handler command: startService
Executing windows batch file: C:\ctier/examples/service-package-deployment/start.bat
end workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot;
&lt;/pre&gt;

The &quot;start.bat&quot; script calls Tomcat &lt;code&gt;%CATALINA_HOME%\bin\startup.bat&lt;/code&gt;. Since we have set the ServiceSpawn setting to the value of &quot;true&quot;, the start.bat script is executed in a separate process.

You should see a new command window open with the output from startup.bat.

You can verify the Tomcat runtime state is UP via the &lt;code&gt;Status&lt;/code&gt; command:
&lt;pre&gt;
$ ctl -p demo -t Service -r simpleTomcat -c Status
begin workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot; ...
Executing ant file: C:\ctier/examples/service-package-deployment/isup.xml
UP (Listening on port: 18080)
end workflow command (1/1) -&gt; &quot;assertServiceIsUp &quot;
&lt;/pre&gt;

==Stopping the Example==

You can run the &quot;Stop&quot; command for the Service, to stop the running tomcat server:

''Execute:''
&lt;pre&gt;
ctl -p demo -t Service -r simpleTomcat -c Stop
&lt;/pre&gt;

The &quot;isdown.xml&quot; script will check if the service is running.  If so, then the &lt;code&gt;stopService&lt;/code&gt; command will execute. This will run our &lt;code&gt;stop.bat&lt;/code&gt; script, which finally invokes the Tomcat &quot;shutdown.bat&quot; script and the server will stop.

''output:''
&lt;pre&gt;
begin workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot; ...
Executing ant file: C:\ctier/examples/service-package-deployment/isdown.xml
Running handler command: stopService
Executing windows batch file: C:\ctier/examples/service-package-deployment/stop.bat
Using CATALINA_BASE:   C:\ctier\examples\service-package-deployment\apache-tomcat-5.5.26
Using CATALINA_HOME:   C:\ctier\examples\service-package-deployment\apache-tomcat-5.5.26
Using CATALINA_TMPDIR: C:\ctier\examples\service-package-deployment\apache-tomcat-5.5.26\temp
Using JRE_HOME:        C:\ctier\pkgs\jdk1.5.0_17
end workflow command (1/1) -&gt; &quot;assertServiceIsDown &quot;
&lt;/pre&gt;

==Related Topics==

* [[Mock Unix Service Example]] explains the very basic essentials to manage the runtime state of a long running application service.
* [[Prepare Finish Scripts]] describes how to hook in your own scripts to the Package &lt;code&gt;prepare&lt;/code&gt; and &lt;code&gt;finish&lt;/code&gt; commands.
* [[Generating Configuration Files]] explains several methods to generate configuration files for a Service.
* See more about the Service type in the [[Core Type Guide#Service|Core Type Guide]]

{{Manual/navbox}}

[[Category:Service Examples]]
[[Category:Package Examples]]
[[Category:Windows Examples]]</text>
    </revision>
  </page>
  <page>
    <title>Workbench</title>
    <id>238</id>
    <redirect />
    <revision>
      <id>15634</id>
      <timestamp>2011-10-27T17:14:35Z</timestamp>
      <contributor>
        <username>Gschueler</username>
        <id>8</id>
      </contributor>
      <minor/>
      <comment>Reverted edits by [[Special:Contributions/Jeraldinesewell|Jeraldinesewell]] ([[User talk:Jeraldinesewell|talk]]) to last revision by [[User:Ahonor|Ahonor]]</comment>
      <text xml:space="preserve">#REDIRECT [[:Category:Workbench]]</text>
    </revision>
  </page>
  <page>
    <title>Workbench CMDB</title>
    <id>1631</id>
    <redirect />
    <revision>
      <id>10966</id>
      <timestamp>2009-12-13T15:54:59Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>moved [[Workbench CMDB]] to [[Graphical resource editor]]</comment>
      <text xml:space="preserve">#REDIRECT [[Graphical resource editor]]</text>
    </revision>
  </page>
  <page>
    <title>Workbench Designer</title>
    <id>258</id>
    <revision>
      <id>13765</id>
      <timestamp>2010-11-10T15:10:05Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;the objects&quot; to &quot;the resources&quot;</comment>
      <text xml:space="preserve">      &lt;p&gt;[[Workbench]] provides a number of graphical automation design features.
      You can use Workbench to define new types in the
      [[Workbench CMDB]], introduce new
      artifact types in the [[File share]],
      and define new CTL automation control modules, commands and workflows.
      Workbench also provides graphical interfaces to view and edit your project's resource model.
      &lt;/p&gt;
      &lt;p&gt;
      Workbench's automation design features are the graphical counterpart to the
      [[ProjectBuilder]] command line based utility.
      &lt;/p&gt;
      &lt;p&gt;
	Whether you prefer a graphical interface or source-based text files to define your
	automation model, Workbench is a handy integrated toolset
	to share and maintain your configuration and control model.
      &lt;/p&gt;

==Uses==

      &lt;p&gt;&lt;strong&gt;Type modeler&lt;/strong&gt;&lt;/p&gt;
{{main|Graphical type editor}}
      &lt;p&gt;ControlTier uses an object-oriented approach to describing things and actions 
      in your world. Each object is an instance of a defined type. ControlTier includes
      a standard set of
      
	[[Core Type Guide|core types]] (like [[Resource]], [[Setting]], [[Assembly]], [[Managed-Entity]], [[Package]], [[Deployment]], [[Node]],
	[[Service]], [[Site]]) but you can define your own types, too.
      &lt;/p&gt;
      &lt;p&gt;Workbench's type modeling features help you manage your type model by
      providing tools to create, edit and browse types. One useful feature is
      Workbench's class browser available in any type view page. This
      class browser lets you conveniently navigate any direction of the class
      hierarchy, as well as listing instances of any type.
      &lt;/p&gt;

[[Image:Workbench-type-view.png]]

      &lt;p&gt;An important aspect of the ControlTier model schema are constraints.
      Constraints let you define rules that govern how instances are created and edited.
      For example, you can define a set of allowable literal values for a given type property.
      You can make one of these allowed values, the default one. You can even enforce
      that only one of the allowable values can be selected.
      &lt;/p&gt;
      &lt;p&gt; The ControlTier model
      lets you represent application infrastructures as a network of interconnected objects.
      Another kind of constraint controls these interconnections.
      You can use this kind of constraint to define a policy that is enforceable by [[Workbench]].
      For example, you can define a constraint that governs what parent and child dependencies a given
      type of object can have. You can define if only one or many kinds of a given dependency are allowed
      (i.e., cardinality).
      &lt;/p&gt;

[[Image:Workbench-type-constraints.png]]

      &lt;p&gt;&lt;strong&gt;Command editor&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;A type's behavior is defined as a command and represent control operations. Via
      the inheritance model, subtypes inherit commands defined in their supertype. 
      Workbench includes a graphical interface to view, create and edit commands.
      Workbench processes these command definitions for a type, and generates
      a usable CTL control module.
      &lt;/p&gt;

      &lt;p&gt;Choosing the &quot;Commands&quot; tab when viewing a type lists the commands
      defined in that type and any inherited from its supertype. You can create new
      commands and then select which kind of implementation you want to use. 
      Implementation choices include shell (eg, bash or cmd.exe), 
      [http://ant.apache.org Ant], 
      [http://jakarta.apache.org/bsf Bean scripting framework (BSF)] or
      Workflow.
      &lt;/p&gt;

[[Image:Workbench-type-commands.png]]

      &lt;p&gt;Each command can have a set of options declared for it. Options that take
      arguments can have those options defaulted to a literal value, or an
      attribute. Attributes are defined by the type model, or data can be imported
      from other objects. This approach encourages very resuable and flexible
      commands that are data-driven.
      &lt;/p&gt;

[[Image:Workbench-type-command-options.png]]

      &lt;p&gt;&lt;strong&gt;Workflow commands&lt;/strong&gt;&lt;/p&gt;

      &lt;p&gt;Commands defined in a type can be combined together into a workflow. Since a
      workflow is a command, you can define a structure of workflows (i.e., one workflow
      can call another). This lets you
      build up layers of automated steps.
      &lt;/p&gt;
      &lt;p&gt;
      A workflow's command sequence executes in a configurable number of threads. By default,
      workflows execute in a single thread and therefore execute serially.
      You can configure a workflow to execute commands in parallel by raising the thread count.           
      &lt;/p&gt;
      &lt;p&gt;If an error occurs within one of the commands in the sequence, control is passed
      to the error handler. Workbench's workflow editor lets you choose how to handle
      errors. You can ignore and supress error messages, fail immediatly, send notifications
      or execute another command.
      &lt;/p&gt;

[[Image:Workbench-type-workflow.png]]

      &lt;p&gt;Of course, you can also model workflows using [[ProjectBuilder]] and 
      XML definition ([[type.xml]])
      &lt;/p&gt;


      &lt;p&gt;&lt;strong&gt;Resource editor&lt;/strong&gt;&lt;/p&gt;
{{main|Graphical resource editor}}
      &lt;p&gt;Workbench provides a graphical view into your project's object model. Instances
      of types are called objects. After navigating to any type, you can see the resources
      defined for that type (or any subtypes) by clicking the &quot;Objects&quot; tab.
      The Objects tab also includes a button to create new objects. Any constraint defined
      for that type will affect the UI controls.
      &lt;/p&gt;


[[Image:Workbench-object-new.png]]

      &lt;p&gt;After an object has been created, Workbench lets you view various
      aspects of the object.
      The &quot;Details&quot; tab shows attribute vales for that object and child and parent
      dependencies. The &quot;Commands&quot; tab shows the commands that are defined in the type,
      as well as links to running that command via [[Jobcenter]].
      The &quot;Properties&quot; tab displays the object data in key value pair format (Java properties).
      &lt;/p&gt;

[[Image:Workbench-object-view.png]]

      &lt;p&gt;
      From the &quot;Browse/Search&quot; control, you can access
      the Workbench class browser to navigate to other types.
      You can also search for other objects from the object view page.      
      The object search function lets you search the project model using various
      keywords.
      &lt;/p&gt;

[[Image:Workbench-object-search.png]]

==Interfaces==

     &lt;p&gt;&lt;strong&gt;Input&lt;/strong&gt;&lt;/p&gt;

      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	  &lt;th&gt;Form-based GUI
	  &lt;/th&gt;
	  &lt;td&gt;Workbench includes both a graphical type and object editor.
	  With the type editor, 
	  you can create your own data types, relationship constraints, attribute
	  defaults, commands and workflows. 
	  The object editor lets you create and modify instances of your data types
	  and link objects together to define relationships.w&lt;/td&gt;
	  &lt;td&gt;
	    [[Image:workbench-screenshot-commands.png]]
	  &lt;/td&gt;
	&lt;/tr&gt;

	&lt;tr&gt;
	  &lt;th&gt;XML&lt;/th&gt;
	  &lt;td&gt;XML specifications can be used used to define new data types or populate
	  the repository with your information.&lt;/td&gt;
	  &lt;td&gt;
	    [[Image:workbench-xml-input.png]]
	  &lt;/td&gt;
	&lt;/tr&gt;

	&lt;tr&gt;
	  &lt;th&gt;Scripted&lt;/th&gt;
	  &lt;td&gt;You can use Workbench CLI tools to script the definition of
	  new types and objects.&lt;/td&gt;
	  &lt;td&gt;
	    [[Image:workench-scripted-input.png]]
	  &lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;

[[Category:Workbench]]</text>
    </revision>
  </page>
  <page>
    <title>Workbench Document Transforms</title>
    <id>1836</id>
    <redirect />
    <revision>
      <id>12107</id>
      <timestamp>2009-12-20T17:39:55Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>moved [[Workbench Document Transforms]] to [[Transform documents]]</comment>
      <text xml:space="preserve">#REDIRECT [[Transform documents]]</text>
    </revision>
  </page>
  <page>
    <title>Workbench Project</title>
    <id>609</id>
    <redirect />
    <revision>
      <id>3320</id>
      <timestamp>2009-03-18T16:19:15Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>[[Workbench Project]] moved to [[Project Content]]</comment>
      <text xml:space="preserve">#REDIRECT [[Project Content]]</text>
    </revision>
  </page>
  <page>
    <title>Workbench RDF/XML file maintenance</title>
    <id>18</id>
    <revision>
      <id>10772</id>
      <timestamp>2009-12-12T21:32:41Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">&lt;noinclude&gt;&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Backups&lt;/categorytree&gt;&lt;/noinclude&gt;
Under the covers the Workbench model data is stored in a set of RDF XML files using the 
[[http://jena.sourceforge.net|Jena Semantic Web Framework]].

At the lowest level, this means that a set of files exists (by default) under &quot;$CTIER_ROOT/workbench/rdfdata&quot; on your ControlTier server for each project you create in Workbench:

&lt;pre&gt;
$ cd $CTIER_ROOT/workbench/rdfdata
$ ls -lh
total 16M
-rw-rw-r-- 1 anthony anthony 6.1M Dec 8 10:53 Arch_UModules_UPioneerCycling
-rw-rw-r-- 1 anthony anthony 491K Dec 5 17:33 Arch_UObjects_UPioneerCycling
-rw-rw-r-- 1 anthony anthony 6.1M Dec 8 10:53 Arch_UTypes_UPioneerCycling
-rw-rw-r-- 1 anthony anthony 809 Dec 5 14:34 Arch_UXforms_UPioneerCycling
-rw-rw-r-- 1 anthony anthony 490K Dec 8 10:53 Map_UPioneerCycling
-rw-rw-r-- 1 anthony anthony 1022K Dec 8 10:53 Modules_UPioneerCycling
-rw-rw-r-- 1 anthony anthony 56K Dec 5 17:33 Objects_UPioneerCycling
-rw-rw-r-- 1 anthony anthony 1.2M Dec 8 10:53 Types_UPioneerCycling
-rw-rw-r-- 1 anthony anthony 1.4K Dec 5 14:35 Workbench
-rw-rw-r-- 1 anthony anthony 809 Dec 5 14:34 Xforms_UPioneerCycling
&lt;/pre&gt;

A given set of files has the project name appended (in this case &quot;PioneerCycling&quot;) and is split into two sets: the primary files and their archives (prefixed with &quot;Arch_&quot;).

This would all be largely academic if it were not that managing these files turns out to be critical to the responsive performance of anything but the most trivial projects. It turns out that Jena relies on file level locking to manage updates and in the process repeatedly copies the entire file to temporary &quot;checkpoint&quot; copies. Of course, at the OS level, performance copying files of even tens of MB in size is trivial.

However; streaming the same data through the Jena library turns out to be a significant performance bottleneck; so much so that it really pays to keep the ControlTier repository trim and fit!

The primary way to do this is to navigate to the Workbench administration page, find the &quot;Model Administration (Advanced)&quot; section and run the five file compaction tasks:

[[Image:adminpage.jpg]]

This process minimizes the size of the primary data files and can be run as frequently as makes a difference.

Dealing with the archive files is a little more complex.

In normal operation there is no need to track the history of changes to the model so it is reasonable to remove the archive files on a regular basis. The process for achieving this is straightforward:
* Shutdown Workbench.
* Remove the &quot;Arch_&quot; files from $CTIER_ROOT/workbench/rdfdata associated with the required project(s).
*Restart Workbench.

There are a few points to note about this process:

* It is necessary to do this with Workbench stopped as the file set is cached in the JVM's heap and will simply be re-written otherwise.
* You may wish to skip the &quot;Modules&quot; archive file since removing it invalidates Workbench's notion of the most recent (&quot;head&quot;) version of the packaged modules on the WebDAV requiring that you repackage all Deployment and Package modules - quite a lengthy process.
* With a project with a stable type model, it is really only &quot;Objects&quot; archive file that has an impact on performance and so it may only necessary to remove this file.
* As a rule of thumb, only worry about files that are &gt; ~20MB.
* There have been cases where we've set process up in cron (since Jobcenter/Ctl/Antdepo requires Workbench to be available for normal operation).
Finally, I should note that this whole issue was much more of a problem under ControlTier 3.1 and that we've done a lot to mitigate its impact on performance under ControlTier 3.2 by eliminating unnecessary model versioning. We have not dealt with the fundamental scaling issues in Jena, so it still pays to be conscious of all this.

Anthony Shortland.
anthony@controltier.com

&lt;noinclude&gt;{{Installation/navbox}}&lt;/noinclude&gt;

[[Category:Backups]]</text>
    </revision>
  </page>
  <page>
    <title>Workbench Repository</title>
    <id>252</id>
    <revision>
      <id>11881</id>
      <timestamp>2009-12-17T20:10:05Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <text xml:space="preserve">      &lt;p&gt;[[About Workbench|Workbench]]'s repository supports the storage of packaged artifacts.
      These artifacts may be the product of an internally developed software build
      or orignate from a 3rd-party vendor. Workbench provides
      a graphical and scriptable interface to browsing the content of the repository. The
      repository is based on Apache Jackrabbit an implementation of
      standard web technology, called WebDAV, and is combined with the 
      [[Workbench CMDB|configuration metadata features]]. 
      All package  artifacts are accessible via HTTP
      and all storage operations can be done via a WebDAV client (eg, GET, PUT, DELETE, MKCOL).
      &lt;/p&gt;

[[Image:workbench-repository-cursory.png]]

==Package Manager==

      &lt;p&gt;Built into the Workbench user interface is a tool called the Package Manager, which
      lets you define and upload packages and search and browse the contents of the repository. The screenshot below
      shows a listing of matching packages that resulted from a repository search. 
      &lt;/p&gt;
               
[[Image:workbench-screenshot-packageview.png]]

      &lt;p&gt;Packages are registered as an object in the [[Workbench CMDB]]
      configuration data repository.
      One of items listed above is
      expanded to show off the standard metadata for any package. Of course, you can extend
      this model to include your own attributes. Beyond attributes, you can also declare
      package relationships. An obvious package relationship is one that shows package-to-package
      dependencies. Relationships can also be used to group a set of packages based on 
      a application service. 
      &lt;/p&gt;

==Uses==

      &lt;p&gt;&lt;strong&gt;Package Library&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
	Workbench's Package Manager is a convenient tool to use as a
	package library for software, or any packaged artifact. You 
	can populate the package repository by directly uploading
	3rd-party packages or connect your build process to the
	package import utilities provided in ControlTier.
      &lt;/p&gt;
[[Image:repository-package-library.png]]

      &lt;p&gt;Each uploaded packaged artifact is also registered with a set
      of common metadata that describes version, owner, location, dependencies and
      installation information.
      &lt;/p&gt;

   
      &lt;p&gt;&lt;strong&gt;Package deployment&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;Combined with CTL, you can deploy packages using Workbench's
      package repository as a distributed store. Any kind of package can
      be stored and distributed from the repository. There's already built in
      suppport for common archive formats like RPM, PKG, JAR, WAR and even Zip and
      Tar/Gz. You can define your own kinds of package types when the need arises.
      &lt;/p&gt;

[[Image:repository-package-deployment.png]]

      &lt;p&gt;
      Workbench provides all the package metadata to CTL package life cycle commands
      to prepare, get, extract and finish. You can hook in your existing
      prepare and finish scripts, as well. A chief benefit to using CTL to deploy
      packages is large scale release management. CTL enables you deploy packages
      logically, letting you target just the machines where your integrated
      software system components are distributed.
      &lt;/p&gt;

      &lt;p&gt;Of course, any HTTP  client can also access packages in the repository. For
      environments where the CTL software cannot be installed on target machines, you
      can use wget, curl or any other HTTP client to download files. You can also use
      the Workbench scripting interfaces to lookup packages and read their metadata.
      &lt;/p&gt;

      &lt;p&gt;See the [[User Guide]] pages for information
      on how to use ControlTier for package deployment.
      &lt;/p&gt;
      &lt;p&gt;&lt;strong&gt;Tracking&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;Workbench can also be used to track packages. Tracking can be done at a couple
      of levels. You can use the metadata that describes each package in the repository
      to define its lifecycle state (eg. it's tested, deployed). You can also
      use the configuration data store to register where the package is currently
      deployed and for what component.
      This gives you convenient roll up views that
      tell you on what nodes and for which applications a given package is used.
      &lt;/p&gt;

[[Image:repository-package-tracking.png]]

==Repository Interfaces==
      
      &lt;p&gt;&lt;strong&gt;Input&lt;/strong&gt;&lt;/p&gt;

      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	  &lt;th&gt;Form-based GUI
	  &lt;/th&gt;
	  &lt;td&gt;Workbench's Package Manager view lets you add new packages to
	  the repository, letting you upload files, and define important
	  metadata describiing the package file.&lt;/td&gt;
	  &lt;td&gt;
	     [[Image:workbench-screenshot-packageupload.png]]
	  &lt;/td&gt;
	&lt;/tr&gt;

	&lt;tr&gt;
	  &lt;th&gt;Scripted&lt;/th&gt;
	  &lt;td&gt;You can script the bulk import of your existing packages into the
	  repository.&lt;/td&gt;
	  &lt;td&gt;
	    [[Image:workench-scripted-input.png]]
	  &lt;/td&gt;
	&lt;/tr&gt;
	
	&lt;tr&gt;
	  &lt;th&gt;From build tools&lt;/th&gt;
	  &lt;td&gt;As the final step of any build, call the Workbench package import procedure
	  to publish your release artifacts for later deployment.&lt;/td&gt;
	  &lt;td&gt;
	    &lt;!--figure src=&quot;images/intro/workench-scripted-input.png&quot; alt=&quot;Workbench: Scripted input&quot;-/--&gt;
	  &lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;


      &lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	  &lt;th&gt;HTTP&lt;/th&gt;
	  &lt;td&gt;The backend store of the package repository is WebDAV enabling any
	  HTTP client to download packaged artifacts.
	  &lt;/td&gt;
	  &lt;td&gt;
	    &lt;!--figure src=&quot;images/intro/workbench-entity-query.png&quot; alt=&quot;Workbench: Query&quot;/--&gt;
	  &lt;/td&gt;
	&lt;/tr&gt;

	&lt;tr&gt;
	  &lt;th&gt;Scripted
	  &lt;/th&gt;
	  &lt;td&gt;Use CTL to script deployment of uploaded package artifacts.&lt;/td&gt;
	  &lt;td&gt;
	    &lt;!--figure src=&quot;images/intro/workbench-generated-config.png&quot; alt=&quot;Workbench: Generated config&quot;/--&gt;
	  &lt;/td&gt;
	&lt;/tr&gt;

      &lt;/table&gt;

[[Category:Workbench]]</text>
    </revision>
  </page>
  <page>
    <title>Workbench designer</title>
    <id>269</id>
    <redirect />
    <revision>
      <id>1180</id>
      <timestamp>2008-12-30T22:25:58Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>[[Workbench designer]] moved to [[Workbench Designer]]</comment>
      <text xml:space="preserve">#REDIRECT [[Workbench Designer]]</text>
    </revision>
  </page>
  <page>
    <title>Workbench type editor</title>
    <id>1630</id>
    <redirect />
    <revision>
      <id>10926</id>
      <timestamp>2009-12-13T00:42:01Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>moved [[Workbench type editor]] to [[Graphical type editor]]</comment>
      <text xml:space="preserve">#REDIRECT [[Graphical type editor]]</text>
    </revision>
  </page>
  <page>
    <title>Workflow Development Guide</title>
    <id>1977</id>
    <redirect />
    <revision>
      <id>14338</id>
      <timestamp>2010-11-11T00:18:52Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>moved [[Workflow Development Guide]] to [[Module Development Guide]]</comment>
      <text xml:space="preserve">#REDIRECT [[Module Development Guide]]</text>
    </revision>
  </page>
  <page>
    <title>Workflow Type Reference</title>
    <id>139</id>
    <revision>
      <id>13527</id>
      <timestamp>2010-11-10T01:45:54Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;depot.&quot; to &quot;project.&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Tasks&lt;/categorytree&gt;
=Description=
      &lt;p&gt;
	The Workflow data type represents a kind of [[ExecuteAction Type Reference|action]] that runs a sequence of tasks and an
	error handler to run within the [[Controller Task Reference|controller]] task.
      &lt;/p&gt;

=Command=

      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;name&lt;/td&gt;&lt;td&gt;The workflow name.&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;
    
=Parameters specified as nested elements=

      &lt;p&gt;&lt;strong&gt;errorhandler&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
	An [[ErrorHandler Type Reference|errorhandler]]
	describes a set of actions that should be run if an error
	occurs during the execution of the task sequence.
      &lt;/p&gt;
      &lt;p&gt;&lt;strong&gt;tasksequence&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
	A tasksequence element contains
	the set of Ant tasks to run in sequence for the command
	workflow. Any Ant task can be used.
      &lt;/p&gt;

=Examples=

     &lt;p&gt;
       Shows Workflow data type used as the action inside the [[ExecuteAction Type Reference|execute]]  element.
      &lt;/p&gt;
      &lt;pre&gt;
    &amp;lt;controller&amp;gt;                  
      &amp;lt;execute&amp;gt;
        &amp;lt;context depot=&quot;${project.name}&quot;
		 resourceType=&quot;${context.type}&quot;
		 resourceName=&quot;${context.name}&quot;/&amp;gt;
        &amp;lt;workflow name=&quot;Restart&quot;&amp;gt;
          &amp;lt;errorhandler/&amp;gt;
          &amp;lt;tasksequence&amp;gt;
            &amp;lt;echo&amp;gt;running Stop command&amp;lt;/echo&amp;gt;
            &amp;lt;controller updateproperties=&quot;false&quot;&amp;gt;
              &amp;lt;execute&amp;gt;
                &amp;lt;context depot=&quot;${project.name}&quot;
			 resourceType=&quot;${context.type}&quot;
			 resourceName=&quot;${context.name}&quot;/&amp;gt;
                &amp;lt;command name=&quot;Stop&quot;/&amp;gt;
              &amp;lt;/execute&amp;gt;
            &amp;lt;/controller&amp;gt;
            &amp;lt;echo&amp;gt;running Start command&amp;lt;/echo&amp;gt;
            &amp;lt;controller updateproperties=&quot;false&quot;&amp;gt;
              &amp;lt;execute&amp;gt;
                &amp;lt;context depot=&quot;${project.name}&quot;
			 resourceType=&quot;${context.type}&quot;
			 resourceName=&quot;${context.name}&quot;/&amp;gt;
                &amp;lt;command name=&quot;Start&quot;/&amp;gt;
              &amp;lt;/execute&amp;gt;
            &amp;lt;/controller&amp;gt;
          &amp;lt;/tasksequence&amp;gt;
        &amp;lt;/workflow&amp;gt;
      &amp;lt;/execute&amp;gt;
    &amp;lt;/controller&amp;gt;
      &lt;/pre&gt;

&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Workflow Commands]]</text>
    </revision>
  </page>
  <page>
    <title>Workflow Type Referencel</title>
    <id>163</id>
    <revision>
      <id>13528</id>
      <timestamp>2010-11-10T01:45:54Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;depot.&quot; to &quot;project.&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Ant Types&lt;/categorytree&gt;
=Description=
      &lt;p&gt;
	The Workflow data type represents a sequence of tasks and an
	error handler to run within the [[Controller Task Reference|Controller]] task.
      &lt;/p&gt;
    
=Command=

      &lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;name&lt;/td&gt;&lt;td&gt;The workflow name.&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;
	&lt;/tr&gt;
      &lt;/table&gt;
    
=Parameters specified as nested elements=

      &lt;p&gt;&lt;strong&gt;errorhandler&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
	A [[ErrorHandler Type Reference|errorhandler type]]
	describes a set of actions that should be run if an error
	occurs during the execution of the task sequence.
      &lt;/p&gt;
      &lt;p&gt;&lt;strong&gt;tasksequence&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;
	A tasksequence type contains
	the set of Ant tasks to run in sequence for the command
	workflow.
      &lt;/p&gt;

=Examples=

     &lt;p&gt;
       Shows Workflow data type used in the 
       [[Controller Task Reference|controller]] Ant task. 
      &lt;/p&gt;
      &lt;pre&gt;
        
    &amp;lt;controller&amp;gt;                  
      &amp;lt;execute&amp;gt;
        &amp;lt;context depot=&quot;${project.name}&quot;
		 resourceType=&quot;${context.type}&quot;
		 resourceName=&quot;${context.name}&quot;/&amp;gt;
        &amp;lt;workflow name=&quot;Restart&quot;&amp;gt;
          &amp;lt;errorhandler/&amp;gt;
          &amp;lt;tasksequence&amp;gt;
            &amp;lt;echo&amp;gt;running Stop command&amp;lt;/echo&amp;gt;
            &amp;lt;controller updateproperties=&quot;false&quot;&amp;gt;
              &amp;lt;execute&amp;gt;
                &amp;lt;context depot=&quot;${project.name}&quot;
			 resourceType=&quot;${context.type}&quot;
			 resourceName=&quot;${context.name}&quot;/&amp;gt;
                &amp;lt;command name=&quot;Stop&quot;/&amp;gt;
              &amp;lt;/execute&amp;gt;
            &amp;lt;/controller&amp;gt;
            &amp;lt;echo&amp;gt;running Start command&amp;lt;/echo&amp;gt;
            &amp;lt;controller updateproperties=&quot;false&quot;&amp;gt;
              &amp;lt;execute&amp;gt;
                &amp;lt;context depot=&quot;${project.name}&quot;
			 resourceType=&quot;${context.type}&quot;
			 resourceName=&quot;${context.name}&quot;/&amp;gt;
                &amp;lt;command name=&quot;Start&quot;/&amp;gt;
              &amp;lt;/execute&amp;gt;
            &amp;lt;/controller&amp;gt;
          &amp;lt;/tasksequence&amp;gt;
        &amp;lt;/workflow&amp;gt;
      &amp;lt;/execute&amp;gt;
    &amp;lt;/controller&amp;gt;
      &lt;/pre&gt;
&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Command Dispatcher Ant Types]]</text>
    </revision>
  </page>
  <page>
    <title>Workflow and options</title>
    <id>624</id>
    <revision>
      <id>13600</id>
      <timestamp>2010-11-10T01:49:09Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;depots&quot; to &quot;projects&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Defined Commands&lt;/categorytree&gt;

Options defined in a workflow command must also be supported by the commands in the command sequence (i.e., they share a common subset of options).
An option parsing error will occur otherwise.

==Examples==
===Example 1: Correct===
Imagine two commands are defined in a type
* A shell command called &quot;echo&quot;
* A workflow command called &quot;stammer&quot; that calls &quot;echo&quot;.
* Both commands declare an option named &quot;message&quot;.
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;command name=&quot;echo&quot; description=&quot;second command.&quot; 
         command-type=&quot;Command&quot; is-static=&quot;true&quot;&gt;
  &lt;execution-string&gt;bash&lt;/execution-string&gt;
  &lt;argument-string&gt;echo bash says ${opts.message}&lt;/argument-string&gt;
  &lt;opts&gt;
    &lt;opt parameter=&quot;message&quot; description=&quot;option name&quot; required=&quot;false&quot;
     property=&quot;opts.message&quot; type=&quot;string&quot; default=&quot;hi there!&quot;/&gt;
  &lt;/opts&gt;
&lt;/command&gt;

&lt;command name=&quot;stammer&quot; description=&quot;first workflow command&quot;		
		command-type=&quot;WorkflowCommand&quot; is-static=&quot;true&quot;
		error-handler-type=&quot;FAIL&quot;&gt;
 &lt;workflow&gt;
    &lt;command name=&quot;echo&quot;/&gt;
 &lt;/workflow&gt;
&lt;opts&gt;
  &lt;opt parameter=&quot;message&quot; description=&quot;option name&quot; required=&quot;false&quot;
	       property=&quot;opts.message&quot; type=&quot;string&quot; default=&quot;duh...?&quot;/&gt;
 &lt;/opts&gt;
&lt;/command&gt;
&lt;/syntaxhighlight&gt; 

The usage for the &quot;echo&quot; command would be: ctl -p ''project'' -m ''module'' -c echo ''[-- -message &lt;hi there!&gt;]''

as well as for &quot;stammer&quot;: ctl -p ''project'' -m ''module'' -c stammer ''[-- -message &lt;duh...?&gt;]''

Here's the example output:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ ctl -p demo -m blah -c stammer -- -message Hello
Start: &quot;first workflow command&quot; commands: echo
begin workflow command (1/1) -&gt; &quot;echo -message Hello&quot; ...
bash says Hello
end workflow command (1/1) -&gt; &quot;echo -message Hello&quot;
Workflow completed. execution time: 0.558 sec
&lt;/syntaxhighlight&gt;

It's important to point out that option defaulting is also at play. Recall the &quot;stammer&quot; command defaults the &quot;-message&quot; option to &quot;duh...?&quot;.
Running the command without options you'll see the echo command invoked with that default.
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ ctl -p demo -m blah -c stammer
Start: &quot;first workflow command&quot; commands: echo
begin workflow command (1/1) -&gt; &quot;echo -message duh...?&quot; ...
bash says duh...?
end workflow command (1/1) -&gt; &quot;echo -message duh...?&quot;
Workflow completed. execution time: 0.598 sec
&lt;/syntaxhighlight&gt;

===Example 2: Incorrect===
Imagine two commands are defined in a type
* A shell command called &quot;echo&quot;
** &quot;echo&quot; declares an option named &quot;text&quot;
* A workflow command called &quot;stammer&quot; that calls &quot;echo&quot;.
** &quot;stammer&quot; declare an option named &quot;message&quot;.
&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;command name=&quot;echo&quot; description=&quot;second command.&quot; 
         command-type=&quot;Command&quot; is-static=&quot;true&quot;&gt;
  &lt;execution-string&gt;bash&lt;/execution-string&gt;
  &lt;argument-string&gt;echo bash says ${opts.message}&lt;/argument-string&gt;
  &lt;opts&gt;
    &lt;opt parameter=&quot;text&quot; description=&quot;text to print&quot; required=&quot;false&quot;
     property=&quot;opts.text&quot; type=&quot;string&quot; default=&quot;hi there!&quot;/&gt;
  &lt;/opts&gt;
&lt;/command&gt;

&lt;command name=&quot;stammer&quot; description=&quot;first workflow command&quot;		
		command-type=&quot;WorkflowCommand&quot; is-static=&quot;true&quot;
		error-handler-type=&quot;FAIL&quot;
		&gt;
	 &lt;workflow&gt;
	   &lt;command name=&quot;echo&quot;/&gt;
	 &lt;/workflow&gt;
        &lt;opts&gt;
         &lt;opt parameter=&quot;message&quot; description=&quot;option name&quot; required=&quot;false&quot;
	       property=&quot;opts.message&quot; type=&quot;string&quot; default=&quot;duh...?&quot;/&gt;
       &lt;/opts&gt;
&lt;/command&gt;
&lt;/syntaxhighlight&gt; 

The usage for the &quot;echo&quot; command would be: ctl -p ''project'' -m ''module'' -c echo ''[-- -text &lt;hi there!&gt;]''

as well as for &quot;stammer&quot;: ctl -p ''project'' -m ''module'' -c stammer ''[-- -message &lt;duh...?&gt;]''

This definition will cause an option parsing error.

If you run the workflow command, stammer, you will get an error and a usage example:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ ctl -p demo -m blah -c stammer -- -message Hello
Start: &quot;first workflow command&quot; commands: echo
begin workflow command (1/1) -&gt; &quot;echo -message Hello&quot; ...
Option usage error for command: 'echo'. 
Error handler caught failed command execution: [blah]-&gt;echo. reason: The following error occurred while executing this line:
/Users/alexh/ctier/ctl/projects/demo/modules/blah/commands/echo.xml:38: 
usage: [-text  &lt;hi there!&gt;] 

&lt;/syntaxhighlight&gt;
&lt;noinclude&gt;{{Reference/navbox}}&lt;/noinclude&gt;

[[Category:Workflow Commands]]</text>
    </revision>
  </page>
  <page>
    <title>Workflow command</title>
    <id>88</id>
    <revision>
      <id>11034</id>
      <timestamp>2009-12-13T17:15:39Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>/* See also */</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Defined Commands&lt;/categorytree&gt;
This page describes how to define a command using the &quot;&lt;code&gt;WorkflowCommand&lt;/code&gt;&quot; [[Type-v10.xml#command|command-type]]. 

This command type is useful if you want to call a sequence of commands defined in your type.

==Create or choose a type==

You can add the command to an existing type definition or you can create a new type. To create a new type run: 
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ ctl -m ProjectBuilder -c create-type -- -type workflowcommands
&lt;/syntaxhighlight&gt;

The create-type command will generate a [[type.xml]] file where you can define your command.

==Edit Type definition==

This example defines:
* three simple echo commands called &quot;command1&quot;, &quot;command2&quot; and &quot;command3&quot;. 
* two workflows: &quot;Workflow1&quot; and &quot;Workflow2&quot;. 
** Workflow1 calls command1 and command2. 
** Workflow2 calls &quot;Workflow1&quot; and &quot;command3&quot;.

To declare a command a workflow command-type specify: &lt;code&gt;command-type=&quot;WorkflowCommand&quot;&lt;/code&gt;.

Then use the &lt;code&gt;[[Type-v10.xml#workflow|workflow]]&lt;/code&gt; tag and reference the commands it will call via &lt;code&gt;command&lt;/code&gt; elements.

&lt;syntaxhighlight lang=&quot;xml&quot;&gt;
&lt;types xmlns:cmd=&quot;http://open.controltier.com/base/Modules/Commands#&quot; 
       xmlns:module=&quot;http://open.controltier.com/base/Modules#&quot; 
       xmlns:type=&quot;http://open.controltier.com/base/Types#&quot;&gt;
  &lt;type name=&quot;workflowcommands&quot; role=&quot;concrete&quot; 
	uniqueInstances=&quot;true&quot;&gt;
    &lt;description&gt;Some example workflows&lt;/description&gt;
    &lt;supertype&gt;
      &lt;typereference name=&quot;Managed-Entity&quot;/&gt;
    &lt;/supertype&gt;
   &lt;command-settings&gt;
      &lt;notification notify=&quot;false&quot;/&gt;
      &lt;template-directory&gt;&lt;/template-directory&gt;
      &lt;dependency-view parents=&quot;false&quot; children=&quot;true&quot; proximity=&quot;1&quot;/&gt;
      &lt;logger name=&quot;workflowcommands&quot;/&gt;
    &lt;/command-settings&gt;
    &lt;commands&gt;

      &lt;command name=&quot;command1&quot; description=&quot;primitive command&quot; command-type=&quot;AntCommand&quot;&gt;
	&lt;implementation&gt;
	  &lt;echo&gt;doing command1&lt;/echo&gt;
	&lt;/implementation&gt;
      &lt;/command&gt;

      &lt;command name=&quot;command2&quot; description=&quot;primitive command&quot; command-type=&quot;AntCommand&quot;&gt;
	&lt;implementation&gt;
	  &lt;echo&gt;doing command2&lt;/echo&gt;
	&lt;/implementation&gt;
      &lt;/command&gt;

      &lt;command name=&quot;command3&quot; description=&quot;primitive command&quot; command-type=&quot;AntCommand&quot;&gt;
	&lt;implementation&gt;
	  &lt;echo&gt;doing command3&lt;/echo&gt;
	&lt;/implementation&gt;
      &lt;/command&gt;

      &lt;command name=&quot;Workflow1&quot; description=&quot;first workflow command&quot;		
	       command-type=&quot;WorkflowCommand&quot; is-static=&quot;true&quot;
	       error-handler-type=&quot;FAIL&quot;&gt;
	&lt;workflow threadcount=&quot;1&quot;&gt;
	  &lt;command name=&quot;command1&quot;/&gt;
	  &lt;command name=&quot;command2&quot;/&gt;
	&lt;/workflow&gt;
      &lt;/command&gt;

      &lt;command name=&quot;Workflow2&quot; description=&quot;second workflow command&quot;		
	       command-type=&quot;WorkflowCommand&quot; is-static=&quot;true&quot;
	       error-handler-type=&quot;FAIL&quot;&gt;
	&lt;workflow threadcount=&quot;1&quot;&gt;
	  &lt;command name=&quot;Workflow1&quot;/&gt;
	  &lt;command name=&quot;command3&quot;/&gt;
	&lt;/workflow&gt;
      &lt;/command&gt;

    &lt;/commands&gt;
  &lt;/type&gt;
&lt;/types&gt;

&lt;/syntaxhighlight&gt;

==Build the type==

Use the &quot;build-type&quot; command to generate the command files.
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ ctl -m ProjectBuilder -c build-type -- -type workflowcommands -upload -deploy
&lt;/syntaxhighlight&gt;

The -upload and -deploy flag cause the generated type to be uploaded to Workbench and then deployed to the local client.

==Run the command==

The workflowcommands type is now deployed and the new commands can be run. 

First run &quot;Workflow1&quot;. You will see command1 and command2 invoked:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ ctl -m workflowcommands -c Workflow1
Start: &quot;first workflow command&quot; commands: command1,command2
begin workflow command (1/2) -&gt; &quot;command1 &quot; ...
doing command1
end workflow command (1/2) -&gt; &quot;command1 &quot;
begin workflow command (2/2) -&gt; &quot;command2 &quot; ...
doing command2
end workflow command (2/2) -&gt; &quot;command2 &quot;
[command.timer.default.workflowcommands.Workflow1: 0.343 sec]
Workflow completed. execution time: 0.343 sec
&lt;/syntaxhighlight&gt;

Now, try &quot;Workflow2&quot;. It will run Workflow1 and then command3:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ ctl -m workflowcommands -c Workflow2
Start: &quot;second workflow command&quot; commands: Workflow1,command3
begin workflow command (1/2) -&gt; &quot;Workflow1 &quot; ...
Start: &quot;first workflow command&quot; commands: command1,command2
begin workflow command (1/2) -&gt; &quot;command1 &quot; ...
doing command1
end workflow command (1/2) -&gt; &quot;command1 &quot;
begin workflow command (2/2) -&gt; &quot;command2 &quot; ...
doing command2
end workflow command (2/2) -&gt; &quot;command2 &quot;
[command.timer.default.workflowcommands.Workflow1: 0.438 sec]
Workflow completed. execution time: 0.438 sec
end workflow command (1/2) -&gt; &quot;Workflow1 &quot;
begin workflow command (2/2) -&gt; &quot;command3 &quot; ...
doing command3
end workflow command (2/2) -&gt; &quot;command3 &quot;
[command.timer.default.workflowcommands.Workflow2: 0.815 sec]
Workflow completed. execution time: 0.815 sec
&lt;/syntaxhighlight&gt;


&lt;noinclude&gt;{{Manual/navbox}}&lt;/noinclude&gt;

[[Category:Workflow Commands]]</text>
    </revision>
  </page>
  <page>
    <title>Workflow error handling</title>
    <id>345</id>
    <revision>
      <id>13926</id>
      <timestamp>2010-11-10T15:23:07Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot; -o &quot; to &quot; -r &quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Defined Commands&lt;/categorytree&gt;

This page describes how to define an error handler inside a workflow command definition. 
A workflow command definition specifies one or more commands to run, by default in sequence. If an error occurs in one of the called commands, error-handler can be configured to react to the error. This page describes how to configure an error handler to call another command when an error occurs. This open-ended approach allows various possible error handling reactions:
* clean up and then fail the workflow
* attempt to recover the process
* switch to a different procedure

The command that is run by the error handler can of course be another WorkflowCommand definition which lets you create a more sophisticated process structure.

See also the [[Type-v10.xml#workflow|workflow]] and [[Type-v10.xml#error-handler|error-handler]] reference documentation.

==Create or choose a type==

You can add the command to an existing type definition or you can use [[ProjectBuilder]] to create a new type. This example uses Service's &quot;Start&quot; command.

The &quot;Start&quot; command is a very simple example of a workflow that uses an error handler when the command sequence fails, in this case to avoid running the start procedure if the service is already running.

==Edit Type definition==

This example shows the Service type's definition for the &quot;Start&quot; command. You can view this file in your CTL install: $CTL_BASE/modules/Service/type.xml

You will notice the Start &lt;code&gt;command-type&lt;/code&gt; attribute is set to &quot;WorkflowCommand&quot; and there are several sets of nested tags:
* error-handler: this defines what do if an error occurs. In this case it will call a command named &quot;startService&quot;
* workflow: specifies a set of commands to run in sequence. In this case just one command named &quot;assertServiceIsUp&quot;

Additionally, notable attributes are
* error-handler-type: This is set to &quot;HANDLER&quot; which means run a command handler 

&lt;pre&gt;
&lt;types xmlns:cmd=&quot;http://open.controltier.com/base/Modules/Commands#&quot; 
             xmlns:module=&quot;http://open.controltier.com/base/Modules#&quot; 
             xmlns:type=&quot;http://open.controltier.com/base/Types#&quot;&gt;
  &lt;type role=&quot;concrete&quot; uniqueInstances=&quot;true&quot; name=&quot;Service&quot;&gt;
    ...
    &lt;commands&gt;
      ...
      &lt;command name=&quot;Start&quot;  description=&quot;Start the service process.&quot; 
                           command-type=&quot;WorkflowCommand&quot; error-handler-type=&quot;HANDLER&quot;&gt;
         &lt;error-handler quiet=&quot;true&quot;&gt;
          &lt;command name=&quot;startService&quot;/&gt;
        &lt;/error-handler&gt;
        &lt;workflow threadcount=&quot;1&quot;&gt;
          &lt;command name=&quot;assertServiceIsUp&quot;/&gt;
        &lt;/workflow&gt;
      &lt;/command&gt;
    ...
   &lt;/commands&gt;
  &lt;/type&gt;
&lt;/types&gt;
&lt;/pre&gt;

The command definition is specifying to run &quot;assertServiceIsUp&quot;. If that command fails (because the service is NOT up), it will throw an error which will be caught by the error-handler. The error handler is configured to handle the error with &quot;startService&quot;.

==Build the type==

If you are defining your own type build and upload it to the server:
&lt;pre&gt;
ctl -m ProjectBuilder -c build-type -- -type type -upload
&lt;/pre&gt;

==Run the command==

&lt;pre&gt;
ctl -p dukesbank -c JBossServer -r developmentDukesBank -c Start
&lt;/pre&gt;

&lt;noinclude&gt;{{Manual/navbox}}&lt;/noinclude&gt;

[[Category:Workflow Commands]]</text>
    </revision>
  </page>
  <page>
    <title>Workflows</title>
    <id>1680</id>
    <redirect />
    <revision>
      <id>14480</id>
      <timestamp>2010-11-12T00:13:55Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Redirected page to [[Category:Modules]]</comment>
      <text xml:space="preserve">#REDIRECT [[:Category:Modules]]</text>
    </revision>
  </page>
  <page>
    <title>XML</title>
    <id>1735</id>
    <redirect />
    <revision>
      <id>11734</id>
      <timestamp>2009-12-16T19:17:37Z</timestamp>
      <contributor>
        <username>Gschueler</username>
        <id>8</id>
      </contributor>
      <comment>Redirected page to [[Category:XML]]</comment>
      <text xml:space="preserve">#REDIRECT [[:Category:XML]]</text>
    </revision>
  </page>
  <page>
    <title>YumPackage</title>
    <id>1397</id>
    <redirect />
    <revision>
      <id>8399</id>
      <timestamp>2009-09-26T14:26:20Z</timestamp>
      <contributor>
        <username>Anthony</username>
        <id>42</id>
      </contributor>
      <comment>moved [[YumPackage]] to [[YumRpm]]:&amp;#32;For consistency of the type naming convention.</comment>
      <text xml:space="preserve">#REDIRECT [[YumRpm]]</text>
    </revision>
  </page>
  <page>
    <title>YumRpm</title>
    <id>1336</id>
    <revision>
      <id>14091</id>
      <timestamp>2010-11-10T15:34:26Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;/deployments&quot; to &quot;/resources&quot;</comment>
      <text xml:space="preserve">&lt;noinclude&gt;&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Package&lt;/categorytree&gt;&lt;/noinclude&gt;
[[File:Icon-PackageObject.png]]The YumRpm module models the package installation life-cycle of an RPM package stored in the [http://yum.baseurl.org Yellowdog Updater, Modified (Yum)] package management system.

Essentially, the module combines the Yum install and update commands to implement the standard Package extract command while disabling the Package Install workflow's default approach of acquiring the package file from the ControlTier DAV server.

The minimum package attributes that need to be set for the module to work are: 

* The file name (package-filename) that must be set to the RPM package name (that is supplied to the rpm and yum commands).
* The installation root directory (package-install-root) that can be set to any value (&quot;/&quot; is a good default).
* The repository URL (package-repo-url) since a value is required for the standard options (make up a reasonable value!)
* The description (description) is not strictly required but is good practice!

== Limitations ==

The module assumes that you have a functioning Yum installation that contains the package(s) that you're modeling.

In its default configuration, the module assumes you wish to execute the package installation using a user account that has sudo-based super-user access rights to run both the rpm and yum commands. 

== Examples ==

=== Basic example ===

* The GraphViz RPM for CentOS (needed by Workbench) is a good example of a package that might be added from Yum:

&lt;pre&gt;
[root@centos52 ~]# yum list graphviz
Available Packages
graphviz.i386                            2.12-8.el5             epel  
&lt;/pre&gt;

* There are two variants of sample object XML included with the module that can be loaded straight to Workbench:

&lt;pre&gt;
[anthony@centos52 objects]$ cat sample.xml 
&lt;?xml version=&quot;1.0&quot;?&gt;

&lt;!DOCTYPE project PUBLIC &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; &quot;project.dtd&quot;&gt;

&lt;!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --&gt;
&lt;!-- Example YumRpm packages                                                                                          --&gt;
&lt;!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --&gt;

&lt;project&gt;
        &lt;!-- Minumum set of attributes required for the package commands to work: --&gt;
        &lt;package type=&quot;YumRpm&quot; name=&quot;graphviz&quot; filename=&quot;graphviz&quot; installroot=&quot;/&quot; repoUrl=&quot;http://www.graphviz.org&quot; description=&quot;Graph Visualization Tools&quot;/&gt;
         
        &lt;!-- Full set of useful attributes drawn from the RPM: --&gt;
        &lt;package type=&quot;YumRpm&quot; name=&quot;graphviz-2.12-8.el5.i386.rpm&quot; version=&quot;2.12&quot; release=&quot;8.el5&quot; buildtime=&quot;Thu 24 May 2007 10:39:53 AM PDT&quot; arch=&quot;i386&quot; filename=&quot;graphviz&quot; filetype=&quot;rpm&quot; base=&quot;graphviz&quot; installroot=&quot;/&quot; repoUrl=&quot;http://www.graphviz.org&quot; restart=&quot;false&quot; vendor=&quot;Fedora Project&quot; description=&quot;Graph Visualization Tools&quot;/&gt;
&lt;/project&gt;
&lt;/pre&gt;

* Make sure the package isn't already installed (assuming you'd like to see the Yum install command work):

&lt;pre&gt;
[root@centos52 ~]# rpm -e graphviz
&lt;/pre&gt;

* Run the install command once to boot-strap a copy of the module into your depot:

&lt;pre&gt;
[anthony@centos52 objects]$ ctl -p development -t YumRpm -r graphviz-2.12-8.el5.i386.rpm -c Install
Getting: http://centos52:8080/jackrabbit/repository/controltier/projects/development/publish/modules/YumRpm-head.jar
To: /home/anthony/ctier/ctl/var/tmp/downloads/development/YumRpm-head.jar
Not modified - so not downloaded
Created dir: /home/anthony/ctier/ctl/projects/development/modules/YumRpm
Expanding: /home/anthony/ctier/ctl/var/tmp/downloads/development/YumRpm-head.jar into /home/anthony/ctier/ctl/projects/development/modules/YumRpm
Attempting to get rpm-head.jar ...
Getting: http://centos52:8080/jackrabbit/repository/controltier/projects/development/publish/modules/rpm-head.jar
To: /home/anthony/ctier/ctl/var/tmp/downloads/development/rpm-head.jar
Not modified - so not downloaded
Created dir: /home/anthony/ctier/ctl/projects/development/modules/rpm
Expanding: /home/anthony/ctier/ctl/var/tmp/downloads/development/rpm-head.jar into /home/anthony/ctier/ctl/projects/development/modules/rpm
Attempting to get Package-head.jar ...
Getting: http://centos52:8080/jackrabbit/repository/controltier/projects/development/publish/modules/Package-head.jar
To: /home/anthony/ctier/ctl/var/tmp/downloads/development/Package-head.jar
Not modified - so not downloaded
Created dir: /home/anthony/ctier/ctl/projects/development/modules/Package
Expanding: /home/anthony/ctier/ctl/var/tmp/downloads/development/Package-head.jar into /home/anthony/ctier/ctl/projects/development/modules/Package
Created dir: /home/anthony/ctier/ctl/projects/development/resources/YumRpm/graphviz-2.12-8.el5.i386.rpm/bin
Created dir: /home/anthony/ctier/ctl/projects/development/resources/YumRpm/graphviz-2.12-8.el5.i386.rpm/logs
Created dir: /home/anthony/ctier/ctl/projects/development/resources/YumRpm/graphviz-2.12-8.el5.i386.rpm/var
Created dir: /home/anthony/ctier/ctl/projects/development/resources/YumRpm/graphviz-2.12-8.el5.i386.rpm/var/transforms
Updating process view file ...
&lt;/pre&gt;

* Re-run the package Install command to test &quot;yum install&quot;:

&lt;pre&gt;
[anthony@centos52 objects]$ ctl -p development -t YumRpm -r graphviz-2.12-8.el5.i386.rpm -c Install
Start: &quot;Install object and run the package installation cycle.&quot; commands: assertPackageIsInstalled
begin workflow command (1/1) -&gt; &quot;assertPackageIsInstalled &quot; ...
Running handler command: installPackage
begin workflow command (1/5) -&gt; &quot;installDependencies -filename graphviz -installroot / -url http://www.graphviz.org&quot; ...
Dispatching command 'Install' to objects:  ...
end workflow command (1/5) -&gt; &quot;installDependencies -filename graphviz -installroot / -url http://www.graphviz.org&quot;
begin workflow command (2/5) -&gt; &quot;prepare -filename graphviz -installroot / -url http://www.graphviz.org&quot; ...
end workflow command (2/5) -&gt; &quot;prepare -filename graphviz -installroot / -url http://www.graphviz.org&quot;
begin workflow command (3/5) -&gt; &quot;get -filename graphviz -installroot / -url http://www.graphviz.org&quot; ...
end workflow command (3/5) -&gt; &quot;get -filename graphviz -installroot / -url http://www.graphviz.org&quot;
begin workflow command (4/5) -&gt; &quot;extract -filename graphviz -installroot / -url http://www.graphviz.org&quot; ...
Result: 1
Setting up Install Process
Parsing package install arguments
Resolving Dependencies
--&gt; Running transaction check
---&gt; Package graphviz.i386 0:2.12-8.el5 set to be updated
--&gt; Finished Dependency Resolution

Dependencies Resolved

=============================================================================
 Package                 Arch       Version          Repository        Size 
=============================================================================
Installing:
 graphviz                i386       2.12-8.el5       epel              1.1 M

Transaction Summary
=============================================================================
Install      1 Package(s)         
Update       0 Package(s)         
Remove       0 Package(s)         

Total download size: 1.1 M
Downloading Packages:
Running rpm_check_debug
Running Transaction Test
Finished Transaction Test
Transaction Test Succeeded
Running Transaction

  Installing: graphviz                     ######################### [1/1] 
Installed: graphviz.i386 0:2.12-8.el5
Complete!
end workflow command (4/5) -&gt; &quot;extract -filename graphviz -installroot / -url http://www.graphviz.org&quot;
begin workflow command (5/5) -&gt; &quot;finish -filename graphviz -installroot / -url http://www.graphviz.org&quot; ...
end workflow command (5/5) -&gt; &quot;finish -filename graphviz -installroot / -url http://www.graphviz.org&quot;
end workflow command (1/1) -&gt; &quot;assertPackageIsInstalled &quot;
[command.timer.development.Package.Install: 10.420 sec]
Workflow completed. execution time: 10.420 sec
&lt;/pre&gt;

* Re-re-run the command to see &quot;yum update&quot;!:

&lt;pre&gt;
[anthony@centos52 objects]$ ctl -p development -t YumRpm -r graphviz-2.12-8.el5.i386.rpm -c Install
Start: &quot;Install object and run the package installation cycle.&quot; commands: assertPackageIsInstalled
begin workflow command (1/1) -&gt; &quot;assertPackageIsInstalled &quot; ...
Running handler command: installPackage
begin workflow command (1/5) -&gt; &quot;installDependencies -filename graphviz -installroot / -url http://www.graphviz.org&quot; ...
Dispatching command 'Install' to objects:  ...
end workflow command (1/5) -&gt; &quot;installDependencies -filename graphviz -installroot / -url http://www.graphviz.org&quot;
begin workflow command (2/5) -&gt; &quot;prepare -filename graphviz -installroot / -url http://www.graphviz.org&quot; ...
end workflow command (2/5) -&gt; &quot;prepare -filename graphviz -installroot / -url http://www.graphviz.org&quot;
begin workflow command (3/5) -&gt; &quot;get -filename graphviz -installroot / -url http://www.graphviz.org&quot; ...
end workflow command (3/5) -&gt; &quot;get -filename graphviz -installroot / -url http://www.graphviz.org&quot;
begin workflow command (4/5) -&gt; &quot;extract -filename graphviz -installroot / -url http://www.graphviz.org&quot; ...
Setting up Update Process
Could not find update match for graphviz
No Packages marked for Update
end workflow command (4/5) -&gt; &quot;extract -filename graphviz -installroot / -url http://www.graphviz.org&quot;
begin workflow command (5/5) -&gt; &quot;finish -filename graphviz -installroot / -url http://www.graphviz.org&quot; ...
end workflow command (5/5) -&gt; &quot;finish -filename graphviz -installroot / -url http://www.graphviz.org&quot;
end workflow command (1/1) -&gt; &quot;assertPackageIsInstalled &quot;
[command.timer.development.Package.Install: 6.201 sec]
Workflow completed. execution time: 6.201 sec
&lt;/pre&gt;

* Voila! The package is installed:

&lt;pre&gt;
[anthony@centos52 objects]$ rpm -qi graphviz
Name        : graphviz                     Relocations: (not relocatable)
Version     : 2.12                              Vendor: Fedora Project
Release     : 8.el5                         Build Date: Thu 24 May 2007 10:39:53 AM PDT
Install Date: Fri 25 Sep 2009 10:07:21 AM PDT      Build Host: hammer2.fedora.redhat.com
Group       : Applications/Multimedia       Source RPM: graphviz-2.12-8.el5.src.rpm
Size        : 2732564                          License: CPL
Signature   : DSA/SHA1, Fri 25 May 2007 09:53:44 AM PDT, Key ID 119cc036217521f6
Packager    : Fedora Project &lt;http://bugzilla.redhat.com/bugzilla&gt;
URL         : http://www.graphviz.org/
Summary     : Graph Visualization Tools
Description :
A collection of tools for the manipulation and layout
of graphs (as in nodes and edges, not as in barcharts).
&lt;/pre&gt;

{{Manual/navbox}}
[[Category:Package]]
[[Category:Elements]]</text>
    </revision>
  </page>
  <page>
    <title>ZIP installer</title>
    <id>20</id>
    <revision>
      <id>15106</id>
      <timestamp>2011-01-02T12:43:53Z</timestamp>
      <contributor>
        <username>Hiran</username>
        <id>48</id>
      </contributor>
      <minor/>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Installation&lt;/categorytree&gt;

The command line installer is a Zip archive containing the ControlTier server and client software. It also contains a defaults file and a Unix and Windows install script.

The installer is comprised of a distribution that includes an install script, default.properties file and the content of the distribution.

=== Server+Client vs Client-only ===
The install script contained in the installer can be used to install both server and client or just the client software. The default is to install both.
You might be interested to use [[ZIP installer (multiple-clients)]] to use the Zip installer to install client software across multiple hosts.

You also have to think of where you want ControlTier to be installed.
This is set with the CTIER_ROOT environment variable.

== Download ==

[[Download]] and extract the latest version ControlTier Installer Zip file. These are located in the Sourceforge project.

== Extract ==
{{notice|These instructions assume the [[Self-contained directory convention]].}}

{{caution|$CTIER_ROOT should ''not'' be the same directory as the directory that comes out of the zip file. We recommend you set $CTIER_ROOT to:
* On Windows: C:\ctier
* On UNIX: ~/ctier
}}

Extract the archive into &lt;code&gt;$CTIER_ROOT/pkgs&lt;/code&gt;.

=== Unix ===
&lt;pre&gt;
$ export CTIER_ROOT=~/ctier
$ mkdir -p $CTIER_ROOT/pkgs
$ cd $CTIER_ROOT/pkgs
$ rm -rf ControlTier-&lt;version&gt;
$ unzip ControlTier-&lt;version&gt;.zip
.
.
.
  inflating: ControlTier-3.2/pkgs/jobcenter-1.0.zip  
  inflating: ControlTier-3.2/pkgs/itnav-3.2.war  
  inflating: ControlTier-3.2/pkgs/commander-extension-3.2.jar  
&lt;/pre&gt;

Substitute your version of the ControlTier installer.

=== Windows ===
From the windows file browser, select the installer zip archive and right click it to select the extract action. Be sure to choose your %%CTIER_ROOT%%\pkgs folder:

[[Image:windows-extraction-wizard.png]]

== Specifying and overriding defaults ==

The installer is driven by a number of settings in the &lt;code&gt;default.properties&lt;/code&gt; file located within the ControlTier installer directory. It is setup to comply with the self-contained directory convention and should not need editing. However, you may want to specify the hostname to use for you server or client installation.

The current Operating System hostname is used as the default server hostname for Server installations.  It is also used as the default client hostname for [[#Client-only|Client-only]] installations.

&lt;syntaxhighlight lang=&quot;diff&quot;&gt;
$ diff default.properties default.properties.orig 
31c31
&lt; server.hostname = myhost.mydomain
---
&gt; server.hostname = ${server.hostname.default}
&lt;/syntaxhighlight&gt;

Alternatively, you can use the &quot;-Dkey=val&quot; pairs to override these defaults from the command line. Eg

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
sh ./install.sh -Dserver.hostname=ctier.example.com
&lt;/syntaxhighlight&gt;

You can actually override any setting in the defaults.properties file in this same way, using  -Dkey=val flags. See [[INSTALL Command Reference]]

Note
You may need to adjust port values and file paths for many of the properties if you are diverging from a standard installation.

====Option to automatically create a default project====
If you plan to run the [[ControlTier Demo]], the installer can optionally create a project called &quot;demo&quot; during your first login. The following example enables this option:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
 sh ./install.sh -Dproject.default.create=true
&lt;/syntaxhighlight&gt;

If you are not running the demo, but you wish to have an empty project to start working in, you may also specify the initial project's name by overriding the property ''project.default.name''. The following example sets the name to &quot;myProject&quot;:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
  sh ./install.sh -Dproject.default.name=myProject -Dproject.default.create=true
&lt;/syntaxhighlight&gt;

For ControlTier 3.6:
&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
  sh ./install.sh -Dframework.project.default.name=myProject -Dframework.project.default.create=true
&lt;/syntaxhighlight&gt;

Note that it can take from 3 - 10 minutes for Workbench to create its initial project when you first log in.

== Run installation script ==
Run the installation script located within ControlTier installer directory

=== Unix ===
To install the server and client software based on the defaults run:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ export JAVA_HOME=$CTIER_ROOT/pkgs/j2sdk1.5.0_15
&lt;/syntaxhighlight&gt;

... or on a Mac:

&lt;syntaxhighlight lang=&quot;bash&quot;&gt;
$ export JAVA_HOME=/System/Library/Frameworks/JavaVM.framework/Versions/CurrentJDK/Home
&lt;/syntaxhighlight&gt;

Then change to the directory where you extracted the distribution and run the installer:
&lt;pre&gt;
$ cd $CTIER_ROOT/pkgs/ControlTier-3.2
$ sh install.sh
.
.
.
     [echo]  
     [echo] Install Complete

Setup build successful.
&lt;/pre&gt;

====Client-only====

{{main|ZIP installer (client-only)}}

{{install/client-only}}

If you are installing multiple clients take a look at the [[Bulk client installation]] page.

=== Windows ===
It is critical to reset CTIER_ROOT to a Unix/Linux-like value before invoking the installer on Windows!

&lt;syntaxhighlight lang=&quot;dos&quot;&gt;
C:\ctier\pkgs\ControlTier-3.2&gt;set JAVA_HOME=%CTIER_ROOT%\pkgs\j2sdk1.5.0_15
C:\ctier\pkgs\ControlTier-3.2&gt;set CTIER_ROOT=C:/ctier
C:\ctier\pkgs\ControlTier-3.2&gt;install.bat
.
.
.
&lt;/syntaxhighlight&gt;

To install the just the client run:

&lt;syntaxhighlight lang=&quot;dos&quot;&gt;
install.bat --client -Dserver.hostname=&lt;hostname&gt;
&lt;/syntaxhighlight&gt;

==Runtime Environment variables==

{{:ControlTier_Environment_Variables}}

==Server start==

{{main|Server startup and shutdown}}

{{:Start_ControlTier}}

==Verify installation==

After you have run the installer and have made provisions for the setting the environment (e.g., sourced ~/.ctierrc) you should verify the installation.

Firstly, check that the CTL shell tools are in your path. Type:

&lt;pre&gt;
ctl --help
usage: ctl [-h] [-v] [-V] [-z] [-p project -t type -r resource -c command] [-p
           project -m module -c command] [--threadcount &lt;1&gt;] [-I filter] [-X filter]
           [--filter-exclude-precedence true/false][-l level] [-- command-options]
.
.
.
[3.6.0 (20100915)]
&lt;/pre&gt;

You should see the help output and the version on the last line. If you get a &quot;command not found&quot; error. Double check that your login environment is set up correctly.

==Login==

After you have started the ControlTier server you can try logging in to Workbench (default URL will be http://localhost:8080 unless you changed the setting in the installer).

The initial landing page will provide a set of links to the server applications.
Below this list you will see information about login IDs. The installation will have created a number of default accounts. 
Begin by logging into Workbench with the default ID (set by the installer to user: &quot;default&quot; and password: &quot;default&quot; unless you changed that setting).

===Login denied?===
If these default credentials do not work, check the file $CTIER_ROOT/pkgs/jetty-6.1.21/etc/realm.properties as it shows the available users.
If your account is there (and you are sure about the correct password), check the log files
$CTIER_ROOT/pkgs/jetty-6.1.21/logs. If you find this message
&lt;pre&gt;
java.lang.RuntimeException: config file did not contain property: ctl.base
&lt;/pre&gt;
you probably started jetty without having set the proper environment first.



{{Installation/navbox}}

[[Category:Installers]]</text>
    </revision>
  </page>
  <page>
    <title>ZIP installer (client-only)</title>
    <id>1101</id>
    <revision>
      <id>16404</id>
      <timestamp>2012-02-20T13:12:12Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Undo revision 15474 by [[Special:Contributions/Kamearobinson|Kamearobinson]] ([[User talk:Kamearobinson|talk]]) Reverted SPAM bot edits</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Installation&lt;/categorytree&gt;
This page describes how to install a [[ControlTier client]].

==Requirements==
* [[Dependencies#Java|Java]]
** Be sure a JDK is installed
** Be sure JAVA_HOME environment variable has been set
* [[ZIP installer]]
** These instructions assume you are installing the client via the command line installer (aka the Zip install package)

==CLI Installation==
{{install/client-only}}

==Project setup (and node registration)==

{{Setup/project/client}}

{{Installation/navbox}}

[[Category:Installers]]</text>
    </revision>
  </page>
  <page>
    <title>ZIP installer (multiple-clients)</title>
    <id>329</id>
    <revision>
      <id>16405</id>
      <timestamp>2012-02-20T13:12:25Z</timestamp>
      <contributor>
        <username>Bogdan.iosif</username>
        <id>69</id>
      </contributor>
      <minor/>
      <comment>Undo revision 15468 by [[Special:Contributions/Petrachaney|Petrachaney]] ([[User talk:Petrachaney|talk]]) Reverted SPAM bot edits</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Installation&lt;/categorytree&gt;

Situation: You have multiple target machines where you want to use [[ZIP installer (client-only)]]. 
{{Caution|These docs are under development.}}

You may have a large number of nodes where you need the client software installed. It would be too repetitive to do this by logging into each machine and running individual commands. Also, you will need a similar procedure later whenever you need to upgrade.


==Steps==

There are several rough steps to bulk installing client software:
# Register the client nodes to the server (this drives [[CTL-EXEC_Command_Reference|ctl-exec]]).
# Upload the client software packages to the server (the client install script will pull them during installation)
# Create/save the client installer script (contains the script to install dependencies and run the installer)
# Run the script (execute the installer script via ctl-exec)

All steps are run on the [[ControlTier server]] host with the following assumptions:
* ControlTier server already installed and running e.g, &quot;http://adminhost:8080&quot;)
* Working SSH configuration 
* Posses a self extracting JDK archive (eg, jdk-1_5_0_17-linux-i586.bin)
* [[Self Contained Directory Convention]]

===Register nodes===
This procedure uses a command called &quot;ctl-exec&quot; to execute commands over SSH. &lt;code&gt;ctl-exec&lt;/code&gt; does not require any ControlTier software on the destination host so is useful for automating the installation of new clients.
The &lt;code&gt;ctl-exec&lt;/code&gt; command is driven by Node configuration data maintained on the server. 

Follow  [[Bulk Node registration|these instructions for bulk node registration]].

Note:
* Register any host where you'd like to use ctl-exec.

====Verify registration and SSH====
After registering your hosts as nodes to the server you should verify that &lt;code&gt;ctl-exec&lt;/code&gt; can execute commands to each one.
Here's a ctl-exec example that executes the &quot;uname&quot; command on each host:

&lt;pre&gt;
ctl-exec -- uname -a
number of nodes to dispatch to: 3, (threadcount=1)
Connecting to centos:22
cmd : uname -a
Linux centos 2.6.9-34.EL #1 Wed Mar 8 00:07:35 CST 2006 i686 i686 i386 GNU/Linux
Connecting to development:22
cmd : uname -a
Linux development.controltier.com 2.6.9-11.EL #1 Fri May 20 18:17:57 EDT 2005 i686 i686 i386 GNU/Linux
Darwin adminhost.local 9.5.0 Darwin Kernel Version 9.5.0: Wed Sep  3 11:29:43 PDT 2008; root:xnu-1228.7.58~1/RELEASE_I386 i386
&lt;/pre&gt;
The output shows three hosts executed the uname command: centos, development and adminhost. The &quot;centos&quot; and &quot;development&quot; hosts are the two clients hosts while &quot;adminhost&quot; is the ControlTier server.
You should see similar results in your output.

Correct any possible SSH and/or shell environment configuration errors to allow similar command execution.

===Upload packages===

Uploading the JDK and ControlTier distributions to the server facilitates a pull-based installation model.
Use the &quot;put&quot; command in [http://controltier.sourceforge.net/docs/latest/coreutils/reference/modules/type_davutil.html davutil] to upload the JDK and ControlTier distributions to the server's WebDAV repository. 
This will let us use a tool like wget to pull it to each client during the installation cycle.

Upload the JDK:
&lt;pre&gt;
$ ctl -p default -m davutil -c put --  \
  -file `pwd`/jdk-1_5_0_17-linux-i586.bin \
  -url  http://adminhost:8080/jackrabbit/repository/controltier/projects/pkgs/jdk-1_5_0_17-linux-i586.bin
Uploading to: http://adminhost:8080/jackrabbit/repository/controltier/projects/pkgs/jdk-1_5_0_17-linux-i586.bin
Uploading: jdk-1_5_0_17-linux-i586.bin
Puted 1 file to http://adminhost:8080/jackrabbit/repository/controltier/projects/pkgs/jdk-1_5_0_17-linux-i586.bin
&lt;/pre&gt;

Upload ControlTier:
&lt;pre&gt;
$ ctl -m davutil -c put -- \
  -file `pwd`/ControlTier-3.2.4.zip \
  -url  http://adminhost:8080/jackrabbit/repository/controltier/projects/pkgs/ControlTier-3.2.4.zip
Uploading to: http://adminhost:8080/jackrabbit/repository/controltier/projects/pkgs/ControlTier-3.2.4.zip
Uploading: ControlTier-3.2.4.zip
Puted 1 file to http://adminhost:8080/jackrabbit/repository/controltier/projects/pkgs/ControlTier-3.2.4.zip
&lt;/pre&gt;

===Create/save client installer script===
Create and save a script to automate the installation cycle of the JDK and ControlTier software. 
The following is a sample script you can save to a file and later run via &lt;code&gt;ctl-exec&lt;/code&gt;. 
You may need to customize it to accommodate version info or other local conventions.

File listing: client-installer.sh
&lt;pre&gt;
set -x
cd $HOME
mkdir -p ctier/pkgs
cd ctier/pkgs
rm -f ControlTier-3.2.4.zip  jdk-1_5_0_17-linux-i586.bin
# Use wget or curl to pull the packages. You could also &quot;push&quot; them out via SCP
wget --user default --password default http://adminhost:8080/jackrabbit/repository/controltier/projects/pkgs/jdk-1_5_0_17-linux-i586.bin
wget --user default --password default http://adminhost:8080/jackrabbit/repository/controltier/projects/pkgs/ControlTier-3.2.4.zip

sh jdk-1_5_0_17-linux-i586.bin &lt;&lt;!
yes
!

unzip ControlTier-3.2.4.zip

export JAVA_HOME=$HOME/ctier/pkgs/jdk1.5.0_17
cd $HOME/ctier/pkgs/ControlTier-3.2.4
sh install.sh --client -Dserver.jetty.hostname=adminhost -Dclient.hostname=$(hostname) -Dclient.node.name=$(hostname)
&lt;/pre&gt;

Note:
* It's considered best practice to use fully qualified hostnames for the &lt;code&gt;server.jetty.hostname&lt;/code&gt; and &lt;code&gt;client.hostname&lt;/code&gt;. The &lt;code&gt;client.node.name&lt;/code&gt; can be just the local name.
* This script is deficient in that it does not ensure the .ctierrc file is sourced in the user's .bashrc and .bash_login

====Prestaging via SCP Push====
You might prefer to pre-stage the packages to the remote machines via SCP rather than the pull-based approach inside the script.
Below is an example using ctl-exec to push out the JDK and ControlTier distributions to each host.
&lt;pre&gt;
for host in `ctl-exec -X adminhost`; do scp jdk-1_5_0_17-linux-i586.bin ControlTier-3.2.4.zip $host:~/ctier/pkgs; done
jdk-1_5_0_17-linux-i586.bin                                                        100%   47MB  11.8MB/s   00:04    
ControlTier-3.2.4.zip                                                              100%  203MB  12.7MB/s   00:16
&lt;/pre&gt;
If you choose this approach modify the installer script accordingly.

==Execute script==

With all the preliminaries out of the way, you can now run &lt;code&gt;ctl-exec&lt;/code&gt; to execute the installer script across all the hosts.
Of course, you want to execute this script everywhere ''except'' the admin host. Exclude it using the &quot;-X&quot; option. Optionally, use &quot;-K&quot; to keep going if an error is encountered on any of the nodes.

&lt;pre&gt;
ctl-exec -K -X adminhost -s /tmp/client-installer.sh
&lt;/pre&gt;

... and here's a sampling of the output:
&lt;pre&gt;
number of nodes to dispatch to: 2, (threadcount=1)
Connecting to centos:22
done.
Connecting to centos:22
cmd : chmod +x /tmp/client-installer.sh
Connecting to centos:22
cmd : /tmp/client-installer.sh
++ cd /home/alexh
++ mkdir -p ctier/pkgs
++ cd ctier/pkgs
++ rm -f ControlTier-3.2.4.zip jdk-1_5_0_17-linux-i586.bin
++ wget --user default --password default http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/jdk-1_5_0_17-linux-i586.bin
--14:59:20--  http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/jdk-1_5_0_17-linux-i586.bin
           =&gt; `jdk-1_5_0_17-linux-i586.bin'
.
.
.
15:03:37 (190.50 KB/s) - `jdk-1_5_0_17-linux-i586.bin' saved [49668382/49668382]

++ wget --user default --password default http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/ControlTier-3.2.4.zip
--15:03:37--  http://strongbad:8080/jackrabbit/repository/controltier/projects/pkgs/ControlTier-3.2.4.zip
           =&gt; `ControlTier-3.2.4.zip'
Resolving strongbad... 192.168.1.101
Connecting to strongbad|192.168.1.101|:8080... connected.
.
.
.
++ mkdir -p ctier/pkgs
++ cd ctier/pkgs
++ sh jdk-1_5_0_17-linux-i586.bin
Sun Microsystems, Inc.  Binary Code License Agreement

for the JAVA 2 PLATFORM STANDARD EDITION DEVELOPMENT KIT 5.0
.
.
.
Unpacking...
Checksumming...
0
0
Extracting...
UnZipSFX 5.50 of 17 February 2002, by Info-ZIP (Zip-Bugs@lists.wku.edu).
   creating: jdk1.5.0_17/
.
.
.
Creating jdk1.5.0_17/jre/lib/deploy.jar
 
Done.
Archive:  ControlTier-3.2.4.zip
   creating: ControlTier-3.2.4/
.
.
.
  inflating: ControlTier-3.2.4/pkgs/jasper-compiler-4.0.6.jar  
  inflating: ControlTier-3.2.4/pkgs/jasper-runtime-4.0.6.jar  
++ export JAVA_HOME=/home/alexh/ctier/pkgs/jdk1.5.0_17
++ JAVA_HOME=/home/alexh/ctier/pkgs/jdk1.5.0_17
++ cd /home/alexh/ctier/pkgs/ControlTier-3.2.4
+++ hostname
+++ hostname
++ sh install.sh -c -Dserver.jetty.hostname=strongbad -Dclient.hostname=centos -Dclient.node.name=centos
property: server.jetty.hostname=strongbad
property: client.hostname=centos
property: client.node.name=centos

-check-prereqs:
     [echo] Using compatible Java version: 1.5
.
.
.
echo-rcfile-info:
     [echo] 
     [echo] A .ctierrc file was generated at:
     [echo]     /home/alexh/.ctierrc
     [echo] containing the appropriate environment variables for the installed
     [echo] ControlTier Client To use it, add the following to your .profile
     [echo] or equivalent:
     [echo] 
     [echo]     if [ -f ~/.ctierrc ]; then
     [echo]     . ~/.ctierrc
     [echo]     else
     [echo]     echo ~/.ctierrc not found 1&gt;&amp;2
     [echo]     fi

install-client:
     [echo] Install Complete

Setup build successful.
&lt;/pre&gt;

Of course, you can fine tune this script,  checking on conditions or adding other steps. 
Just edit the script and re-run it via &lt;code&gt;ctl-exec&lt;/code&gt;.

Note:
* If an error occurs on just some of the hosts you can re-run the command and including just those via the &quot;-I&quot; option.
* If you use a bare metal provisioning tool like Kickstart, you might also consider adding the client install as part of the OS's post installation.

It's a good idea to verify the installation when the script completes. Use ctl-exec again and this time have it invoke &quot;ctl&quot;.
&lt;pre&gt;
ctl-exec -- ctl
&lt;/pre&gt;

==Environment==
Remember, the shell environment will need to be set up correctly for the above to work successfully. See: [[ControlTier Environment Variables]]

==Run ctl-project==
After the client software is installed, you will probably want to register that node to one of your [[Project|projects]]. 

This is done via the &lt;code&gt;ctl-project&lt;/code&gt; command. Here's an example that registers the new client to the &quot;demo&quot; project:

&lt;pre&gt;ctl-project -p demo -a create&lt;/pre&gt;

Of course, if you have just installed many clients, you can use ctl-exec:

&lt;pre&gt;ctl-exec -- ctl-project -p demo -a install&lt;/pre&gt;


{{Installation/navbox}}
[[Category:Installers]]</text>
    </revision>
  </page>
  <page>
    <title>Zip</title>
    <id>1661</id>
    <revision>
      <id>11193</id>
      <timestamp>2009-12-14T16:20:35Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>Created page with '&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Package&lt;/categorytree&gt; [[File:Icon-Packa…'</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Package&lt;/categorytree&gt;
[[File:Icon-PackageObject.png]]
The [[zip]] type represents a Zip archive


==Reference==

{{Package/reference|zip}}

==Definition==
[[File:Core-type-model.png|thumb|Core type model]]

===Metadata===

The table below gives a brief description for each of the attributes of the package type. The ones with an asterisk are required during the deployment cycle.
{{Package/type/properties}}

===Project XML===
{{Package/projectxml |example|123|zip}}

===Querying===

{{Package/querying|example|123|zip}}

{{Manual/navbox}}
[[Category:Package]]</text>
    </revision>
  </page>
  <page>
    <title>ZipBuilder</title>
    <id>1403</id>
    <revision>
      <id>13821</id>
      <timestamp>2010-11-10T15:13:53Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Text replace - &quot;object name&quot; to &quot;resource name&quot;</comment>
      <text xml:space="preserve">&lt;categorytree mode=pages style=&quot;float:right; clear:right; margin-left:1ex; border:1px solid gray; padding:0.7ex; background-color:white;&quot;&gt;Builder&lt;/categorytree&gt;

The ZipBuilder module models the use of Zip (e.g. zip(1L) on Linux or Cygwin) as the build tool used by the runBuildScript command to make a trivial Builder sub-type that can package up a directory hierarchy as a Zip archive.

The module creates a Zip file package of the &quot;basedir&quot; (deployment-basedir) in the &quot;targetdir&quot; (deployment-install-root) using the resource name as the file name and timestamp versioning.
== Limitations ==

Since the invocation of Zip is implemented as a Bash script it is expected that when used on Windows, ControlTier is operating in a Cygwin environment that has Zip installed.

== Examples ==

=== Simple example ===

The back page contains a good example of using this module to backup the [[Backup_ControlTier#RDF_database_backup_.28Workbench_data_only.29|Workbench RDF data]].

[[Category:Builder]]
[[Category:Elements]]</text>
    </revision>
  </page>
  <page>
    <title>Zip Release Builder</title>
    <id>1404</id>
    <revision>
      <id>14257</id>
      <timestamp>2010-11-10T21:53:44Z</timestamp>
      <contributor>
        <username>Ahonor</username>
        <id>6</id>
      </contributor>
      <comment>/* Summary */</comment>
      <text xml:space="preserve">What do you do when neither the [[:Category:Builder|Builder base type nor any of its standard sub-types]] do exactly what you want? This is where ControlTier's [[Type_modeling|type modeling]] abilities really come into play!

This example takes the goal of automating the creation of a Zip format release package from a set of Subversion-based source to show how sub-typing an existing module, introducing new attributes, overriding command implementations and adding new commands demonstrates the flexibility of ControlTier as a general process automation framework.

By way of example, the steps of the desired process might be:

* Create a release branch in Subversion from trunk (pre-deleting the branch if it currently exists) using a &quot;major.minor&quot; (e.g. &quot;1.2&quot;) number version scheme.
* Checkout the release branch.
* Selectively package the working files as a Zip archive.
* Import the Zip archive into ControlTier's package repository for subsequent distribution.

== General Approach ==

The basic approach is to sub-type the [[Builder]] type and modify and extend its implementation to meet these requirements.

The standard [http://controltier.sourceforge.net/docs/latest/core/reference/user/Builder/commands/Build.html Build] workflow consists of four steps that don't map perfectly to this example's requirements:

*Although you could imagine adding release branch management to the  [http://controltier.sourceforge.net/docs/latest/core/reference/user/Builder/commands/scmCheckout.html scmCheckout] command, it makes more sense to implement it as a new command in its own right.
*The default scmCheckout command implements support for Subversion (and other source code management systems) sufficient for the needs of this example.
*The standard [http://controltier.sourceforge.net/docs/latest/core/reference/user/Builder/commands/setBuildstamp.html setBuildstamp] command provides the means to automate package version generation based on model attributes and Subversion revision (commit) numbers and is useful for the purposes of this example.
*It turns out that (as of [[ControlTier_3.4.8|ControlTier 3.4.8]]) the  [http://controltier.sourceforge.net/docs/latest/core/reference/user/Builder/commands/runBuildScript.html runBuildScript] command is narrowly implemented to use an external Ant script (e.g. build.xml). This lack of a general hook to any build tool is the principal reason to sub-type Builder and has led to the proliferation of any number of new modules. In this case, we're looking for a simple implementation that can selectively package files as a Zip archive.
* Finally, [http://controltier.sourceforge.net/docs/latest/core/reference/user/Builder/commands/repoImport.html repoImport] is a flexible enough command for finding package artifacts, uploading them to the ControlTier [[WebDAV_Guide|WebDAV repository]] and automatically creating [[Package]] objects to model them.

In summary, then, this example implementation implements the following variant of the Build workflow:

&lt;pre&gt;
Build [-buildstamp &lt; &gt; ]
Run the build cycle.
scmMakeBranch, scmCheckout , setBuildstamp , runBuildScript , repoImport
&lt;/pre&gt;

Whose usage is:

&lt;pre&gt;
ctl -p &lt;project&gt; -t Builder -r &lt;objectname&gt; -c Build -- [-buildstamp &lt;&gt;]
&lt;/pre&gt;

The goal is to add a new command (&quot;scmMakeBranch&quot;) to manage release branch creation and override the &quot;runBuildScript&quot; command to implement the means of creating Zip archives.

== Preparations ==

The environment for developing and testing this example was a [[ControlTier_3.4.8|ControlTier 3.4.8]] installation using a Mac OS X based server and a Windows XP based client (setup using [[Cygwin]]-based OpenSSH). The implementation works on Linux systems too, and could be just as easily be used on a single system.

The client system has a sample Subversion repository setup as follows:

&lt;pre&gt;
winxp:myapp anthony$ which svn 
/usr/bin/svn
winxp:myapp anthony$ svn --version
svn, version 1.5.1 (r32289)
   compiled Aug  5 2008, 22:04:55
.
.
.
winxp:tmp anthony$ svn list file:///$HOME/svn/myapp
branches/
tags/
trunk/
winxp:tmp anthony$ svn checkout file:///$HOME/svn/myapp/trunk
A    trunk/dir1
A    trunk/dir1/file11
A    trunk/dir1/file12
A    trunk/dir1/file13
A    trunk/dir2
A    trunk/dir2/file21
A    trunk/dir2/file22
A    trunk/dir2/file23
A    trunk/file1
A    trunk/dir3
A    trunk/dir3/file31
A    trunk/dir3/file32
A    trunk/dir3/file33
A    trunk/file2
A    trunk/file3
Checked out revision 3.
&lt;/pre&gt;

The notes assume you're working in a Workbench [[Project_setup|project]] called &quot;development&quot;, but the implementation will work in anywhere, of course.

== Setting up ProjectBuilder ==

While everything documented here could be achieved using [[Workbench]], the notes assume the use of [[ProjectBuilder]].

You can bootstrap the ProjectBuilder object as follows:

&lt;pre&gt;
macosx:~ anthony$ ctl -p development -m ProjectBuilder -c Register -- -type ProjectBuilder -name development -basedir $CTIER_ROOT/src/development -installroot $CTIER_ROOT/target/development -install
Checking for existing object, (ProjectBuilder) development, in project, 'development'...
Registered new object.
The object can be viewed in the server via URL: http://macosx:8080/itnav/instances/View.do?maprefUri=http://www.opendepo.org/ct/development/Objects#obj_3&amp;depot=development
Dependency registered: macosx[Node] --&gt; development[ProjectBuilder]
Updating ProjectBuilder module ...
Getting: http://macosx:8080/jackrabbit/repository/controltier/projects/development/publish/modules/ProjectBuilder-head.jar
To: /Users/anthony/ctier/ctl/var/tmp/downloads/development/ProjectBuilder-head.jar
Not modified - so not downloaded
ProjectBuilder up to date
Attempting to get Builder-head.jar ...
Getting: http://macosx:8080/jackrabbit/repository/controltier/projects/development/publish/modules/Builder-head.jar
To: /Users/anthony/ctier/ctl/var/tmp/downloads/development/Builder-head.jar
Not modified - so not downloaded
Builder up to date
Attempting to get Deployment-head.jar ...
Getting: http://macosx:8080/jackrabbit/repository/controltier/projects/development/publish/modules/Deployment-head.jar
To: /Users/anthony/ctier/ctl/var/tmp/downloads/development/Deployment-head.jar
Not modified - so not downloaded
Deployment up to date
Created dir: /Users/anthony/ctier/ctl/projects/development/resources/ProjectBuilder/development/bin
Created dir: /Users/anthony/ctier/ctl/projects/development/resources/ProjectBuilder/development/logs
Created dir: /Users/anthony/ctier/ctl/projects/development/resources/ProjectBuilder/development/var/transforms
Updating properties ...
Updating process view file ...
Process View definition updated.
Framework info:
Type module: /Users/anthony/ctier/ctl/modules/ProjectBuilder
Object directory: /Users/anthony/ctier/ctl/projects/development/resources/ProjectBuilder/development
Object properties file: /Users/anthony/ctier/ctl/projects/development/resources/ProjectBuilder/development/var/resource.properties
Object process view file: /Users/anthony/ctier/ctl/projects/development/resources/ProjectBuilder/development/var/pview.xml
For more information about this object run: ctl -p development -t ProjectBuilder -r development -c Properties
&lt;/pre&gt;

This conventional setup establishes the following source base for module development work and object and job administration:

&lt;pre&gt;
macosx:~ anthony$ mkdir -p $CTIER_ROOT/src/development/modules
macosx:~ anthony$ mkdir -p $CTIER_ROOT/src/development/jobs
macosx:~ anthony$ mkdir -p $CTIER_ROOT/src/development/objects
macosx:~ anthony$ cd $CTIER_ROOT/src/development        
macosx:development anthony$ ls
jobs    modules objects
&lt;/pre&gt;

== Creating the sub-type==

The first step is to create the Builder sub-type module that provides the context for developing the example specifying the new type name, its super-type (Builder) and providing a description:

&lt;pre&gt;
macosx:modules anthony$ ctl -p development -t ProjectBuilder -r development -c create-type -- -type ZipReleaseBuilder -supertype Builder
Description of type: 
Custom Zip file based release builder
Creating module definition files in directory: /Users/anthony/ctier/src/development ...
Creating directory structure...
Created dir: /Users/anthony/ctier/src/development/modules/ZipReleaseBuilder
Created dir: /Users/anthony/ctier/src/development/modules/ZipReleaseBuilder/bin
Created dir: /Users/anthony/ctier/src/development/modules/ZipReleaseBuilder/commands
Created dir: /Users/anthony/ctier/src/development/modules/ZipReleaseBuilder/objects
Created dir: /Users/anthony/ctier/src/development/modules/ZipReleaseBuilder/templates
Initializing type module from template dir: /Users/anthony/ctier/ctl/modules/ProjectBuilder/templates/boilerplate ...
Copying 2 files to /Users/anthony/ctier/src/development/modules/ZipReleaseBuilder
Define commands and attributes in this file: /Users/anthony/ctier/src/development/modules/ZipReleaseBuilder/type.xml
macosx:modules anthony$ pwd
/Users/anthony/ctier/src/development/modules
macosx:modules anthony$ ls
ZipReleaseBuilder
macosx:modules anthony$ ls ZipReleaseBuilder/
bin             commands        lib             objects         templates       type.xml
&lt;/pre&gt;

These notes build on the default &quot;type.xml&quot; created with the module:

&lt;pre&gt;
macosx:ZipReleaseBuilder anthony$ pwd
/Users/anthony/ctier/src/development/modules/ZipReleaseBuilder
macosx:ZipReleaseBuilder anthony$ cat type.xml 
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;

&lt;types
    xmlns:module=&quot;http://open.controltier.com/base/Modules#&quot;
    xmlns:type=&quot;http://open.controltier.com/base/Types#&quot;
    xmlns:cmd=&quot;http://open.controltier.com/base/Modules/Commands#&quot;&gt;

    &lt;type name=&quot;ZipReleaseBuilder&quot; role=&quot;concrete&quot; uniqueInstances=&quot;true&quot;&gt;
        &lt;description&gt;Custom Zip file based release builder&lt;/description&gt;

        &lt;supertype&gt;
            &lt;typereference name=&quot;Builder&quot;/&gt;
        &lt;/supertype&gt;

        &lt;command-settings&gt;
            &lt;notification notify=&quot;false&quot;/&gt;
            &lt;template-directory&gt;&lt;/template-directory&gt;
            &lt;dependency-view parents=&quot;false&quot; children=&quot;true&quot; proximity=&quot;1&quot;/&gt;
            &lt;logger name=&quot;ZipReleaseBuilder&quot;/&gt;
        &lt;/command-settings&gt;

        &lt;attributes&gt;
        &lt;/attributes&gt;

        &lt;constraints&gt;
        &lt;/constraints&gt;

        &lt;commands&gt;
        &lt;/commands&gt;
    &lt;/type&gt;
&lt;/types&gt;
&lt;/pre&gt;

... incrementally building the type using the following command:

&lt;pre&gt;
macosx:objects anthony$ ctl -p development -t ProjectBuilder -r development -c build-type -- -type ZipReleaseBuilder -upload
Created dir: /Users/anthony/ctier/target/development/modules
Building type using the buildmodule.xml via classloader
converting type.xml for module: ZipReleaseBuilder
generating handlers...
packaging module: ZipReleaseBuilder
Copying 1 file to /Users/anthony/ctier/src/development/modules/ZipReleaseBuilder
Copying 1 file to /Users/anthony/ctier/src/development/modules/ZipReleaseBuilder
Deleting: /Users/anthony/ctier/src/development/modules/ZipReleaseBuilder/module.properties.temp
Building jar: /Users/anthony/ctier/target/development/modules/ZipReleaseBuilder-1.jar
Uploading built module to server ...
processing files in directory: /Users/anthony/ctier/target/development/modules
scanning for files matching pattern: (ZipReleaseBuilder)-([0-9]+)\.jar
Uploading jar: /Users/anthony/ctier/target/development/modules/ZipReleaseBuilder-1.jar to server: 'macosx' ...
&lt;/pre&gt;

== Configuring a sample object ==

Similarly, a instance of the new type is configured for deployment (to the Windows XP client in this case in this case) by creating (and subsequently incrementally extending) the following object (project) XML file:

&lt;pre&gt;
macosx:objects anthony$ pwd
/Users/anthony/ctier/src/development/objects
macosx:objects anthony$ cat sample.xml 
&lt;?xml version=&quot;1.0&quot;?&gt;

&lt;!DOCTYPE project PUBLIC &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; &quot;project.dtd&quot;&gt;

&lt;project&gt;
  &lt;deployment type=&quot;ZipReleaseBuilder&quot; name=&quot;sample&quot; description=&quot;Sample Zip release builder instance&quot;&gt;
    &lt;referrers&gt;
      &lt;resource type=&quot;Node&quot; name=&quot;winxp&quot;/&gt;
    &lt;/referrers&gt;
  &lt;/deployment&gt;
&lt;/project&gt;
&lt;/pre&gt;

... and loading the object each time using the following command:

&lt;pre&gt;
macosx:objects anthony$ ctl -p development -t ProjectBuilder -r development -c load-resources -- -filename sample.xml  
Loading &quot;/Users/anthony/ctier-3.4.8/src/development/objects/sample.xml&quot; ...
1 file(s) have been successfully validated.
Processing /Users/anthony/ctier-3.4.8/src/development/objects/sample.xml to /Users/anthony/ctier/ctl/var/tmp/projectxml-831860399.xml
Loading stylesheet /Users/anthony/ctier/ctl/modules/ProjectBuilder/lib/load-resources/projectxml/project.xsl
Mapping XML to properties ...
Collecting object attributes ...
Batching object attribute updates ...
Batching resource and referrer updates ...
Executing batch update ...
&lt;/pre&gt;

== Testing the module ==

The evolving implementation is tested by repeatedly deploying the updated module and object to the client system:

&lt;pre&gt;
winxp:tmp anthony$ ctl-project -p development -a install
&quot;Install&quot; command running for resource: sample[ZipReleaseBuilder]
&lt;/pre&gt;

... and running one command or other:

&lt;pre&gt;
winxp:tmp anthony$ ctl -p development -t ZipReleaseBuilder -r sample -c Build
Start: &quot;Run the build cycle.&quot; commands: scmCheckout,setBuildstamp,runBuildScript,repoImport
.
.
.
&lt;/pre&gt;

In summary, you'll need to build the module and load the object(s) on the server, and install the module and run one or other command on the client as each of the subsequent sections of these notes extend the implementation.

== Implementing the &quot;scmMakeBranch&quot; command ==

The scmMakeBranch command is implemented as an Ant command that runs the Subversion executable (&quot;svn&quot;) to check whether the release branch exists, and delete it if it does, before creating the branch from the source URL:

&lt;pre&gt;
macosx:ZipReleaseBuilder anthony$ cat type.xml 
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;

&lt;types
    xmlns:module=&quot;http://open.controltier.com/base/Modules#&quot;
    xmlns:type=&quot;http://open.controltier.com/base/Types#&quot;
    xmlns:cmd=&quot;http://open.controltier.com/base/Modules/Commands#&quot;&gt;

    &lt;type name=&quot;ZipReleaseBuilder&quot; role=&quot;concrete&quot; uniqueInstances=&quot;true&quot;&gt;
        &lt;description&gt;Custom Zip file based release builder&lt;/description&gt;

        &lt;supertype&gt;
            &lt;typereference name=&quot;Builder&quot;/&gt;
        &lt;/supertype&gt;

        &lt;command-settings&gt;
            &lt;notification notify=&quot;false&quot;/&gt;
            &lt;template-directory&gt;&lt;/template-directory&gt;
            &lt;dependency-view parents=&quot;false&quot; children=&quot;true&quot; proximity=&quot;1&quot;/&gt;
            &lt;logger name=&quot;ZipReleaseBuilder&quot;/&gt;
        &lt;/command-settings&gt;

        &lt;attributes&gt;
          &lt;attribute-default name=&quot;scmSource&quot; value=&quot;&quot;/&gt;
          &lt;attribute-default name=&quot;scmConnection&quot; value=&quot;&quot;/&gt;
        &lt;/attributes&gt;

        &lt;constraints&gt;
          &lt;dependency-constraint enforced=&quot;false&quot; kind=&quot;child&quot;&gt;
            &lt;allowedtypes&gt;
              &lt;typereference name=&quot;BuilderScmSource&quot;/&gt;
              &lt;typereference name=&quot;BuilderScmConnection&quot;/&gt;
            &lt;/allowedtypes&gt;
            &lt;singletontypes&gt;
              &lt;typereference name=&quot;BuilderScmSource&quot;/&gt;
              &lt;typereference name=&quot;BuilderScmConnection&quot;/&gt;
            &lt;/singletontypes&gt;
          &lt;/dependency-constraint&gt;
        &lt;/constraints&gt;

        &lt;commands&gt;
          &lt;command name=&quot;scmMakeBranch&quot; description=&quot;Make or re-make a branch from the source URL&quot; command-type=&quot;AntCommand&quot;&gt;
            &lt;implementation&gt;
              &lt;exec executable=&quot;svn&quot; failonerror=&quot;false&quot; resultproperty=&quot;resultProperty&quot;&gt;
                &lt;arg line=&quot;list ${opts.connection}&quot;/&gt;
              &lt;/exec&gt;

              &lt;if&gt;
                &lt;equals arg1=&quot;${resultProperty}&quot; arg2=&quot;0&quot;/&gt;
                &lt;then&gt;
                  &lt;exec executable=&quot;svn&quot;&gt;
                    &lt;arg line=&quot;delete --non-interactive --message &amp;quot;Automatically dropped branch&amp;quot; ${opts.connection}&quot;/&gt;
                  &lt;/exec&gt;
                &lt;/then&gt;
              &lt;/if&gt;

              &lt;exec executable=&quot;svn&quot;&gt;
                &lt;arg line=&quot;copy --non-interactive --message &amp;quot;Automatically created branch&amp;quot; ${opts.source} ${opts.connection}&quot;/&gt;
              &lt;/exec&gt;
            &lt;/implementation&gt;
            &lt;opts&gt;
              &lt;opt parameter=&quot;source&quot; description=&quot;source URL&quot; required=&quot;false&quot; property=&quot;opts.source&quot; type=&quot;string&quot; defaultproperty=&quot;resource.attribute.scmSource&quot;/&gt;
              &lt;opt parameter=&quot;connection&quot; description=&quot;release URL&quot; required=&quot;false&quot; property=&quot;opts.connection&quot; type=&quot;string&quot; defaultproperty=&quot;resource.attribute.scmConnection&quot;/&gt;
            &lt;/opts&gt;
          &lt;/command&gt;
        &lt;/commands&gt;
    &lt;/type&gt;

    &lt;type role=&quot;concrete&quot; uniqueInstances=&quot;true&quot; name=&quot;BuilderScmSource&quot;  order=&quot;Setting&quot;&gt;
      &lt;description&gt;source code repository connection string&lt;/description&gt;
        &lt;supertype&gt;
          &lt;typereference name=&quot;BuilderSetting&quot;/&gt;
        &lt;/supertype&gt;
        &lt;attributes&gt;
          &lt;attribute name=&quot;scmSource&quot; type-property=&quot;settingValue&quot;/&gt;
        &lt;/attributes&gt;
    &lt;/type&gt;
&lt;/types&gt;
&lt;/pre&gt;

The implementation relies on the addition of a new setting type - BuilderScmSource - and its attendant attribute to model the source URL. It is good practice to pass all values used by the implementation through its options list assigning default properties as appropriate to allow model data to be used as often as possible.

Note: from 3.4.8 onward it is no longer necessary to honor the options of invoking workflows; and so, in this case, the &quot;buildstamp&quot; option is omitted since it is not used by the implementation.

The sample object XML is extended to include the source and branch URLs as follows:

&lt;pre&gt;
macosx:objects anthony$ cat sample.xml 
&lt;?xml version=&quot;1.0&quot;?&gt;

&lt;!DOCTYPE project PUBLIC &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; &quot;project.dtd&quot;&gt;

&lt;project&gt;
  &lt;setting type=&quot;BuilderScmSource&quot; name=&quot;sample&quot; settingValue=&quot;file:///home/anthony/svn/myapp/trunk&quot;/&gt;
  &lt;setting type=&quot;BuilderScmConnection&quot; name=&quot;sample&quot; settingValue=&quot;file:///home/anthony/svn/myapp/branches/1.2&quot;/&gt;

  &lt;deployment type=&quot;ZipReleaseBuilder&quot; name=&quot;sample&quot; description=&quot;Sample Zip release builder instance&quot;&gt;
    &lt;resources&gt;
      &lt;resource type=&quot;BuilderScmSource&quot; name=&quot;sample&quot;/&gt;
      &lt;resource type=&quot;BuilderScmConnection&quot; name=&quot;sample&quot;/&gt;
    &lt;/resources&gt;
    &lt;referrers&gt;
      &lt;resource type=&quot;Node&quot; name=&quot;winxp&quot;/&gt;
    &lt;/referrers&gt;
  &lt;/deployment&gt;
&lt;/project&gt;
&lt;/pre&gt;

Once the new module and object have been uploaded and installed, the command runs as follows:

&lt;pre&gt;
winxp:tmp anthony$ ctl -p development -t ZipReleaseBuilder -r sample -c scmMakeBranch
dir1/
dir2/
dir3/
file1
file2
file3

Committed revision 11.

Committed revision 12.
&lt;/pre&gt;

== Configuring the &quot;scmCheckout&quot; command ==

The BuilderScmBinding setting singleton child constraint and the scmBinding default attribute value are added to the type definition in order to facilitate use of the standard scmCheckout command (note that setting the SCM binding to Subversion in this way avoids the need to use a setting object to explicitly set this value):

&lt;pre&gt;
macosx:ZipReleaseBuilder anthony$ cat type.xml 
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;

&lt;types
    xmlns:module=&quot;http://open.controltier.com/base/Modules#&quot;
    xmlns:type=&quot;http://open.controltier.com/base/Types#&quot;
    xmlns:cmd=&quot;http://open.controltier.com/base/Modules/Commands#&quot;&gt;

    &lt;type name=&quot;ZipReleaseBuilder&quot; role=&quot;concrete&quot; uniqueInstances=&quot;true&quot;&gt;
        &lt;description&gt;Custom Zip file based release builder&lt;/description&gt;

        &lt;supertype&gt;
            &lt;typereference name=&quot;Builder&quot;/&gt;
        &lt;/supertype&gt;

        &lt;command-settings&gt;
            &lt;notification notify=&quot;false&quot;/&gt;
            &lt;template-directory&gt;&lt;/template-directory&gt;
            &lt;dependency-view parents=&quot;false&quot; children=&quot;true&quot; proximity=&quot;1&quot;/&gt;
            &lt;logger name=&quot;ZipReleaseBuilder&quot;/&gt;
        &lt;/command-settings&gt;

        &lt;attributes&gt;
          &lt;attribute-default name=&quot;scmBinding&quot; value=&quot;svn&quot;/&gt;
          &lt;attribute-default name=&quot;scmSource&quot; value=&quot;&quot;/&gt;
          &lt;attribute-default name=&quot;scmConnection&quot; value=&quot;&quot;/&gt;
        &lt;/attributes&gt;

        &lt;constraints&gt;
          &lt;dependency-constraint enforced=&quot;false&quot; kind=&quot;child&quot;&gt;
            &lt;allowedtypes&gt;
              &lt;typereference name=&quot;BuilderScmBinding&quot;/&gt;
              &lt;typereference name=&quot;BuilderScmSource&quot;/&gt;
              &lt;typereference name=&quot;BuilderScmConnection&quot;/&gt;
            &lt;/allowedtypes&gt;
            &lt;singletontypes&gt;
              &lt;typereference name=&quot;BuilderScmBinding&quot;/&gt;
              &lt;typereference name=&quot;BuilderScmSource&quot;/&gt;
              &lt;typereference name=&quot;BuilderScmConnection&quot;/&gt;
            &lt;/singletontypes&gt;
          &lt;/dependency-constraint&gt;
        &lt;/constraints&gt;

        &lt;commands&gt;
          &lt;command name=&quot;scmMakeBranch&quot; description=&quot;Make or re-make a branch from the source URL&quot; command-type=&quot;AntCommand&quot;&gt;
            &lt;implementation&gt;
              &lt;exec executable=&quot;svn&quot; failonerror=&quot;false&quot; resultproperty=&quot;resultProperty&quot;&gt;
                &lt;arg line=&quot;list ${opts.connection}&quot;/&gt;
              &lt;/exec&gt;

              &lt;if&gt;
                &lt;equals arg1=&quot;${resultProperty}&quot; arg2=&quot;0&quot;/&gt;
                &lt;then&gt;
                  &lt;exec executable=&quot;svn&quot;&gt;
                    &lt;arg line=&quot;delete --non-interactive --message &amp;quot;Automatically dropped branch&amp;quot; ${opts.connection}&quot;/&gt;
                  &lt;/exec&gt;
                &lt;/then&gt;
              &lt;/if&gt;

              &lt;exec executable=&quot;svn&quot;&gt;
                &lt;arg line=&quot;copy --non-interactive --message &amp;quot;Automatically created branch&amp;quot; ${opts.source} ${opts.connection}&quot;/&gt;
              &lt;/exec&gt;
            &lt;/implementation&gt;
            &lt;opts&gt;
              &lt;opt parameter=&quot;source&quot; description=&quot;source URL&quot; required=&quot;false&quot; property=&quot;opts.source&quot; type=&quot;string&quot; defaultproperty=&quot;resource.attribute.scmSource&quot;/&gt;
              &lt;opt parameter=&quot;connection&quot; description=&quot;release URL&quot; required=&quot;false&quot; property=&quot;opts.connection&quot; type=&quot;string&quot; defaultproperty=&quot;resource.attribute.scmConnection&quot;/&gt;
            &lt;/opts&gt;
          &lt;/command&gt;
        &lt;/commands&gt;
    &lt;/type&gt;

    &lt;type role=&quot;concrete&quot; uniqueInstances=&quot;true&quot; name=&quot;BuilderScmSource&quot;  order=&quot;Setting&quot;&gt;
      &lt;description&gt;source code repository connection string&lt;/description&gt;
        &lt;supertype&gt;
          &lt;typereference name=&quot;BuilderSetting&quot;/&gt;
        &lt;/supertype&gt;
        &lt;attributes&gt;
          &lt;attribute name=&quot;scmSource&quot; type-property=&quot;settingValue&quot;/&gt;
        &lt;/attributes&gt;
    &lt;/type&gt;
&lt;/types&gt;
&lt;/pre&gt;

{{caution|The constraints required by the various inherited command implementations (BuilderScmBinding in this case) have to be explicitly included in the sub-type. This is a limitation of the framework's inheritance model}}

The base directory (basedir) attribute is added to the object definition to specify the working directory to be used by scmCheckout:

&lt;pre&gt;
macosx:objects anthony$ cat sample.xml 
&lt;?xml version=&quot;1.0&quot;?&gt;

&lt;!DOCTYPE project PUBLIC &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; &quot;project.dtd&quot;&gt;

&lt;project&gt;
  &lt;setting type=&quot;BuilderScmSource&quot; name=&quot;sample&quot; settingValue=&quot;file:///home/anthony/svn/myapp/trunk&quot;/&gt;
  &lt;setting type=&quot;BuilderScmConnection&quot; name=&quot;sample&quot; settingValue=&quot;file:///home/anthony/svn/myapp/branches/1.2&quot;/&gt;

  &lt;deployment type=&quot;ZipReleaseBuilder&quot; name=&quot;sample&quot; description=&quot;Sample Zip release builder instance&quot; basedir=&quot;/home/anthony/build/myapp&quot;&gt;
    &lt;resources replace=&quot;true&quot;&gt;
      &lt;resource type=&quot;BuilderScmSource&quot; name=&quot;sample&quot;/&gt;
      &lt;resource type=&quot;BuilderScmConnection&quot; name=&quot;sample&quot;/&gt;
    &lt;/resources&gt;
    &lt;referrers&gt;
      &lt;resource type=&quot;Node&quot; name=&quot;winxp&quot;/&gt;
    &lt;/referrers&gt;
  &lt;/deployment&gt;
&lt;/project&gt;
&lt;/pre&gt;

Once this new version of the module and object are setup, running the command on the client yields a working copy of the release branch in the base directory:

&lt;pre&gt;
winxp:build anthony$ ctl -p development -t ZipReleaseBuilder -r sample -c scmCheckout
scmCheckout parameters: {basedir=&quot;/home/anthony/build/myapp&quot;, connection=&quot;file:///home/anthony/svn/myapp/branches/1.2&quot;, module=&quot;&quot;, label=&quot;&quot;, scmcommand=&quot;checkout&quot; }
Created dir: E:\home\anthony\build\myapp
A    /home/anthony/build/myapp/dir1
A    /home/anthony/build/myapp/dir1/file11
A    /home/anthony/build/myapp/dir1/file12
A    /home/anthony/build/myapp/dir1/file13
A    /home/anthony/build/myapp/dir2
A    /home/anthony/build/myapp/dir2/file21
A    /home/anthony/build/myapp/dir2/file22
A    /home/anthony/build/myapp/dir2/file23
A    /home/anthony/build/myapp/file1
A    /home/anthony/build/myapp/dir3
A    /home/anthony/build/myapp/dir3/file31
A    /home/anthony/build/myapp/dir3/file32
A    /home/anthony/build/myapp/dir3/file33
A    /home/anthony/build/myapp/file2
A    /home/anthony/build/myapp/file3
Checked out revision 12.
[command.timer.Builder.scmCheckout: 1.922 sec]
&lt;/pre&gt;

== Configuring the &quot;setBuildstamp&quot; command ==

The setBuildstamp command relies on a number of attributes to describe the package version scheme to be used:

&lt;pre&gt;
macosx:ZipReleaseBuilder anthony$ cat type.xml 
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;

&lt;types
    xmlns:module=&quot;http://open.controltier.com/base/Modules#&quot;
    xmlns:type=&quot;http://open.controltier.com/base/Types#&quot;
    xmlns:cmd=&quot;http://open.controltier.com/base/Modules/Commands#&quot;&gt;

    &lt;type name=&quot;ZipReleaseBuilder&quot; role=&quot;concrete&quot; uniqueInstances=&quot;true&quot;&gt;
        &lt;description&gt;Custom Zip file based release builder&lt;/description&gt;

        &lt;supertype&gt;
            &lt;typereference name=&quot;Builder&quot;/&gt;
        &lt;/supertype&gt;

        &lt;command-settings&gt;
            &lt;notification notify=&quot;false&quot;/&gt;
            &lt;template-directory&gt;&lt;/template-directory&gt;
            &lt;dependency-view parents=&quot;false&quot; children=&quot;true&quot; proximity=&quot;1&quot;/&gt;
            &lt;logger name=&quot;ZipReleaseBuilder&quot;/&gt;
        &lt;/command-settings&gt;

        &lt;attributes&gt;
          &lt;attribute-default name=&quot;scmBinding&quot; value=&quot;svn&quot;/&gt;
          &lt;attribute-default name=&quot;scmSource&quot; value=&quot;&quot;/&gt;
          &lt;attribute-default name=&quot;scmConnection&quot; value=&quot;&quot;/&gt;
        &lt;/attributes&gt;

        &lt;constraints&gt;
          &lt;dependency-constraint enforced=&quot;false&quot; kind=&quot;child&quot;&gt;
            &lt;allowedtypes&gt;
              &lt;typereference name=&quot;BuilderScmBinding&quot;/&gt;
              &lt;typereference name=&quot;BuilderScmSource&quot;/&gt;
              &lt;typereference name=&quot;BuilderScmConnection&quot;/&gt;
              &lt;typereference name=&quot;BuilderVersionTag&quot;/&gt;
              &lt;typereference name=&quot;BuilderVersionMajor&quot;/&gt;
              &lt;typereference name=&quot;BuilderVersionMinor&quot;/&gt;
              &lt;typereference name=&quot;BuilderBuildstamp&quot;/&gt;
            &lt;/allowedtypes&gt;
            &lt;singletontypes&gt;
              &lt;typereference name=&quot;BuilderScmBinding&quot;/&gt;
              &lt;typereference name=&quot;BuilderScmSource&quot;/&gt;
              &lt;typereference name=&quot;BuilderScmConnection&quot;/&gt;
              &lt;typereference name=&quot;BuilderVersionTag&quot;/&gt;
              &lt;typereference name=&quot;BuilderVersionMajor&quot;/&gt;
              &lt;typereference name=&quot;BuilderVersionMinor&quot;/&gt;
              &lt;typereference name=&quot;BuilderBuildstamp&quot;/&gt;
            &lt;/singletontypes&gt;
          &lt;/dependency-constraint&gt;
        &lt;/constraints&gt;

        &lt;commands&gt;
          &lt;command name=&quot;scmMakeBranch&quot; description=&quot;Make or re-make a branch from the source URL&quot; command-type=&quot;AntCommand&quot;&gt;
            &lt;implementation&gt;
              &lt;exec executable=&quot;svn&quot; failonerror=&quot;false&quot; resultproperty=&quot;resultProperty&quot;&gt;
                &lt;arg line=&quot;list ${opts.connection}&quot;/&gt;
              &lt;/exec&gt;

              &lt;if&gt;
                &lt;equals arg1=&quot;${resultProperty}&quot; arg2=&quot;0&quot;/&gt;
                &lt;then&gt;
                  &lt;exec executable=&quot;svn&quot;&gt;
                    &lt;arg line=&quot;delete --non-interactive --message &amp;quot;Automatically dropped branch&amp;quot; ${opts.connection}&quot;/&gt;
                  &lt;/exec&gt;
                &lt;/then&gt;
              &lt;/if&gt;

              &lt;exec executable=&quot;svn&quot;&gt;
                &lt;arg line=&quot;copy --non-interactive --message &amp;quot;Automatically created branch&amp;quot; ${opts.source} ${opts.connection}&quot;/&gt;
              &lt;/exec&gt;
            &lt;/implementation&gt;
            &lt;opts&gt;
              &lt;opt parameter=&quot;source&quot; description=&quot;source URL&quot; required=&quot;false&quot; property=&quot;opts.source&quot; type=&quot;string&quot; defaultproperty=&quot;resource.attribute.scmSource&quot;/&gt;
              &lt;opt parameter=&quot;connection&quot; description=&quot;release URL&quot; required=&quot;false&quot; property=&quot;opts.connection&quot; type=&quot;string&quot; defaultproperty=&quot;resource.attribute.scmConnection&quot;/&gt;
            &lt;/opts&gt;
          &lt;/command&gt;
        &lt;/commands&gt;
    &lt;/type&gt;

    &lt;type role=&quot;concrete&quot; uniqueInstances=&quot;true&quot; name=&quot;BuilderScmSource&quot;  order=&quot;Setting&quot;&gt;
      &lt;description&gt;source code repository connection string&lt;/description&gt;
        &lt;supertype&gt;
          &lt;typereference name=&quot;BuilderSetting&quot;/&gt;
        &lt;/supertype&gt;
        &lt;attributes&gt;
          &lt;attribute name=&quot;scmSource&quot; type-property=&quot;settingValue&quot;/&gt;
        &lt;/attributes&gt;
    &lt;/type&gt;
&lt;/types&gt;
&lt;/pre&gt;

... in this case the BuilderVersionTag, BuilderVersionMajor and BuilderVersionMinor setting resources are configured to support the desired package version format.

In addition, adding in the BuilderBuildstamp constraint makes provision for automatically storing generated buildstamp values in the model. This is extremely useful for automated build processes such as Continuous Integration, or for simplifying the build process to a push-button operation in Jobcenter.

The object XML is extended to include the four new settings used by the command:

&lt;pre&gt;
macosx:objects anthony$ cat sample.xml 
&lt;?xml version=&quot;1.0&quot;?&gt;

&lt;!DOCTYPE project PUBLIC &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; &quot;project.dtd&quot;&gt;

&lt;project&gt;
  &lt;setting type=&quot;BuilderScmSource&quot; name=&quot;sample&quot; settingValue=&quot;file:///home/anthony/svn/myapp/trunk&quot;/&gt;
  &lt;setting type=&quot;BuilderScmConnection&quot; name=&quot;sample&quot; settingValue=&quot;file:///home/anthony/svn/myapp/branches/1.2&quot;/&gt;
  &lt;setting type=&quot;BuilderVersionTag&quot; name=&quot;sample&quot; settingValue=&quot;release&quot;/&gt;
  &lt;setting type=&quot;BuilderVersionMajor&quot; name=&quot;sample&quot; settingValue=&quot;1&quot;/&gt;
  &lt;setting type=&quot;BuilderVersionMinor&quot; name=&quot;sample&quot; settingValue=&quot;2&quot;/&gt;
  &lt;setting type=&quot;BuilderBuildstamp&quot; name=&quot;sample&quot; settingValue=&quot;none&quot;/&gt;

  &lt;deployment type=&quot;ZipReleaseBuilder&quot; name=&quot;sample&quot; description=&quot;Sample Zip release builder instance&quot; basedir=&quot;/home/anthony/build/myapp&quot;&gt;
    &lt;resources replace=&quot;true&quot;&gt;
      &lt;resource type=&quot;BuilderScmSource&quot; name=&quot;sample&quot;/&gt;
      &lt;resource type=&quot;BuilderScmConnection&quot; name=&quot;sample&quot;/&gt;
      &lt;resource type=&quot;BuilderVersionTag&quot; name=&quot;sample&quot;/&gt;
      &lt;resource type=&quot;BuilderVersionMajor&quot; name=&quot;sample&quot;/&gt;
      &lt;resource type=&quot;BuilderVersionMinor&quot; name=&quot;sample&quot;/&gt;
      &lt;resource type=&quot;BuilderBuildstamp&quot; name=&quot;sample&quot;/&gt;
    &lt;/resources&gt;
    &lt;referrers&gt;
      &lt;resource type=&quot;Node&quot; name=&quot;winxp&quot;/&gt;
    &lt;/referrers&gt;
  &lt;/deployment&gt;
&lt;/project&gt;
&lt;/pre&gt;

Running the command yields an automatically generated buildstamp, &quot;release.1.2.12&quot;, that will be used in the package file name:

&lt;pre&gt;
winxp:build anthony$ ctl -p development -t ZipReleaseBuilder -r sample -c setBuildstamp
Checking &quot;file:///home/anthony/svn/myapp/branches/1.2&quot; for the last changed revision ...
Deleting: E:\home\anthony\ctier\ctl\projects\development\deployments\ZipReleaseBuilder\sample\var\null1193826550.out
Automatically set buildstamp to &quot;release.1.2.12&quot;
[command.timer.Builder.setBuildstamp: 0.406 sec]
&lt;/pre&gt;

Note that the default implementation appends the build number  (i.e. the Subversion commit number or last modified revision of the URL) to the buildstamp (&quot;12&quot; in this case). This best-practice provides excellent traceability between the package version scheme and the source code management system.

== Overriding the &quot;runBuildScript&quot; command ==

The following version of the type.xml includes an new implementation of the runBuildScript command that uses the [http://ant.apache.org/manual/CoreTasks/zip.html Zip Ant task] to create the Zip file for release:

&lt;pre&gt;
macosx:ZipReleaseBuilder anthony$ cat type.xml 
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;

&lt;types
    xmlns:module=&quot;http://open.controltier.com/base/Modules#&quot;
    xmlns:type=&quot;http://open.controltier.com/base/Types#&quot;
    xmlns:cmd=&quot;http://open.controltier.com/base/Modules/Commands#&quot;&gt;

    &lt;type name=&quot;ZipReleaseBuilder&quot; role=&quot;concrete&quot; uniqueInstances=&quot;true&quot;&gt;
        &lt;description&gt;Custom Zip file based release builder&lt;/description&gt;

        &lt;supertype&gt;
            &lt;typereference name=&quot;Builder&quot;/&gt;
        &lt;/supertype&gt;

        &lt;command-settings&gt;
            &lt;notification notify=&quot;false&quot;/&gt;
            &lt;template-directory&gt;&lt;/template-directory&gt;
            &lt;dependency-view parents=&quot;false&quot; children=&quot;true&quot; proximity=&quot;1&quot;/&gt;
            &lt;logger name=&quot;ZipReleaseBuilder&quot;/&gt;
        &lt;/command-settings&gt;

        &lt;attributes&gt;
          &lt;attribute-default name=&quot;scmBinding&quot; value=&quot;svn&quot;/&gt;
          &lt;attribute-default name=&quot;scmSource&quot; value=&quot;&quot;/&gt;
          &lt;attribute-default name=&quot;scmConnection&quot; value=&quot;&quot;/&gt;
          &lt;attribute-default name=&quot;packageExtension&quot; value=&quot;zip&quot;/&gt;
        &lt;/attributes&gt;

        &lt;constraints&gt;
          &lt;dependency-constraint enforced=&quot;false&quot; kind=&quot;child&quot;&gt;
            &lt;allowedtypes&gt;
              &lt;typereference name=&quot;BuilderScmBinding&quot;/&gt;
              &lt;typereference name=&quot;BuilderScmSource&quot;/&gt;
              &lt;typereference name=&quot;BuilderScmConnection&quot;/&gt;
              &lt;typereference name=&quot;BuilderVersionTag&quot;/&gt;
              &lt;typereference name=&quot;BuilderVersionMajor&quot;/&gt;
              &lt;typereference name=&quot;BuilderVersionMinor&quot;/&gt;
              &lt;typereference name=&quot;BuilderBuildstamp&quot;/&gt;
              &lt;typereference name=&quot;BuilderPackageFilebase&quot;/&gt;
              &lt;typereference name=&quot;BuilderPackageSeparator&quot;/&gt;
              &lt;typereference name=&quot;BuilderPackageExtension&quot;/&gt;
            &lt;/allowedtypes&gt;
            &lt;singletontypes&gt;
              &lt;typereference name=&quot;BuilderScmBinding&quot;/&gt;
              &lt;typereference name=&quot;BuilderScmSource&quot;/&gt;
              &lt;typereference name=&quot;BuilderScmConnection&quot;/&gt;
              &lt;typereference name=&quot;BuilderVersionTag&quot;/&gt;
              &lt;typereference name=&quot;BuilderVersionMajor&quot;/&gt;
              &lt;typereference name=&quot;BuilderVersionMinor&quot;/&gt;
              &lt;typereference name=&quot;BuilderBuildstamp&quot;/&gt;
              &lt;typereference name=&quot;BuilderPackageFilebase&quot;/&gt;
              &lt;typereference name=&quot;BuilderPackageSeparator&quot;/&gt;
              &lt;typereference name=&quot;BuilderPackageExtension&quot;/&gt;
            &lt;/singletontypes&gt;
          &lt;/dependency-constraint&gt;
        &lt;/constraints&gt;

        &lt;commands&gt;
          &lt;command name=&quot;scmMakeBranch&quot; description=&quot;Make or re-make a branch from the source URL&quot; command-type=&quot;AntCommand&quot;&gt;
            &lt;implementation&gt;
              &lt;exec executable=&quot;svn&quot; failonerror=&quot;false&quot; resultproperty=&quot;resultProperty&quot;&gt;
                &lt;arg line=&quot;list ${opts.connection}&quot;/&gt;
              &lt;/exec&gt;

              &lt;if&gt;
                &lt;equals arg1=&quot;${resultProperty}&quot; arg2=&quot;0&quot;/&gt;
                &lt;then&gt;
                  &lt;exec executable=&quot;svn&quot;&gt;
                    &lt;arg line=&quot;delete --non-interactive --message &amp;quot;Automatically dropped branch&amp;quot; ${opts.connection}&quot;/&gt;
                  &lt;/exec&gt;
                &lt;/then&gt;
              &lt;/if&gt;

              &lt;exec executable=&quot;svn&quot;&gt;
                &lt;arg line=&quot;copy --non-interactive --message &amp;quot;Automatically created branch&amp;quot; ${opts.source} ${opts.connection}&quot;/&gt;
              &lt;/exec&gt;
            &lt;/implementation&gt;
            &lt;opts&gt;
              &lt;opt parameter=&quot;source&quot; description=&quot;source URL&quot; required=&quot;false&quot; property=&quot;opts.source&quot; type=&quot;string&quot; defaultproperty=&quot;resource.attribute.scmSource&quot;/&gt;
              &lt;opt parameter=&quot;connection&quot; description=&quot;release URL&quot; required=&quot;false&quot; property=&quot;opts.connection&quot; type=&quot;string&quot; defaultproperty=&quot;resource.attribute.scmConnection&quot;/&gt;
            &lt;/opts&gt;
          &lt;/command&gt;
          &lt;command name=&quot;runBuildScript&quot; description=&quot;Invoke the build tool.&quot; command-type=&quot;AntCommand&quot; daemonized=&quot;false&quot;&gt;
            &lt;implementation&gt;
              &lt;mkdir dir=&quot;${opts.targetdir}&quot;/&gt;
              &lt;zip destfile=&quot;${opts.targetdir}/${opts.filebase}${opts.separator}${opts.buildstamp}.${opts.extension}&quot; basedir=&quot;${opts.basedir}&quot; update=&quot;false&quot;/&gt;
            &lt;/implementation&gt;
            &lt;opts&gt;
              &lt;opt parameter=&quot;basedir&quot; description=&quot;directory where build resources reside&quot; required=&quot;false&quot; property=&quot;opts.basedir&quot; type=&quot;string&quot; defaultproperty=&quot;resource.attribute.basedir&quot;/&gt;
              &lt;opt parameter=&quot;targetdir&quot; description=&quot;directory build artifacts will be written&quot; required=&quot;false&quot; property=&quot;opts.targetdir&quot; type=&quot;string&quot; defaultproperty=&quot;resource.attribute.targetdir&quot;/&gt;
              &lt;opt parameter=&quot;filebase&quot; description=&quot;package file base name&quot; required=&quot;false&quot; property=&quot;opts.filebase&quot; type=&quot;string&quot; defaultproperty=&quot;resource.attribute.packageFilebase&quot;/&gt;
              &lt;opt parameter=&quot;separator&quot; description=&quot;package name/version separator&quot; required=&quot;false&quot; property=&quot;opts.separator&quot; type=&quot;string&quot; defaultproperty=&quot;resource.attribute.packageSeparator&quot;/&gt;
              &lt;opt parameter=&quot;buildstamp&quot; description=&quot;build identifier&quot; required=&quot;false&quot; property=&quot;opts.buildstamp&quot; type=&quot;string&quot; defaultproperty=&quot;resource.attribute.buildstamp&quot;/&gt;
              &lt;opt parameter=&quot;extension&quot; description=&quot;package file extension&quot; required=&quot;false&quot; property=&quot;opts.extension&quot; type=&quot;string&quot; defaultproperty=&quot;resource.attribute.packageExtension&quot;/&gt;
            &lt;/opts&gt;
          &lt;/command&gt;
        &lt;/commands&gt;
    &lt;/type&gt;

    &lt;type role=&quot;concrete&quot; uniqueInstances=&quot;true&quot; name=&quot;BuilderScmSource&quot;  order=&quot;Setting&quot;&gt;
      &lt;description&gt;source code repository connection string&lt;/description&gt;
        &lt;supertype&gt;
          &lt;typereference name=&quot;BuilderSetting&quot;/&gt;
        &lt;/supertype&gt;
        &lt;attributes&gt;
          &lt;attribute name=&quot;scmSource&quot; type-property=&quot;settingValue&quot;/&gt;
        &lt;/attributes&gt;
    &lt;/type&gt;
&lt;/types&gt;
&lt;/pre&gt;

Note that three standard builder package settings (BuilderPackageFilebase, BuilderPackageSeparator, BuilderPackageExtension) supply the attributes which are combined with the buildstamp to produce the Zip file's name, and that the file itself is deposited in &quot;resource.attribute.targetdir&quot; which is, in turn, an attribute name for the builder's &quot;installRoot&quot; property:

&lt;pre&gt;
macosx:objects anthony$ cat sample.xml 
&lt;?xml version=&quot;1.0&quot;?&gt;

&lt;!DOCTYPE project PUBLIC &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; &quot;project.dtd&quot;&gt;

&lt;project&gt;
  &lt;setting type=&quot;BuilderScmSource&quot; name=&quot;sample&quot; settingValue=&quot;file:///home/anthony/svn/myapp/trunk&quot;/&gt;
  &lt;setting type=&quot;BuilderScmConnection&quot; name=&quot;sample&quot; settingValue=&quot;file:///home/anthony/svn/myapp/branches/1.2&quot;/&gt;
  &lt;setting type=&quot;BuilderVersionTag&quot; name=&quot;sample&quot; settingValue=&quot;release&quot;/&gt;
  &lt;setting type=&quot;BuilderVersionMajor&quot; name=&quot;sample&quot; settingValue=&quot;1&quot;/&gt;
  &lt;setting type=&quot;BuilderVersionMinor&quot; name=&quot;sample&quot; settingValue=&quot;2&quot;/&gt;
  &lt;setting type=&quot;BuilderBuildstamp&quot; name=&quot;sample&quot; settingValue=&quot;none&quot;/&gt;
  &lt;setting type=&quot;BuilderPackageFilebase&quot; name=&quot;sample&quot; settingValue=&quot;myapp&quot;/&gt;

  &lt;deployment type=&quot;ZipReleaseBuilder&quot; name=&quot;sample&quot; description=&quot;Sample Zip release builder instance&quot; basedir=&quot;/home/anthony/build/myapp&quot; installRoot=&quot;/home/anthony/target/myapp&quot;&gt;
    &lt;resources replace=&quot;true&quot;&gt;
      &lt;resource type=&quot;BuilderScmSource&quot; name=&quot;sample&quot;/&gt;
      &lt;resource type=&quot;BuilderScmConnection&quot; name=&quot;sample&quot;/&gt;
      &lt;resource type=&quot;BuilderVersionTag&quot; name=&quot;sample&quot;/&gt;
      &lt;resource type=&quot;BuilderVersionMajor&quot; name=&quot;sample&quot;/&gt;
      &lt;resource type=&quot;BuilderVersionMinor&quot; name=&quot;sample&quot;/&gt;
      &lt;resource type=&quot;BuilderBuildstamp&quot; name=&quot;sample&quot;/&gt;
      &lt;resource type=&quot;BuilderPackageFilebase&quot; name=&quot;sample&quot;/&gt;
    &lt;/resources&gt;
    &lt;referrers&gt;
      &lt;resource type=&quot;Node&quot; name=&quot;winxp&quot;/&gt;
    &lt;/referrers&gt;
  &lt;/deployment&gt;
&lt;/project&gt;
&lt;/pre&gt;

... adding the package file base determines what the &quot;root&quot; of the Zip file's name will be.

Installing the updated modules and running the command yields:

&lt;pre&gt;
winxp:myapp anthony$ ctl -p development -t ZipReleaseBuilder -r sample -c runBuildScript
Building zip: E:\home\anthony\target\myapp\myapp-release.1.2.12.zip
winxp:myapp anthony$ pwd
/home/anthony/target/myapp
winxp:myapp anthony$ unzip -l myapp-release.1.2.12.zip 
Archive:  myapp-release.1.2.12.zip
  Length     Date   Time    Name
 --------    ----   ----    ----
        0  10-06-09 11:32   dir1/
        0  10-06-09 11:32   dir2/
        0  10-06-09 11:32   dir3/
        0  10-06-09 11:32   dir1/file11
        0  10-06-09 11:32   dir1/file12
        0  10-06-09 11:32   dir1/file13
        0  10-06-09 11:32   dir2/file21
        0  10-06-09 11:32   dir2/file22
        0  10-06-09 11:32   dir2/file23
        0  10-06-09 11:32   dir3/file31
        0  10-06-09 11:32   dir3/file32
        0  10-06-09 11:32   dir3/file33
        0  10-06-09 11:32   file1
        0  10-06-09 11:32   file2
        0  10-06-09 11:32   file3
 --------                   -------
        0                   15 files
&lt;/pre&gt;

== Configuring the &quot;repoImport&quot; command ==

All that's needed to facilitate using the default repoImport (repository import) command to register and upload the package to the ControlTier server is the addition of five more of the standard builder settings (BuilderPackageType, BuilderPackageInstallroot, BuilderPackageVendor, BuilderImportMin, BuilderImportMax) to the type definition along with some reasonable default attribute values for four of them:

&lt;pre&gt;
macosx:ZipReleaseBuilder anthony$ cat type.xml 
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;

&lt;types
    xmlns:module=&quot;http://open.controltier.com/base/Modules#&quot;
    xmlns:type=&quot;http://open.controltier.com/base/Types#&quot;
    xmlns:cmd=&quot;http://open.controltier.com/base/Modules/Commands#&quot;&gt;

    &lt;type name=&quot;ZipReleaseBuilder&quot; role=&quot;concrete&quot; uniqueInstances=&quot;true&quot;&gt;
        &lt;description&gt;Custom Zip file based release builder&lt;/description&gt;

        &lt;supertype&gt;
            &lt;typereference name=&quot;Builder&quot;/&gt;
        &lt;/supertype&gt;

        &lt;command-settings&gt;
            &lt;notification notify=&quot;false&quot;/&gt;
            &lt;template-directory&gt;&lt;/template-directory&gt;
            &lt;dependency-view parents=&quot;false&quot; children=&quot;true&quot; proximity=&quot;1&quot;/&gt;
            &lt;logger name=&quot;ZipReleaseBuilder&quot;/&gt;
        &lt;/command-settings&gt;

        &lt;attributes&gt;
          &lt;attribute-default name=&quot;scmBinding&quot; value=&quot;svn&quot;/&gt;
          &lt;attribute-default name=&quot;scmSource&quot; value=&quot;&quot;/&gt;
          &lt;attribute-default name=&quot;scmConnection&quot; value=&quot;&quot;/&gt;
          &lt;attribute-default name=&quot;packageExtension&quot; value=&quot;zip&quot;/&gt;
          &lt;attribute-default name=&quot;packageType&quot; value=&quot;zip&quot;/&gt;
          &lt;attribute-default name=&quot;packageVendor&quot; value=&quot;&quot;/&gt;
          &lt;attribute-default name=&quot;importMin&quot; value=&quot;1&quot;/&gt;
          &lt;attribute-default name=&quot;importMax&quot; value=&quot;1&quot;/&gt;
        &lt;/attributes&gt;

        &lt;constraints&gt;
          &lt;dependency-constraint enforced=&quot;false&quot; kind=&quot;child&quot;&gt;
            &lt;allowedtypes&gt;
              &lt;typereference name=&quot;BuilderScmBinding&quot;/&gt;
              &lt;typereference name=&quot;BuilderScmSource&quot;/&gt;
              &lt;typereference name=&quot;BuilderScmConnection&quot;/&gt;
              &lt;typereference name=&quot;BuilderVersionTag&quot;/&gt;
              &lt;typereference name=&quot;BuilderVersionMajor&quot;/&gt;
              &lt;typereference name=&quot;BuilderVersionMinor&quot;/&gt;
              &lt;typereference name=&quot;BuilderBuildstamp&quot;/&gt;
              &lt;typereference name=&quot;BuilderPackageFilebase&quot;/&gt;
              &lt;typereference name=&quot;BuilderPackageSeparator&quot;/&gt;
              &lt;typereference name=&quot;BuilderPackageExtension&quot;/&gt;
              &lt;typereference name=&quot;BuilderPackageType&quot;/&gt;
              &lt;typereference name=&quot;BuilderPackageInstallroot&quot;/&gt;
              &lt;typereference name=&quot;BuilderPackageVendor&quot;/&gt;
              &lt;typereference name=&quot;BuilderImportMin&quot;/&gt;
              &lt;typereference name=&quot;BuilderImportMax&quot;/&gt;
            &lt;/allowedtypes&gt;
            &lt;singletontypes&gt;
              &lt;typereference name=&quot;BuilderScmBinding&quot;/&gt;
              &lt;typereference name=&quot;BuilderScmSource&quot;/&gt;
              &lt;typereference name=&quot;BuilderScmConnection&quot;/&gt;
              &lt;typereference name=&quot;BuilderVersionTag&quot;/&gt;
              &lt;typereference name=&quot;BuilderVersionMajor&quot;/&gt;
              &lt;typereference name=&quot;BuilderVersionMinor&quot;/&gt;
              &lt;typereference name=&quot;BuilderBuildstamp&quot;/&gt;
              &lt;typereference name=&quot;BuilderPackageFilebase&quot;/&gt;
              &lt;typereference name=&quot;BuilderPackageSeparator&quot;/&gt;
              &lt;typereference name=&quot;BuilderPackageExtension&quot;/&gt;
              &lt;typereference name=&quot;BuilderPackageType&quot;/&gt;
              &lt;typereference name=&quot;BuilderPackageInstallroot&quot;/&gt;
              &lt;typereference name=&quot;BuilderPackageVendor&quot;/&gt;
              &lt;typereference name=&quot;BuilderImportMin&quot;/&gt;
              &lt;typereference name=&quot;BuilderImportMax&quot;/&gt;
            &lt;/singletontypes&gt;
          &lt;/dependency-constraint&gt;
        &lt;/constraints&gt;

        &lt;commands&gt;
          &lt;command name=&quot;scmMakeBranch&quot; description=&quot;Make or re-make a branch from the source URL&quot; command-type=&quot;AntCommand&quot;&gt;
            &lt;implementation&gt;
              &lt;exec executable=&quot;svn&quot; failonerror=&quot;false&quot; resultproperty=&quot;resultProperty&quot;&gt;
                &lt;arg line=&quot;list ${opts.connection}&quot;/&gt;
              &lt;/exec&gt;

              &lt;if&gt;
                &lt;equals arg1=&quot;${resultProperty}&quot; arg2=&quot;0&quot;/&gt;
                &lt;then&gt;
                  &lt;exec executable=&quot;svn&quot;&gt;
                    &lt;arg line=&quot;delete --non-interactive --message &amp;quot;Automatically dropped branch&amp;quot; ${opts.connection}&quot;/&gt;
                  &lt;/exec&gt;
                &lt;/then&gt;
              &lt;/if&gt;

              &lt;exec executable=&quot;svn&quot;&gt;
                &lt;arg line=&quot;copy --non-interactive --message &amp;quot;Automatically created branch&amp;quot; ${opts.source} ${opts.connection}&quot;/&gt;
              &lt;/exec&gt;
            &lt;/implementation&gt;
            &lt;opts&gt;
              &lt;opt parameter=&quot;source&quot; description=&quot;source URL&quot; required=&quot;false&quot; property=&quot;opts.source&quot; type=&quot;string&quot; defaultproperty=&quot;resource.attribute.scmSource&quot;/&gt;
              &lt;opt parameter=&quot;connection&quot; description=&quot;release URL&quot; required=&quot;false&quot; property=&quot;opts.connection&quot; type=&quot;string&quot; defaultproperty=&quot;resource.attribute.scmConnection&quot;/&gt;
            &lt;/opts&gt;
          &lt;/command&gt;
          &lt;command name=&quot;runBuildScript&quot; description=&quot;Invoke the build tool.&quot; command-type=&quot;AntCommand&quot; daemonized=&quot;false&quot;&gt;
            &lt;implementation&gt;
              &lt;mkdir dir=&quot;${opts.targetdir}&quot;/&gt;
              &lt;zip destfile=&quot;${opts.targetdir}/${opts.filebase}${opts.separator}${opts.buildstamp}.${opts.extension}&quot; basedir=&quot;${opts.basedir}&quot; update=&quot;false&quot;/&gt;
            &lt;/implementation&gt;
            &lt;opts&gt;
              &lt;opt parameter=&quot;basedir&quot; description=&quot;directory where build resources reside&quot; required=&quot;false&quot; property=&quot;opts.basedir&quot; type=&quot;string&quot; defaultproperty=&quot;resource.attribute.basedir&quot;/&gt;
              &lt;opt parameter=&quot;targetdir&quot; description=&quot;directory build artifacts will be written&quot; required=&quot;false&quot; property=&quot;opts.targetdir&quot; type=&quot;string&quot; defaultproperty=&quot;resource.attribute.targetdir&quot;/&gt;
              &lt;opt parameter=&quot;filebase&quot; description=&quot;package file base name&quot; required=&quot;false&quot; property=&quot;opts.filebase&quot; type=&quot;string&quot; defaultproperty=&quot;resource.attribute.packageFilebase&quot;/&gt;
              &lt;opt parameter=&quot;separator&quot; description=&quot;package name/version separator&quot; required=&quot;false&quot; property=&quot;opts.separator&quot; type=&quot;string&quot; defaultproperty=&quot;resource.attribute.packageSeparator&quot;/&gt;
              &lt;opt parameter=&quot;buildstamp&quot; description=&quot;build identifier&quot; required=&quot;false&quot; property=&quot;opts.buildstamp&quot; type=&quot;string&quot; defaultproperty=&quot;resource.attribute.buildstamp&quot;/&gt;
              &lt;opt parameter=&quot;extension&quot; description=&quot;package file extension&quot; required=&quot;false&quot; property=&quot;opts.extension&quot; type=&quot;string&quot; defaultproperty=&quot;resource.attribute.packageExtension&quot;/&gt;
            &lt;/opts&gt;
          &lt;/command&gt;
        &lt;/commands&gt;
    &lt;/type&gt;

    &lt;type role=&quot;concrete&quot; uniqueInstances=&quot;true&quot; name=&quot;BuilderScmSource&quot;  order=&quot;Setting&quot;&gt;
      &lt;description&gt;source code repository connection string&lt;/description&gt;
        &lt;supertype&gt;
          &lt;typereference name=&quot;BuilderSetting&quot;/&gt;
        &lt;/supertype&gt;
        &lt;attributes&gt;
          &lt;attribute name=&quot;scmSource&quot; type-property=&quot;settingValue&quot;/&gt;
        &lt;/attributes&gt;
    &lt;/type&gt;
&lt;/types&gt;
&lt;/pre&gt;

Only the package install root is set via the builder object's settings. This value determines where the package is installed when it is deployed and is often set to a property reference as opposed to an absolute path as in this case:

&lt;pre&gt;
macosx:objects anthony$ cat sample.xml 
&lt;?xml version=&quot;1.0&quot;?&gt;

&lt;!DOCTYPE project PUBLIC &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; &quot;project.dtd&quot;&gt;

&lt;project&gt;
  &lt;setting type=&quot;BuilderScmSource&quot; name=&quot;sample&quot; settingValue=&quot;file:///home/anthony/svn/myapp/trunk&quot;/&gt;
  &lt;setting type=&quot;BuilderScmConnection&quot; name=&quot;sample&quot; settingValue=&quot;file:///home/anthony/svn/myapp/branches/1.2&quot;/&gt;
  &lt;setting type=&quot;BuilderVersionTag&quot; name=&quot;sample&quot; settingValue=&quot;release&quot;/&gt;
  &lt;setting type=&quot;BuilderVersionMajor&quot; name=&quot;sample&quot; settingValue=&quot;1&quot;/&gt;
  &lt;setting type=&quot;BuilderVersionMinor&quot; name=&quot;sample&quot; settingValue=&quot;2&quot;/&gt;
  &lt;setting type=&quot;BuilderBuildstamp&quot; name=&quot;sample&quot; settingValue=&quot;none&quot;/&gt;
  &lt;setting type=&quot;BuilderPackageFilebase&quot; name=&quot;sample&quot; settingValue=&quot;myapp&quot;/&gt;
  &lt;setting type=&quot;BuilderPackageInstallroot&quot; name=&quot;sample&quot; settingValue=&quot;/tmp/myapp&quot;/&gt;

  &lt;deployment type=&quot;ZipReleaseBuilder&quot; name=&quot;sample&quot; description=&quot;Sample Zip release builder instance&quot; basedir=&quot;/home/anthony/build/myapp&quot; installRoot=&quot;/home/anthony/target/myapp&quot;&gt;
    &lt;resources replace=&quot;true&quot;&gt;
      &lt;resource type=&quot;BuilderScmSource&quot; name=&quot;sample&quot;/&gt;
      &lt;resource type=&quot;BuilderScmConnection&quot; name=&quot;sample&quot;/&gt;
      &lt;resource type=&quot;BuilderVersionTag&quot; name=&quot;sample&quot;/&gt;
      &lt;resource type=&quot;BuilderVersionMajor&quot; name=&quot;sample&quot;/&gt;
      &lt;resource type=&quot;BuilderVersionMinor&quot; name=&quot;sample&quot;/&gt;
      &lt;resource type=&quot;BuilderBuildstamp&quot; name=&quot;sample&quot;/&gt;
      &lt;resource type=&quot;BuilderPackageFilebase&quot; name=&quot;sample&quot;/&gt;
      &lt;resource type=&quot;BuilderPackageInstallroot&quot; name=&quot;sample&quot;/&gt;
    &lt;/resources&gt;
    &lt;referrers&gt;
      &lt;resource type=&quot;Node&quot; name=&quot;winxp&quot;/&gt;
    &lt;/referrers&gt;
  &lt;/deployment&gt;
&lt;/project&gt;
&lt;/pre&gt;

Building the type, re-loading the builder object, installing the new version on the client and running the command yields:

&lt;pre&gt;
winxp:myapp anthony$ ctl -p development -t ZipReleaseBuilder -r sample -c repoImport
Created dir: E:\home\anthony\ctier\ctl\projects\development\deployments\ZipReleaseBuilder\sample\tmp\Builder-repoImport-20091006171346
Condition: isProcessableWithoutExistingPropfile result: true
opts.propfile set to: autogenerated-builder.properties
Creating new property file: E:\home\anthony\ctier\ctl\projects\development\deployments\ZipReleaseBuilder\sample\tmp\Builder-repoImport-20091006171346\import-count.properties
processing files in directory: '/home/anthony/target/myapp' matching: '(myapp)(?:-release.1.2.12)?\.(zip)$' ...
processing matched file: myapp-release.1.2.12.zip
Auto-generated builder properties file created: E:\home\anthony\target\myapp/autogenerated-builder.properties...
Copying 1 file to E:\home\anthony\target\myapp
Updating property file: E:\home\anthony\ctier\ctl\projects\development\deployments\ZipReleaseBuilder\sample\tmp\Builder-repoImport-20091006171346\import-count.properties
Copying 1 file to E:\home\anthony\ctier\ctl\projects\development\modules\Builder\commands
Getting: http://macosx:8080/jackrabbit/repository/controltier/projects/development/publish/modules/zip-head.jar
To: E:\home\anthony\ctier\ctl\var\tmp\downloads\development\zip-head.jar
Created dir: E:\home\anthony\ctier\ctl\projects\development\modules\zip
Expanding: E:\home\anthony\ctier\ctl\var\tmp\downloads\development\zip-head.jar into E:\home\anthony\ctier\ctl\projects\development\modules\zip
Attempting to get Package-head.jar ...
Getting: http://macosx:8080/jackrabbit/repository/controltier/projects/development/publish/modules/Package-head.jar
To: E:\home\anthony\ctier\ctl\var\tmp\downloads\development\Package-head.jar
Created dir: E:\home\anthony\ctier\ctl\projects\development\modules\Package
Expanding: E:\home\anthony\ctier\ctl\var\tmp\downloads\development\Package-head.jar into E:\home\anthony\ctier\ctl\projects\development\modules\Package
uploading file: E:\home\anthony\target\myapp\myapp-release.1.2.12.zip to: http://macosx:8080/jackrabbit/repository/controltier/projects/pkgs/development/zip/zips/myapp-release.1.2.12.zip...
Puted 1 file to http://macosx:8080/jackrabbit/repository/controltier/projects/pkgs/development/zip/zips/myapp-release.1.2.12.zip
Creating new property file: E:\home\anthony\ctier\ctl\projects\development\deployments\ZipReleaseBuilder\sample\tmp\Builder-repoImport-20091006171346\import-list.properties
Deleting: E:\home\anthony\ctier\ctl\projects\development\modules\Builder\commands\entity2010352542.properties
Current count: 1
Batch request performed successfully.
Current count: 1
[command.timer.Builder.repoImport: 5.953 sec]
&lt;/pre&gt;

At this point the package - &quot;myapp-release.1.2.12.zip&quot; - is visible in the package list in Workbench and the package file has been uploaded to the WebDAV.

== Overriding the Build workflow ==

The last step of the implementation is to override the Build workflow command in order to add the new &quot;scmMakeBranch&quot; command:

&lt;pre&gt;
macosx:ZipReleaseBuilder anthony$ cat type.xml 
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;

&lt;types
    xmlns:module=&quot;http://open.controltier.com/base/Modules#&quot;
    xmlns:type=&quot;http://open.controltier.com/base/Types#&quot;
    xmlns:cmd=&quot;http://open.controltier.com/base/Modules/Commands#&quot;&gt;

    &lt;type name=&quot;ZipReleaseBuilder&quot; role=&quot;concrete&quot; uniqueInstances=&quot;true&quot;&gt;
        &lt;description&gt;Custom Zip file based release builder&lt;/description&gt;

        &lt;supertype&gt;
            &lt;typereference name=&quot;Builder&quot;/&gt;
        &lt;/supertype&gt;

        &lt;command-settings&gt;
            &lt;notification notify=&quot;false&quot;/&gt;
            &lt;template-directory&gt;&lt;/template-directory&gt;
            &lt;dependency-view parents=&quot;false&quot; children=&quot;true&quot; proximity=&quot;1&quot;/&gt;
            &lt;logger name=&quot;ZipReleaseBuilder&quot;/&gt;
        &lt;/command-settings&gt;

        &lt;attributes&gt;
          &lt;attribute-default name=&quot;scmBinding&quot; value=&quot;svn&quot;/&gt;
          &lt;attribute-default name=&quot;scmSource&quot; value=&quot;&quot;/&gt;
          &lt;attribute-default name=&quot;scmConnection&quot; value=&quot;&quot;/&gt;
          &lt;attribute-default name=&quot;packageExtension&quot; value=&quot;zip&quot;/&gt;
          &lt;attribute-default name=&quot;packageType&quot; value=&quot;zip&quot;/&gt;
          &lt;attribute-default name=&quot;packageVendor&quot; value=&quot;&quot;/&gt;
          &lt;attribute-default name=&quot;importMin&quot; value=&quot;1&quot;/&gt;
          &lt;attribute-default name=&quot;importMax&quot; value=&quot;1&quot;/&gt;
        &lt;/attributes&gt;

        &lt;constraints&gt;
          &lt;dependency-constraint enforced=&quot;false&quot; kind=&quot;child&quot;&gt;
            &lt;allowedtypes&gt;
              &lt;typereference name=&quot;BuilderScmBinding&quot;/&gt;
              &lt;typereference name=&quot;BuilderScmSource&quot;/&gt;
              &lt;typereference name=&quot;BuilderScmConnection&quot;/&gt;
              &lt;typereference name=&quot;BuilderVersionTag&quot;/&gt;
              &lt;typereference name=&quot;BuilderVersionMajor&quot;/&gt;
              &lt;typereference name=&quot;BuilderVersionMinor&quot;/&gt;
              &lt;typereference name=&quot;BuilderBuildstamp&quot;/&gt;
              &lt;typereference name=&quot;BuilderPackageFilebase&quot;/&gt;
              &lt;typereference name=&quot;BuilderPackageSeparator&quot;/&gt;
              &lt;typereference name=&quot;BuilderPackageExtension&quot;/&gt;
              &lt;typereference name=&quot;BuilderPackageType&quot;/&gt;
              &lt;typereference name=&quot;BuilderPackageInstallroot&quot;/&gt;
              &lt;typereference name=&quot;BuilderPackageVendor&quot;/&gt;
              &lt;typereference name=&quot;BuilderImportMin&quot;/&gt;
              &lt;typereference name=&quot;BuilderImportMax&quot;/&gt;
            &lt;/allowedtypes&gt;
            &lt;singletontypes&gt;
              &lt;typereference name=&quot;BuilderScmBinding&quot;/&gt;
              &lt;typereference name=&quot;BuilderScmSource&quot;/&gt;
              &lt;typereference name=&quot;BuilderScmConnection&quot;/&gt;
              &lt;typereference name=&quot;BuilderVersionTag&quot;/&gt;
              &lt;typereference name=&quot;BuilderVersionMajor&quot;/&gt;
              &lt;typereference name=&quot;BuilderVersionMinor&quot;/&gt;
              &lt;typereference name=&quot;BuilderBuildstamp&quot;/&gt;
              &lt;typereference name=&quot;BuilderPackageFilebase&quot;/&gt;
              &lt;typereference name=&quot;BuilderPackageSeparator&quot;/&gt;
              &lt;typereference name=&quot;BuilderPackageExtension&quot;/&gt;
              &lt;typereference name=&quot;BuilderPackageType&quot;/&gt;
              &lt;typereference name=&quot;BuilderPackageInstallroot&quot;/&gt;
              &lt;typereference name=&quot;BuilderPackageVendor&quot;/&gt;
              &lt;typereference name=&quot;BuilderImportMin&quot;/&gt;
              &lt;typereference name=&quot;BuilderImportMax&quot;/&gt;
            &lt;/singletontypes&gt;
          &lt;/dependency-constraint&gt;
        &lt;/constraints&gt;

        &lt;commands&gt;
          &lt;command name=&quot;scmMakeBranch&quot; description=&quot;Make or re-make a branch from the source URL&quot; command-type=&quot;AntCommand&quot;&gt;
            &lt;implementation&gt;
              &lt;exec executable=&quot;svn&quot; failonerror=&quot;false&quot; resultproperty=&quot;resultProperty&quot;&gt;
                &lt;arg line=&quot;list ${opts.connection}&quot;/&gt;
              &lt;/exec&gt;

              &lt;if&gt;
                &lt;equals arg1=&quot;${resultProperty}&quot; arg2=&quot;0&quot;/&gt;
                &lt;then&gt;
                  &lt;exec executable=&quot;svn&quot;&gt;
                    &lt;arg line=&quot;delete --non-interactive --message &amp;quot;Automatically dropped branch&amp;quot; ${opts.connection}&quot;/&gt;
                  &lt;/exec&gt;
                &lt;/then&gt;
              &lt;/if&gt;

              &lt;exec executable=&quot;svn&quot;&gt;
                &lt;arg line=&quot;copy --non-interactive --message &amp;quot;Automatically created branch&amp;quot; ${opts.source} ${opts.connection}&quot;/&gt;
              &lt;/exec&gt;
            &lt;/implementation&gt;
            &lt;opts&gt;
              &lt;opt parameter=&quot;source&quot; description=&quot;source URL&quot; required=&quot;false&quot; property=&quot;opts.source&quot; type=&quot;string&quot; defaultproperty=&quot;resource.attribute.scmSource&quot;/&gt;
              &lt;opt parameter=&quot;connection&quot; description=&quot;release URL&quot; required=&quot;false&quot; property=&quot;opts.connection&quot; type=&quot;string&quot; defaultproperty=&quot;resource.attribute.scmConnection&quot;/&gt;
            &lt;/opts&gt;
          &lt;/command&gt;
          &lt;command name=&quot;runBuildScript&quot; description=&quot;Invoke the build tool.&quot; command-type=&quot;AntCommand&quot; daemonized=&quot;false&quot;&gt;
            &lt;implementation&gt;
              &lt;mkdir dir=&quot;${opts.targetdir}&quot;/&gt;
              &lt;zip destfile=&quot;${opts.targetdir}/${opts.filebase}${opts.separator}${opts.buildstamp}.${opts.extension}&quot; basedir=&quot;${opts.basedir}&quot; update=&quot;false&quot;/&gt;
            &lt;/implementation&gt;
            &lt;opts&gt;
              &lt;opt parameter=&quot;basedir&quot; description=&quot;directory where build resources reside&quot; required=&quot;false&quot; property=&quot;opts.basedir&quot; type=&quot;string&quot; defaultproperty=&quot;resource.attribute.basedir&quot;/&gt;
              &lt;opt parameter=&quot;targetdir&quot; description=&quot;directory build artifacts will be written&quot; required=&quot;false&quot; property=&quot;opts.targetdir&quot; type=&quot;string&quot; defaultproperty=&quot;resource.attribute.targetdir&quot;/&gt;
              &lt;opt parameter=&quot;filebase&quot; description=&quot;package file base name&quot; required=&quot;false&quot; property=&quot;opts.filebase&quot; type=&quot;string&quot; defaultproperty=&quot;resource.attribute.packageFilebase&quot;/&gt;
              &lt;opt parameter=&quot;separator&quot; description=&quot;package name/version separator&quot; required=&quot;false&quot; property=&quot;opts.separator&quot; type=&quot;string&quot; defaultproperty=&quot;resource.attribute.packageSeparator&quot;/&gt;
              &lt;opt parameter=&quot;buildstamp&quot; description=&quot;build identifier&quot; required=&quot;false&quot; property=&quot;opts.buildstamp&quot; type=&quot;string&quot; defaultproperty=&quot;resource.attribute.buildstamp&quot;/&gt;
              &lt;opt parameter=&quot;extension&quot; description=&quot;package file extension&quot; required=&quot;false&quot; property=&quot;opts.extension&quot; type=&quot;string&quot; defaultproperty=&quot;resource.attribute.packageExtension&quot;/&gt;
            &lt;/opts&gt;
          &lt;/command&gt;
          &lt;command name=&quot;Build&quot; description=&quot;Run the build cycle.&quot; command-type=&quot;WorkflowCommand&quot; error-handler-type=&quot;FAIL&quot;&gt;
            &lt;opts&gt;
              &lt;opt parameter=&quot;buildstamp&quot; description=&quot;build identifier&quot; required=&quot;false&quot; property=&quot;opts.buildstamp&quot; type=&quot;string&quot;/&gt;
            &lt;/opts&gt;
            &lt;error-handler/&gt;
            &lt;workflow threadcount=&quot;1&quot;&gt;
              &lt;command name=&quot;scmMakeBranch&quot;/&gt;
              &lt;command name=&quot;scmCheckout&quot;/&gt;
              &lt;command name=&quot;setBuildstamp&quot;/&gt;
              &lt;command name=&quot;runBuildScript&quot;/&gt;
              &lt;command name=&quot;repoImport&quot;/&gt;
            &lt;/workflow&gt;
          &lt;/command&gt;
        &lt;/commands&gt;
    &lt;/type&gt;

    &lt;type role=&quot;concrete&quot; uniqueInstances=&quot;true&quot; name=&quot;BuilderScmSource&quot;  order=&quot;Setting&quot;&gt;
      &lt;description&gt;source code repository connection string&lt;/description&gt;
        &lt;supertype&gt;
          &lt;typereference name=&quot;BuilderSetting&quot;/&gt;
        &lt;/supertype&gt;
        &lt;attributes&gt;
          &lt;attribute name=&quot;scmSource&quot; type-property=&quot;settingValue&quot;/&gt;
        &lt;/attributes&gt;
    &lt;/type&gt;
&lt;/types&gt;
&lt;/pre&gt;

Once this final version of the module has been built, uploaded and installed on the client; the Build workflow will work in its entirety:

&lt;pre&gt;
winxp:myapp anthony$ ctl -p development -t ZipReleaseBuilder -r sample -c Build
Start: &quot;Run the build cycle.&quot; commands: scmMakeBranch,scmCheckout,setBuildstamp,runBuildScript,repoImport
begin workflow command (1/5) -&gt; &quot;scmMakeBranch &quot; ...
dir1/
dir2/
dir3/
file1
file2
file3

Committed revision 13.

Committed revision 14.
end workflow command (1/5) -&gt; &quot;scmMakeBranch &quot;
begin workflow command (2/5) -&gt; &quot;scmCheckout &quot; ...
scmCheckout parameters: {basedir=&quot;/home/anthony/build/myapp&quot;, connection=&quot;file:///home/anthony/svn/myapp/branches/1.2&quot;, module=&quot;&quot;, label=&quot;&quot;, scmcommand=&quot;checkout&quot; }
Checked out revision 14.
[command.timer.Builder.scmCheckout: 0.469 sec]
end workflow command (2/5) -&gt; &quot;scmCheckout &quot;
begin workflow command (3/5) -&gt; &quot;setBuildstamp &quot; ...
Checking &quot;file:///home/anthony/svn/myapp/branches/1.2&quot; for the last changed revision ...
Deleting: E:\home\anthony\ctier\ctl\projects\development\deployments\ZipReleaseBuilder\sample\var\null334720472.out
Automatically set buildstamp to &quot;release.1.2.14&quot;
[command.timer.Builder.setBuildstamp: 0.422 sec]
end workflow command (3/5) -&gt; &quot;setBuildstamp &quot;
begin workflow command (4/5) -&gt; &quot;runBuildScript &quot; ...
Building zip: E:\home\anthony\target\myapp\myapp-release.1.2.14.zip
end workflow command (4/5) -&gt; &quot;runBuildScript &quot;
begin workflow command (5/5) -&gt; &quot;repoImport &quot; ...
Created dir: E:\home\anthony\ctier\ctl\projects\development\deployments\ZipReleaseBuilder\sample\tmp\Builder-repoImport-20091006173707
Condition: isProcessableWithoutExistingPropfile result: true
opts.propfile set to: autogenerated-builder.properties
Creating new property file: E:\home\anthony\ctier\ctl\projects\development\deployments\ZipReleaseBuilder\sample\tmp\Builder-repoImport-20091006173707\import-count.properties
processing files in directory: '/home/anthony/target/myapp' matching: '(myapp)(?:-release.1.2.14)?\.(zip)$' ...
processing matched file: myapp-release.1.2.14.zip
Deleting: E:\home\anthony\target\myapp\autogenerated-builder.properties
Auto-generated builder properties file created: E:\home\anthony\target\myapp/autogenerated-builder.properties...
Copying 1 file to E:\home\anthony\target\myapp
Updating property file: E:\home\anthony\ctier\ctl\projects\development\deployments\ZipReleaseBuilder\sample\tmp\Builder-repoImport-20091006173707\import-count.properties
Copying 1 file to E:\home\anthony\ctier\ctl\projects\development\modules\Builder\commands
Getting: http://macosx:8080/jackrabbit/repository/controltier/projects/development/publish/modules/zip-head.jar
To: E:\home\anthony\ctier\ctl\var\tmp\downloads\development\zip-head.jar
Not modified - so not downloaded
zip up to date
Attempting to get Package-head.jar ...
Getting: http://macosx:8080/jackrabbit/repository/controltier/projects/development/publish/modules/Package-head.jar
To: E:\home\anthony\ctier\ctl\var\tmp\downloads\development\Package-head.jar
Not modified - so not downloaded
Package up to date
uploading file: E:\home\anthony\target\myapp\myapp-release.1.2.14.zip to: http://macosx:8080/jackrabbit/repository/controltier/projects/pkgs/development/zip/zips/myapp-release.1.2.14.zip...
Puted 1 file to http://macosx:8080/jackrabbit/repository/controltier/projects/pkgs/development/zip/zips/myapp-release.1.2.14.zip
Creating new property file: E:\home\anthony\ctier\ctl\projects\development\deployments\ZipReleaseBuilder\sample\tmp\Builder-repoImport-20091006173707\import-list.properties
Deleting: E:\home\anthony\ctier\ctl\projects\development\modules\Builder\commands\entity953464875.properties
Current count: 1
Batch request performed successfully.
Current count: 1
[command.timer.Builder.repoImport: 8.641 sec]
end workflow command (5/5) -&gt; &quot;repoImport &quot;
[command.timer.development.ZipReleaseBuilder.Build: 15.235 sec]
Workflow completed. execution time: 15.235 sec
winxp:myapp anthony$ echo $?
0
&lt;/pre&gt;

== Summary ==

In summary, this example has shown how a builder sub-type can be created to implement custom requirements while exploiting default implementations from the base type where reasonable. 

Each iteration of the example has shown what it takes to implement or configure a command that ultimately comprises one of the steps of an extended version of the build workflow.

The final version of the module is defined by the following type.xml:

&lt;pre&gt;
macosx:ZipReleaseBuilder anthony$ cat type.xml 
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;

&lt;types
    xmlns:module=&quot;http://open.controltier.com/base/Modules#&quot;
    xmlns:type=&quot;http://open.controltier.com/base/Types#&quot;
    xmlns:cmd=&quot;http://open.controltier.com/base/Modules/Commands#&quot;&gt;

    &lt;type name=&quot;ZipReleaseBuilder&quot; role=&quot;concrete&quot; uniqueInstances=&quot;true&quot;&gt;
        &lt;description&gt;Custom Zip file based release builder&lt;/description&gt;

        &lt;supertype&gt;
            &lt;typereference name=&quot;Builder&quot;/&gt;
        &lt;/supertype&gt;

        &lt;command-settings&gt;
            &lt;notification notify=&quot;false&quot;/&gt;
            &lt;template-directory&gt;&lt;/template-directory&gt;
            &lt;dependency-view parents=&quot;false&quot; children=&quot;true&quot; proximity=&quot;1&quot;/&gt;
            &lt;logger name=&quot;ZipReleaseBuilder&quot;/&gt;
        &lt;/command-settings&gt;

        &lt;attributes&gt;
          &lt;attribute-default name=&quot;scmBinding&quot; value=&quot;svn&quot;/&gt;
          &lt;attribute-default name=&quot;scmSource&quot; value=&quot;&quot;/&gt;
          &lt;attribute-default name=&quot;scmConnection&quot; value=&quot;&quot;/&gt;
          &lt;attribute-default name=&quot;packageExtension&quot; value=&quot;zip&quot;/&gt;
          &lt;attribute-default name=&quot;packageType&quot; value=&quot;zip&quot;/&gt;
          &lt;attribute-default name=&quot;packageVendor&quot; value=&quot;&quot;/&gt;
          &lt;attribute-default name=&quot;importMin&quot; value=&quot;1&quot;/&gt;
          &lt;attribute-default name=&quot;importMax&quot; value=&quot;1&quot;/&gt;
        &lt;/attributes&gt;

        &lt;constraints&gt;
          &lt;dependency-constraint enforced=&quot;false&quot; kind=&quot;child&quot;&gt;
            &lt;allowedtypes&gt;
              &lt;typereference name=&quot;BuilderScmBinding&quot;/&gt;
              &lt;typereference name=&quot;BuilderScmSource&quot;/&gt;
              &lt;typereference name=&quot;BuilderScmConnection&quot;/&gt;
              &lt;typereference name=&quot;BuilderVersionTag&quot;/&gt;
              &lt;typereference name=&quot;BuilderVersionMajor&quot;/&gt;
              &lt;typereference name=&quot;BuilderVersionMinor&quot;/&gt;
              &lt;typereference name=&quot;BuilderBuildstamp&quot;/&gt;
              &lt;typereference name=&quot;BuilderPackageFilebase&quot;/&gt;
              &lt;typereference name=&quot;BuilderPackageSeparator&quot;/&gt;
              &lt;typereference name=&quot;BuilderPackageExtension&quot;/&gt;
              &lt;typereference name=&quot;BuilderPackageType&quot;/&gt;
              &lt;typereference name=&quot;BuilderPackageInstallroot&quot;/&gt;
              &lt;typereference name=&quot;BuilderPackageVendor&quot;/&gt;
              &lt;typereference name=&quot;BuilderImportMin&quot;/&gt;
              &lt;typereference name=&quot;BuilderImportMax&quot;/&gt;
            &lt;/allowedtypes&gt;
            &lt;singletontypes&gt;
              &lt;typereference name=&quot;BuilderScmBinding&quot;/&gt;
              &lt;typereference name=&quot;BuilderScmSource&quot;/&gt;
              &lt;typereference name=&quot;BuilderScmConnection&quot;/&gt;
              &lt;typereference name=&quot;BuilderVersionTag&quot;/&gt;
              &lt;typereference name=&quot;BuilderVersionMajor&quot;/&gt;
              &lt;typereference name=&quot;BuilderVersionMinor&quot;/&gt;
              &lt;typereference name=&quot;BuilderBuildstamp&quot;/&gt;
              &lt;typereference name=&quot;BuilderPackageFilebase&quot;/&gt;
              &lt;typereference name=&quot;BuilderPackageSeparator&quot;/&gt;
              &lt;typereference name=&quot;BuilderPackageExtension&quot;/&gt;
              &lt;typereference name=&quot;BuilderPackageType&quot;/&gt;
              &lt;typereference name=&quot;BuilderPackageInstallroot&quot;/&gt;
              &lt;typereference name=&quot;BuilderPackageVendor&quot;/&gt;
              &lt;typereference name=&quot;BuilderImportMin&quot;/&gt;
              &lt;typereference name=&quot;BuilderImportMax&quot;/&gt;
            &lt;/singletontypes&gt;
          &lt;/dependency-constraint&gt;
        &lt;/constraints&gt;

        &lt;commands&gt;
          &lt;command name=&quot;scmMakeBranch&quot; description=&quot;Make or re-make a branch from the source URL&quot; command-type=&quot;AntCommand&quot;&gt;
            &lt;implementation&gt;
              &lt;exec executable=&quot;svn&quot; failonerror=&quot;false&quot; resultproperty=&quot;resultProperty&quot;&gt;
                &lt;arg line=&quot;list ${opts.connection}&quot;/&gt;
              &lt;/exec&gt;

              &lt;if&gt;
                &lt;equals arg1=&quot;${resultProperty}&quot; arg2=&quot;0&quot;/&gt;
                &lt;then&gt;
                  &lt;exec executable=&quot;svn&quot;&gt;
                    &lt;arg line=&quot;delete --non-interactive --message &amp;quot;Automatically dropped branch&amp;quot; ${opts.connection}&quot;/&gt;
                  &lt;/exec&gt;
                &lt;/then&gt;
              &lt;/if&gt;

              &lt;exec executable=&quot;svn&quot;&gt;
                &lt;arg line=&quot;copy --non-interactive --message &amp;quot;Automatically created branch&amp;quot; ${opts.source} ${opts.connection}&quot;/&gt;
              &lt;/exec&gt;
            &lt;/implementation&gt;
            &lt;opts&gt;
              &lt;opt parameter=&quot;source&quot; description=&quot;source URL&quot; required=&quot;false&quot; property=&quot;opts.source&quot; type=&quot;string&quot; defaultproperty=&quot;resource.attribute.scmSource&quot;/&gt;
              &lt;opt parameter=&quot;connection&quot; description=&quot;release URL&quot; required=&quot;false&quot; property=&quot;opts.connection&quot; type=&quot;string&quot; defaultproperty=&quot;resource.attribute.scmConnection&quot;/&gt;
            &lt;/opts&gt;
          &lt;/command&gt;
          &lt;command name=&quot;runBuildScript&quot; description=&quot;Invoke the build tool.&quot; command-type=&quot;AntCommand&quot; daemonized=&quot;false&quot;&gt;
            &lt;implementation&gt;
              &lt;mkdir dir=&quot;${opts.targetdir}&quot;/&gt;
              &lt;zip destfile=&quot;${opts.targetdir}/${opts.filebase}${opts.separator}${opts.buildstamp}.${opts.extension}&quot; basedir=&quot;${opts.basedir}&quot; update=&quot;false&quot;/&gt;
            &lt;/implementation&gt;
            &lt;opts&gt;
              &lt;opt parameter=&quot;basedir&quot; description=&quot;directory where build resources reside&quot; required=&quot;false&quot; property=&quot;opts.basedir&quot; type=&quot;string&quot; defaultproperty=&quot;resource.attribute.basedir&quot;/&gt;
              &lt;opt parameter=&quot;targetdir&quot; description=&quot;directory build artifacts will be written&quot; required=&quot;false&quot; property=&quot;opts.targetdir&quot; type=&quot;string&quot; defaultproperty=&quot;resource.attribute.targetdir&quot;/&gt;
              &lt;opt parameter=&quot;filebase&quot; description=&quot;package file base name&quot; required=&quot;false&quot; property=&quot;opts.filebase&quot; type=&quot;string&quot; defaultproperty=&quot;resource.attribute.packageFilebase&quot;/&gt;
              &lt;opt parameter=&quot;separator&quot; description=&quot;package name/version separator&quot; required=&quot;false&quot; property=&quot;opts.separator&quot; type=&quot;string&quot; defaultproperty=&quot;resource.attribute.packageSeparator&quot;/&gt;
              &lt;opt parameter=&quot;buildstamp&quot; description=&quot;build identifier&quot; required=&quot;false&quot; property=&quot;opts.buildstamp&quot; type=&quot;string&quot; defaultproperty=&quot;resource.attribute.buildstamp&quot;/&gt;
              &lt;opt parameter=&quot;extension&quot; description=&quot;package file extension&quot; required=&quot;false&quot; property=&quot;opts.extension&quot; type=&quot;string&quot; defaultproperty=&quot;resource.attribute.packageExtension&quot;/&gt;
            &lt;/opts&gt;
          &lt;/command&gt;
          &lt;command name=&quot;Build&quot; description=&quot;Run the build cycle.&quot; command-type=&quot;WorkflowCommand&quot; error-handler-type=&quot;FAIL&quot;&gt;
            &lt;opts&gt;
              &lt;opt parameter=&quot;buildstamp&quot; description=&quot;build identifier&quot; required=&quot;false&quot; property=&quot;opts.buildstamp&quot; type=&quot;string&quot;/&gt;
            &lt;/opts&gt;
            &lt;error-handler/&gt;
            &lt;workflow threadcount=&quot;1&quot;&gt;
              &lt;command name=&quot;scmMakeBranch&quot;/&gt;
              &lt;command name=&quot;scmCheckout&quot;/&gt;
              &lt;command name=&quot;setBuildstamp&quot;/&gt;
              &lt;command name=&quot;runBuildScript&quot;/&gt;
              &lt;command name=&quot;repoImport&quot;/&gt;
            &lt;/workflow&gt;
          &lt;/command&gt;
        &lt;/commands&gt;
    &lt;/type&gt;

    &lt;type role=&quot;concrete&quot; uniqueInstances=&quot;true&quot; name=&quot;BuilderScmSource&quot;  order=&quot;Setting&quot;&gt;
      &lt;description&gt;source code repository connection string&lt;/description&gt;
        &lt;supertype&gt;
          &lt;typereference name=&quot;BuilderSetting&quot;/&gt;
        &lt;/supertype&gt;
        &lt;attributes&gt;
          &lt;attribute name=&quot;scmSource&quot; type-property=&quot;settingValue&quot;/&gt;
        &lt;/attributes&gt;
    &lt;/type&gt;
&lt;/types&gt;
&lt;/pre&gt;

While the example builder object is setup as follows:

&lt;pre&gt;
macosx:objects anthony$ cat sample.xml 
&lt;?xml version=&quot;1.0&quot;?&gt;

&lt;!DOCTYPE project PUBLIC &quot;-//ControlTier Software Inc.//DTD Project Document 1.0//EN&quot; &quot;project.dtd&quot;&gt;

&lt;project&gt;
  &lt;setting type=&quot;BuilderScmSource&quot; name=&quot;sample&quot; settingValue=&quot;file:///home/anthony/svn/myapp/trunk&quot;/&gt;
  &lt;setting type=&quot;BuilderScmConnection&quot; name=&quot;sample&quot; settingValue=&quot;file:///home/anthony/svn/myapp/branches/1.2&quot;/&gt;
  &lt;setting type=&quot;BuilderVersionTag&quot; name=&quot;sample&quot; settingValue=&quot;release&quot;/&gt;
  &lt;setting type=&quot;BuilderVersionMajor&quot; name=&quot;sample&quot; settingValue=&quot;1&quot;/&gt;
  &lt;setting type=&quot;BuilderVersionMinor&quot; name=&quot;sample&quot; settingValue=&quot;2&quot;/&gt;
  &lt;setting type=&quot;BuilderBuildstamp&quot; name=&quot;sample&quot; settingValue=&quot;none&quot;/&gt;
  &lt;setting type=&quot;BuilderPackageFilebase&quot; name=&quot;sample&quot; settingValue=&quot;myapp&quot;/&gt;
  &lt;setting type=&quot;BuilderPackageInstallroot&quot; name=&quot;sample&quot; settingValue=&quot;/tmp/myapp&quot;/&gt;

  &lt;deployment type=&quot;ZipReleaseBuilder&quot; name=&quot;sample&quot; description=&quot;Sample Zip release builder instance&quot; basedir=&quot;/home/anthony/build/myapp&quot; installRoot=&quot;/home/anthony/target/myapp&quot;&gt;
    &lt;resources replace=&quot;true&quot;&gt;
      &lt;resource type=&quot;BuilderScmSource&quot; name=&quot;sample&quot;/&gt;
      &lt;resource type=&quot;BuilderScmConnection&quot; name=&quot;sample&quot;/&gt;
      &lt;resource type=&quot;BuilderVersionTag&quot; name=&quot;sample&quot;/&gt;
      &lt;resource type=&quot;BuilderVersionMajor&quot; name=&quot;sample&quot;/&gt;
      &lt;resource type=&quot;BuilderVersionMinor&quot; name=&quot;sample&quot;/&gt;
      &lt;resource type=&quot;BuilderBuildstamp&quot; name=&quot;sample&quot;/&gt;
      &lt;resource type=&quot;BuilderPackageFilebase&quot; name=&quot;sample&quot;/&gt;
      &lt;resource type=&quot;BuilderPackageInstallroot&quot; name=&quot;sample&quot;/&gt;
    &lt;/resources&gt;
    &lt;referrers&gt;
      &lt;resource type=&quot;Node&quot; name=&quot;winxp&quot;/&gt;
    &lt;/referrers&gt;
  &lt;/deployment&gt;
&lt;/project&gt;
&lt;/pre&gt;

QED

{{Manual/navbox}}

[[Category:Builder Examples]]</text>
    </revision>
  </page>
</mediawiki>
